,Id,Name,NodeType,Fullname,Signature,Filename,Code,LineNumber,LineNumberEnd,ColumnNumber,ColumnNumberEnd,LineOfCode,NumberOfOperators,SetOfOperators,NumberOfOperands,SetOfOperands,FanIn,FanOut,McCabe,AccCyc,ConCf,ConDf,ConZc,ConRf,ConVal,Parma,ParmaIn,ParmaOut,RetType
0,478401,core\nginx.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1,478402,core\nginx.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2,478403,core\ngx_array.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3,478404,core\ngx_array.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4,478405,core\ngx_buf.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
5,478406,core\ngx_buf.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6,478407,core\ngx_conf_file.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7,478408,core\ngx_conf_file.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8,478409,core\ngx_config.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
9,478410,core\ngx_connection.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
10,478411,core\ngx_connection.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
11,478412,core\ngx_core.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
12,478413,core\ngx_cpuinfo.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
13,478414,core\ngx_crc.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
14,478415,core\ngx_crc32.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
15,478416,core\ngx_crc32.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
16,478417,core\ngx_crypt.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
17,478418,core\ngx_crypt.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
18,478419,core\ngx_cycle.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
19,478420,core\ngx_cycle.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
20,478421,core\ngx_file.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
21,478422,core\ngx_file.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
22,478423,core\ngx_hash.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
23,478424,core\ngx_hash.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
24,478425,core\ngx_inet.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
25,478426,core\ngx_inet.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
26,478427,core\ngx_list.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
27,478428,core\ngx_list.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
28,478429,core\ngx_log.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
29,478430,core\ngx_log.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
30,478431,core\ngx_md5.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
31,478432,core\ngx_md5.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
32,478433,core\ngx_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
33,478434,core\ngx_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
34,478435,core\ngx_murmurhash.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
35,478436,core\ngx_murmurhash.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
36,478437,core\ngx_open_file_cache.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
37,478438,core\ngx_open_file_cache.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
38,478439,core\ngx_output_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
39,478440,core\ngx_palloc.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
40,478441,core\ngx_palloc.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
41,478442,core\ngx_parse.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
42,478443,core\ngx_parse.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
43,478444,core\ngx_parse_time.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
44,478445,core\ngx_parse_time.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
45,478446,core\ngx_proxy_protocol.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
46,478447,core\ngx_proxy_protocol.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
47,478448,core\ngx_queue.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
48,478449,core\ngx_queue.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
49,478450,core\ngx_radix_tree.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
50,478451,core\ngx_radix_tree.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
51,478452,core\ngx_rbtree.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
52,478453,core\ngx_rbtree.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
53,478454,core\ngx_regex.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
54,478455,core\ngx_regex.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
55,478456,core\ngx_resolver.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
56,478457,core\ngx_resolver.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
57,478458,core\ngx_rwlock.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
58,478459,core\ngx_rwlock.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
59,478460,core\ngx_sha1.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
60,478461,core\ngx_sha1.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
61,478462,core\ngx_shmtx.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
62,478463,core\ngx_shmtx.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
63,478464,core\ngx_slab.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
64,478465,core\ngx_slab.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
65,478466,core\ngx_spinlock.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
66,478467,core\ngx_string.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
67,478468,core\ngx_string.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
68,478469,core\ngx_syslog.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
69,478470,core\ngx_syslog.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
70,478471,core\ngx_thread_pool.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
71,478472,core\ngx_thread_pool.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
72,478473,core\ngx_times.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
73,478474,core\ngx_times.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
74,478475,event\modules\ngx_devpoll_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
75,478476,event\modules\ngx_epoll_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
76,478477,event\modules\ngx_eventport_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
77,478478,event\modules\ngx_iocp_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
78,478479,event\modules\ngx_iocp_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
79,478480,event\modules\ngx_kqueue_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
80,478481,event\modules\ngx_poll_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
81,478482,event\modules\ngx_select_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
82,478483,event\modules\ngx_win32_poll_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
83,478484,event\modules\ngx_win32_select_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
84,478485,event\ngx_event.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
85,478486,event\ngx_event.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
86,478487,event\ngx_event_accept.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
87,478488,event\ngx_event_acceptex.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
88,478489,event\ngx_event_connect.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
89,478490,event\ngx_event_connect.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
90,478491,event\ngx_event_connectex.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
91,478492,event\ngx_event_openssl.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
92,478493,event\ngx_event_openssl.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
93,478494,event\ngx_event_openssl_stapling.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
94,478495,event\ngx_event_pipe.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
95,478496,event\ngx_event_pipe.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
96,478497,event\ngx_event_posted.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
97,478498,event\ngx_event_posted.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
98,478499,event\ngx_event_timer.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
99,478500,event\ngx_event_timer.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
100,478501,event\ngx_event_udp.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
101,478502,http\modules\ngx_http_access_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
102,478503,http\modules\ngx_http_addition_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
103,478504,http\modules\ngx_http_auth_basic_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
104,478505,http\modules\ngx_http_auth_request_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
105,478506,http\modules\ngx_http_autoindex_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
106,478507,http\modules\ngx_http_browser_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
107,478508,http\modules\ngx_http_charset_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
108,478509,http\modules\ngx_http_chunked_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
109,478510,http\modules\ngx_http_dav_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
110,478511,http\modules\ngx_http_degradation_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
111,478512,http\modules\ngx_http_empty_gif_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
112,478513,http\modules\ngx_http_fastcgi_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
113,478514,http\modules\ngx_http_flv_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
114,478515,http\modules\ngx_http_geo_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
115,478516,http\modules\ngx_http_geoip_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
116,478517,http\modules\ngx_http_grpc_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
117,478518,http\modules\ngx_http_gunzip_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
118,478519,http\modules\ngx_http_gzip_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
119,478520,http\modules\ngx_http_gzip_static_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
120,478521,http\modules\ngx_http_headers_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
121,478522,http\modules\ngx_http_image_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
122,478523,http\modules\ngx_http_index_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
123,478524,http\modules\ngx_http_limit_conn_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
124,478525,http\modules\ngx_http_limit_req_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
125,478526,http\modules\ngx_http_log_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
126,478527,http\modules\ngx_http_map_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
127,478528,http\modules\ngx_http_memcached_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
128,478529,http\modules\ngx_http_mirror_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
129,478530,http\modules\ngx_http_mp4_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
130,478531,http\modules\ngx_http_not_modified_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
131,478532,http\modules\ngx_http_proxy_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
132,478533,http\modules\ngx_http_random_index_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
133,478534,http\modules\ngx_http_range_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
134,478535,http\modules\ngx_http_realip_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
135,478536,http\modules\ngx_http_referer_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
136,478537,http\modules\ngx_http_rewrite_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
137,478538,http\modules\ngx_http_scgi_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
138,478539,http\modules\ngx_http_secure_link_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
139,478540,http\modules\ngx_http_slice_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
140,478541,http\modules\ngx_http_split_clients_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
141,478542,http\modules\ngx_http_ssi_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
142,478543,http\modules\ngx_http_ssi_filter_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
143,478544,http\modules\ngx_http_ssl_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
144,478545,http\modules\ngx_http_ssl_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
145,478546,http\modules\ngx_http_static_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
146,478547,http\modules\ngx_http_stub_status_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
147,478548,http\modules\ngx_http_sub_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
148,478549,http\modules\ngx_http_try_files_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
149,478550,http\modules\ngx_http_upstream_hash_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
150,478551,http\modules\ngx_http_upstream_ip_hash_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
151,478552,http\modules\ngx_http_upstream_keepalive_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
152,478553,http\modules\ngx_http_upstream_least_conn_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
153,478554,http\modules\ngx_http_upstream_random_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
154,478555,http\modules\ngx_http_upstream_zone_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
155,478556,http\modules\ngx_http_userid_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
156,478557,http\modules\ngx_http_uwsgi_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
157,478558,http\modules\ngx_http_xslt_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
158,478559,http\modules\perl\ngx_http_perl_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
159,478560,http\modules\perl\ngx_http_perl_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
160,478561,http\ngx_http.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
161,478562,http\ngx_http.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
162,478563,http\ngx_http_cache.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
163,478564,http\ngx_http_config.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
164,478565,http\ngx_http_copy_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
165,478566,http\ngx_http_core_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
166,478567,http\ngx_http_core_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
167,478568,http\ngx_http_file_cache.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
168,478569,http\ngx_http_header_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
169,478570,http\ngx_http_parse.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
170,478571,http\ngx_http_postpone_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
171,478572,http\ngx_http_request.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
172,478573,http\ngx_http_request.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
173,478574,http\ngx_http_request_body.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
174,478575,http\ngx_http_script.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
175,478576,http\ngx_http_script.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
176,478577,http\ngx_http_special_response.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
177,478578,http\ngx_http_upstream.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
178,478579,http\ngx_http_upstream.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
179,478580,http\ngx_http_upstream_round_robin.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
180,478581,http\ngx_http_upstream_round_robin.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
181,478582,http\ngx_http_variables.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
182,478583,http\ngx_http_variables.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
183,478584,http\ngx_http_write_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
184,478585,http\v2\ngx_http_v2.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
185,478586,http\v2\ngx_http_v2.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
186,478587,http\v2\ngx_http_v2_encode.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
187,478588,http\v2\ngx_http_v2_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
188,478589,http\v2\ngx_http_v2_huff_decode.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
189,478590,http\v2\ngx_http_v2_huff_encode.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
190,478591,http\v2\ngx_http_v2_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
191,478592,http\v2\ngx_http_v2_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
192,478593,http\v2\ngx_http_v2_table.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
193,478594,mail\ngx_mail.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
194,478595,mail\ngx_mail.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
195,478596,mail\ngx_mail_auth_http_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
196,478597,mail\ngx_mail_core_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
197,478598,mail\ngx_mail_handler.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
198,478599,mail\ngx_mail_imap_handler.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
199,478600,mail\ngx_mail_imap_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
200,478601,mail\ngx_mail_imap_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
201,478602,mail\ngx_mail_parse.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
202,478603,mail\ngx_mail_pop3_handler.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
203,478604,mail\ngx_mail_pop3_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
204,478605,mail\ngx_mail_pop3_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
205,478606,mail\ngx_mail_proxy_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
206,478607,mail\ngx_mail_realip_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
207,478608,mail\ngx_mail_smtp_handler.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
208,478609,mail\ngx_mail_smtp_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
209,478610,mail\ngx_mail_smtp_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
210,478611,mail\ngx_mail_ssl_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
211,478612,mail\ngx_mail_ssl_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
212,478613,misc\ngx_cpp_test_module.cpp,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
213,478614,misc\ngx_google_perftools_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
214,478615,os\unix\ngx_alloc.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
215,478616,os\unix\ngx_alloc.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
216,478617,os\unix\ngx_atomic.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
217,478618,os\unix\ngx_channel.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
218,478619,os\unix\ngx_channel.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
219,478620,os\unix\ngx_daemon.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
220,478621,os\unix\ngx_darwin.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
221,478622,os\unix\ngx_darwin_config.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
222,478623,os\unix\ngx_darwin_init.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
223,478624,os\unix\ngx_darwin_sendfile_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
224,478625,os\unix\ngx_dlopen.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
225,478626,os\unix\ngx_dlopen.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
226,478627,os\unix\ngx_errno.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
227,478628,os\unix\ngx_errno.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
228,478629,os\unix\ngx_file_aio_read.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
229,478630,os\unix\ngx_files.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
230,478631,os\unix\ngx_files.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
231,478632,os\unix\ngx_freebsd.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
232,478633,os\unix\ngx_freebsd_config.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
233,478634,os\unix\ngx_freebsd_init.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
234,478635,os\unix\ngx_freebsd_sendfile_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
235,478636,os\unix\ngx_gcc_atomic_amd64.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
236,478637,os\unix\ngx_gcc_atomic_ppc.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
237,478638,os\unix\ngx_gcc_atomic_sparc64.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
238,478639,os\unix\ngx_gcc_atomic_x86.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
239,478640,os\unix\ngx_linux.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
240,478641,os\unix\ngx_linux_aio_read.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
241,478642,os\unix\ngx_linux_config.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
242,478643,os\unix\ngx_linux_init.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
243,478644,os\unix\ngx_linux_sendfile_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
244,478645,os\unix\ngx_os.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
245,478646,os\unix\ngx_posix_config.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
246,478647,os\unix\ngx_posix_init.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
247,478648,os\unix\ngx_process.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
248,478649,os\unix\ngx_process.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
249,478650,os\unix\ngx_process_cycle.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
250,478651,os\unix\ngx_process_cycle.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
251,478652,os\unix\ngx_readv_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
252,478653,os\unix\ngx_recv.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
253,478654,os\unix\ngx_send.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
254,478655,os\unix\ngx_setaffinity.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
255,478656,os\unix\ngx_setaffinity.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
256,478657,os\unix\ngx_setproctitle.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
257,478658,os\unix\ngx_setproctitle.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
258,478659,os\unix\ngx_shmem.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
259,478660,os\unix\ngx_shmem.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
260,478661,os\unix\ngx_socket.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
261,478662,os\unix\ngx_socket.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
262,478663,os\unix\ngx_solaris.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
263,478664,os\unix\ngx_solaris_config.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
264,478665,os\unix\ngx_solaris_init.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
265,478666,os\unix\ngx_solaris_sendfilev_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
266,478667,os\unix\ngx_sunpro_atomic_sparc64.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
267,478668,os\unix\ngx_thread.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
268,478669,os\unix\ngx_thread_cond.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
269,478670,os\unix\ngx_thread_id.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
270,478671,os\unix\ngx_thread_mutex.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
271,478672,os\unix\ngx_time.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
272,478673,os\unix\ngx_time.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
273,478674,os\unix\ngx_udp_recv.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
274,478675,os\unix\ngx_udp_send.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
275,478676,os\unix\ngx_udp_sendmsg_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
276,478677,os\unix\ngx_user.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
277,478678,os\unix\ngx_user.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
278,478679,os\unix\ngx_writev_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
279,478680,os\win32\ngx_alloc.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
280,478681,os\win32\ngx_alloc.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
281,478682,os\win32\ngx_atomic.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
282,478683,os\win32\ngx_dlopen.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
283,478684,os\win32\ngx_dlopen.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
284,478685,os\win32\ngx_errno.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
285,478686,os\win32\ngx_errno.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
286,478687,os\win32\ngx_event_log.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
287,478688,os\win32\ngx_files.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
288,478689,os\win32\ngx_files.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
289,478690,os\win32\ngx_os.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
290,478691,os\win32\ngx_process.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
291,478692,os\win32\ngx_process.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
292,478693,os\win32\ngx_process_cycle.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
293,478694,os\win32\ngx_process_cycle.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
294,478695,os\win32\ngx_service.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
295,478696,os\win32\ngx_shmem.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
296,478697,os\win32\ngx_shmem.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
297,478698,os\win32\ngx_socket.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
298,478699,os\win32\ngx_socket.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
299,478700,os\win32\ngx_stat.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
300,478701,os\win32\ngx_thread.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
301,478702,os\win32\ngx_thread.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
302,478703,os\win32\ngx_time.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
303,478704,os\win32\ngx_time.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
304,478705,os\win32\ngx_udp_wsarecv.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
305,478706,os\win32\ngx_user.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
306,478707,os\win32\ngx_user.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
307,478708,os\win32\ngx_win32_config.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
308,478709,os\win32\ngx_win32_init.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
309,478710,os\win32\ngx_wsarecv.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
310,478711,os\win32\ngx_wsarecv_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
311,478712,os\win32\ngx_wsasend.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
312,478713,os\win32\ngx_wsasend_chain.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
313,478714,stream\ngx_stream.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
314,478715,stream\ngx_stream.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
315,478716,stream\ngx_stream_access_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
316,478717,stream\ngx_stream_core_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
317,478718,stream\ngx_stream_geo_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
318,478719,stream\ngx_stream_geoip_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
319,478720,stream\ngx_stream_handler.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
320,478721,stream\ngx_stream_limit_conn_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
321,478722,stream\ngx_stream_log_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
322,478723,stream\ngx_stream_map_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
323,478724,stream\ngx_stream_proxy_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
324,478725,stream\ngx_stream_realip_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
325,478726,stream\ngx_stream_return_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
326,478727,stream\ngx_stream_script.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
327,478728,stream\ngx_stream_script.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
328,478729,stream\ngx_stream_set_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
329,478730,stream\ngx_stream_split_clients_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
330,478731,stream\ngx_stream_ssl_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
331,478732,stream\ngx_stream_ssl_module.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
332,478733,stream\ngx_stream_ssl_preread_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
333,478734,stream\ngx_stream_upstream.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
334,478735,stream\ngx_stream_upstream.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
335,478736,stream\ngx_stream_upstream_hash_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
336,478737,stream\ngx_stream_upstream_least_conn_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
337,478738,stream\ngx_stream_upstream_random_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
338,478739,stream\ngx_stream_upstream_round_robin.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
339,478740,stream\ngx_stream_upstream_round_robin.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
340,478741,stream\ngx_stream_upstream_zone_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
341,478742,stream\ngx_stream_variables.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
342,478743,stream\ngx_stream_variables.h,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
343,478744,stream\ngx_stream_write_filter_module.c,5,,,,,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
344,3524,elts,3,ngx_array_t.elts,,core\ngx_array.h,*elts,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,38,0,1,1,0,0,,0,0,0,0,0,
345,3525,nelts,3,ngx_array_t.nelts,,core\ngx_array.h,nelts,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,36,0,1,1,0,0,,0,0,0,0,0,
346,3526,size,3,ngx_array_t.size,,core\ngx_array.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
347,3527,nalloc,3,ngx_array_t.nalloc,,core\ngx_array.h,nalloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
348,3528,pool,3,ngx_array_t.pool,,core\ngx_array.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
349,4371,pos,3,ngx_buf_s.pos,,core\ngx_buf.h,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
350,4372,last,3,ngx_buf_s.last,,core\ngx_buf.h,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
351,4373,file_pos,3,ngx_buf_s.file_pos,,core\ngx_buf.h,file_pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
352,4374,file_last,3,ngx_buf_s.file_last,,core\ngx_buf.h,file_last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
353,4375,start,3,ngx_buf_s.start,,core\ngx_buf.h,*start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
354,4376,end,3,ngx_buf_s.end,,core\ngx_buf.h,*end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
355,4377,tag,3,ngx_buf_s.tag,,core\ngx_buf.h,tag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
356,4378,file,3,ngx_buf_s.file,,core\ngx_buf.h,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
357,4379,shadow,3,ngx_buf_s.shadow,,core\ngx_buf.h,*shadow,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
358,4380,temporary,3,ngx_buf_s.temporary,,core\ngx_buf.h,temporary:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
359,4381,memory,3,ngx_buf_s.memory,,core\ngx_buf.h,memory:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
360,4382,mmap,3,ngx_buf_s.mmap,,core\ngx_buf.h,mmap:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
361,4383,recycled,3,ngx_buf_s.recycled,,core\ngx_buf.h,recycled:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
362,4384,in_file,3,ngx_buf_s.in_file,,core\ngx_buf.h,in_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
363,4385,flush,3,ngx_buf_s.flush,,core\ngx_buf.h,flush:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
364,4386,sync,3,ngx_buf_s.sync,,core\ngx_buf.h,sync:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
365,4387,last_buf,3,ngx_buf_s.last_buf,,core\ngx_buf.h,last_buf:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
366,4388,last_in_chain,3,ngx_buf_s.last_in_chain,,core\ngx_buf.h,last_in_chain:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
367,4389,last_shadow,3,ngx_buf_s.last_shadow,,core\ngx_buf.h,last_shadow:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
368,4390,temp_file,3,ngx_buf_s.temp_file,,core\ngx_buf.h,temp_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
369,4391,num,3,ngx_buf_s.num,,core\ngx_buf.h,num,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
370,4393,buf,3,ngx_chain_s.buf,,core\ngx_buf.h,*buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
371,4394,next,3,ngx_chain_s.next,,core\ngx_buf.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
372,4396,num,3,ngx_bufs_t.num,,core\ngx_buf.h,num,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
373,4397,size,3,ngx_bufs_t.size,,core\ngx_buf.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
374,4414,buf,3,ngx_output_chain_ctx_s.buf,,core\ngx_buf.h,*buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
375,4415,in,3,ngx_output_chain_ctx_s.in,,core\ngx_buf.h,*in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
376,4416,free,3,ngx_output_chain_ctx_s.free,,core\ngx_buf.h,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
377,4417,busy,3,ngx_output_chain_ctx_s.busy,,core\ngx_buf.h,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
378,4418,sendfile,3,ngx_output_chain_ctx_s.sendfile,,core\ngx_buf.h,sendfile:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
379,4419,directio,3,ngx_output_chain_ctx_s.directio,,core\ngx_buf.h,directio:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
380,4420,unaligned,3,ngx_output_chain_ctx_s.unaligned,,core\ngx_buf.h,unaligned:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
381,4421,need_in_memory,3,ngx_output_chain_ctx_s.need_in_memory,,core\ngx_buf.h,need_in_memory:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
382,4422,need_in_temp,3,ngx_output_chain_ctx_s.need_in_temp,,core\ngx_buf.h,need_in_temp:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
383,4423,aio,3,ngx_output_chain_ctx_s.aio,,core\ngx_buf.h,aio:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
384,4424,aio_handler,3,ngx_output_chain_ctx_s.aio_handler,,core\ngx_buf.h,aio_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
385,4436,thread_task,3,ngx_output_chain_ctx_s.thread_task,,core\ngx_buf.h,*thread_task,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
386,4437,alignment,3,ngx_output_chain_ctx_s.alignment,,core\ngx_buf.h,alignment,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
387,4438,pool,3,ngx_output_chain_ctx_s.pool,,core\ngx_buf.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
388,4439,allocated,3,ngx_output_chain_ctx_s.allocated,,core\ngx_buf.h,allocated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
389,4440,bufs,3,ngx_output_chain_ctx_s.bufs,,core\ngx_buf.h,bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
390,4441,tag,3,ngx_output_chain_ctx_s.tag,,core\ngx_buf.h,tag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
391,4442,output_filter,3,ngx_output_chain_ctx_s.output_filter,,core\ngx_buf.h,output_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
392,4443,filter_ctx,3,ngx_output_chain_ctx_s.filter_ctx,,core\ngx_buf.h,*filter_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
393,4445,out,3,ngx_chain_writer_ctx_t.out,,core\ngx_buf.h,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
394,4446,last,3,ngx_chain_writer_ctx_t.last,,core\ngx_buf.h,**last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
395,4447,connection,3,ngx_chain_writer_ctx_t.connection,,core\ngx_buf.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
396,4448,pool,3,ngx_chain_writer_ctx_t.pool,,core\ngx_buf.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
397,4449,limit,3,ngx_chain_writer_ctx_t.limit,,core\ngx_buf.h,limit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
398,8320,name,3,ngx_command_s.name,,core\ngx_conf_file.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
399,8321,type,3,ngx_command_s.type,,core\ngx_conf_file.h,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
400,8329,conf,3,ngx_command_s.conf,,core\ngx_conf_file.h,conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
401,8330,offset,3,ngx_command_s.offset,,core\ngx_conf_file.h,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
402,8331,post,3,ngx_command_s.post,,core\ngx_conf_file.h,*post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
403,8333,fd,3,ngx_open_file_s.fd,,core\ngx_conf_file.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
404,8334,name,3,ngx_open_file_s.name,,core\ngx_conf_file.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
405,8341,data,3,ngx_open_file_s.data,,core\ngx_conf_file.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
406,8343,file,3,ngx_conf_file_t.file,,core\ngx_conf_file.h,file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
407,8344,buffer,3,ngx_conf_file_t.buffer,,core\ngx_conf_file.h,*buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
408,8345,dump,3,ngx_conf_file_t.dump,,core\ngx_conf_file.h,*dump,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
409,8346,line,3,ngx_conf_file_t.line,,core\ngx_conf_file.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
410,8349,name,3,ngx_conf_dump_t.name,,core\ngx_conf_file.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
411,8350,buffer,3,ngx_conf_dump_t.buffer,,core\ngx_conf_file.h,*buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
412,8360,name,3,ngx_conf_s.name,,core\ngx_conf_file.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
413,8361,args,3,ngx_conf_s.args,,core\ngx_conf_file.h,*args,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
414,8362,cycle,3,ngx_conf_s.cycle,,core\ngx_conf_file.h,*cycle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
415,8363,pool,3,ngx_conf_s.pool,,core\ngx_conf_file.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
416,8364,temp_pool,3,ngx_conf_s.temp_pool,,core\ngx_conf_file.h,*temp_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
417,8365,conf_file,3,ngx_conf_s.conf_file,,core\ngx_conf_file.h,*conf_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
418,8366,log,3,ngx_conf_s.log,,core\ngx_conf_file.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
419,8367,ctx,3,ngx_conf_s.ctx,,core\ngx_conf_file.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
420,8368,module_type,3,ngx_conf_s.module_type,,core\ngx_conf_file.h,module_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
421,8369,cmd_type,3,ngx_conf_s.cmd_type,,core\ngx_conf_file.h,cmd_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
422,8370,handler,3,ngx_conf_s.handler,,core\ngx_conf_file.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
423,8371,handler_conf,3,ngx_conf_s.handler_conf,,core\ngx_conf_file.h,*handler_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
424,8380,post_handler,3,ngx_conf_post_t.post_handler,,core\ngx_conf_file.h,post_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
425,8383,post_handler,3,ngx_conf_deprecated_t.post_handler,,core\ngx_conf_file.h,post_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
426,8384,old_name,3,ngx_conf_deprecated_t.old_name,,core\ngx_conf_file.h,*old_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
427,8385,new_name,3,ngx_conf_deprecated_t.new_name,,core\ngx_conf_file.h,*new_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
428,8388,post_handler,3,ngx_conf_num_bounds_t.post_handler,,core\ngx_conf_file.h,post_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
429,8389,low,3,ngx_conf_num_bounds_t.low,,core\ngx_conf_file.h,low,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
430,8390,high,3,ngx_conf_num_bounds_t.high,,core\ngx_conf_file.h,high,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
431,8393,name,3,ngx_conf_enum_t.name,,core\ngx_conf_file.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
432,8394,value,3,ngx_conf_enum_t.value,,core\ngx_conf_file.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
433,8397,name,3,ngx_conf_bitmask_t.name,,core\ngx_conf_file.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
434,8398,mask,3,ngx_conf_bitmask_t.mask,,core\ngx_conf_file.h,mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
435,10868,fd,3,ngx_listening_s.fd,,core\ngx_connection.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
436,10870,sockaddr,3,ngx_listening_s.sockaddr,,core\ngx_connection.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
437,10871,socklen,3,ngx_listening_s.socklen,,core\ngx_connection.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
438,10872,addr_text_max_len,3,ngx_listening_s.addr_text_max_len,,core\ngx_connection.h,addr_text_max_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
439,10873,addr_text,3,ngx_listening_s.addr_text,,core\ngx_connection.h,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
440,10874,type,3,ngx_listening_s.type,,core\ngx_connection.h,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
441,10875,backlog,3,ngx_listening_s.backlog,,core\ngx_connection.h,backlog,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
442,10876,rcvbuf,3,ngx_listening_s.rcvbuf,,core\ngx_connection.h,rcvbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
443,10877,sndbuf,3,ngx_listening_s.sndbuf,,core\ngx_connection.h,sndbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
444,10878,keepidle,3,ngx_listening_s.keepidle,,core\ngx_connection.h,keepidle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
445,10879,keepintvl,3,ngx_listening_s.keepintvl,,core\ngx_connection.h,keepintvl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
446,10880,keepcnt,3,ngx_listening_s.keepcnt,,core\ngx_connection.h,keepcnt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
447,10881,handler,3,ngx_listening_s.handler,,core\ngx_connection.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
448,10882,servers,3,ngx_listening_s.servers,,core\ngx_connection.h,*servers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
449,10883,log,3,ngx_listening_s.log,,core\ngx_connection.h,log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
450,10884,logp,3,ngx_listening_s.logp,,core\ngx_connection.h,*logp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
451,10885,pool_size,3,ngx_listening_s.pool_size,,core\ngx_connection.h,pool_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
452,10886,post_accept_buffer_size,3,ngx_listening_s.post_accept_buffer_size,,core\ngx_connection.h,post_accept_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
453,10887,previous,3,ngx_listening_s.previous,,core\ngx_connection.h,*previous,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
454,10888,connection,3,ngx_listening_s.connection,,core\ngx_connection.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
455,10889,rbtree,3,ngx_listening_s.rbtree,,core\ngx_connection.h,rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
456,10890,sentinel,3,ngx_listening_s.sentinel,,core\ngx_connection.h,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
457,10891,worker,3,ngx_listening_s.worker,,core\ngx_connection.h,worker,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
458,10892,open,3,ngx_listening_s.open,,core\ngx_connection.h,open:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
459,10893,remain,3,ngx_listening_s.remain,,core\ngx_connection.h,remain:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
460,10894,ignore,3,ngx_listening_s.ignore,,core\ngx_connection.h,ignore:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
461,10895,bound,3,ngx_listening_s.bound,,core\ngx_connection.h,bound:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
462,10896,inherited,3,ngx_listening_s.inherited,,core\ngx_connection.h,inherited:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
463,10897,nonblocking_accept,3,ngx_listening_s.nonblocking_accept,,core\ngx_connection.h,nonblocking_accept:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
464,10898,listen,3,ngx_listening_s.listen,,core\ngx_connection.h,listen:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
465,10899,nonblocking,3,ngx_listening_s.nonblocking,,core\ngx_connection.h,nonblocking:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
466,10900,shared,3,ngx_listening_s.shared,,core\ngx_connection.h,shared:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
467,10901,addr_ntop,3,ngx_listening_s.addr_ntop,,core\ngx_connection.h,addr_ntop:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
468,10902,wildcard,3,ngx_listening_s.wildcard,,core\ngx_connection.h,wildcard:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
469,10903,ipv6only,3,ngx_listening_s.ipv6only,,core\ngx_connection.h,ipv6only:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
470,10904,reuseport,3,ngx_listening_s.reuseport,,core\ngx_connection.h,reuseport:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
471,10905,add_reuseport,3,ngx_listening_s.add_reuseport,,core\ngx_connection.h,add_reuseport:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
472,10906,keepalive,3,ngx_listening_s.keepalive,,core\ngx_connection.h,keepalive:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
473,10907,deferred_accept,3,ngx_listening_s.deferred_accept,,core\ngx_connection.h,deferred_accept:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
474,10908,delete_deferred,3,ngx_listening_s.delete_deferred,,core\ngx_connection.h,delete_deferred:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
475,10909,add_deferred,3,ngx_listening_s.add_deferred,,core\ngx_connection.h,add_deferred:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
476,10910,accept_filter,3,ngx_listening_s.accept_filter,,core\ngx_connection.h,*accept_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
477,10911,setfib,3,ngx_listening_s.setfib,,core\ngx_connection.h,setfib,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
478,10912,fastopen,3,ngx_listening_s.fastopen,,core\ngx_connection.h,fastopen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
479,10914,NGX_ERROR_ALERT,3,ngx_connection_log_error_e.NGX_ERROR_ALERT,,core\ngx_connection.h,NGX_ERROR_ALERT = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
480,10915,NGX_ERROR_ERR,3,ngx_connection_log_error_e.NGX_ERROR_ERR,,core\ngx_connection.h,NGX_ERROR_ERR,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
481,10916,NGX_ERROR_INFO,3,ngx_connection_log_error_e.NGX_ERROR_INFO,,core\ngx_connection.h,NGX_ERROR_INFO,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
482,10917,NGX_ERROR_IGNORE_ECONNRESET,3,ngx_connection_log_error_e.NGX_ERROR_IGNORE_ECONNRESET,,core\ngx_connection.h,NGX_ERROR_IGNORE_ECONNRESET,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
483,10918,NGX_ERROR_IGNORE_EINVAL,3,ngx_connection_log_error_e.NGX_ERROR_IGNORE_EINVAL,,core\ngx_connection.h,NGX_ERROR_IGNORE_EINVAL,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
484,10928,NGX_TCP_NODELAY_UNSET,3,ngx_connection_tcp_nodelay_e.NGX_TCP_NODELAY_UNSET,,core\ngx_connection.h,NGX_TCP_NODELAY_UNSET = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
485,10929,NGX_TCP_NODELAY_SET,3,ngx_connection_tcp_nodelay_e.NGX_TCP_NODELAY_SET,,core\ngx_connection.h,NGX_TCP_NODELAY_SET,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
486,10930,NGX_TCP_NODELAY_DISABLED,3,ngx_connection_tcp_nodelay_e.NGX_TCP_NODELAY_DISABLED,,core\ngx_connection.h,NGX_TCP_NODELAY_DISABLED,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
487,10940,NGX_TCP_NOPUSH_UNSET,3,ngx_connection_tcp_nopush_e.NGX_TCP_NOPUSH_UNSET,,core\ngx_connection.h,NGX_TCP_NOPUSH_UNSET = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
488,10941,NGX_TCP_NOPUSH_SET,3,ngx_connection_tcp_nopush_e.NGX_TCP_NOPUSH_SET,,core\ngx_connection.h,NGX_TCP_NOPUSH_SET,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
489,10942,NGX_TCP_NOPUSH_DISABLED,3,ngx_connection_tcp_nopush_e.NGX_TCP_NOPUSH_DISABLED,,core\ngx_connection.h,NGX_TCP_NOPUSH_DISABLED,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
490,10952,data,3,ngx_connection_s.data,,core\ngx_connection.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
491,10953,read,3,ngx_connection_s.read,,core\ngx_connection.h,*read,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
492,10954,write,3,ngx_connection_s.write,,core\ngx_connection.h,*write,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
493,10955,fd,3,ngx_connection_s.fd,,core\ngx_connection.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
494,10956,recv,3,ngx_connection_s.recv,,core\ngx_connection.h,recv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
495,10957,send,3,ngx_connection_s.send,,core\ngx_connection.h,send,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
496,10958,recv_chain,3,ngx_connection_s.recv_chain,,core\ngx_connection.h,recv_chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
497,10959,send_chain,3,ngx_connection_s.send_chain,,core\ngx_connection.h,send_chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
498,10960,listening,3,ngx_connection_s.listening,,core\ngx_connection.h,*listening,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
499,10961,sent,3,ngx_connection_s.sent,,core\ngx_connection.h,sent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
500,10962,log,3,ngx_connection_s.log,,core\ngx_connection.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
501,10963,pool,3,ngx_connection_s.pool,,core\ngx_connection.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
502,10964,type,3,ngx_connection_s.type,,core\ngx_connection.h,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
503,10966,sockaddr,3,ngx_connection_s.sockaddr,,core\ngx_connection.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
504,10967,socklen,3,ngx_connection_s.socklen,,core\ngx_connection.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
505,10968,addr_text,3,ngx_connection_s.addr_text,,core\ngx_connection.h,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
506,10969,proxy_protocol,3,ngx_connection_s.proxy_protocol,,core\ngx_connection.h,*proxy_protocol,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
507,10970,ssl,3,ngx_connection_s.ssl,,core\ngx_connection.h,*ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
508,10971,udp,3,ngx_connection_s.udp,,core\ngx_connection.h,*udp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
509,10973,local_sockaddr,3,ngx_connection_s.local_sockaddr,,core\ngx_connection.h,*local_sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
510,10974,local_socklen,3,ngx_connection_s.local_socklen,,core\ngx_connection.h,local_socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
511,10975,buffer,3,ngx_connection_s.buffer,,core\ngx_connection.h,*buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
512,10976,queue,3,ngx_connection_s.queue,,core\ngx_connection.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
513,10977,number,3,ngx_connection_s.number,,core\ngx_connection.h,number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
514,10978,start_time,3,ngx_connection_s.start_time,,core\ngx_connection.h,start_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
515,10979,requests,3,ngx_connection_s.requests,,core\ngx_connection.h,requests,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
516,10980,buffered,3,ngx_connection_s.buffered,,core\ngx_connection.h,buffered:8,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
517,10981,log_error,3,ngx_connection_s.log_error,,core\ngx_connection.h,log_error:3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
518,10982,timedout,3,ngx_connection_s.timedout,,core\ngx_connection.h,timedout:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
519,10983,error,3,ngx_connection_s.error,,core\ngx_connection.h,error:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
520,10984,destroyed,3,ngx_connection_s.destroyed,,core\ngx_connection.h,destroyed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
521,10985,idle,3,ngx_connection_s.idle,,core\ngx_connection.h,idle:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
522,10986,reusable,3,ngx_connection_s.reusable,,core\ngx_connection.h,reusable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
523,10987,close,3,ngx_connection_s.close,,core\ngx_connection.h,close:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
524,10988,shared,3,ngx_connection_s.shared,,core\ngx_connection.h,shared:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
525,10989,sendfile,3,ngx_connection_s.sendfile,,core\ngx_connection.h,sendfile:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
526,10990,sndlowat,3,ngx_connection_s.sndlowat,,core\ngx_connection.h,sndlowat:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
527,10991,tcp_nodelay,3,ngx_connection_s.tcp_nodelay,,core\ngx_connection.h,tcp_nodelay:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
528,10992,tcp_nopush,3,ngx_connection_s.tcp_nopush,,core\ngx_connection.h,tcp_nopush:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
529,10993,need_last_buf,3,ngx_connection_s.need_last_buf,,core\ngx_connection.h,need_last_buf:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
530,10994,busy_count,3,ngx_connection_s.busy_count,,core\ngx_connection.h,busy_count:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
531,10995,sendfile_task,3,ngx_connection_s.sendfile_task,,core\ngx_connection.h,*sendfile_task,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
532,15818,data,3,ngx_shm_zone_s.data,,core\ngx_cycle.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
533,15819,shm,3,ngx_shm_zone_s.shm,,core\ngx_cycle.h,shm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
534,15820,init,3,ngx_shm_zone_s.init,,core\ngx_cycle.h,init,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
535,15821,tag,3,ngx_shm_zone_s.tag,,core\ngx_cycle.h,*tag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
536,15822,sync,3,ngx_shm_zone_s.sync,,core\ngx_cycle.h,*sync,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
537,15823,noreuse,3,ngx_shm_zone_s.noreuse,,core\ngx_cycle.h,noreuse,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
538,15825,conf_ctx,3,ngx_cycle_s.conf_ctx,,core\ngx_cycle.h,****conf_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
539,15826,pool,3,ngx_cycle_s.pool,,core\ngx_cycle.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
540,15827,log,3,ngx_cycle_s.log,,core\ngx_cycle.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
541,15828,new_log,3,ngx_cycle_s.new_log,,core\ngx_cycle.h,new_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
542,15829,log_use_stderr,3,ngx_cycle_s.log_use_stderr,,core\ngx_cycle.h,log_use_stderr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
543,15830,files,3,ngx_cycle_s.files,,core\ngx_cycle.h,**files,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
544,15831,free_connections,3,ngx_cycle_s.free_connections,,core\ngx_cycle.h,*free_connections,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
545,15832,free_connection_n,3,ngx_cycle_s.free_connection_n,,core\ngx_cycle.h,free_connection_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
546,15833,modules,3,ngx_cycle_s.modules,,core\ngx_cycle.h,**modules,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
547,15834,modules_n,3,ngx_cycle_s.modules_n,,core\ngx_cycle.h,modules_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
548,15835,modules_used,3,ngx_cycle_s.modules_used,,core\ngx_cycle.h,modules_used,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
549,15836,reusable_connections_queue,3,ngx_cycle_s.reusable_connections_queue,,core\ngx_cycle.h,reusable_connections_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
550,15837,reusable_connections_n,3,ngx_cycle_s.reusable_connections_n,,core\ngx_cycle.h,reusable_connections_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
551,15838,connections_reuse_time,3,ngx_cycle_s.connections_reuse_time,,core\ngx_cycle.h,connections_reuse_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
552,15839,listening,3,ngx_cycle_s.listening,,core\ngx_cycle.h,listening,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
553,15840,paths,3,ngx_cycle_s.paths,,core\ngx_cycle.h,paths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
554,15841,config_dump,3,ngx_cycle_s.config_dump,,core\ngx_cycle.h,config_dump,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
555,15842,config_dump_rbtree,3,ngx_cycle_s.config_dump_rbtree,,core\ngx_cycle.h,config_dump_rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
556,15843,config_dump_sentinel,3,ngx_cycle_s.config_dump_sentinel,,core\ngx_cycle.h,config_dump_sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
557,15844,open_files,3,ngx_cycle_s.open_files,,core\ngx_cycle.h,open_files,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
558,15845,shared_memory,3,ngx_cycle_s.shared_memory,,core\ngx_cycle.h,shared_memory,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
559,15846,connection_n,3,ngx_cycle_s.connection_n,,core\ngx_cycle.h,connection_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
560,15847,files_n,3,ngx_cycle_s.files_n,,core\ngx_cycle.h,files_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
561,15848,connections,3,ngx_cycle_s.connections,,core\ngx_cycle.h,*connections,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
562,15849,read_events,3,ngx_cycle_s.read_events,,core\ngx_cycle.h,*read_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
563,15850,write_events,3,ngx_cycle_s.write_events,,core\ngx_cycle.h,*write_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
564,15851,old_cycle,3,ngx_cycle_s.old_cycle,,core\ngx_cycle.h,*old_cycle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
565,15852,conf_file,3,ngx_cycle_s.conf_file,,core\ngx_cycle.h,conf_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
566,15853,conf_param,3,ngx_cycle_s.conf_param,,core\ngx_cycle.h,conf_param,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
567,15854,conf_prefix,3,ngx_cycle_s.conf_prefix,,core\ngx_cycle.h,conf_prefix,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
568,15855,prefix,3,ngx_cycle_s.prefix,,core\ngx_cycle.h,prefix,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
569,15856,error_log,3,ngx_cycle_s.error_log,,core\ngx_cycle.h,error_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
570,15857,lock_file,3,ngx_cycle_s.lock_file,,core\ngx_cycle.h,lock_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
571,15858,hostname,3,ngx_cycle_s.hostname,,core\ngx_cycle.h,hostname,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
572,15860,daemon,3,ngx_core_conf_t.daemon,,core\ngx_cycle.h,daemon,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
573,15861,master,3,ngx_core_conf_t.master,,core\ngx_cycle.h,master,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
574,15862,timer_resolution,3,ngx_core_conf_t.timer_resolution,,core\ngx_cycle.h,timer_resolution,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
575,15863,shutdown_timeout,3,ngx_core_conf_t.shutdown_timeout,,core\ngx_cycle.h,shutdown_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
576,15864,worker_processes,3,ngx_core_conf_t.worker_processes,,core\ngx_cycle.h,worker_processes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
577,15865,debug_points,3,ngx_core_conf_t.debug_points,,core\ngx_cycle.h,debug_points,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
578,15866,rlimit_nofile,3,ngx_core_conf_t.rlimit_nofile,,core\ngx_cycle.h,rlimit_nofile,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
579,15867,rlimit_core,3,ngx_core_conf_t.rlimit_core,,core\ngx_cycle.h,rlimit_core,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
580,15868,priority,3,ngx_core_conf_t.priority,,core\ngx_cycle.h,priority,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
581,15869,cpu_affinity_auto,3,ngx_core_conf_t.cpu_affinity_auto,,core\ngx_cycle.h,cpu_affinity_auto,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
582,15870,cpu_affinity_n,3,ngx_core_conf_t.cpu_affinity_n,,core\ngx_cycle.h,cpu_affinity_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
583,15871,cpu_affinity,3,ngx_core_conf_t.cpu_affinity,,core\ngx_cycle.h,*cpu_affinity,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
584,15872,username,3,ngx_core_conf_t.username,,core\ngx_cycle.h,*username,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
585,15873,user,3,ngx_core_conf_t.user,,core\ngx_cycle.h,user,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
586,15874,group,3,ngx_core_conf_t.group,,core\ngx_cycle.h,group,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
587,15875,working_directory,3,ngx_core_conf_t.working_directory,,core\ngx_cycle.h,working_directory,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
588,15876,lock_file,3,ngx_core_conf_t.lock_file,,core\ngx_cycle.h,lock_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
589,15877,pid,3,ngx_core_conf_t.pid,,core\ngx_cycle.h,pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
590,15878,oldpid,3,ngx_core_conf_t.oldpid,,core\ngx_cycle.h,oldpid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
591,15879,env,3,ngx_core_conf_t.env,,core\ngx_cycle.h,env,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
592,15880,environment,3,ngx_core_conf_t.environment,,core\ngx_cycle.h,**environment,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
593,15881,transparent,3,ngx_core_conf_t.transparent,,core\ngx_cycle.h,transparent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
594,18710,fd,3,ngx_file_s.fd,,core\ngx_file.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
595,18711,name,3,ngx_file_s.name,,core\ngx_file.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
596,18712,info,3,ngx_file_s.info,,core\ngx_file.h,info,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
597,18713,offset,3,ngx_file_s.offset,,core\ngx_file.h,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
598,18714,sys_offset,3,ngx_file_s.sys_offset,,core\ngx_file.h,sys_offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
599,18715,log,3,ngx_file_s.log,,core\ngx_file.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
600,18722,thread_ctx,3,ngx_file_s.thread_ctx,,core\ngx_file.h,*thread_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
601,18723,thread_task,3,ngx_file_s.thread_task,,core\ngx_file.h,*thread_task,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
602,18724,aio,3,ngx_file_s.aio,,core\ngx_file.h,*aio,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
603,18725,valid_info,3,ngx_file_s.valid_info,,core\ngx_file.h,valid_info:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
604,18726,directio,3,ngx_file_s.directio,,core\ngx_file.h,directio:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
605,18743,name,3,ngx_path_t.name,,core\ngx_file.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
606,18744,len,3,ngx_path_t.len,,core\ngx_file.h,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
607,18745,level,3,ngx_path_t.level,,core\ngx_file.h,level[NGX_MAX_PATH_LEVEL],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
608,18746,manager,3,ngx_path_t.manager,,core\ngx_file.h,manager,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
609,18747,purger,3,ngx_path_t.purger,,core\ngx_file.h,purger,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
610,18748,loader,3,ngx_path_t.loader,,core\ngx_file.h,loader,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
611,18749,data,3,ngx_path_t.data,,core\ngx_file.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
612,18750,conf_file,3,ngx_path_t.conf_file,,core\ngx_file.h,*conf_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
613,18751,line,3,ngx_path_t.line,,core\ngx_file.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
614,18762,name,3,ngx_path_init_t.name,,core\ngx_file.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
615,18763,level,3,ngx_path_init_t.level,,core\ngx_file.h,level[NGX_MAX_PATH_LEVEL],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
616,18774,file,3,ngx_temp_file_t.file,,core\ngx_file.h,file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
617,18775,offset,3,ngx_temp_file_t.offset,,core\ngx_file.h,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
618,18776,path,3,ngx_temp_file_t.path,,core\ngx_file.h,*path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
619,18777,pool,3,ngx_temp_file_t.pool,,core\ngx_file.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
620,18778,warn,3,ngx_temp_file_t.warn,,core\ngx_file.h,*warn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
621,18779,access,3,ngx_temp_file_t.access,,core\ngx_file.h,access,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
622,18780,log_level,3,ngx_temp_file_t.log_level,,core\ngx_file.h,log_level:8,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
623,18781,persistent,3,ngx_temp_file_t.persistent,,core\ngx_file.h,persistent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
624,18782,clean,3,ngx_temp_file_t.clean,,core\ngx_file.h,clean:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
625,18783,thread_write,3,ngx_temp_file_t.thread_write,,core\ngx_file.h,thread_write:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
626,18786,access,3,ngx_ext_rename_file_t.access,,core\ngx_file.h,access,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
627,18787,path_access,3,ngx_ext_rename_file_t.path_access,,core\ngx_file.h,path_access,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
628,18788,time,3,ngx_ext_rename_file_t.time,,core\ngx_file.h,time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
629,18789,fd,3,ngx_ext_rename_file_t.fd,,core\ngx_file.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
630,18790,create_path,3,ngx_ext_rename_file_t.create_path,,core\ngx_file.h,create_path:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
631,18791,delete_file,3,ngx_ext_rename_file_t.delete_file,,core\ngx_file.h,delete_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
632,18792,log,3,ngx_ext_rename_file_t.log,,core\ngx_file.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
633,18795,size,3,ngx_copy_file_t.size,,core\ngx_file.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
634,18796,buf_size,3,ngx_copy_file_t.buf_size,,core\ngx_file.h,buf_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
635,18797,access,3,ngx_copy_file_t.access,,core\ngx_file.h,access,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
636,18798,time,3,ngx_copy_file_t.time,,core\ngx_file.h,time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
637,18799,log,3,ngx_copy_file_t.log,,core\ngx_file.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
638,18816,size,3,ngx_tree_ctx_s.size,,core\ngx_file.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
639,18817,fs_size,3,ngx_tree_ctx_s.fs_size,,core\ngx_file.h,fs_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
640,18818,access,3,ngx_tree_ctx_s.access,,core\ngx_file.h,access,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
641,18819,mtime,3,ngx_tree_ctx_s.mtime,,core\ngx_file.h,mtime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
642,18820,init_handler,3,ngx_tree_ctx_s.init_handler,,core\ngx_file.h,init_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
643,18821,file_handler,3,ngx_tree_ctx_s.file_handler,,core\ngx_file.h,file_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
644,18822,pre_tree_handler,3,ngx_tree_ctx_s.pre_tree_handler,,core\ngx_file.h,pre_tree_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
645,18823,post_tree_handler,3,ngx_tree_ctx_s.post_tree_handler,,core\ngx_file.h,post_tree_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
646,18824,spec_handler,3,ngx_tree_ctx_s.spec_handler,,core\ngx_file.h,spec_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
647,18825,data,3,ngx_tree_ctx_s.data,,core\ngx_file.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
648,18826,alloc,3,ngx_tree_ctx_s.alloc,,core\ngx_file.h,alloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
649,18827,log,3,ngx_tree_ctx_s.log,,core\ngx_file.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
650,21735,value,3,ngx_hash_elt_t.value,,core\ngx_hash.h,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
651,21736,len,3,ngx_hash_elt_t.len,,core\ngx_hash.h,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
652,21737,name,3,ngx_hash_elt_t.name,,core\ngx_hash.h,name[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
653,21746,buckets,3,ngx_hash_t.buckets,,core\ngx_hash.h,**buckets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
654,21747,size,3,ngx_hash_t.size,,core\ngx_hash.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
655,21750,hash,3,ngx_hash_wildcard_t.hash,,core\ngx_hash.h,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
656,21751,value,3,ngx_hash_wildcard_t.value,,core\ngx_hash.h,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
657,21754,key,3,ngx_hash_key_t.key,,core\ngx_hash.h,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,24,0,1,1,0,0,,0,0,0,0,0,
658,21755,key_hash,3,ngx_hash_key_t.key_hash,,core\ngx_hash.h,key_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
659,21756,value,3,ngx_hash_key_t.value,,core\ngx_hash.h,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
660,21765,hash,3,ngx_hash_combined_t.hash,,core\ngx_hash.h,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
661,21766,wc_head,3,ngx_hash_combined_t.wc_head,,core\ngx_hash.h,*wc_head,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
662,21767,wc_tail,3,ngx_hash_combined_t.wc_tail,,core\ngx_hash.h,*wc_tail,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
663,21770,hash,3,ngx_hash_init_t.hash,,core\ngx_hash.h,*hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,13,0,1,1,0,0,,0,0,0,0,0,
664,21771,key,3,ngx_hash_init_t.key,,core\ngx_hash.h,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
665,21772,max_size,3,ngx_hash_init_t.max_size,,core\ngx_hash.h,max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,14,0,1,1,0,0,,0,0,0,0,0,
666,21773,bucket_size,3,ngx_hash_init_t.bucket_size,,core\ngx_hash.h,bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
667,21774,name,3,ngx_hash_init_t.name,,core\ngx_hash.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,16,0,1,1,0,0,,0,0,0,0,0,
668,21775,pool,3,ngx_hash_init_t.pool,,core\ngx_hash.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,13,0,1,1,0,0,,0,0,0,0,0,
669,21776,temp_pool,3,ngx_hash_init_t.temp_pool,,core\ngx_hash.h,*temp_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
670,21779,hsize,3,ngx_hash_keys_arrays_t.hsize,,core\ngx_hash.h,hsize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
671,21780,pool,3,ngx_hash_keys_arrays_t.pool,,core\ngx_hash.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
672,21781,temp_pool,3,ngx_hash_keys_arrays_t.temp_pool,,core\ngx_hash.h,*temp_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
673,21782,keys,3,ngx_hash_keys_arrays_t.keys,,core\ngx_hash.h,keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
674,21783,keys_hash,3,ngx_hash_keys_arrays_t.keys_hash,,core\ngx_hash.h,*keys_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
675,21784,dns_wc_head,3,ngx_hash_keys_arrays_t.dns_wc_head,,core\ngx_hash.h,dns_wc_head,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
676,21785,dns_wc_head_hash,3,ngx_hash_keys_arrays_t.dns_wc_head_hash,,core\ngx_hash.h,*dns_wc_head_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
677,21786,dns_wc_tail,3,ngx_hash_keys_arrays_t.dns_wc_tail,,core\ngx_hash.h,dns_wc_tail,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
678,21787,dns_wc_tail_hash,3,ngx_hash_keys_arrays_t.dns_wc_tail_hash,,core\ngx_hash.h,*dns_wc_tail_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
679,21790,hash,3,ngx_table_elt_t.hash,,core\ngx_hash.h,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
680,21791,key,3,ngx_table_elt_t.key,,core\ngx_hash.h,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
681,21792,value,3,ngx_table_elt_t.value,,core\ngx_hash.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,16,0,1,1,0,0,,0,0,0,0,0,
682,21793,lowcase_key,3,ngx_table_elt_t.lowcase_key,,core\ngx_hash.h,*lowcase_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
683,23854,sockaddr,3,ngx_sockaddr_t.sockaddr,,core\ngx_inet.h,sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
684,23856,sockaddr_in,3,ngx_sockaddr_t.sockaddr_in,,core\ngx_inet.h,sockaddr_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
685,23858,sockaddr_in6,3,ngx_sockaddr_t.sockaddr_in6,,core\ngx_inet.h,sockaddr_in6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
686,23860,sockaddr_un,3,ngx_sockaddr_t.sockaddr_un,,core\ngx_inet.h,sockaddr_un,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
687,23863,addr,3,ngx_in_cidr_t.addr,,core\ngx_inet.h,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
688,23864,mask,3,ngx_in_cidr_t.mask,,core\ngx_inet.h,mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
689,23867,family,3,ngx_cidr_t.family,,core\ngx_inet.h,family,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
690,23869,in,3,ngx_cidr_t.u.in,,core\ngx_inet.h,in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
691,23870,in6,3,ngx_cidr_t.u.in6,,core\ngx_inet.h,in6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
692,23871,u,3,ngx_cidr_t.u,,core\ngx_inet.h,u,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
693,23875,sockaddr,3,ngx_addr_t.sockaddr,,core\ngx_inet.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
694,23876,socklen,3,ngx_addr_t.socklen,,core\ngx_inet.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
695,23877,name,3,ngx_addr_t.name,,core\ngx_inet.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
696,23880,url,3,ngx_url_t.url,,core\ngx_inet.h,url,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
697,23881,host,3,ngx_url_t.host,,core\ngx_inet.h,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,21,0,1,1,0,0,,0,0,0,0,0,
698,23882,port_text,3,ngx_url_t.port_text,,core\ngx_inet.h,port_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
699,23883,uri,3,ngx_url_t.uri,,core\ngx_inet.h,uri,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
700,23884,port,3,ngx_url_t.port,,core\ngx_inet.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
701,23885,default_port,3,ngx_url_t.default_port,,core\ngx_inet.h,default_port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
702,23886,last_port,3,ngx_url_t.last_port,,core\ngx_inet.h,last_port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
703,23887,family,3,ngx_url_t.family,,core\ngx_inet.h,family,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
704,23888,listen,3,ngx_url_t.listen,,core\ngx_inet.h,listen:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
705,23889,uri_part,3,ngx_url_t.uri_part,,core\ngx_inet.h,uri_part:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
706,23890,no_resolve,3,ngx_url_t.no_resolve,,core\ngx_inet.h,no_resolve:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
707,23891,no_port,3,ngx_url_t.no_port,,core\ngx_inet.h,no_port:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
708,23892,wildcard,3,ngx_url_t.wildcard,,core\ngx_inet.h,wildcard:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
709,23893,socklen,3,ngx_url_t.socklen,,core\ngx_inet.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
710,23894,sockaddr,3,ngx_url_t.sockaddr,,core\ngx_inet.h,sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
711,23895,addrs,3,ngx_url_t.addrs,,core\ngx_inet.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
712,23896,naddrs,3,ngx_url_t.naddrs,,core\ngx_inet.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
713,23897,err,3,ngx_url_t.err,,core\ngx_inet.h,*err,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
714,24145,elts,3,ngx_list_part_s.elts,,core\ngx_list.h,*elts,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
715,24146,nelts,3,ngx_list_part_s.nelts,,core\ngx_list.h,nelts,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
716,24147,next,3,ngx_list_part_s.next,,core\ngx_list.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
717,24149,last,3,ngx_list_t.last,,core\ngx_list.h,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
718,24150,part,3,ngx_list_t.part,,core\ngx_list.h,part,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
719,24151,size,3,ngx_list_t.size,,core\ngx_list.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
720,24152,nalloc,3,ngx_list_t.nalloc,,core\ngx_list.h,nalloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
721,24153,pool,3,ngx_list_t.pool,,core\ngx_list.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
722,25633,log_level,3,ngx_log_s.log_level,,core\ngx_log.h,log_level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
723,25634,file,3,ngx_log_s.file,,core\ngx_log.h,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
724,25635,connection,3,ngx_log_s.connection,,core\ngx_log.h,connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
725,25636,disk_full_time,3,ngx_log_s.disk_full_time,,core\ngx_log.h,disk_full_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
726,25637,handler,3,ngx_log_s.handler,,core\ngx_log.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
727,25638,data,3,ngx_log_s.data,,core\ngx_log.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
728,25639,writer,3,ngx_log_s.writer,,core\ngx_log.h,writer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
729,25640,wdata,3,ngx_log_s.wdata,,core\ngx_log.h,*wdata,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
730,25641,action,3,ngx_log_s.action,,core\ngx_log.h,*action,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
731,25642,next,3,ngx_log_s.next,,core\ngx_log.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
732,29367,bytes,3,ngx_md5_t.bytes,,core\ngx_md5.h,bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,13,0,1,1,0,0,,0,0,0,0,0,
733,29368,a,3,ngx_md5_t.a,,core\ngx_md5.h,a,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
734,29369,b,3,ngx_md5_t.b,,core\ngx_md5.h,b,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
735,29370,c,3,ngx_md5_t.c,,core\ngx_md5.h,c,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
736,29371,d,3,ngx_md5_t.d,,core\ngx_md5.h,d,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
737,29372,buffer,3,ngx_md5_t.buffer,,core\ngx_md5.h,buffer[64],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,17,0,1,1,0,0,,0,0,0,0,0,
738,30249,ctx_index,3,ngx_module_s.ctx_index,,core\ngx_module.h,ctx_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
739,30250,index,3,ngx_module_s.index,,core\ngx_module.h,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
740,30251,name,3,ngx_module_s.name,,core\ngx_module.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
741,30252,spare0,3,ngx_module_s.spare0,,core\ngx_module.h,spare0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
742,30253,spare1,3,ngx_module_s.spare1,,core\ngx_module.h,spare1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
743,30254,version,3,ngx_module_s.version,,core\ngx_module.h,version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
744,30255,signature,3,ngx_module_s.signature,,core\ngx_module.h,*signature,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
745,30256,ctx,3,ngx_module_s.ctx,,core\ngx_module.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
746,30257,commands,3,ngx_module_s.commands,,core\ngx_module.h,*commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
747,30258,type,3,ngx_module_s.type,,core\ngx_module.h,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
748,30294,spare_hook0,3,ngx_module_s.spare_hook0,,core\ngx_module.h,spare_hook0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
749,30295,spare_hook1,3,ngx_module_s.spare_hook1,,core\ngx_module.h,spare_hook1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
750,30296,spare_hook2,3,ngx_module_s.spare_hook2,,core\ngx_module.h,spare_hook2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
751,30297,spare_hook3,3,ngx_module_s.spare_hook3,,core\ngx_module.h,spare_hook3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
752,30298,spare_hook4,3,ngx_module_s.spare_hook4,,core\ngx_module.h,spare_hook4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
753,30299,spare_hook5,3,ngx_module_s.spare_hook5,,core\ngx_module.h,spare_hook5,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
754,30300,spare_hook6,3,ngx_module_s.spare_hook6,,core\ngx_module.h,spare_hook6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
755,30301,spare_hook7,3,ngx_module_s.spare_hook7,,core\ngx_module.h,spare_hook7,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
756,30303,name,3,ngx_core_module_t.name,,core\ngx_module.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
757,32832,fd,3,ngx_open_file_info_t.fd,,core\ngx_open_file_cache.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
758,32833,uniq,3,ngx_open_file_info_t.uniq,,core\ngx_open_file_cache.h,uniq,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
759,32834,mtime,3,ngx_open_file_info_t.mtime,,core\ngx_open_file_cache.h,mtime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
760,32835,size,3,ngx_open_file_info_t.size,,core\ngx_open_file_cache.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
761,32836,fs_size,3,ngx_open_file_info_t.fs_size,,core\ngx_open_file_cache.h,fs_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
762,32837,directio,3,ngx_open_file_info_t.directio,,core\ngx_open_file_cache.h,directio,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
763,32838,read_ahead,3,ngx_open_file_info_t.read_ahead,,core\ngx_open_file_cache.h,read_ahead,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
764,32839,err,3,ngx_open_file_info_t.err,,core\ngx_open_file_cache.h,err,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,22,0,1,1,0,0,,0,0,0,0,0,
765,32840,failed,3,ngx_open_file_info_t.failed,,core\ngx_open_file_cache.h,*failed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
766,32841,valid,3,ngx_open_file_info_t.valid,,core\ngx_open_file_cache.h,valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
767,32842,min_uses,3,ngx_open_file_info_t.min_uses,,core\ngx_open_file_cache.h,min_uses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
768,32843,disable_symlinks_from,3,ngx_open_file_info_t.disable_symlinks_from,,core\ngx_open_file_cache.h,disable_symlinks_from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
769,32844,disable_symlinks,3,ngx_open_file_info_t.disable_symlinks,,core\ngx_open_file_cache.h,disable_symlinks:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
770,32845,test_dir,3,ngx_open_file_info_t.test_dir,,core\ngx_open_file_cache.h,test_dir:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
771,32846,test_only,3,ngx_open_file_info_t.test_only,,core\ngx_open_file_cache.h,test_only:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
772,32847,log,3,ngx_open_file_info_t.log,,core\ngx_open_file_cache.h,log:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
773,32848,errors,3,ngx_open_file_info_t.errors,,core\ngx_open_file_cache.h,errors:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
774,32849,events,3,ngx_open_file_info_t.events,,core\ngx_open_file_cache.h,events:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
775,32850,is_dir,3,ngx_open_file_info_t.is_dir,,core\ngx_open_file_cache.h,is_dir:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
776,32851,is_file,3,ngx_open_file_info_t.is_file,,core\ngx_open_file_cache.h,is_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
777,32852,is_link,3,ngx_open_file_info_t.is_link,,core\ngx_open_file_cache.h,is_link:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
778,32853,is_exec,3,ngx_open_file_info_t.is_exec,,core\ngx_open_file_cache.h,is_exec:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
779,32854,is_directio,3,ngx_open_file_info_t.is_directio,,core\ngx_open_file_cache.h,is_directio:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
780,32859,node,3,ngx_cached_open_file_s.node,,core\ngx_open_file_cache.h,node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
781,32860,queue,3,ngx_cached_open_file_s.queue,,core\ngx_open_file_cache.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
782,32861,name,3,ngx_cached_open_file_s.name,,core\ngx_open_file_cache.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
783,32862,created,3,ngx_cached_open_file_s.created,,core\ngx_open_file_cache.h,created,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
784,32863,accessed,3,ngx_cached_open_file_s.accessed,,core\ngx_open_file_cache.h,accessed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
785,32864,fd,3,ngx_cached_open_file_s.fd,,core\ngx_open_file_cache.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
786,32865,uniq,3,ngx_cached_open_file_s.uniq,,core\ngx_open_file_cache.h,uniq,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
787,32866,mtime,3,ngx_cached_open_file_s.mtime,,core\ngx_open_file_cache.h,mtime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
788,32867,size,3,ngx_cached_open_file_s.size,,core\ngx_open_file_cache.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
789,32868,err,3,ngx_cached_open_file_s.err,,core\ngx_open_file_cache.h,err,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
790,32869,uses,3,ngx_cached_open_file_s.uses,,core\ngx_open_file_cache.h,uses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
791,32870,disable_symlinks_from,3,ngx_cached_open_file_s.disable_symlinks_from,,core\ngx_open_file_cache.h,disable_symlinks_from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
792,32871,disable_symlinks,3,ngx_cached_open_file_s.disable_symlinks,,core\ngx_open_file_cache.h,disable_symlinks:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
793,32872,count,3,ngx_cached_open_file_s.count,,core\ngx_open_file_cache.h,count:24,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
794,32873,close,3,ngx_cached_open_file_s.close,,core\ngx_open_file_cache.h,close:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
795,32874,use_event,3,ngx_cached_open_file_s.use_event,,core\ngx_open_file_cache.h,use_event:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
796,32875,is_dir,3,ngx_cached_open_file_s.is_dir,,core\ngx_open_file_cache.h,is_dir:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
797,32876,is_file,3,ngx_cached_open_file_s.is_file,,core\ngx_open_file_cache.h,is_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
798,32877,is_link,3,ngx_cached_open_file_s.is_link,,core\ngx_open_file_cache.h,is_link:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
799,32878,is_exec,3,ngx_cached_open_file_s.is_exec,,core\ngx_open_file_cache.h,is_exec:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
800,32879,is_directio,3,ngx_cached_open_file_s.is_directio,,core\ngx_open_file_cache.h,is_directio:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
801,32880,event,3,ngx_cached_open_file_s.event,,core\ngx_open_file_cache.h,*event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
802,32882,rbtree,3,ngx_open_file_cache_t.rbtree,,core\ngx_open_file_cache.h,rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
803,32883,sentinel,3,ngx_open_file_cache_t.sentinel,,core\ngx_open_file_cache.h,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
804,32884,expire_queue,3,ngx_open_file_cache_t.expire_queue,,core\ngx_open_file_cache.h,expire_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
805,32885,current,3,ngx_open_file_cache_t.current,,core\ngx_open_file_cache.h,current,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
806,32886,max,3,ngx_open_file_cache_t.max,,core\ngx_open_file_cache.h,max,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
807,32887,inactive,3,ngx_open_file_cache_t.inactive,,core\ngx_open_file_cache.h,inactive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
808,32890,cache,3,ngx_open_file_cache_cleanup_t.cache,,core\ngx_open_file_cache.h,*cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
809,32891,file,3,ngx_open_file_cache_cleanup_t.file,,core\ngx_open_file_cache.h,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
810,32892,min_uses,3,ngx_open_file_cache_cleanup_t.min_uses,,core\ngx_open_file_cache.h,min_uses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
811,32893,log,3,ngx_open_file_cache_cleanup_t.log,,core\ngx_open_file_cache.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
812,32896,data,3,ngx_open_file_cache_event_t.data,,core\ngx_open_file_cache.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
813,32897,read,3,ngx_open_file_cache_event_t.read,,core\ngx_open_file_cache.h,*read,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
814,32898,write,3,ngx_open_file_cache_event_t.write,,core\ngx_open_file_cache.h,*write,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
815,32899,fd,3,ngx_open_file_cache_event_t.fd,,core\ngx_open_file_cache.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
816,32900,file,3,ngx_open_file_cache_event_t.file,,core\ngx_open_file_cache.h,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
817,32901,cache,3,ngx_open_file_cache_event_t.cache,,core\ngx_open_file_cache.h,*cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
818,35650,handler,3,ngx_pool_cleanup_s.handler,,core\ngx_palloc.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
819,35651,data,3,ngx_pool_cleanup_s.data,,core\ngx_palloc.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
820,35652,next,3,ngx_pool_cleanup_s.next,,core\ngx_palloc.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
821,35656,next,3,ngx_pool_large_s.next,,core\ngx_palloc.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
822,35657,alloc,3,ngx_pool_large_s.alloc,,core\ngx_palloc.h,*alloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
823,35659,last,3,ngx_pool_data_t.last,,core\ngx_palloc.h,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
824,35660,end,3,ngx_pool_data_t.end,,core\ngx_palloc.h,*end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
825,35661,next,3,ngx_pool_data_t.next,,core\ngx_palloc.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
826,35662,failed,3,ngx_pool_data_t.failed,,core\ngx_palloc.h,failed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
827,35665,d,3,ngx_pool_s.d,,core\ngx_palloc.h,d,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
828,35666,max,3,ngx_pool_s.max,,core\ngx_palloc.h,max,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
829,35667,current,3,ngx_pool_s.current,,core\ngx_palloc.h,*current,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
830,35668,chain,3,ngx_pool_s.chain,,core\ngx_palloc.h,*chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
831,35669,large,3,ngx_pool_s.large,,core\ngx_palloc.h,*large,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
832,35670,cleanup,3,ngx_pool_s.cleanup,,core\ngx_palloc.h,*cleanup,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
833,35671,log,3,ngx_pool_s.log,,core\ngx_palloc.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
834,35673,fd,3,ngx_pool_cleanup_file_t.fd,,core\ngx_palloc.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
835,35674,name,3,ngx_pool_cleanup_file_t.name,,core\ngx_palloc.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
836,35675,log,3,ngx_pool_cleanup_file_t.log,,core\ngx_palloc.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
837,37381,signature,3,ngx_proxy_protocol_header_t.signature,,core\ngx_proxy_protocol.c,signature[12],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
838,37382,version_command,3,ngx_proxy_protocol_header_t.version_command,,core\ngx_proxy_protocol.c,version_command,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
839,37383,family_transport,3,ngx_proxy_protocol_header_t.family_transport,,core\ngx_proxy_protocol.c,family_transport,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
840,37384,len,3,ngx_proxy_protocol_header_t.len,,core\ngx_proxy_protocol.c,len[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
841,37395,src_addr,3,ngx_proxy_protocol_inet_addrs_t.src_addr,,core\ngx_proxy_protocol.c,src_addr[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
842,37396,dst_addr,3,ngx_proxy_protocol_inet_addrs_t.dst_addr,,core\ngx_proxy_protocol.c,dst_addr[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
843,37397,src_port,3,ngx_proxy_protocol_inet_addrs_t.src_port,,core\ngx_proxy_protocol.c,src_port[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
844,37398,dst_port,3,ngx_proxy_protocol_inet_addrs_t.dst_port,,core\ngx_proxy_protocol.c,dst_port[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
845,37413,src_addr,3,ngx_proxy_protocol_inet6_addrs_t.src_addr,,core\ngx_proxy_protocol.c,src_addr[16],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
846,37414,dst_addr,3,ngx_proxy_protocol_inet6_addrs_t.dst_addr,,core\ngx_proxy_protocol.c,dst_addr[16],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
847,37415,src_port,3,ngx_proxy_protocol_inet6_addrs_t.src_port,,core\ngx_proxy_protocol.c,src_port[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
848,37416,dst_port,3,ngx_proxy_protocol_inet6_addrs_t.dst_port,,core\ngx_proxy_protocol.c,dst_port[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
849,38432,src_addr,3,ngx_proxy_protocol_s.src_addr,,core\ngx_proxy_protocol.h,src_addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
850,38433,dst_addr,3,ngx_proxy_protocol_s.dst_addr,,core\ngx_proxy_protocol.h,dst_addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
851,38434,src_port,3,ngx_proxy_protocol_s.src_port,,core\ngx_proxy_protocol.h,src_port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
852,38435,dst_port,3,ngx_proxy_protocol_s.dst_port,,core\ngx_proxy_protocol.h,dst_port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
853,38590,prev,3,ngx_queue_s.prev,,core\ngx_queue.h,*prev,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
854,38591,next,3,ngx_queue_s.next,,core\ngx_queue.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
855,39220,right,3,ngx_radix_node_s.right,,core\ngx_radix_tree.h,*right,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
856,39221,left,3,ngx_radix_node_s.left,,core\ngx_radix_tree.h,*left,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
857,39222,parent,3,ngx_radix_node_s.parent,,core\ngx_radix_tree.h,*parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
858,39223,value,3,ngx_radix_node_s.value,,core\ngx_radix_tree.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
859,39225,root,3,ngx_radix_tree_t.root,,core\ngx_radix_tree.h,*root,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
860,39226,pool,3,ngx_radix_tree_t.pool,,core\ngx_radix_tree.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
861,39227,free,3,ngx_radix_tree_t.free,,core\ngx_radix_tree.h,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
862,39228,start,3,ngx_radix_tree_t.start,,core\ngx_radix_tree.h,*start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
863,39229,size,3,ngx_radix_tree_t.size,,core\ngx_radix_tree.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
864,40187,key,3,ngx_rbtree_node_s.key,,core\ngx_rbtree.h,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
865,40188,left,3,ngx_rbtree_node_s.left,,core\ngx_rbtree.h,*left,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
866,40189,right,3,ngx_rbtree_node_s.right,,core\ngx_rbtree.h,*right,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
867,40190,parent,3,ngx_rbtree_node_s.parent,,core\ngx_rbtree.h,*parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
868,40191,color,3,ngx_rbtree_node_s.color,,core\ngx_rbtree.h,color,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
869,40192,data,3,ngx_rbtree_node_s.data,,core\ngx_rbtree.h,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
870,40203,root,3,ngx_rbtree_s.root,,core\ngx_rbtree.h,*root,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
871,40204,sentinel,3,ngx_rbtree_s.sentinel,,core\ngx_rbtree.h,*sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
872,40205,insert,3,ngx_rbtree_s.insert,,core\ngx_rbtree.h,insert,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
873,40249,pcre_jit,3,ngx_regex_conf_t.pcre_jit,,core\ngx_regex.c,pcre_jit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
874,40972,code,3,ngx_regex_t.code,,core\ngx_regex.h,*code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
875,40973,extra,3,ngx_regex_t.extra,,core\ngx_regex.h,*extra,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
876,40976,pattern,3,ngx_regex_compile_t.pattern,,core\ngx_regex.h,pattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
877,40977,pool,3,ngx_regex_compile_t.pool,,core\ngx_regex.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
878,40978,options,3,ngx_regex_compile_t.options,,core\ngx_regex.h,options,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
879,40979,regex,3,ngx_regex_compile_t.regex,,core\ngx_regex.h,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
880,40980,captures,3,ngx_regex_compile_t.captures,,core\ngx_regex.h,captures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
881,40981,named_captures,3,ngx_regex_compile_t.named_captures,,core\ngx_regex.h,named_captures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
882,40982,name_size,3,ngx_regex_compile_t.name_size,,core\ngx_regex.h,name_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
883,40983,names,3,ngx_regex_compile_t.names,,core\ngx_regex.h,*names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
884,40984,err,3,ngx_regex_compile_t.err,,core\ngx_regex.h,err,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
885,40987,regex,3,ngx_regex_elt_t.regex,,core\ngx_regex.h,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
886,40988,name,3,ngx_regex_elt_t.name,,core\ngx_regex.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
887,41019,ident_hi,3,ngx_resolver_hdr_t.ident_hi,,core\ngx_resolver.c,ident_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
888,41020,ident_lo,3,ngx_resolver_hdr_t.ident_lo,,core\ngx_resolver.c,ident_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
889,41021,flags_hi,3,ngx_resolver_hdr_t.flags_hi,,core\ngx_resolver.c,flags_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
890,41022,flags_lo,3,ngx_resolver_hdr_t.flags_lo,,core\ngx_resolver.c,flags_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
891,41023,nqs_hi,3,ngx_resolver_hdr_t.nqs_hi,,core\ngx_resolver.c,nqs_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
892,41024,nqs_lo,3,ngx_resolver_hdr_t.nqs_lo,,core\ngx_resolver.c,nqs_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
893,41025,nan_hi,3,ngx_resolver_hdr_t.nan_hi,,core\ngx_resolver.c,nan_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
894,41026,nan_lo,3,ngx_resolver_hdr_t.nan_lo,,core\ngx_resolver.c,nan_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
895,41027,nns_hi,3,ngx_resolver_hdr_t.nns_hi,,core\ngx_resolver.c,nns_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
896,41028,nns_lo,3,ngx_resolver_hdr_t.nns_lo,,core\ngx_resolver.c,nns_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
897,41029,nar_hi,3,ngx_resolver_hdr_t.nar_hi,,core\ngx_resolver.c,nar_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
898,41030,nar_lo,3,ngx_resolver_hdr_t.nar_lo,,core\ngx_resolver.c,nar_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
899,41033,type_hi,3,ngx_resolver_qs_t.type_hi,,core\ngx_resolver.c,type_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
900,41034,type_lo,3,ngx_resolver_qs_t.type_lo,,core\ngx_resolver.c,type_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
901,41035,class_hi,3,ngx_resolver_qs_t.class_hi,,core\ngx_resolver.c,class_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
902,41036,class_lo,3,ngx_resolver_qs_t.class_lo,,core\ngx_resolver.c,class_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
903,41039,type_hi,3,ngx_resolver_an_t.type_hi,,core\ngx_resolver.c,type_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
904,41040,type_lo,3,ngx_resolver_an_t.type_lo,,core\ngx_resolver.c,type_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
905,41041,class_hi,3,ngx_resolver_an_t.class_hi,,core\ngx_resolver.c,class_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
906,41042,class_lo,3,ngx_resolver_an_t.class_lo,,core\ngx_resolver.c,class_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
907,41043,ttl,3,ngx_resolver_an_t.ttl,,core\ngx_resolver.c,ttl[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
908,41044,len_hi,3,ngx_resolver_an_t.len_hi,,core\ngx_resolver.c,len_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
909,41045,len_lo,3,ngx_resolver_an_t.len_lo,,core\ngx_resolver.c,len_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
910,52368,udp,3,ngx_resolver_connection_t.udp,,core\ngx_resolver.h,*udp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
911,52369,tcp,3,ngx_resolver_connection_t.tcp,,core\ngx_resolver.h,*tcp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
912,52371,sockaddr,3,ngx_resolver_connection_t.sockaddr,,core\ngx_resolver.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
913,52372,socklen,3,ngx_resolver_connection_t.socklen,,core\ngx_resolver.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
914,52373,server,3,ngx_resolver_connection_t.server,,core\ngx_resolver.h,server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
915,52374,log,3,ngx_resolver_connection_t.log,,core\ngx_resolver.h,log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
916,52375,read_buf,3,ngx_resolver_connection_t.read_buf,,core\ngx_resolver.h,*read_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
917,52376,write_buf,3,ngx_resolver_connection_t.write_buf,,core\ngx_resolver.h,*write_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
918,52377,resolver,3,ngx_resolver_connection_t.resolver,,core\ngx_resolver.h,*resolver,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
919,52388,sockaddr,3,ngx_resolver_addr_t.sockaddr,,core\ngx_resolver.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
920,52389,socklen,3,ngx_resolver_addr_t.socklen,,core\ngx_resolver.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
921,52390,name,3,ngx_resolver_addr_t.name,,core\ngx_resolver.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
922,52391,priority,3,ngx_resolver_addr_t.priority,,core\ngx_resolver.h,priority,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
923,52392,weight,3,ngx_resolver_addr_t.weight,,core\ngx_resolver.h,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
924,52395,name,3,ngx_resolver_srv_t.name,,core\ngx_resolver.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
925,52396,priority,3,ngx_resolver_srv_t.priority,,core\ngx_resolver.h,priority,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
926,52397,weight,3,ngx_resolver_srv_t.weight,,core\ngx_resolver.h,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
927,52398,port,3,ngx_resolver_srv_t.port,,core\ngx_resolver.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
928,52401,name,3,ngx_resolver_srv_name_t.name,,core\ngx_resolver.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
929,52402,priority,3,ngx_resolver_srv_name_t.priority,,core\ngx_resolver.h,priority,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
930,52403,weight,3,ngx_resolver_srv_name_t.weight,,core\ngx_resolver.h,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
931,52404,port,3,ngx_resolver_srv_name_t.port,,core\ngx_resolver.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
932,52405,ctx,3,ngx_resolver_srv_name_t.ctx,,core\ngx_resolver.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
933,52406,state,3,ngx_resolver_srv_name_t.state,,core\ngx_resolver.h,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
934,52407,naddrs,3,ngx_resolver_srv_name_t.naddrs,,core\ngx_resolver.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
935,52408,addrs,3,ngx_resolver_srv_name_t.addrs,,core\ngx_resolver.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
936,52411,node,3,ngx_resolver_node_t.node,,core\ngx_resolver.h,node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
937,52412,queue,3,ngx_resolver_node_t.queue,,core\ngx_resolver.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
938,52413,name,3,ngx_resolver_node_t.name,,core\ngx_resolver.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
939,52415,addr6,3,ngx_resolver_node_t.addr6,,core\ngx_resolver.h,addr6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
940,52416,nlen,3,ngx_resolver_node_t.nlen,,core\ngx_resolver.h,nlen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
941,52417,qlen,3,ngx_resolver_node_t.qlen,,core\ngx_resolver.h,qlen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
942,52418,query,3,ngx_resolver_node_t.query,,core\ngx_resolver.h,*query,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
943,52419,query6,3,ngx_resolver_node_t.query6,,core\ngx_resolver.h,*query6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
944,52421,addr,3,ngx_resolver_node_t.u.addr,,core\ngx_resolver.h,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
945,52422,addrs,3,ngx_resolver_node_t.u.addrs,,core\ngx_resolver.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
946,52423,cname,3,ngx_resolver_node_t.u.cname,,core\ngx_resolver.h,*cname,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
947,52424,srvs,3,ngx_resolver_node_t.u.srvs,,core\ngx_resolver.h,*srvs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
948,52425,u,3,ngx_resolver_node_t.u,,core\ngx_resolver.h,u,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
949,52426,code,3,ngx_resolver_node_t.code,,core\ngx_resolver.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
950,52427,naddrs,3,ngx_resolver_node_t.naddrs,,core\ngx_resolver.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
951,52428,nsrvs,3,ngx_resolver_node_t.nsrvs,,core\ngx_resolver.h,nsrvs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
952,52429,cnlen,3,ngx_resolver_node_t.cnlen,,core\ngx_resolver.h,cnlen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
953,52432,addr6,3,ngx_resolver_node_t.u6.addr6,,core\ngx_resolver.h,addr6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
954,52434,addrs6,3,ngx_resolver_node_t.u6.addrs6,,core\ngx_resolver.h,*addrs6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
955,52435,u6,3,ngx_resolver_node_t.u6,,core\ngx_resolver.h,u6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
956,52436,naddrs6,3,ngx_resolver_node_t.naddrs6,,core\ngx_resolver.h,naddrs6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
957,52437,expire,3,ngx_resolver_node_t.expire,,core\ngx_resolver.h,expire,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
958,52438,valid,3,ngx_resolver_node_t.valid,,core\ngx_resolver.h,valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
959,52439,ttl,3,ngx_resolver_node_t.ttl,,core\ngx_resolver.h,ttl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
960,52440,tcp,3,ngx_resolver_node_t.tcp,,core\ngx_resolver.h,tcp:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
961,52441,tcp6,3,ngx_resolver_node_t.tcp6,,core\ngx_resolver.h,tcp6:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
962,52442,last_connection,3,ngx_resolver_node_t.last_connection,,core\ngx_resolver.h,last_connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
963,52443,waiting,3,ngx_resolver_node_t.waiting,,core\ngx_resolver.h,*waiting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
964,52446,event,3,ngx_resolver_s.event,,core\ngx_resolver.h,*event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
965,52447,dummy,3,ngx_resolver_s.dummy,,core\ngx_resolver.h,*dummy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
966,52448,log,3,ngx_resolver_s.log,,core\ngx_resolver.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
967,52449,ident,3,ngx_resolver_s.ident,,core\ngx_resolver.h,ident,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
968,52450,connections,3,ngx_resolver_s.connections,,core\ngx_resolver.h,connections,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
969,52451,last_connection,3,ngx_resolver_s.last_connection,,core\ngx_resolver.h,last_connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
970,52452,name_rbtree,3,ngx_resolver_s.name_rbtree,,core\ngx_resolver.h,name_rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
971,52453,name_sentinel,3,ngx_resolver_s.name_sentinel,,core\ngx_resolver.h,name_sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
972,52454,srv_rbtree,3,ngx_resolver_s.srv_rbtree,,core\ngx_resolver.h,srv_rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
973,52455,srv_sentinel,3,ngx_resolver_s.srv_sentinel,,core\ngx_resolver.h,srv_sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
974,52456,addr_rbtree,3,ngx_resolver_s.addr_rbtree,,core\ngx_resolver.h,addr_rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
975,52457,addr_sentinel,3,ngx_resolver_s.addr_sentinel,,core\ngx_resolver.h,addr_sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
976,52458,name_resend_queue,3,ngx_resolver_s.name_resend_queue,,core\ngx_resolver.h,name_resend_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
977,52459,srv_resend_queue,3,ngx_resolver_s.srv_resend_queue,,core\ngx_resolver.h,srv_resend_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
978,52460,addr_resend_queue,3,ngx_resolver_s.addr_resend_queue,,core\ngx_resolver.h,addr_resend_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
979,52461,name_expire_queue,3,ngx_resolver_s.name_expire_queue,,core\ngx_resolver.h,name_expire_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
980,52462,srv_expire_queue,3,ngx_resolver_s.srv_expire_queue,,core\ngx_resolver.h,srv_expire_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
981,52463,addr_expire_queue,3,ngx_resolver_s.addr_expire_queue,,core\ngx_resolver.h,addr_expire_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
982,52464,ipv6,3,ngx_resolver_s.ipv6,,core\ngx_resolver.h,ipv6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
983,52465,addr6_rbtree,3,ngx_resolver_s.addr6_rbtree,,core\ngx_resolver.h,addr6_rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
984,52466,addr6_sentinel,3,ngx_resolver_s.addr6_sentinel,,core\ngx_resolver.h,addr6_sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
985,52467,addr6_resend_queue,3,ngx_resolver_s.addr6_resend_queue,,core\ngx_resolver.h,addr6_resend_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
986,52468,addr6_expire_queue,3,ngx_resolver_s.addr6_expire_queue,,core\ngx_resolver.h,addr6_expire_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
987,52469,resend_timeout,3,ngx_resolver_s.resend_timeout,,core\ngx_resolver.h,resend_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
988,52470,tcp_timeout,3,ngx_resolver_s.tcp_timeout,,core\ngx_resolver.h,tcp_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
989,52471,expire,3,ngx_resolver_s.expire,,core\ngx_resolver.h,expire,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
990,52472,valid,3,ngx_resolver_s.valid,,core\ngx_resolver.h,valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
991,52473,log_level,3,ngx_resolver_s.log_level,,core\ngx_resolver.h,log_level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
992,52475,next,3,ngx_resolver_ctx_s.next,,core\ngx_resolver.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
993,52476,resolver,3,ngx_resolver_ctx_s.resolver,,core\ngx_resolver.h,*resolver,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
994,52477,node,3,ngx_resolver_ctx_s.node,,core\ngx_resolver.h,*node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
995,52478,ident,3,ngx_resolver_ctx_s.ident,,core\ngx_resolver.h,ident,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
996,52479,state,3,ngx_resolver_ctx_s.state,,core\ngx_resolver.h,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
997,52480,name,3,ngx_resolver_ctx_s.name,,core\ngx_resolver.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
998,52481,service,3,ngx_resolver_ctx_s.service,,core\ngx_resolver.h,service,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
999,52482,valid,3,ngx_resolver_ctx_s.valid,,core\ngx_resolver.h,valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1000,52483,naddrs,3,ngx_resolver_ctx_s.naddrs,,core\ngx_resolver.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1001,52484,addrs,3,ngx_resolver_ctx_s.addrs,,core\ngx_resolver.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1002,52485,addr,3,ngx_resolver_ctx_s.addr,,core\ngx_resolver.h,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1003,52487,sin,3,ngx_resolver_ctx_s.sin,,core\ngx_resolver.h,sin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1004,52488,count,3,ngx_resolver_ctx_s.count,,core\ngx_resolver.h,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1005,52489,nsrvs,3,ngx_resolver_ctx_s.nsrvs,,core\ngx_resolver.h,nsrvs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1006,52490,srvs,3,ngx_resolver_ctx_s.srvs,,core\ngx_resolver.h,*srvs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1007,52491,handler,3,ngx_resolver_ctx_s.handler,,core\ngx_resolver.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1008,52492,data,3,ngx_resolver_ctx_s.data,,core\ngx_resolver.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1009,52493,timeout,3,ngx_resolver_ctx_s.timeout,,core\ngx_resolver.h,timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1010,52494,quick,3,ngx_resolver_ctx_s.quick,,core\ngx_resolver.h,quick:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1011,52495,async,3,ngx_resolver_ctx_s.async,,core\ngx_resolver.h,async:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1012,52496,cancelable,3,ngx_resolver_ctx_s.cancelable,,core\ngx_resolver.h,cancelable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1013,52497,recursion,3,ngx_resolver_ctx_s.recursion,,core\ngx_resolver.h,recursion,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1014,52498,event,3,ngx_resolver_ctx_s.event,,core\ngx_resolver.h,*event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1015,58255,bytes,3,ngx_sha1_t.bytes,,core\ngx_sha1.h,bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,13,0,1,1,0,0,,0,0,0,0,0,
1016,58256,a,3,ngx_sha1_t.a,,core\ngx_sha1.h,a,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1017,58257,b,3,ngx_sha1_t.b,,core\ngx_sha1.h,b,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1018,58258,c,3,ngx_sha1_t.c,,core\ngx_sha1.h,c,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1019,58259,d,3,ngx_sha1_t.d,,core\ngx_sha1.h,d,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1020,58260,e,3,ngx_sha1_t.e,,core\ngx_sha1.h,e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1021,58261,f,3,ngx_sha1_t.f,,core\ngx_sha1.h,f,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1022,58262,buffer,3,ngx_sha1_t.buffer,,core\ngx_sha1.h,buffer[64],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,17,0,1,1,0,0,,0,0,0,0,0,
1023,58459,lock,3,ngx_shmtx_sh_t.lock,,core\ngx_shmtx.h,lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1024,58460,wait,3,ngx_shmtx_sh_t.wait,,core\ngx_shmtx.h,wait,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1025,58463,lock,3,ngx_shmtx_t.lock,,core\ngx_shmtx.h,*lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1026,58464,wait,3,ngx_shmtx_t.wait,,core\ngx_shmtx.h,*wait,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1027,58465,semaphore,3,ngx_shmtx_t.semaphore,,core\ngx_shmtx.h,semaphore,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1028,58466,sem,3,ngx_shmtx_t.sem,,core\ngx_shmtx.h,sem,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1029,58467,fd,3,ngx_shmtx_t.fd,,core\ngx_shmtx.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1030,58468,name,3,ngx_shmtx_t.name,,core\ngx_shmtx.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1031,58469,spin,3,ngx_shmtx_t.spin,,core\ngx_shmtx.h,spin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1032,61190,slab,3,ngx_slab_page_s.slab,,core\ngx_slab.h,slab,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1033,61191,next,3,ngx_slab_page_s.next,,core\ngx_slab.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1034,61192,prev,3,ngx_slab_page_s.prev,,core\ngx_slab.h,prev,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1035,61194,total,3,ngx_slab_stat_t.total,,core\ngx_slab.h,total,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1036,61195,used,3,ngx_slab_stat_t.used,,core\ngx_slab.h,used,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1037,61196,reqs,3,ngx_slab_stat_t.reqs,,core\ngx_slab.h,reqs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1038,61197,fails,3,ngx_slab_stat_t.fails,,core\ngx_slab.h,fails,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1039,61200,lock,3,ngx_slab_pool_t.lock,,core\ngx_slab.h,lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1040,61201,min_size,3,ngx_slab_pool_t.min_size,,core\ngx_slab.h,min_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1041,61202,min_shift,3,ngx_slab_pool_t.min_shift,,core\ngx_slab.h,min_shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1042,61203,pages,3,ngx_slab_pool_t.pages,,core\ngx_slab.h,*pages,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1043,61204,last,3,ngx_slab_pool_t.last,,core\ngx_slab.h,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1044,61205,free,3,ngx_slab_pool_t.free,,core\ngx_slab.h,free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1045,61206,stats,3,ngx_slab_pool_t.stats,,core\ngx_slab.h,*stats,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
1046,61207,pfree,3,ngx_slab_pool_t.pfree,,core\ngx_slab.h,pfree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1047,61208,start,3,ngx_slab_pool_t.start,,core\ngx_slab.h,*start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1048,61209,end,3,ngx_slab_pool_t.end,,core\ngx_slab.h,*end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1049,61210,mutex,3,ngx_slab_pool_t.mutex,,core\ngx_slab.h,mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1050,61211,log_ctx,3,ngx_slab_pool_t.log_ctx,,core\ngx_slab.h,*log_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1051,61212,zero,3,ngx_slab_pool_t.zero,,core\ngx_slab.h,zero,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1052,61213,log_nomem,3,ngx_slab_pool_t.log_nomem,,core\ngx_slab.h,log_nomem:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1053,61214,data,3,ngx_slab_pool_t.data,,core\ngx_slab.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1054,61215,addr,3,ngx_slab_pool_t.addr,,core\ngx_slab.h,*addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1055,66404,len,3,ngx_str_t.len,,core\ngx_string.h,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,298,0,1,1,0,0,,0,0,0,0,0,
1056,66405,data,3,ngx_str_t.data,,core\ngx_string.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,333,0,1,1,0,0,,0,0,0,0,0,
1057,66408,key,3,ngx_keyval_t.key,,core\ngx_string.h,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1058,66409,value,3,ngx_keyval_t.value,,core\ngx_string.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1059,66412,len,3,ngx_variable_value_t.len,,core\ngx_string.h,len:28,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1060,66413,valid,3,ngx_variable_value_t.valid,,core\ngx_string.h,valid:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1061,66414,no_cacheable,3,ngx_variable_value_t.no_cacheable,,core\ngx_string.h,no_cacheable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1062,66415,not_found,3,ngx_variable_value_t.not_found,,core\ngx_string.h,not_found:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1063,66416,escape,3,ngx_variable_value_t.escape,,core\ngx_string.h,escape:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1064,66417,data,3,ngx_variable_value_t.data,,core\ngx_string.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1065,66659,node,3,ngx_str_node_t.node,,core\ngx_string.h,node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1066,66660,str,3,ngx_str_node_t.str,,core\ngx_string.h,str,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1067,67718,facility,3,ngx_syslog_peer_t.facility,,core\ngx_syslog.h,facility,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1068,67719,severity,3,ngx_syslog_peer_t.severity,,core\ngx_syslog.h,severity,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1069,67720,tag,3,ngx_syslog_peer_t.tag,,core\ngx_syslog.h,tag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1070,67721,server,3,ngx_syslog_peer_t.server,,core\ngx_syslog.h,server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1071,67722,conn,3,ngx_syslog_peer_t.conn,,core\ngx_syslog.h,conn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
1072,67723,busy,3,ngx_syslog_peer_t.busy,,core\ngx_syslog.h,busy:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1073,67724,nohostname,3,ngx_syslog_peer_t.nohostname,,core\ngx_syslog.h,nohostname:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1074,67765,pools,3,ngx_thread_pool_conf_t.pools,,core\ngx_thread_pool.c,pools,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1075,67768,first,3,ngx_thread_pool_queue_t.first,,core\ngx_thread_pool.c,*first,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1076,67769,last,3,ngx_thread_pool_queue_t.last,,core\ngx_thread_pool.c,**last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1077,67772,mtx,3,ngx_thread_pool_s.mtx,,core\ngx_thread_pool.c,mtx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1078,67773,queue,3,ngx_thread_pool_s.queue,,core\ngx_thread_pool.c,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1079,67774,waiting,3,ngx_thread_pool_s.waiting,,core\ngx_thread_pool.c,waiting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1080,67775,cond,3,ngx_thread_pool_s.cond,,core\ngx_thread_pool.c,cond,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1081,67776,log,3,ngx_thread_pool_s.log,,core\ngx_thread_pool.c,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1082,67777,name,3,ngx_thread_pool_s.name,,core\ngx_thread_pool.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1083,67778,threads,3,ngx_thread_pool_s.threads,,core\ngx_thread_pool.c,threads,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1084,67779,max_queue,3,ngx_thread_pool_s.max_queue,,core\ngx_thread_pool.c,max_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1085,67780,file,3,ngx_thread_pool_s.file,,core\ngx_thread_pool.c,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1086,67781,line,3,ngx_thread_pool_s.line,,core\ngx_thread_pool.c,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1087,69355,next,3,ngx_thread_task_s.next,,core\ngx_thread_pool.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1088,69356,id,3,ngx_thread_task_s.id,,core\ngx_thread_pool.h,id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1089,69357,ctx,3,ngx_thread_task_s.ctx,,core\ngx_thread_pool.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1090,69364,event,3,ngx_thread_task_s.event,,core\ngx_thread_pool.h,event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1091,70491,sec,3,ngx_time_t.sec,,core\ngx_times.h,sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1092,70492,msec,3,ngx_time_t.msec,,core\ngx_times.h,msec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1093,70493,gmtoff,3,ngx_time_t.gmtoff,,core\ngx_times.h,gmtoff,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1094,70552,changes,3,ngx_devpoll_conf_t.changes,,event\modules\ngx_devpoll_module.c,changes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1095,70553,events,3,ngx_devpoll_conf_t.events,,event\modules\ngx_devpoll_module.c,events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1096,71749,events,3,ngx_epoll_conf_t.events,,event\modules\ngx_epoll_module.c,events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1097,71750,aio_requests,3,ngx_epoll_conf_t.aio_requests,,event\modules\ngx_epoll_module.c,aio_requests,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1098,72872,events,3,ngx_eventport_conf_t.events,,event\modules\ngx_eventport_module.c,events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1099,74768,threads,3,ngx_iocp_conf_t.threads,,event\modules\ngx_iocp_module.h,threads,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1100,74769,post_acceptex,3,ngx_iocp_conf_t.post_acceptex,,event\modules\ngx_iocp_module.h,post_acceptex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1101,74770,acceptex_read,3,ngx_iocp_conf_t.acceptex_read,,event\modules\ngx_iocp_module.h,acceptex_read,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1102,74785,changes,3,ngx_kqueue_conf_t.changes,,event\modules\ngx_kqueue_module.c,changes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1103,74786,events,3,ngx_kqueue_conf_t.events,,event\modules\ngx_kqueue_module.c,events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1104,82182,data,3,ngx_event_s.data,,event\ngx_event.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1105,82183,write,3,ngx_event_s.write,,event\ngx_event.h,write:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1106,82184,accept,3,ngx_event_s.accept,,event\ngx_event.h,accept:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1107,82185,instance,3,ngx_event_s.instance,,event\ngx_event.h,instance:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1108,82186,active,3,ngx_event_s.active,,event\ngx_event.h,active:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1109,82187,disabled,3,ngx_event_s.disabled,,event\ngx_event.h,disabled:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1110,82188,ready,3,ngx_event_s.ready,,event\ngx_event.h,ready:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1111,82189,oneshot,3,ngx_event_s.oneshot,,event\ngx_event.h,oneshot:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1112,82190,complete,3,ngx_event_s.complete,,event\ngx_event.h,complete:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1113,82191,eof,3,ngx_event_s.eof,,event\ngx_event.h,eof:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1114,82192,error,3,ngx_event_s.error,,event\ngx_event.h,error:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1115,82193,timedout,3,ngx_event_s.timedout,,event\ngx_event.h,timedout:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1116,82194,timer_set,3,ngx_event_s.timer_set,,event\ngx_event.h,timer_set:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1117,82195,delayed,3,ngx_event_s.delayed,,event\ngx_event.h,delayed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1118,82196,deferred_accept,3,ngx_event_s.deferred_accept,,event\ngx_event.h,deferred_accept:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1119,82197,pending_eof,3,ngx_event_s.pending_eof,,event\ngx_event.h,pending_eof:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1120,82198,posted,3,ngx_event_s.posted,,event\ngx_event.h,posted:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1121,82199,closed,3,ngx_event_s.closed,,event\ngx_event.h,closed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1122,82200,channel,3,ngx_event_s.channel,,event\ngx_event.h,channel:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1123,82201,resolver,3,ngx_event_s.resolver,,event\ngx_event.h,resolver:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1124,82202,cancelable,3,ngx_event_s.cancelable,,event\ngx_event.h,cancelable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1125,82203,kq_vnode,3,ngx_event_s.kq_vnode,,event\ngx_event.h,kq_vnode:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1126,82204,kq_errno,3,ngx_event_s.kq_errno,,event\ngx_event.h,kq_errno,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1127,82205,available,3,ngx_event_s.available,,event\ngx_event.h,available,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1128,82206,handler,3,ngx_event_s.handler,,event\ngx_event.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1129,82207,ovlp,3,ngx_event_s.ovlp,,event\ngx_event.h,ovlp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1130,82208,index,3,ngx_event_s.index,,event\ngx_event.h,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1131,82209,log,3,ngx_event_s.log,,event\ngx_event.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1132,82210,timer,3,ngx_event_s.timer,,event\ngx_event.h,timer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1133,82211,queue,3,ngx_event_s.queue,,event\ngx_event.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1134,82212,thr_ctx,3,ngx_event_s.thr_ctx,,event\ngx_event.h,*thr_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1135,82213,padding,3,ngx_event_s.padding,,event\ngx_event.h,padding[NGX_EVENT_T_PADDING],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1136,82287,connections,3,ngx_event_conf_t.connections,,event\ngx_event.h,connections,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1137,82288,use,3,ngx_event_conf_t.use,,event\ngx_event.h,use,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1138,82289,multi_accept,3,ngx_event_conf_t.multi_accept,,event\ngx_event.h,multi_accept,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1139,82290,accept_mutex,3,ngx_event_conf_t.accept_mutex,,event\ngx_event.h,accept_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1140,82291,accept_mutex_delay,3,ngx_event_conf_t.accept_mutex_delay,,event\ngx_event.h,accept_mutex_delay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1141,82292,name,3,ngx_event_conf_t.name,,event\ngx_event.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1142,82293,debug_connection,3,ngx_event_conf_t.debug_connection,,event\ngx_event.h,debug_connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1143,82296,name,3,ngx_event_module_t.name,,event\ngx_event.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1144,82308,actions,3,ngx_event_module_t.actions,,event\ngx_event.h,actions,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1145,84511,connection,3,ngx_peer_connection_s.connection,,event\ngx_event_connect.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1146,84513,sockaddr,3,ngx_peer_connection_s.sockaddr,,event\ngx_event_connect.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1147,84514,socklen,3,ngx_peer_connection_s.socklen,,event\ngx_event_connect.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1148,84515,name,3,ngx_peer_connection_s.name,,event\ngx_event_connect.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1149,84516,tries,3,ngx_peer_connection_s.tries,,event\ngx_event_connect.h,tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1150,84517,start_time,3,ngx_peer_connection_s.start_time,,event\ngx_event_connect.h,start_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1151,84518,get,3,ngx_peer_connection_s.get,,event\ngx_event_connect.h,get,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1152,84519,free,3,ngx_peer_connection_s.free,,event\ngx_event_connect.h,free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1153,84520,notify,3,ngx_peer_connection_s.notify,,event\ngx_event_connect.h,notify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1154,84521,data,3,ngx_peer_connection_s.data,,event\ngx_event_connect.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1155,84522,set_session,3,ngx_peer_connection_s.set_session,,event\ngx_event_connect.h,set_session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1156,84523,save_session,3,ngx_peer_connection_s.save_session,,event\ngx_event_connect.h,save_session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1157,84524,local,3,ngx_peer_connection_s.local,,event\ngx_event_connect.h,*local,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1158,84525,type,3,ngx_peer_connection_s.type,,event\ngx_event_connect.h,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1159,84526,rcvbuf,3,ngx_peer_connection_s.rcvbuf,,event\ngx_event_connect.h,rcvbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1160,84527,log,3,ngx_peer_connection_s.log,,event\ngx_event_connect.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1161,84528,cached,3,ngx_peer_connection_s.cached,,event\ngx_event_connect.h,cached:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1162,84529,transparent,3,ngx_peer_connection_s.transparent,,event\ngx_event_connect.h,transparent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1163,84530,so_keepalive,3,ngx_peer_connection_s.so_keepalive,,event\ngx_event_connect.h,so_keepalive:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1164,84531,down,3,ngx_peer_connection_s.down,,event\ngx_event_connect.h,down:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1165,84532,log_error,3,ngx_peer_connection_s.log_error,,event\ngx_event_connect.h,log_error:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1166,85022,engine,3,ngx_openssl_conf_t.engine,,event\ngx_event_openssl.c,engine,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1167,94037,ctx,3,ngx_ssl_s.ctx,,event\ngx_event_openssl.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1168,94038,log,3,ngx_ssl_s.log,,event\ngx_event_openssl.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1169,94039,buffer_size,3,ngx_ssl_s.buffer_size,,event\ngx_event_openssl.h,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1170,94041,connection,3,ngx_ssl_connection_s.connection,,event\ngx_event_openssl.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1171,94042,session_ctx,3,ngx_ssl_connection_s.session_ctx,,event\ngx_event_openssl.h,*session_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1172,94043,last,3,ngx_ssl_connection_s.last,,event\ngx_event_openssl.h,last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1173,94044,buf,3,ngx_ssl_connection_s.buf,,event\ngx_event_openssl.h,*buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1174,94045,buffer_size,3,ngx_ssl_connection_s.buffer_size,,event\ngx_event_openssl.h,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1175,94046,handler,3,ngx_ssl_connection_s.handler,,event\ngx_event_openssl.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1176,94047,session,3,ngx_ssl_connection_s.session,,event\ngx_event_openssl.h,*session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1177,94048,save_session,3,ngx_ssl_connection_s.save_session,,event\ngx_event_openssl.h,save_session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1178,94049,saved_read_handler,3,ngx_ssl_connection_s.saved_read_handler,,event\ngx_event_openssl.h,saved_read_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1179,94050,saved_write_handler,3,ngx_ssl_connection_s.saved_write_handler,,event\ngx_event_openssl.h,saved_write_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1180,94051,ocsp,3,ngx_ssl_connection_s.ocsp,,event\ngx_event_openssl.h,*ocsp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1181,94052,early_buf,3,ngx_ssl_connection_s.early_buf,,event\ngx_event_openssl.h,early_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1182,94053,handshaked,3,ngx_ssl_connection_s.handshaked,,event\ngx_event_openssl.h,handshaked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1183,94054,handshake_rejected,3,ngx_ssl_connection_s.handshake_rejected,,event\ngx_event_openssl.h,handshake_rejected:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1184,94055,renegotiation,3,ngx_ssl_connection_s.renegotiation,,event\ngx_event_openssl.h,renegotiation:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1185,94056,buffer,3,ngx_ssl_connection_s.buffer,,event\ngx_event_openssl.h,buffer:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1186,94057,no_wait_shutdown,3,ngx_ssl_connection_s.no_wait_shutdown,,event\ngx_event_openssl.h,no_wait_shutdown:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1187,94058,no_send_shutdown,3,ngx_ssl_connection_s.no_send_shutdown,,event\ngx_event_openssl.h,no_send_shutdown:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1188,94059,shutdown_without_free,3,ngx_ssl_connection_s.shutdown_without_free,,event\ngx_event_openssl.h,shutdown_without_free:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1189,94060,handshake_buffer_set,3,ngx_ssl_connection_s.handshake_buffer_set,,event\ngx_event_openssl.h,handshake_buffer_set:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1190,94061,try_early_data,3,ngx_ssl_connection_s.try_early_data,,event\ngx_event_openssl.h,try_early_data:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1191,94062,in_early,3,ngx_ssl_connection_s.in_early,,event\ngx_event_openssl.h,in_early:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1192,94063,in_ocsp,3,ngx_ssl_connection_s.in_ocsp,,event\ngx_event_openssl.h,in_ocsp:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1193,94064,early_preread,3,ngx_ssl_connection_s.early_preread,,event\ngx_event_openssl.h,early_preread:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1194,94065,write_blocked,3,ngx_ssl_connection_s.write_blocked,,event\ngx_event_openssl.h,write_blocked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1195,94069,node,3,ngx_ssl_sess_id_s.node,,event\ngx_event_openssl.h,node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1196,94070,id,3,ngx_ssl_sess_id_s.id,,event\ngx_event_openssl.h,*id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1197,94071,len,3,ngx_ssl_sess_id_s.len,,event\ngx_event_openssl.h,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1198,94072,session,3,ngx_ssl_sess_id_s.session,,event\ngx_event_openssl.h,*session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1199,94073,queue,3,ngx_ssl_sess_id_s.queue,,event\ngx_event_openssl.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1200,94074,expire,3,ngx_ssl_sess_id_s.expire,,event\ngx_event_openssl.h,expire,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1201,94075,stub,3,ngx_ssl_sess_id_s.stub,,event\ngx_event_openssl.h,*stub,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1202,94076,sess_id,3,ngx_ssl_sess_id_s.sess_id,,event\ngx_event_openssl.h,sess_id[32],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1203,94084,session_rbtree,3,ngx_ssl_session_cache_t.session_rbtree,,event\ngx_event_openssl.h,session_rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1204,94085,sentinel,3,ngx_ssl_session_cache_t.sentinel,,event\ngx_event_openssl.h,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1205,94086,expire_queue,3,ngx_ssl_session_cache_t.expire_queue,,event\ngx_event_openssl.h,expire_queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1206,97496,upstream,3,ngx_event_pipe_s.upstream,,event\ngx_event_pipe.h,*upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1207,97497,downstream,3,ngx_event_pipe_s.downstream,,event\ngx_event_pipe.h,*downstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1208,97498,free_raw_bufs,3,ngx_event_pipe_s.free_raw_bufs,,event\ngx_event_pipe.h,*free_raw_bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1209,97499,in,3,ngx_event_pipe_s.in,,event\ngx_event_pipe.h,*in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1210,97500,last_in,3,ngx_event_pipe_s.last_in,,event\ngx_event_pipe.h,**last_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1211,97501,writing,3,ngx_event_pipe_s.writing,,event\ngx_event_pipe.h,*writing,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1212,97502,out,3,ngx_event_pipe_s.out,,event\ngx_event_pipe.h,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1213,97503,free,3,ngx_event_pipe_s.free,,event\ngx_event_pipe.h,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1214,97504,busy,3,ngx_event_pipe_s.busy,,event\ngx_event_pipe.h,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1215,97505,input_filter,3,ngx_event_pipe_s.input_filter,,event\ngx_event_pipe.h,input_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1216,97506,input_ctx,3,ngx_event_pipe_s.input_ctx,,event\ngx_event_pipe.h,*input_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1217,97507,output_filter,3,ngx_event_pipe_s.output_filter,,event\ngx_event_pipe.h,output_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1218,97508,output_ctx,3,ngx_event_pipe_s.output_ctx,,event\ngx_event_pipe.h,*output_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1219,97515,thread_ctx,3,ngx_event_pipe_s.thread_ctx,,event\ngx_event_pipe.h,*thread_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1220,97516,thread_task,3,ngx_event_pipe_s.thread_task,,event\ngx_event_pipe.h,*thread_task,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1221,97517,read,3,ngx_event_pipe_s.read,,event\ngx_event_pipe.h,read:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1222,97518,cacheable,3,ngx_event_pipe_s.cacheable,,event\ngx_event_pipe.h,cacheable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1223,97519,single_buf,3,ngx_event_pipe_s.single_buf,,event\ngx_event_pipe.h,single_buf:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1224,97520,free_bufs,3,ngx_event_pipe_s.free_bufs,,event\ngx_event_pipe.h,free_bufs:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1225,97521,upstream_done,3,ngx_event_pipe_s.upstream_done,,event\ngx_event_pipe.h,upstream_done:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1226,97522,upstream_error,3,ngx_event_pipe_s.upstream_error,,event\ngx_event_pipe.h,upstream_error:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1227,97523,upstream_eof,3,ngx_event_pipe_s.upstream_eof,,event\ngx_event_pipe.h,upstream_eof:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1228,97524,upstream_blocked,3,ngx_event_pipe_s.upstream_blocked,,event\ngx_event_pipe.h,upstream_blocked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1229,97525,downstream_done,3,ngx_event_pipe_s.downstream_done,,event\ngx_event_pipe.h,downstream_done:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1230,97526,downstream_error,3,ngx_event_pipe_s.downstream_error,,event\ngx_event_pipe.h,downstream_error:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1231,97527,cyclic_temp_file,3,ngx_event_pipe_s.cyclic_temp_file,,event\ngx_event_pipe.h,cyclic_temp_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1232,97528,aio,3,ngx_event_pipe_s.aio,,event\ngx_event_pipe.h,aio:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1233,97529,allocated,3,ngx_event_pipe_s.allocated,,event\ngx_event_pipe.h,allocated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1234,97530,bufs,3,ngx_event_pipe_s.bufs,,event\ngx_event_pipe.h,bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1235,97531,tag,3,ngx_event_pipe_s.tag,,event\ngx_event_pipe.h,tag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1236,97532,busy_size,3,ngx_event_pipe_s.busy_size,,event\ngx_event_pipe.h,busy_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1237,97533,read_length,3,ngx_event_pipe_s.read_length,,event\ngx_event_pipe.h,read_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1238,97534,length,3,ngx_event_pipe_s.length,,event\ngx_event_pipe.h,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1239,97535,max_temp_file_size,3,ngx_event_pipe_s.max_temp_file_size,,event\ngx_event_pipe.h,max_temp_file_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1240,97536,temp_file_write_size,3,ngx_event_pipe_s.temp_file_write_size,,event\ngx_event_pipe.h,temp_file_write_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1241,97537,read_timeout,3,ngx_event_pipe_s.read_timeout,,event\ngx_event_pipe.h,read_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1242,97538,send_timeout,3,ngx_event_pipe_s.send_timeout,,event\ngx_event_pipe.h,send_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1243,97539,send_lowat,3,ngx_event_pipe_s.send_lowat,,event\ngx_event_pipe.h,send_lowat,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1244,97540,pool,3,ngx_event_pipe_s.pool,,event\ngx_event_pipe.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1245,97541,log,3,ngx_event_pipe_s.log,,event\ngx_event_pipe.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1246,97542,preread_bufs,3,ngx_event_pipe_s.preread_bufs,,event\ngx_event_pipe.h,*preread_bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1247,97543,preread_size,3,ngx_event_pipe_s.preread_size,,event\ngx_event_pipe.h,preread_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1248,97544,buf_to_file,3,ngx_event_pipe_s.buf_to_file,,event\ngx_event_pipe.h,*buf_to_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1249,97545,limit_rate,3,ngx_event_pipe_s.limit_rate,,event\ngx_event_pipe.h,limit_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1250,97546,start_sec,3,ngx_event_pipe_s.start_sec,,event\ngx_event_pipe.h,start_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1251,97547,temp_file,3,ngx_event_pipe_s.temp_file,,event\ngx_event_pipe.h,*temp_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1252,97548,num,3,ngx_event_pipe_s.num,,event\ngx_event_pipe.h,num,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1253,97968,node,3,ngx_udp_connection_s.node,,event\ngx_event_udp.c,node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1254,97969,connection,3,ngx_udp_connection_s.connection,,event\ngx_event_udp.c,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1255,97970,buffer,3,ngx_udp_connection_s.buffer,,event\ngx_event_udp.c,*buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1256,99234,mask,3,ngx_http_access_rule_t.mask,,http\modules\ngx_http_access_module.c,mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1257,99235,addr,3,ngx_http_access_rule_t.addr,,http\modules\ngx_http_access_module.c,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1258,99236,deny,3,ngx_http_access_rule_t.deny,,http\modules\ngx_http_access_module.c,deny,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1259,99239,rules,3,ngx_http_access_loc_conf_t.rules,,http\modules\ngx_http_access_module.c,*rules,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1260,99240,rules6,3,ngx_http_access_loc_conf_t.rules6,,http\modules\ngx_http_access_module.c,*rules6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1261,99241,rules_un,3,ngx_http_access_loc_conf_t.rules_un,,http\modules\ngx_http_access_module.c,*rules_un,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1262,99796,before_body,3,ngx_http_addition_conf_t.before_body,,http\modules\ngx_http_addition_filter_module.c,before_body,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1263,99797,after_body,3,ngx_http_addition_conf_t.after_body,,http\modules\ngx_http_addition_filter_module.c,after_body,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1264,99798,types,3,ngx_http_addition_conf_t.types,,http\modules\ngx_http_addition_filter_module.c,types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1265,99799,types_keys,3,ngx_http_addition_conf_t.types_keys,,http\modules\ngx_http_addition_filter_module.c,*types_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1266,99802,before_body_sent,3,ngx_http_addition_ctx_t.before_body_sent,,http\modules\ngx_http_addition_filter_module.c,before_body_sent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1267,100308,realm,3,ngx_http_auth_basic_loc_conf_t.realm,,http\modules\ngx_http_auth_basic_module.c,*realm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1268,100309,user_file,3,ngx_http_auth_basic_loc_conf_t.user_file,,http\modules\ngx_http_auth_basic_module.c,*user_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1269,101375,uri,3,ngx_http_auth_request_conf_t.uri,,http\modules\ngx_http_auth_request_module.c,uri,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1270,101376,vars,3,ngx_http_auth_request_conf_t.vars,,http\modules\ngx_http_auth_request_module.c,*vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1271,101379,done,3,ngx_http_auth_request_ctx_t.done,,http\modules\ngx_http_auth_request_module.c,done,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1272,101380,status,3,ngx_http_auth_request_ctx_t.status,,http\modules\ngx_http_auth_request_module.c,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1273,101381,subrequest,3,ngx_http_auth_request_ctx_t.subrequest,,http\modules\ngx_http_auth_request_module.c,*subrequest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1274,101384,index,3,ngx_http_auth_request_variable_t.index,,http\modules\ngx_http_auth_request_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1275,101385,value,3,ngx_http_auth_request_variable_t.value,,http\modules\ngx_http_auth_request_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1276,101386,set_handler,3,ngx_http_auth_request_variable_t.set_handler,,http\modules\ngx_http_auth_request_module.c,set_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1277,102345,name,3,ngx_http_autoindex_entry_t.name,,http\modules\ngx_http_autoindex_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1278,102346,utf_len,3,ngx_http_autoindex_entry_t.utf_len,,http\modules\ngx_http_autoindex_module.c,utf_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1279,102347,escape,3,ngx_http_autoindex_entry_t.escape,,http\modules\ngx_http_autoindex_module.c,escape,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1280,102348,escape_html,3,ngx_http_autoindex_entry_t.escape_html,,http\modules\ngx_http_autoindex_module.c,escape_html,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1281,102349,dir,3,ngx_http_autoindex_entry_t.dir,,http\modules\ngx_http_autoindex_module.c,dir:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1282,102350,file,3,ngx_http_autoindex_entry_t.file,,http\modules\ngx_http_autoindex_module.c,file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1283,102351,mtime,3,ngx_http_autoindex_entry_t.mtime,,http\modules\ngx_http_autoindex_module.c,mtime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1284,102352,size,3,ngx_http_autoindex_entry_t.size,,http\modules\ngx_http_autoindex_module.c,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1285,102355,enable,3,ngx_http_autoindex_loc_conf_t.enable,,http\modules\ngx_http_autoindex_module.c,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1286,102356,format,3,ngx_http_autoindex_loc_conf_t.format,,http\modules\ngx_http_autoindex_module.c,format,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1287,102357,localtime,3,ngx_http_autoindex_loc_conf_t.localtime,,http\modules\ngx_http_autoindex_module.c,localtime,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1288,102358,exact_size,3,ngx_http_autoindex_loc_conf_t.exact_size,,http\modules\ngx_http_autoindex_module.c,exact_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1289,105602,browser,3,ngx_http_modern_browser_mask_t.browser,,http\modules\ngx_http_browser_module.c,browser[12],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1290,105603,skip,3,ngx_http_modern_browser_mask_t.skip,,http\modules\ngx_http_browser_module.c,skip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1291,105604,add,3,ngx_http_modern_browser_mask_t.add,,http\modules\ngx_http_browser_module.c,add,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1292,105605,name,3,ngx_http_modern_browser_mask_t.name,,http\modules\ngx_http_browser_module.c,name[12],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1293,105616,version,3,ngx_http_modern_browser_t.version,,http\modules\ngx_http_browser_module.c,version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1294,105617,skip,3,ngx_http_modern_browser_t.skip,,http\modules\ngx_http_browser_module.c,skip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1295,105618,add,3,ngx_http_modern_browser_t.add,,http\modules\ngx_http_browser_module.c,add,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1296,105619,name,3,ngx_http_modern_browser_t.name,,http\modules\ngx_http_browser_module.c,name[12],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1297,105628,modern_browsers,3,ngx_http_browser_conf_t.modern_browsers,,http\modules\ngx_http_browser_module.c,*modern_browsers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1298,105629,ancient_browsers,3,ngx_http_browser_conf_t.ancient_browsers,,http\modules\ngx_http_browser_module.c,*ancient_browsers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1299,105630,modern_browser_value,3,ngx_http_browser_conf_t.modern_browser_value,,http\modules\ngx_http_browser_module.c,*modern_browser_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1300,105631,ancient_browser_value,3,ngx_http_browser_conf_t.ancient_browser_value,,http\modules\ngx_http_browser_module.c,*ancient_browser_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1301,105632,modern_unlisted_browsers,3,ngx_http_browser_conf_t.modern_unlisted_browsers,,http\modules\ngx_http_browser_module.c,modern_unlisted_browsers:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1302,105633,netscape4,3,ngx_http_browser_conf_t.netscape4,,http\modules\ngx_http_browser_module.c,netscape4:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1303,107272,tables,3,ngx_http_charset_t.tables,,http\modules\ngx_http_charset_filter_module.c,**tables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1304,107273,name,3,ngx_http_charset_t.name,,http\modules\ngx_http_charset_filter_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1305,107274,length,3,ngx_http_charset_t.length,,http\modules\ngx_http_charset_filter_module.c,length:16,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1306,107275,utf8,3,ngx_http_charset_t.utf8,,http\modules\ngx_http_charset_filter_module.c,utf8:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1307,107278,src,3,ngx_http_charset_recode_t.src,,http\modules\ngx_http_charset_filter_module.c,src,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1308,107279,dst,3,ngx_http_charset_recode_t.dst,,http\modules\ngx_http_charset_filter_module.c,dst,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1309,107282,src,3,ngx_http_charset_tables_t.src,,http\modules\ngx_http_charset_filter_module.c,src,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1310,107283,dst,3,ngx_http_charset_tables_t.dst,,http\modules\ngx_http_charset_filter_module.c,dst,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1311,107284,src2dst,3,ngx_http_charset_tables_t.src2dst,,http\modules\ngx_http_charset_filter_module.c,*src2dst,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1312,107285,dst2src,3,ngx_http_charset_tables_t.dst2src,,http\modules\ngx_http_charset_filter_module.c,*dst2src,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1313,107288,charsets,3,ngx_http_charset_main_conf_t.charsets,,http\modules\ngx_http_charset_filter_module.c,charsets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1314,107289,tables,3,ngx_http_charset_main_conf_t.tables,,http\modules\ngx_http_charset_filter_module.c,tables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1315,107290,recodes,3,ngx_http_charset_main_conf_t.recodes,,http\modules\ngx_http_charset_filter_module.c,recodes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1316,107293,charset,3,ngx_http_charset_loc_conf_t.charset,,http\modules\ngx_http_charset_filter_module.c,charset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1317,107294,source_charset,3,ngx_http_charset_loc_conf_t.source_charset,,http\modules\ngx_http_charset_filter_module.c,source_charset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1318,107295,override_charset,3,ngx_http_charset_loc_conf_t.override_charset,,http\modules\ngx_http_charset_filter_module.c,override_charset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1319,107296,types,3,ngx_http_charset_loc_conf_t.types,,http\modules\ngx_http_charset_filter_module.c,types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1320,107297,types_keys,3,ngx_http_charset_loc_conf_t.types_keys,,http\modules\ngx_http_charset_filter_module.c,*types_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1321,107300,table,3,ngx_http_charset_ctx_t.table,,http\modules\ngx_http_charset_filter_module.c,*table,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1322,107301,charset,3,ngx_http_charset_ctx_t.charset,,http\modules\ngx_http_charset_filter_module.c,charset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1323,107302,charset_name,3,ngx_http_charset_ctx_t.charset_name,,http\modules\ngx_http_charset_filter_module.c,charset_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1324,107303,busy,3,ngx_http_charset_ctx_t.busy,,http\modules\ngx_http_charset_filter_module.c,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1325,107304,free_bufs,3,ngx_http_charset_ctx_t.free_bufs,,http\modules\ngx_http_charset_filter_module.c,*free_bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1326,107305,free_buffers,3,ngx_http_charset_ctx_t.free_buffers,,http\modules\ngx_http_charset_filter_module.c,*free_buffers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1327,107306,saved_len,3,ngx_http_charset_ctx_t.saved_len,,http\modules\ngx_http_charset_filter_module.c,saved_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1328,107307,saved,3,ngx_http_charset_ctx_t.saved,,http\modules\ngx_http_charset_filter_module.c,saved[NGX_UTF_LEN],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1329,107308,length,3,ngx_http_charset_ctx_t.length,,http\modules\ngx_http_charset_filter_module.c,length:16,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1330,107309,from_utf8,3,ngx_http_charset_ctx_t.from_utf8,,http\modules\ngx_http_charset_filter_module.c,from_utf8:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1331,107310,to_utf8,3,ngx_http_charset_ctx_t.to_utf8,,http\modules\ngx_http_charset_filter_module.c,to_utf8:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1332,107321,table,3,ngx_http_charset_conf_ctx_t.table,,http\modules\ngx_http_charset_filter_module.c,*table,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1333,107322,charset,3,ngx_http_charset_conf_ctx_t.charset,,http\modules\ngx_http_charset_filter_module.c,*charset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1334,107323,characters,3,ngx_http_charset_conf_ctx_t.characters,,http\modules\ngx_http_charset_filter_module.c,characters,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1335,111939,free,3,ngx_http_chunked_filter_ctx_t.free,,http\modules\ngx_http_chunked_filter_module.c,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1336,111940,busy,3,ngx_http_chunked_filter_ctx_t.busy,,http\modules\ngx_http_chunked_filter_module.c,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1337,112898,methods,3,ngx_http_dav_loc_conf_t.methods,,http\modules\ngx_http_dav_module.c,methods,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1338,112899,access,3,ngx_http_dav_loc_conf_t.access,,http\modules\ngx_http_dav_module.c,access,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1339,112900,min_delete_depth,3,ngx_http_dav_loc_conf_t.min_delete_depth,,http\modules\ngx_http_dav_module.c,min_delete_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1340,112901,create_full_put_path,3,ngx_http_dav_loc_conf_t.create_full_put_path,,http\modules\ngx_http_dav_module.c,create_full_put_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1341,112904,path,3,ngx_http_dav_copy_ctx_t.path,,http\modules\ngx_http_dav_module.c,path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1342,112905,len,3,ngx_http_dav_copy_ctx_t.len,,http\modules\ngx_http_dav_module.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1343,116069,sbrk_size,3,ngx_http_degradation_main_conf_t.sbrk_size,,http\modules\ngx_http_degradation_module.c,sbrk_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1344,116072,degrade,3,ngx_http_degradation_loc_conf_t.degrade,,http\modules\ngx_http_degradation_module.c,degrade,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1345,116687,caches,3,ngx_http_fastcgi_main_conf_t.caches,,http\modules\ngx_http_fastcgi_module.c,caches,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1346,116690,flushes,3,ngx_http_fastcgi_params_t.flushes,,http\modules\ngx_http_fastcgi_module.c,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1347,116691,lengths,3,ngx_http_fastcgi_params_t.lengths,,http\modules\ngx_http_fastcgi_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1348,116692,values,3,ngx_http_fastcgi_params_t.values,,http\modules\ngx_http_fastcgi_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1349,116693,number,3,ngx_http_fastcgi_params_t.number,,http\modules\ngx_http_fastcgi_module.c,number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1350,116694,hash,3,ngx_http_fastcgi_params_t.hash,,http\modules\ngx_http_fastcgi_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1351,116697,upstream,3,ngx_http_fastcgi_loc_conf_t.upstream,,http\modules\ngx_http_fastcgi_module.c,upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1352,116698,index,3,ngx_http_fastcgi_loc_conf_t.index,,http\modules\ngx_http_fastcgi_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1353,116699,params,3,ngx_http_fastcgi_loc_conf_t.params,,http\modules\ngx_http_fastcgi_module.c,params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1354,116700,params_cache,3,ngx_http_fastcgi_loc_conf_t.params_cache,,http\modules\ngx_http_fastcgi_module.c,params_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1355,116701,params_source,3,ngx_http_fastcgi_loc_conf_t.params_source,,http\modules\ngx_http_fastcgi_module.c,*params_source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1356,116702,catch_stderr,3,ngx_http_fastcgi_loc_conf_t.catch_stderr,,http\modules\ngx_http_fastcgi_module.c,*catch_stderr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1357,116703,fastcgi_lengths,3,ngx_http_fastcgi_loc_conf_t.fastcgi_lengths,,http\modules\ngx_http_fastcgi_module.c,*fastcgi_lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1358,116704,fastcgi_values,3,ngx_http_fastcgi_loc_conf_t.fastcgi_values,,http\modules\ngx_http_fastcgi_module.c,*fastcgi_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1359,116705,keep_conn,3,ngx_http_fastcgi_loc_conf_t.keep_conn,,http\modules\ngx_http_fastcgi_module.c,keep_conn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1360,116706,cache_key,3,ngx_http_fastcgi_loc_conf_t.cache_key,,http\modules\ngx_http_fastcgi_module.c,cache_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1361,116707,split_regex,3,ngx_http_fastcgi_loc_conf_t.split_regex,,http\modules\ngx_http_fastcgi_module.c,*split_regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1362,116708,split_name,3,ngx_http_fastcgi_loc_conf_t.split_name,,http\modules\ngx_http_fastcgi_module.c,split_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1363,116711,ngx_http_fastcgi_st_version,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_version,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_version = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1364,116712,ngx_http_fastcgi_st_type,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_type,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1365,116713,ngx_http_fastcgi_st_request_id_hi,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_request_id_hi,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_request_id_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1366,116714,ngx_http_fastcgi_st_request_id_lo,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_request_id_lo,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_request_id_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1367,116715,ngx_http_fastcgi_st_content_length_hi,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_content_length_hi,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_content_length_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1368,116716,ngx_http_fastcgi_st_content_length_lo,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_content_length_lo,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_content_length_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1369,116717,ngx_http_fastcgi_st_padding_length,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_padding_length,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_padding_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1370,116718,ngx_http_fastcgi_st_reserved,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_reserved,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_reserved,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1371,116719,ngx_http_fastcgi_st_data,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_data,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1372,116720,ngx_http_fastcgi_st_padding,3,ngx_http_fastcgi_state_e.ngx_http_fastcgi_st_padding,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_st_padding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1373,116730,start,3,ngx_http_fastcgi_split_part_t.start,,http\modules\ngx_http_fastcgi_module.c,*start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1374,116731,end,3,ngx_http_fastcgi_split_part_t.end,,http\modules\ngx_http_fastcgi_module.c,*end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1375,116734,state,3,ngx_http_fastcgi_ctx_t.state,,http\modules\ngx_http_fastcgi_module.c,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1376,116735,pos,3,ngx_http_fastcgi_ctx_t.pos,,http\modules\ngx_http_fastcgi_module.c,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1377,116736,last,3,ngx_http_fastcgi_ctx_t.last,,http\modules\ngx_http_fastcgi_module.c,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1378,116737,type,3,ngx_http_fastcgi_ctx_t.type,,http\modules\ngx_http_fastcgi_module.c,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1379,116738,length,3,ngx_http_fastcgi_ctx_t.length,,http\modules\ngx_http_fastcgi_module.c,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1380,116739,padding,3,ngx_http_fastcgi_ctx_t.padding,,http\modules\ngx_http_fastcgi_module.c,padding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1381,116740,rest,3,ngx_http_fastcgi_ctx_t.rest,,http\modules\ngx_http_fastcgi_module.c,rest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1382,116741,free,3,ngx_http_fastcgi_ctx_t.free,,http\modules\ngx_http_fastcgi_module.c,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1383,116742,busy,3,ngx_http_fastcgi_ctx_t.busy,,http\modules\ngx_http_fastcgi_module.c,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1384,116743,fastcgi_stdout,3,ngx_http_fastcgi_ctx_t.fastcgi_stdout,,http\modules\ngx_http_fastcgi_module.c,fastcgi_stdout:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1385,116744,large_stderr,3,ngx_http_fastcgi_ctx_t.large_stderr,,http\modules\ngx_http_fastcgi_module.c,large_stderr:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1386,116745,header_sent,3,ngx_http_fastcgi_ctx_t.header_sent,,http\modules\ngx_http_fastcgi_module.c,header_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1387,116746,closed,3,ngx_http_fastcgi_ctx_t.closed,,http\modules\ngx_http_fastcgi_module.c,closed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1388,116747,split_parts,3,ngx_http_fastcgi_ctx_t.split_parts,,http\modules\ngx_http_fastcgi_module.c,*split_parts,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1389,116748,script_name,3,ngx_http_fastcgi_ctx_t.script_name,,http\modules\ngx_http_fastcgi_module.c,script_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1390,116749,path_info,3,ngx_http_fastcgi_ctx_t.path_info,,http\modules\ngx_http_fastcgi_module.c,path_info,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1391,116752,version,3,ngx_http_fastcgi_header_t.version,,http\modules\ngx_http_fastcgi_module.c,version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1392,116753,type,3,ngx_http_fastcgi_header_t.type,,http\modules\ngx_http_fastcgi_module.c,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1393,116754,request_id_hi,3,ngx_http_fastcgi_header_t.request_id_hi,,http\modules\ngx_http_fastcgi_module.c,request_id_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1394,116755,request_id_lo,3,ngx_http_fastcgi_header_t.request_id_lo,,http\modules\ngx_http_fastcgi_module.c,request_id_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1395,116756,content_length_hi,3,ngx_http_fastcgi_header_t.content_length_hi,,http\modules\ngx_http_fastcgi_module.c,content_length_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1396,116757,content_length_lo,3,ngx_http_fastcgi_header_t.content_length_lo,,http\modules\ngx_http_fastcgi_module.c,content_length_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1397,116758,padding_length,3,ngx_http_fastcgi_header_t.padding_length,,http\modules\ngx_http_fastcgi_module.c,padding_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1398,116759,reserved,3,ngx_http_fastcgi_header_t.reserved,,http\modules\ngx_http_fastcgi_module.c,reserved,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1399,116762,role_hi,3,ngx_http_fastcgi_begin_request_t.role_hi,,http\modules\ngx_http_fastcgi_module.c,role_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1400,116763,role_lo,3,ngx_http_fastcgi_begin_request_t.role_lo,,http\modules\ngx_http_fastcgi_module.c,role_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1401,116764,flags,3,ngx_http_fastcgi_begin_request_t.flags,,http\modules\ngx_http_fastcgi_module.c,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1402,116765,reserved,3,ngx_http_fastcgi_begin_request_t.reserved,,http\modules\ngx_http_fastcgi_module.c,reserved[5],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1403,116774,version,3,ngx_http_fastcgi_header_small_t.version,,http\modules\ngx_http_fastcgi_module.c,version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1404,116775,type,3,ngx_http_fastcgi_header_small_t.type,,http\modules\ngx_http_fastcgi_module.c,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1405,116776,request_id_hi,3,ngx_http_fastcgi_header_small_t.request_id_hi,,http\modules\ngx_http_fastcgi_module.c,request_id_hi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1406,116777,request_id_lo,3,ngx_http_fastcgi_header_small_t.request_id_lo,,http\modules\ngx_http_fastcgi_module.c,request_id_lo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1407,116780,h0,3,ngx_http_fastcgi_request_start_t.h0,,http\modules\ngx_http_fastcgi_module.c,h0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1408,116781,br,3,ngx_http_fastcgi_request_start_t.br,,http\modules\ngx_http_fastcgi_module.c,br,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1409,116782,h1,3,ngx_http_fastcgi_request_start_t.h1,,http\modules\ngx_http_fastcgi_module.c,h1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1410,127373,value,3,ngx_http_geo_range_t.value,,http\modules\ngx_http_geo_module.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1411,127374,start,3,ngx_http_geo_range_t.start,,http\modules\ngx_http_geo_module.c,start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1412,127375,end,3,ngx_http_geo_range_t.end,,http\modules\ngx_http_geo_module.c,end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1413,127378,tree,3,ngx_http_geo_trees_t.tree,,http\modules\ngx_http_geo_module.c,*tree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1414,127379,tree6,3,ngx_http_geo_trees_t.tree6,,http\modules\ngx_http_geo_module.c,*tree6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1415,127382,low,3,ngx_http_geo_high_ranges_t.low,,http\modules\ngx_http_geo_module.c,**low,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1416,127383,default_value,3,ngx_http_geo_high_ranges_t.default_value,,http\modules\ngx_http_geo_module.c,*default_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1417,127386,sn,3,ngx_http_geo_variable_value_node_t.sn,,http\modules\ngx_http_geo_module.c,sn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1418,127387,value,3,ngx_http_geo_variable_value_node_t.value,,http\modules\ngx_http_geo_module.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1419,127388,offset,3,ngx_http_geo_variable_value_node_t.offset,,http\modules\ngx_http_geo_module.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1420,127391,value,3,ngx_http_geo_conf_ctx_t.value,,http\modules\ngx_http_geo_module.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1421,127392,net,3,ngx_http_geo_conf_ctx_t.net,,http\modules\ngx_http_geo_module.c,*net,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1422,127393,high,3,ngx_http_geo_conf_ctx_t.high,,http\modules\ngx_http_geo_module.c,high,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1423,127394,tree,3,ngx_http_geo_conf_ctx_t.tree,,http\modules\ngx_http_geo_module.c,*tree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1424,127395,tree6,3,ngx_http_geo_conf_ctx_t.tree6,,http\modules\ngx_http_geo_module.c,*tree6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1425,127396,rbtree,3,ngx_http_geo_conf_ctx_t.rbtree,,http\modules\ngx_http_geo_module.c,rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1426,127397,sentinel,3,ngx_http_geo_conf_ctx_t.sentinel,,http\modules\ngx_http_geo_module.c,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1427,127398,proxies,3,ngx_http_geo_conf_ctx_t.proxies,,http\modules\ngx_http_geo_module.c,*proxies,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1428,127399,pool,3,ngx_http_geo_conf_ctx_t.pool,,http\modules\ngx_http_geo_module.c,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1429,127400,temp_pool,3,ngx_http_geo_conf_ctx_t.temp_pool,,http\modules\ngx_http_geo_module.c,*temp_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1430,127401,data_size,3,ngx_http_geo_conf_ctx_t.data_size,,http\modules\ngx_http_geo_module.c,data_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1431,127402,include_name,3,ngx_http_geo_conf_ctx_t.include_name,,http\modules\ngx_http_geo_module.c,include_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1432,127403,includes,3,ngx_http_geo_conf_ctx_t.includes,,http\modules\ngx_http_geo_module.c,includes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1433,127404,entries,3,ngx_http_geo_conf_ctx_t.entries,,http\modules\ngx_http_geo_module.c,entries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1434,127405,ranges,3,ngx_http_geo_conf_ctx_t.ranges,,http\modules\ngx_http_geo_module.c,ranges:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1435,127406,outside_entries,3,ngx_http_geo_conf_ctx_t.outside_entries,,http\modules\ngx_http_geo_module.c,outside_entries:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1436,127407,allow_binary_include,3,ngx_http_geo_conf_ctx_t.allow_binary_include,,http\modules\ngx_http_geo_module.c,allow_binary_include:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1437,127408,binary_include,3,ngx_http_geo_conf_ctx_t.binary_include,,http\modules\ngx_http_geo_module.c,binary_include:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1438,127409,proxy_recursive,3,ngx_http_geo_conf_ctx_t.proxy_recursive,,http\modules\ngx_http_geo_module.c,proxy_recursive:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1439,127413,trees,3,ngx_http_geo_ctx_t.u.trees,,http\modules\ngx_http_geo_module.c,trees,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1440,127414,high,3,ngx_http_geo_ctx_t.u.high,,http\modules\ngx_http_geo_module.c,high,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1441,127415,u,3,ngx_http_geo_ctx_t.u,,http\modules\ngx_http_geo_module.c,u,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1442,127416,proxies,3,ngx_http_geo_ctx_t.proxies,,http\modules\ngx_http_geo_module.c,*proxies,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1443,127417,proxy_recursive,3,ngx_http_geo_ctx_t.proxy_recursive,,http\modules\ngx_http_geo_module.c,proxy_recursive:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1444,127418,index,3,ngx_http_geo_ctx_t.index,,http\modules\ngx_http_geo_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1445,127582,GEORNG,3,ngx_http_geo_header_t.GEORNG,,http\modules\ngx_http_geo_module.c,GEORNG[6],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1446,127583,version,3,ngx_http_geo_header_t.version,,http\modules\ngx_http_geo_module.c,version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1447,127584,ptr_size,3,ngx_http_geo_header_t.ptr_size,,http\modules\ngx_http_geo_module.c,ptr_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1448,127585,endianness,3,ngx_http_geo_header_t.endianness,,http\modules\ngx_http_geo_module.c,endianness,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1449,127586,crc32,3,ngx_http_geo_header_t.crc32,,http\modules\ngx_http_geo_module.c,crc32,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1450,131685,country,3,ngx_http_geoip_conf_t.country,,http\modules\ngx_http_geoip_module.c,*country,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1451,131686,org,3,ngx_http_geoip_conf_t.org,,http\modules\ngx_http_geoip_module.c,*org,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1452,131687,city,3,ngx_http_geoip_conf_t.city,,http\modules\ngx_http_geoip_module.c,*city,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1453,131688,proxies,3,ngx_http_geoip_conf_t.proxies,,http\modules\ngx_http_geoip_module.c,*proxies,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1454,131689,proxy_recursive,3,ngx_http_geoip_conf_t.proxy_recursive,,http\modules\ngx_http_geoip_module.c,proxy_recursive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1455,131690,country_v6,3,ngx_http_geoip_conf_t.country_v6,,http\modules\ngx_http_geoip_module.c,country_v6:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1456,131691,org_v6,3,ngx_http_geoip_conf_t.org_v6,,http\modules\ngx_http_geoip_module.c,org_v6:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1457,131692,city_v6,3,ngx_http_geoip_conf_t.city_v6,,http\modules\ngx_http_geoip_module.c,city_v6:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1458,131695,name,3,ngx_http_geoip_var_t.name,,http\modules\ngx_http_geoip_module.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1459,131696,data,3,ngx_http_geoip_var_t.data,,http\modules\ngx_http_geoip_module.c,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1460,133432,flushes,3,ngx_http_grpc_headers_t.flushes,,http\modules\ngx_http_grpc_module.c,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1461,133433,lengths,3,ngx_http_grpc_headers_t.lengths,,http\modules\ngx_http_grpc_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1462,133434,values,3,ngx_http_grpc_headers_t.values,,http\modules\ngx_http_grpc_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1463,133435,hash,3,ngx_http_grpc_headers_t.hash,,http\modules\ngx_http_grpc_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1464,133438,upstream,3,ngx_http_grpc_loc_conf_t.upstream,,http\modules\ngx_http_grpc_module.c,upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1465,133439,headers,3,ngx_http_grpc_loc_conf_t.headers,,http\modules\ngx_http_grpc_module.c,headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1466,133440,headers_source,3,ngx_http_grpc_loc_conf_t.headers_source,,http\modules\ngx_http_grpc_module.c,*headers_source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1467,133441,host,3,ngx_http_grpc_loc_conf_t.host,,http\modules\ngx_http_grpc_module.c,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1468,133442,host_set,3,ngx_http_grpc_loc_conf_t.host_set,,http\modules\ngx_http_grpc_module.c,host_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1469,133443,grpc_lengths,3,ngx_http_grpc_loc_conf_t.grpc_lengths,,http\modules\ngx_http_grpc_module.c,*grpc_lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1470,133444,grpc_values,3,ngx_http_grpc_loc_conf_t.grpc_values,,http\modules\ngx_http_grpc_module.c,*grpc_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1471,133445,ssl,3,ngx_http_grpc_loc_conf_t.ssl,,http\modules\ngx_http_grpc_module.c,ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1472,133446,ssl_protocols,3,ngx_http_grpc_loc_conf_t.ssl_protocols,,http\modules\ngx_http_grpc_module.c,ssl_protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1473,133447,ssl_ciphers,3,ngx_http_grpc_loc_conf_t.ssl_ciphers,,http\modules\ngx_http_grpc_module.c,ssl_ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1474,133448,ssl_verify_depth,3,ngx_http_grpc_loc_conf_t.ssl_verify_depth,,http\modules\ngx_http_grpc_module.c,ssl_verify_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1475,133449,ssl_trusted_certificate,3,ngx_http_grpc_loc_conf_t.ssl_trusted_certificate,,http\modules\ngx_http_grpc_module.c,ssl_trusted_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1476,133450,ssl_crl,3,ngx_http_grpc_loc_conf_t.ssl_crl,,http\modules\ngx_http_grpc_module.c,ssl_crl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1477,133451,ssl_conf_commands,3,ngx_http_grpc_loc_conf_t.ssl_conf_commands,,http\modules\ngx_http_grpc_module.c,*ssl_conf_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1478,133454,ngx_http_grpc_st_start,3,ngx_http_grpc_state_e.ngx_http_grpc_st_start,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_start = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1479,133455,ngx_http_grpc_st_length_2,3,ngx_http_grpc_state_e.ngx_http_grpc_st_length_2,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_length_2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1480,133456,ngx_http_grpc_st_length_3,3,ngx_http_grpc_state_e.ngx_http_grpc_st_length_3,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_length_3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1481,133457,ngx_http_grpc_st_type,3,ngx_http_grpc_state_e.ngx_http_grpc_st_type,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1482,133458,ngx_http_grpc_st_flags,3,ngx_http_grpc_state_e.ngx_http_grpc_st_flags,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1483,133459,ngx_http_grpc_st_stream_id,3,ngx_http_grpc_state_e.ngx_http_grpc_st_stream_id,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_stream_id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1484,133460,ngx_http_grpc_st_stream_id_2,3,ngx_http_grpc_state_e.ngx_http_grpc_st_stream_id_2,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_stream_id_2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1485,133461,ngx_http_grpc_st_stream_id_3,3,ngx_http_grpc_state_e.ngx_http_grpc_st_stream_id_3,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_stream_id_3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1486,133462,ngx_http_grpc_st_stream_id_4,3,ngx_http_grpc_state_e.ngx_http_grpc_st_stream_id_4,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_stream_id_4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1487,133463,ngx_http_grpc_st_payload,3,ngx_http_grpc_state_e.ngx_http_grpc_st_payload,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_payload,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1488,133464,ngx_http_grpc_st_padding,3,ngx_http_grpc_state_e.ngx_http_grpc_st_padding,,http\modules\ngx_http_grpc_module.c,ngx_http_grpc_st_padding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1489,133474,init_window,3,ngx_http_grpc_conn_t.init_window,,http\modules\ngx_http_grpc_module.c,init_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1490,133475,send_window,3,ngx_http_grpc_conn_t.send_window,,http\modules\ngx_http_grpc_module.c,send_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1491,133476,recv_window,3,ngx_http_grpc_conn_t.recv_window,,http\modules\ngx_http_grpc_module.c,recv_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1492,133477,last_stream_id,3,ngx_http_grpc_conn_t.last_stream_id,,http\modules\ngx_http_grpc_module.c,last_stream_id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1493,133480,state,3,ngx_http_grpc_ctx_t.state,,http\modules\ngx_http_grpc_module.c,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1494,133481,frame_state,3,ngx_http_grpc_ctx_t.frame_state,,http\modules\ngx_http_grpc_module.c,frame_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1495,133482,fragment_state,3,ngx_http_grpc_ctx_t.fragment_state,,http\modules\ngx_http_grpc_module.c,fragment_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1496,133483,in,3,ngx_http_grpc_ctx_t.in,,http\modules\ngx_http_grpc_module.c,*in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1497,133484,out,3,ngx_http_grpc_ctx_t.out,,http\modules\ngx_http_grpc_module.c,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1498,133485,free,3,ngx_http_grpc_ctx_t.free,,http\modules\ngx_http_grpc_module.c,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1499,133486,busy,3,ngx_http_grpc_ctx_t.busy,,http\modules\ngx_http_grpc_module.c,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1500,133487,connection,3,ngx_http_grpc_ctx_t.connection,,http\modules\ngx_http_grpc_module.c,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1501,133488,id,3,ngx_http_grpc_ctx_t.id,,http\modules\ngx_http_grpc_module.c,id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1502,133489,pings,3,ngx_http_grpc_ctx_t.pings,,http\modules\ngx_http_grpc_module.c,pings,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1503,133490,settings,3,ngx_http_grpc_ctx_t.settings,,http\modules\ngx_http_grpc_module.c,settings,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1504,133491,length,3,ngx_http_grpc_ctx_t.length,,http\modules\ngx_http_grpc_module.c,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1505,133492,send_window,3,ngx_http_grpc_ctx_t.send_window,,http\modules\ngx_http_grpc_module.c,send_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1506,133493,recv_window,3,ngx_http_grpc_ctx_t.recv_window,,http\modules\ngx_http_grpc_module.c,recv_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1507,133494,rest,3,ngx_http_grpc_ctx_t.rest,,http\modules\ngx_http_grpc_module.c,rest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1508,133495,stream_id,3,ngx_http_grpc_ctx_t.stream_id,,http\modules\ngx_http_grpc_module.c,stream_id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1509,133496,type,3,ngx_http_grpc_ctx_t.type,,http\modules\ngx_http_grpc_module.c,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1510,133497,flags,3,ngx_http_grpc_ctx_t.flags,,http\modules\ngx_http_grpc_module.c,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1511,133498,padding,3,ngx_http_grpc_ctx_t.padding,,http\modules\ngx_http_grpc_module.c,padding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1512,133499,error,3,ngx_http_grpc_ctx_t.error,,http\modules\ngx_http_grpc_module.c,error,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1513,133500,window_update,3,ngx_http_grpc_ctx_t.window_update,,http\modules\ngx_http_grpc_module.c,window_update,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1514,133501,setting_id,3,ngx_http_grpc_ctx_t.setting_id,,http\modules\ngx_http_grpc_module.c,setting_id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1515,133502,setting_value,3,ngx_http_grpc_ctx_t.setting_value,,http\modules\ngx_http_grpc_module.c,setting_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1516,133503,ping_data,3,ngx_http_grpc_ctx_t.ping_data,,http\modules\ngx_http_grpc_module.c,ping_data[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1517,133504,index,3,ngx_http_grpc_ctx_t.index,,http\modules\ngx_http_grpc_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1518,133505,name,3,ngx_http_grpc_ctx_t.name,,http\modules\ngx_http_grpc_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1519,133506,value,3,ngx_http_grpc_ctx_t.value,,http\modules\ngx_http_grpc_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1520,133507,field_end,3,ngx_http_grpc_ctx_t.field_end,,http\modules\ngx_http_grpc_module.c,*field_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1521,133508,field_length,3,ngx_http_grpc_ctx_t.field_length,,http\modules\ngx_http_grpc_module.c,field_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1522,133509,field_rest,3,ngx_http_grpc_ctx_t.field_rest,,http\modules\ngx_http_grpc_module.c,field_rest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1523,133510,field_state,3,ngx_http_grpc_ctx_t.field_state,,http\modules\ngx_http_grpc_module.c,field_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1524,133511,literal,3,ngx_http_grpc_ctx_t.literal,,http\modules\ngx_http_grpc_module.c,literal:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1525,133512,field_huffman,3,ngx_http_grpc_ctx_t.field_huffman,,http\modules\ngx_http_grpc_module.c,field_huffman:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1526,133513,header_sent,3,ngx_http_grpc_ctx_t.header_sent,,http\modules\ngx_http_grpc_module.c,header_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1527,133514,output_closed,3,ngx_http_grpc_ctx_t.output_closed,,http\modules\ngx_http_grpc_module.c,output_closed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1528,133515,output_blocked,3,ngx_http_grpc_ctx_t.output_blocked,,http\modules\ngx_http_grpc_module.c,output_blocked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1529,133516,parsing_headers,3,ngx_http_grpc_ctx_t.parsing_headers,,http\modules\ngx_http_grpc_module.c,parsing_headers:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1530,133517,end_stream,3,ngx_http_grpc_ctx_t.end_stream,,http\modules\ngx_http_grpc_module.c,end_stream:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1531,133518,done,3,ngx_http_grpc_ctx_t.done,,http\modules\ngx_http_grpc_module.c,done:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1532,133519,status,3,ngx_http_grpc_ctx_t.status,,http\modules\ngx_http_grpc_module.c,status:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1533,133520,rst,3,ngx_http_grpc_ctx_t.rst,,http\modules\ngx_http_grpc_module.c,rst:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1534,133521,goaway,3,ngx_http_grpc_ctx_t.goaway,,http\modules\ngx_http_grpc_module.c,goaway:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1535,133522,request,3,ngx_http_grpc_ctx_t.request,,http\modules\ngx_http_grpc_module.c,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1536,133523,host,3,ngx_http_grpc_ctx_t.host,,http\modules\ngx_http_grpc_module.c,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1537,133532,length_0,3,ngx_http_grpc_frame_t.length_0,,http\modules\ngx_http_grpc_module.c,length_0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1538,133533,length_1,3,ngx_http_grpc_frame_t.length_1,,http\modules\ngx_http_grpc_module.c,length_1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1539,133534,length_2,3,ngx_http_grpc_frame_t.length_2,,http\modules\ngx_http_grpc_module.c,length_2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1540,133535,type,3,ngx_http_grpc_frame_t.type,,http\modules\ngx_http_grpc_module.c,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1541,133536,flags,3,ngx_http_grpc_frame_t.flags,,http\modules\ngx_http_grpc_module.c,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1542,133537,stream_id_0,3,ngx_http_grpc_frame_t.stream_id_0,,http\modules\ngx_http_grpc_module.c,stream_id_0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1543,133538,stream_id_1,3,ngx_http_grpc_frame_t.stream_id_1,,http\modules\ngx_http_grpc_module.c,stream_id_1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1544,133539,stream_id_2,3,ngx_http_grpc_frame_t.stream_id_2,,http\modules\ngx_http_grpc_module.c,stream_id_2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1545,133540,stream_id_3,3,ngx_http_grpc_frame_t.stream_id_3,,http\modules\ngx_http_grpc_module.c,stream_id_3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1546,146086,enable,3,ngx_http_gunzip_conf_t.enable,,http\modules\ngx_http_gunzip_filter_module.c,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1547,146087,bufs,3,ngx_http_gunzip_conf_t.bufs,,http\modules\ngx_http_gunzip_filter_module.c,bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1548,146090,in,3,ngx_http_gunzip_ctx_t.in,,http\modules\ngx_http_gunzip_filter_module.c,*in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1549,146091,free,3,ngx_http_gunzip_ctx_t.free,,http\modules\ngx_http_gunzip_filter_module.c,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1550,146092,busy,3,ngx_http_gunzip_ctx_t.busy,,http\modules\ngx_http_gunzip_filter_module.c,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1551,146093,out,3,ngx_http_gunzip_ctx_t.out,,http\modules\ngx_http_gunzip_filter_module.c,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1552,146094,last_out,3,ngx_http_gunzip_ctx_t.last_out,,http\modules\ngx_http_gunzip_filter_module.c,**last_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1553,146095,in_buf,3,ngx_http_gunzip_ctx_t.in_buf,,http\modules\ngx_http_gunzip_filter_module.c,*in_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1554,146096,out_buf,3,ngx_http_gunzip_ctx_t.out_buf,,http\modules\ngx_http_gunzip_filter_module.c,*out_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1555,146097,bufs,3,ngx_http_gunzip_ctx_t.bufs,,http\modules\ngx_http_gunzip_filter_module.c,bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1556,146098,started,3,ngx_http_gunzip_ctx_t.started,,http\modules\ngx_http_gunzip_filter_module.c,started:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1557,146099,flush,3,ngx_http_gunzip_ctx_t.flush,,http\modules\ngx_http_gunzip_filter_module.c,flush:4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1558,146100,redo,3,ngx_http_gunzip_ctx_t.redo,,http\modules\ngx_http_gunzip_filter_module.c,redo:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1559,146101,done,3,ngx_http_gunzip_ctx_t.done,,http\modules\ngx_http_gunzip_filter_module.c,done:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1560,146102,nomem,3,ngx_http_gunzip_ctx_t.nomem,,http\modules\ngx_http_gunzip_filter_module.c,nomem:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1561,146103,zstream,3,ngx_http_gunzip_ctx_t.zstream,,http\modules\ngx_http_gunzip_filter_module.c,zstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1562,146104,request,3,ngx_http_gunzip_ctx_t.request,,http\modules\ngx_http_gunzip_filter_module.c,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1563,147786,enable,3,ngx_http_gzip_conf_t.enable,,http\modules\ngx_http_gzip_filter_module.c,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1564,147787,no_buffer,3,ngx_http_gzip_conf_t.no_buffer,,http\modules\ngx_http_gzip_filter_module.c,no_buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1565,147788,types,3,ngx_http_gzip_conf_t.types,,http\modules\ngx_http_gzip_filter_module.c,types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1566,147789,bufs,3,ngx_http_gzip_conf_t.bufs,,http\modules\ngx_http_gzip_filter_module.c,bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1567,147790,postpone_gzipping,3,ngx_http_gzip_conf_t.postpone_gzipping,,http\modules\ngx_http_gzip_filter_module.c,postpone_gzipping,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1568,147791,level,3,ngx_http_gzip_conf_t.level,,http\modules\ngx_http_gzip_filter_module.c,level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1569,147792,wbits,3,ngx_http_gzip_conf_t.wbits,,http\modules\ngx_http_gzip_filter_module.c,wbits,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1570,147793,memlevel,3,ngx_http_gzip_conf_t.memlevel,,http\modules\ngx_http_gzip_filter_module.c,memlevel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1571,147794,min_length,3,ngx_http_gzip_conf_t.min_length,,http\modules\ngx_http_gzip_filter_module.c,min_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1572,147795,types_keys,3,ngx_http_gzip_conf_t.types_keys,,http\modules\ngx_http_gzip_filter_module.c,*types_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1573,147798,in,3,ngx_http_gzip_ctx_t.in,,http\modules\ngx_http_gzip_filter_module.c,*in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1574,147799,free,3,ngx_http_gzip_ctx_t.free,,http\modules\ngx_http_gzip_filter_module.c,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1575,147800,busy,3,ngx_http_gzip_ctx_t.busy,,http\modules\ngx_http_gzip_filter_module.c,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1576,147801,out,3,ngx_http_gzip_ctx_t.out,,http\modules\ngx_http_gzip_filter_module.c,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1577,147802,last_out,3,ngx_http_gzip_ctx_t.last_out,,http\modules\ngx_http_gzip_filter_module.c,**last_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1578,147803,copied,3,ngx_http_gzip_ctx_t.copied,,http\modules\ngx_http_gzip_filter_module.c,*copied,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1579,147804,copy_buf,3,ngx_http_gzip_ctx_t.copy_buf,,http\modules\ngx_http_gzip_filter_module.c,*copy_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1580,147805,in_buf,3,ngx_http_gzip_ctx_t.in_buf,,http\modules\ngx_http_gzip_filter_module.c,*in_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1581,147806,out_buf,3,ngx_http_gzip_ctx_t.out_buf,,http\modules\ngx_http_gzip_filter_module.c,*out_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1582,147807,bufs,3,ngx_http_gzip_ctx_t.bufs,,http\modules\ngx_http_gzip_filter_module.c,bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1583,147808,preallocated,3,ngx_http_gzip_ctx_t.preallocated,,http\modules\ngx_http_gzip_filter_module.c,*preallocated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1584,147809,free_mem,3,ngx_http_gzip_ctx_t.free_mem,,http\modules\ngx_http_gzip_filter_module.c,*free_mem,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1585,147810,allocated,3,ngx_http_gzip_ctx_t.allocated,,http\modules\ngx_http_gzip_filter_module.c,allocated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1586,147811,wbits,3,ngx_http_gzip_ctx_t.wbits,,http\modules\ngx_http_gzip_filter_module.c,wbits,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1587,147812,memlevel,3,ngx_http_gzip_ctx_t.memlevel,,http\modules\ngx_http_gzip_filter_module.c,memlevel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1588,147813,flush,3,ngx_http_gzip_ctx_t.flush,,http\modules\ngx_http_gzip_filter_module.c,flush:4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1589,147814,redo,3,ngx_http_gzip_ctx_t.redo,,http\modules\ngx_http_gzip_filter_module.c,redo:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1590,147815,done,3,ngx_http_gzip_ctx_t.done,,http\modules\ngx_http_gzip_filter_module.c,done:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1591,147816,nomem,3,ngx_http_gzip_ctx_t.nomem,,http\modules\ngx_http_gzip_filter_module.c,nomem:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1592,147817,buffering,3,ngx_http_gzip_ctx_t.buffering,,http\modules\ngx_http_gzip_filter_module.c,buffering:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1593,147818,zlib_ng,3,ngx_http_gzip_ctx_t.zlib_ng,,http\modules\ngx_http_gzip_filter_module.c,zlib_ng:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1594,147819,zin,3,ngx_http_gzip_ctx_t.zin,,http\modules\ngx_http_gzip_filter_module.c,zin,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1595,147820,zout,3,ngx_http_gzip_ctx_t.zout,,http\modules\ngx_http_gzip_filter_module.c,zout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1596,147821,zstream,3,ngx_http_gzip_ctx_t.zstream,,http\modules\ngx_http_gzip_filter_module.c,zstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1597,147822,request,3,ngx_http_gzip_ctx_t.request,,http\modules\ngx_http_gzip_filter_module.c,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1598,150660,enable,3,ngx_http_gzip_static_conf_t.enable,,http\modules\ngx_http_gzip_static_module.c,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1599,151450,name,3,ngx_http_set_header_t.name,,http\modules\ngx_http_headers_filter_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1600,151451,offset,3,ngx_http_set_header_t.offset,,http\modules\ngx_http_headers_filter_module.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1601,151452,handler,3,ngx_http_set_header_t.handler,,http\modules\ngx_http_headers_filter_module.c,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1602,151455,value,3,ngx_http_header_val_s.value,,http\modules\ngx_http_headers_filter_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1603,151456,key,3,ngx_http_header_val_s.key,,http\modules\ngx_http_headers_filter_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1604,151457,handler,3,ngx_http_header_val_s.handler,,http\modules\ngx_http_headers_filter_module.c,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1605,151458,offset,3,ngx_http_header_val_s.offset,,http\modules\ngx_http_headers_filter_module.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1606,151459,always,3,ngx_http_header_val_s.always,,http\modules\ngx_http_headers_filter_module.c,always,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1607,151461,NGX_HTTP_EXPIRES_OFF,3,ngx_http_expires_t.NGX_HTTP_EXPIRES_OFF,,http\modules\ngx_http_headers_filter_module.c,NGX_HTTP_EXPIRES_OFF,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1608,151462,NGX_HTTP_EXPIRES_EPOCH,3,ngx_http_expires_t.NGX_HTTP_EXPIRES_EPOCH,,http\modules\ngx_http_headers_filter_module.c,NGX_HTTP_EXPIRES_EPOCH,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1609,151463,NGX_HTTP_EXPIRES_MAX,3,ngx_http_expires_t.NGX_HTTP_EXPIRES_MAX,,http\modules\ngx_http_headers_filter_module.c,NGX_HTTP_EXPIRES_MAX,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1610,151464,NGX_HTTP_EXPIRES_ACCESS,3,ngx_http_expires_t.NGX_HTTP_EXPIRES_ACCESS,,http\modules\ngx_http_headers_filter_module.c,NGX_HTTP_EXPIRES_ACCESS,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1611,151465,NGX_HTTP_EXPIRES_MODIFIED,3,ngx_http_expires_t.NGX_HTTP_EXPIRES_MODIFIED,,http\modules\ngx_http_headers_filter_module.c,NGX_HTTP_EXPIRES_MODIFIED,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1612,151466,NGX_HTTP_EXPIRES_DAILY,3,ngx_http_expires_t.NGX_HTTP_EXPIRES_DAILY,,http\modules\ngx_http_headers_filter_module.c,NGX_HTTP_EXPIRES_DAILY,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1613,151467,NGX_HTTP_EXPIRES_UNSET,3,ngx_http_expires_t.NGX_HTTP_EXPIRES_UNSET,,http\modules\ngx_http_headers_filter_module.c,NGX_HTTP_EXPIRES_UNSET,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1614,151470,expires,3,ngx_http_headers_conf_t.expires,,http\modules\ngx_http_headers_filter_module.c,expires,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1615,151471,expires_time,3,ngx_http_headers_conf_t.expires_time,,http\modules\ngx_http_headers_filter_module.c,expires_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1616,151472,expires_value,3,ngx_http_headers_conf_t.expires_value,,http\modules\ngx_http_headers_filter_module.c,*expires_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1617,151473,headers,3,ngx_http_headers_conf_t.headers,,http\modules\ngx_http_headers_filter_module.c,*headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1618,151474,trailers,3,ngx_http_headers_conf_t.trailers,,http\modules\ngx_http_headers_filter_module.c,*trailers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
1619,153649,filter,3,ngx_http_image_filter_conf_t.filter,,http\modules\ngx_http_image_filter_module.c,filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1620,153650,width,3,ngx_http_image_filter_conf_t.width,,http\modules\ngx_http_image_filter_module.c,width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1621,153651,height,3,ngx_http_image_filter_conf_t.height,,http\modules\ngx_http_image_filter_module.c,height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1622,153652,angle,3,ngx_http_image_filter_conf_t.angle,,http\modules\ngx_http_image_filter_module.c,angle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1623,153653,jpeg_quality,3,ngx_http_image_filter_conf_t.jpeg_quality,,http\modules\ngx_http_image_filter_module.c,jpeg_quality,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1624,153654,webp_quality,3,ngx_http_image_filter_conf_t.webp_quality,,http\modules\ngx_http_image_filter_module.c,webp_quality,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1625,153655,sharpen,3,ngx_http_image_filter_conf_t.sharpen,,http\modules\ngx_http_image_filter_module.c,sharpen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1626,153656,transparency,3,ngx_http_image_filter_conf_t.transparency,,http\modules\ngx_http_image_filter_module.c,transparency,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1627,153657,interlace,3,ngx_http_image_filter_conf_t.interlace,,http\modules\ngx_http_image_filter_module.c,interlace,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1628,153658,wcv,3,ngx_http_image_filter_conf_t.wcv,,http\modules\ngx_http_image_filter_module.c,*wcv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1629,153659,hcv,3,ngx_http_image_filter_conf_t.hcv,,http\modules\ngx_http_image_filter_module.c,*hcv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1630,153660,acv,3,ngx_http_image_filter_conf_t.acv,,http\modules\ngx_http_image_filter_module.c,*acv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1631,153661,jqcv,3,ngx_http_image_filter_conf_t.jqcv,,http\modules\ngx_http_image_filter_module.c,*jqcv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1632,153662,wqcv,3,ngx_http_image_filter_conf_t.wqcv,,http\modules\ngx_http_image_filter_module.c,*wqcv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1633,153663,shcv,3,ngx_http_image_filter_conf_t.shcv,,http\modules\ngx_http_image_filter_module.c,*shcv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1634,153664,buffer_size,3,ngx_http_image_filter_conf_t.buffer_size,,http\modules\ngx_http_image_filter_module.c,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1635,153667,image,3,ngx_http_image_filter_ctx_t.image,,http\modules\ngx_http_image_filter_module.c,*image,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1636,153668,last,3,ngx_http_image_filter_ctx_t.last,,http\modules\ngx_http_image_filter_module.c,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1637,153669,length,3,ngx_http_image_filter_ctx_t.length,,http\modules\ngx_http_image_filter_module.c,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1638,153670,width,3,ngx_http_image_filter_ctx_t.width,,http\modules\ngx_http_image_filter_module.c,width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1639,153671,height,3,ngx_http_image_filter_ctx_t.height,,http\modules\ngx_http_image_filter_module.c,height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1640,153672,max_width,3,ngx_http_image_filter_ctx_t.max_width,,http\modules\ngx_http_image_filter_module.c,max_width,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1641,153673,max_height,3,ngx_http_image_filter_ctx_t.max_height,,http\modules\ngx_http_image_filter_module.c,max_height,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1642,153674,angle,3,ngx_http_image_filter_ctx_t.angle,,http\modules\ngx_http_image_filter_module.c,angle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1643,153675,phase,3,ngx_http_image_filter_ctx_t.phase,,http\modules\ngx_http_image_filter_module.c,phase,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1644,153676,type,3,ngx_http_image_filter_ctx_t.type,,http\modules\ngx_http_image_filter_module.c,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1645,153677,force,3,ngx_http_image_filter_ctx_t.force,,http\modules\ngx_http_image_filter_module.c,force,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1646,158077,name,3,ngx_http_index_t.name,,http\modules\ngx_http_index_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1647,158078,lengths,3,ngx_http_index_t.lengths,,http\modules\ngx_http_index_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1648,158079,values,3,ngx_http_index_t.values,,http\modules\ngx_http_index_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1649,158082,indices,3,ngx_http_index_loc_conf_t.indices,,http\modules\ngx_http_index_module.c,*indices,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1650,158083,max_index_len,3,ngx_http_index_loc_conf_t.max_index_len,,http\modules\ngx_http_index_module.c,max_index_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1651,159528,color,3,ngx_http_limit_conn_node_t.color,,http\modules\ngx_http_limit_conn_module.c,color,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1652,159529,len,3,ngx_http_limit_conn_node_t.len,,http\modules\ngx_http_limit_conn_module.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1653,159530,conn,3,ngx_http_limit_conn_node_t.conn,,http\modules\ngx_http_limit_conn_module.c,conn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1654,159531,data,3,ngx_http_limit_conn_node_t.data,,http\modules\ngx_http_limit_conn_module.c,data[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1655,159540,shm_zone,3,ngx_http_limit_conn_cleanup_t.shm_zone,,http\modules\ngx_http_limit_conn_module.c,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1656,159541,node,3,ngx_http_limit_conn_cleanup_t.node,,http\modules\ngx_http_limit_conn_module.c,*node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1657,159544,rbtree,3,ngx_http_limit_conn_shctx_t.rbtree,,http\modules\ngx_http_limit_conn_module.c,rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1658,159545,sentinel,3,ngx_http_limit_conn_shctx_t.sentinel,,http\modules\ngx_http_limit_conn_module.c,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1659,159548,sh,3,ngx_http_limit_conn_ctx_t.sh,,http\modules\ngx_http_limit_conn_module.c,*sh,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
1660,159549,shpool,3,ngx_http_limit_conn_ctx_t.shpool,,http\modules\ngx_http_limit_conn_module.c,*shpool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,14,0,1,1,0,0,,0,0,0,0,0,
1661,159550,key,3,ngx_http_limit_conn_ctx_t.key,,http\modules\ngx_http_limit_conn_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1662,159553,shm_zone,3,ngx_http_limit_conn_limit_t.shm_zone,,http\modules\ngx_http_limit_conn_module.c,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1663,159554,conn,3,ngx_http_limit_conn_limit_t.conn,,http\modules\ngx_http_limit_conn_module.c,conn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1664,159557,limits,3,ngx_http_limit_conn_conf_t.limits,,http\modules\ngx_http_limit_conn_module.c,limits,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1665,159558,log_level,3,ngx_http_limit_conn_conf_t.log_level,,http\modules\ngx_http_limit_conn_module.c,log_level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1666,159559,status_code,3,ngx_http_limit_conn_conf_t.status_code,,http\modules\ngx_http_limit_conn_module.c,status_code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1667,159560,dry_run,3,ngx_http_limit_conn_conf_t.dry_run,,http\modules\ngx_http_limit_conn_module.c,dry_run,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1668,161467,color,3,ngx_http_limit_req_node_t.color,,http\modules\ngx_http_limit_req_module.c,color,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1669,161468,dummy,3,ngx_http_limit_req_node_t.dummy,,http\modules\ngx_http_limit_req_module.c,dummy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1670,161469,len,3,ngx_http_limit_req_node_t.len,,http\modules\ngx_http_limit_req_module.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1671,161470,queue,3,ngx_http_limit_req_node_t.queue,,http\modules\ngx_http_limit_req_module.c,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1672,161471,last,3,ngx_http_limit_req_node_t.last,,http\modules\ngx_http_limit_req_module.c,last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1673,161472,excess,3,ngx_http_limit_req_node_t.excess,,http\modules\ngx_http_limit_req_module.c,excess,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1674,161473,count,3,ngx_http_limit_req_node_t.count,,http\modules\ngx_http_limit_req_module.c,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1675,161474,data,3,ngx_http_limit_req_node_t.data,,http\modules\ngx_http_limit_req_module.c,data[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1676,161483,rbtree,3,ngx_http_limit_req_shctx_t.rbtree,,http\modules\ngx_http_limit_req_module.c,rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1677,161484,sentinel,3,ngx_http_limit_req_shctx_t.sentinel,,http\modules\ngx_http_limit_req_module.c,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1678,161485,queue,3,ngx_http_limit_req_shctx_t.queue,,http\modules\ngx_http_limit_req_module.c,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1679,161488,sh,3,ngx_http_limit_req_ctx_t.sh,,http\modules\ngx_http_limit_req_module.c,*sh,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1680,161489,shpool,3,ngx_http_limit_req_ctx_t.shpool,,http\modules\ngx_http_limit_req_module.c,*shpool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,13,0,1,1,0,0,,0,0,0,0,0,
1681,161490,rate,3,ngx_http_limit_req_ctx_t.rate,,http\modules\ngx_http_limit_req_module.c,rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1682,161491,key,3,ngx_http_limit_req_ctx_t.key,,http\modules\ngx_http_limit_req_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
1683,161492,node,3,ngx_http_limit_req_ctx_t.node,,http\modules\ngx_http_limit_req_module.c,*node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1684,161495,shm_zone,3,ngx_http_limit_req_limit_t.shm_zone,,http\modules\ngx_http_limit_req_module.c,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1685,161496,burst,3,ngx_http_limit_req_limit_t.burst,,http\modules\ngx_http_limit_req_module.c,burst,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1686,161497,delay,3,ngx_http_limit_req_limit_t.delay,,http\modules\ngx_http_limit_req_module.c,delay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1687,161500,limits,3,ngx_http_limit_req_conf_t.limits,,http\modules\ngx_http_limit_req_module.c,limits,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
1688,161501,limit_log_level,3,ngx_http_limit_req_conf_t.limit_log_level,,http\modules\ngx_http_limit_req_module.c,limit_log_level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1689,161502,delay_log_level,3,ngx_http_limit_req_conf_t.delay_log_level,,http\modules\ngx_http_limit_req_module.c,delay_log_level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1690,161503,status_code,3,ngx_http_limit_req_conf_t.status_code,,http\modules\ngx_http_limit_req_module.c,status_code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1691,161504,dry_run,3,ngx_http_limit_req_conf_t.dry_run,,http\modules\ngx_http_limit_req_module.c,dry_run,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1692,164400,len,3,ngx_http_log_op_s.len,,http\modules\ngx_http_log_module.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1693,164401,getlen,3,ngx_http_log_op_s.getlen,,http\modules\ngx_http_log_module.c,getlen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1694,164402,run,3,ngx_http_log_op_s.run,,http\modules\ngx_http_log_module.c,run,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1695,164403,data,3,ngx_http_log_op_s.data,,http\modules\ngx_http_log_module.c,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1696,164405,name,3,ngx_http_log_fmt_t.name,,http\modules\ngx_http_log_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1697,164406,flushes,3,ngx_http_log_fmt_t.flushes,,http\modules\ngx_http_log_module.c,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1698,164407,ops,3,ngx_http_log_fmt_t.ops,,http\modules\ngx_http_log_module.c,*ops,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1699,164410,formats,3,ngx_http_log_main_conf_t.formats,,http\modules\ngx_http_log_module.c,formats,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1700,164411,combined_used,3,ngx_http_log_main_conf_t.combined_used,,http\modules\ngx_http_log_module.c,combined_used,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1701,164414,start,3,ngx_http_log_buf_t.start,,http\modules\ngx_http_log_module.c,*start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
1702,164415,pos,3,ngx_http_log_buf_t.pos,,http\modules\ngx_http_log_module.c,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
1703,164416,last,3,ngx_http_log_buf_t.last,,http\modules\ngx_http_log_module.c,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1704,164417,event,3,ngx_http_log_buf_t.event,,http\modules\ngx_http_log_module.c,*event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
1705,164418,flush,3,ngx_http_log_buf_t.flush,,http\modules\ngx_http_log_module.c,flush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1706,164419,gzip,3,ngx_http_log_buf_t.gzip,,http\modules\ngx_http_log_module.c,gzip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1707,164422,lengths,3,ngx_http_log_script_t.lengths,,http\modules\ngx_http_log_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1708,164423,values,3,ngx_http_log_script_t.values,,http\modules\ngx_http_log_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1709,164426,file,3,ngx_http_log_t.file,,http\modules\ngx_http_log_module.c,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1710,164427,script,3,ngx_http_log_t.script,,http\modules\ngx_http_log_module.c,*script,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1711,164428,disk_full_time,3,ngx_http_log_t.disk_full_time,,http\modules\ngx_http_log_module.c,disk_full_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1712,164429,error_log_time,3,ngx_http_log_t.error_log_time,,http\modules\ngx_http_log_module.c,error_log_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1713,164430,syslog_peer,3,ngx_http_log_t.syslog_peer,,http\modules\ngx_http_log_module.c,*syslog_peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1714,164431,format,3,ngx_http_log_t.format,,http\modules\ngx_http_log_module.c,*format,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1715,164432,filter,3,ngx_http_log_t.filter,,http\modules\ngx_http_log_module.c,*filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1716,164435,logs,3,ngx_http_log_loc_conf_t.logs,,http\modules\ngx_http_log_module.c,*logs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
1717,164436,open_file_cache,3,ngx_http_log_loc_conf_t.open_file_cache,,http\modules\ngx_http_log_module.c,*open_file_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1718,164437,open_file_cache_valid,3,ngx_http_log_loc_conf_t.open_file_cache_valid,,http\modules\ngx_http_log_module.c,open_file_cache_valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1719,164438,open_file_cache_min_uses,3,ngx_http_log_loc_conf_t.open_file_cache_min_uses,,http\modules\ngx_http_log_module.c,open_file_cache_min_uses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1720,164439,off,3,ngx_http_log_loc_conf_t.off,,http\modules\ngx_http_log_module.c,off,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1721,164442,name,3,ngx_http_log_var_t.name,,http\modules\ngx_http_log_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1722,164443,len,3,ngx_http_log_var_t.len,,http\modules\ngx_http_log_module.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1723,164444,run,3,ngx_http_log_var_t.run,,http\modules\ngx_http_log_module.c,run,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1724,168947,hash_max_size,3,ngx_http_map_conf_t.hash_max_size,,http\modules\ngx_http_map_module.c,hash_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1725,168948,hash_bucket_size,3,ngx_http_map_conf_t.hash_bucket_size,,http\modules\ngx_http_map_module.c,hash_bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1726,168951,keys,3,ngx_http_map_conf_ctx_t.keys,,http\modules\ngx_http_map_module.c,keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1727,168952,values_hash,3,ngx_http_map_conf_ctx_t.values_hash,,http\modules\ngx_http_map_module.c,*values_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1728,168953,regexes,3,ngx_http_map_conf_ctx_t.regexes,,http\modules\ngx_http_map_module.c,regexes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1729,168954,default_value,3,ngx_http_map_conf_ctx_t.default_value,,http\modules\ngx_http_map_module.c,*default_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1730,168955,cf,3,ngx_http_map_conf_ctx_t.cf,,http\modules\ngx_http_map_module.c,*cf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1731,168956,hostnames,3,ngx_http_map_conf_ctx_t.hostnames,,http\modules\ngx_http_map_module.c,hostnames:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1732,168957,no_cacheable,3,ngx_http_map_conf_ctx_t.no_cacheable,,http\modules\ngx_http_map_module.c,no_cacheable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1733,168960,map,3,ngx_http_map_ctx_t.map,,http\modules\ngx_http_map_module.c,map,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1734,168961,value,3,ngx_http_map_ctx_t.value,,http\modules\ngx_http_map_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1735,168962,default_value,3,ngx_http_map_ctx_t.default_value,,http\modules\ngx_http_map_module.c,*default_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1736,168963,hostnames,3,ngx_http_map_ctx_t.hostnames,,http\modules\ngx_http_map_module.c,hostnames,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1737,170435,upstream,3,ngx_http_memcached_loc_conf_t.upstream,,http\modules\ngx_http_memcached_module.c,upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1738,170436,index,3,ngx_http_memcached_loc_conf_t.index,,http\modules\ngx_http_memcached_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1739,170437,gzip_flag,3,ngx_http_memcached_loc_conf_t.gzip_flag,,http\modules\ngx_http_memcached_module.c,gzip_flag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1740,170440,rest,3,ngx_http_memcached_ctx_t.rest,,http\modules\ngx_http_memcached_module.c,rest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1741,170441,request,3,ngx_http_memcached_ctx_t.request,,http\modules\ngx_http_memcached_module.c,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
1742,170442,key,3,ngx_http_memcached_ctx_t.key,,http\modules\ngx_http_memcached_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1743,172569,mirror,3,ngx_http_mirror_loc_conf_t.mirror,,http\modules\ngx_http_mirror_module.c,*mirror,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1744,172570,request_body,3,ngx_http_mirror_loc_conf_t.request_body,,http\modules\ngx_http_mirror_module.c,request_body,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1745,172573,status,3,ngx_http_mirror_ctx_t.status,,http\modules\ngx_http_mirror_module.c,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1746,173103,buffer_size,3,ngx_http_mp4_conf_t.buffer_size,,http\modules\ngx_http_mp4_module.c,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1747,173104,max_buffer_size,3,ngx_http_mp4_conf_t.max_buffer_size,,http\modules\ngx_http_mp4_module.c,max_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1748,173107,chunk,3,ngx_mp4_stsc_entry_t.chunk,,http\modules\ngx_http_mp4_module.c,chunk[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1749,173108,samples,3,ngx_mp4_stsc_entry_t.samples,,http\modules\ngx_http_mp4_module.c,samples[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1750,173109,id,3,ngx_mp4_stsc_entry_t.id,,http\modules\ngx_http_mp4_module.c,id[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1751,173122,timescale,3,ngx_http_mp4_trak_t.timescale,,http\modules\ngx_http_mp4_module.c,timescale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1752,173123,time_to_sample_entries,3,ngx_http_mp4_trak_t.time_to_sample_entries,,http\modules\ngx_http_mp4_module.c,time_to_sample_entries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1753,173124,sample_to_chunk_entries,3,ngx_http_mp4_trak_t.sample_to_chunk_entries,,http\modules\ngx_http_mp4_module.c,sample_to_chunk_entries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1754,173125,sync_samples_entries,3,ngx_http_mp4_trak_t.sync_samples_entries,,http\modules\ngx_http_mp4_module.c,sync_samples_entries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1755,173126,composition_offset_entries,3,ngx_http_mp4_trak_t.composition_offset_entries,,http\modules\ngx_http_mp4_module.c,composition_offset_entries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1756,173127,sample_sizes_entries,3,ngx_http_mp4_trak_t.sample_sizes_entries,,http\modules\ngx_http_mp4_module.c,sample_sizes_entries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1757,173128,chunks,3,ngx_http_mp4_trak_t.chunks,,http\modules\ngx_http_mp4_module.c,chunks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1758,173129,start_sample,3,ngx_http_mp4_trak_t.start_sample,,http\modules\ngx_http_mp4_module.c,start_sample,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1759,173130,end_sample,3,ngx_http_mp4_trak_t.end_sample,,http\modules\ngx_http_mp4_module.c,end_sample,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1760,173131,start_chunk,3,ngx_http_mp4_trak_t.start_chunk,,http\modules\ngx_http_mp4_module.c,start_chunk,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1761,173132,end_chunk,3,ngx_http_mp4_trak_t.end_chunk,,http\modules\ngx_http_mp4_module.c,end_chunk,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1762,173133,start_chunk_samples,3,ngx_http_mp4_trak_t.start_chunk_samples,,http\modules\ngx_http_mp4_module.c,start_chunk_samples,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1763,173134,end_chunk_samples,3,ngx_http_mp4_trak_t.end_chunk_samples,,http\modules\ngx_http_mp4_module.c,end_chunk_samples,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1764,173135,start_chunk_samples_size,3,ngx_http_mp4_trak_t.start_chunk_samples_size,,http\modules\ngx_http_mp4_module.c,start_chunk_samples_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1765,173136,end_chunk_samples_size,3,ngx_http_mp4_trak_t.end_chunk_samples_size,,http\modules\ngx_http_mp4_module.c,end_chunk_samples_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1766,173137,start_offset,3,ngx_http_mp4_trak_t.start_offset,,http\modules\ngx_http_mp4_module.c,start_offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1767,173138,end_offset,3,ngx_http_mp4_trak_t.end_offset,,http\modules\ngx_http_mp4_module.c,end_offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1768,173139,tkhd_size,3,ngx_http_mp4_trak_t.tkhd_size,,http\modules\ngx_http_mp4_module.c,tkhd_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1769,173140,mdhd_size,3,ngx_http_mp4_trak_t.mdhd_size,,http\modules\ngx_http_mp4_module.c,mdhd_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1770,173141,hdlr_size,3,ngx_http_mp4_trak_t.hdlr_size,,http\modules\ngx_http_mp4_module.c,hdlr_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1771,173142,vmhd_size,3,ngx_http_mp4_trak_t.vmhd_size,,http\modules\ngx_http_mp4_module.c,vmhd_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1772,173143,smhd_size,3,ngx_http_mp4_trak_t.smhd_size,,http\modules\ngx_http_mp4_module.c,smhd_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1773,173144,dinf_size,3,ngx_http_mp4_trak_t.dinf_size,,http\modules\ngx_http_mp4_module.c,dinf_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1774,173145,size,3,ngx_http_mp4_trak_t.size,,http\modules\ngx_http_mp4_module.c,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1775,173146,out,3,ngx_http_mp4_trak_t.out,,http\modules\ngx_http_mp4_module.c,out[NGX_HTTP_MP4_LAST_ATOM + 1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1776,173147,trak_atom_buf,3,ngx_http_mp4_trak_t.trak_atom_buf,,http\modules\ngx_http_mp4_module.c,trak_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1777,173148,tkhd_atom_buf,3,ngx_http_mp4_trak_t.tkhd_atom_buf,,http\modules\ngx_http_mp4_module.c,tkhd_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1778,173149,mdia_atom_buf,3,ngx_http_mp4_trak_t.mdia_atom_buf,,http\modules\ngx_http_mp4_module.c,mdia_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1779,173150,mdhd_atom_buf,3,ngx_http_mp4_trak_t.mdhd_atom_buf,,http\modules\ngx_http_mp4_module.c,mdhd_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1780,173151,hdlr_atom_buf,3,ngx_http_mp4_trak_t.hdlr_atom_buf,,http\modules\ngx_http_mp4_module.c,hdlr_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1781,173152,minf_atom_buf,3,ngx_http_mp4_trak_t.minf_atom_buf,,http\modules\ngx_http_mp4_module.c,minf_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1782,173153,vmhd_atom_buf,3,ngx_http_mp4_trak_t.vmhd_atom_buf,,http\modules\ngx_http_mp4_module.c,vmhd_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1783,173154,smhd_atom_buf,3,ngx_http_mp4_trak_t.smhd_atom_buf,,http\modules\ngx_http_mp4_module.c,smhd_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1784,173155,dinf_atom_buf,3,ngx_http_mp4_trak_t.dinf_atom_buf,,http\modules\ngx_http_mp4_module.c,dinf_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1785,173156,stbl_atom_buf,3,ngx_http_mp4_trak_t.stbl_atom_buf,,http\modules\ngx_http_mp4_module.c,stbl_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1786,173157,stsd_atom_buf,3,ngx_http_mp4_trak_t.stsd_atom_buf,,http\modules\ngx_http_mp4_module.c,stsd_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1787,173158,stts_atom_buf,3,ngx_http_mp4_trak_t.stts_atom_buf,,http\modules\ngx_http_mp4_module.c,stts_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1788,173159,stts_data_buf,3,ngx_http_mp4_trak_t.stts_data_buf,,http\modules\ngx_http_mp4_module.c,stts_data_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1789,173160,stss_atom_buf,3,ngx_http_mp4_trak_t.stss_atom_buf,,http\modules\ngx_http_mp4_module.c,stss_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1790,173161,stss_data_buf,3,ngx_http_mp4_trak_t.stss_data_buf,,http\modules\ngx_http_mp4_module.c,stss_data_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1791,173162,ctts_atom_buf,3,ngx_http_mp4_trak_t.ctts_atom_buf,,http\modules\ngx_http_mp4_module.c,ctts_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1792,173163,ctts_data_buf,3,ngx_http_mp4_trak_t.ctts_data_buf,,http\modules\ngx_http_mp4_module.c,ctts_data_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1793,173164,stsc_atom_buf,3,ngx_http_mp4_trak_t.stsc_atom_buf,,http\modules\ngx_http_mp4_module.c,stsc_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1794,173165,stsc_start_chunk_buf,3,ngx_http_mp4_trak_t.stsc_start_chunk_buf,,http\modules\ngx_http_mp4_module.c,stsc_start_chunk_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1795,173166,stsc_end_chunk_buf,3,ngx_http_mp4_trak_t.stsc_end_chunk_buf,,http\modules\ngx_http_mp4_module.c,stsc_end_chunk_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1796,173167,stsc_data_buf,3,ngx_http_mp4_trak_t.stsc_data_buf,,http\modules\ngx_http_mp4_module.c,stsc_data_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1797,173168,stsz_atom_buf,3,ngx_http_mp4_trak_t.stsz_atom_buf,,http\modules\ngx_http_mp4_module.c,stsz_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1798,173169,stsz_data_buf,3,ngx_http_mp4_trak_t.stsz_data_buf,,http\modules\ngx_http_mp4_module.c,stsz_data_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1799,173170,stco_atom_buf,3,ngx_http_mp4_trak_t.stco_atom_buf,,http\modules\ngx_http_mp4_module.c,stco_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1800,173171,stco_data_buf,3,ngx_http_mp4_trak_t.stco_data_buf,,http\modules\ngx_http_mp4_module.c,stco_data_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1801,173172,co64_atom_buf,3,ngx_http_mp4_trak_t.co64_atom_buf,,http\modules\ngx_http_mp4_module.c,co64_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1802,173173,co64_data_buf,3,ngx_http_mp4_trak_t.co64_data_buf,,http\modules\ngx_http_mp4_module.c,co64_data_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1803,173174,stsc_start_chunk_entry,3,ngx_http_mp4_trak_t.stsc_start_chunk_entry,,http\modules\ngx_http_mp4_module.c,stsc_start_chunk_entry,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1804,173175,stsc_end_chunk_entry,3,ngx_http_mp4_trak_t.stsc_end_chunk_entry,,http\modules\ngx_http_mp4_module.c,stsc_end_chunk_entry,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1805,173188,file,3,ngx_http_mp4_file_t.file,,http\modules\ngx_http_mp4_module.c,file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1806,173189,buffer,3,ngx_http_mp4_file_t.buffer,,http\modules\ngx_http_mp4_module.c,*buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1807,173190,buffer_start,3,ngx_http_mp4_file_t.buffer_start,,http\modules\ngx_http_mp4_module.c,*buffer_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1808,173191,buffer_pos,3,ngx_http_mp4_file_t.buffer_pos,,http\modules\ngx_http_mp4_module.c,*buffer_pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1809,173192,buffer_end,3,ngx_http_mp4_file_t.buffer_end,,http\modules\ngx_http_mp4_module.c,*buffer_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1810,173193,buffer_size,3,ngx_http_mp4_file_t.buffer_size,,http\modules\ngx_http_mp4_module.c,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1811,173194,offset,3,ngx_http_mp4_file_t.offset,,http\modules\ngx_http_mp4_module.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1812,173195,end,3,ngx_http_mp4_file_t.end,,http\modules\ngx_http_mp4_module.c,end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1813,173196,content_length,3,ngx_http_mp4_file_t.content_length,,http\modules\ngx_http_mp4_module.c,content_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1814,173197,start,3,ngx_http_mp4_file_t.start,,http\modules\ngx_http_mp4_module.c,start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1815,173198,length,3,ngx_http_mp4_file_t.length,,http\modules\ngx_http_mp4_module.c,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1816,173199,timescale,3,ngx_http_mp4_file_t.timescale,,http\modules\ngx_http_mp4_module.c,timescale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1817,173200,request,3,ngx_http_mp4_file_t.request,,http\modules\ngx_http_mp4_module.c,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1818,173201,trak,3,ngx_http_mp4_file_t.trak,,http\modules\ngx_http_mp4_module.c,trak,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1819,173202,traks,3,ngx_http_mp4_file_t.traks,,http\modules\ngx_http_mp4_module.c,traks[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1820,173203,ftyp_size,3,ngx_http_mp4_file_t.ftyp_size,,http\modules\ngx_http_mp4_module.c,ftyp_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1821,173204,moov_size,3,ngx_http_mp4_file_t.moov_size,,http\modules\ngx_http_mp4_module.c,moov_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1822,173205,out,3,ngx_http_mp4_file_t.out,,http\modules\ngx_http_mp4_module.c,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1823,173206,ftyp_atom,3,ngx_http_mp4_file_t.ftyp_atom,,http\modules\ngx_http_mp4_module.c,ftyp_atom,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1824,173207,moov_atom,3,ngx_http_mp4_file_t.moov_atom,,http\modules\ngx_http_mp4_module.c,moov_atom,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1825,173208,mvhd_atom,3,ngx_http_mp4_file_t.mvhd_atom,,http\modules\ngx_http_mp4_module.c,mvhd_atom,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1826,173209,mdat_atom,3,ngx_http_mp4_file_t.mdat_atom,,http\modules\ngx_http_mp4_module.c,mdat_atom,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1827,173210,mdat_data,3,ngx_http_mp4_file_t.mdat_data,,http\modules\ngx_http_mp4_module.c,mdat_data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1828,173211,ftyp_atom_buf,3,ngx_http_mp4_file_t.ftyp_atom_buf,,http\modules\ngx_http_mp4_module.c,ftyp_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1829,173212,moov_atom_buf,3,ngx_http_mp4_file_t.moov_atom_buf,,http\modules\ngx_http_mp4_module.c,moov_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1830,173213,mvhd_atom_buf,3,ngx_http_mp4_file_t.mvhd_atom_buf,,http\modules\ngx_http_mp4_module.c,mvhd_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1831,173214,mdat_atom_buf,3,ngx_http_mp4_file_t.mdat_atom_buf,,http\modules\ngx_http_mp4_module.c,mdat_atom_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1832,173215,mdat_data_buf,3,ngx_http_mp4_file_t.mdat_data_buf,,http\modules\ngx_http_mp4_module.c,mdat_data_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1833,173216,moov_atom_header,3,ngx_http_mp4_file_t.moov_atom_header,,http\modules\ngx_http_mp4_module.c,moov_atom_header[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1834,173217,mdat_atom_header,3,ngx_http_mp4_file_t.mdat_atom_header,,http\modules\ngx_http_mp4_module.c,mdat_atom_header[16],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1835,173230,name,3,ngx_http_mp4_atom_handler_t.name,,http\modules\ngx_http_mp4_module.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1836,175290,size,3,ngx_mp4_atom_header_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1837,175291,name,3,ngx_mp4_atom_header_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1838,175302,size,3,ngx_mp4_atom_header64_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1839,175303,name,3,ngx_mp4_atom_header64_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1840,175304,size64,3,ngx_mp4_atom_header64_t.size64,,http\modules\ngx_http_mp4_module.c,size64[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1841,176936,size,3,ngx_mp4_mvhd_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1842,176937,name,3,ngx_mp4_mvhd_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1843,176938,version,3,ngx_mp4_mvhd_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1844,176939,flags,3,ngx_mp4_mvhd_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1845,176940,creation_time,3,ngx_mp4_mvhd_atom_t.creation_time,,http\modules\ngx_http_mp4_module.c,creation_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1846,176941,modification_time,3,ngx_mp4_mvhd_atom_t.modification_time,,http\modules\ngx_http_mp4_module.c,modification_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1847,176942,timescale,3,ngx_mp4_mvhd_atom_t.timescale,,http\modules\ngx_http_mp4_module.c,timescale[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1848,176943,duration,3,ngx_mp4_mvhd_atom_t.duration,,http\modules\ngx_http_mp4_module.c,duration[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1849,176944,rate,3,ngx_mp4_mvhd_atom_t.rate,,http\modules\ngx_http_mp4_module.c,rate[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1850,176945,volume,3,ngx_mp4_mvhd_atom_t.volume,,http\modules\ngx_http_mp4_module.c,volume[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1851,176946,reserved,3,ngx_mp4_mvhd_atom_t.reserved,,http\modules\ngx_http_mp4_module.c,reserved[10],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1852,176947,matrix,3,ngx_mp4_mvhd_atom_t.matrix,,http\modules\ngx_http_mp4_module.c,matrix[36],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1853,176948,preview_time,3,ngx_mp4_mvhd_atom_t.preview_time,,http\modules\ngx_http_mp4_module.c,preview_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1854,176949,preview_duration,3,ngx_mp4_mvhd_atom_t.preview_duration,,http\modules\ngx_http_mp4_module.c,preview_duration[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1855,176950,poster_time,3,ngx_mp4_mvhd_atom_t.poster_time,,http\modules\ngx_http_mp4_module.c,poster_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1856,176951,selection_time,3,ngx_mp4_mvhd_atom_t.selection_time,,http\modules\ngx_http_mp4_module.c,selection_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1857,176952,selection_duration,3,ngx_mp4_mvhd_atom_t.selection_duration,,http\modules\ngx_http_mp4_module.c,selection_duration[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1858,176953,current_time,3,ngx_mp4_mvhd_atom_t.current_time,,http\modules\ngx_http_mp4_module.c,current_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1859,176954,next_track_id,3,ngx_mp4_mvhd_atom_t.next_track_id,,http\modules\ngx_http_mp4_module.c,next_track_id[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1860,176999,size,3,ngx_mp4_mvhd64_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1861,177000,name,3,ngx_mp4_mvhd64_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1862,177001,version,3,ngx_mp4_mvhd64_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1863,177002,flags,3,ngx_mp4_mvhd64_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1864,177003,creation_time,3,ngx_mp4_mvhd64_atom_t.creation_time,,http\modules\ngx_http_mp4_module.c,creation_time[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1865,177004,modification_time,3,ngx_mp4_mvhd64_atom_t.modification_time,,http\modules\ngx_http_mp4_module.c,modification_time[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1866,177005,timescale,3,ngx_mp4_mvhd64_atom_t.timescale,,http\modules\ngx_http_mp4_module.c,timescale[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1867,177006,duration,3,ngx_mp4_mvhd64_atom_t.duration,,http\modules\ngx_http_mp4_module.c,duration[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1868,177007,rate,3,ngx_mp4_mvhd64_atom_t.rate,,http\modules\ngx_http_mp4_module.c,rate[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1869,177008,volume,3,ngx_mp4_mvhd64_atom_t.volume,,http\modules\ngx_http_mp4_module.c,volume[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1870,177009,reserved,3,ngx_mp4_mvhd64_atom_t.reserved,,http\modules\ngx_http_mp4_module.c,reserved[10],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1871,177010,matrix,3,ngx_mp4_mvhd64_atom_t.matrix,,http\modules\ngx_http_mp4_module.c,matrix[36],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1872,177011,preview_time,3,ngx_mp4_mvhd64_atom_t.preview_time,,http\modules\ngx_http_mp4_module.c,preview_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1873,177012,preview_duration,3,ngx_mp4_mvhd64_atom_t.preview_duration,,http\modules\ngx_http_mp4_module.c,preview_duration[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1874,177013,poster_time,3,ngx_mp4_mvhd64_atom_t.poster_time,,http\modules\ngx_http_mp4_module.c,poster_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1875,177014,selection_time,3,ngx_mp4_mvhd64_atom_t.selection_time,,http\modules\ngx_http_mp4_module.c,selection_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1876,177015,selection_duration,3,ngx_mp4_mvhd64_atom_t.selection_duration,,http\modules\ngx_http_mp4_module.c,selection_duration[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1877,177016,current_time,3,ngx_mp4_mvhd64_atom_t.current_time,,http\modules\ngx_http_mp4_module.c,current_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1878,177017,next_track_id,3,ngx_mp4_mvhd64_atom_t.next_track_id,,http\modules\ngx_http_mp4_module.c,next_track_id[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1879,178108,size,3,ngx_mp4_tkhd_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1880,178109,name,3,ngx_mp4_tkhd_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1881,178110,version,3,ngx_mp4_tkhd_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1882,178111,flags,3,ngx_mp4_tkhd_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1883,178112,creation_time,3,ngx_mp4_tkhd_atom_t.creation_time,,http\modules\ngx_http_mp4_module.c,creation_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1884,178113,modification_time,3,ngx_mp4_tkhd_atom_t.modification_time,,http\modules\ngx_http_mp4_module.c,modification_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1885,178114,track_id,3,ngx_mp4_tkhd_atom_t.track_id,,http\modules\ngx_http_mp4_module.c,track_id[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1886,178115,reserved1,3,ngx_mp4_tkhd_atom_t.reserved1,,http\modules\ngx_http_mp4_module.c,reserved1[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1887,178116,duration,3,ngx_mp4_tkhd_atom_t.duration,,http\modules\ngx_http_mp4_module.c,duration[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1888,178117,reserved2,3,ngx_mp4_tkhd_atom_t.reserved2,,http\modules\ngx_http_mp4_module.c,reserved2[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1889,178118,layer,3,ngx_mp4_tkhd_atom_t.layer,,http\modules\ngx_http_mp4_module.c,layer[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1890,178119,group,3,ngx_mp4_tkhd_atom_t.group,,http\modules\ngx_http_mp4_module.c,group[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1891,178120,volume,3,ngx_mp4_tkhd_atom_t.volume,,http\modules\ngx_http_mp4_module.c,volume[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1892,178121,reserved3,3,ngx_mp4_tkhd_atom_t.reserved3,,http\modules\ngx_http_mp4_module.c,reserved3[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1893,178122,matrix,3,ngx_mp4_tkhd_atom_t.matrix,,http\modules\ngx_http_mp4_module.c,matrix[36],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1894,178123,width,3,ngx_mp4_tkhd_atom_t.width,,http\modules\ngx_http_mp4_module.c,width[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1895,178124,height,3,ngx_mp4_tkhd_atom_t.height,,http\modules\ngx_http_mp4_module.c,height[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1896,178165,size,3,ngx_mp4_tkhd64_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1897,178166,name,3,ngx_mp4_tkhd64_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1898,178167,version,3,ngx_mp4_tkhd64_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1899,178168,flags,3,ngx_mp4_tkhd64_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1900,178169,creation_time,3,ngx_mp4_tkhd64_atom_t.creation_time,,http\modules\ngx_http_mp4_module.c,creation_time[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1901,178170,modification_time,3,ngx_mp4_tkhd64_atom_t.modification_time,,http\modules\ngx_http_mp4_module.c,modification_time[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1902,178171,track_id,3,ngx_mp4_tkhd64_atom_t.track_id,,http\modules\ngx_http_mp4_module.c,track_id[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1903,178172,reserved1,3,ngx_mp4_tkhd64_atom_t.reserved1,,http\modules\ngx_http_mp4_module.c,reserved1[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1904,178173,duration,3,ngx_mp4_tkhd64_atom_t.duration,,http\modules\ngx_http_mp4_module.c,duration[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1905,178174,reserved2,3,ngx_mp4_tkhd64_atom_t.reserved2,,http\modules\ngx_http_mp4_module.c,reserved2[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1906,178175,layer,3,ngx_mp4_tkhd64_atom_t.layer,,http\modules\ngx_http_mp4_module.c,layer[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1907,178176,group,3,ngx_mp4_tkhd64_atom_t.group,,http\modules\ngx_http_mp4_module.c,group[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1908,178177,volume,3,ngx_mp4_tkhd64_atom_t.volume,,http\modules\ngx_http_mp4_module.c,volume[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1909,178178,reserved3,3,ngx_mp4_tkhd64_atom_t.reserved3,,http\modules\ngx_http_mp4_module.c,reserved3[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1910,178179,matrix,3,ngx_mp4_tkhd64_atom_t.matrix,,http\modules\ngx_http_mp4_module.c,matrix[36],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1911,178180,width,3,ngx_mp4_tkhd64_atom_t.width,,http\modules\ngx_http_mp4_module.c,width[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1912,178181,height,3,ngx_mp4_tkhd64_atom_t.height,,http\modules\ngx_http_mp4_module.c,height[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1913,179123,size,3,ngx_mp4_mdhd_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1914,179124,name,3,ngx_mp4_mdhd_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1915,179125,version,3,ngx_mp4_mdhd_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1916,179126,flags,3,ngx_mp4_mdhd_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1917,179127,creation_time,3,ngx_mp4_mdhd_atom_t.creation_time,,http\modules\ngx_http_mp4_module.c,creation_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1918,179128,modification_time,3,ngx_mp4_mdhd_atom_t.modification_time,,http\modules\ngx_http_mp4_module.c,modification_time[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1919,179129,timescale,3,ngx_mp4_mdhd_atom_t.timescale,,http\modules\ngx_http_mp4_module.c,timescale[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1920,179130,duration,3,ngx_mp4_mdhd_atom_t.duration,,http\modules\ngx_http_mp4_module.c,duration[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1921,179131,language,3,ngx_mp4_mdhd_atom_t.language,,http\modules\ngx_http_mp4_module.c,language[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1922,179132,quality,3,ngx_mp4_mdhd_atom_t.quality,,http\modules\ngx_http_mp4_module.c,quality[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1923,179159,size,3,ngx_mp4_mdhd64_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1924,179160,name,3,ngx_mp4_mdhd64_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1925,179161,version,3,ngx_mp4_mdhd64_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1926,179162,flags,3,ngx_mp4_mdhd64_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1927,179163,creation_time,3,ngx_mp4_mdhd64_atom_t.creation_time,,http\modules\ngx_http_mp4_module.c,creation_time[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1928,179164,modification_time,3,ngx_mp4_mdhd64_atom_t.modification_time,,http\modules\ngx_http_mp4_module.c,modification_time[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1929,179165,timescale,3,ngx_mp4_mdhd64_atom_t.timescale,,http\modules\ngx_http_mp4_module.c,timescale[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1930,179166,duration,3,ngx_mp4_mdhd64_atom_t.duration,,http\modules\ngx_http_mp4_module.c,duration[8],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1931,179167,language,3,ngx_mp4_mdhd64_atom_t.language,,http\modules\ngx_http_mp4_module.c,language[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1932,179168,quality,3,ngx_mp4_mdhd64_atom_t.quality,,http\modules\ngx_http_mp4_module.c,quality[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1933,181239,size,3,ngx_mp4_stsd_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1934,181240,name,3,ngx_mp4_stsd_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1935,181241,version,3,ngx_mp4_stsd_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1936,181242,flags,3,ngx_mp4_stsd_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1937,181243,entries,3,ngx_mp4_stsd_atom_t.entries,,http\modules\ngx_http_mp4_module.c,entries[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1938,181244,media_size,3,ngx_mp4_stsd_atom_t.media_size,,http\modules\ngx_http_mp4_module.c,media_size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1939,181245,media_name,3,ngx_mp4_stsd_atom_t.media_name,,http\modules\ngx_http_mp4_module.c,media_name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1940,181585,size,3,ngx_mp4_stts_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1941,181586,name,3,ngx_mp4_stts_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1942,181587,version,3,ngx_mp4_stts_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1943,181588,flags,3,ngx_mp4_stts_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1944,181589,entries,3,ngx_mp4_stts_atom_t.entries,,http\modules\ngx_http_mp4_module.c,entries[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1945,181606,count,3,ngx_mp4_stts_entry_t.count,,http\modules\ngx_http_mp4_module.c,count[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1946,181607,duration,3,ngx_mp4_stts_entry_t.duration,,http\modules\ngx_http_mp4_module.c,duration[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1947,182669,size,3,ngx_http_mp4_stss_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1948,182670,name,3,ngx_http_mp4_stss_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1949,182671,version,3,ngx_http_mp4_stss_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1950,182672,flags,3,ngx_http_mp4_stss_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1951,182673,entries,3,ngx_http_mp4_stss_atom_t.entries,,http\modules\ngx_http_mp4_module.c,entries[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1952,183550,size,3,ngx_mp4_ctts_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1953,183551,name,3,ngx_mp4_ctts_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1954,183552,version,3,ngx_mp4_ctts_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1955,183553,flags,3,ngx_mp4_ctts_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1956,183554,entries,3,ngx_mp4_ctts_atom_t.entries,,http\modules\ngx_http_mp4_module.c,entries[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1957,183571,count,3,ngx_mp4_ctts_entry_t.count,,http\modules\ngx_http_mp4_module.c,count[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1958,183572,offset,3,ngx_mp4_ctts_entry_t.offset,,http\modules\ngx_http_mp4_module.c,offset[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1959,184530,size,3,ngx_mp4_stsc_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1960,184531,name,3,ngx_mp4_stsc_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1961,184532,version,3,ngx_mp4_stsc_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1962,184533,flags,3,ngx_mp4_stsc_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1963,184534,entries,3,ngx_mp4_stsc_atom_t.entries,,http\modules\ngx_http_mp4_module.c,entries[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1964,186707,size,3,ngx_mp4_stsz_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1965,186708,name,3,ngx_mp4_stsz_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1966,186709,version,3,ngx_mp4_stsz_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1967,186710,flags,3,ngx_mp4_stsz_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1968,186711,uniform_size,3,ngx_mp4_stsz_atom_t.uniform_size,,http\modules\ngx_http_mp4_module.c,uniform_size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1969,186712,entries,3,ngx_mp4_stsz_atom_t.entries,,http\modules\ngx_http_mp4_module.c,entries[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1970,187652,size,3,ngx_mp4_stco_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1971,187653,name,3,ngx_mp4_stco_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1972,187654,version,3,ngx_mp4_stco_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1973,187655,flags,3,ngx_mp4_stco_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1974,187656,entries,3,ngx_mp4_stco_atom_t.entries,,http\modules\ngx_http_mp4_module.c,entries[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1975,188746,size,3,ngx_mp4_co64_atom_t.size,,http\modules\ngx_http_mp4_module.c,size[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1976,188747,name,3,ngx_mp4_co64_atom_t.name,,http\modules\ngx_http_mp4_module.c,name[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1977,188748,version,3,ngx_mp4_co64_atom_t.version,,http\modules\ngx_http_mp4_module.c,version[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1978,188749,flags,3,ngx_mp4_co64_atom_t.flags,,http\modules\ngx_http_mp4_module.c,flags[3],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1979,188750,entries,3,ngx_mp4_co64_atom_t.entries,,http\modules\ngx_http_mp4_module.c,entries[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1980,190834,caches,3,ngx_http_proxy_main_conf_t.caches,,http\modules\ngx_http_proxy_module.c,caches,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1981,190848,handler,3,ngx_http_proxy_rewrite_s.handler,,http\modules\ngx_http_proxy_module.c,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1982,190850,complex,3,ngx_http_proxy_rewrite_s.pattern.complex,,http\modules\ngx_http_proxy_module.c,complex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1983,190851,regex,3,ngx_http_proxy_rewrite_s.pattern.regex,,http\modules\ngx_http_proxy_module.c,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1984,190852,pattern,3,ngx_http_proxy_rewrite_s.pattern,,http\modules\ngx_http_proxy_module.c,pattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1985,190853,replacement,3,ngx_http_proxy_rewrite_s.replacement,,http\modules\ngx_http_proxy_module.c,replacement,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1986,190856,complex,3,ngx_http_proxy_cookie_flags_t.cookie.complex,,http\modules\ngx_http_proxy_module.c,complex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1987,190857,regex,3,ngx_http_proxy_cookie_flags_t.cookie.regex,,http\modules\ngx_http_proxy_module.c,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1988,190858,cookie,3,ngx_http_proxy_cookie_flags_t.cookie,,http\modules\ngx_http_proxy_module.c,cookie,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1989,190859,flags_values,3,ngx_http_proxy_cookie_flags_t.flags_values,,http\modules\ngx_http_proxy_module.c,flags_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1990,190860,regex,3,ngx_http_proxy_cookie_flags_t.regex,,http\modules\ngx_http_proxy_module.c,regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1991,190863,key_start,3,ngx_http_proxy_vars_t.key_start,,http\modules\ngx_http_proxy_module.c,key_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1992,190864,schema,3,ngx_http_proxy_vars_t.schema,,http\modules\ngx_http_proxy_module.c,schema,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1993,190865,host_header,3,ngx_http_proxy_vars_t.host_header,,http\modules\ngx_http_proxy_module.c,host_header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1994,190866,port,3,ngx_http_proxy_vars_t.port,,http\modules\ngx_http_proxy_module.c,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1995,190867,uri,3,ngx_http_proxy_vars_t.uri,,http\modules\ngx_http_proxy_module.c,uri,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1996,190870,flushes,3,ngx_http_proxy_headers_t.flushes,,http\modules\ngx_http_proxy_module.c,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1997,190871,lengths,3,ngx_http_proxy_headers_t.lengths,,http\modules\ngx_http_proxy_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1998,190872,values,3,ngx_http_proxy_headers_t.values,,http\modules\ngx_http_proxy_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
1999,190873,hash,3,ngx_http_proxy_headers_t.hash,,http\modules\ngx_http_proxy_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2000,190876,upstream,3,ngx_http_proxy_loc_conf_t.upstream,,http\modules\ngx_http_proxy_module.c,upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2001,190877,body_flushes,3,ngx_http_proxy_loc_conf_t.body_flushes,,http\modules\ngx_http_proxy_module.c,*body_flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2002,190878,body_lengths,3,ngx_http_proxy_loc_conf_t.body_lengths,,http\modules\ngx_http_proxy_module.c,*body_lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2003,190879,body_values,3,ngx_http_proxy_loc_conf_t.body_values,,http\modules\ngx_http_proxy_module.c,*body_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2004,190880,body_source,3,ngx_http_proxy_loc_conf_t.body_source,,http\modules\ngx_http_proxy_module.c,body_source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2005,190881,headers,3,ngx_http_proxy_loc_conf_t.headers,,http\modules\ngx_http_proxy_module.c,headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2006,190882,headers_cache,3,ngx_http_proxy_loc_conf_t.headers_cache,,http\modules\ngx_http_proxy_module.c,headers_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2007,190883,headers_source,3,ngx_http_proxy_loc_conf_t.headers_source,,http\modules\ngx_http_proxy_module.c,*headers_source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2008,190884,proxy_lengths,3,ngx_http_proxy_loc_conf_t.proxy_lengths,,http\modules\ngx_http_proxy_module.c,*proxy_lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2009,190885,proxy_values,3,ngx_http_proxy_loc_conf_t.proxy_values,,http\modules\ngx_http_proxy_module.c,*proxy_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2010,190886,redirects,3,ngx_http_proxy_loc_conf_t.redirects,,http\modules\ngx_http_proxy_module.c,*redirects,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2011,190887,cookie_domains,3,ngx_http_proxy_loc_conf_t.cookie_domains,,http\modules\ngx_http_proxy_module.c,*cookie_domains,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2012,190888,cookie_paths,3,ngx_http_proxy_loc_conf_t.cookie_paths,,http\modules\ngx_http_proxy_module.c,*cookie_paths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2013,190889,cookie_flags,3,ngx_http_proxy_loc_conf_t.cookie_flags,,http\modules\ngx_http_proxy_module.c,*cookie_flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2014,190890,method,3,ngx_http_proxy_loc_conf_t.method,,http\modules\ngx_http_proxy_module.c,*method,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2015,190891,location,3,ngx_http_proxy_loc_conf_t.location,,http\modules\ngx_http_proxy_module.c,location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2016,190892,url,3,ngx_http_proxy_loc_conf_t.url,,http\modules\ngx_http_proxy_module.c,url,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2017,190893,cache_key,3,ngx_http_proxy_loc_conf_t.cache_key,,http\modules\ngx_http_proxy_module.c,cache_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2018,190894,vars,3,ngx_http_proxy_loc_conf_t.vars,,http\modules\ngx_http_proxy_module.c,vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2019,190895,redirect,3,ngx_http_proxy_loc_conf_t.redirect,,http\modules\ngx_http_proxy_module.c,redirect,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2020,190896,http_version,3,ngx_http_proxy_loc_conf_t.http_version,,http\modules\ngx_http_proxy_module.c,http_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2021,190897,headers_hash_max_size,3,ngx_http_proxy_loc_conf_t.headers_hash_max_size,,http\modules\ngx_http_proxy_module.c,headers_hash_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2022,190898,headers_hash_bucket_size,3,ngx_http_proxy_loc_conf_t.headers_hash_bucket_size,,http\modules\ngx_http_proxy_module.c,headers_hash_bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2023,190899,ssl,3,ngx_http_proxy_loc_conf_t.ssl,,http\modules\ngx_http_proxy_module.c,ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2024,190900,ssl_protocols,3,ngx_http_proxy_loc_conf_t.ssl_protocols,,http\modules\ngx_http_proxy_module.c,ssl_protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2025,190901,ssl_ciphers,3,ngx_http_proxy_loc_conf_t.ssl_ciphers,,http\modules\ngx_http_proxy_module.c,ssl_ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2026,190902,ssl_verify_depth,3,ngx_http_proxy_loc_conf_t.ssl_verify_depth,,http\modules\ngx_http_proxy_module.c,ssl_verify_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2027,190903,ssl_trusted_certificate,3,ngx_http_proxy_loc_conf_t.ssl_trusted_certificate,,http\modules\ngx_http_proxy_module.c,ssl_trusted_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2028,190904,ssl_crl,3,ngx_http_proxy_loc_conf_t.ssl_crl,,http\modules\ngx_http_proxy_module.c,ssl_crl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2029,190905,ssl_conf_commands,3,ngx_http_proxy_loc_conf_t.ssl_conf_commands,,http\modules\ngx_http_proxy_module.c,*ssl_conf_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2030,190908,status,3,ngx_http_proxy_ctx_t.status,,http\modules\ngx_http_proxy_module.c,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2031,190909,chunked,3,ngx_http_proxy_ctx_t.chunked,,http\modules\ngx_http_proxy_module.c,chunked,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2032,190910,vars,3,ngx_http_proxy_ctx_t.vars,,http\modules\ngx_http_proxy_module.c,vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2033,190911,internal_body_length,3,ngx_http_proxy_ctx_t.internal_body_length,,http\modules\ngx_http_proxy_module.c,internal_body_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2034,190912,free,3,ngx_http_proxy_ctx_t.free,,http\modules\ngx_http_proxy_module.c,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2035,190913,busy,3,ngx_http_proxy_ctx_t.busy,,http\modules\ngx_http_proxy_module.c,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2036,190914,head,3,ngx_http_proxy_ctx_t.head,,http\modules\ngx_http_proxy_module.c,head:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2037,190915,internal_chunked,3,ngx_http_proxy_ctx_t.internal_chunked,,http\modules\ngx_http_proxy_module.c,internal_chunked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2038,190916,header_sent,3,ngx_http_proxy_ctx_t.header_sent,,http\modules\ngx_http_proxy_module.c,header_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2039,203373,enable,3,ngx_http_random_index_loc_conf_t.enable,,http\modules\ngx_http_random_index_module.c,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2040,204119,start,3,ngx_http_range_t.start,,http\modules\ngx_http_range_filter_module.c,start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2041,204120,end,3,ngx_http_range_t.end,,http\modules\ngx_http_range_filter_module.c,end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2042,204121,content_range,3,ngx_http_range_t.content_range,,http\modules\ngx_http_range_filter_module.c,content_range,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2043,204124,offset,3,ngx_http_range_filter_ctx_t.offset,,http\modules\ngx_http_range_filter_module.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2044,204125,boundary_header,3,ngx_http_range_filter_ctx_t.boundary_header,,http\modules\ngx_http_range_filter_module.c,boundary_header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2045,204126,ranges,3,ngx_http_range_filter_ctx_t.ranges,,http\modules\ngx_http_range_filter_module.c,ranges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2046,206632,from,3,ngx_http_realip_loc_conf_t.from,,http\modules\ngx_http_realip_module.c,*from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2047,206633,type,3,ngx_http_realip_loc_conf_t.type,,http\modules\ngx_http_realip_module.c,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2048,206634,hash,3,ngx_http_realip_loc_conf_t.hash,,http\modules\ngx_http_realip_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2049,206635,header,3,ngx_http_realip_loc_conf_t.header,,http\modules\ngx_http_realip_module.c,header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2050,206636,recursive,3,ngx_http_realip_loc_conf_t.recursive,,http\modules\ngx_http_realip_module.c,recursive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2051,206639,connection,3,ngx_http_realip_ctx_t.connection,,http\modules\ngx_http_realip_module.c,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2052,206641,sockaddr,3,ngx_http_realip_ctx_t.sockaddr,,http\modules\ngx_http_realip_module.c,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2053,206642,socklen,3,ngx_http_realip_ctx_t.socklen,,http\modules\ngx_http_realip_module.c,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2054,206643,addr_text,3,ngx_http_realip_ctx_t.addr_text,,http\modules\ngx_http_realip_module.c,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2055,208097,hash,3,ngx_http_referer_conf_t.hash,,http\modules\ngx_http_referer_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2056,208098,regex,3,ngx_http_referer_conf_t.regex,,http\modules\ngx_http_referer_module.c,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2057,208099,server_name_regex,3,ngx_http_referer_conf_t.server_name_regex,,http\modules\ngx_http_referer_module.c,*server_name_regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2058,208100,no_referer,3,ngx_http_referer_conf_t.no_referer,,http\modules\ngx_http_referer_module.c,no_referer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2059,208101,blocked_referer,3,ngx_http_referer_conf_t.blocked_referer,,http\modules\ngx_http_referer_module.c,blocked_referer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2060,208102,server_names,3,ngx_http_referer_conf_t.server_names,,http\modules\ngx_http_referer_module.c,server_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2061,208103,keys,3,ngx_http_referer_conf_t.keys,,http\modules\ngx_http_referer_module.c,*keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2062,208104,referer_hash_max_size,3,ngx_http_referer_conf_t.referer_hash_max_size,,http\modules\ngx_http_referer_module.c,referer_hash_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2063,208105,referer_hash_bucket_size,3,ngx_http_referer_conf_t.referer_hash_bucket_size,,http\modules\ngx_http_referer_module.c,referer_hash_bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2064,209431,codes,3,ngx_http_rewrite_loc_conf_t.codes,,http\modules\ngx_http_rewrite_module.c,*codes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2065,209432,stack_size,3,ngx_http_rewrite_loc_conf_t.stack_size,,http\modules\ngx_http_rewrite_module.c,stack_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2066,209433,log,3,ngx_http_rewrite_loc_conf_t.log,,http\modules\ngx_http_rewrite_module.c,log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2067,209434,uninitialized_variable_warn,3,ngx_http_rewrite_loc_conf_t.uninitialized_variable_warn,,http\modules\ngx_http_rewrite_module.c,uninitialized_variable_warn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2068,212413,caches,3,ngx_http_scgi_main_conf_t.caches,,http\modules\ngx_http_scgi_module.c,caches,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2069,212416,flushes,3,ngx_http_scgi_params_t.flushes,,http\modules\ngx_http_scgi_module.c,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2070,212417,lengths,3,ngx_http_scgi_params_t.lengths,,http\modules\ngx_http_scgi_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2071,212418,values,3,ngx_http_scgi_params_t.values,,http\modules\ngx_http_scgi_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2072,212419,number,3,ngx_http_scgi_params_t.number,,http\modules\ngx_http_scgi_module.c,number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2073,212420,hash,3,ngx_http_scgi_params_t.hash,,http\modules\ngx_http_scgi_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2074,212423,upstream,3,ngx_http_scgi_loc_conf_t.upstream,,http\modules\ngx_http_scgi_module.c,upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2075,212424,params,3,ngx_http_scgi_loc_conf_t.params,,http\modules\ngx_http_scgi_module.c,params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2076,212425,params_cache,3,ngx_http_scgi_loc_conf_t.params_cache,,http\modules\ngx_http_scgi_module.c,params_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2077,212426,params_source,3,ngx_http_scgi_loc_conf_t.params_source,,http\modules\ngx_http_scgi_module.c,*params_source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2078,212427,scgi_lengths,3,ngx_http_scgi_loc_conf_t.scgi_lengths,,http\modules\ngx_http_scgi_module.c,*scgi_lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2079,212428,scgi_values,3,ngx_http_scgi_loc_conf_t.scgi_values,,http\modules\ngx_http_scgi_module.c,*scgi_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2080,212429,cache_key,3,ngx_http_scgi_loc_conf_t.cache_key,,http\modules\ngx_http_scgi_module.c,cache_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2081,217583,variable,3,ngx_http_secure_link_conf_t.variable,,http\modules\ngx_http_secure_link_module.c,*variable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2082,217584,md5,3,ngx_http_secure_link_conf_t.md5,,http\modules\ngx_http_secure_link_module.c,*md5,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2083,217585,secret,3,ngx_http_secure_link_conf_t.secret,,http\modules\ngx_http_secure_link_module.c,secret,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2084,217588,expires,3,ngx_http_secure_link_ctx_t.expires,,http\modules\ngx_http_secure_link_module.c,expires,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2085,218417,size,3,ngx_http_slice_loc_conf_t.size,,http\modules\ngx_http_slice_filter_module.c,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2086,218420,start,3,ngx_http_slice_ctx_t.start,,http\modules\ngx_http_slice_filter_module.c,start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2087,218421,end,3,ngx_http_slice_ctx_t.end,,http\modules\ngx_http_slice_filter_module.c,end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2088,218422,range,3,ngx_http_slice_ctx_t.range,,http\modules\ngx_http_slice_filter_module.c,range,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2089,218423,etag,3,ngx_http_slice_ctx_t.etag,,http\modules\ngx_http_slice_filter_module.c,etag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2090,218424,last,3,ngx_http_slice_ctx_t.last,,http\modules\ngx_http_slice_filter_module.c,last:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2091,218425,active,3,ngx_http_slice_ctx_t.active,,http\modules\ngx_http_slice_filter_module.c,active:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2092,218426,sr,3,ngx_http_slice_ctx_t.sr,,http\modules\ngx_http_slice_filter_module.c,*sr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2093,218429,start,3,ngx_http_slice_content_range_t.start,,http\modules\ngx_http_slice_filter_module.c,start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2094,218430,end,3,ngx_http_slice_content_range_t.end,,http\modules\ngx_http_slice_filter_module.c,end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2095,218431,complete_length,3,ngx_http_slice_content_range_t.complete_length,,http\modules\ngx_http_slice_filter_module.c,complete_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2096,219974,percent,3,ngx_http_split_clients_part_t.percent,,http\modules\ngx_http_split_clients_module.c,percent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2097,219975,value,3,ngx_http_split_clients_part_t.value,,http\modules\ngx_http_split_clients_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2098,219978,value,3,ngx_http_split_clients_ctx_t.value,,http\modules\ngx_http_split_clients_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2099,219979,parts,3,ngx_http_split_clients_ctx_t.parts,,http\modules\ngx_http_split_clients_module.c,parts,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2100,220611,enable,3,ngx_http_ssi_loc_conf_t.enable,,http\modules\ngx_http_ssi_filter_module.c,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2101,220612,silent_errors,3,ngx_http_ssi_loc_conf_t.silent_errors,,http\modules\ngx_http_ssi_filter_module.c,silent_errors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2102,220613,ignore_recycled_buffers,3,ngx_http_ssi_loc_conf_t.ignore_recycled_buffers,,http\modules\ngx_http_ssi_filter_module.c,ignore_recycled_buffers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2103,220614,last_modified,3,ngx_http_ssi_loc_conf_t.last_modified,,http\modules\ngx_http_ssi_filter_module.c,last_modified,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2104,220615,types,3,ngx_http_ssi_loc_conf_t.types,,http\modules\ngx_http_ssi_filter_module.c,types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2105,220616,min_file_chunk,3,ngx_http_ssi_loc_conf_t.min_file_chunk,,http\modules\ngx_http_ssi_filter_module.c,min_file_chunk,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2106,220617,value_len,3,ngx_http_ssi_loc_conf_t.value_len,,http\modules\ngx_http_ssi_filter_module.c,value_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2107,220618,types_keys,3,ngx_http_ssi_loc_conf_t.types_keys,,http\modules\ngx_http_ssi_filter_module.c,*types_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2108,220621,name,3,ngx_http_ssi_var_t.name,,http\modules\ngx_http_ssi_filter_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2109,220622,key,3,ngx_http_ssi_var_t.key,,http\modules\ngx_http_ssi_filter_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2110,220623,value,3,ngx_http_ssi_var_t.value,,http\modules\ngx_http_ssi_filter_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2111,220626,name,3,ngx_http_ssi_block_t.name,,http\modules\ngx_http_ssi_filter_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2112,220627,bufs,3,ngx_http_ssi_block_t.bufs,,http\modules\ngx_http_ssi_filter_module.c,*bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2113,220628,count,3,ngx_http_ssi_block_t.count,,http\modules\ngx_http_ssi_filter_module.c,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2114,220631,ssi_start_state,3,ngx_http_ssi_state_e.ssi_start_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_start_state = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2115,220632,ssi_tag_state,3,ngx_http_ssi_state_e.ssi_tag_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_tag_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2116,220633,ssi_comment0_state,3,ngx_http_ssi_state_e.ssi_comment0_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_comment0_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2117,220634,ssi_comment1_state,3,ngx_http_ssi_state_e.ssi_comment1_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_comment1_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2118,220635,ssi_sharp_state,3,ngx_http_ssi_state_e.ssi_sharp_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_sharp_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2119,220636,ssi_precommand_state,3,ngx_http_ssi_state_e.ssi_precommand_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_precommand_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2120,220637,ssi_command_state,3,ngx_http_ssi_state_e.ssi_command_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_command_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2121,220638,ssi_preparam_state,3,ngx_http_ssi_state_e.ssi_preparam_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_preparam_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2122,220639,ssi_param_state,3,ngx_http_ssi_state_e.ssi_param_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_param_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2123,220640,ssi_preequal_state,3,ngx_http_ssi_state_e.ssi_preequal_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_preequal_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2124,220641,ssi_prevalue_state,3,ngx_http_ssi_state_e.ssi_prevalue_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_prevalue_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2125,220642,ssi_double_quoted_value_state,3,ngx_http_ssi_state_e.ssi_double_quoted_value_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_double_quoted_value_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2126,220643,ssi_quoted_value_state,3,ngx_http_ssi_state_e.ssi_quoted_value_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_quoted_value_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2127,220644,ssi_quoted_symbol_state,3,ngx_http_ssi_state_e.ssi_quoted_symbol_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_quoted_symbol_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2128,220645,ssi_postparam_state,3,ngx_http_ssi_state_e.ssi_postparam_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_postparam_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2129,220646,ssi_comment_end0_state,3,ngx_http_ssi_state_e.ssi_comment_end0_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_comment_end0_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2130,220647,ssi_comment_end1_state,3,ngx_http_ssi_state_e.ssi_comment_end1_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_comment_end1_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2131,220648,ssi_error_state,3,ngx_http_ssi_state_e.ssi_error_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_error_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2132,220649,ssi_error_end0_state,3,ngx_http_ssi_state_e.ssi_error_end0_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_error_end0_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2133,220650,ssi_error_end1_state,3,ngx_http_ssi_state_e.ssi_error_end1_state,,http\modules\ngx_http_ssi_filter_module.c,ssi_error_end1_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2134,228661,hash,3,ngx_http_ssi_main_conf_t.hash,,http\modules\ngx_http_ssi_filter_module.h,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2135,228662,commands,3,ngx_http_ssi_main_conf_t.commands,,http\modules\ngx_http_ssi_filter_module.h,commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2136,228665,buf,3,ngx_http_ssi_ctx_t.buf,,http\modules\ngx_http_ssi_filter_module.h,*buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,15,0,1,1,0,0,,0,0,0,0,0,
2137,228666,pos,3,ngx_http_ssi_ctx_t.pos,,http\modules\ngx_http_ssi_filter_module.h,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2138,228667,copy_start,3,ngx_http_ssi_ctx_t.copy_start,,http\modules\ngx_http_ssi_filter_module.h,*copy_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2139,228668,copy_end,3,ngx_http_ssi_ctx_t.copy_end,,http\modules\ngx_http_ssi_filter_module.h,*copy_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2140,228669,key,3,ngx_http_ssi_ctx_t.key,,http\modules\ngx_http_ssi_filter_module.h,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2141,228670,command,3,ngx_http_ssi_ctx_t.command,,http\modules\ngx_http_ssi_filter_module.h,command,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
2142,228671,params,3,ngx_http_ssi_ctx_t.params,,http\modules\ngx_http_ssi_filter_module.h,params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2143,228672,param,3,ngx_http_ssi_ctx_t.param,,http\modules\ngx_http_ssi_filter_module.h,*param,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2144,228673,params_array,3,ngx_http_ssi_ctx_t.params_array,,http\modules\ngx_http_ssi_filter_module.h,params_array[NGX_HTTP_SSI_PARAMS_N],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2145,228674,in,3,ngx_http_ssi_ctx_t.in,,http\modules\ngx_http_ssi_filter_module.h,*in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2146,228675,out,3,ngx_http_ssi_ctx_t.out,,http\modules\ngx_http_ssi_filter_module.h,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2147,228676,last_out,3,ngx_http_ssi_ctx_t.last_out,,http\modules\ngx_http_ssi_filter_module.h,**last_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2148,228677,busy,3,ngx_http_ssi_ctx_t.busy,,http\modules\ngx_http_ssi_filter_module.h,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2149,228678,free,3,ngx_http_ssi_ctx_t.free,,http\modules\ngx_http_ssi_filter_module.h,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,16,0,1,1,0,0,,0,0,0,0,0,
2150,228679,state,3,ngx_http_ssi_ctx_t.state,,http\modules\ngx_http_ssi_filter_module.h,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2151,228680,saved_state,3,ngx_http_ssi_ctx_t.saved_state,,http\modules\ngx_http_ssi_filter_module.h,saved_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2152,228681,saved,3,ngx_http_ssi_ctx_t.saved,,http\modules\ngx_http_ssi_filter_module.h,saved,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2153,228682,looked,3,ngx_http_ssi_ctx_t.looked,,http\modules\ngx_http_ssi_filter_module.h,looked,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2154,228683,value_len,3,ngx_http_ssi_ctx_t.value_len,,http\modules\ngx_http_ssi_filter_module.h,value_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2155,228684,variables,3,ngx_http_ssi_ctx_t.variables,,http\modules\ngx_http_ssi_filter_module.h,*variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2156,228685,blocks,3,ngx_http_ssi_ctx_t.blocks,,http\modules\ngx_http_ssi_filter_module.h,*blocks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2157,228686,ncaptures,3,ngx_http_ssi_ctx_t.ncaptures,,http\modules\ngx_http_ssi_filter_module.h,ncaptures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2158,228687,captures,3,ngx_http_ssi_ctx_t.captures,,http\modules\ngx_http_ssi_filter_module.h,*captures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2159,228688,captures_data,3,ngx_http_ssi_ctx_t.captures_data,,http\modules\ngx_http_ssi_filter_module.h,*captures_data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2160,228689,conditional,3,ngx_http_ssi_ctx_t.conditional,,http\modules\ngx_http_ssi_filter_module.h,conditional:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2161,228690,encoding,3,ngx_http_ssi_ctx_t.encoding,,http\modules\ngx_http_ssi_filter_module.h,encoding:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2162,228691,block,3,ngx_http_ssi_ctx_t.block,,http\modules\ngx_http_ssi_filter_module.h,block:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2163,228692,output,3,ngx_http_ssi_ctx_t.output,,http\modules\ngx_http_ssi_filter_module.h,output:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2164,228693,output_chosen,3,ngx_http_ssi_ctx_t.output_chosen,,http\modules\ngx_http_ssi_filter_module.h,output_chosen:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2165,228694,wait,3,ngx_http_ssi_ctx_t.wait,,http\modules\ngx_http_ssi_filter_module.h,*wait,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2166,228695,value_buf,3,ngx_http_ssi_ctx_t.value_buf,,http\modules\ngx_http_ssi_filter_module.h,*value_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2167,228696,timefmt,3,ngx_http_ssi_ctx_t.timefmt,,http\modules\ngx_http_ssi_filter_module.h,timefmt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2168,228697,errmsg,3,ngx_http_ssi_ctx_t.errmsg,,http\modules\ngx_http_ssi_filter_module.h,errmsg,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2169,228715,name,3,ngx_http_ssi_param_t.name,,http\modules\ngx_http_ssi_filter_module.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2170,228716,index,3,ngx_http_ssi_param_t.index,,http\modules\ngx_http_ssi_filter_module.h,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2171,228717,mandatory,3,ngx_http_ssi_param_t.mandatory,,http\modules\ngx_http_ssi_filter_module.h,mandatory:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2172,228718,multiple,3,ngx_http_ssi_param_t.multiple,,http\modules\ngx_http_ssi_filter_module.h,multiple:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2173,228721,name,3,ngx_http_ssi_command_t.name,,http\modules\ngx_http_ssi_filter_module.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2174,228722,handler,3,ngx_http_ssi_command_t.handler,,http\modules\ngx_http_ssi_filter_module.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2175,228723,params,3,ngx_http_ssi_command_t.params,,http\modules\ngx_http_ssi_filter_module.h,*params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2176,228724,conditional,3,ngx_http_ssi_command_t.conditional,,http\modules\ngx_http_ssi_filter_module.h,conditional:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2177,228725,block,3,ngx_http_ssi_command_t.block,,http\modules\ngx_http_ssi_filter_module.h,block:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2178,228726,flush,3,ngx_http_ssi_command_t.flush,,http\modules\ngx_http_ssi_filter_module.h,flush:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2179,232010,enable,3,ngx_http_ssl_srv_conf_t.enable,,http\modules\ngx_http_ssl_module.h,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2180,232011,ssl,3,ngx_http_ssl_srv_conf_t.ssl,,http\modules\ngx_http_ssl_module.h,ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2181,232012,prefer_server_ciphers,3,ngx_http_ssl_srv_conf_t.prefer_server_ciphers,,http\modules\ngx_http_ssl_module.h,prefer_server_ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2182,232013,early_data,3,ngx_http_ssl_srv_conf_t.early_data,,http\modules\ngx_http_ssl_module.h,early_data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2183,232014,reject_handshake,3,ngx_http_ssl_srv_conf_t.reject_handshake,,http\modules\ngx_http_ssl_module.h,reject_handshake,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2184,232015,protocols,3,ngx_http_ssl_srv_conf_t.protocols,,http\modules\ngx_http_ssl_module.h,protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2185,232016,verify,3,ngx_http_ssl_srv_conf_t.verify,,http\modules\ngx_http_ssl_module.h,verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2186,232017,verify_depth,3,ngx_http_ssl_srv_conf_t.verify_depth,,http\modules\ngx_http_ssl_module.h,verify_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2187,232018,buffer_size,3,ngx_http_ssl_srv_conf_t.buffer_size,,http\modules\ngx_http_ssl_module.h,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2188,232019,builtin_session_cache,3,ngx_http_ssl_srv_conf_t.builtin_session_cache,,http\modules\ngx_http_ssl_module.h,builtin_session_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2189,232020,session_timeout,3,ngx_http_ssl_srv_conf_t.session_timeout,,http\modules\ngx_http_ssl_module.h,session_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2190,232021,certificates,3,ngx_http_ssl_srv_conf_t.certificates,,http\modules\ngx_http_ssl_module.h,*certificates,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2191,232022,certificate_keys,3,ngx_http_ssl_srv_conf_t.certificate_keys,,http\modules\ngx_http_ssl_module.h,*certificate_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2192,232023,certificate_values,3,ngx_http_ssl_srv_conf_t.certificate_values,,http\modules\ngx_http_ssl_module.h,*certificate_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2193,232024,certificate_key_values,3,ngx_http_ssl_srv_conf_t.certificate_key_values,,http\modules\ngx_http_ssl_module.h,*certificate_key_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2194,232025,dhparam,3,ngx_http_ssl_srv_conf_t.dhparam,,http\modules\ngx_http_ssl_module.h,dhparam,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2195,232026,ecdh_curve,3,ngx_http_ssl_srv_conf_t.ecdh_curve,,http\modules\ngx_http_ssl_module.h,ecdh_curve,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2196,232027,client_certificate,3,ngx_http_ssl_srv_conf_t.client_certificate,,http\modules\ngx_http_ssl_module.h,client_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2197,232028,trusted_certificate,3,ngx_http_ssl_srv_conf_t.trusted_certificate,,http\modules\ngx_http_ssl_module.h,trusted_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2198,232029,crl,3,ngx_http_ssl_srv_conf_t.crl,,http\modules\ngx_http_ssl_module.h,crl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2199,232030,ciphers,3,ngx_http_ssl_srv_conf_t.ciphers,,http\modules\ngx_http_ssl_module.h,ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2200,232031,passwords,3,ngx_http_ssl_srv_conf_t.passwords,,http\modules\ngx_http_ssl_module.h,*passwords,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2201,232032,conf_commands,3,ngx_http_ssl_srv_conf_t.conf_commands,,http\modules\ngx_http_ssl_module.h,*conf_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2202,232033,shm_zone,3,ngx_http_ssl_srv_conf_t.shm_zone,,http\modules\ngx_http_ssl_module.h,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2203,232034,session_tickets,3,ngx_http_ssl_srv_conf_t.session_tickets,,http\modules\ngx_http_ssl_module.h,session_tickets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2204,232035,session_ticket_keys,3,ngx_http_ssl_srv_conf_t.session_ticket_keys,,http\modules\ngx_http_ssl_module.h,*session_ticket_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2205,232036,ocsp,3,ngx_http_ssl_srv_conf_t.ocsp,,http\modules\ngx_http_ssl_module.h,ocsp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2206,232037,ocsp_responder,3,ngx_http_ssl_srv_conf_t.ocsp_responder,,http\modules\ngx_http_ssl_module.h,ocsp_responder,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2207,232038,ocsp_cache_zone,3,ngx_http_ssl_srv_conf_t.ocsp_cache_zone,,http\modules\ngx_http_ssl_module.h,*ocsp_cache_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2208,232039,stapling,3,ngx_http_ssl_srv_conf_t.stapling,,http\modules\ngx_http_ssl_module.h,stapling,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2209,232040,stapling_verify,3,ngx_http_ssl_srv_conf_t.stapling_verify,,http\modules\ngx_http_ssl_module.h,stapling_verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2210,232041,stapling_file,3,ngx_http_ssl_srv_conf_t.stapling_file,,http\modules\ngx_http_ssl_module.h,stapling_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2211,232042,stapling_responder,3,ngx_http_ssl_srv_conf_t.stapling_responder,,http\modules\ngx_http_ssl_module.h,stapling_responder,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2212,232043,file,3,ngx_http_ssl_srv_conf_t.file,,http\modules\ngx_http_ssl_module.h,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2213,232044,line,3,ngx_http_ssl_srv_conf_t.line,,http\modules\ngx_http_ssl_module.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2214,233412,match,3,ngx_http_sub_pair_t.match,,http\modules\ngx_http_sub_filter_module.c,match,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2215,233413,value,3,ngx_http_sub_pair_t.value,,http\modules\ngx_http_sub_filter_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2216,233416,match,3,ngx_http_sub_match_t.match,,http\modules\ngx_http_sub_filter_module.c,match,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2217,233417,value,3,ngx_http_sub_match_t.value,,http\modules\ngx_http_sub_filter_module.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2218,233420,min_match_len,3,ngx_http_sub_tables_t.min_match_len,,http\modules\ngx_http_sub_filter_module.c,min_match_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2219,233421,max_match_len,3,ngx_http_sub_tables_t.max_match_len,,http\modules\ngx_http_sub_filter_module.c,max_match_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2220,233422,index,3,ngx_http_sub_tables_t.index,,http\modules\ngx_http_sub_filter_module.c,index[257],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2221,233423,shift,3,ngx_http_sub_tables_t.shift,,http\modules\ngx_http_sub_filter_module.c,shift[256],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2222,233434,dynamic,3,ngx_http_sub_loc_conf_t.dynamic,,http\modules\ngx_http_sub_filter_module.c,dynamic,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2223,233435,pairs,3,ngx_http_sub_loc_conf_t.pairs,,http\modules\ngx_http_sub_filter_module.c,*pairs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2224,233436,tables,3,ngx_http_sub_loc_conf_t.tables,,http\modules\ngx_http_sub_filter_module.c,*tables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2225,233437,types,3,ngx_http_sub_loc_conf_t.types,,http\modules\ngx_http_sub_filter_module.c,types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2226,233438,once,3,ngx_http_sub_loc_conf_t.once,,http\modules\ngx_http_sub_filter_module.c,once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2227,233439,last_modified,3,ngx_http_sub_loc_conf_t.last_modified,,http\modules\ngx_http_sub_filter_module.c,last_modified,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2228,233440,types_keys,3,ngx_http_sub_loc_conf_t.types_keys,,http\modules\ngx_http_sub_filter_module.c,*types_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2229,233441,matches,3,ngx_http_sub_loc_conf_t.matches,,http\modules\ngx_http_sub_filter_module.c,*matches,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2230,233444,saved,3,ngx_http_sub_ctx_t.saved,,http\modules\ngx_http_sub_filter_module.c,saved,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
2231,233445,looked,3,ngx_http_sub_ctx_t.looked,,http\modules\ngx_http_sub_filter_module.c,looked,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2232,233446,once,3,ngx_http_sub_ctx_t.once,,http\modules\ngx_http_sub_filter_module.c,once,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2233,233447,buf,3,ngx_http_sub_ctx_t.buf,,http\modules\ngx_http_sub_filter_module.c,*buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,24,0,1,1,0,0,,0,0,0,0,0,
2234,233448,pos,3,ngx_http_sub_ctx_t.pos,,http\modules\ngx_http_sub_filter_module.c,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2235,233449,copy_start,3,ngx_http_sub_ctx_t.copy_start,,http\modules\ngx_http_sub_filter_module.c,*copy_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2236,233450,copy_end,3,ngx_http_sub_ctx_t.copy_end,,http\modules\ngx_http_sub_filter_module.c,*copy_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2237,233451,in,3,ngx_http_sub_ctx_t.in,,http\modules\ngx_http_sub_filter_module.c,*in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2238,233452,out,3,ngx_http_sub_ctx_t.out,,http\modules\ngx_http_sub_filter_module.c,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2239,233453,last_out,3,ngx_http_sub_ctx_t.last_out,,http\modules\ngx_http_sub_filter_module.c,**last_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
2240,233454,busy,3,ngx_http_sub_ctx_t.busy,,http\modules\ngx_http_sub_filter_module.c,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2241,233455,free,3,ngx_http_sub_ctx_t.free,,http\modules\ngx_http_sub_filter_module.c,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
2242,233456,sub,3,ngx_http_sub_ctx_t.sub,,http\modules\ngx_http_sub_filter_module.c,*sub,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2243,233457,applied,3,ngx_http_sub_ctx_t.applied,,http\modules\ngx_http_sub_filter_module.c,applied,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2244,233458,offset,3,ngx_http_sub_ctx_t.offset,,http\modules\ngx_http_sub_filter_module.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2245,233459,index,3,ngx_http_sub_ctx_t.index,,http\modules\ngx_http_sub_filter_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2246,233460,tables,3,ngx_http_sub_ctx_t.tables,,http\modules\ngx_http_sub_filter_module.c,*tables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2247,233461,matches,3,ngx_http_sub_ctx_t.matches,,http\modules\ngx_http_sub_filter_module.c,*matches,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2248,236474,lengths,3,ngx_http_try_file_t.lengths,,http\modules\ngx_http_try_files_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2249,236475,values,3,ngx_http_try_file_t.values,,http\modules\ngx_http_try_files_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2250,236476,name,3,ngx_http_try_file_t.name,,http\modules\ngx_http_try_files_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2251,236477,code,3,ngx_http_try_file_t.code,,http\modules\ngx_http_try_files_module.c,code:10,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2252,236478,test_dir,3,ngx_http_try_file_t.test_dir,,http\modules\ngx_http_try_files_module.c,test_dir:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2253,236481,try_files,3,ngx_http_try_files_loc_conf_t.try_files,,http\modules\ngx_http_try_files_module.c,*try_files,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2254,237656,hash,3,ngx_http_upstream_chash_point_t.hash,,http\modules\ngx_http_upstream_hash_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2255,237657,server,3,ngx_http_upstream_chash_point_t.server,,http\modules\ngx_http_upstream_hash_module.c,*server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2256,237660,number,3,ngx_http_upstream_chash_points_t.number,,http\modules\ngx_http_upstream_hash_module.c,number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2257,237661,point,3,ngx_http_upstream_chash_points_t.point,,http\modules\ngx_http_upstream_hash_module.c,point[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2258,237670,key,3,ngx_http_upstream_hash_srv_conf_t.key,,http\modules\ngx_http_upstream_hash_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2259,237671,points,3,ngx_http_upstream_hash_srv_conf_t.points,,http\modules\ngx_http_upstream_hash_module.c,*points,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2260,237674,rrp,3,ngx_http_upstream_hash_peer_data_t.rrp,,http\modules\ngx_http_upstream_hash_module.c,rrp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2261,237675,conf,3,ngx_http_upstream_hash_peer_data_t.conf,,http\modules\ngx_http_upstream_hash_module.c,*conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2262,237676,key,3,ngx_http_upstream_hash_peer_data_t.key,,http\modules\ngx_http_upstream_hash_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2263,237677,tries,3,ngx_http_upstream_hash_peer_data_t.tries,,http\modules\ngx_http_upstream_hash_module.c,tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2264,237678,rehash,3,ngx_http_upstream_hash_peer_data_t.rehash,,http\modules\ngx_http_upstream_hash_module.c,rehash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2265,237679,hash,3,ngx_http_upstream_hash_peer_data_t.hash,,http\modules\ngx_http_upstream_hash_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2266,237680,get_rr_peer,3,ngx_http_upstream_hash_peer_data_t.get_rr_peer,,http\modules\ngx_http_upstream_hash_module.c,get_rr_peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2267,239579,rrp,3,ngx_http_upstream_ip_hash_peer_data_t.rrp,,http\modules\ngx_http_upstream_ip_hash_module.c,rrp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2268,239580,hash,3,ngx_http_upstream_ip_hash_peer_data_t.hash,,http\modules\ngx_http_upstream_ip_hash_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2269,239581,addrlen,3,ngx_http_upstream_ip_hash_peer_data_t.addrlen,,http\modules\ngx_http_upstream_ip_hash_module.c,addrlen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2270,239582,addr,3,ngx_http_upstream_ip_hash_peer_data_t.addr,,http\modules\ngx_http_upstream_ip_hash_module.c,*addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2271,239583,tries,3,ngx_http_upstream_ip_hash_peer_data_t.tries,,http\modules\ngx_http_upstream_ip_hash_module.c,tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2272,239584,get_rr_peer,3,ngx_http_upstream_ip_hash_peer_data_t.get_rr_peer,,http\modules\ngx_http_upstream_ip_hash_module.c,get_rr_peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2273,240231,max_cached,3,ngx_http_upstream_keepalive_srv_conf_t.max_cached,,http\modules\ngx_http_upstream_keepalive_module.c,max_cached,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2274,240232,requests,3,ngx_http_upstream_keepalive_srv_conf_t.requests,,http\modules\ngx_http_upstream_keepalive_module.c,requests,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2275,240233,time,3,ngx_http_upstream_keepalive_srv_conf_t.time,,http\modules\ngx_http_upstream_keepalive_module.c,time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2276,240234,timeout,3,ngx_http_upstream_keepalive_srv_conf_t.timeout,,http\modules\ngx_http_upstream_keepalive_module.c,timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2277,240235,cache,3,ngx_http_upstream_keepalive_srv_conf_t.cache,,http\modules\ngx_http_upstream_keepalive_module.c,cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2278,240236,free,3,ngx_http_upstream_keepalive_srv_conf_t.free,,http\modules\ngx_http_upstream_keepalive_module.c,free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2279,240237,original_init_upstream,3,ngx_http_upstream_keepalive_srv_conf_t.original_init_upstream,,http\modules\ngx_http_upstream_keepalive_module.c,original_init_upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2280,240238,original_init_peer,3,ngx_http_upstream_keepalive_srv_conf_t.original_init_peer,,http\modules\ngx_http_upstream_keepalive_module.c,original_init_peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2281,240241,conf,3,ngx_http_upstream_keepalive_cache_t.conf,,http\modules\ngx_http_upstream_keepalive_module.c,*conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2282,240242,queue,3,ngx_http_upstream_keepalive_cache_t.queue,,http\modules\ngx_http_upstream_keepalive_module.c,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2283,240243,connection,3,ngx_http_upstream_keepalive_cache_t.connection,,http\modules\ngx_http_upstream_keepalive_module.c,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2284,240244,socklen,3,ngx_http_upstream_keepalive_cache_t.socklen,,http\modules\ngx_http_upstream_keepalive_module.c,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2285,240245,sockaddr,3,ngx_http_upstream_keepalive_cache_t.sockaddr,,http\modules\ngx_http_upstream_keepalive_module.c,sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2286,240248,conf,3,ngx_http_upstream_keepalive_peer_data_t.conf,,http\modules\ngx_http_upstream_keepalive_module.c,*conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2287,240249,upstream,3,ngx_http_upstream_keepalive_peer_data_t.upstream,,http\modules\ngx_http_upstream_keepalive_module.c,*upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2288,240250,data,3,ngx_http_upstream_keepalive_peer_data_t.data,,http\modules\ngx_http_upstream_keepalive_module.c,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2289,240251,original_get_peer,3,ngx_http_upstream_keepalive_peer_data_t.original_get_peer,,http\modules\ngx_http_upstream_keepalive_module.c,original_get_peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2290,240252,original_free_peer,3,ngx_http_upstream_keepalive_peer_data_t.original_free_peer,,http\modules\ngx_http_upstream_keepalive_module.c,original_free_peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2291,240253,original_set_session,3,ngx_http_upstream_keepalive_peer_data_t.original_set_session,,http\modules\ngx_http_upstream_keepalive_module.c,original_set_session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2292,240254,original_save_session,3,ngx_http_upstream_keepalive_peer_data_t.original_save_session,,http\modules\ngx_http_upstream_keepalive_module.c,original_save_session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2293,242163,peer,3,ngx_http_upstream_random_range_t.peer,,http\modules\ngx_http_upstream_random_module.c,*peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2294,242164,range,3,ngx_http_upstream_random_range_t.range,,http\modules\ngx_http_upstream_random_module.c,range,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2295,242167,two,3,ngx_http_upstream_random_srv_conf_t.two,,http\modules\ngx_http_upstream_random_module.c,two,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2296,242168,ranges,3,ngx_http_upstream_random_srv_conf_t.ranges,,http\modules\ngx_http_upstream_random_module.c,*ranges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2297,242171,rrp,3,ngx_http_upstream_random_peer_data_t.rrp,,http\modules\ngx_http_upstream_random_module.c,rrp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2298,242172,conf,3,ngx_http_upstream_random_peer_data_t.conf,,http\modules\ngx_http_upstream_random_module.c,*conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2299,242173,tries,3,ngx_http_upstream_random_peer_data_t.tries,,http\modules\ngx_http_upstream_random_module.c,tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2300,244133,enable,3,ngx_http_userid_conf_t.enable,,http\modules\ngx_http_userid_filter_module.c,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2301,244134,flags,3,ngx_http_userid_conf_t.flags,,http\modules\ngx_http_userid_filter_module.c,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2302,244135,service,3,ngx_http_userid_conf_t.service,,http\modules\ngx_http_userid_filter_module.c,service,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2303,244136,name,3,ngx_http_userid_conf_t.name,,http\modules\ngx_http_userid_filter_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2304,244137,domain,3,ngx_http_userid_conf_t.domain,,http\modules\ngx_http_userid_filter_module.c,domain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2305,244138,path,3,ngx_http_userid_conf_t.path,,http\modules\ngx_http_userid_filter_module.c,path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2306,244139,p3p,3,ngx_http_userid_conf_t.p3p,,http\modules\ngx_http_userid_filter_module.c,p3p,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2307,244140,expires,3,ngx_http_userid_conf_t.expires,,http\modules\ngx_http_userid_filter_module.c,expires,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2308,244141,mark,3,ngx_http_userid_conf_t.mark,,http\modules\ngx_http_userid_filter_module.c,mark,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2309,244144,uid_got,3,ngx_http_userid_ctx_t.uid_got,,http\modules\ngx_http_userid_filter_module.c,uid_got[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2310,244145,uid_set,3,ngx_http_userid_ctx_t.uid_set,,http\modules\ngx_http_userid_filter_module.c,uid_set[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2311,244146,cookie,3,ngx_http_userid_ctx_t.cookie,,http\modules\ngx_http_userid_filter_module.c,cookie,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2312,244147,reset,3,ngx_http_userid_ctx_t.reset,,http\modules\ngx_http_userid_filter_module.c,reset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2313,246663,caches,3,ngx_http_uwsgi_main_conf_t.caches,,http\modules\ngx_http_uwsgi_module.c,caches,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2314,246666,flushes,3,ngx_http_uwsgi_params_t.flushes,,http\modules\ngx_http_uwsgi_module.c,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2315,246667,lengths,3,ngx_http_uwsgi_params_t.lengths,,http\modules\ngx_http_uwsgi_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2316,246668,values,3,ngx_http_uwsgi_params_t.values,,http\modules\ngx_http_uwsgi_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2317,246669,number,3,ngx_http_uwsgi_params_t.number,,http\modules\ngx_http_uwsgi_module.c,number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2318,246670,hash,3,ngx_http_uwsgi_params_t.hash,,http\modules\ngx_http_uwsgi_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2319,246673,upstream,3,ngx_http_uwsgi_loc_conf_t.upstream,,http\modules\ngx_http_uwsgi_module.c,upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2320,246674,params,3,ngx_http_uwsgi_loc_conf_t.params,,http\modules\ngx_http_uwsgi_module.c,params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2321,246675,params_cache,3,ngx_http_uwsgi_loc_conf_t.params_cache,,http\modules\ngx_http_uwsgi_module.c,params_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2322,246676,params_source,3,ngx_http_uwsgi_loc_conf_t.params_source,,http\modules\ngx_http_uwsgi_module.c,*params_source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2323,246677,uwsgi_lengths,3,ngx_http_uwsgi_loc_conf_t.uwsgi_lengths,,http\modules\ngx_http_uwsgi_module.c,*uwsgi_lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2324,246678,uwsgi_values,3,ngx_http_uwsgi_loc_conf_t.uwsgi_values,,http\modules\ngx_http_uwsgi_module.c,*uwsgi_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2325,246679,cache_key,3,ngx_http_uwsgi_loc_conf_t.cache_key,,http\modules\ngx_http_uwsgi_module.c,cache_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2326,246680,uwsgi_string,3,ngx_http_uwsgi_loc_conf_t.uwsgi_string,,http\modules\ngx_http_uwsgi_module.c,uwsgi_string,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2327,246681,modifier1,3,ngx_http_uwsgi_loc_conf_t.modifier1,,http\modules\ngx_http_uwsgi_module.c,modifier1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2328,246682,modifier2,3,ngx_http_uwsgi_loc_conf_t.modifier2,,http\modules\ngx_http_uwsgi_module.c,modifier2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2329,246683,ssl,3,ngx_http_uwsgi_loc_conf_t.ssl,,http\modules\ngx_http_uwsgi_module.c,ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2330,246684,ssl_protocols,3,ngx_http_uwsgi_loc_conf_t.ssl_protocols,,http\modules\ngx_http_uwsgi_module.c,ssl_protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2331,246685,ssl_ciphers,3,ngx_http_uwsgi_loc_conf_t.ssl_ciphers,,http\modules\ngx_http_uwsgi_module.c,ssl_ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2332,246686,ssl_verify_depth,3,ngx_http_uwsgi_loc_conf_t.ssl_verify_depth,,http\modules\ngx_http_uwsgi_module.c,ssl_verify_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2333,246687,ssl_trusted_certificate,3,ngx_http_uwsgi_loc_conf_t.ssl_trusted_certificate,,http\modules\ngx_http_uwsgi_module.c,ssl_trusted_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2334,246688,ssl_crl,3,ngx_http_uwsgi_loc_conf_t.ssl_crl,,http\modules\ngx_http_uwsgi_module.c,ssl_crl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2335,246689,ssl_conf_commands,3,ngx_http_uwsgi_loc_conf_t.ssl_conf_commands,,http\modules\ngx_http_uwsgi_module.c,*ssl_conf_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2336,252229,name,3,ngx_http_xslt_file_t.name,,http\modules\ngx_http_xslt_filter_module.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2337,252230,data,3,ngx_http_xslt_file_t.data,,http\modules\ngx_http_xslt_filter_module.c,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2338,252233,dtd_files,3,ngx_http_xslt_filter_main_conf_t.dtd_files,,http\modules\ngx_http_xslt_filter_module.c,dtd_files,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2339,252234,sheet_files,3,ngx_http_xslt_filter_main_conf_t.sheet_files,,http\modules\ngx_http_xslt_filter_module.c,sheet_files,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2340,252237,name,3,ngx_http_xslt_param_t.name,,http\modules\ngx_http_xslt_filter_module.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2341,252238,value,3,ngx_http_xslt_param_t.value,,http\modules\ngx_http_xslt_filter_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2342,252239,quote,3,ngx_http_xslt_param_t.quote,,http\modules\ngx_http_xslt_filter_module.c,quote,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2343,252242,stylesheet,3,ngx_http_xslt_sheet_t.stylesheet,,http\modules\ngx_http_xslt_filter_module.c,stylesheet,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2344,252243,params,3,ngx_http_xslt_sheet_t.params,,http\modules\ngx_http_xslt_filter_module.c,params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2345,252246,dtd,3,ngx_http_xslt_filter_loc_conf_t.dtd,,http\modules\ngx_http_xslt_filter_module.c,dtd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2346,252247,sheets,3,ngx_http_xslt_filter_loc_conf_t.sheets,,http\modules\ngx_http_xslt_filter_module.c,sheets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2347,252248,types,3,ngx_http_xslt_filter_loc_conf_t.types,,http\modules\ngx_http_xslt_filter_module.c,types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2348,252249,types_keys,3,ngx_http_xslt_filter_loc_conf_t.types_keys,,http\modules\ngx_http_xslt_filter_module.c,*types_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2349,252250,params,3,ngx_http_xslt_filter_loc_conf_t.params,,http\modules\ngx_http_xslt_filter_module.c,*params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2350,252251,last_modified,3,ngx_http_xslt_filter_loc_conf_t.last_modified,,http\modules\ngx_http_xslt_filter_module.c,last_modified,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2351,252254,doc,3,ngx_http_xslt_filter_ctx_t.doc,,http\modules\ngx_http_xslt_filter_module.c,doc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2352,252255,ctxt,3,ngx_http_xslt_filter_ctx_t.ctxt,,http\modules\ngx_http_xslt_filter_module.c,ctxt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2353,252256,transform,3,ngx_http_xslt_filter_ctx_t.transform,,http\modules\ngx_http_xslt_filter_module.c,transform,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2354,252257,request,3,ngx_http_xslt_filter_ctx_t.request,,http\modules\ngx_http_xslt_filter_module.c,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2355,252258,params,3,ngx_http_xslt_filter_ctx_t.params,,http\modules\ngx_http_xslt_filter_module.c,params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2356,252259,done,3,ngx_http_xslt_filter_ctx_t.done,,http\modules\ngx_http_xslt_filter_module.c,done,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2357,254997,perl,3,ngx_http_perl_main_conf_t.perl,,http\modules\perl\ngx_http_perl_module.c,*perl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2358,254998,nginx,3,ngx_http_perl_main_conf_t.nginx,,http\modules\perl\ngx_http_perl_module.c,*nginx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2359,254999,modules,3,ngx_http_perl_main_conf_t.modules,,http\modules\perl\ngx_http_perl_module.c,*modules,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2360,255000,requires,3,ngx_http_perl_main_conf_t.requires,,http\modules\perl\ngx_http_perl_module.c,*requires,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2361,255003,sub,3,ngx_http_perl_loc_conf_t.sub,,http\modules\perl\ngx_http_perl_module.c,*sub,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2362,255004,handler,3,ngx_http_perl_loc_conf_t.handler,,http\modules\perl\ngx_http_perl_module.c,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2363,255007,sub,3,ngx_http_perl_variable_t.sub,,http\modules\perl\ngx_http_perl_module.c,*sub,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2364,255008,handler,3,ngx_http_perl_variable_t.handler,,http\modules\perl\ngx_http_perl_module.c,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2365,256577,request,3,ngx_http_perl_ctx_t.request,,http\modules\perl\ngx_http_perl_module.h,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2366,256578,filename,3,ngx_http_perl_ctx_t.filename,,http\modules\perl\ngx_http_perl_module.h,filename,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2367,256579,redirect_uri,3,ngx_http_perl_ctx_t.redirect_uri,,http\modules\perl\ngx_http_perl_module.h,redirect_uri,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2368,256580,next,3,ngx_http_perl_ctx_t.next,,http\modules\perl\ngx_http_perl_module.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2369,256581,status,3,ngx_http_perl_ctx_t.status,,http\modules\perl\ngx_http_perl_module.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2370,256582,done,3,ngx_http_perl_ctx_t.done,,http\modules\perl\ngx_http_perl_module.h,done:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2371,256583,error,3,ngx_http_perl_ctx_t.error,,http\modules\perl\ngx_http_perl_module.h,error:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2372,256584,variable,3,ngx_http_perl_ctx_t.variable,,http\modules\perl\ngx_http_perl_module.h,variable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2373,256585,header_sent,3,ngx_http_perl_ctx_t.header_sent,,http\modules\perl\ngx_http_perl_module.h,header_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2374,256586,variables,3,ngx_http_perl_ctx_t.variables,,http\modules\perl\ngx_http_perl_module.h,*variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2375,256587,ssi,3,ngx_http_perl_ctx_t.ssi,,http\modules\perl\ngx_http_perl_module.h,*ssi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2376,256590,hash,3,ngx_http_perl_var_t.hash,,http\modules\perl\ngx_http_perl_module.h,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2377,256591,name,3,ngx_http_perl_var_t.name,,http\modules\perl\ngx_http_perl_module.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2378,256592,value,3,ngx_http_perl_var_t.value,,http\modules\perl\ngx_http_perl_module.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2379,261708,connection,3,ngx_http_log_ctx_s.connection,,http\ngx_http.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2380,261709,request,3,ngx_http_log_ctx_s.request,,http\ngx_http.h,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2381,261710,current_request,3,ngx_http_log_ctx_s.current_request,,http\ngx_http.h,*current_request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2382,261712,state,3,ngx_http_chunked_s.state,,http\ngx_http.h,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2383,261713,size,3,ngx_http_chunked_s.size,,http\ngx_http.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2384,261714,length,3,ngx_http_chunked_s.length,,http\ngx_http.h,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2385,261716,http_version,3,ngx_http_status_t.http_version,,http\ngx_http.h,http_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2386,261717,code,3,ngx_http_status_t.code,,http\ngx_http.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2387,261718,count,3,ngx_http_status_t.count,,http\ngx_http.h,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2388,261719,start,3,ngx_http_status_t.start,,http\ngx_http.h,*start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2389,261720,end,3,ngx_http_status_t.end,,http\ngx_http.h,*end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2390,261986,status,3,ngx_http_cache_valid_t.status,,http\ngx_http_cache.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2391,261987,valid,3,ngx_http_cache_valid_t.valid,,http\ngx_http_cache.h,valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2392,261990,node,3,ngx_http_file_cache_node_t.node,,http\ngx_http_cache.h,node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2393,261991,queue,3,ngx_http_file_cache_node_t.queue,,http\ngx_http_cache.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2394,261992,key,3,ngx_http_file_cache_node_t.key,,http\ngx_http_cache.h,"key[NGX_HTTP_CACHE_KEY_LEN
                                         - sizeof(ngx_rbtree_key_t)]",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2395,261993,count,3,ngx_http_file_cache_node_t.count,,http\ngx_http_cache.h,count:20,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2396,261994,uses,3,ngx_http_file_cache_node_t.uses,,http\ngx_http_cache.h,uses:10,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2397,261995,valid_msec,3,ngx_http_file_cache_node_t.valid_msec,,http\ngx_http_cache.h,valid_msec:10,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2398,261996,error,3,ngx_http_file_cache_node_t.error,,http\ngx_http_cache.h,error:10,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2399,261997,exists,3,ngx_http_file_cache_node_t.exists,,http\ngx_http_cache.h,exists:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2400,261998,updating,3,ngx_http_file_cache_node_t.updating,,http\ngx_http_cache.h,updating:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2401,261999,deleting,3,ngx_http_file_cache_node_t.deleting,,http\ngx_http_cache.h,deleting:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2402,262000,purged,3,ngx_http_file_cache_node_t.purged,,http\ngx_http_cache.h,purged:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2403,262001,uniq,3,ngx_http_file_cache_node_t.uniq,,http\ngx_http_cache.h,uniq,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2404,262002,expire,3,ngx_http_file_cache_node_t.expire,,http\ngx_http_cache.h,expire,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2405,262003,valid_sec,3,ngx_http_file_cache_node_t.valid_sec,,http\ngx_http_cache.h,valid_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2406,262004,body_start,3,ngx_http_file_cache_node_t.body_start,,http\ngx_http_cache.h,body_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2407,262005,fs_size,3,ngx_http_file_cache_node_t.fs_size,,http\ngx_http_cache.h,fs_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2408,262006,lock_time,3,ngx_http_file_cache_node_t.lock_time,,http\ngx_http_cache.h,lock_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2409,262020,file,3,ngx_http_cache_s.file,,http\ngx_http_cache.h,file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2410,262021,keys,3,ngx_http_cache_s.keys,,http\ngx_http_cache.h,keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2411,262022,crc32,3,ngx_http_cache_s.crc32,,http\ngx_http_cache.h,crc32,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2412,262023,key,3,ngx_http_cache_s.key,,http\ngx_http_cache.h,key[NGX_HTTP_CACHE_KEY_LEN],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2413,262024,main,3,ngx_http_cache_s.main,,http\ngx_http_cache.h,main[NGX_HTTP_CACHE_KEY_LEN],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2414,262025,uniq,3,ngx_http_cache_s.uniq,,http\ngx_http_cache.h,uniq,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2415,262026,valid_sec,3,ngx_http_cache_s.valid_sec,,http\ngx_http_cache.h,valid_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2416,262027,updating_sec,3,ngx_http_cache_s.updating_sec,,http\ngx_http_cache.h,updating_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2417,262028,error_sec,3,ngx_http_cache_s.error_sec,,http\ngx_http_cache.h,error_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2418,262029,last_modified,3,ngx_http_cache_s.last_modified,,http\ngx_http_cache.h,last_modified,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2419,262030,date,3,ngx_http_cache_s.date,,http\ngx_http_cache.h,date,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2420,262031,etag,3,ngx_http_cache_s.etag,,http\ngx_http_cache.h,etag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2421,262032,vary,3,ngx_http_cache_s.vary,,http\ngx_http_cache.h,vary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2422,262033,variant,3,ngx_http_cache_s.variant,,http\ngx_http_cache.h,variant[NGX_HTTP_CACHE_KEY_LEN],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2423,262034,buffer_size,3,ngx_http_cache_s.buffer_size,,http\ngx_http_cache.h,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2424,262035,header_start,3,ngx_http_cache_s.header_start,,http\ngx_http_cache.h,header_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2425,262036,body_start,3,ngx_http_cache_s.body_start,,http\ngx_http_cache.h,body_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2426,262037,length,3,ngx_http_cache_s.length,,http\ngx_http_cache.h,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2427,262038,fs_size,3,ngx_http_cache_s.fs_size,,http\ngx_http_cache.h,fs_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2428,262039,min_uses,3,ngx_http_cache_s.min_uses,,http\ngx_http_cache.h,min_uses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2429,262040,error,3,ngx_http_cache_s.error,,http\ngx_http_cache.h,error,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2430,262041,valid_msec,3,ngx_http_cache_s.valid_msec,,http\ngx_http_cache.h,valid_msec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2431,262042,vary_tag,3,ngx_http_cache_s.vary_tag,,http\ngx_http_cache.h,vary_tag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2432,262043,buf,3,ngx_http_cache_s.buf,,http\ngx_http_cache.h,*buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2433,262044,file_cache,3,ngx_http_cache_s.file_cache,,http\ngx_http_cache.h,*file_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2434,262045,node,3,ngx_http_cache_s.node,,http\ngx_http_cache.h,*node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2435,262046,thread_task,3,ngx_http_cache_s.thread_task,,http\ngx_http_cache.h,*thread_task,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2436,262047,lock_timeout,3,ngx_http_cache_s.lock_timeout,,http\ngx_http_cache.h,lock_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2437,262048,lock_age,3,ngx_http_cache_s.lock_age,,http\ngx_http_cache.h,lock_age,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2438,262049,lock_time,3,ngx_http_cache_s.lock_time,,http\ngx_http_cache.h,lock_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2439,262050,wait_time,3,ngx_http_cache_s.wait_time,,http\ngx_http_cache.h,wait_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2440,262051,wait_event,3,ngx_http_cache_s.wait_event,,http\ngx_http_cache.h,wait_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2441,262052,lock,3,ngx_http_cache_s.lock,,http\ngx_http_cache.h,lock:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2442,262053,waiting,3,ngx_http_cache_s.waiting,,http\ngx_http_cache.h,waiting:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2443,262054,updated,3,ngx_http_cache_s.updated,,http\ngx_http_cache.h,updated:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2444,262055,updating,3,ngx_http_cache_s.updating,,http\ngx_http_cache.h,updating:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2445,262056,exists,3,ngx_http_cache_s.exists,,http\ngx_http_cache.h,exists:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2446,262057,temp_file,3,ngx_http_cache_s.temp_file,,http\ngx_http_cache.h,temp_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2447,262058,purged,3,ngx_http_cache_s.purged,,http\ngx_http_cache.h,purged:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2448,262059,reading,3,ngx_http_cache_s.reading,,http\ngx_http_cache.h,reading:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2449,262060,secondary,3,ngx_http_cache_s.secondary,,http\ngx_http_cache.h,secondary:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2450,262061,update_variant,3,ngx_http_cache_s.update_variant,,http\ngx_http_cache.h,update_variant:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2451,262062,background,3,ngx_http_cache_s.background,,http\ngx_http_cache.h,background:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2452,262063,stale_updating,3,ngx_http_cache_s.stale_updating,,http\ngx_http_cache.h,stale_updating:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2453,262064,stale_error,3,ngx_http_cache_s.stale_error,,http\ngx_http_cache.h,stale_error:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2454,262082,version,3,ngx_http_file_cache_header_t.version,,http\ngx_http_cache.h,version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2455,262083,valid_sec,3,ngx_http_file_cache_header_t.valid_sec,,http\ngx_http_cache.h,valid_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2456,262084,updating_sec,3,ngx_http_file_cache_header_t.updating_sec,,http\ngx_http_cache.h,updating_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2457,262085,error_sec,3,ngx_http_file_cache_header_t.error_sec,,http\ngx_http_cache.h,error_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2458,262086,last_modified,3,ngx_http_file_cache_header_t.last_modified,,http\ngx_http_cache.h,last_modified,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2459,262087,date,3,ngx_http_file_cache_header_t.date,,http\ngx_http_cache.h,date,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2460,262088,crc32,3,ngx_http_file_cache_header_t.crc32,,http\ngx_http_cache.h,crc32,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2461,262089,valid_msec,3,ngx_http_file_cache_header_t.valid_msec,,http\ngx_http_cache.h,valid_msec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2462,262090,header_start,3,ngx_http_file_cache_header_t.header_start,,http\ngx_http_cache.h,header_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2463,262091,body_start,3,ngx_http_file_cache_header_t.body_start,,http\ngx_http_cache.h,body_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2464,262092,etag_len,3,ngx_http_file_cache_header_t.etag_len,,http\ngx_http_cache.h,etag_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2465,262093,etag,3,ngx_http_file_cache_header_t.etag,,http\ngx_http_cache.h,etag[NGX_HTTP_CACHE_ETAG_LEN],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2466,262094,vary_len,3,ngx_http_file_cache_header_t.vary_len,,http\ngx_http_cache.h,vary_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2467,262095,vary,3,ngx_http_file_cache_header_t.vary,,http\ngx_http_cache.h,vary[NGX_HTTP_CACHE_VARY_LEN],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2468,262096,variant,3,ngx_http_file_cache_header_t.variant,,http\ngx_http_cache.h,variant[NGX_HTTP_CACHE_KEY_LEN],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2469,262115,rbtree,3,ngx_http_file_cache_sh_t.rbtree,,http\ngx_http_cache.h,rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2470,262116,sentinel,3,ngx_http_file_cache_sh_t.sentinel,,http\ngx_http_cache.h,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2471,262117,queue,3,ngx_http_file_cache_sh_t.queue,,http\ngx_http_cache.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2472,262118,cold,3,ngx_http_file_cache_sh_t.cold,,http\ngx_http_cache.h,cold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2473,262119,loading,3,ngx_http_file_cache_sh_t.loading,,http\ngx_http_cache.h,loading,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2474,262120,size,3,ngx_http_file_cache_sh_t.size,,http\ngx_http_cache.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2475,262121,count,3,ngx_http_file_cache_sh_t.count,,http\ngx_http_cache.h,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2476,262122,watermark,3,ngx_http_file_cache_sh_t.watermark,,http\ngx_http_cache.h,watermark,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2477,262125,sh,3,ngx_http_file_cache_s.sh,,http\ngx_http_cache.h,*sh,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2478,262126,shpool,3,ngx_http_file_cache_s.shpool,,http\ngx_http_cache.h,*shpool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2479,262127,path,3,ngx_http_file_cache_s.path,,http\ngx_http_cache.h,*path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2480,262128,min_free,3,ngx_http_file_cache_s.min_free,,http\ngx_http_cache.h,min_free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2481,262129,max_size,3,ngx_http_file_cache_s.max_size,,http\ngx_http_cache.h,max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2482,262130,bsize,3,ngx_http_file_cache_s.bsize,,http\ngx_http_cache.h,bsize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2483,262131,inactive,3,ngx_http_file_cache_s.inactive,,http\ngx_http_cache.h,inactive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2484,262132,fail_time,3,ngx_http_file_cache_s.fail_time,,http\ngx_http_cache.h,fail_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2485,262133,files,3,ngx_http_file_cache_s.files,,http\ngx_http_cache.h,files,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2486,262134,loader_files,3,ngx_http_file_cache_s.loader_files,,http\ngx_http_cache.h,loader_files,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2487,262135,last,3,ngx_http_file_cache_s.last,,http\ngx_http_cache.h,last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2488,262136,loader_sleep,3,ngx_http_file_cache_s.loader_sleep,,http\ngx_http_cache.h,loader_sleep,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2489,262137,loader_threshold,3,ngx_http_file_cache_s.loader_threshold,,http\ngx_http_cache.h,loader_threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2490,262138,manager_files,3,ngx_http_file_cache_s.manager_files,,http\ngx_http_cache.h,manager_files,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2491,262139,manager_sleep,3,ngx_http_file_cache_s.manager_sleep,,http\ngx_http_cache.h,manager_sleep,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2492,262140,manager_threshold,3,ngx_http_file_cache_s.manager_threshold,,http\ngx_http_cache.h,manager_threshold,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2493,262141,shm_zone,3,ngx_http_file_cache_s.shm_zone,,http\ngx_http_cache.h,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2494,262142,use_temp_path,3,ngx_http_file_cache_s.use_temp_path,,http\ngx_http_cache.h,use_temp_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2495,262225,main_conf,3,ngx_http_conf_ctx_t.main_conf,,http\ngx_http_config.h,**main_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2496,262226,srv_conf,3,ngx_http_conf_ctx_t.srv_conf,,http\ngx_http_config.h,**srv_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2497,262227,loc_conf,3,ngx_http_conf_ctx_t.loc_conf,,http\ngx_http_config.h,**loc_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2498,262288,bufs,3,ngx_http_copy_filter_conf_t.bufs,,http\ngx_http_copy_filter_module.c,bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2499,262634,name,3,ngx_http_method_name_t.name,,http\ngx_http_core_module.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2500,262635,method,3,ngx_http_method_name_t.method,,http\ngx_http_core_module.c,method,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2501,274431,sockaddr,3,ngx_http_listen_opt_t.sockaddr,,http\ngx_http_core_module.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2502,274432,socklen,3,ngx_http_listen_opt_t.socklen,,http\ngx_http_core_module.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2503,274433,addr_text,3,ngx_http_listen_opt_t.addr_text,,http\ngx_http_core_module.h,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2504,274434,set,3,ngx_http_listen_opt_t.set,,http\ngx_http_core_module.h,set:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2505,274435,default_server,3,ngx_http_listen_opt_t.default_server,,http\ngx_http_core_module.h,default_server:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2506,274436,bind,3,ngx_http_listen_opt_t.bind,,http\ngx_http_core_module.h,bind:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2507,274437,wildcard,3,ngx_http_listen_opt_t.wildcard,,http\ngx_http_core_module.h,wildcard:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2508,274438,ssl,3,ngx_http_listen_opt_t.ssl,,http\ngx_http_core_module.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2509,274439,http2,3,ngx_http_listen_opt_t.http2,,http\ngx_http_core_module.h,http2:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2510,274440,ipv6only,3,ngx_http_listen_opt_t.ipv6only,,http\ngx_http_core_module.h,ipv6only:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2511,274441,deferred_accept,3,ngx_http_listen_opt_t.deferred_accept,,http\ngx_http_core_module.h,deferred_accept:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2512,274442,reuseport,3,ngx_http_listen_opt_t.reuseport,,http\ngx_http_core_module.h,reuseport:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2513,274443,so_keepalive,3,ngx_http_listen_opt_t.so_keepalive,,http\ngx_http_core_module.h,so_keepalive:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2514,274444,proxy_protocol,3,ngx_http_listen_opt_t.proxy_protocol,,http\ngx_http_core_module.h,proxy_protocol:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2515,274445,backlog,3,ngx_http_listen_opt_t.backlog,,http\ngx_http_core_module.h,backlog,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2516,274446,rcvbuf,3,ngx_http_listen_opt_t.rcvbuf,,http\ngx_http_core_module.h,rcvbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2517,274447,sndbuf,3,ngx_http_listen_opt_t.sndbuf,,http\ngx_http_core_module.h,sndbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2518,274448,setfib,3,ngx_http_listen_opt_t.setfib,,http\ngx_http_core_module.h,setfib,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2519,274449,fastopen,3,ngx_http_listen_opt_t.fastopen,,http\ngx_http_core_module.h,fastopen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2520,274450,tcp_keepidle,3,ngx_http_listen_opt_t.tcp_keepidle,,http\ngx_http_core_module.h,tcp_keepidle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2521,274451,tcp_keepintvl,3,ngx_http_listen_opt_t.tcp_keepintvl,,http\ngx_http_core_module.h,tcp_keepintvl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2522,274452,tcp_keepcnt,3,ngx_http_listen_opt_t.tcp_keepcnt,,http\ngx_http_core_module.h,tcp_keepcnt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2523,274453,accept_filter,3,ngx_http_listen_opt_t.accept_filter,,http\ngx_http_core_module.h,*accept_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2524,274456,NGX_HTTP_POST_READ_PHASE,3,ngx_http_phases.NGX_HTTP_POST_READ_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_POST_READ_PHASE = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2525,274457,NGX_HTTP_SERVER_REWRITE_PHASE,3,ngx_http_phases.NGX_HTTP_SERVER_REWRITE_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_SERVER_REWRITE_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2526,274458,NGX_HTTP_FIND_CONFIG_PHASE,3,ngx_http_phases.NGX_HTTP_FIND_CONFIG_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_FIND_CONFIG_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2527,274459,NGX_HTTP_REWRITE_PHASE,3,ngx_http_phases.NGX_HTTP_REWRITE_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_REWRITE_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2528,274460,NGX_HTTP_POST_REWRITE_PHASE,3,ngx_http_phases.NGX_HTTP_POST_REWRITE_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_POST_REWRITE_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2529,274461,NGX_HTTP_PREACCESS_PHASE,3,ngx_http_phases.NGX_HTTP_PREACCESS_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_PREACCESS_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2530,274462,NGX_HTTP_ACCESS_PHASE,3,ngx_http_phases.NGX_HTTP_ACCESS_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_ACCESS_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2531,274463,NGX_HTTP_POST_ACCESS_PHASE,3,ngx_http_phases.NGX_HTTP_POST_ACCESS_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_POST_ACCESS_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2532,274464,NGX_HTTP_PRECONTENT_PHASE,3,ngx_http_phases.NGX_HTTP_PRECONTENT_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_PRECONTENT_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2533,274465,NGX_HTTP_CONTENT_PHASE,3,ngx_http_phases.NGX_HTTP_CONTENT_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_CONTENT_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2534,274466,NGX_HTTP_LOG_PHASE,3,ngx_http_phases.NGX_HTTP_LOG_PHASE,,http\ngx_http_core_module.h,NGX_HTTP_LOG_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2535,274484,checker,3,ngx_http_phase_handler_s.checker,,http\ngx_http_core_module.h,checker,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2536,274485,handler,3,ngx_http_phase_handler_s.handler,,http\ngx_http_core_module.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2537,274486,next,3,ngx_http_phase_handler_s.next,,http\ngx_http_core_module.h,next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2538,274488,handlers,3,ngx_http_phase_engine_t.handlers,,http\ngx_http_core_module.h,*handlers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2539,274489,server_rewrite_index,3,ngx_http_phase_engine_t.server_rewrite_index,,http\ngx_http_core_module.h,server_rewrite_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2540,274490,location_rewrite_index,3,ngx_http_phase_engine_t.location_rewrite_index,,http\ngx_http_core_module.h,location_rewrite_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2541,274493,handlers,3,ngx_http_phase_t.handlers,,http\ngx_http_core_module.h,handlers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2542,274496,servers,3,ngx_http_core_main_conf_t.servers,,http\ngx_http_core_module.h,servers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2543,274497,phase_engine,3,ngx_http_core_main_conf_t.phase_engine,,http\ngx_http_core_module.h,phase_engine,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2544,274498,headers_in_hash,3,ngx_http_core_main_conf_t.headers_in_hash,,http\ngx_http_core_module.h,headers_in_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2545,274499,variables_hash,3,ngx_http_core_main_conf_t.variables_hash,,http\ngx_http_core_module.h,variables_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2546,274500,variables,3,ngx_http_core_main_conf_t.variables,,http\ngx_http_core_module.h,variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
2547,274501,prefix_variables,3,ngx_http_core_main_conf_t.prefix_variables,,http\ngx_http_core_module.h,prefix_variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
2548,274502,ncaptures,3,ngx_http_core_main_conf_t.ncaptures,,http\ngx_http_core_module.h,ncaptures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2549,274503,server_names_hash_max_size,3,ngx_http_core_main_conf_t.server_names_hash_max_size,,http\ngx_http_core_module.h,server_names_hash_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2550,274504,server_names_hash_bucket_size,3,ngx_http_core_main_conf_t.server_names_hash_bucket_size,,http\ngx_http_core_module.h,server_names_hash_bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2551,274505,variables_hash_max_size,3,ngx_http_core_main_conf_t.variables_hash_max_size,,http\ngx_http_core_module.h,variables_hash_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2552,274506,variables_hash_bucket_size,3,ngx_http_core_main_conf_t.variables_hash_bucket_size,,http\ngx_http_core_module.h,variables_hash_bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2553,274507,variables_keys,3,ngx_http_core_main_conf_t.variables_keys,,http\ngx_http_core_module.h,*variables_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,14,0,1,1,0,0,,0,0,0,0,0,
2554,274508,ports,3,ngx_http_core_main_conf_t.ports,,http\ngx_http_core_module.h,*ports,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2555,274509,phases,3,ngx_http_core_main_conf_t.phases,,http\ngx_http_core_module.h,phases[NGX_HTTP_LOG_PHASE + 1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2556,274520,server_names,3,ngx_http_core_srv_conf_t.server_names,,http\ngx_http_core_module.h,server_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2557,274521,ctx,3,ngx_http_core_srv_conf_t.ctx,,http\ngx_http_core_module.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2558,274522,file_name,3,ngx_http_core_srv_conf_t.file_name,,http\ngx_http_core_module.h,*file_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2559,274523,line,3,ngx_http_core_srv_conf_t.line,,http\ngx_http_core_module.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2560,274524,server_name,3,ngx_http_core_srv_conf_t.server_name,,http\ngx_http_core_module.h,server_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2561,274525,connection_pool_size,3,ngx_http_core_srv_conf_t.connection_pool_size,,http\ngx_http_core_module.h,connection_pool_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2562,274526,request_pool_size,3,ngx_http_core_srv_conf_t.request_pool_size,,http\ngx_http_core_module.h,request_pool_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2563,274527,client_header_buffer_size,3,ngx_http_core_srv_conf_t.client_header_buffer_size,,http\ngx_http_core_module.h,client_header_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2564,274528,large_client_header_buffers,3,ngx_http_core_srv_conf_t.large_client_header_buffers,,http\ngx_http_core_module.h,large_client_header_buffers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2565,274529,client_header_timeout,3,ngx_http_core_srv_conf_t.client_header_timeout,,http\ngx_http_core_module.h,client_header_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2566,274530,ignore_invalid_headers,3,ngx_http_core_srv_conf_t.ignore_invalid_headers,,http\ngx_http_core_module.h,ignore_invalid_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2567,274531,merge_slashes,3,ngx_http_core_srv_conf_t.merge_slashes,,http\ngx_http_core_module.h,merge_slashes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2568,274532,underscores_in_headers,3,ngx_http_core_srv_conf_t.underscores_in_headers,,http\ngx_http_core_module.h,underscores_in_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2569,274533,listen,3,ngx_http_core_srv_conf_t.listen,,http\ngx_http_core_module.h,listen:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2570,274534,captures,3,ngx_http_core_srv_conf_t.captures,,http\ngx_http_core_module.h,captures:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2571,274535,named_locations,3,ngx_http_core_srv_conf_t.named_locations,,http\ngx_http_core_module.h,**named_locations,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2572,274538,regex,3,ngx_http_server_name_t.regex,,http\ngx_http_core_module.h,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2573,274539,server,3,ngx_http_server_name_t.server,,http\ngx_http_core_module.h,*server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2574,274540,name,3,ngx_http_server_name_t.name,,http\ngx_http_core_module.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2575,274543,names,3,ngx_http_virtual_names_t.names,,http\ngx_http_core_module.h,names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2576,274544,nregex,3,ngx_http_virtual_names_t.nregex,,http\ngx_http_core_module.h,nregex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2577,274545,regex,3,ngx_http_virtual_names_t.regex,,http\ngx_http_core_module.h,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2578,274548,default_server,3,ngx_http_addr_conf_s.default_server,,http\ngx_http_core_module.h,*default_server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2579,274549,virtual_names,3,ngx_http_addr_conf_s.virtual_names,,http\ngx_http_core_module.h,*virtual_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2580,274550,ssl,3,ngx_http_addr_conf_s.ssl,,http\ngx_http_core_module.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2581,274551,http2,3,ngx_http_addr_conf_s.http2,,http\ngx_http_core_module.h,http2:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2582,274552,proxy_protocol,3,ngx_http_addr_conf_s.proxy_protocol,,http\ngx_http_core_module.h,proxy_protocol:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2583,274554,addr,3,ngx_http_in_addr_t.addr,,http\ngx_http_core_module.h,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2584,274555,conf,3,ngx_http_in_addr_t.conf,,http\ngx_http_core_module.h,conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2585,274558,addrs,3,ngx_http_port_t.addrs,,http\ngx_http_core_module.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2586,274559,naddrs,3,ngx_http_port_t.naddrs,,http\ngx_http_core_module.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2587,274562,family,3,ngx_http_conf_port_t.family,,http\ngx_http_core_module.h,family,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2588,274563,port,3,ngx_http_conf_port_t.port,,http\ngx_http_core_module.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2589,274564,addrs,3,ngx_http_conf_port_t.addrs,,http\ngx_http_core_module.h,addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2590,274567,opt,3,ngx_http_conf_addr_t.opt,,http\ngx_http_core_module.h,opt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2591,274568,hash,3,ngx_http_conf_addr_t.hash,,http\ngx_http_core_module.h,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2592,274569,wc_head,3,ngx_http_conf_addr_t.wc_head,,http\ngx_http_core_module.h,*wc_head,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2593,274570,wc_tail,3,ngx_http_conf_addr_t.wc_tail,,http\ngx_http_core_module.h,*wc_tail,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2594,274571,nregex,3,ngx_http_conf_addr_t.nregex,,http\ngx_http_core_module.h,nregex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2595,274572,regex,3,ngx_http_conf_addr_t.regex,,http\ngx_http_core_module.h,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2596,274573,default_server,3,ngx_http_conf_addr_t.default_server,,http\ngx_http_core_module.h,*default_server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2597,274574,servers,3,ngx_http_conf_addr_t.servers,,http\ngx_http_core_module.h,servers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2598,274577,status,3,ngx_http_err_page_t.status,,http\ngx_http_core_module.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2599,274578,overwrite,3,ngx_http_err_page_t.overwrite,,http\ngx_http_core_module.h,overwrite,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2600,274579,value,3,ngx_http_err_page_t.value,,http\ngx_http_core_module.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2601,274580,args,3,ngx_http_err_page_t.args,,http\ngx_http_core_module.h,args,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2602,274583,name,3,ngx_http_core_loc_conf_s.name,,http\ngx_http_core_module.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2603,274584,escaped_name,3,ngx_http_core_loc_conf_s.escaped_name,,http\ngx_http_core_module.h,escaped_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2604,274585,regex,3,ngx_http_core_loc_conf_s.regex,,http\ngx_http_core_module.h,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2605,274586,noname,3,ngx_http_core_loc_conf_s.noname,,http\ngx_http_core_module.h,noname:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2606,274587,lmt_excpt,3,ngx_http_core_loc_conf_s.lmt_excpt,,http\ngx_http_core_module.h,lmt_excpt:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2607,274588,named,3,ngx_http_core_loc_conf_s.named,,http\ngx_http_core_module.h,named:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2608,274589,exact_match,3,ngx_http_core_loc_conf_s.exact_match,,http\ngx_http_core_module.h,exact_match:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2609,274590,noregex,3,ngx_http_core_loc_conf_s.noregex,,http\ngx_http_core_module.h,noregex:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2610,274591,auto_redirect,3,ngx_http_core_loc_conf_s.auto_redirect,,http\ngx_http_core_module.h,auto_redirect:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2611,274592,gzip_disable_msie6,3,ngx_http_core_loc_conf_s.gzip_disable_msie6,,http\ngx_http_core_module.h,gzip_disable_msie6:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2612,274593,gzip_disable_degradation,3,ngx_http_core_loc_conf_s.gzip_disable_degradation,,http\ngx_http_core_module.h,gzip_disable_degradation:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2613,274594,static_locations,3,ngx_http_core_loc_conf_s.static_locations,,http\ngx_http_core_module.h,*static_locations,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2614,274595,regex_locations,3,ngx_http_core_loc_conf_s.regex_locations,,http\ngx_http_core_module.h,**regex_locations,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2615,274596,loc_conf,3,ngx_http_core_loc_conf_s.loc_conf,,http\ngx_http_core_module.h,**loc_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2616,274597,limit_except,3,ngx_http_core_loc_conf_s.limit_except,,http\ngx_http_core_module.h,limit_except,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2617,274598,limit_except_loc_conf,3,ngx_http_core_loc_conf_s.limit_except_loc_conf,,http\ngx_http_core_module.h,**limit_except_loc_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2618,274599,handler,3,ngx_http_core_loc_conf_s.handler,,http\ngx_http_core_module.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2619,274600,alias,3,ngx_http_core_loc_conf_s.alias,,http\ngx_http_core_module.h,alias,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2620,274601,root,3,ngx_http_core_loc_conf_s.root,,http\ngx_http_core_module.h,root,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2621,274602,post_action,3,ngx_http_core_loc_conf_s.post_action,,http\ngx_http_core_module.h,post_action,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2622,274603,root_lengths,3,ngx_http_core_loc_conf_s.root_lengths,,http\ngx_http_core_module.h,*root_lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2623,274604,root_values,3,ngx_http_core_loc_conf_s.root_values,,http\ngx_http_core_module.h,*root_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2624,274605,types,3,ngx_http_core_loc_conf_s.types,,http\ngx_http_core_module.h,*types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2625,274606,types_hash,3,ngx_http_core_loc_conf_s.types_hash,,http\ngx_http_core_module.h,types_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2626,274607,default_type,3,ngx_http_core_loc_conf_s.default_type,,http\ngx_http_core_module.h,default_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2627,274608,client_max_body_size,3,ngx_http_core_loc_conf_s.client_max_body_size,,http\ngx_http_core_module.h,client_max_body_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2628,274609,directio,3,ngx_http_core_loc_conf_s.directio,,http\ngx_http_core_module.h,directio,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2629,274610,directio_alignment,3,ngx_http_core_loc_conf_s.directio_alignment,,http\ngx_http_core_module.h,directio_alignment,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2630,274611,client_body_buffer_size,3,ngx_http_core_loc_conf_s.client_body_buffer_size,,http\ngx_http_core_module.h,client_body_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2631,274612,send_lowat,3,ngx_http_core_loc_conf_s.send_lowat,,http\ngx_http_core_module.h,send_lowat,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2632,274613,postpone_output,3,ngx_http_core_loc_conf_s.postpone_output,,http\ngx_http_core_module.h,postpone_output,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2633,274614,sendfile_max_chunk,3,ngx_http_core_loc_conf_s.sendfile_max_chunk,,http\ngx_http_core_module.h,sendfile_max_chunk,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2634,274615,read_ahead,3,ngx_http_core_loc_conf_s.read_ahead,,http\ngx_http_core_module.h,read_ahead,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2635,274616,subrequest_output_buffer_size,3,ngx_http_core_loc_conf_s.subrequest_output_buffer_size,,http\ngx_http_core_module.h,subrequest_output_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2636,274617,limit_rate,3,ngx_http_core_loc_conf_s.limit_rate,,http\ngx_http_core_module.h,*limit_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2637,274618,limit_rate_after,3,ngx_http_core_loc_conf_s.limit_rate_after,,http\ngx_http_core_module.h,*limit_rate_after,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2638,274619,client_body_timeout,3,ngx_http_core_loc_conf_s.client_body_timeout,,http\ngx_http_core_module.h,client_body_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2639,274620,send_timeout,3,ngx_http_core_loc_conf_s.send_timeout,,http\ngx_http_core_module.h,send_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2640,274621,keepalive_time,3,ngx_http_core_loc_conf_s.keepalive_time,,http\ngx_http_core_module.h,keepalive_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2641,274622,keepalive_timeout,3,ngx_http_core_loc_conf_s.keepalive_timeout,,http\ngx_http_core_module.h,keepalive_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2642,274623,lingering_time,3,ngx_http_core_loc_conf_s.lingering_time,,http\ngx_http_core_module.h,lingering_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2643,274624,lingering_timeout,3,ngx_http_core_loc_conf_s.lingering_timeout,,http\ngx_http_core_module.h,lingering_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2644,274625,resolver_timeout,3,ngx_http_core_loc_conf_s.resolver_timeout,,http\ngx_http_core_module.h,resolver_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2645,274626,auth_delay,3,ngx_http_core_loc_conf_s.auth_delay,,http\ngx_http_core_module.h,auth_delay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2646,274627,resolver,3,ngx_http_core_loc_conf_s.resolver,,http\ngx_http_core_module.h,*resolver,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2647,274628,keepalive_header,3,ngx_http_core_loc_conf_s.keepalive_header,,http\ngx_http_core_module.h,keepalive_header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2648,274629,keepalive_requests,3,ngx_http_core_loc_conf_s.keepalive_requests,,http\ngx_http_core_module.h,keepalive_requests,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2649,274630,keepalive_disable,3,ngx_http_core_loc_conf_s.keepalive_disable,,http\ngx_http_core_module.h,keepalive_disable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2650,274631,satisfy,3,ngx_http_core_loc_conf_s.satisfy,,http\ngx_http_core_module.h,satisfy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2651,274632,lingering_close,3,ngx_http_core_loc_conf_s.lingering_close,,http\ngx_http_core_module.h,lingering_close,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2652,274633,if_modified_since,3,ngx_http_core_loc_conf_s.if_modified_since,,http\ngx_http_core_module.h,if_modified_since,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2653,274634,max_ranges,3,ngx_http_core_loc_conf_s.max_ranges,,http\ngx_http_core_module.h,max_ranges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2654,274635,client_body_in_file_only,3,ngx_http_core_loc_conf_s.client_body_in_file_only,,http\ngx_http_core_module.h,client_body_in_file_only,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2655,274636,client_body_in_single_buffer,3,ngx_http_core_loc_conf_s.client_body_in_single_buffer,,http\ngx_http_core_module.h,client_body_in_single_buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2656,274637,internal,3,ngx_http_core_loc_conf_s.internal,,http\ngx_http_core_module.h,internal,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2657,274638,sendfile,3,ngx_http_core_loc_conf_s.sendfile,,http\ngx_http_core_module.h,sendfile,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2658,274639,aio,3,ngx_http_core_loc_conf_s.aio,,http\ngx_http_core_module.h,aio,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2659,274640,aio_write,3,ngx_http_core_loc_conf_s.aio_write,,http\ngx_http_core_module.h,aio_write,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2660,274641,tcp_nopush,3,ngx_http_core_loc_conf_s.tcp_nopush,,http\ngx_http_core_module.h,tcp_nopush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2661,274642,tcp_nodelay,3,ngx_http_core_loc_conf_s.tcp_nodelay,,http\ngx_http_core_module.h,tcp_nodelay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2662,274643,reset_timedout_connection,3,ngx_http_core_loc_conf_s.reset_timedout_connection,,http\ngx_http_core_module.h,reset_timedout_connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2663,274644,absolute_redirect,3,ngx_http_core_loc_conf_s.absolute_redirect,,http\ngx_http_core_module.h,absolute_redirect,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2664,274645,server_name_in_redirect,3,ngx_http_core_loc_conf_s.server_name_in_redirect,,http\ngx_http_core_module.h,server_name_in_redirect,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2665,274646,port_in_redirect,3,ngx_http_core_loc_conf_s.port_in_redirect,,http\ngx_http_core_module.h,port_in_redirect,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2666,274647,msie_padding,3,ngx_http_core_loc_conf_s.msie_padding,,http\ngx_http_core_module.h,msie_padding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2667,274648,msie_refresh,3,ngx_http_core_loc_conf_s.msie_refresh,,http\ngx_http_core_module.h,msie_refresh,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2668,274649,log_not_found,3,ngx_http_core_loc_conf_s.log_not_found,,http\ngx_http_core_module.h,log_not_found,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2669,274650,log_subrequest,3,ngx_http_core_loc_conf_s.log_subrequest,,http\ngx_http_core_module.h,log_subrequest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2670,274651,recursive_error_pages,3,ngx_http_core_loc_conf_s.recursive_error_pages,,http\ngx_http_core_module.h,recursive_error_pages,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2671,274652,server_tokens,3,ngx_http_core_loc_conf_s.server_tokens,,http\ngx_http_core_module.h,server_tokens,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2672,274653,chunked_transfer_encoding,3,ngx_http_core_loc_conf_s.chunked_transfer_encoding,,http\ngx_http_core_module.h,chunked_transfer_encoding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2673,274654,etag,3,ngx_http_core_loc_conf_s.etag,,http\ngx_http_core_module.h,etag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2674,274655,gzip_vary,3,ngx_http_core_loc_conf_s.gzip_vary,,http\ngx_http_core_module.h,gzip_vary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2675,274656,gzip_http_version,3,ngx_http_core_loc_conf_s.gzip_http_version,,http\ngx_http_core_module.h,gzip_http_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2676,274657,gzip_proxied,3,ngx_http_core_loc_conf_s.gzip_proxied,,http\ngx_http_core_module.h,gzip_proxied,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2677,274658,gzip_disable,3,ngx_http_core_loc_conf_s.gzip_disable,,http\ngx_http_core_module.h,*gzip_disable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2678,274659,thread_pool,3,ngx_http_core_loc_conf_s.thread_pool,,http\ngx_http_core_module.h,*thread_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2679,274660,thread_pool_value,3,ngx_http_core_loc_conf_s.thread_pool_value,,http\ngx_http_core_module.h,*thread_pool_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2680,274661,disable_symlinks,3,ngx_http_core_loc_conf_s.disable_symlinks,,http\ngx_http_core_module.h,disable_symlinks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2681,274662,disable_symlinks_from,3,ngx_http_core_loc_conf_s.disable_symlinks_from,,http\ngx_http_core_module.h,*disable_symlinks_from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2682,274663,error_pages,3,ngx_http_core_loc_conf_s.error_pages,,http\ngx_http_core_module.h,*error_pages,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2683,274664,client_body_temp_path,3,ngx_http_core_loc_conf_s.client_body_temp_path,,http\ngx_http_core_module.h,*client_body_temp_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2684,274665,open_file_cache,3,ngx_http_core_loc_conf_s.open_file_cache,,http\ngx_http_core_module.h,*open_file_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2685,274666,open_file_cache_valid,3,ngx_http_core_loc_conf_s.open_file_cache_valid,,http\ngx_http_core_module.h,open_file_cache_valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2686,274667,open_file_cache_min_uses,3,ngx_http_core_loc_conf_s.open_file_cache_min_uses,,http\ngx_http_core_module.h,open_file_cache_min_uses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2687,274668,open_file_cache_errors,3,ngx_http_core_loc_conf_s.open_file_cache_errors,,http\ngx_http_core_module.h,open_file_cache_errors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2688,274669,open_file_cache_events,3,ngx_http_core_loc_conf_s.open_file_cache_events,,http\ngx_http_core_module.h,open_file_cache_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2689,274670,error_log,3,ngx_http_core_loc_conf_s.error_log,,http\ngx_http_core_module.h,*error_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2690,274671,types_hash_max_size,3,ngx_http_core_loc_conf_s.types_hash_max_size,,http\ngx_http_core_module.h,types_hash_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2691,274672,types_hash_bucket_size,3,ngx_http_core_loc_conf_s.types_hash_bucket_size,,http\ngx_http_core_module.h,types_hash_bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2692,274673,locations,3,ngx_http_core_loc_conf_s.locations,,http\ngx_http_core_module.h,*locations,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2693,274674,prev_location,3,ngx_http_core_loc_conf_s.prev_location,,http\ngx_http_core_module.h,*prev_location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2694,274676,queue,3,ngx_http_location_queue_t.queue,,http\ngx_http_core_module.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2695,274677,exact,3,ngx_http_location_queue_t.exact,,http\ngx_http_core_module.h,*exact,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2696,274678,inclusive,3,ngx_http_location_queue_t.inclusive,,http\ngx_http_core_module.h,*inclusive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2697,274679,name,3,ngx_http_location_queue_t.name,,http\ngx_http_core_module.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2698,274680,file_name,3,ngx_http_location_queue_t.file_name,,http\ngx_http_core_module.h,*file_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2699,274681,line,3,ngx_http_location_queue_t.line,,http\ngx_http_core_module.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2700,274682,list,3,ngx_http_location_queue_t.list,,http\ngx_http_core_module.h,list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2701,274685,left,3,ngx_http_location_tree_node_s.left,,http\ngx_http_core_module.h,*left,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2702,274686,right,3,ngx_http_location_tree_node_s.right,,http\ngx_http_core_module.h,*right,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2703,274687,tree,3,ngx_http_location_tree_node_s.tree,,http\ngx_http_core_module.h,*tree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2704,274688,exact,3,ngx_http_location_tree_node_s.exact,,http\ngx_http_core_module.h,*exact,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2705,274689,inclusive,3,ngx_http_location_tree_node_s.inclusive,,http\ngx_http_core_module.h,*inclusive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2706,274690,auto_redirect,3,ngx_http_location_tree_node_s.auto_redirect,,http\ngx_http_core_module.h,auto_redirect,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2707,274691,len,3,ngx_http_location_tree_node_s.len,,http\ngx_http_core_module.h,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2708,274692,name,3,ngx_http_location_tree_node_s.name,,http\ngx_http_core_module.h,name[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2709,299269,NGX_HTTP_INITING_REQUEST_STATE,3,ngx_http_state_e.NGX_HTTP_INITING_REQUEST_STATE,,http\ngx_http_request.h,NGX_HTTP_INITING_REQUEST_STATE = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2710,299270,NGX_HTTP_READING_REQUEST_STATE,3,ngx_http_state_e.NGX_HTTP_READING_REQUEST_STATE,,http\ngx_http_request.h,NGX_HTTP_READING_REQUEST_STATE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2711,299271,NGX_HTTP_PROCESS_REQUEST_STATE,3,ngx_http_state_e.NGX_HTTP_PROCESS_REQUEST_STATE,,http\ngx_http_request.h,NGX_HTTP_PROCESS_REQUEST_STATE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2712,299272,NGX_HTTP_CONNECT_UPSTREAM_STATE,3,ngx_http_state_e.NGX_HTTP_CONNECT_UPSTREAM_STATE,,http\ngx_http_request.h,NGX_HTTP_CONNECT_UPSTREAM_STATE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2713,299273,NGX_HTTP_WRITING_UPSTREAM_STATE,3,ngx_http_state_e.NGX_HTTP_WRITING_UPSTREAM_STATE,,http\ngx_http_request.h,NGX_HTTP_WRITING_UPSTREAM_STATE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2714,299274,NGX_HTTP_READING_UPSTREAM_STATE,3,ngx_http_state_e.NGX_HTTP_READING_UPSTREAM_STATE,,http\ngx_http_request.h,NGX_HTTP_READING_UPSTREAM_STATE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2715,299275,NGX_HTTP_WRITING_REQUEST_STATE,3,ngx_http_state_e.NGX_HTTP_WRITING_REQUEST_STATE,,http\ngx_http_request.h,NGX_HTTP_WRITING_REQUEST_STATE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2716,299276,NGX_HTTP_LINGERING_CLOSE_STATE,3,ngx_http_state_e.NGX_HTTP_LINGERING_CLOSE_STATE,,http\ngx_http_request.h,NGX_HTTP_LINGERING_CLOSE_STATE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2717,299277,NGX_HTTP_KEEPALIVE_STATE,3,ngx_http_state_e.NGX_HTTP_KEEPALIVE_STATE,,http\ngx_http_request.h,NGX_HTTP_KEEPALIVE_STATE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2718,299287,name,3,ngx_http_header_t.name,,http\ngx_http_request.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2719,299288,offset,3,ngx_http_header_t.offset,,http\ngx_http_request.h,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2720,299289,handler,3,ngx_http_header_t.handler,,http\ngx_http_request.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2721,299292,name,3,ngx_http_header_out_t.name,,http\ngx_http_request.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2722,299293,offset,3,ngx_http_header_out_t.offset,,http\ngx_http_request.h,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2723,299296,headers,3,ngx_http_headers_in_t.headers,,http\ngx_http_request.h,headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2724,299297,host,3,ngx_http_headers_in_t.host,,http\ngx_http_request.h,*host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2725,299298,connection,3,ngx_http_headers_in_t.connection,,http\ngx_http_request.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2726,299299,if_modified_since,3,ngx_http_headers_in_t.if_modified_since,,http\ngx_http_request.h,*if_modified_since,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2727,299300,if_unmodified_since,3,ngx_http_headers_in_t.if_unmodified_since,,http\ngx_http_request.h,*if_unmodified_since,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2728,299301,if_match,3,ngx_http_headers_in_t.if_match,,http\ngx_http_request.h,*if_match,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2729,299302,if_none_match,3,ngx_http_headers_in_t.if_none_match,,http\ngx_http_request.h,*if_none_match,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2730,299303,user_agent,3,ngx_http_headers_in_t.user_agent,,http\ngx_http_request.h,*user_agent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2731,299304,referer,3,ngx_http_headers_in_t.referer,,http\ngx_http_request.h,*referer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2732,299305,content_length,3,ngx_http_headers_in_t.content_length,,http\ngx_http_request.h,*content_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2733,299306,content_range,3,ngx_http_headers_in_t.content_range,,http\ngx_http_request.h,*content_range,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2734,299307,content_type,3,ngx_http_headers_in_t.content_type,,http\ngx_http_request.h,*content_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2735,299308,range,3,ngx_http_headers_in_t.range,,http\ngx_http_request.h,*range,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2736,299309,if_range,3,ngx_http_headers_in_t.if_range,,http\ngx_http_request.h,*if_range,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2737,299310,transfer_encoding,3,ngx_http_headers_in_t.transfer_encoding,,http\ngx_http_request.h,*transfer_encoding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2738,299311,te,3,ngx_http_headers_in_t.te,,http\ngx_http_request.h,*te,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2739,299312,expect,3,ngx_http_headers_in_t.expect,,http\ngx_http_request.h,*expect,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2740,299313,upgrade,3,ngx_http_headers_in_t.upgrade,,http\ngx_http_request.h,*upgrade,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2741,299314,accept_encoding,3,ngx_http_headers_in_t.accept_encoding,,http\ngx_http_request.h,*accept_encoding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2742,299315,via,3,ngx_http_headers_in_t.via,,http\ngx_http_request.h,*via,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2743,299316,authorization,3,ngx_http_headers_in_t.authorization,,http\ngx_http_request.h,*authorization,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2744,299317,keep_alive,3,ngx_http_headers_in_t.keep_alive,,http\ngx_http_request.h,*keep_alive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2745,299318,x_forwarded_for,3,ngx_http_headers_in_t.x_forwarded_for,,http\ngx_http_request.h,x_forwarded_for,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2746,299319,x_real_ip,3,ngx_http_headers_in_t.x_real_ip,,http\ngx_http_request.h,*x_real_ip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2747,299320,accept,3,ngx_http_headers_in_t.accept,,http\ngx_http_request.h,*accept,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2748,299321,accept_language,3,ngx_http_headers_in_t.accept_language,,http\ngx_http_request.h,*accept_language,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2749,299322,depth,3,ngx_http_headers_in_t.depth,,http\ngx_http_request.h,*depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2750,299323,destination,3,ngx_http_headers_in_t.destination,,http\ngx_http_request.h,*destination,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2751,299324,overwrite,3,ngx_http_headers_in_t.overwrite,,http\ngx_http_request.h,*overwrite,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2752,299325,date,3,ngx_http_headers_in_t.date,,http\ngx_http_request.h,*date,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2753,299326,user,3,ngx_http_headers_in_t.user,,http\ngx_http_request.h,user,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2754,299327,passwd,3,ngx_http_headers_in_t.passwd,,http\ngx_http_request.h,passwd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2755,299328,cookies,3,ngx_http_headers_in_t.cookies,,http\ngx_http_request.h,cookies,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2756,299329,server,3,ngx_http_headers_in_t.server,,http\ngx_http_request.h,server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2757,299330,content_length_n,3,ngx_http_headers_in_t.content_length_n,,http\ngx_http_request.h,content_length_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2758,299331,keep_alive_n,3,ngx_http_headers_in_t.keep_alive_n,,http\ngx_http_request.h,keep_alive_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2759,299332,connection_type,3,ngx_http_headers_in_t.connection_type,,http\ngx_http_request.h,connection_type:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2760,299333,chunked,3,ngx_http_headers_in_t.chunked,,http\ngx_http_request.h,chunked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2761,299334,msie,3,ngx_http_headers_in_t.msie,,http\ngx_http_request.h,msie:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2762,299335,msie6,3,ngx_http_headers_in_t.msie6,,http\ngx_http_request.h,msie6:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2763,299336,opera,3,ngx_http_headers_in_t.opera,,http\ngx_http_request.h,opera:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2764,299337,gecko,3,ngx_http_headers_in_t.gecko,,http\ngx_http_request.h,gecko:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2765,299338,chrome,3,ngx_http_headers_in_t.chrome,,http\ngx_http_request.h,chrome:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2766,299339,safari,3,ngx_http_headers_in_t.safari,,http\ngx_http_request.h,safari:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2767,299340,konqueror,3,ngx_http_headers_in_t.konqueror,,http\ngx_http_request.h,konqueror:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2768,299343,headers,3,ngx_http_headers_out_t.headers,,http\ngx_http_request.h,headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2769,299344,trailers,3,ngx_http_headers_out_t.trailers,,http\ngx_http_request.h,trailers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2770,299345,status,3,ngx_http_headers_out_t.status,,http\ngx_http_request.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2771,299346,status_line,3,ngx_http_headers_out_t.status_line,,http\ngx_http_request.h,status_line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2772,299347,server,3,ngx_http_headers_out_t.server,,http\ngx_http_request.h,*server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2773,299348,date,3,ngx_http_headers_out_t.date,,http\ngx_http_request.h,*date,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2774,299349,content_length,3,ngx_http_headers_out_t.content_length,,http\ngx_http_request.h,*content_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2775,299350,content_encoding,3,ngx_http_headers_out_t.content_encoding,,http\ngx_http_request.h,*content_encoding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2776,299351,location,3,ngx_http_headers_out_t.location,,http\ngx_http_request.h,*location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2777,299352,refresh,3,ngx_http_headers_out_t.refresh,,http\ngx_http_request.h,*refresh,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2778,299353,last_modified,3,ngx_http_headers_out_t.last_modified,,http\ngx_http_request.h,*last_modified,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2779,299354,content_range,3,ngx_http_headers_out_t.content_range,,http\ngx_http_request.h,*content_range,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2780,299355,accept_ranges,3,ngx_http_headers_out_t.accept_ranges,,http\ngx_http_request.h,*accept_ranges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2781,299356,www_authenticate,3,ngx_http_headers_out_t.www_authenticate,,http\ngx_http_request.h,*www_authenticate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2782,299357,expires,3,ngx_http_headers_out_t.expires,,http\ngx_http_request.h,*expires,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2783,299358,etag,3,ngx_http_headers_out_t.etag,,http\ngx_http_request.h,*etag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2784,299359,override_charset,3,ngx_http_headers_out_t.override_charset,,http\ngx_http_request.h,*override_charset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2785,299360,content_type_len,3,ngx_http_headers_out_t.content_type_len,,http\ngx_http_request.h,content_type_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2786,299361,content_type,3,ngx_http_headers_out_t.content_type,,http\ngx_http_request.h,content_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2787,299362,charset,3,ngx_http_headers_out_t.charset,,http\ngx_http_request.h,charset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2788,299363,content_type_lowcase,3,ngx_http_headers_out_t.content_type_lowcase,,http\ngx_http_request.h,*content_type_lowcase,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2789,299364,content_type_hash,3,ngx_http_headers_out_t.content_type_hash,,http\ngx_http_request.h,content_type_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2790,299365,cache_control,3,ngx_http_headers_out_t.cache_control,,http\ngx_http_request.h,cache_control,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2791,299366,link,3,ngx_http_headers_out_t.link,,http\ngx_http_request.h,link,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2792,299367,content_length_n,3,ngx_http_headers_out_t.content_length_n,,http\ngx_http_request.h,content_length_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2793,299368,content_offset,3,ngx_http_headers_out_t.content_offset,,http\ngx_http_request.h,content_offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2794,299369,date_time,3,ngx_http_headers_out_t.date_time,,http\ngx_http_request.h,date_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2795,299370,last_modified_time,3,ngx_http_headers_out_t.last_modified_time,,http\ngx_http_request.h,last_modified_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2796,299378,temp_file,3,ngx_http_request_body_t.temp_file,,http\ngx_http_request.h,*temp_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2797,299379,bufs,3,ngx_http_request_body_t.bufs,,http\ngx_http_request.h,*bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2798,299380,buf,3,ngx_http_request_body_t.buf,,http\ngx_http_request.h,*buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2799,299381,rest,3,ngx_http_request_body_t.rest,,http\ngx_http_request.h,rest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2800,299382,received,3,ngx_http_request_body_t.received,,http\ngx_http_request.h,received,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2801,299383,free,3,ngx_http_request_body_t.free,,http\ngx_http_request.h,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2802,299384,busy,3,ngx_http_request_body_t.busy,,http\ngx_http_request.h,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2803,299385,chunked,3,ngx_http_request_body_t.chunked,,http\ngx_http_request.h,*chunked,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2804,299386,post_handler,3,ngx_http_request_body_t.post_handler,,http\ngx_http_request.h,post_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2805,299391,addr_conf,3,ngx_http_connection_t.addr_conf,,http\ngx_http_request.h,*addr_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2806,299392,conf_ctx,3,ngx_http_connection_t.conf_ctx,,http\ngx_http_request.h,*conf_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2807,299393,ssl_servername,3,ngx_http_connection_t.ssl_servername,,http\ngx_http_request.h,*ssl_servername,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2808,299394,ssl_servername_regex,3,ngx_http_connection_t.ssl_servername_regex,,http\ngx_http_request.h,*ssl_servername_regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2809,299395,busy,3,ngx_http_connection_t.busy,,http\ngx_http_request.h,*busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2810,299396,nbusy,3,ngx_http_connection_t.nbusy,,http\ngx_http_request.h,nbusy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2811,299397,free,3,ngx_http_connection_t.free,,http\ngx_http_request.h,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2812,299398,ssl,3,ngx_http_connection_t.ssl,,http\ngx_http_request.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2813,299399,proxy_protocol,3,ngx_http_connection_t.proxy_protocol,,http\ngx_http_request.h,proxy_protocol:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2814,299409,handler,3,ngx_http_cleanup_s.handler,,http\ngx_http_request.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2815,299410,data,3,ngx_http_cleanup_s.data,,http\ngx_http_request.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2816,299411,next,3,ngx_http_cleanup_s.next,,http\ngx_http_request.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2817,299420,handler,3,ngx_http_post_subrequest_t.handler,,http\ngx_http_request.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2818,299421,data,3,ngx_http_post_subrequest_t.data,,http\ngx_http_request.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2819,299426,request,3,ngx_http_postponed_request_s.request,,http\ngx_http_request.h,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2820,299427,out,3,ngx_http_postponed_request_s.out,,http\ngx_http_request.h,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2821,299428,next,3,ngx_http_postponed_request_s.next,,http\ngx_http_request.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2822,299432,request,3,ngx_http_posted_request_s.request,,http\ngx_http_request.h,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2823,299433,next,3,ngx_http_posted_request_s.next,,http\ngx_http_request.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2824,299445,signature,3,ngx_http_request_s.signature,,http\ngx_http_request.h,signature,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2825,299446,connection,3,ngx_http_request_s.connection,,http\ngx_http_request.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2826,299447,ctx,3,ngx_http_request_s.ctx,,http\ngx_http_request.h,**ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2827,299448,main_conf,3,ngx_http_request_s.main_conf,,http\ngx_http_request.h,**main_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2828,299449,srv_conf,3,ngx_http_request_s.srv_conf,,http\ngx_http_request.h,**srv_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2829,299450,loc_conf,3,ngx_http_request_s.loc_conf,,http\ngx_http_request.h,**loc_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2830,299451,read_event_handler,3,ngx_http_request_s.read_event_handler,,http\ngx_http_request.h,read_event_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2831,299452,write_event_handler,3,ngx_http_request_s.write_event_handler,,http\ngx_http_request.h,write_event_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2832,299453,cache,3,ngx_http_request_s.cache,,http\ngx_http_request.h,*cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2833,299454,upstream,3,ngx_http_request_s.upstream,,http\ngx_http_request.h,*upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2834,299455,upstream_states,3,ngx_http_request_s.upstream_states,,http\ngx_http_request.h,*upstream_states,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2835,299456,pool,3,ngx_http_request_s.pool,,http\ngx_http_request.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2836,299457,header_in,3,ngx_http_request_s.header_in,,http\ngx_http_request.h,*header_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2837,299458,headers_in,3,ngx_http_request_s.headers_in,,http\ngx_http_request.h,headers_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2838,299459,headers_out,3,ngx_http_request_s.headers_out,,http\ngx_http_request.h,headers_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2839,299460,request_body,3,ngx_http_request_s.request_body,,http\ngx_http_request.h,*request_body,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2840,299461,lingering_time,3,ngx_http_request_s.lingering_time,,http\ngx_http_request.h,lingering_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2841,299462,start_sec,3,ngx_http_request_s.start_sec,,http\ngx_http_request.h,start_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2842,299463,start_msec,3,ngx_http_request_s.start_msec,,http\ngx_http_request.h,start_msec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2843,299464,method,3,ngx_http_request_s.method,,http\ngx_http_request.h,method,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2844,299465,http_version,3,ngx_http_request_s.http_version,,http\ngx_http_request.h,http_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2845,299466,request_line,3,ngx_http_request_s.request_line,,http\ngx_http_request.h,request_line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2846,299467,uri,3,ngx_http_request_s.uri,,http\ngx_http_request.h,uri,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2847,299468,args,3,ngx_http_request_s.args,,http\ngx_http_request.h,args,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2848,299469,exten,3,ngx_http_request_s.exten,,http\ngx_http_request.h,exten,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2849,299470,unparsed_uri,3,ngx_http_request_s.unparsed_uri,,http\ngx_http_request.h,unparsed_uri,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2850,299471,method_name,3,ngx_http_request_s.method_name,,http\ngx_http_request.h,method_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2851,299472,http_protocol,3,ngx_http_request_s.http_protocol,,http\ngx_http_request.h,http_protocol,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2852,299473,schema,3,ngx_http_request_s.schema,,http\ngx_http_request.h,schema,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2853,299474,out,3,ngx_http_request_s.out,,http\ngx_http_request.h,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2854,299475,main,3,ngx_http_request_s.main,,http\ngx_http_request.h,*main,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2855,299476,parent,3,ngx_http_request_s.parent,,http\ngx_http_request.h,*parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2856,299477,postponed,3,ngx_http_request_s.postponed,,http\ngx_http_request.h,*postponed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2857,299478,post_subrequest,3,ngx_http_request_s.post_subrequest,,http\ngx_http_request.h,*post_subrequest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2858,299479,posted_requests,3,ngx_http_request_s.posted_requests,,http\ngx_http_request.h,*posted_requests,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2859,299480,phase_handler,3,ngx_http_request_s.phase_handler,,http\ngx_http_request.h,phase_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2860,299481,content_handler,3,ngx_http_request_s.content_handler,,http\ngx_http_request.h,content_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2861,299482,access_code,3,ngx_http_request_s.access_code,,http\ngx_http_request.h,access_code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2862,299483,variables,3,ngx_http_request_s.variables,,http\ngx_http_request.h,*variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2863,299484,ncaptures,3,ngx_http_request_s.ncaptures,,http\ngx_http_request.h,ncaptures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2864,299485,captures,3,ngx_http_request_s.captures,,http\ngx_http_request.h,*captures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2865,299486,captures_data,3,ngx_http_request_s.captures_data,,http\ngx_http_request.h,*captures_data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2866,299487,limit_rate,3,ngx_http_request_s.limit_rate,,http\ngx_http_request.h,limit_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2867,299488,limit_rate_after,3,ngx_http_request_s.limit_rate_after,,http\ngx_http_request.h,limit_rate_after,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2868,299489,header_size,3,ngx_http_request_s.header_size,,http\ngx_http_request.h,header_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2869,299490,request_length,3,ngx_http_request_s.request_length,,http\ngx_http_request.h,request_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2870,299491,err_status,3,ngx_http_request_s.err_status,,http\ngx_http_request.h,err_status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2871,299492,http_connection,3,ngx_http_request_s.http_connection,,http\ngx_http_request.h,*http_connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2872,299493,stream,3,ngx_http_request_s.stream,,http\ngx_http_request.h,*stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2873,299494,log_handler,3,ngx_http_request_s.log_handler,,http\ngx_http_request.h,log_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2874,299495,cleanup,3,ngx_http_request_s.cleanup,,http\ngx_http_request.h,*cleanup,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2875,299496,count,3,ngx_http_request_s.count,,http\ngx_http_request.h,count:16,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2876,299497,subrequests,3,ngx_http_request_s.subrequests,,http\ngx_http_request.h,subrequests:8,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2877,299498,blocked,3,ngx_http_request_s.blocked,,http\ngx_http_request.h,blocked:8,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2878,299499,aio,3,ngx_http_request_s.aio,,http\ngx_http_request.h,aio:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2879,299500,http_state,3,ngx_http_request_s.http_state,,http\ngx_http_request.h,http_state:4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2880,299501,complex_uri,3,ngx_http_request_s.complex_uri,,http\ngx_http_request.h,complex_uri:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2881,299502,quoted_uri,3,ngx_http_request_s.quoted_uri,,http\ngx_http_request.h,quoted_uri:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2882,299503,plus_in_uri,3,ngx_http_request_s.plus_in_uri,,http\ngx_http_request.h,plus_in_uri:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2883,299504,empty_path_in_uri,3,ngx_http_request_s.empty_path_in_uri,,http\ngx_http_request.h,empty_path_in_uri:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2884,299505,invalid_header,3,ngx_http_request_s.invalid_header,,http\ngx_http_request.h,invalid_header:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2885,299506,add_uri_to_alias,3,ngx_http_request_s.add_uri_to_alias,,http\ngx_http_request.h,add_uri_to_alias:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2886,299507,valid_location,3,ngx_http_request_s.valid_location,,http\ngx_http_request.h,valid_location:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2887,299508,valid_unparsed_uri,3,ngx_http_request_s.valid_unparsed_uri,,http\ngx_http_request.h,valid_unparsed_uri:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2888,299509,uri_changed,3,ngx_http_request_s.uri_changed,,http\ngx_http_request.h,uri_changed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2889,299510,uri_changes,3,ngx_http_request_s.uri_changes,,http\ngx_http_request.h,uri_changes:4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2890,299511,request_body_in_single_buf,3,ngx_http_request_s.request_body_in_single_buf,,http\ngx_http_request.h,request_body_in_single_buf:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2891,299512,request_body_in_file_only,3,ngx_http_request_s.request_body_in_file_only,,http\ngx_http_request.h,request_body_in_file_only:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2892,299513,request_body_in_persistent_file,3,ngx_http_request_s.request_body_in_persistent_file,,http\ngx_http_request.h,request_body_in_persistent_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2893,299514,request_body_in_clean_file,3,ngx_http_request_s.request_body_in_clean_file,,http\ngx_http_request.h,request_body_in_clean_file:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2894,299515,request_body_file_group_access,3,ngx_http_request_s.request_body_file_group_access,,http\ngx_http_request.h,request_body_file_group_access:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2895,299516,request_body_file_log_level,3,ngx_http_request_s.request_body_file_log_level,,http\ngx_http_request.h,request_body_file_log_level:3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2896,299517,request_body_no_buffering,3,ngx_http_request_s.request_body_no_buffering,,http\ngx_http_request.h,request_body_no_buffering:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2897,299518,subrequest_in_memory,3,ngx_http_request_s.subrequest_in_memory,,http\ngx_http_request.h,subrequest_in_memory:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2898,299519,waited,3,ngx_http_request_s.waited,,http\ngx_http_request.h,waited:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2899,299520,cached,3,ngx_http_request_s.cached,,http\ngx_http_request.h,cached:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2900,299521,gzip_tested,3,ngx_http_request_s.gzip_tested,,http\ngx_http_request.h,gzip_tested:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2901,299522,gzip_ok,3,ngx_http_request_s.gzip_ok,,http\ngx_http_request.h,gzip_ok:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2902,299523,gzip_vary,3,ngx_http_request_s.gzip_vary,,http\ngx_http_request.h,gzip_vary:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2903,299524,realloc_captures,3,ngx_http_request_s.realloc_captures,,http\ngx_http_request.h,realloc_captures:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2904,299525,proxy,3,ngx_http_request_s.proxy,,http\ngx_http_request.h,proxy:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2905,299526,bypass_cache,3,ngx_http_request_s.bypass_cache,,http\ngx_http_request.h,bypass_cache:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2906,299527,no_cache,3,ngx_http_request_s.no_cache,,http\ngx_http_request.h,no_cache:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2907,299528,limit_conn_status,3,ngx_http_request_s.limit_conn_status,,http\ngx_http_request.h,limit_conn_status:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2908,299529,limit_req_status,3,ngx_http_request_s.limit_req_status,,http\ngx_http_request.h,limit_req_status:3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2909,299530,limit_rate_set,3,ngx_http_request_s.limit_rate_set,,http\ngx_http_request.h,limit_rate_set:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2910,299531,limit_rate_after_set,3,ngx_http_request_s.limit_rate_after_set,,http\ngx_http_request.h,limit_rate_after_set:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2911,299532,cacheable,3,ngx_http_request_s.cacheable,,http\ngx_http_request.h,cacheable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2912,299533,pipeline,3,ngx_http_request_s.pipeline,,http\ngx_http_request.h,pipeline:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2913,299534,chunked,3,ngx_http_request_s.chunked,,http\ngx_http_request.h,chunked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2914,299535,header_only,3,ngx_http_request_s.header_only,,http\ngx_http_request.h,header_only:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2915,299536,expect_trailers,3,ngx_http_request_s.expect_trailers,,http\ngx_http_request.h,expect_trailers:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2916,299537,keepalive,3,ngx_http_request_s.keepalive,,http\ngx_http_request.h,keepalive:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2917,299538,lingering_close,3,ngx_http_request_s.lingering_close,,http\ngx_http_request.h,lingering_close:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2918,299539,discard_body,3,ngx_http_request_s.discard_body,,http\ngx_http_request.h,discard_body:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2919,299540,reading_body,3,ngx_http_request_s.reading_body,,http\ngx_http_request.h,reading_body:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2920,299541,internal,3,ngx_http_request_s.internal,,http\ngx_http_request.h,internal:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2921,299542,error_page,3,ngx_http_request_s.error_page,,http\ngx_http_request.h,error_page:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2922,299543,filter_finalize,3,ngx_http_request_s.filter_finalize,,http\ngx_http_request.h,filter_finalize:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2923,299544,post_action,3,ngx_http_request_s.post_action,,http\ngx_http_request.h,post_action:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2924,299545,request_complete,3,ngx_http_request_s.request_complete,,http\ngx_http_request.h,request_complete:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2925,299546,request_output,3,ngx_http_request_s.request_output,,http\ngx_http_request.h,request_output:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2926,299547,header_sent,3,ngx_http_request_s.header_sent,,http\ngx_http_request.h,header_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2927,299548,expect_tested,3,ngx_http_request_s.expect_tested,,http\ngx_http_request.h,expect_tested:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2928,299549,root_tested,3,ngx_http_request_s.root_tested,,http\ngx_http_request.h,root_tested:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2929,299550,done,3,ngx_http_request_s.done,,http\ngx_http_request.h,done:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2930,299551,logged,3,ngx_http_request_s.logged,,http\ngx_http_request.h,logged:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2931,299552,buffered,3,ngx_http_request_s.buffered,,http\ngx_http_request.h,buffered:4,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2932,299553,main_filter_need_in_memory,3,ngx_http_request_s.main_filter_need_in_memory,,http\ngx_http_request.h,main_filter_need_in_memory:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2933,299554,filter_need_in_memory,3,ngx_http_request_s.filter_need_in_memory,,http\ngx_http_request.h,filter_need_in_memory:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2934,299555,filter_need_temporary,3,ngx_http_request_s.filter_need_temporary,,http\ngx_http_request.h,filter_need_temporary:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2935,299556,preserve_body,3,ngx_http_request_s.preserve_body,,http\ngx_http_request.h,preserve_body:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2936,299557,allow_ranges,3,ngx_http_request_s.allow_ranges,,http\ngx_http_request.h,allow_ranges:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2937,299558,subrequest_ranges,3,ngx_http_request_s.subrequest_ranges,,http\ngx_http_request.h,subrequest_ranges:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2938,299559,single_range,3,ngx_http_request_s.single_range,,http\ngx_http_request.h,single_range:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2939,299560,disable_not_modified,3,ngx_http_request_s.disable_not_modified,,http\ngx_http_request.h,disable_not_modified:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2940,299561,stat_reading,3,ngx_http_request_s.stat_reading,,http\ngx_http_request.h,stat_reading:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2941,299562,stat_writing,3,ngx_http_request_s.stat_writing,,http\ngx_http_request.h,stat_writing:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2942,299563,stat_processing,3,ngx_http_request_s.stat_processing,,http\ngx_http_request.h,stat_processing:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2943,299564,background,3,ngx_http_request_s.background,,http\ngx_http_request.h,background:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2944,299565,health_check,3,ngx_http_request_s.health_check,,http\ngx_http_request.h,health_check:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2945,299566,state,3,ngx_http_request_s.state,,http\ngx_http_request.h,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2946,299567,header_hash,3,ngx_http_request_s.header_hash,,http\ngx_http_request.h,header_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2947,299568,lowcase_index,3,ngx_http_request_s.lowcase_index,,http\ngx_http_request.h,lowcase_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2948,299569,lowcase_header,3,ngx_http_request_s.lowcase_header,,http\ngx_http_request.h,lowcase_header[NGX_HTTP_LC_HEADER_LEN],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2949,299570,header_name_start,3,ngx_http_request_s.header_name_start,,http\ngx_http_request.h,*header_name_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2950,299571,header_name_end,3,ngx_http_request_s.header_name_end,,http\ngx_http_request.h,*header_name_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2951,299572,header_start,3,ngx_http_request_s.header_start,,http\ngx_http_request.h,*header_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2952,299573,header_end,3,ngx_http_request_s.header_end,,http\ngx_http_request.h,*header_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2953,299574,uri_start,3,ngx_http_request_s.uri_start,,http\ngx_http_request.h,*uri_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2954,299575,uri_end,3,ngx_http_request_s.uri_end,,http\ngx_http_request.h,*uri_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2955,299576,uri_ext,3,ngx_http_request_s.uri_ext,,http\ngx_http_request.h,*uri_ext,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2956,299577,args_start,3,ngx_http_request_s.args_start,,http\ngx_http_request.h,*args_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2957,299578,request_start,3,ngx_http_request_s.request_start,,http\ngx_http_request.h,*request_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2958,299579,request_end,3,ngx_http_request_s.request_end,,http\ngx_http_request.h,*request_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2959,299580,method_end,3,ngx_http_request_s.method_end,,http\ngx_http_request.h,*method_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2960,299581,schema_start,3,ngx_http_request_s.schema_start,,http\ngx_http_request.h,*schema_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2961,299582,schema_end,3,ngx_http_request_s.schema_end,,http\ngx_http_request.h,*schema_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2962,299583,host_start,3,ngx_http_request_s.host_start,,http\ngx_http_request.h,*host_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2963,299584,host_end,3,ngx_http_request_s.host_end,,http\ngx_http_request.h,*host_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2964,299585,port_start,3,ngx_http_request_s.port_start,,http\ngx_http_request.h,*port_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2965,299586,port_end,3,ngx_http_request_s.port_end,,http\ngx_http_request.h,*port_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2966,299587,http_minor,3,ngx_http_request_s.http_minor,,http\ngx_http_request.h,http_minor:16,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2967,299588,http_major,3,ngx_http_request_s.http_major,,http\ngx_http_request.h,http_major:16,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2968,299598,terminal_posted_request,3,ngx_http_ephemeral_t.terminal_posted_request,,http\ngx_http_request.h,terminal_posted_request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2969,307253,ip,3,ngx_http_script_engine_t.ip,,http\ngx_http_script.h,*ip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,53,0,1,1,0,0,,0,0,0,0,0,
2970,307254,pos,3,ngx_http_script_engine_t.pos,,http\ngx_http_script.h,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
2971,307255,sp,3,ngx_http_script_engine_t.sp,,http\ngx_http_script.h,*sp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,29,0,1,1,0,0,,0,0,0,0,0,
2972,307256,buf,3,ngx_http_script_engine_t.buf,,http\ngx_http_script.h,buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
2973,307257,line,3,ngx_http_script_engine_t.line,,http\ngx_http_script.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2974,307258,args,3,ngx_http_script_engine_t.args,,http\ngx_http_script.h,*args,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2975,307259,flushed,3,ngx_http_script_engine_t.flushed,,http\ngx_http_script.h,flushed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2976,307260,skip,3,ngx_http_script_engine_t.skip,,http\ngx_http_script.h,skip:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2977,307261,quote,3,ngx_http_script_engine_t.quote,,http\ngx_http_script.h,quote:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2978,307262,is_args,3,ngx_http_script_engine_t.is_args,,http\ngx_http_script.h,is_args:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
2979,307263,log,3,ngx_http_script_engine_t.log,,http\ngx_http_script.h,log:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2980,307264,status,3,ngx_http_script_engine_t.status,,http\ngx_http_script.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
2981,307265,request,3,ngx_http_script_engine_t.request,,http\ngx_http_script.h,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,30,0,1,1,0,0,,0,0,0,0,0,
2982,307268,cf,3,ngx_http_script_compile_t.cf,,http\ngx_http_script.h,*cf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
2983,307269,source,3,ngx_http_script_compile_t.source,,http\ngx_http_script.h,*source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,18,0,1,1,0,0,,0,0,0,0,0,
2984,307270,flushes,3,ngx_http_script_compile_t.flushes,,http\ngx_http_script.h,**flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2985,307271,lengths,3,ngx_http_script_compile_t.lengths,,http\ngx_http_script.h,**lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2986,307272,values,3,ngx_http_script_compile_t.values,,http\ngx_http_script.h,**values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2987,307273,variables,3,ngx_http_script_compile_t.variables,,http\ngx_http_script.h,variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2988,307274,ncaptures,3,ngx_http_script_compile_t.ncaptures,,http\ngx_http_script.h,ncaptures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2989,307275,captures_mask,3,ngx_http_script_compile_t.captures_mask,,http\ngx_http_script.h,captures_mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2990,307276,size,3,ngx_http_script_compile_t.size,,http\ngx_http_script.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2991,307277,main,3,ngx_http_script_compile_t.main,,http\ngx_http_script.h,*main,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2992,307278,compile_args,3,ngx_http_script_compile_t.compile_args,,http\ngx_http_script.h,compile_args:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
2993,307279,complete_lengths,3,ngx_http_script_compile_t.complete_lengths,,http\ngx_http_script.h,complete_lengths:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2994,307280,complete_values,3,ngx_http_script_compile_t.complete_values,,http\ngx_http_script.h,complete_values:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2995,307281,zero,3,ngx_http_script_compile_t.zero,,http\ngx_http_script.h,zero:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2996,307282,conf_prefix,3,ngx_http_script_compile_t.conf_prefix,,http\ngx_http_script.h,conf_prefix:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2997,307283,root_prefix,3,ngx_http_script_compile_t.root_prefix,,http\ngx_http_script.h,root_prefix:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
2998,307284,dup_capture,3,ngx_http_script_compile_t.dup_capture,,http\ngx_http_script.h,dup_capture:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
2999,307285,args,3,ngx_http_script_compile_t.args,,http\ngx_http_script.h,args:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3000,307288,value,3,ngx_http_complex_value_t.value,,http\ngx_http_script.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3001,307289,flushes,3,ngx_http_complex_value_t.flushes,,http\ngx_http_script.h,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3002,307290,lengths,3,ngx_http_complex_value_t.lengths,,http\ngx_http_script.h,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3003,307291,values,3,ngx_http_complex_value_t.values,,http\ngx_http_script.h,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3004,307293,size,3,ngx_http_complex_value_t.u.size,,http\ngx_http_script.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3005,307294,u,3,ngx_http_complex_value_t.u,,http\ngx_http_script.h,u,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3006,307297,cf,3,ngx_http_compile_complex_value_t.cf,,http\ngx_http_script.h,*cf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3007,307298,value,3,ngx_http_compile_complex_value_t.value,,http\ngx_http_script.h,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3008,307299,complex_value,3,ngx_http_compile_complex_value_t.complex_value,,http\ngx_http_script.h,*complex_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
3009,307300,zero,3,ngx_http_compile_complex_value_t.zero,,http\ngx_http_script.h,zero:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3010,307301,conf_prefix,3,ngx_http_compile_complex_value_t.conf_prefix,,http\ngx_http_script.h,conf_prefix:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3011,307302,root_prefix,3,ngx_http_compile_complex_value_t.root_prefix,,http\ngx_http_script.h,root_prefix:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3012,307315,code,3,ngx_http_script_copy_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3013,307316,len,3,ngx_http_script_copy_code_t.len,,http\ngx_http_script.h,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3014,307319,code,3,ngx_http_script_var_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3015,307320,index,3,ngx_http_script_var_code_t.index,,http\ngx_http_script.h,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3016,307323,code,3,ngx_http_script_var_handler_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3017,307324,handler,3,ngx_http_script_var_handler_code_t.handler,,http\ngx_http_script.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3018,307325,data,3,ngx_http_script_var_handler_code_t.data,,http\ngx_http_script.h,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3019,307328,code,3,ngx_http_script_copy_capture_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3020,307329,n,3,ngx_http_script_copy_capture_code_t.n,,http\ngx_http_script.h,n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3021,307332,code,3,ngx_http_script_full_name_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3022,307333,conf_prefix,3,ngx_http_script_full_name_code_t.conf_prefix,,http\ngx_http_script.h,conf_prefix,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3023,307336,code,3,ngx_http_script_return_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3024,307337,status,3,ngx_http_script_return_code_t.status,,http\ngx_http_script.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3025,307338,text,3,ngx_http_script_return_code_t.text,,http\ngx_http_script.h,text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3026,307341,ngx_http_script_file_plain,3,ngx_http_script_file_op_e.ngx_http_script_file_plain,,http\ngx_http_script.h,ngx_http_script_file_plain = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3027,307342,ngx_http_script_file_not_plain,3,ngx_http_script_file_op_e.ngx_http_script_file_not_plain,,http\ngx_http_script.h,ngx_http_script_file_not_plain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3028,307343,ngx_http_script_file_dir,3,ngx_http_script_file_op_e.ngx_http_script_file_dir,,http\ngx_http_script.h,ngx_http_script_file_dir,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3029,307344,ngx_http_script_file_not_dir,3,ngx_http_script_file_op_e.ngx_http_script_file_not_dir,,http\ngx_http_script.h,ngx_http_script_file_not_dir,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3030,307345,ngx_http_script_file_exists,3,ngx_http_script_file_op_e.ngx_http_script_file_exists,,http\ngx_http_script.h,ngx_http_script_file_exists,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3031,307346,ngx_http_script_file_not_exists,3,ngx_http_script_file_op_e.ngx_http_script_file_not_exists,,http\ngx_http_script.h,ngx_http_script_file_not_exists,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3032,307347,ngx_http_script_file_exec,3,ngx_http_script_file_op_e.ngx_http_script_file_exec,,http\ngx_http_script.h,ngx_http_script_file_exec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3033,307348,ngx_http_script_file_not_exec,3,ngx_http_script_file_op_e.ngx_http_script_file_not_exec,,http\ngx_http_script.h,ngx_http_script_file_not_exec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3034,307358,code,3,ngx_http_script_file_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3035,307359,op,3,ngx_http_script_file_code_t.op,,http\ngx_http_script.h,op,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3036,307362,code,3,ngx_http_script_if_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3037,307363,next,3,ngx_http_script_if_code_t.next,,http\ngx_http_script.h,next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3038,307364,loc_conf,3,ngx_http_script_if_code_t.loc_conf,,http\ngx_http_script.h,**loc_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3039,307367,code,3,ngx_http_script_complex_value_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3040,307368,lengths,3,ngx_http_script_complex_value_code_t.lengths,,http\ngx_http_script.h,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3041,307371,code,3,ngx_http_script_value_code_t.code,,http\ngx_http_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3042,307372,value,3,ngx_http_script_value_code_t.value,,http\ngx_http_script.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3043,307373,text_len,3,ngx_http_script_value_code_t.text_len,,http\ngx_http_script.h,text_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3044,307374,text_data,3,ngx_http_script_value_code_t.text_data,,http\ngx_http_script.h,text_data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3045,322772,status,3,ngx_http_upstream_state_t.status,,http\ngx_http_upstream.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3046,322773,response_time,3,ngx_http_upstream_state_t.response_time,,http\ngx_http_upstream.h,response_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3047,322774,connect_time,3,ngx_http_upstream_state_t.connect_time,,http\ngx_http_upstream.h,connect_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3048,322775,header_time,3,ngx_http_upstream_state_t.header_time,,http\ngx_http_upstream.h,header_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3049,322776,queue_time,3,ngx_http_upstream_state_t.queue_time,,http\ngx_http_upstream.h,queue_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3050,322777,response_length,3,ngx_http_upstream_state_t.response_length,,http\ngx_http_upstream.h,response_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3051,322778,bytes_received,3,ngx_http_upstream_state_t.bytes_received,,http\ngx_http_upstream.h,bytes_received,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3052,322779,bytes_sent,3,ngx_http_upstream_state_t.bytes_sent,,http\ngx_http_upstream.h,bytes_sent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3053,322780,peer,3,ngx_http_upstream_state_t.peer,,http\ngx_http_upstream.h,*peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3054,322783,headers_in_hash,3,ngx_http_upstream_main_conf_t.headers_in_hash,,http\ngx_http_upstream.h,headers_in_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3055,322784,upstreams,3,ngx_http_upstream_main_conf_t.upstreams,,http\ngx_http_upstream.h,upstreams,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3056,322801,init_upstream,3,ngx_http_upstream_peer_t.init_upstream,,http\ngx_http_upstream.h,init_upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3057,322802,init,3,ngx_http_upstream_peer_t.init,,http\ngx_http_upstream.h,init,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3058,322803,data,3,ngx_http_upstream_peer_t.data,,http\ngx_http_upstream.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3059,322806,name,3,ngx_http_upstream_server_t.name,,http\ngx_http_upstream.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3060,322807,addrs,3,ngx_http_upstream_server_t.addrs,,http\ngx_http_upstream.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3061,322808,naddrs,3,ngx_http_upstream_server_t.naddrs,,http\ngx_http_upstream.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3062,322809,weight,3,ngx_http_upstream_server_t.weight,,http\ngx_http_upstream.h,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3063,322810,max_conns,3,ngx_http_upstream_server_t.max_conns,,http\ngx_http_upstream.h,max_conns,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3064,322811,max_fails,3,ngx_http_upstream_server_t.max_fails,,http\ngx_http_upstream.h,max_fails,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3065,322812,fail_timeout,3,ngx_http_upstream_server_t.fail_timeout,,http\ngx_http_upstream.h,fail_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3066,322813,slow_start,3,ngx_http_upstream_server_t.slow_start,,http\ngx_http_upstream.h,slow_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3067,322814,down,3,ngx_http_upstream_server_t.down,,http\ngx_http_upstream.h,down,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3068,322815,backup,3,ngx_http_upstream_server_t.backup,,http\ngx_http_upstream.h,backup:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3069,322819,peer,3,ngx_http_upstream_srv_conf_s.peer,,http\ngx_http_upstream.h,peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3070,322820,srv_conf,3,ngx_http_upstream_srv_conf_s.srv_conf,,http\ngx_http_upstream.h,**srv_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3071,322821,servers,3,ngx_http_upstream_srv_conf_s.servers,,http\ngx_http_upstream.h,*servers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3072,322822,flags,3,ngx_http_upstream_srv_conf_s.flags,,http\ngx_http_upstream.h,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3073,322823,host,3,ngx_http_upstream_srv_conf_s.host,,http\ngx_http_upstream.h,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3074,322824,file_name,3,ngx_http_upstream_srv_conf_s.file_name,,http\ngx_http_upstream.h,*file_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3075,322825,line,3,ngx_http_upstream_srv_conf_s.line,,http\ngx_http_upstream.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3076,322826,port,3,ngx_http_upstream_srv_conf_s.port,,http\ngx_http_upstream.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3077,322827,no_port,3,ngx_http_upstream_srv_conf_s.no_port,,http\ngx_http_upstream.h,no_port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3078,322828,shm_zone,3,ngx_http_upstream_srv_conf_s.shm_zone,,http\ngx_http_upstream.h,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3079,322830,addr,3,ngx_http_upstream_local_t.addr,,http\ngx_http_upstream.h,*addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3080,322831,value,3,ngx_http_upstream_local_t.value,,http\ngx_http_upstream.h,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3081,322832,transparent,3,ngx_http_upstream_local_t.transparent,,http\ngx_http_upstream.h,transparent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3082,322835,upstream,3,ngx_http_upstream_conf_t.upstream,,http\ngx_http_upstream.h,*upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3083,322836,connect_timeout,3,ngx_http_upstream_conf_t.connect_timeout,,http\ngx_http_upstream.h,connect_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3084,322837,send_timeout,3,ngx_http_upstream_conf_t.send_timeout,,http\ngx_http_upstream.h,send_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3085,322838,read_timeout,3,ngx_http_upstream_conf_t.read_timeout,,http\ngx_http_upstream.h,read_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3086,322839,next_upstream_timeout,3,ngx_http_upstream_conf_t.next_upstream_timeout,,http\ngx_http_upstream.h,next_upstream_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3087,322840,send_lowat,3,ngx_http_upstream_conf_t.send_lowat,,http\ngx_http_upstream.h,send_lowat,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3088,322841,buffer_size,3,ngx_http_upstream_conf_t.buffer_size,,http\ngx_http_upstream.h,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3089,322842,limit_rate,3,ngx_http_upstream_conf_t.limit_rate,,http\ngx_http_upstream.h,limit_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3090,322843,busy_buffers_size,3,ngx_http_upstream_conf_t.busy_buffers_size,,http\ngx_http_upstream.h,busy_buffers_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3091,322844,max_temp_file_size,3,ngx_http_upstream_conf_t.max_temp_file_size,,http\ngx_http_upstream.h,max_temp_file_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3092,322845,temp_file_write_size,3,ngx_http_upstream_conf_t.temp_file_write_size,,http\ngx_http_upstream.h,temp_file_write_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3093,322846,busy_buffers_size_conf,3,ngx_http_upstream_conf_t.busy_buffers_size_conf,,http\ngx_http_upstream.h,busy_buffers_size_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3094,322847,max_temp_file_size_conf,3,ngx_http_upstream_conf_t.max_temp_file_size_conf,,http\ngx_http_upstream.h,max_temp_file_size_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3095,322848,temp_file_write_size_conf,3,ngx_http_upstream_conf_t.temp_file_write_size_conf,,http\ngx_http_upstream.h,temp_file_write_size_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3096,322849,bufs,3,ngx_http_upstream_conf_t.bufs,,http\ngx_http_upstream.h,bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3097,322850,ignore_headers,3,ngx_http_upstream_conf_t.ignore_headers,,http\ngx_http_upstream.h,ignore_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3098,322851,next_upstream,3,ngx_http_upstream_conf_t.next_upstream,,http\ngx_http_upstream.h,next_upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3099,322852,store_access,3,ngx_http_upstream_conf_t.store_access,,http\ngx_http_upstream.h,store_access,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3100,322853,next_upstream_tries,3,ngx_http_upstream_conf_t.next_upstream_tries,,http\ngx_http_upstream.h,next_upstream_tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3101,322854,buffering,3,ngx_http_upstream_conf_t.buffering,,http\ngx_http_upstream.h,buffering,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3102,322855,request_buffering,3,ngx_http_upstream_conf_t.request_buffering,,http\ngx_http_upstream.h,request_buffering,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3103,322856,pass_request_headers,3,ngx_http_upstream_conf_t.pass_request_headers,,http\ngx_http_upstream.h,pass_request_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3104,322857,pass_request_body,3,ngx_http_upstream_conf_t.pass_request_body,,http\ngx_http_upstream.h,pass_request_body,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3105,322858,ignore_client_abort,3,ngx_http_upstream_conf_t.ignore_client_abort,,http\ngx_http_upstream.h,ignore_client_abort,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3106,322859,intercept_errors,3,ngx_http_upstream_conf_t.intercept_errors,,http\ngx_http_upstream.h,intercept_errors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3107,322860,cyclic_temp_file,3,ngx_http_upstream_conf_t.cyclic_temp_file,,http\ngx_http_upstream.h,cyclic_temp_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3108,322861,force_ranges,3,ngx_http_upstream_conf_t.force_ranges,,http\ngx_http_upstream.h,force_ranges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3109,322862,temp_path,3,ngx_http_upstream_conf_t.temp_path,,http\ngx_http_upstream.h,*temp_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3110,322863,hide_headers_hash,3,ngx_http_upstream_conf_t.hide_headers_hash,,http\ngx_http_upstream.h,hide_headers_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3111,322864,hide_headers,3,ngx_http_upstream_conf_t.hide_headers,,http\ngx_http_upstream.h,*hide_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3112,322865,pass_headers,3,ngx_http_upstream_conf_t.pass_headers,,http\ngx_http_upstream.h,*pass_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3113,322866,local,3,ngx_http_upstream_conf_t.local,,http\ngx_http_upstream.h,*local,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3114,322867,socket_keepalive,3,ngx_http_upstream_conf_t.socket_keepalive,,http\ngx_http_upstream.h,socket_keepalive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3115,322868,cache_zone,3,ngx_http_upstream_conf_t.cache_zone,,http\ngx_http_upstream.h,*cache_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3116,322869,cache_value,3,ngx_http_upstream_conf_t.cache_value,,http\ngx_http_upstream.h,*cache_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3117,322870,cache_min_uses,3,ngx_http_upstream_conf_t.cache_min_uses,,http\ngx_http_upstream.h,cache_min_uses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3118,322871,cache_use_stale,3,ngx_http_upstream_conf_t.cache_use_stale,,http\ngx_http_upstream.h,cache_use_stale,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3119,322872,cache_methods,3,ngx_http_upstream_conf_t.cache_methods,,http\ngx_http_upstream.h,cache_methods,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3120,322873,cache_max_range_offset,3,ngx_http_upstream_conf_t.cache_max_range_offset,,http\ngx_http_upstream.h,cache_max_range_offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3121,322874,cache_lock,3,ngx_http_upstream_conf_t.cache_lock,,http\ngx_http_upstream.h,cache_lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3122,322875,cache_lock_timeout,3,ngx_http_upstream_conf_t.cache_lock_timeout,,http\ngx_http_upstream.h,cache_lock_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3123,322876,cache_lock_age,3,ngx_http_upstream_conf_t.cache_lock_age,,http\ngx_http_upstream.h,cache_lock_age,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3124,322877,cache_revalidate,3,ngx_http_upstream_conf_t.cache_revalidate,,http\ngx_http_upstream.h,cache_revalidate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3125,322878,cache_convert_head,3,ngx_http_upstream_conf_t.cache_convert_head,,http\ngx_http_upstream.h,cache_convert_head,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3126,322879,cache_background_update,3,ngx_http_upstream_conf_t.cache_background_update,,http\ngx_http_upstream.h,cache_background_update,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3127,322880,cache_valid,3,ngx_http_upstream_conf_t.cache_valid,,http\ngx_http_upstream.h,*cache_valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3128,322881,cache_bypass,3,ngx_http_upstream_conf_t.cache_bypass,,http\ngx_http_upstream.h,*cache_bypass,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3129,322882,cache_purge,3,ngx_http_upstream_conf_t.cache_purge,,http\ngx_http_upstream.h,*cache_purge,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3130,322883,no_cache,3,ngx_http_upstream_conf_t.no_cache,,http\ngx_http_upstream.h,*no_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3131,322884,store_lengths,3,ngx_http_upstream_conf_t.store_lengths,,http\ngx_http_upstream.h,*store_lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3132,322885,store_values,3,ngx_http_upstream_conf_t.store_values,,http\ngx_http_upstream.h,*store_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3133,322886,cache,3,ngx_http_upstream_conf_t.cache,,http\ngx_http_upstream.h,cache:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3134,322887,store,3,ngx_http_upstream_conf_t.store,,http\ngx_http_upstream.h,store:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3135,322888,intercept_404,3,ngx_http_upstream_conf_t.intercept_404,,http\ngx_http_upstream.h,intercept_404:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3136,322889,change_buffering,3,ngx_http_upstream_conf_t.change_buffering,,http\ngx_http_upstream.h,change_buffering:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3137,322890,pass_trailers,3,ngx_http_upstream_conf_t.pass_trailers,,http\ngx_http_upstream.h,pass_trailers:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3138,322891,preserve_output,3,ngx_http_upstream_conf_t.preserve_output,,http\ngx_http_upstream.h,preserve_output:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3139,322892,ssl,3,ngx_http_upstream_conf_t.ssl,,http\ngx_http_upstream.h,*ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3140,322893,ssl_session_reuse,3,ngx_http_upstream_conf_t.ssl_session_reuse,,http\ngx_http_upstream.h,ssl_session_reuse,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3141,322894,ssl_name,3,ngx_http_upstream_conf_t.ssl_name,,http\ngx_http_upstream.h,*ssl_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3142,322895,ssl_server_name,3,ngx_http_upstream_conf_t.ssl_server_name,,http\ngx_http_upstream.h,ssl_server_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3143,322896,ssl_verify,3,ngx_http_upstream_conf_t.ssl_verify,,http\ngx_http_upstream.h,ssl_verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3144,322897,ssl_certificate,3,ngx_http_upstream_conf_t.ssl_certificate,,http\ngx_http_upstream.h,*ssl_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3145,322898,ssl_certificate_key,3,ngx_http_upstream_conf_t.ssl_certificate_key,,http\ngx_http_upstream.h,*ssl_certificate_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3146,322899,ssl_passwords,3,ngx_http_upstream_conf_t.ssl_passwords,,http\ngx_http_upstream.h,*ssl_passwords,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3147,322900,module,3,ngx_http_upstream_conf_t.module,,http\ngx_http_upstream.h,module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3148,322904,name,3,ngx_http_upstream_header_t.name,,http\ngx_http_upstream.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3149,322905,handler,3,ngx_http_upstream_header_t.handler,,http\ngx_http_upstream.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3150,322906,offset,3,ngx_http_upstream_header_t.offset,,http\ngx_http_upstream.h,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3151,322907,copy_handler,3,ngx_http_upstream_header_t.copy_handler,,http\ngx_http_upstream.h,copy_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3152,322908,conf,3,ngx_http_upstream_header_t.conf,,http\ngx_http_upstream.h,conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3153,322909,redirect,3,ngx_http_upstream_header_t.redirect,,http\ngx_http_upstream.h,redirect,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3154,322912,headers,3,ngx_http_upstream_headers_in_t.headers,,http\ngx_http_upstream.h,headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3155,322913,trailers,3,ngx_http_upstream_headers_in_t.trailers,,http\ngx_http_upstream.h,trailers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3156,322914,status_n,3,ngx_http_upstream_headers_in_t.status_n,,http\ngx_http_upstream.h,status_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3157,322915,status_line,3,ngx_http_upstream_headers_in_t.status_line,,http\ngx_http_upstream.h,status_line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3158,322916,status,3,ngx_http_upstream_headers_in_t.status,,http\ngx_http_upstream.h,*status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3159,322917,date,3,ngx_http_upstream_headers_in_t.date,,http\ngx_http_upstream.h,*date,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3160,322918,server,3,ngx_http_upstream_headers_in_t.server,,http\ngx_http_upstream.h,*server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3161,322919,connection,3,ngx_http_upstream_headers_in_t.connection,,http\ngx_http_upstream.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3162,322920,expires,3,ngx_http_upstream_headers_in_t.expires,,http\ngx_http_upstream.h,*expires,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3163,322921,etag,3,ngx_http_upstream_headers_in_t.etag,,http\ngx_http_upstream.h,*etag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3164,322922,x_accel_expires,3,ngx_http_upstream_headers_in_t.x_accel_expires,,http\ngx_http_upstream.h,*x_accel_expires,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3165,322923,x_accel_redirect,3,ngx_http_upstream_headers_in_t.x_accel_redirect,,http\ngx_http_upstream.h,*x_accel_redirect,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3166,322924,x_accel_limit_rate,3,ngx_http_upstream_headers_in_t.x_accel_limit_rate,,http\ngx_http_upstream.h,*x_accel_limit_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3167,322925,content_type,3,ngx_http_upstream_headers_in_t.content_type,,http\ngx_http_upstream.h,*content_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3168,322926,content_length,3,ngx_http_upstream_headers_in_t.content_length,,http\ngx_http_upstream.h,*content_length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3169,322927,last_modified,3,ngx_http_upstream_headers_in_t.last_modified,,http\ngx_http_upstream.h,*last_modified,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3170,322928,location,3,ngx_http_upstream_headers_in_t.location,,http\ngx_http_upstream.h,*location,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3171,322929,accept_ranges,3,ngx_http_upstream_headers_in_t.accept_ranges,,http\ngx_http_upstream.h,*accept_ranges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3172,322930,www_authenticate,3,ngx_http_upstream_headers_in_t.www_authenticate,,http\ngx_http_upstream.h,*www_authenticate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3173,322931,transfer_encoding,3,ngx_http_upstream_headers_in_t.transfer_encoding,,http\ngx_http_upstream.h,*transfer_encoding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3174,322932,vary,3,ngx_http_upstream_headers_in_t.vary,,http\ngx_http_upstream.h,*vary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3175,322933,content_encoding,3,ngx_http_upstream_headers_in_t.content_encoding,,http\ngx_http_upstream.h,*content_encoding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3176,322934,cache_control,3,ngx_http_upstream_headers_in_t.cache_control,,http\ngx_http_upstream.h,cache_control,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3177,322935,cookies,3,ngx_http_upstream_headers_in_t.cookies,,http\ngx_http_upstream.h,cookies,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3178,322936,content_length_n,3,ngx_http_upstream_headers_in_t.content_length_n,,http\ngx_http_upstream.h,content_length_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3179,322937,last_modified_time,3,ngx_http_upstream_headers_in_t.last_modified_time,,http\ngx_http_upstream.h,last_modified_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3180,322938,connection_close,3,ngx_http_upstream_headers_in_t.connection_close,,http\ngx_http_upstream.h,connection_close:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3181,322939,chunked,3,ngx_http_upstream_headers_in_t.chunked,,http\ngx_http_upstream.h,chunked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3182,322942,host,3,ngx_http_upstream_resolved_t.host,,http\ngx_http_upstream.h,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3183,322943,port,3,ngx_http_upstream_resolved_t.port,,http\ngx_http_upstream.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3184,322944,no_port,3,ngx_http_upstream_resolved_t.no_port,,http\ngx_http_upstream.h,no_port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3185,322945,naddrs,3,ngx_http_upstream_resolved_t.naddrs,,http\ngx_http_upstream.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3186,322946,addrs,3,ngx_http_upstream_resolved_t.addrs,,http\ngx_http_upstream.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3187,322948,sockaddr,3,ngx_http_upstream_resolved_t.sockaddr,,http\ngx_http_upstream.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3188,322949,socklen,3,ngx_http_upstream_resolved_t.socklen,,http\ngx_http_upstream.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3189,322950,name,3,ngx_http_upstream_resolved_t.name,,http\ngx_http_upstream.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3190,322951,ctx,3,ngx_http_upstream_resolved_t.ctx,,http\ngx_http_upstream.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3191,322960,read_event_handler,3,ngx_http_upstream_s.read_event_handler,,http\ngx_http_upstream.h,read_event_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3192,322961,write_event_handler,3,ngx_http_upstream_s.write_event_handler,,http\ngx_http_upstream.h,write_event_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3193,322962,peer,3,ngx_http_upstream_s.peer,,http\ngx_http_upstream.h,peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3194,322963,pipe,3,ngx_http_upstream_s.pipe,,http\ngx_http_upstream.h,*pipe,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3195,322964,request_bufs,3,ngx_http_upstream_s.request_bufs,,http\ngx_http_upstream.h,*request_bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3196,322965,output,3,ngx_http_upstream_s.output,,http\ngx_http_upstream.h,output,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3197,322966,writer,3,ngx_http_upstream_s.writer,,http\ngx_http_upstream.h,writer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3198,322967,conf,3,ngx_http_upstream_s.conf,,http\ngx_http_upstream.h,*conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3199,322968,upstream,3,ngx_http_upstream_s.upstream,,http\ngx_http_upstream.h,*upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3200,322969,caches,3,ngx_http_upstream_s.caches,,http\ngx_http_upstream.h,*caches,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3201,322970,headers_in,3,ngx_http_upstream_s.headers_in,,http\ngx_http_upstream.h,headers_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3202,322971,resolved,3,ngx_http_upstream_s.resolved,,http\ngx_http_upstream.h,*resolved,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3203,322972,from_client,3,ngx_http_upstream_s.from_client,,http\ngx_http_upstream.h,from_client,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3204,322973,buffer,3,ngx_http_upstream_s.buffer,,http\ngx_http_upstream.h,buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3205,322974,length,3,ngx_http_upstream_s.length,,http\ngx_http_upstream.h,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3206,322975,out_bufs,3,ngx_http_upstream_s.out_bufs,,http\ngx_http_upstream.h,*out_bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3207,322976,busy_bufs,3,ngx_http_upstream_s.busy_bufs,,http\ngx_http_upstream.h,*busy_bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3208,322977,free_bufs,3,ngx_http_upstream_s.free_bufs,,http\ngx_http_upstream.h,*free_bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3209,322989,input_filter_ctx,3,ngx_http_upstream_s.input_filter_ctx,,http\ngx_http_upstream.h,*input_filter_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3210,323034,start_time,3,ngx_http_upstream_s.start_time,,http\ngx_http_upstream.h,start_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3211,323035,state,3,ngx_http_upstream_s.state,,http\ngx_http_upstream.h,*state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3212,323036,method,3,ngx_http_upstream_s.method,,http\ngx_http_upstream.h,method,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3213,323037,schema,3,ngx_http_upstream_s.schema,,http\ngx_http_upstream.h,schema,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3214,323038,uri,3,ngx_http_upstream_s.uri,,http\ngx_http_upstream.h,uri,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3215,323039,ssl_name,3,ngx_http_upstream_s.ssl_name,,http\ngx_http_upstream.h,ssl_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3216,323040,cleanup,3,ngx_http_upstream_s.cleanup,,http\ngx_http_upstream.h,*cleanup,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3217,323041,store,3,ngx_http_upstream_s.store,,http\ngx_http_upstream.h,store:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3218,323042,cacheable,3,ngx_http_upstream_s.cacheable,,http\ngx_http_upstream.h,cacheable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3219,323043,accel,3,ngx_http_upstream_s.accel,,http\ngx_http_upstream.h,accel:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3220,323044,ssl,3,ngx_http_upstream_s.ssl,,http\ngx_http_upstream.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3221,323045,cache_status,3,ngx_http_upstream_s.cache_status,,http\ngx_http_upstream.h,cache_status:3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3222,323046,buffering,3,ngx_http_upstream_s.buffering,,http\ngx_http_upstream.h,buffering:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3223,323047,keepalive,3,ngx_http_upstream_s.keepalive,,http\ngx_http_upstream.h,keepalive:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3224,323048,upgrade,3,ngx_http_upstream_s.upgrade,,http\ngx_http_upstream.h,upgrade:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3225,323049,error,3,ngx_http_upstream_s.error,,http\ngx_http_upstream.h,error:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3226,323050,request_sent,3,ngx_http_upstream_s.request_sent,,http\ngx_http_upstream.h,request_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3227,323051,request_body_sent,3,ngx_http_upstream_s.request_body_sent,,http\ngx_http_upstream.h,request_body_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3228,323052,request_body_blocked,3,ngx_http_upstream_s.request_body_blocked,,http\ngx_http_upstream.h,request_body_blocked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3229,323053,header_sent,3,ngx_http_upstream_s.header_sent,,http\ngx_http_upstream.h,header_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3230,323055,status,3,ngx_http_upstream_next_t.status,,http\ngx_http_upstream.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3231,323056,mask,3,ngx_http_upstream_next_t.mask,,http\ngx_http_upstream.h,mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3232,323059,key,3,ngx_http_upstream_param_t.key,,http\ngx_http_upstream.h,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3233,323060,value,3,ngx_http_upstream_param_t.value,,http\ngx_http_upstream.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3234,323061,skip_empty,3,ngx_http_upstream_param_t.skip_empty,,http\ngx_http_upstream.h,skip_empty,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3235,325512,sockaddr,3,ngx_http_upstream_rr_peer_s.sockaddr,,http\ngx_http_upstream_round_robin.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3236,325513,socklen,3,ngx_http_upstream_rr_peer_s.socklen,,http\ngx_http_upstream_round_robin.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3237,325514,name,3,ngx_http_upstream_rr_peer_s.name,,http\ngx_http_upstream_round_robin.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3238,325515,server,3,ngx_http_upstream_rr_peer_s.server,,http\ngx_http_upstream_round_robin.h,server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3239,325516,current_weight,3,ngx_http_upstream_rr_peer_s.current_weight,,http\ngx_http_upstream_round_robin.h,current_weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3240,325517,effective_weight,3,ngx_http_upstream_rr_peer_s.effective_weight,,http\ngx_http_upstream_round_robin.h,effective_weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3241,325518,weight,3,ngx_http_upstream_rr_peer_s.weight,,http\ngx_http_upstream_round_robin.h,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3242,325519,conns,3,ngx_http_upstream_rr_peer_s.conns,,http\ngx_http_upstream_round_robin.h,conns,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3243,325520,max_conns,3,ngx_http_upstream_rr_peer_s.max_conns,,http\ngx_http_upstream_round_robin.h,max_conns,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3244,325521,fails,3,ngx_http_upstream_rr_peer_s.fails,,http\ngx_http_upstream_round_robin.h,fails,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3245,325522,accessed,3,ngx_http_upstream_rr_peer_s.accessed,,http\ngx_http_upstream_round_robin.h,accessed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3246,325523,checked,3,ngx_http_upstream_rr_peer_s.checked,,http\ngx_http_upstream_round_robin.h,checked,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3247,325524,max_fails,3,ngx_http_upstream_rr_peer_s.max_fails,,http\ngx_http_upstream_round_robin.h,max_fails,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3248,325525,fail_timeout,3,ngx_http_upstream_rr_peer_s.fail_timeout,,http\ngx_http_upstream_round_robin.h,fail_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3249,325526,slow_start,3,ngx_http_upstream_rr_peer_s.slow_start,,http\ngx_http_upstream_round_robin.h,slow_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3250,325527,start_time,3,ngx_http_upstream_rr_peer_s.start_time,,http\ngx_http_upstream_round_robin.h,start_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3251,325528,down,3,ngx_http_upstream_rr_peer_s.down,,http\ngx_http_upstream_round_robin.h,down,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3252,325529,ssl_session,3,ngx_http_upstream_rr_peer_s.ssl_session,,http\ngx_http_upstream_round_robin.h,*ssl_session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3253,325530,ssl_session_len,3,ngx_http_upstream_rr_peer_s.ssl_session_len,,http\ngx_http_upstream_round_robin.h,ssl_session_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3254,325531,lock,3,ngx_http_upstream_rr_peer_s.lock,,http\ngx_http_upstream_round_robin.h,lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3255,325532,next,3,ngx_http_upstream_rr_peer_s.next,,http\ngx_http_upstream_round_robin.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3256,325537,number,3,ngx_http_upstream_rr_peers_s.number,,http\ngx_http_upstream_round_robin.h,number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3257,325538,shpool,3,ngx_http_upstream_rr_peers_s.shpool,,http\ngx_http_upstream_round_robin.h,*shpool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3258,325539,rwlock,3,ngx_http_upstream_rr_peers_s.rwlock,,http\ngx_http_upstream_round_robin.h,rwlock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3259,325540,zone_next,3,ngx_http_upstream_rr_peers_s.zone_next,,http\ngx_http_upstream_round_robin.h,*zone_next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3260,325541,total_weight,3,ngx_http_upstream_rr_peers_s.total_weight,,http\ngx_http_upstream_round_robin.h,total_weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3261,325542,tries,3,ngx_http_upstream_rr_peers_s.tries,,http\ngx_http_upstream_round_robin.h,tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3262,325543,single,3,ngx_http_upstream_rr_peers_s.single,,http\ngx_http_upstream_round_robin.h,single:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3263,325544,weighted,3,ngx_http_upstream_rr_peers_s.weighted,,http\ngx_http_upstream_round_robin.h,weighted:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3264,325545,name,3,ngx_http_upstream_rr_peers_s.name,,http\ngx_http_upstream_round_robin.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3265,325546,next,3,ngx_http_upstream_rr_peers_s.next,,http\ngx_http_upstream_round_robin.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3266,325547,peer,3,ngx_http_upstream_rr_peers_s.peer,,http\ngx_http_upstream_round_robin.h,*peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3267,325549,config,3,ngx_http_upstream_rr_peer_data_t.config,,http\ngx_http_upstream_round_robin.h,config,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3268,325550,peers,3,ngx_http_upstream_rr_peer_data_t.peers,,http\ngx_http_upstream_round_robin.h,*peers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,25,0,1,1,0,0,,0,0,0,0,0,
3269,325551,current,3,ngx_http_upstream_rr_peer_data_t.current,,http\ngx_http_upstream_round_robin.h,*current,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3270,325552,tried,3,ngx_http_upstream_rr_peer_data_t.tried,,http\ngx_http_upstream_round_robin.h,*tried,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3271,325553,data,3,ngx_http_upstream_rr_peer_data_t.data,,http\ngx_http_upstream_round_robin.h,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3272,332744,name,3,ngx_http_variable_s.name,,http\ngx_http_variables.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3273,332745,set_handler,3,ngx_http_variable_s.set_handler,,http\ngx_http_variables.h,set_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3274,332746,get_handler,3,ngx_http_variable_s.get_handler,,http\ngx_http_variables.h,get_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3275,332747,data,3,ngx_http_variable_s.data,,http\ngx_http_variables.h,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3276,332748,flags,3,ngx_http_variable_s.flags,,http\ngx_http_variables.h,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3277,332749,index,3,ngx_http_variable_s.index,,http\ngx_http_variables.h,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3278,332791,hash,3,ngx_http_map_t.hash,,http\ngx_http_variables.h,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3279,332792,regex,3,ngx_http_map_t.regex,,http\ngx_http_variables.h,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3280,332793,nregex,3,ngx_http_map_t.nregex,,http\ngx_http_variables.h,nregex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3281,333921,name,3,ngx_http_v2_parse_header_t.name,,http\v2\ngx_http_v2.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3282,333922,offset,3,ngx_http_v2_parse_header_t.offset,,http\v2\ngx_http_v2.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3283,333923,hash,3,ngx_http_v2_parse_header_t.hash,,http\v2\ngx_http_v2.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3284,333924,hh,3,ngx_http_v2_parse_header_t.hh,,http\v2\ngx_http_v2.c,*hh,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3285,347690,name,3,ngx_http_v2_header_t.name,,http\v2\ngx_http_v2.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3286,347691,value,3,ngx_http_v2_header_t.value,,http\v2\ngx_http_v2.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3287,347694,sid,3,ngx_http_v2_state_t.sid,,http\v2\ngx_http_v2.h,sid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3288,347695,length,3,ngx_http_v2_state_t.length,,http\v2\ngx_http_v2.h,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3289,347696,padding,3,ngx_http_v2_state_t.padding,,http\v2\ngx_http_v2.h,padding,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3290,347697,flags,3,ngx_http_v2_state_t.flags,,http\v2\ngx_http_v2.h,flags:8,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3291,347698,incomplete,3,ngx_http_v2_state_t.incomplete,,http\v2\ngx_http_v2.h,incomplete:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3292,347699,keep_pool,3,ngx_http_v2_state_t.keep_pool,,http\v2\ngx_http_v2.h,keep_pool:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3293,347700,parse_name,3,ngx_http_v2_state_t.parse_name,,http\v2\ngx_http_v2.h,parse_name:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3294,347701,parse_value,3,ngx_http_v2_state_t.parse_value,,http\v2\ngx_http_v2.h,parse_value:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3295,347702,index,3,ngx_http_v2_state_t.index,,http\v2\ngx_http_v2.h,index:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3296,347703,header,3,ngx_http_v2_state_t.header,,http\v2\ngx_http_v2.h,header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3297,347704,header_limit,3,ngx_http_v2_state_t.header_limit,,http\v2\ngx_http_v2.h,header_limit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3298,347705,field_state,3,ngx_http_v2_state_t.field_state,,http\v2\ngx_http_v2.h,field_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3299,347706,field_start,3,ngx_http_v2_state_t.field_start,,http\v2\ngx_http_v2.h,*field_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3300,347707,field_end,3,ngx_http_v2_state_t.field_end,,http\v2\ngx_http_v2.h,*field_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3301,347708,field_rest,3,ngx_http_v2_state_t.field_rest,,http\v2\ngx_http_v2.h,field_rest,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3302,347709,pool,3,ngx_http_v2_state_t.pool,,http\v2\ngx_http_v2.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3303,347710,stream,3,ngx_http_v2_state_t.stream,,http\v2\ngx_http_v2.h,*stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3304,347711,buffer,3,ngx_http_v2_state_t.buffer,,http\v2\ngx_http_v2.h,buffer[NGX_HTTP_V2_STATE_BUFFER_SIZE],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3305,347712,buffer_used,3,ngx_http_v2_state_t.buffer_used,,http\v2\ngx_http_v2.h,buffer_used,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3306,347713,handler,3,ngx_http_v2_state_t.handler,,http\v2\ngx_http_v2.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3307,347724,entries,3,ngx_http_v2_hpack_t.entries,,http\v2\ngx_http_v2.h,**entries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3308,347725,added,3,ngx_http_v2_hpack_t.added,,http\v2\ngx_http_v2.h,added,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3309,347726,deleted,3,ngx_http_v2_hpack_t.deleted,,http\v2\ngx_http_v2.h,deleted,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3310,347727,reused,3,ngx_http_v2_hpack_t.reused,,http\v2\ngx_http_v2.h,reused,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3311,347728,allocated,3,ngx_http_v2_hpack_t.allocated,,http\v2\ngx_http_v2.h,allocated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3312,347729,size,3,ngx_http_v2_hpack_t.size,,http\v2\ngx_http_v2.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3313,347730,free,3,ngx_http_v2_hpack_t.free,,http\v2\ngx_http_v2.h,free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3314,347731,storage,3,ngx_http_v2_hpack_t.storage,,http\v2\ngx_http_v2.h,*storage,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3315,347732,pos,3,ngx_http_v2_hpack_t.pos,,http\v2\ngx_http_v2.h,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3316,347735,connection,3,ngx_http_v2_connection_s.connection,,http\v2\ngx_http_v2.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3317,347736,http_connection,3,ngx_http_v2_connection_s.http_connection,,http\v2\ngx_http_v2.h,*http_connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3318,347737,total_bytes,3,ngx_http_v2_connection_s.total_bytes,,http\v2\ngx_http_v2.h,total_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3319,347738,payload_bytes,3,ngx_http_v2_connection_s.payload_bytes,,http\v2\ngx_http_v2.h,payload_bytes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3320,347739,processing,3,ngx_http_v2_connection_s.processing,,http\v2\ngx_http_v2.h,processing,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3321,347740,frames,3,ngx_http_v2_connection_s.frames,,http\v2\ngx_http_v2.h,frames,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3322,347741,idle,3,ngx_http_v2_connection_s.idle,,http\v2\ngx_http_v2.h,idle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3323,347742,priority_limit,3,ngx_http_v2_connection_s.priority_limit,,http\v2\ngx_http_v2.h,priority_limit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3324,347743,pushing,3,ngx_http_v2_connection_s.pushing,,http\v2\ngx_http_v2.h,pushing,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3325,347744,concurrent_pushes,3,ngx_http_v2_connection_s.concurrent_pushes,,http\v2\ngx_http_v2.h,concurrent_pushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3326,347745,send_window,3,ngx_http_v2_connection_s.send_window,,http\v2\ngx_http_v2.h,send_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3327,347746,recv_window,3,ngx_http_v2_connection_s.recv_window,,http\v2\ngx_http_v2.h,recv_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3328,347747,init_window,3,ngx_http_v2_connection_s.init_window,,http\v2\ngx_http_v2.h,init_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3329,347748,frame_size,3,ngx_http_v2_connection_s.frame_size,,http\v2\ngx_http_v2.h,frame_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3330,347749,waiting,3,ngx_http_v2_connection_s.waiting,,http\v2\ngx_http_v2.h,waiting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3331,347750,state,3,ngx_http_v2_connection_s.state,,http\v2\ngx_http_v2.h,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3332,347751,hpack,3,ngx_http_v2_connection_s.hpack,,http\v2\ngx_http_v2.h,hpack,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3333,347752,pool,3,ngx_http_v2_connection_s.pool,,http\v2\ngx_http_v2.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3334,347753,free_frames,3,ngx_http_v2_connection_s.free_frames,,http\v2\ngx_http_v2.h,*free_frames,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3335,347754,free_fake_connections,3,ngx_http_v2_connection_s.free_fake_connections,,http\v2\ngx_http_v2.h,*free_fake_connections,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3336,347755,streams_index,3,ngx_http_v2_connection_s.streams_index,,http\v2\ngx_http_v2.h,**streams_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3337,347756,last_out,3,ngx_http_v2_connection_s.last_out,,http\v2\ngx_http_v2.h,*last_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3338,347757,dependencies,3,ngx_http_v2_connection_s.dependencies,,http\v2\ngx_http_v2.h,dependencies,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3339,347758,closed,3,ngx_http_v2_connection_s.closed,,http\v2\ngx_http_v2.h,closed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3340,347759,last_sid,3,ngx_http_v2_connection_s.last_sid,,http\v2\ngx_http_v2.h,last_sid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3341,347760,last_push,3,ngx_http_v2_connection_s.last_push,,http\v2\ngx_http_v2.h,last_push,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3342,347761,lingering_time,3,ngx_http_v2_connection_s.lingering_time,,http\v2\ngx_http_v2.h,lingering_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3343,347762,closed_nodes,3,ngx_http_v2_connection_s.closed_nodes,,http\v2\ngx_http_v2.h,closed_nodes:8,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3344,347763,settings_ack,3,ngx_http_v2_connection_s.settings_ack,,http\v2\ngx_http_v2.h,settings_ack:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3345,347764,table_update,3,ngx_http_v2_connection_s.table_update,,http\v2\ngx_http_v2.h,table_update:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3346,347765,blocked,3,ngx_http_v2_connection_s.blocked,,http\v2\ngx_http_v2.h,blocked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3347,347766,goaway,3,ngx_http_v2_connection_s.goaway,,http\v2\ngx_http_v2.h,goaway:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3348,347767,push_disabled,3,ngx_http_v2_connection_s.push_disabled,,http\v2\ngx_http_v2.h,push_disabled:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3349,347769,id,3,ngx_http_v2_node_s.id,,http\v2\ngx_http_v2.h,id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3350,347770,index,3,ngx_http_v2_node_s.index,,http\v2\ngx_http_v2.h,*index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3351,347771,parent,3,ngx_http_v2_node_s.parent,,http\v2\ngx_http_v2.h,*parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3352,347772,queue,3,ngx_http_v2_node_s.queue,,http\v2\ngx_http_v2.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3353,347773,children,3,ngx_http_v2_node_s.children,,http\v2\ngx_http_v2.h,children,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3354,347774,reuse,3,ngx_http_v2_node_s.reuse,,http\v2\ngx_http_v2.h,reuse,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3355,347775,rank,3,ngx_http_v2_node_s.rank,,http\v2\ngx_http_v2.h,rank,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3356,347776,weight,3,ngx_http_v2_node_s.weight,,http\v2\ngx_http_v2.h,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3357,347777,rel_weight,3,ngx_http_v2_node_s.rel_weight,,http\v2\ngx_http_v2.h,rel_weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3358,347778,stream,3,ngx_http_v2_node_s.stream,,http\v2\ngx_http_v2.h,*stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3359,347780,request,3,ngx_http_v2_stream_s.request,,http\v2\ngx_http_v2.h,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3360,347781,connection,3,ngx_http_v2_stream_s.connection,,http\v2\ngx_http_v2.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3361,347782,node,3,ngx_http_v2_stream_s.node,,http\v2\ngx_http_v2.h,*node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3362,347783,queued,3,ngx_http_v2_stream_s.queued,,http\v2\ngx_http_v2.h,queued,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3363,347784,send_window,3,ngx_http_v2_stream_s.send_window,,http\v2\ngx_http_v2.h,send_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3364,347785,recv_window,3,ngx_http_v2_stream_s.recv_window,,http\v2\ngx_http_v2.h,recv_window,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3365,347786,preread,3,ngx_http_v2_stream_s.preread,,http\v2\ngx_http_v2.h,*preread,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3366,347787,frames,3,ngx_http_v2_stream_s.frames,,http\v2\ngx_http_v2.h,frames,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3367,347788,free_frames,3,ngx_http_v2_stream_s.free_frames,,http\v2\ngx_http_v2.h,*free_frames,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3368,347789,free_frame_headers,3,ngx_http_v2_stream_s.free_frame_headers,,http\v2\ngx_http_v2.h,*free_frame_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3369,347790,free_bufs,3,ngx_http_v2_stream_s.free_bufs,,http\v2\ngx_http_v2.h,*free_bufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3370,347791,queue,3,ngx_http_v2_stream_s.queue,,http\v2\ngx_http_v2.h,queue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3371,347792,cookies,3,ngx_http_v2_stream_s.cookies,,http\v2\ngx_http_v2.h,*cookies,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3372,347793,pool,3,ngx_http_v2_stream_s.pool,,http\v2\ngx_http_v2.h,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3373,347794,waiting,3,ngx_http_v2_stream_s.waiting,,http\v2\ngx_http_v2.h,waiting:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3374,347795,blocked,3,ngx_http_v2_stream_s.blocked,,http\v2\ngx_http_v2.h,blocked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3375,347796,exhausted,3,ngx_http_v2_stream_s.exhausted,,http\v2\ngx_http_v2.h,exhausted:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3376,347797,in_closed,3,ngx_http_v2_stream_s.in_closed,,http\v2\ngx_http_v2.h,in_closed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3377,347798,out_closed,3,ngx_http_v2_stream_s.out_closed,,http\v2\ngx_http_v2.h,out_closed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3378,347799,rst_sent,3,ngx_http_v2_stream_s.rst_sent,,http\v2\ngx_http_v2.h,rst_sent:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3379,347800,no_flow_control,3,ngx_http_v2_stream_s.no_flow_control,,http\v2\ngx_http_v2.h,no_flow_control:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3380,347801,skip_data,3,ngx_http_v2_stream_s.skip_data,,http\v2\ngx_http_v2.h,skip_data:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3381,347803,next,3,ngx_http_v2_out_frame_s.next,,http\v2\ngx_http_v2.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3382,347804,first,3,ngx_http_v2_out_frame_s.first,,http\v2\ngx_http_v2.h,*first,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3383,347805,last,3,ngx_http_v2_out_frame_s.last,,http\v2\ngx_http_v2.h,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3384,347812,stream,3,ngx_http_v2_out_frame_s.stream,,http\v2\ngx_http_v2.h,*stream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3385,347813,length,3,ngx_http_v2_out_frame_s.length,,http\v2\ngx_http_v2.h,length,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3386,347814,blocked,3,ngx_http_v2_out_frame_s.blocked,,http\v2\ngx_http_v2.h,blocked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3387,347815,fin,3,ngx_http_v2_out_frame_s.fin,,http\v2\ngx_http_v2.h,fin:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3388,348059,name,3,ngx_http_v2_push_header_t.name,,http\v2\ngx_http_v2_filter_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3389,348060,index,3,ngx_http_v2_push_header_t.index,,http\v2\ngx_http_v2_filter_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3390,348061,offset,3,ngx_http_v2_push_header_t.offset,,http\v2\ngx_http_v2_filter_module.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3391,354348,next,3,ngx_http_v2_huff_decode_code_t.next,,http\v2\ngx_http_v2_huff_decode.c,next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3392,354349,emit,3,ngx_http_v2_huff_decode_code_t.emit,,http\v2\ngx_http_v2_huff_decode.c,emit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3393,354350,sym,3,ngx_http_v2_huff_decode_code_t.sym,,http\v2\ngx_http_v2_huff_decode.c,sym,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3394,354351,ending,3,ngx_http_v2_huff_decode_code_t.ending,,http\v2\ngx_http_v2_huff_decode.c,ending,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3395,375265,code,3,ngx_http_v2_huff_encode_code_t.code,,http\v2\ngx_http_v2_huff_encode.c,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3396,375266,len,3,ngx_http_v2_huff_encode_code_t.len,,http\v2\ngx_http_v2_huff_encode.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3397,378127,recv_buffer_size,3,ngx_http_v2_main_conf_t.recv_buffer_size,,http\v2\ngx_http_v2_module.h,recv_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3398,378128,recv_buffer,3,ngx_http_v2_main_conf_t.recv_buffer,,http\v2\ngx_http_v2_module.h,*recv_buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3399,378131,pool_size,3,ngx_http_v2_srv_conf_t.pool_size,,http\v2\ngx_http_v2_module.h,pool_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3400,378132,concurrent_streams,3,ngx_http_v2_srv_conf_t.concurrent_streams,,http\v2\ngx_http_v2_module.h,concurrent_streams,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3401,378133,concurrent_pushes,3,ngx_http_v2_srv_conf_t.concurrent_pushes,,http\v2\ngx_http_v2_module.h,concurrent_pushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3402,378134,preread_size,3,ngx_http_v2_srv_conf_t.preread_size,,http\v2\ngx_http_v2_module.h,preread_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3403,378135,streams_index_mask,3,ngx_http_v2_srv_conf_t.streams_index_mask,,http\v2\ngx_http_v2_module.h,streams_index_mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3404,378138,chunk_size,3,ngx_http_v2_loc_conf_t.chunk_size,,http\v2\ngx_http_v2_module.h,chunk_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3405,378139,push_preload,3,ngx_http_v2_loc_conf_t.push_preload,,http\v2\ngx_http_v2_module.h,push_preload,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3406,378140,push,3,ngx_http_v2_loc_conf_t.push,,http\v2\ngx_http_v2_module.h,push,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3407,378141,pushes,3,ngx_http_v2_loc_conf_t.pushes,,http\v2\ngx_http_v2_module.h,*pushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3408,380889,main_conf,3,ngx_mail_conf_ctx_t.main_conf,,mail\ngx_mail.h,**main_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3409,380890,srv_conf,3,ngx_mail_conf_ctx_t.srv_conf,,mail\ngx_mail.h,**srv_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3410,380894,sockaddr,3,ngx_mail_listen_t.sockaddr,,mail\ngx_mail.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3411,380895,socklen,3,ngx_mail_listen_t.socklen,,mail\ngx_mail.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3412,380896,addr_text,3,ngx_mail_listen_t.addr_text,,mail\ngx_mail.h,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3413,380897,ctx,3,ngx_mail_listen_t.ctx,,mail\ngx_mail.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3414,380898,bind,3,ngx_mail_listen_t.bind,,mail\ngx_mail.h,bind:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3415,380899,wildcard,3,ngx_mail_listen_t.wildcard,,mail\ngx_mail.h,wildcard:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3416,380900,ssl,3,ngx_mail_listen_t.ssl,,mail\ngx_mail.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3417,380901,ipv6only,3,ngx_mail_listen_t.ipv6only,,mail\ngx_mail.h,ipv6only:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3418,380902,so_keepalive,3,ngx_mail_listen_t.so_keepalive,,mail\ngx_mail.h,so_keepalive:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3419,380903,proxy_protocol,3,ngx_mail_listen_t.proxy_protocol,,mail\ngx_mail.h,proxy_protocol:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3420,380904,tcp_keepidle,3,ngx_mail_listen_t.tcp_keepidle,,mail\ngx_mail.h,tcp_keepidle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3421,380905,tcp_keepintvl,3,ngx_mail_listen_t.tcp_keepintvl,,mail\ngx_mail.h,tcp_keepintvl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3422,380906,tcp_keepcnt,3,ngx_mail_listen_t.tcp_keepcnt,,mail\ngx_mail.h,tcp_keepcnt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3423,380907,backlog,3,ngx_mail_listen_t.backlog,,mail\ngx_mail.h,backlog,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3424,380908,rcvbuf,3,ngx_mail_listen_t.rcvbuf,,mail\ngx_mail.h,rcvbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3425,380909,sndbuf,3,ngx_mail_listen_t.sndbuf,,mail\ngx_mail.h,sndbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3426,380912,ctx,3,ngx_mail_addr_conf_t.ctx,,mail\ngx_mail.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3427,380913,addr_text,3,ngx_mail_addr_conf_t.addr_text,,mail\ngx_mail.h,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3428,380914,ssl,3,ngx_mail_addr_conf_t.ssl,,mail\ngx_mail.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3429,380915,proxy_protocol,3,ngx_mail_addr_conf_t.proxy_protocol,,mail\ngx_mail.h,proxy_protocol:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3430,380918,addr,3,ngx_mail_in_addr_t.addr,,mail\ngx_mail.h,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3431,380919,conf,3,ngx_mail_in_addr_t.conf,,mail\ngx_mail.h,conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3432,380922,addrs,3,ngx_mail_port_t.addrs,,mail\ngx_mail.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3433,380923,naddrs,3,ngx_mail_port_t.naddrs,,mail\ngx_mail.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3434,380926,family,3,ngx_mail_conf_port_t.family,,mail\ngx_mail.h,family,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3435,380927,port,3,ngx_mail_conf_port_t.port,,mail\ngx_mail.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3436,380928,addrs,3,ngx_mail_conf_port_t.addrs,,mail\ngx_mail.h,addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3437,380931,opt,3,ngx_mail_conf_addr_t.opt,,mail\ngx_mail.h,opt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3438,380934,servers,3,ngx_mail_core_main_conf_t.servers,,mail\ngx_mail.h,servers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3439,380935,listen,3,ngx_mail_core_main_conf_t.listen,,mail\ngx_mail.h,listen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3440,380940,protocol,3,ngx_mail_core_srv_conf_t.protocol,,mail\ngx_mail.h,*protocol,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3441,380941,timeout,3,ngx_mail_core_srv_conf_t.timeout,,mail\ngx_mail.h,timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3442,380942,resolver_timeout,3,ngx_mail_core_srv_conf_t.resolver_timeout,,mail\ngx_mail.h,resolver_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3443,380943,max_errors,3,ngx_mail_core_srv_conf_t.max_errors,,mail\ngx_mail.h,max_errors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3444,380944,server_name,3,ngx_mail_core_srv_conf_t.server_name,,mail\ngx_mail.h,server_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3445,380945,file_name,3,ngx_mail_core_srv_conf_t.file_name,,mail\ngx_mail.h,*file_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3446,380946,line,3,ngx_mail_core_srv_conf_t.line,,mail\ngx_mail.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3447,380947,resolver,3,ngx_mail_core_srv_conf_t.resolver,,mail\ngx_mail.h,*resolver,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3448,380948,error_log,3,ngx_mail_core_srv_conf_t.error_log,,mail\ngx_mail.h,*error_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3449,380949,ctx,3,ngx_mail_core_srv_conf_t.ctx,,mail\ngx_mail.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3450,380950,listen,3,ngx_mail_core_srv_conf_t.listen,,mail\ngx_mail.h,listen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3451,380953,ngx_pop3_start,3,ngx_pop3_state_e.ngx_pop3_start,,mail\ngx_mail.h,ngx_pop3_start = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3452,380954,ngx_pop3_user,3,ngx_pop3_state_e.ngx_pop3_user,,mail\ngx_mail.h,ngx_pop3_user,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3453,380955,ngx_pop3_passwd,3,ngx_pop3_state_e.ngx_pop3_passwd,,mail\ngx_mail.h,ngx_pop3_passwd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3454,380956,ngx_pop3_auth_login_username,3,ngx_pop3_state_e.ngx_pop3_auth_login_username,,mail\ngx_mail.h,ngx_pop3_auth_login_username,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3455,380957,ngx_pop3_auth_login_password,3,ngx_pop3_state_e.ngx_pop3_auth_login_password,,mail\ngx_mail.h,ngx_pop3_auth_login_password,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3456,380958,ngx_pop3_auth_plain,3,ngx_pop3_state_e.ngx_pop3_auth_plain,,mail\ngx_mail.h,ngx_pop3_auth_plain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3457,380959,ngx_pop3_auth_cram_md5,3,ngx_pop3_state_e.ngx_pop3_auth_cram_md5,,mail\ngx_mail.h,ngx_pop3_auth_cram_md5,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3458,380960,ngx_pop3_auth_external,3,ngx_pop3_state_e.ngx_pop3_auth_external,,mail\ngx_mail.h,ngx_pop3_auth_external,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3459,380970,ngx_imap_start,3,ngx_imap_state_e.ngx_imap_start,,mail\ngx_mail.h,ngx_imap_start = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3460,380971,ngx_imap_auth_login_username,3,ngx_imap_state_e.ngx_imap_auth_login_username,,mail\ngx_mail.h,ngx_imap_auth_login_username,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3461,380972,ngx_imap_auth_login_password,3,ngx_imap_state_e.ngx_imap_auth_login_password,,mail\ngx_mail.h,ngx_imap_auth_login_password,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3462,380973,ngx_imap_auth_plain,3,ngx_imap_state_e.ngx_imap_auth_plain,,mail\ngx_mail.h,ngx_imap_auth_plain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3463,380974,ngx_imap_auth_cram_md5,3,ngx_imap_state_e.ngx_imap_auth_cram_md5,,mail\ngx_mail.h,ngx_imap_auth_cram_md5,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3464,380975,ngx_imap_auth_external,3,ngx_imap_state_e.ngx_imap_auth_external,,mail\ngx_mail.h,ngx_imap_auth_external,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3465,380976,ngx_imap_login,3,ngx_imap_state_e.ngx_imap_login,,mail\ngx_mail.h,ngx_imap_login,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3466,380977,ngx_imap_user,3,ngx_imap_state_e.ngx_imap_user,,mail\ngx_mail.h,ngx_imap_user,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3467,380978,ngx_imap_passwd,3,ngx_imap_state_e.ngx_imap_passwd,,mail\ngx_mail.h,ngx_imap_passwd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3468,380988,ngx_smtp_start,3,ngx_smtp_state_e.ngx_smtp_start,,mail\ngx_mail.h,ngx_smtp_start = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3469,380989,ngx_smtp_auth_login_username,3,ngx_smtp_state_e.ngx_smtp_auth_login_username,,mail\ngx_mail.h,ngx_smtp_auth_login_username,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3470,380990,ngx_smtp_auth_login_password,3,ngx_smtp_state_e.ngx_smtp_auth_login_password,,mail\ngx_mail.h,ngx_smtp_auth_login_password,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3471,380991,ngx_smtp_auth_plain,3,ngx_smtp_state_e.ngx_smtp_auth_plain,,mail\ngx_mail.h,ngx_smtp_auth_plain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3472,380992,ngx_smtp_auth_cram_md5,3,ngx_smtp_state_e.ngx_smtp_auth_cram_md5,,mail\ngx_mail.h,ngx_smtp_auth_cram_md5,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3473,380993,ngx_smtp_auth_external,3,ngx_smtp_state_e.ngx_smtp_auth_external,,mail\ngx_mail.h,ngx_smtp_auth_external,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3474,380994,ngx_smtp_helo,3,ngx_smtp_state_e.ngx_smtp_helo,,mail\ngx_mail.h,ngx_smtp_helo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3475,380995,ngx_smtp_helo_xclient,3,ngx_smtp_state_e.ngx_smtp_helo_xclient,,mail\ngx_mail.h,ngx_smtp_helo_xclient,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3476,380996,ngx_smtp_helo_auth,3,ngx_smtp_state_e.ngx_smtp_helo_auth,,mail\ngx_mail.h,ngx_smtp_helo_auth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3477,380997,ngx_smtp_helo_from,3,ngx_smtp_state_e.ngx_smtp_helo_from,,mail\ngx_mail.h,ngx_smtp_helo_from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3478,380998,ngx_smtp_xclient,3,ngx_smtp_state_e.ngx_smtp_xclient,,mail\ngx_mail.h,ngx_smtp_xclient,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3479,380999,ngx_smtp_xclient_from,3,ngx_smtp_state_e.ngx_smtp_xclient_from,,mail\ngx_mail.h,ngx_smtp_xclient_from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3480,381000,ngx_smtp_xclient_helo,3,ngx_smtp_state_e.ngx_smtp_xclient_helo,,mail\ngx_mail.h,ngx_smtp_xclient_helo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3481,381001,ngx_smtp_xclient_auth,3,ngx_smtp_state_e.ngx_smtp_xclient_auth,,mail\ngx_mail.h,ngx_smtp_xclient_auth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3482,381002,ngx_smtp_from,3,ngx_smtp_state_e.ngx_smtp_from,,mail\ngx_mail.h,ngx_smtp_from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3483,381003,ngx_smtp_to,3,ngx_smtp_state_e.ngx_smtp_to,,mail\ngx_mail.h,ngx_smtp_to,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3484,381013,upstream,3,ngx_mail_proxy_ctx_t.upstream,,mail\ngx_mail.h,upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3485,381014,buffer,3,ngx_mail_proxy_ctx_t.buffer,,mail\ngx_mail.h,*buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3486,381015,proxy_protocol,3,ngx_mail_proxy_ctx_t.proxy_protocol,,mail\ngx_mail.h,proxy_protocol,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3487,381018,signature,3,ngx_mail_session_t.signature,,mail\ngx_mail.h,signature,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3488,381019,connection,3,ngx_mail_session_t.connection,,mail\ngx_mail.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3489,381020,out,3,ngx_mail_session_t.out,,mail\ngx_mail.h,out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,27,0,1,1,0,0,,0,0,0,0,0,
3490,381021,buffer,3,ngx_mail_session_t.buffer,,mail\ngx_mail.h,*buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,42,0,1,1,0,0,,0,0,0,0,0,
3491,381022,ctx,3,ngx_mail_session_t.ctx,,mail\ngx_mail.h,**ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3492,381023,main_conf,3,ngx_mail_session_t.main_conf,,mail\ngx_mail.h,**main_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3493,381024,srv_conf,3,ngx_mail_session_t.srv_conf,,mail\ngx_mail.h,**srv_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3494,381025,resolver_ctx,3,ngx_mail_session_t.resolver_ctx,,mail\ngx_mail.h,*resolver_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3495,381026,proxy,3,ngx_mail_session_t.proxy,,mail\ngx_mail.h,*proxy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3496,381027,mail_state,3,ngx_mail_session_t.mail_state,,mail\ngx_mail.h,mail_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
3497,381028,ssl,3,ngx_mail_session_t.ssl,,mail\ngx_mail.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3498,381029,protocol,3,ngx_mail_session_t.protocol,,mail\ngx_mail.h,protocol:3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3499,381030,blocked,3,ngx_mail_session_t.blocked,,mail\ngx_mail.h,blocked:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3500,381031,quit,3,ngx_mail_session_t.quit,,mail\ngx_mail.h,quit:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3501,381032,quoted,3,ngx_mail_session_t.quoted,,mail\ngx_mail.h,quoted:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3502,381033,backslash,3,ngx_mail_session_t.backslash,,mail\ngx_mail.h,backslash:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3503,381034,no_sync_literal,3,ngx_mail_session_t.no_sync_literal,,mail\ngx_mail.h,no_sync_literal:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3504,381035,starttls,3,ngx_mail_session_t.starttls,,mail\ngx_mail.h,starttls:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3505,381036,esmtp,3,ngx_mail_session_t.esmtp,,mail\ngx_mail.h,esmtp:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3506,381037,auth_method,3,ngx_mail_session_t.auth_method,,mail\ngx_mail.h,auth_method:3,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3507,381038,auth_wait,3,ngx_mail_session_t.auth_wait,,mail\ngx_mail.h,auth_wait:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3508,381039,login,3,ngx_mail_session_t.login,,mail\ngx_mail.h,login,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3509,381040,passwd,3,ngx_mail_session_t.passwd,,mail\ngx_mail.h,passwd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3510,381041,salt,3,ngx_mail_session_t.salt,,mail\ngx_mail.h,salt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3511,381042,tag,3,ngx_mail_session_t.tag,,mail\ngx_mail.h,tag,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3512,381043,tagged_line,3,ngx_mail_session_t.tagged_line,,mail\ngx_mail.h,tagged_line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3513,381044,text,3,ngx_mail_session_t.text,,mail\ngx_mail.h,text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3514,381045,addr_text,3,ngx_mail_session_t.addr_text,,mail\ngx_mail.h,*addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3515,381046,host,3,ngx_mail_session_t.host,,mail\ngx_mail.h,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3516,381047,smtp_helo,3,ngx_mail_session_t.smtp_helo,,mail\ngx_mail.h,smtp_helo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3517,381048,smtp_from,3,ngx_mail_session_t.smtp_from,,mail\ngx_mail.h,smtp_from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3518,381049,smtp_to,3,ngx_mail_session_t.smtp_to,,mail\ngx_mail.h,smtp_to,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3519,381050,cmd,3,ngx_mail_session_t.cmd,,mail\ngx_mail.h,cmd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3520,381051,command,3,ngx_mail_session_t.command,,mail\ngx_mail.h,command,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
3521,381052,args,3,ngx_mail_session_t.args,,mail\ngx_mail.h,args,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3522,381053,errors,3,ngx_mail_session_t.errors,,mail\ngx_mail.h,errors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3523,381054,login_attempt,3,ngx_mail_session_t.login_attempt,,mail\ngx_mail.h,login_attempt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3524,381055,state,3,ngx_mail_session_t.state,,mail\ngx_mail.h,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,16,0,1,1,0,0,,0,0,0,0,0,
3525,381056,tag_start,3,ngx_mail_session_t.tag_start,,mail\ngx_mail.h,*tag_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3526,381057,cmd_start,3,ngx_mail_session_t.cmd_start,,mail\ngx_mail.h,*cmd_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
3527,381058,arg_start,3,ngx_mail_session_t.arg_start,,mail\ngx_mail.h,*arg_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
3528,381059,literal_len,3,ngx_mail_session_t.literal_len,,mail\ngx_mail.h,literal_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3529,381062,client,3,ngx_mail_log_ctx_t.client,,mail\ngx_mail.h,*client,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3530,381063,session,3,ngx_mail_log_ctx_t.session,,mail\ngx_mail.h,*session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3531,381087,name,3,ngx_mail_protocol_s.name,,mail\ngx_mail.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3532,381088,port,3,ngx_mail_protocol_s.port,,mail\ngx_mail.h,port[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3533,381089,type,3,ngx_mail_protocol_s.type,,mail\ngx_mail.h,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3534,381090,init_session,3,ngx_mail_protocol_s.init_session,,mail\ngx_mail.h,init_session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3535,381091,init_protocol,3,ngx_mail_protocol_s.init_protocol,,mail\ngx_mail.h,init_protocol,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3536,381092,parse_command,3,ngx_mail_protocol_s.parse_command,,mail\ngx_mail.h,parse_command,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3537,381093,auth_state,3,ngx_mail_protocol_s.auth_state,,mail\ngx_mail.h,auth_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3538,381094,internal_server_error,3,ngx_mail_protocol_s.internal_server_error,,mail\ngx_mail.h,internal_server_error,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3539,381095,cert_error,3,ngx_mail_protocol_s.cert_error,,mail\ngx_mail.h,cert_error,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3540,381096,no_cert,3,ngx_mail_protocol_s.no_cert,,mail\ngx_mail.h,no_cert,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3541,381104,protocol,3,ngx_mail_module_t.protocol,,mail\ngx_mail.h,*protocol,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3542,381263,peer,3,ngx_mail_auth_http_conf_t.peer,,mail\ngx_mail_auth_http_module.c,*peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3543,381264,timeout,3,ngx_mail_auth_http_conf_t.timeout,,mail\ngx_mail_auth_http_module.c,timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3544,381265,pass_client_cert,3,ngx_mail_auth_http_conf_t.pass_client_cert,,mail\ngx_mail_auth_http_module.c,pass_client_cert,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3545,381266,host_header,3,ngx_mail_auth_http_conf_t.host_header,,mail\ngx_mail_auth_http_module.c,host_header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3546,381267,uri,3,ngx_mail_auth_http_conf_t.uri,,mail\ngx_mail_auth_http_module.c,uri,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3547,381268,header,3,ngx_mail_auth_http_conf_t.header,,mail\ngx_mail_auth_http_module.c,header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3548,381269,headers,3,ngx_mail_auth_http_conf_t.headers,,mail\ngx_mail_auth_http_module.c,*headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3549,381270,file,3,ngx_mail_auth_http_conf_t.file,,mail\ngx_mail_auth_http_module.c,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3550,381271,line,3,ngx_mail_auth_http_conf_t.line,,mail\ngx_mail_auth_http_module.c,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3551,381282,request,3,ngx_mail_auth_http_ctx_s.request,,mail\ngx_mail_auth_http_module.c,*request,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3552,381283,response,3,ngx_mail_auth_http_ctx_s.response,,mail\ngx_mail_auth_http_module.c,*response,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3553,381284,peer,3,ngx_mail_auth_http_ctx_s.peer,,mail\ngx_mail_auth_http_module.c,peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3554,381285,handler,3,ngx_mail_auth_http_ctx_s.handler,,mail\ngx_mail_auth_http_module.c,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3555,381286,state,3,ngx_mail_auth_http_ctx_s.state,,mail\ngx_mail_auth_http_module.c,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3556,381287,header_name_start,3,ngx_mail_auth_http_ctx_s.header_name_start,,mail\ngx_mail_auth_http_module.c,*header_name_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3557,381288,header_name_end,3,ngx_mail_auth_http_ctx_s.header_name_end,,mail\ngx_mail_auth_http_module.c,*header_name_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3558,381289,header_start,3,ngx_mail_auth_http_ctx_s.header_start,,mail\ngx_mail_auth_http_module.c,*header_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3559,381290,header_end,3,ngx_mail_auth_http_ctx_s.header_end,,mail\ngx_mail_auth_http_module.c,*header_end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3560,381291,addr,3,ngx_mail_auth_http_ctx_s.addr,,mail\ngx_mail_auth_http_module.c,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3561,381292,port,3,ngx_mail_auth_http_ctx_s.port,,mail\ngx_mail_auth_http_module.c,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3562,381293,err,3,ngx_mail_auth_http_ctx_s.err,,mail\ngx_mail_auth_http_module.c,err,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3563,381294,errmsg,3,ngx_mail_auth_http_ctx_s.errmsg,,mail\ngx_mail_auth_http_module.c,errmsg,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3564,381295,errcode,3,ngx_mail_auth_http_ctx_s.errcode,,mail\ngx_mail_auth_http_module.c,errcode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3565,381296,sleep,3,ngx_mail_auth_http_ctx_s.sleep,,mail\ngx_mail_auth_http_module.c,sleep,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3566,381297,pool,3,ngx_mail_auth_http_ctx_s.pool,,mail\ngx_mail_auth_http_module.c,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3567,391139,client_buffer_size,3,ngx_mail_imap_srv_conf_t.client_buffer_size,,mail\ngx_mail_imap_module.h,client_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3568,391140,capability,3,ngx_mail_imap_srv_conf_t.capability,,mail\ngx_mail_imap_module.h,capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3569,391141,starttls_capability,3,ngx_mail_imap_srv_conf_t.starttls_capability,,mail\ngx_mail_imap_module.h,starttls_capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3570,391142,starttls_only_capability,3,ngx_mail_imap_srv_conf_t.starttls_only_capability,,mail\ngx_mail_imap_module.h,starttls_only_capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3571,391143,auth_methods,3,ngx_mail_imap_srv_conf_t.auth_methods,,mail\ngx_mail_imap_module.h,auth_methods,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3572,391144,capabilities,3,ngx_mail_imap_srv_conf_t.capabilities,,mail\ngx_mail_imap_module.h,capabilities,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3573,396064,capability,3,ngx_mail_pop3_srv_conf_t.capability,,mail\ngx_mail_pop3_module.h,capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3574,396065,starttls_capability,3,ngx_mail_pop3_srv_conf_t.starttls_capability,,mail\ngx_mail_pop3_module.h,starttls_capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3575,396066,starttls_only_capability,3,ngx_mail_pop3_srv_conf_t.starttls_only_capability,,mail\ngx_mail_pop3_module.h,starttls_only_capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3576,396067,auth_capability,3,ngx_mail_pop3_srv_conf_t.auth_capability,,mail\ngx_mail_pop3_module.h,auth_capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3577,396068,auth_methods,3,ngx_mail_pop3_srv_conf_t.auth_methods,,mail\ngx_mail_pop3_module.h,auth_methods,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3578,396069,capabilities,3,ngx_mail_pop3_srv_conf_t.capabilities,,mail\ngx_mail_pop3_module.h,capabilities,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3579,396109,enable,3,ngx_mail_proxy_conf_t.enable,,mail\ngx_mail_proxy_module.c,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3580,396110,pass_error_message,3,ngx_mail_proxy_conf_t.pass_error_message,,mail\ngx_mail_proxy_module.c,pass_error_message,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3581,396111,xclient,3,ngx_mail_proxy_conf_t.xclient,,mail\ngx_mail_proxy_module.c,xclient,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3582,396112,smtp_auth,3,ngx_mail_proxy_conf_t.smtp_auth,,mail\ngx_mail_proxy_module.c,smtp_auth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3583,396113,proxy_protocol,3,ngx_mail_proxy_conf_t.proxy_protocol,,mail\ngx_mail_proxy_module.c,proxy_protocol,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3584,396114,buffer_size,3,ngx_mail_proxy_conf_t.buffer_size,,mail\ngx_mail_proxy_module.c,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3585,396115,timeout,3,ngx_mail_proxy_conf_t.timeout,,mail\ngx_mail_proxy_module.c,timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3586,400233,from,3,ngx_mail_realip_srv_conf_t.from,,mail\ngx_mail_realip_module.c,*from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3587,403945,greeting_delay,3,ngx_mail_smtp_srv_conf_t.greeting_delay,,mail\ngx_mail_smtp_module.h,greeting_delay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3588,403946,client_buffer_size,3,ngx_mail_smtp_srv_conf_t.client_buffer_size,,mail\ngx_mail_smtp_module.h,client_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3589,403947,capability,3,ngx_mail_smtp_srv_conf_t.capability,,mail\ngx_mail_smtp_module.h,capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3590,403948,starttls_capability,3,ngx_mail_smtp_srv_conf_t.starttls_capability,,mail\ngx_mail_smtp_module.h,starttls_capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3591,403949,starttls_only_capability,3,ngx_mail_smtp_srv_conf_t.starttls_only_capability,,mail\ngx_mail_smtp_module.h,starttls_only_capability,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3592,403950,server_name,3,ngx_mail_smtp_srv_conf_t.server_name,,mail\ngx_mail_smtp_module.h,server_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3593,403951,greeting,3,ngx_mail_smtp_srv_conf_t.greeting,,mail\ngx_mail_smtp_module.h,greeting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3594,403952,auth_methods,3,ngx_mail_smtp_srv_conf_t.auth_methods,,mail\ngx_mail_smtp_module.h,auth_methods,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3595,403953,capabilities,3,ngx_mail_smtp_srv_conf_t.capabilities,,mail\ngx_mail_smtp_module.h,capabilities,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3596,405711,enable,3,ngx_mail_ssl_conf_t.enable,,mail\ngx_mail_ssl_module.h,enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3597,405712,prefer_server_ciphers,3,ngx_mail_ssl_conf_t.prefer_server_ciphers,,mail\ngx_mail_ssl_module.h,prefer_server_ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3598,405713,ssl,3,ngx_mail_ssl_conf_t.ssl,,mail\ngx_mail_ssl_module.h,ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3599,405714,starttls,3,ngx_mail_ssl_conf_t.starttls,,mail\ngx_mail_ssl_module.h,starttls,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3600,405715,listen,3,ngx_mail_ssl_conf_t.listen,,mail\ngx_mail_ssl_module.h,listen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3601,405716,protocols,3,ngx_mail_ssl_conf_t.protocols,,mail\ngx_mail_ssl_module.h,protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3602,405717,verify,3,ngx_mail_ssl_conf_t.verify,,mail\ngx_mail_ssl_module.h,verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3603,405718,verify_depth,3,ngx_mail_ssl_conf_t.verify_depth,,mail\ngx_mail_ssl_module.h,verify_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3604,405719,builtin_session_cache,3,ngx_mail_ssl_conf_t.builtin_session_cache,,mail\ngx_mail_ssl_module.h,builtin_session_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3605,405720,session_timeout,3,ngx_mail_ssl_conf_t.session_timeout,,mail\ngx_mail_ssl_module.h,session_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3606,405721,certificates,3,ngx_mail_ssl_conf_t.certificates,,mail\ngx_mail_ssl_module.h,*certificates,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3607,405722,certificate_keys,3,ngx_mail_ssl_conf_t.certificate_keys,,mail\ngx_mail_ssl_module.h,*certificate_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3608,405723,dhparam,3,ngx_mail_ssl_conf_t.dhparam,,mail\ngx_mail_ssl_module.h,dhparam,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3609,405724,ecdh_curve,3,ngx_mail_ssl_conf_t.ecdh_curve,,mail\ngx_mail_ssl_module.h,ecdh_curve,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3610,405725,client_certificate,3,ngx_mail_ssl_conf_t.client_certificate,,mail\ngx_mail_ssl_module.h,client_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3611,405726,trusted_certificate,3,ngx_mail_ssl_conf_t.trusted_certificate,,mail\ngx_mail_ssl_module.h,trusted_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3612,405727,crl,3,ngx_mail_ssl_conf_t.crl,,mail\ngx_mail_ssl_module.h,crl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3613,405728,ciphers,3,ngx_mail_ssl_conf_t.ciphers,,mail\ngx_mail_ssl_module.h,ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3614,405729,passwords,3,ngx_mail_ssl_conf_t.passwords,,mail\ngx_mail_ssl_module.h,*passwords,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3615,405730,conf_commands,3,ngx_mail_ssl_conf_t.conf_commands,,mail\ngx_mail_ssl_module.h,*conf_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3616,405731,shm_zone,3,ngx_mail_ssl_conf_t.shm_zone,,mail\ngx_mail_ssl_module.h,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3617,405732,session_tickets,3,ngx_mail_ssl_conf_t.session_tickets,,mail\ngx_mail_ssl_module.h,session_tickets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3618,405733,session_ticket_keys,3,ngx_mail_ssl_conf_t.session_ticket_keys,,mail\ngx_mail_ssl_module.h,*session_ticket_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3619,405734,file,3,ngx_mail_ssl_conf_t.file,,mail\ngx_mail_ssl_module.h,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3620,405735,line,3,ngx_mail_ssl_conf_t.line,,mail\ngx_mail_ssl_module.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3621,405811,profiles,3,ngx_google_perftools_conf_t.profiles,,misc\ngx_google_perftools_module.c,profiles,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3622,406559,command,3,ngx_channel_t.command,,os\unix\ngx_channel.h,command,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3623,406560,pid,3,ngx_channel_t.pid,,os\unix\ngx_channel.h,pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3624,406561,slot,3,ngx_channel_t.slot,,os\unix\ngx_channel.h,slot,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3625,406562,fd,3,ngx_channel_t.fd,,os\unix\ngx_channel.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3626,406855,name,3,sysctl_t.name,,os\unix\ngx_darwin_init.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3627,406856,value,3,sysctl_t.value,,os\unix\ngx_darwin_init.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3628,406857,size,3,sysctl_t.size,,os\unix\ngx_darwin_init.c,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3629,406858,exists,3,sysctl_t.exists,,os\unix\ngx_darwin_init.c,exists,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3630,409548,name,3,ngx_file_mapping_t.name,,os\unix\ngx_files.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3631,409549,size,3,ngx_file_mapping_t.size,,os\unix\ngx_files.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3632,409550,addr,3,ngx_file_mapping_t.addr,,os\unix\ngx_files.h,*addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3633,409551,fd,3,ngx_file_mapping_t.fd,,os\unix\ngx_files.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3634,409552,log,3,ngx_file_mapping_t.log,,os\unix\ngx_files.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3635,409555,dir,3,ngx_dir_t.dir,,os\unix\ngx_files.h,*dir,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3636,409557,de,3,ngx_dir_t.de,,os\unix\ngx_files.h,*de,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3637,409559,info,3,ngx_dir_t.info,,os\unix\ngx_files.h,info,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3638,409560,type,3,ngx_dir_t.type,,os\unix\ngx_files.h,type:8,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3639,409561,valid_info,3,ngx_dir_t.valid_info,,os\unix\ngx_files.h,valid_info:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3640,409564,n,3,ngx_glob_t.n,,os\unix\ngx_files.h,n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3641,409565,pglob,3,ngx_glob_t.pglob,,os\unix\ngx_files.h,pglob,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3642,409566,pattern,3,ngx_glob_t.pattern,,os\unix\ngx_files.h,*pattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3643,409567,log,3,ngx_glob_t.log,,os\unix\ngx_files.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3644,409568,test,3,ngx_glob_t.test,,os\unix\ngx_files.h,test,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3645,409854,name,3,sysctl_t.name,,os\unix\ngx_freebsd_init.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3646,409855,value,3,sysctl_t.value,,os\unix\ngx_freebsd_init.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3647,409856,size,3,sysctl_t.size,,os\unix\ngx_freebsd_init.c,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3648,409857,exists,3,sysctl_t.exists,,os\unix\ngx_freebsd_init.c,exists,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3649,412029,recv,3,ngx_os_io_t.recv,,os\unix\ngx_os.h,recv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3650,412030,recv_chain,3,ngx_os_io_t.recv_chain,,os\unix\ngx_os.h,recv_chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3651,412031,udp_recv,3,ngx_os_io_t.udp_recv,,os\unix\ngx_os.h,udp_recv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3652,412032,send,3,ngx_os_io_t.send,,os\unix\ngx_os.h,send,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3653,412033,udp_send,3,ngx_os_io_t.udp_send,,os\unix\ngx_os.h,udp_send,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3654,412034,udp_send_chain,3,ngx_os_io_t.udp_send_chain,,os\unix\ngx_os.h,udp_send_chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3655,412035,send_chain,3,ngx_os_io_t.send_chain,,os\unix\ngx_os.h,send_chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3656,412036,flags,3,ngx_os_io_t.flags,,os\unix\ngx_os.h,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3657,412121,iovs,3,ngx_iovec_t.iovs,,os\unix\ngx_os.h,*iovs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3658,412122,count,3,ngx_iovec_t.count,,os\unix\ngx_os.h,count,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3659,412123,size,3,ngx_iovec_t.size,,os\unix\ngx_os.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3660,412124,nalloc,3,ngx_iovec_t.nalloc,,os\unix\ngx_os.h,nalloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3661,412393,signo,3,ngx_signal_t.signo,,os\unix\ngx_process.c,signo,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3662,412394,signame,3,ngx_signal_t.signame,,os\unix\ngx_process.c,*signame,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3663,412395,name,3,ngx_signal_t.name,,os\unix\ngx_process.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3664,413805,pid,3,ngx_process_t.pid,,os\unix\ngx_process.h,pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3665,413806,status,3,ngx_process_t.status,,os\unix\ngx_process.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3666,413807,channel,3,ngx_process_t.channel,,os\unix\ngx_process.h,channel[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3667,413808,proc,3,ngx_process_t.proc,,os\unix\ngx_process.h,proc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3668,413809,data,3,ngx_process_t.data,,os\unix\ngx_process.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3669,413810,name,3,ngx_process_t.name,,os\unix\ngx_process.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3670,413811,respawn,3,ngx_process_t.respawn,,os\unix\ngx_process.h,respawn:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3671,413812,just_spawn,3,ngx_process_t.just_spawn,,os\unix\ngx_process.h,just_spawn:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3672,413813,detached,3,ngx_process_t.detached,,os\unix\ngx_process.h,detached:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3673,413814,exiting,3,ngx_process_t.exiting,,os\unix\ngx_process.h,exiting:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3674,413815,exited,3,ngx_process_t.exited,,os\unix\ngx_process.h,exited:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3675,413824,path,3,ngx_exec_ctx_t.path,,os\unix\ngx_process.h,*path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3676,413825,name,3,ngx_exec_ctx_t.name,,os\unix\ngx_process.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3677,413826,argv,3,ngx_exec_ctx_t.argv,,os\unix\ngx_process.h,*const  *argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3678,413827,envp,3,ngx_exec_ctx_t.envp,,os\unix\ngx_process.h,*const  *envp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3679,416921,handler,3,ngx_cache_manager_ctx_t.handler,,os\unix\ngx_process_cycle.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3680,416922,name,3,ngx_cache_manager_ctx_t.name,,os\unix\ngx_process_cycle.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3681,416923,delay,3,ngx_cache_manager_ctx_t.delay,,os\unix\ngx_process_cycle.h,delay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3682,417582,addr,3,ngx_shm_t.addr,,os\unix\ngx_shmem.h,*addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3683,417583,size,3,ngx_shm_t.size,,os\unix\ngx_shmem.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3684,417584,name,3,ngx_shm_t.name,,os\unix\ngx_shmem.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3685,417585,log,3,ngx_shm_t.log,,os\unix\ngx_shmem.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3686,417586,exists,3,ngx_shm_t.exists,,os\unix\ngx_shmem.h,exists,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3687,422915,name,3,ngx_file_mapping_t.name,,os\win32\ngx_files.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3688,422916,size,3,ngx_file_mapping_t.size,,os\win32\ngx_files.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3689,422917,addr,3,ngx_file_mapping_t.addr,,os\win32\ngx_files.h,*addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3690,422918,fd,3,ngx_file_mapping_t.fd,,os\win32\ngx_files.h,fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3691,422919,handle,3,ngx_file_mapping_t.handle,,os\win32\ngx_files.h,handle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3692,422920,log,3,ngx_file_mapping_t.log,,os\win32\ngx_files.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3693,422923,dir,3,ngx_dir_t.dir,,os\win32\ngx_files.h,dir,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3694,422924,finddata,3,ngx_dir_t.finddata,,os\win32\ngx_files.h,finddata,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3695,422925,valid_info,3,ngx_dir_t.valid_info,,os\win32\ngx_files.h,valid_info:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3696,422926,type,3,ngx_dir_t.type,,os\win32\ngx_files.h,type:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3697,422927,ready,3,ngx_dir_t.ready,,os\win32\ngx_files.h,ready:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3698,422930,dir,3,ngx_glob_t.dir,,os\win32\ngx_files.h,dir,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3699,422931,finddata,3,ngx_glob_t.finddata,,os\win32\ngx_files.h,finddata,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3700,422932,ready,3,ngx_glob_t.ready,,os\win32\ngx_files.h,ready:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3701,422933,test,3,ngx_glob_t.test,,os\win32\ngx_files.h,test:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3702,422934,no_match,3,ngx_glob_t.no_match,,os\win32\ngx_files.h,no_match:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3703,422935,pattern,3,ngx_glob_t.pattern,,os\win32\ngx_files.h,*pattern,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3704,422936,name,3,ngx_glob_t.name,,os\win32\ngx_files.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3705,422937,last,3,ngx_glob_t.last,,os\win32\ngx_files.h,last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3706,422938,log,3,ngx_glob_t.log,,os\win32\ngx_files.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3707,423137,recv,3,ngx_os_io_t.recv,,os\win32\ngx_os.h,recv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3708,423138,recv_chain,3,ngx_os_io_t.recv_chain,,os\win32\ngx_os.h,recv_chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3709,423139,udp_recv,3,ngx_os_io_t.udp_recv,,os\win32\ngx_os.h,udp_recv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3710,423140,send,3,ngx_os_io_t.send,,os\win32\ngx_os.h,send,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3711,423141,udp_send,3,ngx_os_io_t.udp_send,,os\win32\ngx_os.h,udp_send,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3712,423142,udp_send_chain,3,ngx_os_io_t.udp_send_chain,,os\win32\ngx_os.h,udp_send_chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3713,423143,send_chain,3,ngx_os_io_t.send_chain,,os\win32\ngx_os.h,send_chain,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3714,423144,flags,3,ngx_os_io_t.flags,,os\win32\ngx_os.h,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3715,423871,handle,3,ngx_process_t.handle,,os\win32\ngx_process.h,handle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3716,423872,pid,3,ngx_process_t.pid,,os\win32\ngx_process.h,pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3717,423873,name,3,ngx_process_t.name,,os\win32\ngx_process.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3718,423874,term,3,ngx_process_t.term,,os\win32\ngx_process.h,term,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3719,423875,quit,3,ngx_process_t.quit,,os\win32\ngx_process.h,quit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3720,423876,reopen,3,ngx_process_t.reopen,,os\win32\ngx_process.h,reopen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3721,423877,term_event,3,ngx_process_t.term_event,,os\win32\ngx_process.h,term_event[NGX_PROCESS_SYNC_NAME],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3722,423878,quit_event,3,ngx_process_t.quit_event,,os\win32\ngx_process.h,quit_event[NGX_PROCESS_SYNC_NAME],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3723,423879,reopen_event,3,ngx_process_t.reopen_event,,os\win32\ngx_process.h,reopen_event[NGX_PROCESS_SYNC_NAME],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3724,423880,just_spawn,3,ngx_process_t.just_spawn,,os\win32\ngx_process.h,just_spawn:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3725,423881,exiting,3,ngx_process_t.exiting,,os\win32\ngx_process.h,exiting:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3726,423909,path,3,ngx_exec_ctx_t.path,,os\win32\ngx_process.h,*path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3727,423910,name,3,ngx_exec_ctx_t.name,,os\win32\ngx_process.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3728,423911,args,3,ngx_exec_ctx_t.args,,os\win32\ngx_process.h,*args,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3729,423912,argv,3,ngx_exec_ctx_t.argv,,os\win32\ngx_process.h,*const            *argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3730,423913,envp,3,ngx_exec_ctx_t.envp,,os\win32\ngx_process.h,*const            *envp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3731,423914,child,3,ngx_exec_ctx_t.child,,os\win32\ngx_process.h,child,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3732,426991,addr,3,ngx_shm_t.addr,,os\win32\ngx_shmem.h,*addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3733,426992,size,3,ngx_shm_t.size,,os\win32\ngx_shmem.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3734,426993,name,3,ngx_shm_t.name,,os\win32\ngx_shmem.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3735,426994,handle,3,ngx_shm_t.handle,,os\win32\ngx_shmem.h,handle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3736,426995,log,3,ngx_shm_t.log,,os\win32\ngx_shmem.h,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3737,426996,exists,3,ngx_shm_t.exists,,os\win32\ngx_shmem.h,exists,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3738,427885,wServicePackMinor,3,ngx_osviex_stub_t.wServicePackMinor,,os\win32\ngx_win32_init.c,wServicePackMinor,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3739,427886,wSuiteMask,3,ngx_osviex_stub_t.wSuiteMask,,os\win32\ngx_win32_init.c,wSuiteMask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3740,427887,wProductType,3,ngx_osviex_stub_t.wProductType,,os\win32\ngx_win32_init.c,wProductType,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3741,431962,main_conf,3,ngx_stream_conf_ctx_t.main_conf,,stream\ngx_stream.h,**main_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3742,431963,srv_conf,3,ngx_stream_conf_ctx_t.srv_conf,,stream\ngx_stream.h,**srv_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3743,431967,sockaddr,3,ngx_stream_listen_t.sockaddr,,stream\ngx_stream.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3744,431968,socklen,3,ngx_stream_listen_t.socklen,,stream\ngx_stream.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3745,431969,addr_text,3,ngx_stream_listen_t.addr_text,,stream\ngx_stream.h,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3746,431970,ctx,3,ngx_stream_listen_t.ctx,,stream\ngx_stream.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3747,431971,bind,3,ngx_stream_listen_t.bind,,stream\ngx_stream.h,bind:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3748,431972,wildcard,3,ngx_stream_listen_t.wildcard,,stream\ngx_stream.h,wildcard:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3749,431973,ssl,3,ngx_stream_listen_t.ssl,,stream\ngx_stream.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3750,431974,ipv6only,3,ngx_stream_listen_t.ipv6only,,stream\ngx_stream.h,ipv6only:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3751,431975,reuseport,3,ngx_stream_listen_t.reuseport,,stream\ngx_stream.h,reuseport:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3752,431976,so_keepalive,3,ngx_stream_listen_t.so_keepalive,,stream\ngx_stream.h,so_keepalive:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3753,431977,proxy_protocol,3,ngx_stream_listen_t.proxy_protocol,,stream\ngx_stream.h,proxy_protocol:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3754,431978,tcp_keepidle,3,ngx_stream_listen_t.tcp_keepidle,,stream\ngx_stream.h,tcp_keepidle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3755,431979,tcp_keepintvl,3,ngx_stream_listen_t.tcp_keepintvl,,stream\ngx_stream.h,tcp_keepintvl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3756,431980,tcp_keepcnt,3,ngx_stream_listen_t.tcp_keepcnt,,stream\ngx_stream.h,tcp_keepcnt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3757,431981,backlog,3,ngx_stream_listen_t.backlog,,stream\ngx_stream.h,backlog,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3758,431982,rcvbuf,3,ngx_stream_listen_t.rcvbuf,,stream\ngx_stream.h,rcvbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3759,431983,sndbuf,3,ngx_stream_listen_t.sndbuf,,stream\ngx_stream.h,sndbuf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3760,431984,fastopen,3,ngx_stream_listen_t.fastopen,,stream\ngx_stream.h,fastopen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3761,431985,type,3,ngx_stream_listen_t.type,,stream\ngx_stream.h,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3762,431988,ctx,3,ngx_stream_addr_conf_t.ctx,,stream\ngx_stream.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3763,431989,addr_text,3,ngx_stream_addr_conf_t.addr_text,,stream\ngx_stream.h,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3764,431990,ssl,3,ngx_stream_addr_conf_t.ssl,,stream\ngx_stream.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3765,431991,proxy_protocol,3,ngx_stream_addr_conf_t.proxy_protocol,,stream\ngx_stream.h,proxy_protocol:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3766,431994,addr,3,ngx_stream_in_addr_t.addr,,stream\ngx_stream.h,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3767,431995,conf,3,ngx_stream_in_addr_t.conf,,stream\ngx_stream.h,conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3768,431998,addrs,3,ngx_stream_port_t.addrs,,stream\ngx_stream.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3769,431999,naddrs,3,ngx_stream_port_t.naddrs,,stream\ngx_stream.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3770,432002,family,3,ngx_stream_conf_port_t.family,,stream\ngx_stream.h,family,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3771,432003,type,3,ngx_stream_conf_port_t.type,,stream\ngx_stream.h,type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3772,432004,port,3,ngx_stream_conf_port_t.port,,stream\ngx_stream.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3773,432005,addrs,3,ngx_stream_conf_port_t.addrs,,stream\ngx_stream.h,addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3774,432008,opt,3,ngx_stream_conf_addr_t.opt,,stream\ngx_stream.h,opt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3775,432011,NGX_STREAM_POST_ACCEPT_PHASE,3,ngx_stream_phases.NGX_STREAM_POST_ACCEPT_PHASE,,stream\ngx_stream.h,NGX_STREAM_POST_ACCEPT_PHASE = 0,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3776,432012,NGX_STREAM_PREACCESS_PHASE,3,ngx_stream_phases.NGX_STREAM_PREACCESS_PHASE,,stream\ngx_stream.h,NGX_STREAM_PREACCESS_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3777,432013,NGX_STREAM_ACCESS_PHASE,3,ngx_stream_phases.NGX_STREAM_ACCESS_PHASE,,stream\ngx_stream.h,NGX_STREAM_ACCESS_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3778,432014,NGX_STREAM_SSL_PHASE,3,ngx_stream_phases.NGX_STREAM_SSL_PHASE,,stream\ngx_stream.h,NGX_STREAM_SSL_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3779,432015,NGX_STREAM_PREREAD_PHASE,3,ngx_stream_phases.NGX_STREAM_PREREAD_PHASE,,stream\ngx_stream.h,NGX_STREAM_PREREAD_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3780,432016,NGX_STREAM_CONTENT_PHASE,3,ngx_stream_phases.NGX_STREAM_CONTENT_PHASE,,stream\ngx_stream.h,NGX_STREAM_CONTENT_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3781,432017,NGX_STREAM_LOG_PHASE,3,ngx_stream_phases.NGX_STREAM_LOG_PHASE,,stream\ngx_stream.h,NGX_STREAM_LOG_PHASE,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3782,432045,checker,3,ngx_stream_phase_handler_s.checker,,stream\ngx_stream.h,checker,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3783,432046,handler,3,ngx_stream_phase_handler_s.handler,,stream\ngx_stream.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3784,432047,next,3,ngx_stream_phase_handler_s.next,,stream\ngx_stream.h,next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3785,432049,handlers,3,ngx_stream_phase_engine_t.handlers,,stream\ngx_stream.h,*handlers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3786,432052,handlers,3,ngx_stream_phase_t.handlers,,stream\ngx_stream.h,handlers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3787,432055,servers,3,ngx_stream_core_main_conf_t.servers,,stream\ngx_stream.h,servers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3788,432056,listen,3,ngx_stream_core_main_conf_t.listen,,stream\ngx_stream.h,listen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3789,432057,phase_engine,3,ngx_stream_core_main_conf_t.phase_engine,,stream\ngx_stream.h,phase_engine,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3790,432058,variables_hash,3,ngx_stream_core_main_conf_t.variables_hash,,stream\ngx_stream.h,variables_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3791,432059,variables,3,ngx_stream_core_main_conf_t.variables,,stream\ngx_stream.h,variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3792,432060,prefix_variables,3,ngx_stream_core_main_conf_t.prefix_variables,,stream\ngx_stream.h,prefix_variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
3793,432061,ncaptures,3,ngx_stream_core_main_conf_t.ncaptures,,stream\ngx_stream.h,ncaptures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3794,432062,variables_hash_max_size,3,ngx_stream_core_main_conf_t.variables_hash_max_size,,stream\ngx_stream.h,variables_hash_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3795,432063,variables_hash_bucket_size,3,ngx_stream_core_main_conf_t.variables_hash_bucket_size,,stream\ngx_stream.h,variables_hash_bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3796,432064,variables_keys,3,ngx_stream_core_main_conf_t.variables_keys,,stream\ngx_stream.h,*variables_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,14,0,1,1,0,0,,0,0,0,0,0,
3797,432065,phases,3,ngx_stream_core_main_conf_t.phases,,stream\ngx_stream.h,phases[NGX_STREAM_LOG_PHASE + 1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3798,432076,handler,3,ngx_stream_core_srv_conf_t.handler,,stream\ngx_stream.h,handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3799,432077,ctx,3,ngx_stream_core_srv_conf_t.ctx,,stream\ngx_stream.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3800,432078,file_name,3,ngx_stream_core_srv_conf_t.file_name,,stream\ngx_stream.h,*file_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3801,432079,line,3,ngx_stream_core_srv_conf_t.line,,stream\ngx_stream.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3802,432080,tcp_nodelay,3,ngx_stream_core_srv_conf_t.tcp_nodelay,,stream\ngx_stream.h,tcp_nodelay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3803,432081,preread_buffer_size,3,ngx_stream_core_srv_conf_t.preread_buffer_size,,stream\ngx_stream.h,preread_buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3804,432082,preread_timeout,3,ngx_stream_core_srv_conf_t.preread_timeout,,stream\ngx_stream.h,preread_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3805,432083,error_log,3,ngx_stream_core_srv_conf_t.error_log,,stream\ngx_stream.h,*error_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3806,432084,resolver_timeout,3,ngx_stream_core_srv_conf_t.resolver_timeout,,stream\ngx_stream.h,resolver_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3807,432085,resolver,3,ngx_stream_core_srv_conf_t.resolver,,stream\ngx_stream.h,*resolver,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3808,432086,proxy_protocol_timeout,3,ngx_stream_core_srv_conf_t.proxy_protocol_timeout,,stream\ngx_stream.h,proxy_protocol_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3809,432087,listen,3,ngx_stream_core_srv_conf_t.listen,,stream\ngx_stream.h,listen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3810,432090,signature,3,ngx_stream_session_s.signature,,stream\ngx_stream.h,signature,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3811,432091,connection,3,ngx_stream_session_s.connection,,stream\ngx_stream.h,*connection,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3812,432092,received,3,ngx_stream_session_s.received,,stream\ngx_stream.h,received,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3813,432093,start_sec,3,ngx_stream_session_s.start_sec,,stream\ngx_stream.h,start_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3814,432094,start_msec,3,ngx_stream_session_s.start_msec,,stream\ngx_stream.h,start_msec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3815,432095,log_handler,3,ngx_stream_session_s.log_handler,,stream\ngx_stream.h,log_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3816,432096,ctx,3,ngx_stream_session_s.ctx,,stream\ngx_stream.h,**ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3817,432097,main_conf,3,ngx_stream_session_s.main_conf,,stream\ngx_stream.h,**main_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3818,432098,srv_conf,3,ngx_stream_session_s.srv_conf,,stream\ngx_stream.h,**srv_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3819,432099,upstream,3,ngx_stream_session_s.upstream,,stream\ngx_stream.h,*upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3820,432100,upstream_states,3,ngx_stream_session_s.upstream_states,,stream\ngx_stream.h,*upstream_states,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3821,432101,variables,3,ngx_stream_session_s.variables,,stream\ngx_stream.h,*variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3822,432102,ncaptures,3,ngx_stream_session_s.ncaptures,,stream\ngx_stream.h,ncaptures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3823,432103,captures,3,ngx_stream_session_s.captures,,stream\ngx_stream.h,*captures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3824,432104,captures_data,3,ngx_stream_session_s.captures_data,,stream\ngx_stream.h,*captures_data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3825,432105,phase_handler,3,ngx_stream_session_s.phase_handler,,stream\ngx_stream.h,phase_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3826,432106,status,3,ngx_stream_session_s.status,,stream\ngx_stream.h,status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3827,432107,ssl,3,ngx_stream_session_s.ssl,,stream\ngx_stream.h,ssl:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3828,432108,stat_processing,3,ngx_stream_session_s.stat_processing,,stream\ngx_stream.h,stat_processing:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3829,432109,health_check,3,ngx_stream_session_s.health_check,,stream\ngx_stream.h,health_check:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3830,432110,limit_conn_status,3,ngx_stream_session_s.limit_conn_status,,stream\ngx_stream.h,limit_conn_status:2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3831,432208,mask,3,ngx_stream_access_rule_t.mask,,stream\ngx_stream_access_module.c,mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3832,432209,addr,3,ngx_stream_access_rule_t.addr,,stream\ngx_stream_access_module.c,addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3833,432210,deny,3,ngx_stream_access_rule_t.deny,,stream\ngx_stream_access_module.c,deny,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3834,432213,rules,3,ngx_stream_access_srv_conf_t.rules,,stream\ngx_stream_access_module.c,*rules,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3835,432214,rules6,3,ngx_stream_access_srv_conf_t.rules6,,stream\ngx_stream_access_module.c,*rules6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3836,432215,rules_un,3,ngx_stream_access_srv_conf_t.rules_un,,stream\ngx_stream_access_module.c,*rules_un,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3837,434804,value,3,ngx_stream_geo_range_t.value,,stream\ngx_stream_geo_module.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3838,434805,start,3,ngx_stream_geo_range_t.start,,stream\ngx_stream_geo_module.c,start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3839,434806,end,3,ngx_stream_geo_range_t.end,,stream\ngx_stream_geo_module.c,end,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3840,434809,tree,3,ngx_stream_geo_trees_t.tree,,stream\ngx_stream_geo_module.c,*tree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3841,434810,tree6,3,ngx_stream_geo_trees_t.tree6,,stream\ngx_stream_geo_module.c,*tree6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3842,434813,low,3,ngx_stream_geo_high_ranges_t.low,,stream\ngx_stream_geo_module.c,**low,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3843,434814,default_value,3,ngx_stream_geo_high_ranges_t.default_value,,stream\ngx_stream_geo_module.c,*default_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3844,434817,sn,3,ngx_stream_geo_variable_value_node_t.sn,,stream\ngx_stream_geo_module.c,sn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3845,434818,value,3,ngx_stream_geo_variable_value_node_t.value,,stream\ngx_stream_geo_module.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3846,434819,offset,3,ngx_stream_geo_variable_value_node_t.offset,,stream\ngx_stream_geo_module.c,offset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3847,434822,value,3,ngx_stream_geo_conf_ctx_t.value,,stream\ngx_stream_geo_module.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3848,434823,net,3,ngx_stream_geo_conf_ctx_t.net,,stream\ngx_stream_geo_module.c,*net,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3849,434824,high,3,ngx_stream_geo_conf_ctx_t.high,,stream\ngx_stream_geo_module.c,high,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3850,434825,tree,3,ngx_stream_geo_conf_ctx_t.tree,,stream\ngx_stream_geo_module.c,*tree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3851,434826,tree6,3,ngx_stream_geo_conf_ctx_t.tree6,,stream\ngx_stream_geo_module.c,*tree6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3852,434827,rbtree,3,ngx_stream_geo_conf_ctx_t.rbtree,,stream\ngx_stream_geo_module.c,rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3853,434828,sentinel,3,ngx_stream_geo_conf_ctx_t.sentinel,,stream\ngx_stream_geo_module.c,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3854,434829,pool,3,ngx_stream_geo_conf_ctx_t.pool,,stream\ngx_stream_geo_module.c,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3855,434830,temp_pool,3,ngx_stream_geo_conf_ctx_t.temp_pool,,stream\ngx_stream_geo_module.c,*temp_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3856,434831,data_size,3,ngx_stream_geo_conf_ctx_t.data_size,,stream\ngx_stream_geo_module.c,data_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3857,434832,include_name,3,ngx_stream_geo_conf_ctx_t.include_name,,stream\ngx_stream_geo_module.c,include_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3858,434833,includes,3,ngx_stream_geo_conf_ctx_t.includes,,stream\ngx_stream_geo_module.c,includes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3859,434834,entries,3,ngx_stream_geo_conf_ctx_t.entries,,stream\ngx_stream_geo_module.c,entries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3860,434835,ranges,3,ngx_stream_geo_conf_ctx_t.ranges,,stream\ngx_stream_geo_module.c,ranges:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3861,434836,outside_entries,3,ngx_stream_geo_conf_ctx_t.outside_entries,,stream\ngx_stream_geo_module.c,outside_entries:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3862,434837,allow_binary_include,3,ngx_stream_geo_conf_ctx_t.allow_binary_include,,stream\ngx_stream_geo_module.c,allow_binary_include:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3863,434838,binary_include,3,ngx_stream_geo_conf_ctx_t.binary_include,,stream\ngx_stream_geo_module.c,binary_include:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3864,434842,trees,3,ngx_stream_geo_ctx_t.u.trees,,stream\ngx_stream_geo_module.c,trees,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3865,434843,high,3,ngx_stream_geo_ctx_t.u.high,,stream\ngx_stream_geo_module.c,high,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3866,434844,u,3,ngx_stream_geo_ctx_t.u,,stream\ngx_stream_geo_module.c,u,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3867,434845,index,3,ngx_stream_geo_ctx_t.index,,stream\ngx_stream_geo_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3868,434993,GEORNG,3,ngx_stream_geo_header_t.GEORNG,,stream\ngx_stream_geo_module.c,GEORNG[6],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3869,434994,version,3,ngx_stream_geo_header_t.version,,stream\ngx_stream_geo_module.c,version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3870,434995,ptr_size,3,ngx_stream_geo_header_t.ptr_size,,stream\ngx_stream_geo_module.c,ptr_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3871,434996,endianness,3,ngx_stream_geo_header_t.endianness,,stream\ngx_stream_geo_module.c,endianness,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3872,434997,crc32,3,ngx_stream_geo_header_t.crc32,,stream\ngx_stream_geo_module.c,crc32,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3873,438918,country,3,ngx_stream_geoip_conf_t.country,,stream\ngx_stream_geoip_module.c,*country,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3874,438919,org,3,ngx_stream_geoip_conf_t.org,,stream\ngx_stream_geoip_module.c,*org,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3875,438920,city,3,ngx_stream_geoip_conf_t.city,,stream\ngx_stream_geoip_module.c,*city,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3876,438921,country_v6,3,ngx_stream_geoip_conf_t.country_v6,,stream\ngx_stream_geoip_module.c,country_v6:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3877,438922,org_v6,3,ngx_stream_geoip_conf_t.org_v6,,stream\ngx_stream_geoip_module.c,org_v6:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3878,438923,city_v6,3,ngx_stream_geoip_conf_t.city_v6,,stream\ngx_stream_geoip_module.c,city_v6:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3879,438926,name,3,ngx_stream_geoip_var_t.name,,stream\ngx_stream_geoip_module.c,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3880,438927,data,3,ngx_stream_geoip_var_t.data,,stream\ngx_stream_geoip_module.c,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3881,441250,color,3,ngx_stream_limit_conn_node_t.color,,stream\ngx_stream_limit_conn_module.c,color,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3882,441251,len,3,ngx_stream_limit_conn_node_t.len,,stream\ngx_stream_limit_conn_module.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3883,441252,conn,3,ngx_stream_limit_conn_node_t.conn,,stream\ngx_stream_limit_conn_module.c,conn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3884,441253,data,3,ngx_stream_limit_conn_node_t.data,,stream\ngx_stream_limit_conn_module.c,data[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3885,441262,shm_zone,3,ngx_stream_limit_conn_cleanup_t.shm_zone,,stream\ngx_stream_limit_conn_module.c,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3886,441263,node,3,ngx_stream_limit_conn_cleanup_t.node,,stream\ngx_stream_limit_conn_module.c,*node,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3887,441266,rbtree,3,ngx_stream_limit_conn_shctx_t.rbtree,,stream\ngx_stream_limit_conn_module.c,rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3888,441267,sentinel,3,ngx_stream_limit_conn_shctx_t.sentinel,,stream\ngx_stream_limit_conn_module.c,sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3889,441270,sh,3,ngx_stream_limit_conn_ctx_t.sh,,stream\ngx_stream_limit_conn_module.c,*sh,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
3890,441271,shpool,3,ngx_stream_limit_conn_ctx_t.shpool,,stream\ngx_stream_limit_conn_module.c,*shpool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,14,0,1,1,0,0,,0,0,0,0,0,
3891,441272,key,3,ngx_stream_limit_conn_ctx_t.key,,stream\ngx_stream_limit_conn_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3892,441275,shm_zone,3,ngx_stream_limit_conn_limit_t.shm_zone,,stream\ngx_stream_limit_conn_module.c,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3893,441276,conn,3,ngx_stream_limit_conn_limit_t.conn,,stream\ngx_stream_limit_conn_module.c,conn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3894,441279,limits,3,ngx_stream_limit_conn_conf_t.limits,,stream\ngx_stream_limit_conn_module.c,limits,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3895,441280,log_level,3,ngx_stream_limit_conn_conf_t.log_level,,stream\ngx_stream_limit_conn_module.c,log_level,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3896,441281,dry_run,3,ngx_stream_limit_conn_conf_t.dry_run,,stream\ngx_stream_limit_conn_module.c,dry_run,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3897,443137,len,3,ngx_stream_log_op_s.len,,stream\ngx_stream_log_module.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3898,443138,getlen,3,ngx_stream_log_op_s.getlen,,stream\ngx_stream_log_module.c,getlen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3899,443139,run,3,ngx_stream_log_op_s.run,,stream\ngx_stream_log_module.c,run,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3900,443140,data,3,ngx_stream_log_op_s.data,,stream\ngx_stream_log_module.c,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3901,443142,name,3,ngx_stream_log_fmt_t.name,,stream\ngx_stream_log_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3902,443143,flushes,3,ngx_stream_log_fmt_t.flushes,,stream\ngx_stream_log_module.c,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3903,443144,ops,3,ngx_stream_log_fmt_t.ops,,stream\ngx_stream_log_module.c,*ops,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3904,443147,formats,3,ngx_stream_log_main_conf_t.formats,,stream\ngx_stream_log_module.c,formats,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3905,443150,start,3,ngx_stream_log_buf_t.start,,stream\ngx_stream_log_module.c,*start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3906,443151,pos,3,ngx_stream_log_buf_t.pos,,stream\ngx_stream_log_module.c,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3907,443152,last,3,ngx_stream_log_buf_t.last,,stream\ngx_stream_log_module.c,*last,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3908,443153,event,3,ngx_stream_log_buf_t.event,,stream\ngx_stream_log_module.c,*event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
3909,443154,flush,3,ngx_stream_log_buf_t.flush,,stream\ngx_stream_log_module.c,flush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3910,443155,gzip,3,ngx_stream_log_buf_t.gzip,,stream\ngx_stream_log_module.c,gzip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3911,443158,lengths,3,ngx_stream_log_script_t.lengths,,stream\ngx_stream_log_module.c,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3912,443159,values,3,ngx_stream_log_script_t.values,,stream\ngx_stream_log_module.c,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3913,443162,file,3,ngx_stream_log_t.file,,stream\ngx_stream_log_module.c,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3914,443163,script,3,ngx_stream_log_t.script,,stream\ngx_stream_log_module.c,*script,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3915,443164,disk_full_time,3,ngx_stream_log_t.disk_full_time,,stream\ngx_stream_log_module.c,disk_full_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3916,443165,error_log_time,3,ngx_stream_log_t.error_log_time,,stream\ngx_stream_log_module.c,error_log_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3917,443166,syslog_peer,3,ngx_stream_log_t.syslog_peer,,stream\ngx_stream_log_module.c,*syslog_peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3918,443167,format,3,ngx_stream_log_t.format,,stream\ngx_stream_log_module.c,*format,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3919,443168,filter,3,ngx_stream_log_t.filter,,stream\ngx_stream_log_module.c,*filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3920,443171,logs,3,ngx_stream_log_srv_conf_t.logs,,stream\ngx_stream_log_module.c,*logs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
3921,443172,open_file_cache,3,ngx_stream_log_srv_conf_t.open_file_cache,,stream\ngx_stream_log_module.c,*open_file_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3922,443173,open_file_cache_valid,3,ngx_stream_log_srv_conf_t.open_file_cache_valid,,stream\ngx_stream_log_module.c,open_file_cache_valid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3923,443174,open_file_cache_min_uses,3,ngx_stream_log_srv_conf_t.open_file_cache_min_uses,,stream\ngx_stream_log_module.c,open_file_cache_min_uses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3924,443175,off,3,ngx_stream_log_srv_conf_t.off,,stream\ngx_stream_log_module.c,off,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3925,443178,name,3,ngx_stream_log_var_t.name,,stream\ngx_stream_log_module.c,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3926,443179,len,3,ngx_stream_log_var_t.len,,stream\ngx_stream_log_module.c,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3927,443180,run,3,ngx_stream_log_var_t.run,,stream\ngx_stream_log_module.c,run,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3928,446843,hash_max_size,3,ngx_stream_map_conf_t.hash_max_size,,stream\ngx_stream_map_module.c,hash_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3929,446844,hash_bucket_size,3,ngx_stream_map_conf_t.hash_bucket_size,,stream\ngx_stream_map_module.c,hash_bucket_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3930,446847,keys,3,ngx_stream_map_conf_ctx_t.keys,,stream\ngx_stream_map_module.c,keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3931,446848,values_hash,3,ngx_stream_map_conf_ctx_t.values_hash,,stream\ngx_stream_map_module.c,*values_hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3932,446849,regexes,3,ngx_stream_map_conf_ctx_t.regexes,,stream\ngx_stream_map_module.c,regexes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3933,446850,default_value,3,ngx_stream_map_conf_ctx_t.default_value,,stream\ngx_stream_map_module.c,*default_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3934,446851,cf,3,ngx_stream_map_conf_ctx_t.cf,,stream\ngx_stream_map_module.c,*cf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3935,446852,hostnames,3,ngx_stream_map_conf_ctx_t.hostnames,,stream\ngx_stream_map_module.c,hostnames:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3936,446853,no_cacheable,3,ngx_stream_map_conf_ctx_t.no_cacheable,,stream\ngx_stream_map_module.c,no_cacheable:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3937,446856,map,3,ngx_stream_map_ctx_t.map,,stream\ngx_stream_map_module.c,map,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3938,446857,value,3,ngx_stream_map_ctx_t.value,,stream\ngx_stream_map_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3939,446858,default_value,3,ngx_stream_map_ctx_t.default_value,,stream\ngx_stream_map_module.c,*default_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3940,446859,hostnames,3,ngx_stream_map_ctx_t.hostnames,,stream\ngx_stream_map_module.c,hostnames,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3941,448329,addr,3,ngx_stream_upstream_local_t.addr,,stream\ngx_stream_proxy_module.c,*addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3942,448330,value,3,ngx_stream_upstream_local_t.value,,stream\ngx_stream_proxy_module.c,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3943,448331,transparent,3,ngx_stream_upstream_local_t.transparent,,stream\ngx_stream_proxy_module.c,transparent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3944,448334,connect_timeout,3,ngx_stream_proxy_srv_conf_t.connect_timeout,,stream\ngx_stream_proxy_module.c,connect_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3945,448335,timeout,3,ngx_stream_proxy_srv_conf_t.timeout,,stream\ngx_stream_proxy_module.c,timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3946,448336,next_upstream_timeout,3,ngx_stream_proxy_srv_conf_t.next_upstream_timeout,,stream\ngx_stream_proxy_module.c,next_upstream_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3947,448337,buffer_size,3,ngx_stream_proxy_srv_conf_t.buffer_size,,stream\ngx_stream_proxy_module.c,buffer_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3948,448338,upload_rate,3,ngx_stream_proxy_srv_conf_t.upload_rate,,stream\ngx_stream_proxy_module.c,*upload_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3949,448339,download_rate,3,ngx_stream_proxy_srv_conf_t.download_rate,,stream\ngx_stream_proxy_module.c,*download_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3950,448340,requests,3,ngx_stream_proxy_srv_conf_t.requests,,stream\ngx_stream_proxy_module.c,requests,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3951,448341,responses,3,ngx_stream_proxy_srv_conf_t.responses,,stream\ngx_stream_proxy_module.c,responses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3952,448342,next_upstream_tries,3,ngx_stream_proxy_srv_conf_t.next_upstream_tries,,stream\ngx_stream_proxy_module.c,next_upstream_tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3953,448343,next_upstream,3,ngx_stream_proxy_srv_conf_t.next_upstream,,stream\ngx_stream_proxy_module.c,next_upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3954,448344,proxy_protocol,3,ngx_stream_proxy_srv_conf_t.proxy_protocol,,stream\ngx_stream_proxy_module.c,proxy_protocol,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3955,448345,local,3,ngx_stream_proxy_srv_conf_t.local,,stream\ngx_stream_proxy_module.c,*local,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3956,448346,socket_keepalive,3,ngx_stream_proxy_srv_conf_t.socket_keepalive,,stream\ngx_stream_proxy_module.c,socket_keepalive,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3957,448347,ssl_enable,3,ngx_stream_proxy_srv_conf_t.ssl_enable,,stream\ngx_stream_proxy_module.c,ssl_enable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3958,448348,ssl_session_reuse,3,ngx_stream_proxy_srv_conf_t.ssl_session_reuse,,stream\ngx_stream_proxy_module.c,ssl_session_reuse,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3959,448349,ssl_protocols,3,ngx_stream_proxy_srv_conf_t.ssl_protocols,,stream\ngx_stream_proxy_module.c,ssl_protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3960,448350,ssl_ciphers,3,ngx_stream_proxy_srv_conf_t.ssl_ciphers,,stream\ngx_stream_proxy_module.c,ssl_ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3961,448351,ssl_name,3,ngx_stream_proxy_srv_conf_t.ssl_name,,stream\ngx_stream_proxy_module.c,*ssl_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3962,448352,ssl_server_name,3,ngx_stream_proxy_srv_conf_t.ssl_server_name,,stream\ngx_stream_proxy_module.c,ssl_server_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3963,448353,ssl_verify,3,ngx_stream_proxy_srv_conf_t.ssl_verify,,stream\ngx_stream_proxy_module.c,ssl_verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3964,448354,ssl_verify_depth,3,ngx_stream_proxy_srv_conf_t.ssl_verify_depth,,stream\ngx_stream_proxy_module.c,ssl_verify_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3965,448355,ssl_trusted_certificate,3,ngx_stream_proxy_srv_conf_t.ssl_trusted_certificate,,stream\ngx_stream_proxy_module.c,ssl_trusted_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3966,448356,ssl_crl,3,ngx_stream_proxy_srv_conf_t.ssl_crl,,stream\ngx_stream_proxy_module.c,ssl_crl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3967,448357,ssl_certificate,3,ngx_stream_proxy_srv_conf_t.ssl_certificate,,stream\ngx_stream_proxy_module.c,*ssl_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3968,448358,ssl_certificate_key,3,ngx_stream_proxy_srv_conf_t.ssl_certificate_key,,stream\ngx_stream_proxy_module.c,*ssl_certificate_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3969,448359,ssl_passwords,3,ngx_stream_proxy_srv_conf_t.ssl_passwords,,stream\ngx_stream_proxy_module.c,*ssl_passwords,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3970,448360,ssl_conf_commands,3,ngx_stream_proxy_srv_conf_t.ssl_conf_commands,,stream\ngx_stream_proxy_module.c,*ssl_conf_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3971,448361,ssl,3,ngx_stream_proxy_srv_conf_t.ssl,,stream\ngx_stream_proxy_module.c,*ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3972,448362,upstream,3,ngx_stream_proxy_srv_conf_t.upstream,,stream\ngx_stream_proxy_module.c,*upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3973,448363,upstream_value,3,ngx_stream_proxy_srv_conf_t.upstream_value,,stream\ngx_stream_proxy_module.c,*upstream_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3974,452931,from,3,ngx_stream_realip_srv_conf_t.from,,stream\ngx_stream_realip_module.c,*from,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3975,452935,sockaddr,3,ngx_stream_realip_ctx_t.sockaddr,,stream\ngx_stream_realip_module.c,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3976,452936,socklen,3,ngx_stream_realip_ctx_t.socklen,,stream\ngx_stream_realip_module.c,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3977,452937,addr_text,3,ngx_stream_realip_ctx_t.addr_text,,stream\ngx_stream_realip_module.c,addr_text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3978,453824,text,3,ngx_stream_return_srv_conf_t.text,,stream\ngx_stream_return_module.c,text,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3979,453827,out,3,ngx_stream_return_ctx_t.out,,stream\ngx_stream_return_module.c,*out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3980,456886,ip,3,ngx_stream_script_engine_t.ip,,stream\ngx_stream_script.h,*ip,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,21,0,1,1,0,0,,0,0,0,0,0,
3981,456887,pos,3,ngx_stream_script_engine_t.pos,,stream\ngx_stream_script.h,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
3982,456888,sp,3,ngx_stream_script_engine_t.sp,,stream\ngx_stream_script.h,*sp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3983,456889,buf,3,ngx_stream_script_engine_t.buf,,stream\ngx_stream_script.h,buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3984,456890,line,3,ngx_stream_script_engine_t.line,,stream\ngx_stream_script.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3985,456891,flushed,3,ngx_stream_script_engine_t.flushed,,stream\ngx_stream_script.h,flushed:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3986,456892,skip,3,ngx_stream_script_engine_t.skip,,stream\ngx_stream_script.h,skip:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
3987,456893,session,3,ngx_stream_script_engine_t.session,,stream\ngx_stream_script.h,*session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
3988,456896,cf,3,ngx_stream_script_compile_t.cf,,stream\ngx_stream_script.h,*cf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
3989,456897,source,3,ngx_stream_script_compile_t.source,,stream\ngx_stream_script.h,*source,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,16,0,1,1,0,0,,0,0,0,0,0,
3990,456898,flushes,3,ngx_stream_script_compile_t.flushes,,stream\ngx_stream_script.h,**flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3991,456899,lengths,3,ngx_stream_script_compile_t.lengths,,stream\ngx_stream_script.h,**lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3992,456900,values,3,ngx_stream_script_compile_t.values,,stream\ngx_stream_script.h,**values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3993,456901,variables,3,ngx_stream_script_compile_t.variables,,stream\ngx_stream_script.h,variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3994,456902,ncaptures,3,ngx_stream_script_compile_t.ncaptures,,stream\ngx_stream_script.h,ncaptures,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3995,456903,size,3,ngx_stream_script_compile_t.size,,stream\ngx_stream_script.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3996,456904,main,3,ngx_stream_script_compile_t.main,,stream\ngx_stream_script.h,*main,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
3997,456905,complete_lengths,3,ngx_stream_script_compile_t.complete_lengths,,stream\ngx_stream_script.h,complete_lengths:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3998,456906,complete_values,3,ngx_stream_script_compile_t.complete_values,,stream\ngx_stream_script.h,complete_values:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
3999,456907,zero,3,ngx_stream_script_compile_t.zero,,stream\ngx_stream_script.h,zero:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4000,456908,conf_prefix,3,ngx_stream_script_compile_t.conf_prefix,,stream\ngx_stream_script.h,conf_prefix:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4001,456909,root_prefix,3,ngx_stream_script_compile_t.root_prefix,,stream\ngx_stream_script.h,root_prefix:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4002,456912,value,3,ngx_stream_complex_value_t.value,,stream\ngx_stream_script.h,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4003,456913,flushes,3,ngx_stream_complex_value_t.flushes,,stream\ngx_stream_script.h,*flushes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4004,456914,lengths,3,ngx_stream_complex_value_t.lengths,,stream\ngx_stream_script.h,*lengths,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4005,456915,values,3,ngx_stream_complex_value_t.values,,stream\ngx_stream_script.h,*values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4006,456917,size,3,ngx_stream_complex_value_t.u.size,,stream\ngx_stream_script.h,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4007,456918,u,3,ngx_stream_complex_value_t.u,,stream\ngx_stream_script.h,u,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4008,456921,cf,3,ngx_stream_compile_complex_value_t.cf,,stream\ngx_stream_script.h,*cf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
4009,456922,value,3,ngx_stream_compile_complex_value_t.value,,stream\ngx_stream_script.h,*value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4010,456923,complex_value,3,ngx_stream_compile_complex_value_t.complex_value,,stream\ngx_stream_script.h,*complex_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,10,0,1,1,0,0,,0,0,0,0,0,
4011,456924,zero,3,ngx_stream_compile_complex_value_t.zero,,stream\ngx_stream_script.h,zero:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4012,456925,conf_prefix,3,ngx_stream_compile_complex_value_t.conf_prefix,,stream\ngx_stream_script.h,conf_prefix:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4013,456926,root_prefix,3,ngx_stream_compile_complex_value_t.root_prefix,,stream\ngx_stream_script.h,root_prefix:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4014,456939,code,3,ngx_stream_script_copy_code_t.code,,stream\ngx_stream_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4015,456940,len,3,ngx_stream_script_copy_code_t.len,,stream\ngx_stream_script.h,len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4016,456943,code,3,ngx_stream_script_var_code_t.code,,stream\ngx_stream_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4017,456944,index,3,ngx_stream_script_var_code_t.index,,stream\ngx_stream_script.h,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4018,456947,code,3,ngx_stream_script_copy_capture_code_t.code,,stream\ngx_stream_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4019,456948,n,3,ngx_stream_script_copy_capture_code_t.n,,stream\ngx_stream_script.h,n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4020,456951,code,3,ngx_stream_script_full_name_code_t.code,,stream\ngx_stream_script.h,code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4021,456952,conf_prefix,3,ngx_stream_script_full_name_code_t.conf_prefix,,stream\ngx_stream_script.h,conf_prefix,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4022,457074,index,3,ngx_stream_set_cmd_t.index,,stream\ngx_stream_set_module.c,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4023,457075,set_handler,3,ngx_stream_set_cmd_t.set_handler,,stream\ngx_stream_set_module.c,set_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4024,457076,data,3,ngx_stream_set_cmd_t.data,,stream\ngx_stream_set_module.c,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4025,457077,value,3,ngx_stream_set_cmd_t.value,,stream\ngx_stream_set_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4026,457080,commands,3,ngx_stream_set_srv_conf_t.commands,,stream\ngx_stream_set_module.c,commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4027,457601,percent,3,ngx_stream_split_clients_part_t.percent,,stream\ngx_stream_split_clients_module.c,percent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4028,457602,value,3,ngx_stream_split_clients_part_t.value,,stream\ngx_stream_split_clients_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4029,457605,value,3,ngx_stream_split_clients_ctx_t.value,,stream\ngx_stream_split_clients_module.c,value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4030,457606,parts,3,ngx_stream_split_clients_ctx_t.parts,,stream\ngx_stream_split_clients_module.c,parts,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4031,460707,handshake_timeout,3,ngx_stream_ssl_conf_t.handshake_timeout,,stream\ngx_stream_ssl_module.h,handshake_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4032,460708,prefer_server_ciphers,3,ngx_stream_ssl_conf_t.prefer_server_ciphers,,stream\ngx_stream_ssl_module.h,prefer_server_ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4033,460709,ssl,3,ngx_stream_ssl_conf_t.ssl,,stream\ngx_stream_ssl_module.h,ssl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4034,460710,listen,3,ngx_stream_ssl_conf_t.listen,,stream\ngx_stream_ssl_module.h,listen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4035,460711,protocols,3,ngx_stream_ssl_conf_t.protocols,,stream\ngx_stream_ssl_module.h,protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4036,460712,verify,3,ngx_stream_ssl_conf_t.verify,,stream\ngx_stream_ssl_module.h,verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4037,460713,verify_depth,3,ngx_stream_ssl_conf_t.verify_depth,,stream\ngx_stream_ssl_module.h,verify_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4038,460714,builtin_session_cache,3,ngx_stream_ssl_conf_t.builtin_session_cache,,stream\ngx_stream_ssl_module.h,builtin_session_cache,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4039,460715,session_timeout,3,ngx_stream_ssl_conf_t.session_timeout,,stream\ngx_stream_ssl_module.h,session_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4040,460716,certificates,3,ngx_stream_ssl_conf_t.certificates,,stream\ngx_stream_ssl_module.h,*certificates,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4041,460717,certificate_keys,3,ngx_stream_ssl_conf_t.certificate_keys,,stream\ngx_stream_ssl_module.h,*certificate_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4042,460718,certificate_values,3,ngx_stream_ssl_conf_t.certificate_values,,stream\ngx_stream_ssl_module.h,*certificate_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4043,460719,certificate_key_values,3,ngx_stream_ssl_conf_t.certificate_key_values,,stream\ngx_stream_ssl_module.h,*certificate_key_values,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4044,460720,dhparam,3,ngx_stream_ssl_conf_t.dhparam,,stream\ngx_stream_ssl_module.h,dhparam,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4045,460721,ecdh_curve,3,ngx_stream_ssl_conf_t.ecdh_curve,,stream\ngx_stream_ssl_module.h,ecdh_curve,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4046,460722,client_certificate,3,ngx_stream_ssl_conf_t.client_certificate,,stream\ngx_stream_ssl_module.h,client_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4047,460723,trusted_certificate,3,ngx_stream_ssl_conf_t.trusted_certificate,,stream\ngx_stream_ssl_module.h,trusted_certificate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4048,460724,crl,3,ngx_stream_ssl_conf_t.crl,,stream\ngx_stream_ssl_module.h,crl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4049,460725,ciphers,3,ngx_stream_ssl_conf_t.ciphers,,stream\ngx_stream_ssl_module.h,ciphers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4050,460726,passwords,3,ngx_stream_ssl_conf_t.passwords,,stream\ngx_stream_ssl_module.h,*passwords,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4051,460727,conf_commands,3,ngx_stream_ssl_conf_t.conf_commands,,stream\ngx_stream_ssl_module.h,*conf_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4052,460728,shm_zone,3,ngx_stream_ssl_conf_t.shm_zone,,stream\ngx_stream_ssl_module.h,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4053,460729,session_tickets,3,ngx_stream_ssl_conf_t.session_tickets,,stream\ngx_stream_ssl_module.h,session_tickets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4054,460730,session_ticket_keys,3,ngx_stream_ssl_conf_t.session_ticket_keys,,stream\ngx_stream_ssl_module.h,*session_ticket_keys,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4055,460731,file,3,ngx_stream_ssl_conf_t.file,,stream\ngx_stream_ssl_module.h,*file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4056,460732,line,3,ngx_stream_ssl_conf_t.line,,stream\ngx_stream_ssl_module.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4057,460747,enabled,3,ngx_stream_ssl_preread_srv_conf_t.enabled,,stream\ngx_stream_ssl_preread_module.c,enabled,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4058,460750,left,3,ngx_stream_ssl_preread_ctx_t.left,,stream\ngx_stream_ssl_preread_module.c,left,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4059,460751,size,3,ngx_stream_ssl_preread_ctx_t.size,,stream\ngx_stream_ssl_preread_module.c,size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4060,460752,ext,3,ngx_stream_ssl_preread_ctx_t.ext,,stream\ngx_stream_ssl_preread_module.c,ext,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4061,460753,pos,3,ngx_stream_ssl_preread_ctx_t.pos,,stream\ngx_stream_ssl_preread_module.c,*pos,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4062,460754,dst,3,ngx_stream_ssl_preread_ctx_t.dst,,stream\ngx_stream_ssl_preread_module.c,*dst,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4063,460755,buf,3,ngx_stream_ssl_preread_ctx_t.buf,,stream\ngx_stream_ssl_preread_module.c,buf[4],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4064,460756,version,3,ngx_stream_ssl_preread_ctx_t.version,,stream\ngx_stream_ssl_preread_module.c,version[2],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4065,460757,host,3,ngx_stream_ssl_preread_ctx_t.host,,stream\ngx_stream_ssl_preread_module.c,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4066,460758,alpn,3,ngx_stream_ssl_preread_ctx_t.alpn,,stream\ngx_stream_ssl_preread_module.c,alpn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4067,460759,log,3,ngx_stream_ssl_preread_ctx_t.log,,stream\ngx_stream_ssl_preread_module.c,*log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4068,460760,pool,3,ngx_stream_ssl_preread_ctx_t.pool,,stream\ngx_stream_ssl_preread_module.c,*pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4069,460761,state,3,ngx_stream_ssl_preread_ctx_t.state,,stream\ngx_stream_ssl_preread_module.c,state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4070,464321,upstreams,3,ngx_stream_upstream_main_conf_t.upstreams,,stream\ngx_stream_upstream.h,upstreams,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4071,464338,init_upstream,3,ngx_stream_upstream_peer_t.init_upstream,,stream\ngx_stream_upstream.h,init_upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4072,464339,init,3,ngx_stream_upstream_peer_t.init,,stream\ngx_stream_upstream.h,init,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4073,464340,data,3,ngx_stream_upstream_peer_t.data,,stream\ngx_stream_upstream.h,*data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4074,464343,name,3,ngx_stream_upstream_server_t.name,,stream\ngx_stream_upstream.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4075,464344,addrs,3,ngx_stream_upstream_server_t.addrs,,stream\ngx_stream_upstream.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4076,464345,naddrs,3,ngx_stream_upstream_server_t.naddrs,,stream\ngx_stream_upstream.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4077,464346,weight,3,ngx_stream_upstream_server_t.weight,,stream\ngx_stream_upstream.h,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4078,464347,max_conns,3,ngx_stream_upstream_server_t.max_conns,,stream\ngx_stream_upstream.h,max_conns,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4079,464348,max_fails,3,ngx_stream_upstream_server_t.max_fails,,stream\ngx_stream_upstream.h,max_fails,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4080,464349,fail_timeout,3,ngx_stream_upstream_server_t.fail_timeout,,stream\ngx_stream_upstream.h,fail_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4081,464350,slow_start,3,ngx_stream_upstream_server_t.slow_start,,stream\ngx_stream_upstream.h,slow_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4082,464351,down,3,ngx_stream_upstream_server_t.down,,stream\ngx_stream_upstream.h,down,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4083,464352,backup,3,ngx_stream_upstream_server_t.backup,,stream\ngx_stream_upstream.h,backup:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4084,464356,peer,3,ngx_stream_upstream_srv_conf_s.peer,,stream\ngx_stream_upstream.h,peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4085,464357,srv_conf,3,ngx_stream_upstream_srv_conf_s.srv_conf,,stream\ngx_stream_upstream.h,**srv_conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4086,464358,servers,3,ngx_stream_upstream_srv_conf_s.servers,,stream\ngx_stream_upstream.h,*servers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4087,464359,flags,3,ngx_stream_upstream_srv_conf_s.flags,,stream\ngx_stream_upstream.h,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4088,464360,host,3,ngx_stream_upstream_srv_conf_s.host,,stream\ngx_stream_upstream.h,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4089,464361,file_name,3,ngx_stream_upstream_srv_conf_s.file_name,,stream\ngx_stream_upstream.h,*file_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4090,464362,line,3,ngx_stream_upstream_srv_conf_s.line,,stream\ngx_stream_upstream.h,line,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4091,464363,port,3,ngx_stream_upstream_srv_conf_s.port,,stream\ngx_stream_upstream.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4092,464364,no_port,3,ngx_stream_upstream_srv_conf_s.no_port,,stream\ngx_stream_upstream.h,no_port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4093,464365,shm_zone,3,ngx_stream_upstream_srv_conf_s.shm_zone,,stream\ngx_stream_upstream.h,*shm_zone,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4094,464367,response_time,3,ngx_stream_upstream_state_t.response_time,,stream\ngx_stream_upstream.h,response_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4095,464368,connect_time,3,ngx_stream_upstream_state_t.connect_time,,stream\ngx_stream_upstream.h,connect_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4096,464369,first_byte_time,3,ngx_stream_upstream_state_t.first_byte_time,,stream\ngx_stream_upstream.h,first_byte_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4097,464370,bytes_sent,3,ngx_stream_upstream_state_t.bytes_sent,,stream\ngx_stream_upstream.h,bytes_sent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4098,464371,bytes_received,3,ngx_stream_upstream_state_t.bytes_received,,stream\ngx_stream_upstream.h,bytes_received,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4099,464372,peer,3,ngx_stream_upstream_state_t.peer,,stream\ngx_stream_upstream.h,*peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4100,464375,host,3,ngx_stream_upstream_resolved_t.host,,stream\ngx_stream_upstream.h,host,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4101,464376,port,3,ngx_stream_upstream_resolved_t.port,,stream\ngx_stream_upstream.h,port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4102,464377,no_port,3,ngx_stream_upstream_resolved_t.no_port,,stream\ngx_stream_upstream.h,no_port,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4103,464378,naddrs,3,ngx_stream_upstream_resolved_t.naddrs,,stream\ngx_stream_upstream.h,naddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4104,464379,addrs,3,ngx_stream_upstream_resolved_t.addrs,,stream\ngx_stream_upstream.h,*addrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4105,464381,sockaddr,3,ngx_stream_upstream_resolved_t.sockaddr,,stream\ngx_stream_upstream.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4106,464382,socklen,3,ngx_stream_upstream_resolved_t.socklen,,stream\ngx_stream_upstream.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4107,464383,name,3,ngx_stream_upstream_resolved_t.name,,stream\ngx_stream_upstream.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4108,464384,ctx,3,ngx_stream_upstream_resolved_t.ctx,,stream\ngx_stream_upstream.h,*ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4109,464387,peer,3,ngx_stream_upstream_t.peer,,stream\ngx_stream_upstream.h,peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4110,464388,downstream_buf,3,ngx_stream_upstream_t.downstream_buf,,stream\ngx_stream_upstream.h,downstream_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4111,464389,upstream_buf,3,ngx_stream_upstream_t.upstream_buf,,stream\ngx_stream_upstream.h,upstream_buf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4112,464390,free,3,ngx_stream_upstream_t.free,,stream\ngx_stream_upstream.h,*free,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4113,464391,upstream_out,3,ngx_stream_upstream_t.upstream_out,,stream\ngx_stream_upstream.h,*upstream_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4114,464392,upstream_busy,3,ngx_stream_upstream_t.upstream_busy,,stream\ngx_stream_upstream.h,*upstream_busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4115,464393,downstream_out,3,ngx_stream_upstream_t.downstream_out,,stream\ngx_stream_upstream.h,*downstream_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4116,464394,downstream_busy,3,ngx_stream_upstream_t.downstream_busy,,stream\ngx_stream_upstream.h,*downstream_busy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4117,464395,received,3,ngx_stream_upstream_t.received,,stream\ngx_stream_upstream.h,received,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4118,464396,start_sec,3,ngx_stream_upstream_t.start_sec,,stream\ngx_stream_upstream.h,start_sec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4119,464397,requests,3,ngx_stream_upstream_t.requests,,stream\ngx_stream_upstream.h,requests,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4120,464398,responses,3,ngx_stream_upstream_t.responses,,stream\ngx_stream_upstream.h,responses,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4121,464399,start_time,3,ngx_stream_upstream_t.start_time,,stream\ngx_stream_upstream.h,start_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4122,464400,upload_rate,3,ngx_stream_upstream_t.upload_rate,,stream\ngx_stream_upstream.h,upload_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4123,464401,download_rate,3,ngx_stream_upstream_t.download_rate,,stream\ngx_stream_upstream.h,download_rate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4124,464402,ssl_name,3,ngx_stream_upstream_t.ssl_name,,stream\ngx_stream_upstream.h,ssl_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4125,464403,upstream,3,ngx_stream_upstream_t.upstream,,stream\ngx_stream_upstream.h,*upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4126,464404,resolved,3,ngx_stream_upstream_t.resolved,,stream\ngx_stream_upstream.h,*resolved,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4127,464405,state,3,ngx_stream_upstream_t.state,,stream\ngx_stream_upstream.h,*state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4128,464406,connected,3,ngx_stream_upstream_t.connected,,stream\ngx_stream_upstream.h,connected:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4129,464407,proxy_protocol,3,ngx_stream_upstream_t.proxy_protocol,,stream\ngx_stream_upstream.h,proxy_protocol:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4130,464429,hash,3,ngx_stream_upstream_chash_point_t.hash,,stream\ngx_stream_upstream_hash_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4131,464430,server,3,ngx_stream_upstream_chash_point_t.server,,stream\ngx_stream_upstream_hash_module.c,*server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4132,464433,number,3,ngx_stream_upstream_chash_points_t.number,,stream\ngx_stream_upstream_hash_module.c,number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4133,464434,point,3,ngx_stream_upstream_chash_points_t.point,,stream\ngx_stream_upstream_hash_module.c,point[1],-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4134,464443,key,3,ngx_stream_upstream_hash_srv_conf_t.key,,stream\ngx_stream_upstream_hash_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4135,464444,points,3,ngx_stream_upstream_hash_srv_conf_t.points,,stream\ngx_stream_upstream_hash_module.c,*points,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4136,464447,rrp,3,ngx_stream_upstream_hash_peer_data_t.rrp,,stream\ngx_stream_upstream_hash_module.c,rrp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4137,464448,conf,3,ngx_stream_upstream_hash_peer_data_t.conf,,stream\ngx_stream_upstream_hash_module.c,*conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4138,464449,key,3,ngx_stream_upstream_hash_peer_data_t.key,,stream\ngx_stream_upstream_hash_module.c,key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4139,464450,tries,3,ngx_stream_upstream_hash_peer_data_t.tries,,stream\ngx_stream_upstream_hash_module.c,tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4140,464451,rehash,3,ngx_stream_upstream_hash_peer_data_t.rehash,,stream\ngx_stream_upstream_hash_module.c,rehash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4141,464452,hash,3,ngx_stream_upstream_hash_peer_data_t.hash,,stream\ngx_stream_upstream_hash_module.c,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4142,464453,get_rr_peer,3,ngx_stream_upstream_hash_peer_data_t.get_rr_peer,,stream\ngx_stream_upstream_hash_module.c,get_rr_peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4143,467081,peer,3,ngx_stream_upstream_random_range_t.peer,,stream\ngx_stream_upstream_random_module.c,*peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4144,467082,range,3,ngx_stream_upstream_random_range_t.range,,stream\ngx_stream_upstream_random_module.c,range,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4145,467085,two,3,ngx_stream_upstream_random_srv_conf_t.two,,stream\ngx_stream_upstream_random_module.c,two,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4146,467086,ranges,3,ngx_stream_upstream_random_srv_conf_t.ranges,,stream\ngx_stream_upstream_random_module.c,*ranges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4147,467089,rrp,3,ngx_stream_upstream_random_peer_data_t.rrp,,stream\ngx_stream_upstream_random_module.c,rrp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4148,467090,conf,3,ngx_stream_upstream_random_peer_data_t.conf,,stream\ngx_stream_upstream_random_module.c,*conf,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4149,467091,tries,3,ngx_stream_upstream_random_peer_data_t.tries,,stream\ngx_stream_upstream_random_module.c,tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4150,470672,sockaddr,3,ngx_stream_upstream_rr_peer_s.sockaddr,,stream\ngx_stream_upstream_round_robin.h,*sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4151,470673,socklen,3,ngx_stream_upstream_rr_peer_s.socklen,,stream\ngx_stream_upstream_round_robin.h,socklen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4152,470674,name,3,ngx_stream_upstream_rr_peer_s.name,,stream\ngx_stream_upstream_round_robin.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4153,470675,server,3,ngx_stream_upstream_rr_peer_s.server,,stream\ngx_stream_upstream_round_robin.h,server,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4154,470676,current_weight,3,ngx_stream_upstream_rr_peer_s.current_weight,,stream\ngx_stream_upstream_round_robin.h,current_weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4155,470677,effective_weight,3,ngx_stream_upstream_rr_peer_s.effective_weight,,stream\ngx_stream_upstream_round_robin.h,effective_weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4156,470678,weight,3,ngx_stream_upstream_rr_peer_s.weight,,stream\ngx_stream_upstream_round_robin.h,weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4157,470679,conns,3,ngx_stream_upstream_rr_peer_s.conns,,stream\ngx_stream_upstream_round_robin.h,conns,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4158,470680,max_conns,3,ngx_stream_upstream_rr_peer_s.max_conns,,stream\ngx_stream_upstream_round_robin.h,max_conns,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4159,470681,fails,3,ngx_stream_upstream_rr_peer_s.fails,,stream\ngx_stream_upstream_round_robin.h,fails,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4160,470682,accessed,3,ngx_stream_upstream_rr_peer_s.accessed,,stream\ngx_stream_upstream_round_robin.h,accessed,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4161,470683,checked,3,ngx_stream_upstream_rr_peer_s.checked,,stream\ngx_stream_upstream_round_robin.h,checked,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4162,470684,max_fails,3,ngx_stream_upstream_rr_peer_s.max_fails,,stream\ngx_stream_upstream_round_robin.h,max_fails,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4163,470685,fail_timeout,3,ngx_stream_upstream_rr_peer_s.fail_timeout,,stream\ngx_stream_upstream_round_robin.h,fail_timeout,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4164,470686,slow_start,3,ngx_stream_upstream_rr_peer_s.slow_start,,stream\ngx_stream_upstream_round_robin.h,slow_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4165,470687,start_time,3,ngx_stream_upstream_rr_peer_s.start_time,,stream\ngx_stream_upstream_round_robin.h,start_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4166,470688,down,3,ngx_stream_upstream_rr_peer_s.down,,stream\ngx_stream_upstream_round_robin.h,down,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4167,470689,ssl_session,3,ngx_stream_upstream_rr_peer_s.ssl_session,,stream\ngx_stream_upstream_round_robin.h,*ssl_session,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4168,470690,ssl_session_len,3,ngx_stream_upstream_rr_peer_s.ssl_session_len,,stream\ngx_stream_upstream_round_robin.h,ssl_session_len,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4169,470691,lock,3,ngx_stream_upstream_rr_peer_s.lock,,stream\ngx_stream_upstream_round_robin.h,lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4170,470692,next,3,ngx_stream_upstream_rr_peer_s.next,,stream\ngx_stream_upstream_round_robin.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4171,470697,number,3,ngx_stream_upstream_rr_peers_s.number,,stream\ngx_stream_upstream_round_robin.h,number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4172,470698,shpool,3,ngx_stream_upstream_rr_peers_s.shpool,,stream\ngx_stream_upstream_round_robin.h,*shpool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4173,470699,rwlock,3,ngx_stream_upstream_rr_peers_s.rwlock,,stream\ngx_stream_upstream_round_robin.h,rwlock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4174,470700,zone_next,3,ngx_stream_upstream_rr_peers_s.zone_next,,stream\ngx_stream_upstream_round_robin.h,*zone_next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4175,470701,total_weight,3,ngx_stream_upstream_rr_peers_s.total_weight,,stream\ngx_stream_upstream_round_robin.h,total_weight,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4176,470702,tries,3,ngx_stream_upstream_rr_peers_s.tries,,stream\ngx_stream_upstream_round_robin.h,tries,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4177,470703,single,3,ngx_stream_upstream_rr_peers_s.single,,stream\ngx_stream_upstream_round_robin.h,single:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4178,470704,weighted,3,ngx_stream_upstream_rr_peers_s.weighted,,stream\ngx_stream_upstream_round_robin.h,weighted:1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4179,470705,name,3,ngx_stream_upstream_rr_peers_s.name,,stream\ngx_stream_upstream_round_robin.h,*name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4180,470706,next,3,ngx_stream_upstream_rr_peers_s.next,,stream\ngx_stream_upstream_round_robin.h,*next,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4181,470707,peer,3,ngx_stream_upstream_rr_peers_s.peer,,stream\ngx_stream_upstream_round_robin.h,*peer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4182,470709,config,3,ngx_stream_upstream_rr_peer_data_t.config,,stream\ngx_stream_upstream_round_robin.h,config,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
4183,470710,peers,3,ngx_stream_upstream_rr_peer_data_t.peers,,stream\ngx_stream_upstream_round_robin.h,*peers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,25,0,1,1,0,0,,0,0,0,0,0,
4184,470711,current,3,ngx_stream_upstream_rr_peer_data_t.current,,stream\ngx_stream_upstream_round_robin.h,*current,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4185,470712,tried,3,ngx_stream_upstream_rr_peer_data_t.tried,,stream\ngx_stream_upstream_round_robin.h,*tried,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
4186,470713,data,3,ngx_stream_upstream_rr_peer_data_t.data,,stream\ngx_stream_upstream_round_robin.h,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
4187,474883,name,3,ngx_stream_variable_s.name,,stream\ngx_stream_variables.h,name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4188,474884,set_handler,3,ngx_stream_variable_s.set_handler,,stream\ngx_stream_variables.h,set_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4189,474885,get_handler,3,ngx_stream_variable_s.get_handler,,stream\ngx_stream_variables.h,get_handler,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4190,474886,data,3,ngx_stream_variable_s.data,,stream\ngx_stream_variables.h,data,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4191,474887,flags,3,ngx_stream_variable_s.flags,,stream\ngx_stream_variables.h,flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4192,474888,index,3,ngx_stream_variable_s.index,,stream\ngx_stream_variables.h,index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4193,474922,hash,3,ngx_stream_map_t.hash,,stream\ngx_stream_variables.h,hash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
4194,474923,regex,3,ngx_stream_map_t.regex,,stream\ngx_stream_variables.h,*regex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4195,474924,nregex,3,ngx_stream_map_t.nregex,,stream\ngx_stream_variables.h,nregex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4196,474957,from_upstream,3,ngx_stream_write_filter_ctx_t.from_upstream,,stream\ngx_stream_write_filter_module.c,*from_upstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4197,474958,from_downstream,3,ngx_stream_write_filter_ctx_t.from_downstream,,stream\ngx_stream_write_filter_module.c,*from_downstream,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
4198,13,ngx_show_version_info,1,ngx_show_version_info,void ngx_show_version_info (void),core\nginx.c,"static void
ngx_show_version_info(void)
{
    ngx_write_stderr(""nginx version: "" NGINX_VER_BUILD NGX_LINEFEED);

    if (ngx_show_help) {
        ngx_write_stderr(
            ""Usage: nginx [-?hvVtTq] [-s signal] [-p prefix]"" NGX_LINEFEED
            ""             [-e filename] [-c filename] [-g directives]""
                          NGX_LINEFEED NGX_LINEFEED
            ""Options:"" NGX_LINEFEED
            ""  -?,-h         : this help"" NGX_LINEFEED
            ""  -v            : show version and exit"" NGX_LINEFEED
            ""  -V            : show version and configure options then exit""
                               NGX_LINEFEED
            ""  -t            : test configuration and exit"" NGX_LINEFEED
            ""  -T            : test configuration, dump it and exit""
                               NGX_LINEFEED
            ""  -q            : suppress non-error messages ""
                               ""during configuration testing"" NGX_LINEFEED
            ""  -s signal     : sen...",390.0,455.0,1.0,1.0,66.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
4199,18,ngx_add_inherited_sockets,1,ngx_add_inherited_sockets,ngx_int_t ngx_add_inherited_sockets (ngx_cycle_t*),core\nginx.c,"static ngx_int_t
ngx_add_inherited_sockets(ngx_cycle_t *cycle)
{
    u_char           *p, *v, *inherited;
    ngx_int_t         s;
    ngx_listening_t  *ls;

    inherited = (u_char *) getenv(NGINX_VAR);

    if (inherited == NULL) {
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0,
                  ""using inherited sockets from \""%s\"""", inherited);

    if (ngx_array_init(&cycle->listening, cycle->pool, 10,
                       sizeof(ngx_listening_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    for (p = inherited, v = p; *p; p++) {
        if (*p == ':' || *p == ';') {
            s = ngx_atoi(v, p - v);
            if (s == NGX_ERROR) {
                ngx_log_error(NGX_LOG_EMERG, cycle->log, 0,
                              ""invalid socket number \""%s\"" in "" NGINX_VAR
                              "" environment variable, ignoring the rest""
                              "" of the variable"", v);
                break;
            }
...",458.0,515.0,1.0,1.0,58.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4200,23,ngx_cleanup_environment,1,ngx_cleanup_environment,void ngx_cleanup_environment (void*),core\nginx.c,"static void
ngx_cleanup_environment(void *data)
{
    char  **env = data;

    if (environ == env) {

        /*
         * if the environment is still used, as it happens on exit,
         * the only option is to leak it
         */

        return;
    }

    ngx_free(env);
}",629.0,645.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4201,28,ngx_get_options,1,ngx_get_options,"ngx_int_t ngx_get_options (int,char**)",core\nginx.c,"static ngx_int_t
ngx_get_options(int argc, char *const *argv)
{
    u_char     *p;
    ngx_int_t   i;

    for (i = 1; i < argc; i++) {

        p = (u_char *) argv[i];

        if (*p++ != '-') {
            ngx_log_stderr(0, ""invalid option: \""%s\"""", argv[i]);
            return NGX_ERROR;
        }

        while (*p) {

            switch (*p++) {

            case '?':
            case 'h':
                ngx_show_version = 1;
                ngx_show_help = 1;
                break;

            case 'v':
                ngx_show_version = 1;
                break;

            case 'V':
                ngx_show_version = 1;
                ngx_show_configure = 1;
                break;

            case 't':
                ngx_test_config = 1;
                break;

            case 'T':
                ngx_test_config = 1;
                ngx_dump_config = 1;
                break;

            case 'q':
                ngx_quiet_mode = 1;
                break;

        ...",749.0,892.0,1.0,1.0,144.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4202,34,ngx_process_options,1,ngx_process_options,ngx_int_t ngx_process_options (ngx_cycle_t*),core\nginx.c,"static ngx_int_t
ngx_process_options(ngx_cycle_t *cycle)
{
    u_char  *p;
    size_t   len;

    if (ngx_prefix) {
        len = ngx_strlen(ngx_prefix);
        p = ngx_prefix;

        if (len && !ngx_path_separator(p[len - 1])) {
            p = ngx_pnalloc(cycle->pool, len + 1);
            if (p == NULL) {
                return NGX_ERROR;
            }

            ngx_memcpy(p, ngx_prefix, len);
            p[len++] = '/';
        }

        cycle->conf_prefix.len = len;
        cycle->conf_prefix.data = p;
        cycle->prefix.len = len;
        cycle->prefix.data = p;

    } else {

#ifndef NGX_PREFIX

        p = ngx_pnalloc(cycle->pool, NGX_MAX_PATH);
        if (p == NULL) {
            return NGX_ERROR;
        }

        if (ngx_getcwd(p, NGX_MAX_PATH) == 0) {
            ngx_log_stderr(ngx_errno, ""[emerg]: "" ngx_getcwd_n "" failed"");
            return NGX_ERROR;
        }

        len = ngx_strlen(p);

        p[len++] = '/';

        cycle->conf_prefix.len = len;
  ...",937.0,1038.0,1.0,1.0,102.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4203,39,ngx_save_argv,1,ngx_save_argv,"ngx_int_t ngx_save_argv (ngx_cycle_t*,int,char**)",core\nginx.c,"static ngx_int_t
ngx_save_argv(ngx_cycle_t *cycle, int argc, char *const *argv)
{
#if (NGX_FREEBSD)

    ngx_os_argv = (char **) argv;
    ngx_argc = argc;
    ngx_argv = (char **) argv;

#else
    size_t     len;
    ngx_int_t  i;

    ngx_os_argv = (char **) argv;
    ngx_argc = argc;

    ngx_argv = ngx_alloc((argc + 1) * sizeof(char *), cycle->log);
    if (ngx_argv == NULL) {
        return NGX_ERROR;
    }

    for (i = 0; i < argc; i++) {
        len = ngx_strlen(argv[i]) + 1;

        ngx_argv[i] = ngx_alloc(len, cycle->log);
        if (ngx_argv[i] == NULL) {
            return NGX_ERROR;
        }

        (void) ngx_cpystrn((u_char *) ngx_argv[i], (u_char *) argv[i], len);
    }

    ngx_argv[i] = NULL;

#endif

    ngx_os_environ = environ;

    return NGX_OK;
}",895.0,934.0,1.0,1.0,40.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4204,46,ngx_core_module_create_conf,1,ngx_core_module_create_conf,void* ngx_core_module_create_conf (ngx_cycle_t*),core\nginx.c,"static void *
ngx_core_module_create_conf(ngx_cycle_t *cycle)
{
    ngx_core_conf_t  *ccf;

    ccf = ngx_pcalloc(cycle->pool, sizeof(ngx_core_conf_t));
    if (ccf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc()
     *
     *     ccf->pid = NULL;
     *     ccf->oldpid = NULL;
     *     ccf->priority = 0;
     *     ccf->cpu_affinity_auto = 0;
     *     ccf->cpu_affinity_n = 0;
     *     ccf->cpu_affinity = NULL;
     */

    ccf->daemon = NGX_CONF_UNSET;
    ccf->master = NGX_CONF_UNSET;
    ccf->timer_resolution = NGX_CONF_UNSET_MSEC;
    ccf->shutdown_timeout = NGX_CONF_UNSET_MSEC;

    ccf->worker_processes = NGX_CONF_UNSET;
    ccf->debug_points = NGX_CONF_UNSET;

    ccf->rlimit_nofile = NGX_CONF_UNSET;
    ccf->rlimit_core = NGX_CONF_UNSET;

    ccf->user = (ngx_uid_t) NGX_CONF_UNSET_UINT;
    ccf->group = (ngx_gid_t) NGX_CONF_UNSET_UINT;

    if (ngx_array_init(&ccf->env, cycle->pool, 1, sizeof(ngx_str_t))
        != NGX_OK)
    {
        return...",1041.0,1083.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4205,51,ngx_core_module_init_conf,1,ngx_core_module_init_conf,"char* ngx_core_module_init_conf (ngx_cycle_t*,void*)",core\nginx.c,"static char *
ngx_core_module_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_core_conf_t  *ccf = conf;

    ngx_conf_init_value(ccf->daemon, 1);
    ngx_conf_init_value(ccf->master, 1);
    ngx_conf_init_msec_value(ccf->timer_resolution, 0);
    ngx_conf_init_msec_value(ccf->shutdown_timeout, 0);

    ngx_conf_init_value(ccf->worker_processes, 1);
    ngx_conf_init_value(ccf->debug_points, 0);

#if (NGX_HAVE_CPU_AFFINITY)

    if (!ccf->cpu_affinity_auto
        && ccf->cpu_affinity_n
        && ccf->cpu_affinity_n != 1
        && ccf->cpu_affinity_n != (ngx_uint_t) ccf->worker_processes)
    {
        ngx_log_error(NGX_LOG_WARN, cycle->log, 0,
                      ""the number of \""worker_processes\"" is not equal to ""
                      ""the number of \""worker_cpu_affinity\"" masks, ""
                      ""using last mask for remaining worker processes"");
    }

#endif


    if (ccf->pid.len == 0) {
        ngx_str_set(&ccf->pid, NGX_PID_PATH);
    }

    if (ngx_conf_full_...",1086.0,1212.0,1.0,1.0,127.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4206,57,ngx_set_user,1,ngx_set_user,"char* ngx_set_user (ngx_conf_t*,ngx_command_t*,void*)",core\nginx.c,"static char *
ngx_set_user(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
#if (NGX_WIN32)

    ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                       ""\""user\"" is not supported, ignored"");

    return NGX_CONF_OK;

#else

    ngx_core_conf_t  *ccf = conf;

    char             *group;
    struct passwd    *pwd;
    struct group     *grp;
    ngx_str_t        *value;

    if (ccf->user != (uid_t) NGX_CONF_UNSET_UINT) {
        return ""is duplicate"";
    }

    if (geteuid() != 0) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""the \""user\"" directive makes sense only ""
                           ""if the master process runs ""
                           ""with super-user privileges, ignored"");
        return NGX_CONF_OK;
    }

    value = cf->args->elts;

    ccf->username = (char *) value[1].data;

    ngx_set_errno(0);
    pwd = getpwnam((const char *) value[1].data);
    if (pwd == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, ngx_errn...",1215.0,1275.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4207,64,ngx_set_env,1,ngx_set_env,"char* ngx_set_env (ngx_conf_t*,ngx_command_t*,void*)",core\nginx.c,"static char *
ngx_set_env(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_core_conf_t  *ccf = conf;

    ngx_str_t   *value, *var;
    ngx_uint_t   i;

    var = ngx_array_push(&ccf->env);
    if (var == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;
    *var = value[1];

    for (i = 0; i < value[1].len; i++) {

        if (value[1].data[i] == '=') {

            var->len = i;

            return NGX_CONF_OK;
        }
    }

    return NGX_CONF_OK;
}",1278.0,1305.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4208,71,ngx_set_priority,1,ngx_set_priority,"char* ngx_set_priority (ngx_conf_t*,ngx_command_t*,void*)",core\nginx.c,"static char *
ngx_set_priority(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_core_conf_t  *ccf = conf;

    ngx_str_t        *value;
    ngx_uint_t        n, minus;

    if (ccf->priority != 0) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (value[1].data[0] == '-') {
        n = 1;
        minus = 1;

    } else if (value[1].data[0] == '+') {
        n = 1;
        minus = 0;

    } else {
        n = 0;
        minus = 0;
    }

    ccf->priority = ngx_atoi(&value[1].data[n], value[1].len - n);
    if (ccf->priority == NGX_ERROR) {
        return ""invalid number"";
    }

    if (minus) {
        ccf->priority = -ccf->priority;
    }

    return NGX_CONF_OK;
}",1308.0,1345.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4209,78,ngx_set_cpu_affinity,1,ngx_set_cpu_affinity,"char* ngx_set_cpu_affinity (ngx_conf_t*,ngx_command_t*,void*)",core\nginx.c,"static char *
ngx_set_cpu_affinity(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
#if (NGX_HAVE_CPU_AFFINITY)
    ngx_core_conf_t  *ccf = conf;

    u_char            ch, *p;
    ngx_str_t        *value;
    ngx_uint_t        i, n;
    ngx_cpuset_t     *mask;

    if (ccf->cpu_affinity) {
        return ""is duplicate"";
    }

    mask = ngx_palloc(cf->pool, (cf->args->nelts - 1) * sizeof(ngx_cpuset_t));
    if (mask == NULL) {
        return NGX_CONF_ERROR;
    }

    ccf->cpu_affinity_n = cf->args->nelts - 1;
    ccf->cpu_affinity = mask;

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""auto"") == 0) {

        if (cf->args->nelts > 3) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid number of arguments in ""
                               ""\""worker_cpu_affinity\"" directive"");
            return NGX_CONF_ERROR;
        }

        ccf->cpu_affinity_auto = 1;

        CPU_ZERO(&mask[0]);
        for (i = 0; i < (ngx_uint_...",1348.0,1443.0,1.0,1.0,96.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4210,85,ngx_set_worker_processes,1,ngx_set_worker_processes,"char* ngx_set_worker_processes (ngx_conf_t*,ngx_command_t*,void*)",core\nginx.c,"static char *
ngx_set_worker_processes(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_str_t        *value;
    ngx_core_conf_t  *ccf;

    ccf = (ngx_core_conf_t *) conf;

    if (ccf->worker_processes != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""auto"") == 0) {
        ccf->worker_processes = ngx_ncpu;
        return NGX_CONF_OK;
    }

    ccf->worker_processes = ngx_atoi(value[1].data, value[1].len);

    if (ccf->worker_processes == NGX_ERROR) {
        return ""invalid value"";
    }

    return NGX_CONF_OK;
}",1500.0,1526.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4211,92,ngx_load_module,1,ngx_load_module,"char* ngx_load_module (ngx_conf_t*,ngx_command_t*,void*)",core\nginx.c,"static char *
ngx_load_module(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
#if (NGX_HAVE_DLOPEN)
    void                *handle;
    char               **names, **order;
    ngx_str_t           *value, file;
    ngx_uint_t           i;
    ngx_module_t        *module, **modules;
    ngx_pool_cleanup_t  *cln;

    if (cf->cycle->modules_used) {
        return ""is specified too late"";
    }

    value = cf->args->elts;

    file = value[1];

    if (ngx_conf_full_name(cf->cycle, &file, 0) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    cln = ngx_pool_cleanup_add(cf->cycle->pool, 0);
    if (cln == NULL) {
        return NGX_CONF_ERROR;
    }

    handle = ngx_dlopen(file.data);
    if (handle == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ngx_dlopen_n "" \""%s\"" failed (%s)"",
                           file.data, ngx_dlerror());
        return NGX_CONF_ERROR;
    }

    cln->handler = ngx_unload_module;
    cln->data = handle;

    mo...",1529.0,1608.0,1.0,1.0,80.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4212,368,main,1,main,"ANY main (int,char**)",core\nginx.c,"main(int argc, char *const *argv)
{
    ngx_buf_t        *b;
    ngx_log_t        *log;
    ngx_uint_t        i;
    ngx_cycle_t      *cycle, init_cycle;
    ngx_conf_dump_t  *cd;
    ngx_core_conf_t  *ccf;

    ngx_debug_init();

    if (ngx_strerror_init() != NGX_OK) {
        return 1;
    }

    if (ngx_get_options(argc, argv) != NGX_OK) {
        return 1;
    }

    if (ngx_show_version) {
        ngx_show_version_info();

        if (!ngx_test_config) {
            return 0;
        }
    }

    /* TODO */ ngx_max_sockets = -1;

    ngx_time_init();

#if (NGX_PCRE)
    ngx_regex_init();
#endif

    ngx_pid = ngx_getpid();
    ngx_parent = ngx_getppid();

    log = ngx_log_init(ngx_prefix, ngx_error_log);
    if (log == NULL) {
        return 1;
    }

    /* STUB */
#if (NGX_OPENSSL)
    ngx_ssl_init(log);
#endif

    /*
     * init_cycle->log is required for signal handlers and
     * ngx_process_options()
     */

    ngx_memzero(&init_cycle, sizeof(ngx_cycle_t));
    init_...",196.0,387.0,1.0,1.0,192.0,89,14,100,34,0,35,30,38,17,26,,0,24,4,2,2,ANY
4213,900,ngx_set_environment,1,ngx_set_environment,"char** ngx_set_environment (ngx_cycle_t*,ngx_uint_t*)",core\nginx.c,"char **
ngx_set_environment(ngx_cycle_t *cycle, ngx_uint_t *last)
{
    char                **p, **env;
    ngx_str_t            *var;
    ngx_uint_t            i, n;
    ngx_core_conf_t      *ccf;
    ngx_pool_cleanup_t   *cln;

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    if (last == NULL && ccf->environment) {
        return ccf->environment;
    }

    var = ccf->env.elts;

    for (i = 0; i < ccf->env.nelts; i++) {
        if (ngx_strcmp(var[i].data, ""TZ"") == 0
            || ngx_strncmp(var[i].data, ""TZ="", 3) == 0)
        {
            goto tz_found;
        }
    }

    var = ngx_array_push(&ccf->env);
    if (var == NULL) {
        return NULL;
    }

    var->len = 2;
    var->data = (u_char *) ""TZ"";

    var = ccf->env.elts;

tz_found:

    n = 0;

    for (i = 0; i < ccf->env.nelts; i++) {

        if (var[i].data[var[i].len] == '=') {
            n++;
            continue;
        }

        for (p = ngx_os_environ; *p; p++) {

    ...",518.0,626.0,1.0,1.0,109.0,111,15,93,13,2,16,21,26,4,2,,0,16,4,2,2,char**
4214,1294,ngx_exec_new_binary,1,ngx_exec_new_binary,"ngx_pid_t ngx_exec_new_binary (ngx_cycle_t*,char**)",core\nginx.c,"ngx_pid_t
ngx_exec_new_binary(ngx_cycle_t *cycle, char *const *argv)
{
    char             **env, *var;
    u_char            *p;
    ngx_uint_t         i, n;
    ngx_pid_t          pid;
    ngx_exec_ctx_t     ctx;
    ngx_core_conf_t   *ccf;
    ngx_listening_t   *ls;

    ngx_memzero(&ctx, sizeof(ngx_exec_ctx_t));

    ctx.path = argv[0];
    ctx.name = ""new binary process"";
    ctx.argv = argv;

    n = 2;
    env = ngx_set_environment(cycle, &n);
    if (env == NULL) {
        return NGX_INVALID_PID;
    }

    var = ngx_alloc(sizeof(NGINX_VAR)
                    + cycle->listening.nelts * (NGX_INT32_LEN + 1) + 2,
                    cycle->log);
    if (var == NULL) {
        ngx_free(env);
        return NGX_INVALID_PID;
    }

    p = ngx_cpymem(var, NGINX_VAR ""="", sizeof(NGINX_VAR));

    ls = cycle->listening.elts;
    for (i = 0; i < cycle->listening.nelts; i++) {
        p = ngx_sprintf(p, ""%ud;"", ls[i].fd);
    }

    *p = '\0';

    env[n++] = var;

#if (NGX_SETPROCTI...",648.0,746.0,1.0,1.0,99.0,59,13,61,18,1,13,7,8,4,4,,0,13,4,2,2,ngx_pid_t
4215,3017,ngx_get_cpu_affinity,1,ngx_get_cpu_affinity,ngx_cpuset_t ngx_get_cpu_affinity (ngx_uint_t),core\nginx.c,"ngx_cpuset_t *
ngx_get_cpu_affinity(ngx_uint_t n)
{
#if (NGX_HAVE_CPU_AFFINITY)
    ngx_uint_t        i, j;
    ngx_cpuset_t     *mask;
    ngx_core_conf_t  *ccf;

    static ngx_cpuset_t  result;

    ccf = (ngx_core_conf_t *) ngx_get_conf(ngx_cycle->conf_ctx,
                                           ngx_core_module);

    if (ccf->cpu_affinity == NULL) {
        return NULL;
    }

    if (ccf->cpu_affinity_auto) {
        mask = &ccf->cpu_affinity[ccf->cpu_affinity_n - 1];

        for (i = 0, j = n; /* void */ ; i++) {

            if (CPU_ISSET(i % CPU_SETSIZE, mask) && j-- == 0) {
                break;
            }

            if (i == CPU_SETSIZE && j == n) {
                /* empty mask */
                return NULL;
            }

            /* void */
        }

        CPU_ZERO(&result);
        CPU_SET(i % CPU_SETSIZE, &result);

        return &result;
    }

    if (ccf->cpu_affinity_n > n) {
        return &ccf->cpu_affinity[n];
    }

    return &ccf->cpu_aff...",1446.0,1497.0,1.0,1.0,52.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,ngx_cpuset_t
4216,3126,ngx_array_create,1,ngx_array_create,"ngx_array_t ngx_array_create (ngx_pool_t*,ngx_uint_t,size_t)",core\ngx_array.c,"ngx_array_t *
ngx_array_create(ngx_pool_t *p, ngx_uint_t n, size_t size)
{
    ngx_array_t *a;

    a = ngx_palloc(p, sizeof(ngx_array_t));
    if (a == NULL) {
        return NULL;
    }

    if (ngx_array_init(a, p, n, size) != NGX_OK) {
        return NULL;
    }

    return a;
}",12.0,27.0,1.0,1.0,16.0,4,4,13,7,13,2,3,3,1,2,,0,2,6,3,3,ngx_array_t
4217,3160,ngx_array_destroy,1,ngx_array_destroy,void ngx_array_destroy (ngx_array_t*),core\ngx_array.c,"void
ngx_array_destroy(ngx_array_t *a)
{
    ngx_pool_t  *p;

    p = a->pool;

    if ((u_char *) a->elts + a->size * a->nalloc == p->d.last) {
        p->d.last -= a->size * a->nalloc;
    }

    if ((u_char *) a + sizeof(ngx_array_t) == p->d.last) {
        p->d.last = (u_char *) a;
    }
}",30.0,44.0,1.0,1.0,15.0,27,9,14,3,0,6,3,3,3,0,,0,6,2,1,1,void
4218,3228,ngx_array_push,1,ngx_array_push,void* ngx_array_push (ngx_array_t*),core\ngx_array.c,"void *
ngx_array_push(ngx_array_t *a)
{
    void        *elt, *new;
    size_t       size;
    ngx_pool_t  *p;

    if (a->nelts == a->nalloc) {

        /* the array is full */

        size = a->size * a->nalloc;

        p = a->pool;

        if ((u_char *) a->elts + size == p->d.last
            && p->d.last + a->size <= p->d.end)
        {
            /*
             * the array allocation is the last in the pool
             * and there is space for new allocation
             */

            p->d.last += a->size;
            a->nalloc++;

        } else {
            /* allocate a new array */

            new = ngx_palloc(p, 2 * size);
            if (new == NULL) {
                return NULL;
            }

            ngx_memcpy(new, a->elts, size);
            a->elts = new;
            a->nalloc *= 2;
        }
    }

    elt = (u_char *) a->elts + a->size * a->nelts;
    a->nelts++;

    return elt;
}",47.0,91.0,1.0,1.0,45.0,38,11,22,4,36,13,3,4,4,0,,0,13,2,1,1,void*
4219,3357,ngx_array_push_n,1,ngx_array_push_n,"void* ngx_array_push_n (ngx_array_t*,ngx_uint_t)",core\ngx_array.c,"void *
ngx_array_push_n(ngx_array_t *a, ngx_uint_t n)
{
    void        *elt, *new;
    size_t       size;
    ngx_uint_t   nalloc;
    ngx_pool_t  *p;

    size = n * a->size;

    if (a->nelts + n > a->nalloc) {

        /* the array is full */

        p = a->pool;

        if ((u_char *) a->elts + a->size * a->nalloc == p->d.last
            && p->d.last + size <= p->d.end)
        {
            /*
             * the array allocation is the last in the pool
             * and there is space for new allocation
             */

            p->d.last += size;
            a->nalloc += n;

        } else {
            /* allocate a new array */

            nalloc = 2 * ((n >= a->nalloc) ? n : a->nalloc);

            new = ngx_palloc(p, nalloc * a->size);
            if (new == NULL) {
                return NULL;
            }

            ngx_memcpy(new, a->elts, a->nelts * a->size);
            a->elts = new;
            a->nalloc = nalloc;
        }
    }

    elt = (u_char *) a...",94.0,141.0,1.0,1.0,48.0,39,11,26,5,4,12,3,4,5,0,,0,12,4,2,2,void*
4220,3555,ngx_array_init,1,ngx_array_init,"ANY ngx_array_init (ngx_array_t*,ngx_pool_t*,ngx_uint_t,size_t)",core\ngx_array.h,"ngx_array_init(ngx_array_t *array, ngx_pool_t *pool, ngx_uint_t n, size_t size)
{
    /*
     * set ""array->nelts"" before ""array->elts"", otherwise MSVC thinks
     * that ""array->nelts"" may be used without having been initialized
     */

    array->nelts = 0;
    array->size = size;
    array->nalloc = n;
    array->pool = pool;

    array->elts = ngx_palloc(pool, n * size);
    if (array->elts == NULL) {
        return NGX_ERROR;
    }

    return NGX_OK;
}",32.0,50.0,1.0,1.0,19.0,13,4,15,7,26,7,2,2,1,1,,0,7,8,4,4,ANY
4221,3612,ngx_create_temp_buf,1,ngx_create_temp_buf,"ngx_buf_t ngx_create_temp_buf (ngx_pool_t*,size_t)",core\ngx_buf.c,"ngx_buf_t *
ngx_create_temp_buf(ngx_pool_t *pool, size_t size)
{
    ngx_buf_t *b;

    b = ngx_calloc_buf(pool);
    if (b == NULL) {
        return NULL;
    }

    b->start = ngx_palloc(pool, size);
    if (b->start == NULL) {
        return NULL;
    }

    /*
     * set by ngx_calloc_buf():
     *
     *     b->file_pos = 0;
     *     b->file_last = 0;
     *     b->file = NULL;
     *     b->shadow = NULL;
     *     b->tag = 0;
     *     and flags
     */

    b->pos = b->start;
    b->last = b->start;
    b->end = b->last + size;
    b->temporary = 1;

    return b;
}",12.0,44.0,1.0,1.0,33.0,18,4,20,4,6,1,3,3,0,1,,0,1,4,2,2,ngx_buf_t
4222,3676,ngx_alloc_chain_link,1,ngx_alloc_chain_link,ngx_chain_t ngx_alloc_chain_link (ngx_pool_t*),core\ngx_buf.c,"ngx_chain_t *
ngx_alloc_chain_link(ngx_pool_t *pool)
{
    ngx_chain_t  *cl;

    cl = pool->chain;

    if (cl) {
        pool->chain = cl->next;
        return cl;
    }

    cl = ngx_palloc(pool, sizeof(ngx_chain_t));
    if (cl == NULL) {
        return NULL;
    }

    return cl;
}",47.0,65.0,1.0,1.0,19.0,8,4,13,4,7,1,3,3,0,1,,0,1,2,1,1,ngx_chain_t
4223,3714,ngx_create_chain_of_bufs,1,ngx_create_chain_of_bufs,"ngx_chain_t ngx_create_chain_of_bufs (ngx_pool_t*,ngx_bufs_t*)",core\ngx_buf.c,"ngx_chain_t *
ngx_create_chain_of_bufs(ngx_pool_t *pool, ngx_bufs_t *bufs)
{
    u_char       *p;
    ngx_int_t     i;
    ngx_buf_t    *b;
    ngx_chain_t  *chain, *cl, **ll;

    p = ngx_palloc(pool, bufs->num * bufs->size);
    if (p == NULL) {
        return NULL;
    }

    ll = &chain;

    for (i = 0; i < bufs->num; i++) {

        b = ngx_calloc_buf(pool);
        if (b == NULL) {
            return NULL;
        }

        /*
         * set by ngx_calloc_buf():
         *
         *     b->file_pos = 0;
         *     b->file_last = 0;
         *     b->file = NULL;
         *     b->shadow = NULL;
         *     b->tag = 0;
         *     and flags
         *
         */

        b->pos = p;
        b->last = p;
        b->temporary = 1;

        b->start = p;
        p += bufs->size;
        b->end = p;

        cl = ngx_alloc_chain_link(pool);
        if (cl == NULL) {
            return NULL;
        }

        cl->buf = b;
        *ll = cl;
        ll = &cl->next;
    ...",68.0,123.0,1.0,1.0,56.0,35,8,42,9,0,6,5,7,1,2,,0,6,4,2,2,ngx_chain_t
4224,3834,ngx_chain_add_copy,1,ngx_chain_add_copy,"ngx_int_t ngx_chain_add_copy (ngx_pool_t*,ngx_chain_t**,ngx_chain_t*)",core\ngx_buf.c,"ngx_int_t
ngx_chain_add_copy(ngx_pool_t *pool, ngx_chain_t **chain, ngx_chain_t *in)
{
    ngx_chain_t  *cl, **ll;

    ll = chain;

    for (cl = *chain; cl; cl = cl->next) {
        ll = &cl->next;
    }

    while (in) {
        cl = ngx_alloc_chain_link(pool);
        if (cl == NULL) {
            *ll = NULL;
            return NGX_ERROR;
        }

        cl->buf = in->buf;
        *ll = cl;
        ll = &cl->next;
        in = in->next;
    }

    *ll = NULL;

    return NGX_OK;
}",126.0,153.0,1.0,1.0,28.0,22,5,26,8,4,1,4,5,0,1,,0,1,6,3,3,ngx_int_t
4225,3911,ngx_chain_get_free_buf,1,ngx_chain_get_free_buf,"ngx_chain_t ngx_chain_get_free_buf (ngx_pool_t*,ngx_chain_t**)",core\ngx_buf.c,"ngx_chain_t *
ngx_chain_get_free_buf(ngx_pool_t *p, ngx_chain_t **free)
{
    ngx_chain_t  *cl;

    if (*free) {
        cl = *free;
        *free = cl->next;
        cl->next = NULL;
        return cl;
    }

    cl = ngx_alloc_chain_link(p);
    if (cl == NULL) {
        return NULL;
    }

    cl->buf = ngx_calloc_buf(p);
    if (cl->buf == NULL) {
        return NULL;
    }

    cl->next = NULL;

    return cl;
}",156.0,181.0,1.0,1.0,26.0,16,4,21,4,8,1,4,4,0,1,,0,1,4,2,2,ngx_chain_t
4226,3972,ngx_chain_update_chains,1,ngx_chain_update_chains,"void ngx_chain_update_chains (ngx_pool_t*,ngx_chain_t**,ngx_chain_t**,ngx_chain_t**,ngx_buf_tag_t)",core\ngx_buf.c,"void
ngx_chain_update_chains(ngx_pool_t *p, ngx_chain_t **free, ngx_chain_t **busy,
    ngx_chain_t **out, ngx_buf_tag_t tag)
{
    ngx_chain_t  *cl;

    if (*out) {
        if (*busy == NULL) {
            *busy = *out;

        } else {
            for (cl = *busy; cl->next; cl = cl->next) { /* void */ }

            cl->next = *out;
        }

        *out = NULL;
    }

    while (*busy) {
        cl = *busy;

        if (ngx_buf_size(cl->buf) != 0) {
            break;
        }

        if (cl->buf->tag != tag) {
            *busy = cl->next;
            ngx_free_chain(p, cl);
            continue;
        }

        cl->buf->pos = cl->buf->start;
        cl->buf->last = cl->buf->start;

        *busy = cl->next;
        cl->next = *free;
        *free = cl;
    }
}",184.0,223.0,1.0,1.0,40.0,37,5,27,7,5,0,8,9,0,0,,0,0,10,5,5,void
4227,4098,ngx_chain_coalesce_file,1,ngx_chain_coalesce_file,"off_t ngx_chain_coalesce_file (ngx_chain_t**,off_t)",core\ngx_buf.c,"off_t
ngx_chain_coalesce_file(ngx_chain_t **in, off_t limit)
{
    off_t         total, size, aligned, fprev;
    ngx_fd_t      fd;
    ngx_chain_t  *cl;

    total = 0;

    cl = *in;
    fd = cl->buf->file->fd;

    do {
        size = cl->buf->file_last - cl->buf->file_pos;

        if (size > limit - total) {
            size = limit - total;

            aligned = (cl->buf->file_pos + size + ngx_pagesize - 1)
                       & ~((off_t) ngx_pagesize - 1);

            if (aligned <= cl->buf->file_last) {
                size = aligned - cl->buf->file_pos;
            }

            total += size;
            break;
        }

        total += size;
        fprev = cl->buf->file_pos + size;
        cl = cl->next;

    } while (cl
             && cl->buf->in_file
             && total < limit
             && fd == cl->buf->file->fd
             && fprev == cl->buf->file_pos);

    *in = cl;

    return total;
}",226.0,268.0,1.0,1.0,43.0,58,14,44,9,0,0,5,7,0,0,,0,0,4,2,2,off_t
4228,4247,ngx_chain_update_sent,1,ngx_chain_update_sent,"ngx_chain_t ngx_chain_update_sent (ngx_chain_t*,off_t)",core\ngx_buf.c,"ngx_chain_t *
ngx_chain_update_sent(ngx_chain_t *in, off_t sent)
{
    off_t  size;

    for ( /* void */ ; in; in = in->next) {

        if (ngx_buf_special(in->buf)) {
            continue;
        }

        if (sent == 0) {
            break;
        }

        size = ngx_buf_size(in->buf);

        if (sent >= size) {
            sent -= size;

            if (ngx_buf_in_memory(in->buf)) {
                in->buf->pos = in->buf->last;
            }

            if (in->buf->in_file) {
                in->buf->file_pos = in->buf->file_last;
            }

            continue;
        }

        if (ngx_buf_in_memory(in->buf)) {
            in->buf->pos += (size_t) sent;
        }

        if (in->buf->in_file) {
            in->buf->file_pos += sent;
        }

        break;
    }

    return in;
}",271.0,314.0,1.0,1.0,44.0,29,7,22,3,0,0,13,18,0,0,,0,0,4,2,2,ngx_chain_t
4229,4401,ngx_output_chain_filter_pt,1,ngx_output_chain_filter_pt,"ngx_int_t ngx_output_chain_filter_pt (void*,ngx_chain_t*)",core\ngx_buf.h,"typedef ngx_int_t (*ngx_output_chain_filter_pt)(void *ctx, ngx_chain_t *in);",73.0,73.0,19.0,75.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4230,4407,ngx_output_chain_aio_pt,1,ngx_output_chain_aio_pt,"void ngx_output_chain_aio_pt (ngx_output_chain_ctx_t*,ngx_file_t*)",core\ngx_buf.h,"typedef void (*ngx_output_chain_aio_pt)(ngx_output_chain_ctx_t *ctx,
    ngx_file_t *file);",75.0,76.0,14.0,21.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4231,4425,aio_preload,1,ngx_output_chain_ctx_s.aio_preload,ssize_t ngx_output_chain_ctx_s.aio_preload (ngx_buf_t*),core\ngx_buf.h,ssize_t                    (*aio_preload)(ngx_buf_t *file);,94.0,94.0,32.0,62.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ssize_t
4232,4430,thread_handler,1,ngx_output_chain_ctx_s.thread_handler,"ngx_int_t ngx_output_chain_ctx_s.thread_handler (ngx_thread_task_t*,ngx_file_t*)",core\ngx_buf.h,"ngx_int_t                  (*thread_handler)(ngx_thread_task_t *task,
                                                 ngx_file_t *file);",99.0,100.0,32.0,66.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4233,4468,ngx_output_chain,1,ngx_output_chain,"ngx_int_t ngx_output_chain (ngx_output_chain_ctx_t*,ngx_chain_t*)",core\ngx_output_chain.c,"ngx_int_t
ngx_output_chain(ngx_output_chain_ctx_t *ctx, ngx_chain_t *in)
{
    off_t         bsize;
    ngx_int_t     rc, last;
    ngx_chain_t  *cl, *out, **last_out;

    if (ctx->in == NULL && ctx->busy == NULL
#if (NGX_HAVE_FILE_AIO || NGX_THREADS)
        && !ctx->aio
#endif
       )
    {
        /*
         * the short path for the case when the ctx->in and ctx->busy chains
         * are empty, the incoming chain is empty too or has the single buf
         * that does not require the copy
         */

        if (in == NULL) {
            return ctx->output_filter(ctx->filter_ctx, in);
        }

        if (in->next == NULL
#if (NGX_SENDFILE_LIMIT)
            && !(in->buf->in_file && in->buf->file_last > NGX_SENDFILE_LIMIT)
#endif
            && ngx_output_chain_as_is(ctx, in->buf))
        {
            return ctx->output_filter(ctx->filter_ctx, in);
        }
    }

    /* add the incoming buf to the chain ctx->in */

    if (in) {
        if (ngx_output_chain_add_copy(c...",45.0,244.0,1.0,11.0,200.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4234,4474,ngx_chain_writer,1,ngx_chain_writer,"ngx_int_t ngx_chain_writer (void*,ngx_chain_t*)",core\ngx_output_chain.c,"ngx_int_t
ngx_chain_writer(void *data, ngx_chain_t *in)
{
    ngx_chain_writer_ctx_t *ctx = data;

    off_t              size;
    ngx_chain_t       *cl, *ln, *chain;
    ngx_connection_t  *c;

    c = ctx->connection;

    for (size = 0; in; in = in->next) {

        if (ngx_buf_size(in->buf) == 0 && !ngx_buf_special(in->buf)) {

            ngx_log_error(NGX_LOG_ALERT, ctx->pool->log, 0,
                          ""zero size buf in chain writer ""
                          ""t:%d r:%d f:%d %p %p-%p %p %O-%O"",
                          in->buf->temporary,
                          in->buf->recycled,
                          in->buf->in_file,
                          in->buf->start,
                          in->buf->pos,
                          in->buf->last,
                          in->buf->file,
                          in->buf->file_pos,
                          in->buf->file_last);

            ngx_debug_point();

            continue;
        }

        if (ngx_buf_size(...",675.0,823.0,1.0,1.0,149.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4235,4523,ngx_conf_add_dump,1,ngx_conf_add_dump,"ngx_int_t ngx_conf_add_dump (ngx_conf_t*,ngx_str_t*)",core\ngx_conf_file.c,"static ngx_int_t
ngx_conf_add_dump(ngx_conf_t *cf, ngx_str_t *filename)
{
    off_t             size;
    u_char           *p;
    uint32_t          hash;
    ngx_buf_t        *buf;
    ngx_str_node_t   *sn;
    ngx_conf_dump_t  *cd;

    hash = ngx_crc32_long(filename->data, filename->len);

    sn = ngx_str_rbtree_lookup(&cf->cycle->config_dump_rbtree, filename, hash);

    if (sn) {
        cf->conf_file->dump = NULL;
        return NGX_OK;
    }

    p = ngx_pstrdup(cf->cycle->pool, filename);
    if (p == NULL) {
        return NGX_ERROR;
    }

    cd = ngx_array_push(&cf->cycle->config_dump);
    if (cd == NULL) {
        return NGX_ERROR;
    }

    size = ngx_file_size(&cf->conf_file->file.info);

    buf = ngx_create_temp_buf(cf->cycle->pool, (size_t) size);
    if (buf == NULL) {
        return NGX_ERROR;
    }

    cd->name.data = p;
    cd->name.len = filename->len;
    cd->buffer = buf;

    cf->conf_file->dump = buf;

    sn = ngx_palloc(cf->temp_pool, sizeof(ngx_str_...",101.0,154.0,1.0,1.0,54.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4236,4529,ngx_conf_handler,1,ngx_conf_handler,"ngx_int_t ngx_conf_handler (ngx_conf_t*,ngx_int_t)",core\ngx_conf_file.c,"static ngx_int_t
ngx_conf_handler(ngx_conf_t *cf, ngx_int_t last)
{
    char           *rv;
    void           *conf, **confp;
    ngx_uint_t      i, found;
    ngx_str_t      *name;
    ngx_command_t  *cmd;

    name = cf->args->elts;

    found = 0;

    for (i = 0; cf->cycle->modules[i]; i++) {

        cmd = cf->cycle->modules[i]->commands;
        if (cmd == NULL) {
            continue;
        }

        for ( /* void */ ; cmd->name.len; cmd++) {

            if (name->len != cmd->name.len) {
                continue;
            }

            if (ngx_strcmp(name->data, cmd->name.data) != 0) {
                continue;
            }

            found = 1;

            if (cf->cycle->modules[i]->type != NGX_CONF_MODULE
                && cf->cycle->modules[i]->type != cf->module_type)
            {
                continue;
            }

            /* is the directive's location right ? */

            if (!(cmd->type & cf->cmd_type)) {
                continue;
          ...",355.0,499.0,1.0,1.0,145.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4237,4535,ngx_conf_read_token,1,ngx_conf_read_token,ngx_int_t ngx_conf_read_token (ngx_conf_t*),core\ngx_conf_file.c,"static ngx_int_t
ngx_conf_read_token(ngx_conf_t *cf)
{
    u_char      *start, ch, *src, *dst;
    off_t        file_size;
    size_t       len;
    ssize_t      n, size;
    ngx_uint_t   found, need_space, last_space, sharp_comment, variable;
    ngx_uint_t   quoted, s_quoted, d_quoted, start_line;
    ngx_str_t   *word;
    ngx_buf_t   *b, *dump;

    found = 0;
    need_space = 0;
    last_space = 1;
    sharp_comment = 0;
    variable = 0;
    quoted = 0;
    s_quoted = 0;
    d_quoted = 0;

    cf->args->nelts = 0;
    b = cf->conf_file->buffer;
    dump = cf->conf_file->dump;
    start = b->pos;
    start_line = cf->conf_file->line;

    file_size = ngx_file_size(&cf->conf_file->file.info);

    for ( ;; ) {

        if (b->pos >= b->last) {

            if (cf->conf_file->file.offset >= file_size) {

                if (cf->args->nelts > 0 || !last_space) {

                    if (cf->conf_file->file.fd == NGX_INVALID_FILE) {
                        ngx_conf_log_error(NGX_LO...",502.0,817.0,1.0,23.0,316.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4238,4540,ngx_conf_flush_files,1,ngx_conf_flush_files,void ngx_conf_flush_files (ngx_cycle_t*),core\ngx_conf_file.c,"static void
ngx_conf_flush_files(ngx_cycle_t *cycle)
{
    ngx_uint_t        i;
    ngx_list_part_t  *part;
    ngx_open_file_t  *file;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, cycle->log, 0, ""flush files"");

    part = &cycle->open_files.part;
    file = part->elts;

    for (i = 0; /* void */ ; i++) {

        if (i >= part->nelts) {
            if (part->next == NULL) {
                break;
            }
            part = part->next;
            file = part->elts;
            i = 0;
        }

        if (file[i].flush) {
            file[i].flush(&file[i], cycle->log);
        }
    }
}",961.0,988.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4239,4588,ngx_conf_param,1,ngx_conf_param,char* ngx_conf_param (ngx_conf_t*),core\ngx_conf_file.c,"char *
ngx_conf_param(ngx_conf_t *cf)
{
    char             *rv;
    ngx_str_t        *param;
    ngx_buf_t         b;
    ngx_conf_file_t   conf_file;

    param = &cf->cycle->conf_param;

    if (param->len == 0) {
        return NGX_CONF_OK;
    }

    ngx_memzero(&conf_file, sizeof(ngx_conf_file_t));

    ngx_memzero(&b, sizeof(ngx_buf_t));

    b.start = param->data;
    b.pos = param->data;
    b.last = param->data + param->len;
    b.end = b.last;
    b.temporary = 1;

    conf_file.file.fd = NGX_INVALID_FILE;
    conf_file.file.name.data = NULL;
    conf_file.line = 0;

    cf->conf_file = &conf_file;
    cf->conf_file->buffer = &b;

    rv = ngx_conf_parse(cf, NULL);

    cf->conf_file = NULL;

    return rv;
}",62.0,98.0,1.0,1.0,37.0,45,7,33,10,1,9,2,2,1,1,,0,9,2,1,1,char*
4240,4883,ngx_conf_parse,1,ngx_conf_parse,"char* ngx_conf_parse (ngx_conf_t*,ngx_str_t*)",core\ngx_conf_file.c,"char *
ngx_conf_parse(ngx_conf_t *cf, ngx_str_t *filename)
{
    char             *rv;
    ngx_fd_t          fd;
    ngx_int_t         rc;
    ngx_buf_t         buf;
    ngx_conf_file_t  *prev, conf_file;
    enum {
        parse_file = 0,
        parse_block,
        parse_param
    } type;

#if (NGX_SUPPRESS_WARN)
    fd = NGX_INVALID_FILE;
    prev = NULL;
#endif

    if (filename) {

        /* open configuration file */

        fd = ngx_open_file(filename->data, NGX_FILE_RDONLY, NGX_FILE_OPEN, 0);

        if (fd == NGX_INVALID_FILE) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, ngx_errno,
                               ngx_open_file_n "" \""%s\"" failed"",
                               filename->data);
            return NGX_CONF_ERROR;
        }

        prev = cf->conf_file;

        cf->conf_file = &conf_file;

        if (ngx_fd_info(fd, &cf->conf_file->file.info) == NGX_FILE_ERROR) {
            ngx_log_error(NGX_LOG_EMERG, cf->log, ngx_errno,
                        ...",157.0,352.0,1.0,30.0,196.0,94,8,103,26,4,13,37,50,1,10,,0,8,4,2,2,char*
4241,6520,ngx_conf_include,1,ngx_conf_include,"char* ngx_conf_include (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_include(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char        *rv;
    ngx_int_t    n;
    ngx_str_t   *value, file, name;
    ngx_glob_t   gl;

    value = cf->args->elts;
    file = value[1];

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, cf->log, 0, ""include %s"", file.data);

    if (ngx_conf_full_name(cf->cycle, &file, 1) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (strpbrk((char *) file.data, ""*?["") == NULL) {

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, cf->log, 0, ""include %s"", file.data);

        return ngx_conf_parse(cf, &file);
    }

    ngx_memzero(&gl, sizeof(ngx_glob_t));

    gl.pattern = file.data;
    gl.log = cf->log;
    gl.test = 1;

    if (ngx_open_glob(&gl) != NGX_OK) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, ngx_errno,
                           ngx_open_glob_n "" \""%s\"" failed"", file.data);
        return NGX_CONF_ERROR;
    }

    rv = NGX_CONF_OK;

    for ( ;; ) {
        n = ngx_read_glob(&gl, &name);

        if (...",820.0,883.0,1.0,1.0,64.0,49,10,53,13,0,19,10,11,4,7,,0,17,6,3,3,char*
4242,6701,ngx_conf_full_name,1,ngx_conf_full_name,"ngx_int_t ngx_conf_full_name (ngx_cycle_t*,ngx_str_t*,ngx_uint_t)",core\ngx_conf_file.c,"ngx_int_t
ngx_conf_full_name(ngx_cycle_t *cycle, ngx_str_t *name, ngx_uint_t conf_prefix)
{
    ngx_str_t  *prefix;

    prefix = conf_prefix ? &cycle->conf_prefix : &cycle->prefix;

    return ngx_get_full_name(cycle->pool, prefix, name);
}",886.0,894.0,1.0,1.0,9.0,7,4,7,4,11,1,1,1,0,1,,0,0,6,3,3,ngx_int_t
4243,6728,ngx_conf_open_file,1,ngx_conf_open_file,"ngx_open_file_t ngx_conf_open_file (ngx_cycle_t*,ngx_str_t*)",core\ngx_conf_file.c,"ngx_open_file_t *
ngx_conf_open_file(ngx_cycle_t *cycle, ngx_str_t *name)
{
    ngx_str_t         full;
    ngx_uint_t        i;
    ngx_list_part_t  *part;
    ngx_open_file_t  *file;

#if (NGX_SUPPRESS_WARN)
    ngx_str_null(&full);
#endif

    if (name->len) {
        full = *name;

        if (ngx_conf_full_name(cycle, &full, 0) != NGX_OK) {
            return NULL;
        }

        part = &cycle->open_files.part;
        file = part->elts;

        for (i = 0; /* void */ ; i++) {

            if (i >= part->nelts) {
                if (part->next == NULL) {
                    break;
                }
                part = part->next;
                file = part->elts;
                i = 0;
            }

            if (full.len != file[i].name.len) {
                continue;
            }

            if (ngx_strcmp(full.data, file[i].name.data) == 0) {
                return &file[i];
            }
        }
    }

    file = ngx_list_push(&cycle->open_files);
    if (f...",897.0,958.0,1.0,1.0,62.0,47,10,45,9,2,6,12,21,5,2,,0,6,4,2,2,ngx_open_file_t
4244,6981,ngx_conf_log_error,1,ngx_conf_log_error,"ANY ngx_conf_log_error (ngx_uint_t,ngx_conf_t*,ngx_err_t,char*...)",core\ngx_conf_file.c,"ngx_conf_log_error(ngx_uint_t level, ngx_conf_t *cf, ngx_err_t err,
    const char *fmt, ...)
{
    u_char   errstr[NGX_MAX_CONF_ERRSTR], *p, *last;
    va_list  args;

    last = errstr + NGX_MAX_CONF_ERRSTR;

    va_start(args, fmt);
    p = ngx_vslprintf(errstr, last, fmt, args);
    va_end(args);

    if (err) {
        p = ngx_log_errno(p, last, err);
    }

    if (cf->conf_file == NULL) {
        ngx_log_error(level, cf->log, 0, ""%*s"", p - errstr, errstr);
        return;
    }

    if (cf->conf_file->file.fd == NGX_INVALID_FILE) {
        ngx_log_error(level, cf->log, 0, ""%*s in command line"",
                      p - errstr, errstr);
        return;
    }

    ngx_log_error(level, cf->log, 0, ""%*s in %s:%ui"",
                  p - errstr, errstr,
                  cf->conf_file->file.name.data, cf->conf_file->line);
}",992.0,1022.0,1.0,1.0,31.0,22,6,37,11,49,5,4,4,0,5,,0,2,8,4,4,ANY
4245,7086,ngx_conf_set_flag_slot,1,ngx_conf_set_flag_slot,"char* ngx_conf_set_flag_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_flag_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_str_t        *value;
    ngx_flag_t       *fp;
    ngx_conf_post_t  *post;

    fp = (ngx_flag_t *) (p + cmd->offset);

    if (*fp != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcasecmp(value[1].data, (u_char *) ""on"") == 0) {
        *fp = 1;

    } else if (ngx_strcasecmp(value[1].data, (u_char *) ""off"") == 0) {
        *fp = 0;

    } else {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                     ""invalid value \""%s\"" in \""%s\"" directive, ""
                     ""it must be \""on\"" or \""off\"""",
                     value[1].data, cmd->name.data);
        return NGX_CONF_ERROR;
    }

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, fp);
    }

    return NGX_CONF_OK;
}",1025.0,1062.0,1.0,1.0,38.0,20,9,19,9,0,2,4,4,1,1,,0,2,6,3,3,char*
4246,7199,ngx_conf_set_str_slot,1,ngx_conf_set_str_slot,"char* ngx_conf_set_str_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_str_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_str_t        *field, *value;
    ngx_conf_post_t  *post;

    field = (ngx_str_t *) (p + cmd->offset);

    if (field->data) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    *field = value[1];

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, field);
    }

    return NGX_CONF_OK;
}",1065.0,1089.0,1.0,1.0,25.0,16,6,18,8,0,2,3,3,1,0,,0,2,6,3,3,char*
4247,7262,ngx_conf_set_str_array_slot,1,ngx_conf_set_str_array_slot,"char* ngx_conf_set_str_array_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_str_array_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_str_t         *value, *s;
    ngx_array_t      **a;
    ngx_conf_post_t   *post;

    a = (ngx_array_t **) (p + cmd->offset);

    if (*a == NGX_CONF_UNSET_PTR) {
        *a = ngx_array_create(cf->pool, 4, sizeof(ngx_str_t));
        if (*a == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    s = ngx_array_push(*a);
    if (s == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    *s = value[1];

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, s);
    }

    return NGX_CONF_OK;
}",1092.0,1125.0,1.0,1.0,34.0,26,8,30,13,0,3,5,6,0,2,,0,3,6,3,3,char*
4248,7355,ngx_conf_set_keyval_slot,1,ngx_conf_set_keyval_slot,"char* ngx_conf_set_keyval_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_keyval_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_str_t         *value;
    ngx_array_t      **a;
    ngx_keyval_t      *kv;
    ngx_conf_post_t   *post;

    a = (ngx_array_t **) (p + cmd->offset);

    if (*a == NGX_CONF_UNSET_PTR || *a == NULL) {
        *a = ngx_array_create(cf->pool, 4, sizeof(ngx_keyval_t));
        if (*a == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    kv = ngx_array_push(*a);
    if (kv == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    kv->key = value[1];
    kv->value = value[2];

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, kv);
    }

    return NGX_CONF_OK;
}",1128.0,1163.0,1.0,1.0,36.0,32,9,34,13,0,5,5,6,0,2,,0,5,6,3,3,char*
4249,7461,ngx_conf_set_num_slot,1,ngx_conf_set_num_slot,"char* ngx_conf_set_num_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_num_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_int_t        *np;
    ngx_str_t        *value;
    ngx_conf_post_t  *post;


    np = (ngx_int_t *) (p + cmd->offset);

    if (*np != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;
    *np = ngx_atoi(value[1].data, value[1].len);
    if (*np == NGX_ERROR) {
        return ""invalid number"";
    }

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, np);
    }

    return NGX_CONF_OK;
}",1166.0,1194.0,1.0,1.0,29.0,22,9,22,10,0,2,4,4,0,1,,0,2,6,3,3,char*
4250,7541,ngx_conf_set_size_slot,1,ngx_conf_set_size_slot,"char* ngx_conf_set_size_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_size_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    size_t           *sp;
    ngx_str_t        *value;
    ngx_conf_post_t  *post;


    sp = (size_t *) (p + cmd->offset);
    if (*sp != NGX_CONF_UNSET_SIZE) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    *sp = ngx_parse_size(&value[1]);
    if (*sp == (size_t) NGX_ERROR) {
        return ""invalid value"";
    }

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, sp);
    }

    return NGX_CONF_OK;
}",1197.0,1225.0,1.0,1.0,29.0,21,9,21,10,0,2,4,4,0,1,,0,2,6,3,3,char*
4251,7617,ngx_conf_set_off_slot,1,ngx_conf_set_off_slot,"char* ngx_conf_set_off_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_off_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    off_t            *op;
    ngx_str_t        *value;
    ngx_conf_post_t  *post;


    op = (off_t *) (p + cmd->offset);
    if (*op != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    *op = ngx_parse_offset(&value[1]);
    if (*op == (off_t) NGX_ERROR) {
        return ""invalid value"";
    }

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, op);
    }

    return NGX_CONF_OK;
}",1228.0,1256.0,1.0,1.0,29.0,21,9,21,10,0,2,4,4,0,1,,0,2,6,3,3,char*
4252,7693,ngx_conf_set_msec_slot,1,ngx_conf_set_msec_slot,"char* ngx_conf_set_msec_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_msec_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_msec_t       *msp;
    ngx_str_t        *value;
    ngx_conf_post_t  *post;


    msp = (ngx_msec_t *) (p + cmd->offset);
    if (*msp != NGX_CONF_UNSET_MSEC) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    *msp = ngx_parse_time(&value[1], 0);
    if (*msp == (ngx_msec_t) NGX_ERROR) {
        return ""invalid value"";
    }

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, msp);
    }

    return NGX_CONF_OK;
}",1259.0,1287.0,1.0,1.0,29.0,21,9,21,10,0,2,4,4,0,1,,0,2,6,3,3,char*
4253,7770,ngx_conf_set_sec_slot,1,ngx_conf_set_sec_slot,"char* ngx_conf_set_sec_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_sec_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    time_t           *sp;
    ngx_str_t        *value;
    ngx_conf_post_t  *post;


    sp = (time_t *) (p + cmd->offset);
    if (*sp != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    *sp = ngx_parse_time(&value[1], 1);
    if (*sp == (time_t) NGX_ERROR) {
        return ""invalid value"";
    }

    if (cmd->post) {
        post = cmd->post;
        return post->post_handler(cf, post, sp);
    }

    return NGX_CONF_OK;
}",1290.0,1318.0,1.0,1.0,29.0,21,9,21,10,0,2,4,4,0,1,,0,2,6,3,3,char*
4254,7847,ngx_conf_set_bufs_slot,1,ngx_conf_set_bufs_slot,"char* ngx_conf_set_bufs_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_bufs_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char *p = conf;

    ngx_str_t   *value;
    ngx_bufs_t  *bufs;


    bufs = (ngx_bufs_t *) (p + cmd->offset);
    if (bufs->num) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    bufs->num = ngx_atoi(value[1].data, value[1].len);
    if (bufs->num == NGX_ERROR || bufs->num == 0) {
        return ""invalid value"";
    }

    bufs->size = ngx_parse_size(&value[2]);
    if (bufs->size == (size_t) NGX_ERROR || bufs->size == 0) {
        return ""invalid value"";
    }

    return NGX_CONF_OK;
}",1321.0,1348.0,1.0,1.0,28.0,30,9,20,8,0,9,4,4,5,2,,0,9,6,3,3,char*
4255,7941,ngx_conf_set_enum_slot,1,ngx_conf_set_enum_slot,"char* ngx_conf_set_enum_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_enum_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_uint_t       *np, i;
    ngx_str_t        *value;
    ngx_conf_enum_t  *e;

    np = (ngx_uint_t *) (p + cmd->offset);

    if (*np != NGX_CONF_UNSET_UINT) {
        return ""is duplicate"";
    }

    value = cf->args->elts;
    e = cmd->post;

    for (i = 0; e[i].name.len != 0; i++) {
        if (e[i].name.len != value[1].len
            || ngx_strcasecmp(e[i].name.data, value[1].data) != 0)
        {
            continue;
        }

        *np = e[i].value;

        return NGX_CONF_OK;
    }

    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                       ""invalid value \""%s\"""", value[1].data);

    return NGX_CONF_ERROR;
}",1351.0,1385.0,1.0,1.0,35.0,36,9,28,12,0,2,5,5,1,2,,0,1,6,3,3,char*
4256,8056,ngx_conf_set_bitmask_slot,1,ngx_conf_set_bitmask_slot,"char* ngx_conf_set_bitmask_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_set_bitmask_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_uint_t          *np, i, m;
    ngx_str_t           *value;
    ngx_conf_bitmask_t  *mask;


    np = (ngx_uint_t *) (p + cmd->offset);
    value = cf->args->elts;
    mask = cmd->post;

    for (i = 1; i < cf->args->nelts; i++) {
        for (m = 0; mask[m].name.len != 0; m++) {

            if (mask[m].name.len != value[i].len
                || ngx_strcasecmp(mask[m].name.data, value[i].data) != 0)
            {
                continue;
            }

            if (*np & mask[m].mask) {
                ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                                   ""duplicate value \""%s\"""", value[i].data);

            } else {
                *np |= mask[m].mask;
            }

            break;
        }

        if (mask[m].name.len == 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid value \""%s\"""", value...",1388.0,1431.0,1.0,1.0,44.0,44,12,38,13,0,3,8,12,1,3,,0,1,6,3,3,char*
4257,8213,ngx_conf_deprecated,1,ngx_conf_deprecated,"char* ngx_conf_deprecated (ngx_conf_t*,void*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_deprecated(ngx_conf_t *cf, void *post, void *data)
{
    ngx_conf_deprecated_t  *d = post;

    ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                       ""the \""%s\"" directive is deprecated, ""
                       ""use the \""%s\"" directive instead"",
                       d->old_name, d->new_name);

    return NGX_CONF_OK;
}",1445.0,1456.0,1.0,1.0,12.0,3,2,7,5,0,3,1,1,0,1,,0,2,6,3,3,char*
4258,8237,ngx_conf_check_num_bounds,1,ngx_conf_check_num_bounds,"char* ngx_conf_check_num_bounds (ngx_conf_t*,void*,void*)",core\ngx_conf_file.c,"char *
ngx_conf_check_num_bounds(ngx_conf_t *cf, void *post, void *data)
{
    ngx_conf_num_bounds_t  *bounds = post;
    ngx_int_t  *np = data;

    if (bounds->high == -1) {
        if (*np >= bounds->low) {
            return NGX_CONF_OK;
        }

        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""value must be equal to or greater than %i"",
                           bounds->low);

        return NGX_CONF_ERROR;
    }

    if (*np >= bounds->low && *np <= bounds->high) {
        return NGX_CONF_OK;
    }

    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                       ""value must be between %i and %i"",
                       bounds->low, bounds->high);

    return NGX_CONF_ERROR;
}",1459.0,1486.0,1.0,1.0,28.0,18,8,22,8,0,9,4,5,4,2,,0,7,6,3,3,char*
4259,8322,set,1,ngx_command_s.set,"char* ngx_command_s.set (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.h,"char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);",80.0,80.0,24.0,78.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4260,8335,flush,1,ngx_open_file_s.flush,"void ngx_open_file_s.flush (ngx_open_file_t*,ngx_log_t*)",core\ngx_conf_file.h,"void                (*flush)(ngx_open_file_t *file, ngx_log_t *log);",93.0,93.0,25.0,71.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4261,8352,ngx_conf_handler_pt,1,ngx_conf_handler_pt,"char* ngx_conf_handler_pt (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_conf_file.h,"typedef char *(*ngx_conf_handler_pt)(ngx_conf_t *cf,
    ngx_command_t *dummy, void *conf);",112.0,113.0,14.0,37.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4262,8372,ngx_conf_post_handler_pt,1,ngx_conf_post_handler_pt,"char* ngx_conf_post_handler_pt (ngx_conf_t*,void*,void*)",core\ngx_conf_file.h,"typedef char *(*ngx_conf_post_handler_pt) (ngx_conf_t *cf,
    void *data, void *conf);",135.0,136.0,14.0,27.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4263,8564,ngx_drain_connections,1,ngx_drain_connections,void ngx_drain_connections (ngx_cycle_t*),core\ngx_connection.c,"static void
ngx_drain_connections(ngx_cycle_t *cycle)
{
    ngx_uint_t         i, n;
    ngx_queue_t       *q;
    ngx_connection_t  *c;

    if (cycle->free_connection_n > cycle->connection_n / 16
        || cycle->reusable_connections_n == 0)
    {
        return;
    }

    if (cycle->connections_reuse_time != ngx_time()) {
        cycle->connections_reuse_time = ngx_time();

        ngx_log_error(NGX_LOG_WARN, cycle->log, 0,
                      ""%ui worker_connections are not enough, ""
                      ""reusing connections"",
                      cycle->connection_n);
    }

    c = NULL;
    n = ngx_max(ngx_min(32, cycle->reusable_connections_n / 8), 1);

    for (i = 0; i < n; i++) {
        if (ngx_queue_empty(&cycle->reusable_connections_queue)) {
            break;
        }

        q = ngx_queue_last(&cycle->reusable_connections_queue);
        c = ngx_queue_data(q, ngx_connection_t, queue);

        ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,
                   ...",1294.0,1348.0,1.0,1.0,55.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
4264,8569,ngx_create_listening,1,ngx_create_listening,"ngx_listening_t ngx_create_listening (ngx_conf_t*,sockaddr*,socklen_t)",core\ngx_connection.c,"ngx_listening_t *
ngx_create_listening(ngx_conf_t *cf, struct sockaddr *sockaddr,
    socklen_t socklen)
{
    size_t            len;
    ngx_listening_t  *ls;
    struct sockaddr  *sa;
    u_char            text[NGX_SOCKADDR_STRLEN];

    ls = ngx_array_push(&cf->cycle->listening);
    if (ls == NULL) {
        return NULL;
    }

    ngx_memzero(ls, sizeof(ngx_listening_t));

    sa = ngx_palloc(cf->pool, socklen);
    if (sa == NULL) {
        return NULL;
    }

    ngx_memcpy(sa, sockaddr, socklen);

    ls->sockaddr = sa;
    ls->socklen = socklen;

    len = ngx_sock_ntop(sa, socklen, text, NGX_SOCKADDR_STRLEN, 1);
    ls->addr_text.len = len;

    switch (ls->sockaddr->sa_family) {
#if (NGX_HAVE_INET6)
    case AF_INET6:
        ls->addr_text_max_len = NGX_INET6_ADDRSTRLEN;
        break;
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
    case AF_UNIX:
        ls->addr_text_max_len = NGX_UNIX_ADDRSTRLEN;
        len++;
        break;
#endif
    case AF_INET:
        ls->addr_text_max_len...",19.0,95.0,1.0,1.0,77.0,49,8,54,16,0,4,7,5,0,4,,0,4,6,3,3,ngx_listening_t
4265,8736,ngx_clone_listening,1,ngx_clone_listening,"ngx_int_t ngx_clone_listening (ngx_cycle_t*,ngx_listening_t*)",core\ngx_connection.c,"ngx_int_t
ngx_clone_listening(ngx_cycle_t *cycle, ngx_listening_t *ls)
{
#if (NGX_HAVE_REUSEPORT)

    ngx_int_t         n;
    ngx_core_conf_t  *ccf;
    ngx_listening_t   ols;

    if (!ls->reuseport || ls->worker != 0) {
        return NGX_OK;
    }

    ols = *ls;

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    for (n = 1; n < ccf->worker_processes; n++) {

        /* create a socket for each worker process */

        ls = ngx_array_push(&cycle->listening);
        if (ls == NULL) {
            return NGX_ERROR;
        }

        *ls = ols;
        ls->worker = n;
    }

#endif

    return NGX_OK;
}",98.0,131.0,1.0,1.0,34.0,0,0,1,1,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4266,8744,ngx_set_inherited_sockets,1,ngx_set_inherited_sockets,ngx_int_t ngx_set_inherited_sockets (ngx_cycle_t*),core\ngx_connection.c,"ngx_int_t
ngx_set_inherited_sockets(ngx_cycle_t *cycle)
{
    size_t                     len;
    ngx_uint_t                 i;
    ngx_listening_t           *ls;
    socklen_t                  olen;
#if (NGX_HAVE_DEFERRED_ACCEPT || NGX_HAVE_TCP_FASTOPEN)
    ngx_err_t                  err;
#endif
#if (NGX_HAVE_DEFERRED_ACCEPT && defined SO_ACCEPTFILTER)
    struct accept_filter_arg   af;
#endif
#if (NGX_HAVE_DEFERRED_ACCEPT && defined TCP_DEFER_ACCEPT)
    int                        timeout;
#endif
#if (NGX_HAVE_REUSEPORT)
    int                        reuseport;
#endif

    ls = cycle->listening.elts;
    for (i = 0; i < cycle->listening.nelts; i++) {

        ls[i].sockaddr = ngx_palloc(cycle->pool, sizeof(ngx_sockaddr_t));
        if (ls[i].sockaddr == NULL) {
            return NGX_ERROR;
        }

        ls[i].socklen = sizeof(ngx_sockaddr_t);
        if (getsockname(ls[i].fd, ls[i].sockaddr, &ls[i].socklen) == -1) {
            ngx_log_error(NGX_LOG_CRIT, cycle->log, ngx_s...",134.0,403.0,1.0,1.0,270.0,143,14,126,21,0,8,17,22,0,8,,0,3,2,1,1,ngx_int_t
4267,9143,ngx_open_listening_sockets,1,ngx_open_listening_sockets,ngx_int_t ngx_open_listening_sockets (ngx_cycle_t*),core\ngx_connection.c,"ngx_int_t
ngx_open_listening_sockets(ngx_cycle_t *cycle)
{
    int               reuseaddr;
    ngx_uint_t        i, tries, failed;
    ngx_err_t         err;
    ngx_log_t        *log;
    ngx_socket_t      s;
    ngx_listening_t  *ls;

    reuseaddr = 1;
#if (NGX_SUPPRESS_WARN)
    failed = 0;
#endif

    log = cycle->log;

    /* TODO: configurable try number */

    for (tries = 5; tries; tries--) {
        failed = 0;

        /* for each listening socket */

        ls = cycle->listening.elts;
        for (i = 0; i < cycle->listening.nelts; i++) {

            if (ls[i].ignore) {
                continue;
            }

#if (NGX_HAVE_REUSEPORT)

            if (ls[i].add_reuseport) {

                /*
                 * to allow transition from a socket without SO_REUSEPORT
                 * to multiple sockets with SO_REUSEPORT, we have to set
                 * SO_REUSEPORT on the old socket before opening new ones
                 */

                int  reuseport = 1;
...",406.0,712.0,1.0,1.0,307.0,101,15,113,25,1,6,33,84,1,6,,0,1,2,1,1,ngx_int_t
4268,9515,ngx_configure_listening_sockets,1,ngx_configure_listening_sockets,void ngx_configure_listening_sockets (ngx_cycle_t*),core\ngx_connection.c,"void
ngx_configure_listening_sockets(ngx_cycle_t *cycle)
{
    int                        value;
    ngx_uint_t                 i;
    ngx_listening_t           *ls;

#if (NGX_HAVE_DEFERRED_ACCEPT && defined SO_ACCEPTFILTER)
    struct accept_filter_arg   af;
#endif

    ls = cycle->listening.elts;
    for (i = 0; i < cycle->listening.nelts; i++) {

        ls[i].log = *ls[i].logp;

        if (ls[i].rcvbuf != -1) {
            if (setsockopt(ls[i].fd, SOL_SOCKET, SO_RCVBUF,
                           (const void *) &ls[i].rcvbuf, sizeof(int))
                == -1)
            {
                ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_socket_errno,
                              ""setsockopt(SO_RCVBUF, %d) %V failed, ignored"",
                              ls[i].rcvbuf, &ls[i].addr_text);
            }
        }

        if (ls[i].sndbuf != -1) {
            if (setsockopt(ls[i].fd, SOL_SOCKET, SO_SNDBUF,
                           (const void *) &ls[i].sndbuf, sizeof(int))
     ...",715.0,1020.0,1.0,1.0,306.0,83,13,71,11,1,4,10,22,0,4,,0,0,2,1,1,void
4269,9753,ngx_close_listening_sockets,1,ngx_close_listening_sockets,void ngx_close_listening_sockets (ngx_cycle_t*),core\ngx_connection.c,"void
ngx_close_listening_sockets(ngx_cycle_t *cycle)
{
    ngx_uint_t         i;
    ngx_listening_t   *ls;
    ngx_connection_t  *c;

    if (ngx_event_flags & NGX_USE_IOCP_EVENT) {
        return;
    }

    ngx_accept_mutex_held = 0;
    ngx_use_accept_mutex = 0;

    ls = cycle->listening.elts;
    for (i = 0; i < cycle->listening.nelts; i++) {

        c = ls[i].connection;

        if (c) {
            if (c->read->active) {
                if (ngx_event_flags & NGX_USE_EPOLL_EVENT) {

                    /*
                     * it seems that Linux-2.6.x OpenVZ sends events
                     * for closed shared listening sockets unless
                     * the events was explicitly deleted
                     */

                    ngx_del_event(c->read, NGX_READ_EVENT, 0);

                } else {
                    ngx_del_event(c->read, NGX_READ_EVENT, NGX_CLOSE_EVENT);
                }
            }

            ngx_free_connection(c);

            c->fd = (ngx...",1023.0,1093.0,1.0,1.0,71.0,37,10,33,12,1,1,7,14,0,1,,0,0,2,1,1,void
4270,9886,ngx_get_connection,1,ngx_get_connection,"ngx_connection_t ngx_get_connection (ngx_socket_t,ngx_log_t*)",core\ngx_connection.c,"ngx_connection_t *
ngx_get_connection(ngx_socket_t s, ngx_log_t *log)
{
    ngx_uint_t         instance;
    ngx_event_t       *rev, *wev;
    ngx_connection_t  *c;

    /* disable warning: Win32 SOCKET is u_int while UNIX socket is int */

    if (ngx_cycle->files && (ngx_uint_t) s >= ngx_cycle->files_n) {
        ngx_log_error(NGX_LOG_ALERT, log, 0,
                      ""the new socket has number %d, ""
                      ""but only %ui files are available"",
                      s, ngx_cycle->files_n);
        return NULL;
    }

    ngx_drain_connections((ngx_cycle_t *) ngx_cycle);

    c = ngx_cycle->free_connections;

    if (c == NULL) {
        ngx_log_error(NGX_LOG_ALERT, log, 0,
                      ""%ui worker_connections are not enough"",
                      ngx_cycle->connection_n);

        return NULL;
    }

    ngx_cycle->free_connections = c->data;
    ngx_cycle->free_connection_n--;

    if (ngx_cycle->files && ngx_cycle->files[s] == NULL) {
        ngx_cycle-...",1096.0,1159.0,1.0,1.0,64.0,57,10,61,12,3,3,4,4,0,3,,0,0,4,2,2,ngx_connection_t
4271,10061,ngx_free_connection,1,ngx_free_connection,void ngx_free_connection (ngx_connection_t*),core\ngx_connection.c,"void
ngx_free_connection(ngx_connection_t *c)
{
    c->data = ngx_cycle->free_connections;
    ngx_cycle->free_connections = c;
    ngx_cycle->free_connection_n++;

    if (ngx_cycle->files && ngx_cycle->files[c->fd] == c) {
        ngx_cycle->files[c->fd] = NULL;
    }
}",1162.0,1172.0,1.0,1.0,11.0,17,6,12,3,3,0,2,2,0,0,,0,0,2,1,1,void
4272,10106,ngx_close_connection,1,ngx_close_connection,void ngx_close_connection (ngx_connection_t*),core\ngx_connection.c,"void
ngx_close_connection(ngx_connection_t *c)
{
    ngx_err_t     err;
    ngx_uint_t    log_error, level;
    ngx_socket_t  fd;

    if (c->fd == (ngx_socket_t) -1) {
        ngx_log_error(NGX_LOG_ALERT, c->log, 0, ""connection already closed"");
        return;
    }

    if (c->read->timer_set) {
        ngx_del_timer(c->read);
    }

    if (c->write->timer_set) {
        ngx_del_timer(c->write);
    }

    if (!c->shared) {
        if (ngx_del_conn) {
            ngx_del_conn(c, NGX_CLOSE_EVENT);

        } else {
            if (c->read->active || c->read->disabled) {
                ngx_del_event(c->read, NGX_READ_EVENT, NGX_CLOSE_EVENT);
            }

            if (c->write->active || c->write->disabled) {
                ngx_del_event(c->write, NGX_WRITE_EVENT, NGX_CLOSE_EVENT);
            }
        }
    }

    if (c->read->posted) {
        ngx_delete_posted_event(c->read);
    }

    if (c->write->posted) {
        ngx_delete_posted_event(c->write);
    }

    c->read...",1175.0,1260.0,1.0,1.0,86.0,41,7,43,17,2,3,14,16,0,3,,0,0,2,1,1,void
4273,10314,ngx_reusable_connection,1,ngx_reusable_connection,"void ngx_reusable_connection (ngx_connection_t*,ngx_uint_t)",core\ngx_connection.c,"void
ngx_reusable_connection(ngx_connection_t *c, ngx_uint_t reusable)
{
    ngx_log_debug1(NGX_LOG_DEBUG_CORE, c->log, 0,
                   ""reusable connection: %ui"", reusable);

    if (c->reusable) {
        ngx_queue_remove(&c->queue);
        ngx_cycle->reusable_connections_n--;

#if (NGX_STAT_STUB)
        (void) ngx_atomic_fetch_add(ngx_stat_waiting, -1);
#endif
    }

    c->reusable = reusable;

    if (reusable) {
        /* need cast as ngx_cycle is volatile */

        ngx_queue_insert_head(
            (ngx_queue_t *) &ngx_cycle->reusable_connections_queue, &c->queue);
        ngx_cycle->reusable_connections_n++;

#if (NGX_STAT_STUB)
        (void) ngx_atomic_fetch_add(ngx_stat_waiting, 1);
#endif
    }
}",1263.0,1291.0,1.0,1.0,29.0,15,6,12,4,2,0,3,3,0,0,,0,0,4,2,2,void
4274,10515,ngx_close_idle_connections,1,ngx_close_idle_connections,void ngx_close_idle_connections (ngx_cycle_t*),core\ngx_connection.c,"void
ngx_close_idle_connections(ngx_cycle_t *cycle)
{
    ngx_uint_t         i;
    ngx_connection_t  *c;

    c = cycle->connections;

    for (i = 0; i < cycle->connection_n; i++) {

        /* THREAD: lock */

        if (c[i].fd != (ngx_socket_t) -1 && c[i].idle) {
            c[i].close = 1;
            c[i].read->handler(c[i].read);
        }
    }
}",1351.0,1368.0,1.0,1.0,18.0,20,8,16,4,0,0,3,4,0,0,,0,0,2,1,1,void
4275,10577,ngx_connection_local_sockaddr,1,ngx_connection_local_sockaddr,"ngx_int_t ngx_connection_local_sockaddr (ngx_connection_t*,ngx_str_t*,ngx_uint_t)",core\ngx_connection.c,"ngx_int_t
ngx_connection_local_sockaddr(ngx_connection_t *c, ngx_str_t *s,
    ngx_uint_t port)
{
    socklen_t             len;
    ngx_uint_t            addr;
    ngx_sockaddr_t        sa;
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    ngx_uint_t            i;
    struct sockaddr_in6  *sin6;
#endif

    addr = 0;

    if (c->local_socklen) {
        switch (c->local_sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
        case AF_INET6:
            sin6 = (struct sockaddr_in6 *) c->local_sockaddr;

            for (i = 0; addr == 0 && i < 16; i++) {
                addr |= sin6->sin6_addr.s6_addr[i];
            }

            break;
#endif

#if (NGX_HAVE_UNIX_DOMAIN)
        case AF_UNIX:
            addr = 1;
            break;
#endif

        default: /* AF_INET */
            sin = (struct sockaddr_in *) c->local_sockaddr;
            addr = sin->sin_addr.s_addr;
            break;
        }
    }

    if (addr == 0) {

        len = sizeof(ngx_sockaddr_t);

        if (g...",1371.0,1440.0,1.0,1.0,70.0,35,8,37,12,1,6,8,10,0,3,,0,5,6,3,3,ngx_int_t
4276,10706,ngx_tcp_nodelay,1,ngx_tcp_nodelay,ngx_int_t ngx_tcp_nodelay (ngx_connection_t*),core\ngx_connection.c,"ngx_int_t
ngx_tcp_nodelay(ngx_connection_t *c)
{
    int  tcp_nodelay;

    if (c->tcp_nodelay != NGX_TCP_NODELAY_UNSET) {
        return NGX_OK;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0, ""tcp_nodelay"");

    tcp_nodelay = 1;

    if (setsockopt(c->fd, IPPROTO_TCP, TCP_NODELAY,
                   (const void *) &tcp_nodelay, sizeof(int))
        == -1)
    {
#if (NGX_SOLARIS)
        if (c->log_error == NGX_ERROR_INFO) {

            /* Solaris returns EINVAL if a socket has been shut down */
            c->log_error = NGX_ERROR_IGNORE_EINVAL;

            ngx_connection_error(c, ngx_socket_errno,
                                 ""setsockopt(TCP_NODELAY) failed"");

            c->log_error = NGX_ERROR_INFO;

            return NGX_ERROR;
        }
#endif

        ngx_connection_error(c, ngx_socket_errno,
                             ""setsockopt(TCP_NODELAY) failed"");
        return NGX_ERROR;
    }

    c->tcp_nodelay = NGX_TCP_NODELAY_SET;

    return NGX_OK;
}",1443.0,1483.0,1.0,1.0,41.0,12,8,17,11,1,1,3,3,0,1,,0,0,2,1,1,ngx_int_t
4277,10761,ngx_connection_error,1,ngx_connection_error,"ngx_int_t ngx_connection_error (ngx_connection_t*,ngx_err_t,char*)",core\ngx_connection.c,"ngx_int_t
ngx_connection_error(ngx_connection_t *c, ngx_err_t err, char *text)
{
    ngx_uint_t  level;

    /* Winsock may return NGX_ECONNABORTED instead of NGX_ECONNRESET */

    if ((err == NGX_ECONNRESET
#if (NGX_WIN32)
         || err == NGX_ECONNABORTED
#endif
        ) && c->log_error == NGX_ERROR_IGNORE_ECONNRESET)
    {
        return 0;
    }

#if (NGX_SOLARIS)
    if (err == NGX_EINVAL && c->log_error == NGX_ERROR_IGNORE_EINVAL) {
        return 0;
    }
#endif

    if (err == 0
        || err == NGX_ECONNRESET
#if (NGX_WIN32)
        || err == NGX_ECONNABORTED
#else
        || err == NGX_EPIPE
#endif
        || err == NGX_ENOTCONN
        || err == NGX_ETIMEDOUT
        || err == NGX_ECONNREFUSED
        || err == NGX_ENETDOWN
        || err == NGX_ENETUNREACH
        || err == NGX_EHOSTDOWN
        || err == NGX_EHOSTUNREACH)
    {
        switch (c->log_error) {

        case NGX_ERROR_IGNORE_EINVAL:
        case NGX_ERROR_IGNORE_ECONNRESET:
        case NGX_ERROR_INF...",1486.0,1542.0,1.0,1.0,57.0,27,5,36,19,5,1,5,5,0,1,,0,0,6,3,3,ngx_int_t
4278,11204,ngx_event_handler_pt,1,ngx_event_handler_pt,void ngx_event_handler_pt (ngx_event_t*),core\ngx_core.h,typedef void (*ngx_event_handler_pt)(ngx_event_t *ev);,33.0,33.0,14.0,53.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4279,11209,ngx_connection_handler_pt,1,ngx_connection_handler_pt,void ngx_connection_handler_pt (ngx_connection_t*),core\ngx_core.h,typedef void (*ngx_connection_handler_pt)(ngx_connection_t *c);,34.0,34.0,14.0,62.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4280,11214,ngx_cpuinfo,1,ngx_cpuinfo,void ngx_cpuinfo (void),core\ngx_cpuinfo.c,"void
ngx_cpuinfo(void)
{
}",133.0,136.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4281,11244,ngx_crc,1,ngx_crc,"ANY ngx_crc (u_char*,size_t)",core\ngx_crc.h,"ngx_crc(u_char *data, size_t len)
{
    uint32_t  sum;

    for (sum = 0; len; len--) {

        /*
         * gcc 2.95.2 x86 and icc 7.1.006 compile
         * that operator into the single ""rol"" opcode,
         * msvc 6.0sp2 compiles it into four opcodes.
         */
        sum = sum >> 1 | sum << 31;

        sum += *data++;
    }

    return sum;
}",19.0,36.0,1.0,1.0,18.0,8,7,8,3,0,0,2,2,0,0,,0,0,4,2,2,ANY
4282,11569,ngx_crc32_table_init,1,ngx_crc32_table_init,ngx_int_t ngx_crc32_table_init (void),core\ngx_crc32.c,"ngx_int_t
ngx_crc32_table_init(void)
{
    void  *p;

    if (((uintptr_t) ngx_crc32_table_short
          & ~((uintptr_t) ngx_cacheline_size - 1))
        == (uintptr_t) ngx_crc32_table_short)
    {
        return NGX_OK;
    }

    p = ngx_alloc(16 * sizeof(uint32_t) + ngx_cacheline_size, ngx_cycle->log);
    if (p == NULL) {
        return NGX_ERROR;
    }

    p = ngx_align_ptr(p, ngx_cacheline_size);

    ngx_memcpy(p, ngx_crc32_table16, 16 * sizeof(uint32_t));

    ngx_crc32_table_short = p;

    return NGX_OK;
}",105.0,129.0,1.0,1.0,25.0,17,10,20,9,1,5,3,3,2,1,,0,5,2,1,1,ngx_int_t
4283,11643,ngx_crc32_short,1,ngx_crc32_short,"ANY ngx_crc32_short (u_char*,size_t)",core\ngx_crc32.h,"ngx_crc32_short(u_char *p, size_t len)
{
    u_char    c;
    uint32_t  crc;

    crc = 0xffffffff;

    while (len--) {
        c = *p++;
        crc = ngx_crc32_table_short[(crc ^ (c & 0xf)) & 0xf] ^ (crc >> 4);
        crc = ngx_crc32_table_short[(crc ^ (c >> 4)) & 0xf] ^ (crc >> 4);
    }

    return crc ^ 0xffffffff;
}",21.0,35.0,1.0,1.0,15.0,20,8,15,5,3,2,2,2,0,0,,0,2,4,2,2,ANY
4284,11699,ngx_crc32_long,1,ngx_crc32_long,"ANY ngx_crc32_long (u_char*,size_t)",core\ngx_crc32.h,"ngx_crc32_long(u_char *p, size_t len)
{
    uint32_t  crc;

    crc = 0xffffffff;

    while (len--) {
        crc = ngx_crc32_table256[(crc ^ *p++) & 0xff] ^ (crc >> 8);
    }

    return crc ^ 0xffffffff;
}",39.0,50.0,1.0,1.0,12.0,11,8,8,4,1,1,2,2,0,0,,0,1,4,2,2,ANY
4285,11762,ngx_crypt,1,ngx_crypt,"ngx_int_t ngx_crypt (ngx_pool_t*,u_char*,u_char*,u_char**)",core\ngx_crypt.h,"ngx_int_t ngx_crypt(ngx_pool_t *pool, u_char *key, u_char *salt,
    u_char **encrypted);",16.0,17.0,11.0,23.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
4286,11781,ngx_destroy_cycle_pools,1,ngx_destroy_cycle_pools,void ngx_destroy_cycle_pools (ngx_conf_t*),core\ngx_cycle.c,"static void
ngx_destroy_cycle_pools(ngx_conf_t *conf)
{
    ngx_destroy_pool(conf->temp_pool);
    ngx_destroy_pool(conf->pool);
}",943.0,948.0,1.0,1.0,6.0,0,0,0,0,5,0,1,1,0,0,,0,0,2,1,1,void
4287,11786,ngx_init_zone_pool,1,ngx_init_zone_pool,"ngx_int_t ngx_init_zone_pool (ngx_cycle_t*,ngx_shm_zone_t*)",core\ngx_cycle.c,"static ngx_int_t
ngx_init_zone_pool(ngx_cycle_t *cycle, ngx_shm_zone_t *zn)
{
    u_char           *file;
    ngx_slab_pool_t  *sp;

    sp = (ngx_slab_pool_t *) zn->shm.addr;

    if (zn->shm.exists) {

        if (sp == sp->addr) {
            return NGX_OK;
        }

#if (NGX_WIN32)

        /* remap at the required address */

        if (ngx_shm_remap(&zn->shm, sp->addr) != NGX_OK) {
            return NGX_ERROR;
        }

        sp = (ngx_slab_pool_t *) zn->shm.addr;

        if (sp == sp->addr) {
            return NGX_OK;
        }

#endif

        ngx_log_error(NGX_LOG_EMERG, cycle->log, 0,
                      ""shared zone \""%V\"" has no equal addresses: %p vs %p"",
                      &zn->shm.name, sp->addr, sp);
        return NGX_ERROR;
    }

    sp->end = zn->shm.addr + zn->shm.size;
    sp->min_shift = 3;
    sp->addr = zn->shm.addr;

#if (NGX_HAVE_ATOMIC_OPS)

    file = NULL;

#else

    file = ngx_pnalloc(cycle->pool,
                       cycle->lock_file.l...",951.0,1014.0,1.0,1.0,64.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4288,11792,ngx_test_lockfile,1,ngx_test_lockfile,"ngx_int_t ngx_test_lockfile (u_char*,ngx_log_t*)",core\ngx_cycle.c,"static ngx_int_t
ngx_test_lockfile(u_char *file, ngx_log_t *log)
{
#if !(NGX_HAVE_ATOMIC_OPS)
    ngx_fd_t  fd;

    fd = ngx_open_file(file, NGX_FILE_RDWR, NGX_FILE_CREATE_OR_OPEN,
                       NGX_FILE_DEFAULT_ACCESS);

    if (fd == NGX_INVALID_FILE) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                      ngx_open_file_n "" \""%s\"" failed"", file);
        return NGX_ERROR;
    }

    if (ngx_close_file(fd) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ngx_close_file_n "" \""%s\"" failed"", file);
    }

    if (ngx_delete_file(file) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ngx_delete_file_n "" \""%s\"" failed"", file);
    }

#endif

    return NGX_OK;
}",1136.0,1164.0,1.0,1.0,29.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4289,11798,ngx_clean_old_cycles,1,ngx_clean_old_cycles,void ngx_clean_old_cycles (ngx_event_t*),core\ngx_cycle.c,"static void
ngx_clean_old_cycles(ngx_event_t *ev)
{
    ngx_uint_t     i, n, found, live;
    ngx_log_t     *log;
    ngx_cycle_t  **cycle;

    log = ngx_cycle->log;
    ngx_temp_pool->log = log;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, log, 0, ""clean old cycles"");

    live = 0;

    cycle = ngx_old_cycles.elts;
    for (i = 0; i < ngx_old_cycles.nelts; i++) {

        if (cycle[i] == NULL) {
            continue;
        }

        found = 0;

        for (n = 0; n < cycle[i]->connection_n; n++) {
            if (cycle[i]->connections[n].fd != (ngx_socket_t) -1) {
                found = 1;

                ngx_log_debug1(NGX_LOG_DEBUG_CORE, log, 0, ""live fd:%ui"", n);

                break;
            }
        }

        if (found) {
            live = 1;
            continue;
        }

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, log, 0, ""clean old cycle: %ui"", i);

        ngx_destroy_pool(cycle[i]->pool);
        cycle[i] = NULL;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, ...",1365.0,1419.0,1.0,1.0,55.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4290,11803,ngx_shutdown_timer_handler,1,ngx_shutdown_timer_handler,void ngx_shutdown_timer_handler (ngx_event_t*),core\ngx_cycle.c,"static void
ngx_shutdown_timer_handler(ngx_event_t *ev)
{
    ngx_uint_t         i;
    ngx_cycle_t       *cycle;
    ngx_connection_t  *c;

    cycle = ev->data;

    c = cycle->connections;

    for (i = 0; i < cycle->connection_n; i++) {

        if (c[i].fd == (ngx_socket_t) -1
            || c[i].read == NULL
            || c[i].read->accept
            || c[i].read->channel
            || c[i].read->resolver)
        {
            continue;
        }

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, ev->log, 0,
                       ""*%uA shutdown timeout"", c[i].number);

        c[i].close = 1;
        c[i].error = 1;

        c[i].read->handler(c[i].read);
    }
}",1440.0,1470.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4291,11817,ngx_init_cycle,1,ngx_init_cycle,ngx_cycle_t ngx_init_cycle (ngx_cycle_t*),core\ngx_cycle.c,"ngx_cycle_t *
ngx_init_cycle(ngx_cycle_t *old_cycle)
{
    void                *rv;
    char               **senv;
    ngx_uint_t           i, n;
    ngx_log_t           *log;
    ngx_time_t          *tp;
    ngx_conf_t           conf;
    ngx_pool_t          *pool;
    ngx_cycle_t         *cycle, **old;
    ngx_shm_zone_t      *shm_zone, *oshm_zone;
    ngx_list_part_t     *part, *opart;
    ngx_open_file_t     *file;
    ngx_listening_t     *ls, *nls;
    ngx_core_conf_t     *ccf, *old_ccf;
    ngx_core_module_t   *module;
    char                 hostname[NGX_MAXHOSTNAMELEN];

    ngx_timezone_update();

    /* force localtime update with a new timezone */

    tp = ngx_timeofday();
    tp->sec = 0;

    ngx_time_update();


    log = old_cycle->log;

    pool = ngx_create_pool(NGX_CYCLE_POOL_SIZE, log);
    if (pool == NULL) {
        return NULL;
    }
    pool->log = log;

    cycle = ngx_pcalloc(pool, sizeof(ngx_cycle_t));
    if (cycle == NULL) {
        ngx_destroy_pool(poo...",38.0,940.0,1.0,1.0,903.0,837,22,715,66,3,98,166,227,31,71,,0,59,2,1,1,ngx_cycle_t
4292,14582,ngx_create_pidfile,1,ngx_create_pidfile,"ngx_int_t ngx_create_pidfile (ngx_str_t*,ngx_log_t*)",core\ngx_cycle.c,"ngx_int_t
ngx_create_pidfile(ngx_str_t *name, ngx_log_t *log)
{
    size_t      len;
    ngx_int_t   rc;
    ngx_uint_t  create;
    ngx_file_t  file;
    u_char      pid[NGX_INT64_LEN + 2];

    if (ngx_process > NGX_PROCESS_MASTER) {
        return NGX_OK;
    }

    ngx_memzero(&file, sizeof(ngx_file_t));

    file.name = *name;
    file.log = log;

    create = ngx_test_config ? NGX_FILE_CREATE_OR_OPEN : NGX_FILE_TRUNCATE;

    file.fd = ngx_open_file(file.name.data, NGX_FILE_RDWR,
                            create, NGX_FILE_DEFAULT_ACCESS);

    if (file.fd == NGX_INVALID_FILE) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                      ngx_open_file_n "" \""%s\"" failed"", file.name.data);
        return NGX_ERROR;
    }

    rc = NGX_OK;

    if (!ngx_test_config) {
        len = ngx_snprintf(pid, NGX_INT64_LEN + 2, ""%P%N"", ngx_pid) - pid;

        if (ngx_write_file(&file, pid, len, 0) == NGX_ERROR) {
            rc = NGX_ERROR;
        }
    }

    if (ngx_clo...",1017.0,1062.0,1.0,1.0,46.0,26,11,38,21,2,5,6,7,2,3,,0,5,4,2,2,ngx_int_t
4293,14687,ngx_delete_pidfile,1,ngx_delete_pidfile,void ngx_delete_pidfile (ngx_cycle_t*),core\ngx_cycle.c,"void
ngx_delete_pidfile(ngx_cycle_t *cycle)
{
    u_char           *name;
    ngx_core_conf_t  *ccf;

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    name = ngx_new_binary ? ccf->oldpid.data : ccf->pid.data;

    if (ngx_delete_file(name) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ngx_delete_file_n "" \""%s\"" failed"", name);
    }
}",1065.0,1079.0,1.0,1.0,15.0,10,6,9,6,0,2,2,2,0,0,,0,2,2,1,1,void
4294,14724,ngx_signal_process,1,ngx_signal_process,"ngx_int_t ngx_signal_process (ngx_cycle_t*,char*)",core\ngx_cycle.c,"ngx_int_t
ngx_signal_process(ngx_cycle_t *cycle, char *sig)
{
    ssize_t           n;
    ngx_pid_t         pid;
    ngx_file_t        file;
    ngx_core_conf_t  *ccf;
    u_char            buf[NGX_INT64_LEN + 2];

    ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, ""signal process started"");

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    ngx_memzero(&file, sizeof(ngx_file_t));

    file.name = ccf->pid;
    file.log = cycle->log;

    file.fd = ngx_open_file(file.name.data, NGX_FILE_RDONLY,
                            NGX_FILE_OPEN, NGX_FILE_DEFAULT_ACCESS);

    if (file.fd == NGX_INVALID_FILE) {
        ngx_log_error(NGX_LOG_ERR, cycle->log, ngx_errno,
                      ngx_open_file_n "" \""%s\"" failed"", file.name.data);
        return 1;
    }

    n = ngx_read_file(&file, buf, NGX_INT64_LEN + 2, 0);

    if (ngx_close_file(file.fd) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ngx_clo...",1082.0,1133.0,1.0,1.0,52.0,38,13,46,20,1,7,6,6,0,6,,0,4,4,2,2,ngx_int_t
4295,14907,ngx_reopen_files,1,ngx_reopen_files,"void ngx_reopen_files (ngx_cycle_t*,ngx_uid_t)",core\ngx_cycle.c,"void
ngx_reopen_files(ngx_cycle_t *cycle, ngx_uid_t user)
{
    ngx_fd_t          fd;
    ngx_uint_t        i;
    ngx_list_part_t  *part;
    ngx_open_file_t  *file;

    part = &cycle->open_files.part;
    file = part->elts;

    for (i = 0; /* void */ ; i++) {

        if (i >= part->nelts) {
            if (part->next == NULL) {
                break;
            }
            part = part->next;
            file = part->elts;
            i = 0;
        }

        if (file[i].name.len == 0) {
            continue;
        }

        if (file[i].flush) {
            file[i].flush(&file[i], cycle->log);
        }

        fd = ngx_open_file(file[i].name.data, NGX_FILE_APPEND,
                           NGX_FILE_CREATE_OR_OPEN, NGX_FILE_DEFAULT_ACCESS);

        ngx_log_debug3(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                       ""reopen file \""%s\"", old:%d new:%d"",
                       file[i].name.data, file[i].fd, fd);

        if (fd == NGX_INVALID_FILE) {
            ngx...",1167.0,1288.0,1.0,1.0,122.0,94,13,95,21,2,6,26,53,1,6,,0,2,4,2,2,void
4296,15230,ngx_shared_memory_add,1,ngx_shared_memory_add,"ngx_shm_zone_t ngx_shared_memory_add (ngx_conf_t*,ngx_str_t*,size_t,void*)",core\ngx_cycle.c,"ngx_shm_zone_t *
ngx_shared_memory_add(ngx_conf_t *cf, ngx_str_t *name, size_t size, void *tag)
{
    ngx_uint_t        i;
    ngx_shm_zone_t   *shm_zone;
    ngx_list_part_t  *part;

    part = &cf->cycle->shared_memory.part;
    shm_zone = part->elts;

    for (i = 0; /* void */ ; i++) {

        if (i >= part->nelts) {
            if (part->next == NULL) {
                break;
            }
            part = part->next;
            shm_zone = part->elts;
            i = 0;
        }

        if (name->len != shm_zone[i].shm.name.len) {
            continue;
        }

        if (ngx_strncmp(name->data, shm_zone[i].shm.name.data, name->len)
            != 0)
        {
            continue;
        }

        if (tag != shm_zone[i].tag) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                            ""the shared memory zone \""%V\"" is ""
                            ""already declared for a different use"",
                            &shm_zone[i].shm.name);
      ...",1291.0,1362.0,1.0,1.0,72.0,91,11,71,9,0,6,13,18,3,3,,0,4,8,4,4,ngx_shm_zone_t
4297,15638,ngx_set_shutdown_timer,1,ngx_set_shutdown_timer,void ngx_set_shutdown_timer (ngx_cycle_t*),core\ngx_cycle.c,"void
ngx_set_shutdown_timer(ngx_cycle_t *cycle)
{
    ngx_core_conf_t  *ccf;

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    if (ccf->shutdown_timeout) {
        ngx_shutdown_event.handler = ngx_shutdown_timer_handler;
        ngx_shutdown_event.data = cycle;
        ngx_shutdown_event.log = cycle->log;
        ngx_shutdown_event.cancelable = 1;

        ngx_add_timer(&ngx_shutdown_event, ccf->shutdown_timeout);
    }
}",1422.0,1437.0,1.0,1.0,16.0,15,5,13,5,0,7,2,2,1,0,,0,7,2,1,1,void
4298,15811,ngx_shm_zone_init_pt,1,ngx_shm_zone_init_pt,"ngx_int_t ngx_shm_zone_init_pt (ngx_shm_zone_t*,void*)",core\ngx_cycle.h,"typedef ngx_int_t (*ngx_shm_zone_init_pt) (ngx_shm_zone_t *zone, void *data);",27.0,27.0,19.0,76.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4299,15956,ngx_test_full_name,1,ngx_test_full_name,ngx_int_t ngx_test_full_name (ngx_str_t*),core\ngx_file.c,"static ngx_int_t
ngx_test_full_name(ngx_str_t *name)
{
#if (NGX_WIN32)
    u_char  c0, c1;

    c0 = name->data[0];

    if (name->len < 2) {
        if (c0 == '/') {
            return 2;
        }

        return NGX_DECLINED;
    }

    c1 = name->data[1];

    if (c1 == ':') {
        c0 |= 0x20;

        if ((c0 >= 'a' && c0 <= 'z')) {
            return NGX_OK;
        }

        return NGX_DECLINED;
    }

    if (c1 == '/') {
        return NGX_OK;
    }

    if (c0 == '/') {
        return 2;
    }

    return NGX_DECLINED;

#else

    if (name->data[0] == '/') {
        return NGX_OK;
    }

    return NGX_DECLINED;

#endif
}",58.0,105.0,1.0,1.0,48.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4300,15974,ngx_get_full_name,1,ngx_get_full_name,"ngx_int_t ngx_get_full_name (ngx_pool_t*,ngx_str_t*,ngx_str_t*)",core\ngx_file.c,"ngx_int_t
ngx_get_full_name(ngx_pool_t *pool, ngx_str_t *prefix, ngx_str_t *name)
{
    size_t      len;
    u_char     *p, *n;
    ngx_int_t   rc;

    rc = ngx_test_full_name(name);

    if (rc == NGX_OK) {
        return rc;
    }

    len = prefix->len;

#if (NGX_WIN32)

    if (rc == 2) {
        len = rc;
    }

#endif

    n = ngx_pnalloc(pool, len + name->len + 1);
    if (n == NULL) {
        return NGX_ERROR;
    }

    p = ngx_cpymem(n, prefix->data, len);
    ngx_cpystrn(p, name->data, name->len + 1);

    name->len += len;
    name->data = n;

    return NGX_OK;
}",20.0,55.0,1.0,1.0,36.0,18,5,26,10,1,10,3,3,0,3,,0,9,6,3,3,ngx_int_t
4301,16067,ngx_write_chain_to_temp_file,1,ngx_write_chain_to_temp_file,"ssize_t ngx_write_chain_to_temp_file (ngx_temp_file_t*,ngx_chain_t*)",core\ngx_file.c,"ssize_t
ngx_write_chain_to_temp_file(ngx_temp_file_t *tf, ngx_chain_t *chain)
{
    ngx_int_t  rc;

    if (tf->file.fd == NGX_INVALID_FILE) {
        rc = ngx_create_temp_file(&tf->file, tf->path, tf->pool,
                                  tf->persistent, tf->clean, tf->access);

        if (rc != NGX_OK) {
            return rc;
        }

        if (tf->log_level) {
            ngx_log_error(tf->log_level, tf->file.log, 0, ""%s %V"",
                          tf->warn, &tf->file.name);
        }
    }

#if (NGX_THREADS && NGX_HAVE_PWRITEV)

    if (tf->thread_write) {
        return ngx_thread_write_chain_to_file(&tf->file, chain, tf->offset,
                                              tf->pool);
    }

#endif

    return ngx_write_chain_to_file(&tf->file, chain, tf->offset, tf->pool);
}",108.0,137.0,1.0,1.0,30.0,24,6,21,5,0,18,4,6,2,3,,0,16,4,2,2,ssize_t
4302,16150,ngx_create_temp_file,1,ngx_create_temp_file,"ngx_int_t ngx_create_temp_file (ngx_file_t*,ngx_path_t*,ngx_pool_t*,ngx_uint_t,ngx_uint_t,ngx_uint_t)",core\ngx_file.c,"ngx_int_t
ngx_create_temp_file(ngx_file_t *file, ngx_path_t *path, ngx_pool_t *pool,
    ngx_uint_t persistent, ngx_uint_t clean, ngx_uint_t access)
{
    size_t                    levels;
    u_char                   *p;
    uint32_t                  n;
    ngx_err_t                 err;
    ngx_str_t                 name;
    ngx_uint_t                prefix;
    ngx_pool_cleanup_t       *cln;
    ngx_pool_cleanup_file_t  *clnf;

    if (file->name.len) {
        name = file->name;
        levels = 0;
        prefix = 1;

    } else {
        name = path->name;
        levels = path->len;
        prefix = 0;
    }

    file->name.len = name.len + 1 + levels + 10;

    file->name.data = ngx_pnalloc(pool, file->name.len + 1);
    if (file->name.data == NULL) {
        return NGX_ERROR;
    }

#if 0
    for (i = 0; i < file->name.len; i++) {
        file->name.data[i] = 'X';
    }
#endif

    p = ngx_cpymem(file->name.data, name.data, name.len);

    if (prefix) {
        *p = '.';
 ...",140.0,237.0,1.0,1.0,98.0,78,14,73,25,1,15,12,16,2,8,,0,13,12,6,6,ngx_int_t
4303,16431,ngx_create_hashed_filename,1,ngx_create_hashed_filename,"void ngx_create_hashed_filename (ngx_path_t*,u_char*,size_t)",core\ngx_file.c,"void
ngx_create_hashed_filename(ngx_path_t *path, u_char *file, size_t len)
{
    size_t      i, level;
    ngx_uint_t  n;

    i = path->name.len + 1;

    file[path->name.len + path->len]  = '/';

    for (n = 0; n < NGX_MAX_PATH_LEVEL; n++) {
        level = path->level[n];

        if (level == 0) {
            break;
        }

        len -= level;
        file[i - 1] = '/';
        ngx_memcpy(&file[i], &file[len], level);
        i += level + 1;
    }
}",240.0,262.0,1.0,1.0,23.0,26,11,23,7,1,4,4,4,0,0,,0,4,6,3,3,void
4304,16512,ngx_create_path,1,ngx_create_path,"ngx_int_t ngx_create_path (ngx_file_t*,ngx_path_t*)",core\ngx_file.c,"ngx_int_t
ngx_create_path(ngx_file_t *file, ngx_path_t *path)
{
    size_t      pos;
    ngx_err_t   err;
    ngx_uint_t  i;

    pos = path->name.len;

    for (i = 0; i < NGX_MAX_PATH_LEVEL; i++) {
        if (path->level[i] == 0) {
            break;
        }

        pos += path->level[i] + 1;

        file->name.data[pos] = '\0';

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, file->log, 0,
                       ""temp file: \""%s\"""", file->name.data);

        if (ngx_create_dir(file->name.data, 0700) == NGX_FILE_ERROR) {
            err = ngx_errno;
            if (err != NGX_EEXIST) {
                ngx_log_error(NGX_LOG_CRIT, file->log, err,
                              ngx_create_dir_n "" \""%s\"" failed"",
                              file->name.data);
                return NGX_ERROR;
            }
        }

        file->name.data[pos] = '/';
    }

    return NGX_OK;
}",265.0,300.0,1.0,1.0,36.0,28,9,25,12,1,3,6,9,1,0,,0,3,4,2,2,ngx_int_t
4305,16612,ngx_create_full_path,1,ngx_create_full_path,"ngx_err_t ngx_create_full_path (u_char*,ngx_uint_t)",core\ngx_file.c,"ngx_err_t
ngx_create_full_path(u_char *dir, ngx_uint_t access)
{
    u_char     *p, ch;
    ngx_err_t   err;

    err = 0;

#if (NGX_WIN32)
    p = dir + 3;
#else
    p = dir + 1;
#endif

    for ( /* void */ ; *p; p++) {
        ch = *p;

        if (ch != '/') {
            continue;
        }

        *p = '\0';

        if (ngx_create_dir(dir, access) == NGX_FILE_ERROR) {
            err = ngx_errno;

            switch (err) {
            case NGX_EEXIST:
                err = 0;
            case NGX_EACCES:
                break;

            default:
                return err;
            }
        }

        *p = '/';
    }

    return err;
}",303.0,344.0,1.0,1.0,42.0,14,5,20,9,1,0,7,9,0,0,,0,0,4,2,2,ngx_err_t
4306,16680,ngx_next_temp_number,1,ngx_next_temp_number,ngx_atomic_uint_t ngx_next_temp_number (ngx_uint_t),core\ngx_file.c,"ngx_atomic_uint_t
ngx_next_temp_number(ngx_uint_t collision)
{
    ngx_atomic_uint_t  n, add;

    add = collision ? ngx_random_number : 1;

    n = ngx_atomic_fetch_add(ngx_temp_number, add);

    return n + add;
}",347.0,357.0,1.0,1.0,11.0,4,3,8,5,4,3,1,1,0,1,,0,3,2,1,1,ngx_atomic_uint_t
4307,16702,ngx_conf_set_path_slot,1,ngx_conf_set_path_slot,"char* ngx_conf_set_path_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_file.c,"char *
ngx_conf_set_path_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ssize_t      level;
    ngx_str_t   *value;
    ngx_uint_t   i, n;
    ngx_path_t  *path, **slot;

    slot = (ngx_path_t **) (p + cmd->offset);

    if (*slot) {
        return ""is duplicate"";
    }

    path = ngx_pcalloc(cf->pool, sizeof(ngx_path_t));
    if (path == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    path->name = value[1];

    if (path->name.data[path->name.len - 1] == '/') {
        path->name.len--;
    }

    if (ngx_conf_full_name(cf->cycle, &path->name, 0) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    path->conf_file = cf->conf_file->file.name.data;
    path->line = cf->conf_file->line;

    for (i = 0, n = 2; n < cf->args->nelts; i++, n++) {
        level = ngx_atoi(value[n].data, value[n].len);
        if (level == NGX_ERROR || level == 0) {
            return ""invalid value"";
        }

        path->level[i] = le...",360.0,417.0,1.0,1.0,58.0,66,18,53,16,0,14,9,10,6,4,,0,14,6,3,3,char*
4308,16909,ngx_conf_merge_path_value,1,ngx_conf_merge_path_value,"char* ngx_conf_merge_path_value (ngx_conf_t*,ngx_path_t**,ngx_path_t*,ngx_path_init_t*)",core\ngx_file.c,"char *
ngx_conf_merge_path_value(ngx_conf_t *cf, ngx_path_t **path, ngx_path_t *prev,
    ngx_path_init_t *init)
{
    ngx_uint_t  i;

    if (*path) {
        return NGX_CONF_OK;
    }

    if (prev) {
        *path = prev;
        return NGX_CONF_OK;
    }

    *path = ngx_pcalloc(cf->pool, sizeof(ngx_path_t));
    if (*path == NULL) {
        return NGX_CONF_ERROR;
    }

    (*path)->name = init->name;

    if (ngx_conf_full_name(cf->cycle, &(*path)->name, 0) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    for (i = 0; i < NGX_MAX_PATH_LEVEL; i++) {
        (*path)->level[i] = init->level[i];
        (*path)->len += init->level[i] + (init->level[i] ? 1 : 0);
    }

    if (ngx_add_path(cf, path) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",420.0,456.0,1.0,1.0,37.0,36,12,35,11,0,7,7,7,2,3,,0,7,8,4,4,char*
4309,17027,ngx_conf_set_access_slot,1,ngx_conf_set_access_slot,"char* ngx_conf_set_access_slot (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_file.c,"char *
ngx_conf_set_access_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *confp = conf;

    u_char      *p;
    ngx_str_t   *value;
    ngx_uint_t   i, right, shift, *access, user;

    access = (ngx_uint_t *) (confp + cmd->offset);

    if (*access != NGX_CONF_UNSET_UINT) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    *access = 0;
    user = 0600;

    for (i = 1; i < cf->args->nelts; i++) {

        p = value[i].data;

        if (ngx_strncmp(p, ""user:"", sizeof(""user:"") - 1) == 0) {
            shift = 6;
            p += sizeof(""user:"") - 1;
            user = 0;

        } else if (ngx_strncmp(p, ""group:"", sizeof(""group:"") - 1) == 0) {
            shift = 3;
            p += sizeof(""group:"") - 1;

        } else if (ngx_strncmp(p, ""all:"", sizeof(""all:"") - 1) == 0) {
            shift = 0;
            p += sizeof(""all:"") - 1;

        } else {
            goto invalid;
        }

        if (ngx_strcmp(p, ""rw"") == 0) {
            rig...",459.0,522.0,1.0,1.0,64.0,35,15,34,15,0,1,5,7,0,1,,0,0,6,3,3,char*
4310,17217,ngx_add_path,1,ngx_add_path,"ngx_int_t ngx_add_path (ngx_conf_t*,ngx_path_t**)",core\ngx_file.c,"ngx_int_t
ngx_add_path(ngx_conf_t *cf, ngx_path_t **slot)
{
    ngx_uint_t   i, n;
    ngx_path_t  *path, **p;

    path = *slot;

    p = cf->cycle->paths.elts;
    for (i = 0; i < cf->cycle->paths.nelts; i++) {
        if (p[i]->name.len == path->name.len
            && ngx_strcmp(p[i]->name.data, path->name.data) == 0)
        {
            if (p[i]->data != path->data) {
                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                   ""the same path name \""%V\"" ""
                                   ""used in %s:%ui and"",
                                   &p[i]->name, p[i]->conf_file, p[i]->line);
                return NGX_ERROR;
            }

            for (n = 0; n < NGX_MAX_PATH_LEVEL; n++) {
                if (p[i]->level[n] != path->level[n]) {
                    if (path->conf_file == NULL) {
                        if (p[i]->conf_file == NULL) {
                            ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
                            ...",525.0,594.0,1.0,1.0,70.0,81,10,76,11,2,10,11,30,5,5,,0,6,4,2,2,ngx_int_t
4311,17469,ngx_create_paths,1,ngx_create_paths,"ngx_int_t ngx_create_paths (ngx_cycle_t*,ngx_uid_t)",core\ngx_file.c,"ngx_int_t
ngx_create_paths(ngx_cycle_t *cycle, ngx_uid_t user)
{
    ngx_err_t         err;
    ngx_uint_t        i;
    ngx_path_t      **path;

    path = cycle->paths.elts;
    for (i = 0; i < cycle->paths.nelts; i++) {

        if (ngx_create_dir(path[i]->name.data, 0700) == NGX_FILE_ERROR) {
            err = ngx_errno;
            if (err != NGX_EEXIST) {
                ngx_log_error(NGX_LOG_EMERG, cycle->log, err,
                              ngx_create_dir_n "" \""%s\"" failed"",
                              path[i]->name.data);
                return NGX_ERROR;
            }
        }

        if (user == (ngx_uid_t) NGX_CONF_UNSET_UINT) {
            continue;
        }

#if !(NGX_WIN32)
        {
        ngx_file_info_t   fi;

        if (ngx_file_info(path[i]->name.data, &fi) == NGX_FILE_ERROR) {
            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
                          ngx_file_info_n "" \""%s\"" failed"", path[i]->name.data);
            return NGX_ERROR;
   ...",597.0,656.0,1.0,1.0,60.0,54,12,53,16,1,3,11,21,1,3,,0,1,4,2,2,ngx_int_t
4312,17655,ngx_ext_rename_file,1,ngx_ext_rename_file,"ngx_int_t ngx_ext_rename_file (ngx_str_t*,ngx_str_t*,ngx_ext_rename_file_t*)",core\ngx_file.c,"ngx_int_t
ngx_ext_rename_file(ngx_str_t *src, ngx_str_t *to, ngx_ext_rename_file_t *ext)
{
    u_char           *name;
    ngx_err_t         err;
    ngx_copy_file_t   cf;

#if !(NGX_WIN32)

    if (ext->access) {
        if (ngx_change_file_access(src->data, ext->access) == NGX_FILE_ERROR) {
            ngx_log_error(NGX_LOG_CRIT, ext->log, ngx_errno,
                          ngx_change_file_access_n "" \""%s\"" failed"", src->data);
            err = 0;
            goto failed;
        }
    }

#endif

    if (ext->time != -1) {
        if (ngx_set_file_time(src->data, ext->fd, ext->time) != NGX_OK) {
            ngx_log_error(NGX_LOG_CRIT, ext->log, ngx_errno,
                          ngx_set_file_time_n "" \""%s\"" failed"", src->data);
            err = 0;
            goto failed;
        }
    }

    if (ngx_rename_file(src->data, to->data) != NGX_FILE_ERROR) {
        return NGX_OK;
    }

    err = ngx_errno;

    if (err == NGX_ENOPATH) {

        if (!ext->create_path) {
       ...",659.0,791.0,1.0,1.0,133.0,66,10,71,13,0,37,23,34,19,6,,0,36,6,3,3,ngx_int_t
4313,17918,ngx_copy_file,1,ngx_copy_file,"ngx_int_t ngx_copy_file (u_char*,u_char*,ngx_copy_file_t*)",core\ngx_file.c,"ngx_int_t
ngx_copy_file(u_char *from, u_char *to, ngx_copy_file_t *cf)
{
    char             *buf;
    off_t             size;
    time_t            time;
    size_t            len;
    ssize_t           n;
    ngx_fd_t          fd, nfd;
    ngx_int_t         rc;
    ngx_uint_t        access;
    ngx_file_info_t   fi;

    rc = NGX_ERROR;
    buf = NULL;
    nfd = NGX_INVALID_FILE;

    fd = ngx_open_file(from, NGX_FILE_RDONLY, NGX_FILE_OPEN, 0);

    if (fd == NGX_INVALID_FILE) {
        ngx_log_error(NGX_LOG_CRIT, cf->log, ngx_errno,
                      ngx_open_file_n "" \""%s\"" failed"", from);
        goto failed;
    }

    if (cf->size != -1 && cf->access != 0 && cf->time != -1) {
        size = cf->size;
        access = cf->access;
        time = cf->time;

    } else {
        if (ngx_fd_info(fd, &fi) == NGX_FILE_ERROR) {
            ngx_log_error(NGX_LOG_ALERT, cf->log, ngx_errno,
                          ngx_fd_info_n "" \""%s\"" failed"", from);

            goto failed;
 ...",794.0,924.0,1.0,1.0,131.0,56,10,78,21,1,15,26,25,4,6,,0,15,6,3,3,ngx_int_t
4314,18208,ngx_walk_tree,1,ngx_walk_tree,"ngx_int_t ngx_walk_tree (ngx_tree_ctx_t*,ngx_str_t*)",core\ngx_file.c,"ngx_int_t
ngx_walk_tree(ngx_tree_ctx_t *ctx, ngx_str_t *tree)
{
    void       *data, *prev;
    u_char     *p, *name;
    size_t      len;
    ngx_int_t   rc;
    ngx_err_t   err;
    ngx_str_t   file, buf;
    ngx_dir_t   dir;

    ngx_str_null(&buf);

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, ctx->log, 0,
                   ""walk tree \""%V\"""", tree);

    if (ngx_open_dir(tree, &dir) == NGX_ERROR) {
        ngx_log_error(NGX_LOG_CRIT, ctx->log, ngx_errno,
                      ngx_open_dir_n "" \""%s\"" failed"", tree->data);
        return NGX_ERROR;
    }

    prev = ctx->data;

    if (ctx->alloc) {
        data = ngx_alloc(ctx->alloc, ctx->log);
        if (data == NULL) {
            goto failed;
        }

        if (ctx->init_handler(data, prev) == NGX_ABORT) {
            goto failed;
        }

        ctx->data = data;

    } else {
        data = NULL;
    }

    for ( ;; ) {

        ngx_set_errno(0);

        if (ngx_read_dir(&dir) == NGX_ERROR) {
            err = ngx_err...",945.0,1128.0,1.0,1.0,184.0,101,12,102,20,1,28,28,38,11,6,,0,28,4,2,2,ngx_int_t
4315,18716,thread_handler,1,ngx_file_s.thread_handler,"ngx_int_t ngx_file_s.thread_handler (ngx_thread_task_t*,ngx_file_t*)",core\ngx_file.h,"ngx_int_t                (*thread_handler)(ngx_thread_task_t *task,
                                               ngx_file_t *file);",27.0,28.0,30.0,64.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4316,18727,ngx_path_manager_pt,1,ngx_path_manager_pt,ngx_msec_t ngx_path_manager_pt (void*),core\ngx_file.h,typedef ngx_msec_t (*ngx_path_manager_pt) (void *data);,45.0,45.0,20.0,54.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_msec_t
4317,18732,ngx_path_purger_pt,1,ngx_path_purger_pt,ngx_msec_t ngx_path_purger_pt (void*),core\ngx_file.h,typedef ngx_msec_t (*ngx_path_purger_pt) (void *data);,46.0,46.0,20.0,53.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_msec_t
4318,18737,ngx_path_loader_pt,1,ngx_path_loader_pt,void ngx_path_loader_pt (void*),core\ngx_file.h,typedef void (*ngx_path_loader_pt) (void *data);,47.0,47.0,14.0,47.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4319,18803,ngx_tree_init_handler_pt,1,ngx_tree_init_handler_pt,"ngx_int_t ngx_tree_init_handler_pt (void*,void*)",core\ngx_file.h,"typedef ngx_int_t (*ngx_tree_init_handler_pt) (void *ctx, void *prev);",113.0,113.0,19.0,69.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4320,18809,ngx_tree_handler_pt,1,ngx_tree_handler_pt,"ngx_int_t ngx_tree_handler_pt (ngx_tree_ctx_t*,ngx_str_t*)",core\ngx_file.h,"typedef ngx_int_t (*ngx_tree_handler_pt) (ngx_tree_ctx_t *ctx, ngx_str_t *name);",114.0,114.0,19.0,79.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4321,18940,ngx_hash_find,1,ngx_hash_find,"void* ngx_hash_find (ngx_hash_t*,ngx_uint_t,u_char*,size_t)",core\ngx_hash.c,"void *
ngx_hash_find(ngx_hash_t *hash, ngx_uint_t key, u_char *name, size_t len)
{
    ngx_uint_t       i;
    ngx_hash_elt_t  *elt;

#if 0
    ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0, ""hf:\""%*s\"""", len, name);
#endif

    elt = hash->buckets[key % hash->size];

    if (elt == NULL) {
        return NULL;
    }

    while (elt->value) {
        if (len != (size_t) elt->len) {
            goto next;
        }

        for (i = 0; i < len; i++) {
            if (name[i] != elt->name[i]) {
                goto next;
            }
        }

        return elt->value;

    next:

        elt = (ngx_hash_elt_t *) ngx_align_ptr(&elt->name[0] + elt->len,
                                               sizeof(void *));
        continue;
    }

    return NULL;
}",12.0,49.0,1.0,1.0,38.0,25,11,23,8,8,8,9,10,3,0,,0,8,8,4,4,void*
4322,19031,ngx_hash_find_wc_head,1,ngx_hash_find_wc_head,"void* ngx_hash_find_wc_head (ngx_hash_wildcard_t*,u_char*,size_t)",core\ngx_hash.c,"void *
ngx_hash_find_wc_head(ngx_hash_wildcard_t *hwc, u_char *name, size_t len)
{
    void        *value;
    ngx_uint_t   i, n, key;

#if 0
    ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0, ""wch:\""%*s\"""", len, name);
#endif

    n = len;

    while (n) {
        if (name[n - 1] == '.') {
            break;
        }

        n--;
    }

    key = 0;

    for (i = n; i < len; i++) {
        key = ngx_hash(key, name[i]);
    }

#if 0
    ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0, ""key:\""%ui\"""", key);
#endif

    value = ngx_hash_find(&hwc->hash, key, &name[n], len - n);

#if 0
    ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0, ""value:\""%p\"""", value);
#endif

    if (value) {

        /*
         * the 2 low bits of value have the special meaning:
         *     00 - value is data pointer for both ""example.com""
         *          and ""*.example.com"";
         *     01 - value is data pointer for ""*.example.com"" only;
         *     10 - value is pointer to wildcard hash allo...",52.0,143.0,1.0,1.0,92.0,46,11,45,8,1,5,12,23,0,1,,0,5,6,3,3,void*
4323,19196,ngx_hash_find_wc_tail,1,ngx_hash_find_wc_tail,"void* ngx_hash_find_wc_tail (ngx_hash_wildcard_t*,u_char*,size_t)",core\ngx_hash.c,"void *
ngx_hash_find_wc_tail(ngx_hash_wildcard_t *hwc, u_char *name, size_t len)
{
    void        *value;
    ngx_uint_t   i, key;

#if 0
    ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0, ""wct:\""%*s\"""", len, name);
#endif

    key = 0;

    for (i = 0; i < len; i++) {
        if (name[i] == '.') {
            break;
        }

        key = ngx_hash(key, name[i]);
    }

    if (i == len) {
        return NULL;
    }

#if 0
    ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0, ""key:\""%ui\"""", key);
#endif

    value = ngx_hash_find(&hwc->hash, key, name, i);

#if 0
    ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0, ""value:\""%p\"""", value);
#endif

    if (value) {

        /*
         * the 2 low bits of value have the special meaning:
         *     00 - value is data pointer;
         *     11 - value is pointer to wildcard hash allowing ""example.*"".
         */

        if ((uintptr_t) value & 2) {

            i++;

            hwc = (ngx_hash_wildcard_t *) ((uintptr_t) value & ...",146.0,207.0,1.0,1.0,62.0,26,11,34,7,1,4,8,11,0,1,,0,4,6,3,3,void*
4324,19302,ngx_hash_find_combined,1,ngx_hash_find_combined,"void* ngx_hash_find_combined (ngx_hash_combined_t*,ngx_uint_t,u_char*,size_t)",core\ngx_hash.c,"void *
ngx_hash_find_combined(ngx_hash_combined_t *hash, ngx_uint_t key, u_char *name,
    size_t len)
{
    void  *value;

    if (hash->hash.buckets) {
        value = ngx_hash_find(&hash->hash, key, name, len);

        if (value) {
            return value;
        }
    }

    if (len == 0) {
        return NULL;
    }

    if (hash->wc_head && hash->wc_head->hash.buckets) {
        value = ngx_hash_find_wc_head(hash->wc_head, name, len);

        if (value) {
            return value;
        }
    }

    if (hash->wc_tail && hash->wc_tail->hash.buckets) {
        value = ngx_hash_find_wc_tail(hash->wc_tail, name, len);

        if (value) {
            return value;
        }
    }

    return NULL;
}",210.0,245.0,1.0,1.0,36.0,20,6,27,6,3,11,8,11,5,3,,0,11,8,4,4,void*
4325,19394,ngx_hash_init,1,ngx_hash_init,"ngx_int_t ngx_hash_init (ngx_hash_init_t*,ngx_hash_key_t*,ngx_uint_t)",core\ngx_hash.c,"ngx_int_t
ngx_hash_init(ngx_hash_init_t *hinit, ngx_hash_key_t *names, ngx_uint_t nelts)
{
    u_char          *elts;
    size_t           len;
    u_short         *test;
    ngx_uint_t       i, n, key, size, start, bucket_size;
    ngx_hash_elt_t  *elt, **buckets;

    if (hinit->max_size == 0) {
        ngx_log_error(NGX_LOG_EMERG, hinit->pool->log, 0,
                      ""could not build %s, you should ""
                      ""increase %s_max_size: %i"",
                      hinit->name, hinit->name, hinit->max_size);
        return NGX_ERROR;
    }

    if (hinit->bucket_size > 65536 - ngx_cacheline_size) {
        ngx_log_error(NGX_LOG_EMERG, hinit->pool->log, 0,
                      ""could not build %s, too large ""
                      ""%s_bucket_size: %i"",
                      hinit->name, hinit->name, hinit->bucket_size);
        return NGX_ERROR;
    }

    for (n = 0; n < nelts; n++) {
        if (hinit->bucket_size < NGX_HASH_ELT_SIZE(&names[n]) + sizeof(void *))
   ...",251.0,482.0,1.0,33.0,232.0,256,19,245,24,6,55,36,40,8,9,,0,49,6,3,3,ngx_int_t
4326,20186,ngx_hash_wildcard_init,1,ngx_hash_wildcard_init,"ngx_int_t ngx_hash_wildcard_init (ngx_hash_init_t*,ngx_hash_key_t*,ngx_uint_t)",core\ngx_hash.c,"ngx_int_t
ngx_hash_wildcard_init(ngx_hash_init_t *hinit, ngx_hash_key_t *names,
    ngx_uint_t nelts)
{
    size_t                len, dot_len;
    ngx_uint_t            i, n, dot;
    ngx_array_t           curr_names, next_names;
    ngx_hash_key_t       *name, *next_name;
    ngx_hash_init_t       h;
    ngx_hash_wildcard_t  *wdc;

    if (ngx_array_init(&curr_names, hinit->temp_pool, nelts,
                       sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&next_names, hinit->temp_pool, nelts,
                       sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    for (n = 0; n < nelts; n = i) {

#if 0
        ngx_log_error(NGX_LOG_ALERT, hinit->pool->log, 0,
                      ""wc0: \""%V\"""", &names[n].key);
#endif

        dot = 0;

        for (len = 0; len < names[n].key.len; len++) {
            if (names[n].key.data[len] == '.') {
                dot = 1;
                brea...",485.0,627.0,1.0,1.0,143.0,153,19,126,18,0,33,21,38,10,6,,0,33,6,3,3,ngx_int_t
4327,20649,ngx_hash_key,1,ngx_hash_key,"ngx_uint_t ngx_hash_key (u_char*,size_t)",core\ngx_hash.c,"ngx_uint_t
ngx_hash_key(u_char *data, size_t len)
{
    ngx_uint_t  i, key;

    key = 0;

    for (i = 0; i < len; i++) {
        key = ngx_hash(key, data[i]);
    }

    return key;
}",630.0,642.0,1.0,1.0,13.0,5,3,9,4,3,0,2,2,0,0,,0,0,4,2,2,ngx_uint_t
4328,20680,ngx_hash_key_lc,1,ngx_hash_key_lc,"ngx_uint_t ngx_hash_key_lc (u_char*,size_t)",core\ngx_hash.c,"ngx_uint_t
ngx_hash_key_lc(u_char *data, size_t len)
{
    ngx_uint_t  i, key;

    key = 0;

    for (i = 0; i < len; i++) {
        key = ngx_hash(key, ngx_tolower(data[i]));
    }

    return key;
}",645.0,657.0,1.0,1.0,13.0,5,3,9,4,2,0,2,2,0,0,,0,0,4,2,2,ngx_uint_t
4329,20712,ngx_hash_strlow,1,ngx_hash_strlow,"ngx_uint_t ngx_hash_strlow (u_char*,u_char*,size_t)",core\ngx_hash.c,"ngx_uint_t
ngx_hash_strlow(u_char *dst, u_char *src, size_t n)
{
    ngx_uint_t  key;

    key = 0;

    while (n--) {
        *dst = ngx_tolower(*src);
        key = ngx_hash(key, *dst);
        dst++;
        src++;
    }

    return key;
}",660.0,675.0,1.0,1.0,16.0,9,4,10,4,5,0,2,2,0,0,,0,0,6,3,3,ngx_uint_t
4330,20745,ngx_hash_keys_array_init,1,ngx_hash_keys_array_init,"ngx_int_t ngx_hash_keys_array_init (ngx_hash_keys_arrays_t*,ngx_uint_t)",core\ngx_hash.c,"ngx_int_t
ngx_hash_keys_array_init(ngx_hash_keys_arrays_t *ha, ngx_uint_t type)
{
    ngx_uint_t  asize;

    if (type == NGX_HASH_SMALL) {
        asize = 4;
        ha->hsize = 107;

    } else {
        asize = NGX_HASH_LARGE_ASIZE;
        ha->hsize = NGX_HASH_LARGE_HSIZE;
    }

    if (ngx_array_init(&ha->keys, ha->temp_pool, asize, sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&ha->dns_wc_head, ha->temp_pool, asize,
                       sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&ha->dns_wc_tail, ha->temp_pool, asize,
                       sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    ha->keys_hash = ngx_pcalloc(ha->temp_pool, sizeof(ngx_array_t) * ha->hsize);
    if (ha->keys_hash == NULL) {
        return NGX_ERROR;
    }

    ha->dns_wc_head_hash = ngx_pcalloc(ha->temp_pool,
                                     ...",678.0,730.0,1.0,1.0,53.0,43,7,44,9,2,25,8,8,12,6,,0,25,4,2,2,ngx_int_t
4331,20897,ngx_hash_add_key,1,ngx_hash_add_key,"ngx_int_t ngx_hash_add_key (ngx_hash_keys_arrays_t*,ngx_str_t*,void*,ngx_uint_t)",core\ngx_hash.c,"ngx_int_t
ngx_hash_add_key(ngx_hash_keys_arrays_t *ha, ngx_str_t *key, void *value,
    ngx_uint_t flags)
{
    size_t           len;
    u_char          *p;
    ngx_str_t       *name;
    ngx_uint_t       i, k, n, skip, last;
    ngx_array_t     *keys, *hwc;
    ngx_hash_key_t  *hk;

    last = key->len;

    if (flags & NGX_HASH_WILDCARD_KEY) {

        /*
         * supported wildcards:
         *     ""*.example.com"", "".example.com"", and ""www.example.*""
         */

        n = 0;

        for (i = 0; i < key->len; i++) {

            if (key->data[i] == '*') {
                if (++n > 1) {
                    return NGX_DECLINED;
                }
            }

            if (key->data[i] == '.' && key->data[i + 1] == '.') {
                return NGX_DECLINED;
            }

            if (key->data[i] == '\0') {
                return NGX_DECLINED;
            }
        }

        if (key->len > 1 && key->data[0] == '.') {
            skip = 1;
            goto wildcard;
 ...",733.0,1009.0,1.0,1.0,277.0,230,19,222,22,2,72,46,83,21,10,,0,72,8,4,4,ngx_int_t
4332,21758,ngx_hash_key_pt,1,ngx_hash_key_pt,"ngx_uint_t ngx_hash_key_pt (u_char*,size_t)",core\ngx_hash.h,"typedef ngx_uint_t (*ngx_hash_key_pt) (u_char *data, size_t len);",42.0,42.0,20.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
4333,21881,ngx_parse_unix_domain_url,1,ngx_parse_unix_domain_url,"ngx_int_t ngx_parse_unix_domain_url (ngx_pool_t*,ngx_url_t*)",core\ngx_inet.c,"static ngx_int_t
ngx_parse_unix_domain_url(ngx_pool_t *pool, ngx_url_t *u)
{
#if (NGX_HAVE_UNIX_DOMAIN)
    u_char              *path, *uri, *last;
    size_t               len;
    struct sockaddr_un  *saun;

    len = u->url.len;
    path = u->url.data;

    path += 5;
    len -= 5;

    if (u->uri_part) {

        last = path + len;
        uri = ngx_strlchr(path, last, ':');

        if (uri) {
            len = uri - path;
            uri++;
            u->uri.len = last - uri;
            u->uri.data = uri;
        }
    }

    if (len == 0) {
        u->err = ""no path in the unix domain socket"";
        return NGX_ERROR;
    }

    u->host.len = len++;
    u->host.data = path;

    if (len > sizeof(saun->sun_path)) {
        u->err = ""too long path in the unix domain socket"";
        return NGX_ERROR;
    }

    u->socklen = sizeof(struct sockaddr_un);
    saun = (struct sockaddr_un *) &u->sockaddr;
    saun->sun_family = AF_UNIX;
    (void) ngx_cpystrn((u_char *) saun->sun_p...",704.0,779.0,1.0,1.0,76.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4334,21887,ngx_parse_inet_url,1,ngx_parse_inet_url,"ngx_int_t ngx_parse_inet_url (ngx_pool_t*,ngx_url_t*)",core\ngx_inet.c,"static ngx_int_t
ngx_parse_inet_url(ngx_pool_t *pool, ngx_url_t *u)
{
    u_char              *host, *port, *last, *uri, *args, *dash;
    size_t               len;
    ngx_int_t            n;
    struct sockaddr_in  *sin;

    u->socklen = sizeof(struct sockaddr_in);
    sin = (struct sockaddr_in *) &u->sockaddr;
    sin->sin_family = AF_INET;

    u->family = AF_INET;

    host = u->url.data;

    last = host + u->url.len;

    port = ngx_strlchr(host, last, ':');

    uri = ngx_strlchr(host, last, '/');

    args = ngx_strlchr(host, last, '?');

    if (args) {
        if (uri == NULL || args < uri) {
            uri = args;
        }
    }

    if (uri) {
        if (u->listen || !u->uri_part) {
            u->err = ""invalid host"";
            return NGX_ERROR;
        }

        u->uri.len = last - uri;
        u->uri.data = uri;

        last = uri;

        if (uri < port) {
            port = NULL;
        }
    }

    if (port) {
        port++;

        len = last - port;
...",782.0,985.0,1.0,1.0,204.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4335,21893,ngx_parse_inet6_url,1,ngx_parse_inet6_url,"ngx_int_t ngx_parse_inet6_url (ngx_pool_t*,ngx_url_t*)",core\ngx_inet.c,"static ngx_int_t
ngx_parse_inet6_url(ngx_pool_t *pool, ngx_url_t *u)
{
#if (NGX_HAVE_INET6)
    u_char               *p, *host, *port, *last, *uri, *dash;
    size_t                len;
    ngx_int_t             n;
    struct sockaddr_in6  *sin6;

    u->socklen = sizeof(struct sockaddr_in6);
    sin6 = (struct sockaddr_in6 *) &u->sockaddr;
    sin6->sin6_family = AF_INET6;

    host = u->url.data + 1;

    last = u->url.data + u->url.len;

    p = ngx_strlchr(host, last, ']');

    if (p == NULL) {
        u->err = ""invalid host"";
        return NGX_ERROR;
    }

    port = p + 1;

    uri = ngx_strlchr(port, last, '/');

    if (uri) {
        if (u->listen || !u->uri_part) {
            u->err = ""invalid host"";
            return NGX_ERROR;
        }

        u->uri.len = last - uri;
        u->uri.data = uri;

        last = uri;
    }

    if (port < last) {
        if (*port != ':') {
            u->err = ""invalid host"";
            return NGX_ERROR;
        }

        port++;...",988.0,1111.0,1.0,1.0,124.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4336,21899,ngx_inet_add_addr,1,ngx_inet_add_addr,"ngx_int_t ngx_inet_add_addr (ngx_pool_t*,ngx_url_t*,sockaddr*,socklen_t,ngx_uint_t)",core\ngx_inet.c,"static ngx_int_t
ngx_inet_add_addr(ngx_pool_t *pool, ngx_url_t *u, struct sockaddr *sockaddr,
    socklen_t socklen, ngx_uint_t total)
{
    u_char           *p;
    size_t            len;
    ngx_uint_t        i, nports;
    ngx_addr_t       *addr;
    struct sockaddr  *sa;

    nports = u->last_port ? u->last_port - u->port + 1 : 1;

    if (u->addrs == NULL) {
        u->addrs = ngx_palloc(pool, total * nports * sizeof(ngx_addr_t));
        if (u->addrs == NULL) {
            return NGX_ERROR;
        }
    }

    for (i = 0; i < nports; i++) {
        sa = ngx_pcalloc(pool, socklen);
        if (sa == NULL) {
            return NGX_ERROR;
        }

        ngx_memcpy(sa, sockaddr, socklen);

        ngx_inet_set_port(sa, u->port + i);

        switch (sa->sa_family) {

#if (NGX_HAVE_INET6)
        case AF_INET6:
            len = NGX_INET6_ADDRSTRLEN + sizeof(""[]:65536"") - 1;
            break;
#endif

        default: /* AF_INET */
            len = NGX_INET_ADDRSTRLEN + sizeo...",1262.0,1320.0,1.0,1.0,59.0,0,0,0,0,1,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
4337,21908,ngx_inet_addr,1,ngx_inet_addr,"in_addr_t ngx_inet_addr (u_char*,size_t)",core\ngx_inet.c,"in_addr_t
ngx_inet_addr(u_char *text, size_t len)
{
    u_char      *p, c;
    in_addr_t    addr;
    ngx_uint_t   octet, n;

    addr = 0;
    octet = 0;
    n = 0;

    for (p = text; p < text + len; p++) {
        c = *p;

        if (c >= '0' && c <= '9') {
            octet = octet * 10 + (c - '0');

            if (octet > 255) {
                return INADDR_NONE;
            }

            continue;
        }

        if (c == '.') {
            addr = (addr << 8) + octet;
            octet = 0;
            n++;
            continue;
        }

        return INADDR_NONE;
    }

    if (n == 3) {
        addr = (addr << 8) + octet;
        return htonl(addr);
    }

    return INADDR_NONE;
}",19.0,59.0,1.0,1.0,41.0,26,13,30,8,4,0,8,10,0,0,,0,0,4,2,2,in_addr_t
4338,22008,ngx_sock_ntop,1,ngx_sock_ntop,"size_t ngx_sock_ntop (sockaddr*,socklen_t,u_char*,size_t,ngx_uint_t)",core\ngx_inet.c,"size_t
ngx_sock_ntop(struct sockaddr *sa, socklen_t socklen, u_char *text, size_t len,
    ngx_uint_t port)
{
    u_char               *p;
#if (NGX_HAVE_INET6 || NGX_HAVE_UNIX_DOMAIN)
    size_t                n;
#endif
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
    struct sockaddr_un   *saun;
#endif

    switch (sa->sa_family) {

    case AF_INET:

        sin = (struct sockaddr_in *) sa;
        p = (u_char *) &sin->sin_addr;

        if (port) {
            p = ngx_snprintf(text, len, ""%ud.%ud.%ud.%ud:%d"",
                             p[0], p[1], p[2], p[3], ntohs(sin->sin_port));
        } else {
            p = ngx_snprintf(text, len, ""%ud.%ud.%ud.%ud"",
                             p[0], p[1], p[2], p[3]);
        }

        return (p - text);

#if (NGX_HAVE_INET6)

    case AF_INET6:

        sin6 = (struct sockaddr_in6 *) sa;

        n = 0;

        if (port) {
            text[n++] = '[';
        }

...",182.0,262.0,1.0,1.0,81.0,14,6,17,7,7,1,3,4,0,1,,0,1,10,5,5,size_t
4339,22091,ngx_inet_ntop,1,ngx_inet_ntop,"size_t ngx_inet_ntop (int,void*,u_char*,size_t)",core\ngx_inet.c,"size_t
ngx_inet_ntop(int family, void *addr, u_char *text, size_t len)
{
    u_char  *p;

    switch (family) {

    case AF_INET:

        p = addr;

        return ngx_snprintf(text, len, ""%ud.%ud.%ud.%ud"",
                            p[0], p[1], p[2], p[3])
               - text;

#if (NGX_HAVE_INET6)

    case AF_INET6:
        return ngx_inet6_ntop(addr, text, len);

#endif

    default:
        return 0;
    }
}",265.0,290.0,1.0,1.0,26.0,6,3,11,6,0,1,2,2,0,1,,0,0,8,4,4,size_t
4340,22130,ngx_ptocidr,1,ngx_ptocidr,"ngx_int_t ngx_ptocidr (ngx_str_t*,ngx_cidr_t*)",core\ngx_inet.c,"ngx_int_t
ngx_ptocidr(ngx_str_t *text, ngx_cidr_t *cidr)
{
    u_char      *addr, *mask, *last;
    size_t       len;
    ngx_int_t    shift;
#if (NGX_HAVE_INET6)
    ngx_int_t    rc;
    ngx_uint_t   s, i;
#endif

    addr = text->data;
    last = addr + text->len;

    mask = ngx_strlchr(addr, last, '/');
    len = (mask ? mask : last) - addr;

    cidr->u.in.addr = ngx_inet_addr(addr, len);

    if (cidr->u.in.addr != INADDR_NONE) {
        cidr->family = AF_INET;

        if (mask == NULL) {
            cidr->u.in.mask = 0xffffffff;
            return NGX_OK;
        }

#if (NGX_HAVE_INET6)
    } else if (ngx_inet6_addr(addr, len, cidr->u.in6.addr.s6_addr) == NGX_OK) {
        cidr->family = AF_INET6;

        if (mask == NULL) {
            ngx_memset(cidr->u.in6.mask.s6_addr, 0xff, 16);
            return NGX_OK;
        }

#endif
    } else {
        return NGX_ERROR;
    }

    mask++;

    shift = ngx_atoi(mask, last - mask);
    if (shift == NGX_ERROR) {
        return NGX...",374.0,471.0,1.0,1.0,98.0,53,12,45,13,0,6,8,12,1,2,,0,6,4,2,2,ngx_int_t
4341,22316,ngx_cidr_match,1,ngx_cidr_match,"ngx_int_t ngx_cidr_match (sockaddr*,ngx_array_t*)",core\ngx_inet.c,"ngx_int_t
ngx_cidr_match(struct sockaddr *sa, ngx_array_t *cidrs)
{
#if (NGX_HAVE_INET6)
    u_char           *p;
#endif
    in_addr_t         inaddr;
    ngx_cidr_t       *cidr;
    ngx_uint_t        family, i;
#if (NGX_HAVE_INET6)
    ngx_uint_t        n;
    struct in6_addr  *inaddr6;
#endif

#if (NGX_SUPPRESS_WARN)
    inaddr = 0;
#if (NGX_HAVE_INET6)
    inaddr6 = NULL;
#endif
#endif

    family = sa->sa_family;

    if (family == AF_INET) {
        inaddr = ((struct sockaddr_in *) sa)->sin_addr.s_addr;
    }

#if (NGX_HAVE_INET6)
    else if (family == AF_INET6) {
        inaddr6 = &((struct sockaddr_in6 *) sa)->sin6_addr;

        if (IN6_IS_ADDR_V4MAPPED(inaddr6)) {
            family = AF_INET;

            p = inaddr6->s6_addr;

            inaddr = p[12] << 24;
            inaddr += p[13] << 16;
            inaddr += p[14] << 8;
            inaddr += p[15];

            inaddr = htonl(inaddr);
        }
    }
#endif

    for (cidr = cidrs->elts, i = 0; i < cidrs->nelts; i...",474.0,558.0,1.0,1.0,85.0,26,10,22,9,0,2,10,10,1,0,,0,2,4,2,2,ngx_int_t
4342,22409,ngx_parse_addr,1,ngx_parse_addr,"ngx_int_t ngx_parse_addr (ngx_pool_t*,ngx_addr_t*,u_char*,size_t)",core\ngx_inet.c,"ngx_int_t
ngx_parse_addr(ngx_pool_t *pool, ngx_addr_t *addr, u_char *text, size_t len)
{
    in_addr_t             inaddr;
    ngx_uint_t            family;
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct in6_addr       inaddr6;
    struct sockaddr_in6  *sin6;

    /*
     * prevent MSVC8 warning:
     *    potentially uninitialized local variable 'inaddr6' used
     */
    ngx_memzero(&inaddr6, sizeof(struct in6_addr));
#endif

    inaddr = ngx_inet_addr(text, len);

    if (inaddr != INADDR_NONE) {
        family = AF_INET;
        len = sizeof(struct sockaddr_in);

#if (NGX_HAVE_INET6)
    } else if (ngx_inet6_addr(text, len, inaddr6.s6_addr) == NGX_OK) {
        family = AF_INET6;
        len = sizeof(struct sockaddr_in6);

#endif
    } else {
        return NGX_DECLINED;
    }

    addr->sockaddr = ngx_pcalloc(pool, len);
    if (addr->sockaddr == NULL) {
        return NGX_ERROR;
    }

    addr->sockaddr->sa_family = (u_char) family;
    addr->socklen = len;

 ...",561.0,618.0,1.0,1.0,58.0,21,7,25,13,2,3,5,4,0,2,,0,3,8,4,4,ngx_int_t
4343,22492,ngx_parse_addr_port,1,ngx_parse_addr_port,"ngx_int_t ngx_parse_addr_port (ngx_pool_t*,ngx_addr_t*,u_char*,size_t)",core\ngx_inet.c,"ngx_int_t
ngx_parse_addr_port(ngx_pool_t *pool, ngx_addr_t *addr, u_char *text,
    size_t len)
{
    u_char     *p, *last;
    size_t      plen;
    ngx_int_t   rc, port;

    rc = ngx_parse_addr(pool, addr, text, len);

    if (rc != NGX_DECLINED) {
        return rc;
    }

    last = text + len;

#if (NGX_HAVE_INET6)
    if (len && text[0] == '[') {

        p = ngx_strlchr(text, last, ']');

        if (p == NULL || p == last - 1 || *++p != ':') {
            return NGX_DECLINED;
        }

        text++;
        len -= 2;

    } else
#endif

    {
        p = ngx_strlchr(text, last, ':');

        if (p == NULL) {
            return NGX_DECLINED;
        }
    }

    p++;
    plen = last - p;

    port = ngx_atoi(p, plen);

    if (port < 1 || port > 65535) {
        return NGX_DECLINED;
    }

    len -= plen + 1;

    rc = ngx_parse_addr(pool, addr, text, len);

    if (rc != NGX_OK) {
        return rc;
    }

    ngx_inet_set_port(addr->sockaddr, (in_port_t) port);

    r...",621.0,680.0,1.0,1.0,60.0,19,12,40,12,0,4,5,5,0,4,,0,3,8,4,4,ngx_int_t
4344,22589,ngx_parse_url,1,ngx_parse_url,"ngx_int_t ngx_parse_url (ngx_pool_t*,ngx_url_t*)",core\ngx_inet.c,"ngx_int_t
ngx_parse_url(ngx_pool_t *pool, ngx_url_t *u)
{
    u_char  *p;
    size_t   len;

    p = u->url.data;
    len = u->url.len;

    if (len >= 5 && ngx_strncasecmp(p, (u_char *) ""unix:"", 5) == 0) {
        return ngx_parse_unix_domain_url(pool, u);
    }

    if (len && p[0] == '[') {
        return ngx_parse_inet6_url(pool, u);
    }

    return ngx_parse_inet_url(pool, u);
}",683.0,701.0,1.0,1.0,19.0,13,8,14,4,3,6,3,3,1,4,,0,3,4,2,2,ngx_int_t
4345,23344,ngx_inet_resolve_host,1,ngx_inet_resolve_host,"ngx_int_t ngx_inet_resolve_host (ngx_pool_t*,ngx_url_t*)",core\ngx_inet.c,"ngx_int_t
ngx_inet_resolve_host(ngx_pool_t *pool, ngx_url_t *u)
{
    u_char              *host;
    ngx_uint_t           i, n;
    struct hostent      *h;
    struct sockaddr_in   sin;

    /* AF_INET only */

    ngx_memzero(&sin, sizeof(struct sockaddr_in));

    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = ngx_inet_addr(u->host.data, u->host.len);

    if (sin.sin_addr.s_addr == INADDR_NONE) {
        host = ngx_alloc(u->host.len + 1, pool->log);
        if (host == NULL) {
            return NGX_ERROR;
        }

        (void) ngx_cpystrn(host, u->host.data, u->host.len + 1);

        h = gethostbyname((char *) host);

        ngx_free(host);

        if (h == NULL || h->h_addr_list[0] == NULL) {
            u->err = ""host not found"";
            return NGX_ERROR;
        }

        for (n = 0; h->h_addr_list[n] != NULL; n++) { /* void */ }

        /* MP: ngx_shared_palloc() */

        for (i = 0; i < n; i++) {
            sin.sin_addr.s_addr = *(in_addr_t *) (h->h_ad...",1197.0,1257.0,1.0,1.0,61.0,52,13,45,13,2,10,7,13,1,4,,0,9,4,2,2,ngx_int_t
4346,23695,ngx_cmp_sockaddr,1,ngx_cmp_sockaddr,"ngx_int_t ngx_cmp_sockaddr (sockaddr*,socklen_t,sockaddr*,socklen_t,ngx_uint_t)",core\ngx_inet.c,"ngx_int_t
ngx_cmp_sockaddr(struct sockaddr *sa1, socklen_t slen1,
    struct sockaddr *sa2, socklen_t slen2, ngx_uint_t cmp_port)
{
    struct sockaddr_in   *sin1, *sin2;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin61, *sin62;
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
    size_t                len;
    struct sockaddr_un   *saun1, *saun2;
#endif

    if (sa1->sa_family != sa2->sa_family) {
        return NGX_DECLINED;
    }

    switch (sa1->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:

        sin61 = (struct sockaddr_in6 *) sa1;
        sin62 = (struct sockaddr_in6 *) sa2;

        if (cmp_port && sin61->sin6_port != sin62->sin6_port) {
            return NGX_DECLINED;
        }

        if (ngx_memcmp(&sin61->sin6_addr, &sin62->sin6_addr, 16) != 0) {
            return NGX_DECLINED;
        }

        break;
#endif

#if (NGX_HAVE_UNIX_DOMAIN)
    case AF_UNIX:

        saun1 = (struct sockaddr_un *) sa1;
        saun2 = (struct sockaddr_un *) sa2;

        if (slen1 < slen...",1323.0,1400.0,1.0,1.0,78.0,17,6,16,7,1,0,6,7,0,0,,0,0,10,5,5,ngx_int_t
4347,23764,ngx_inet_get_port,1,ngx_inet_get_port,in_port_t ngx_inet_get_port (sockaddr*),core\ngx_inet.c,"in_port_t
ngx_inet_get_port(struct sockaddr *sa)
{
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    switch (sa->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) sa;
        return ntohs(sin6->sin6_port);
#endif

#if (NGX_HAVE_UNIX_DOMAIN)
    case AF_UNIX:
        return 0;
#endif

    default: /* AF_INET */
        sin = (struct sockaddr_in *) sa;
        return ntohs(sin->sin_port);
    }
}",1403.0,1428.0,1.0,1.0,26.0,4,3,4,2,4,0,2,2,0,0,,0,0,2,1,1,in_port_t
4348,23786,ngx_inet_set_port,1,ngx_inet_set_port,"void ngx_inet_set_port (sockaddr*,in_port_t)",core\ngx_inet.c,"void
ngx_inet_set_port(struct sockaddr *sa, in_port_t port)
{
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    switch (sa->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) sa;
        sin6->sin6_port = htons(port);
        break;
#endif

#if (NGX_HAVE_UNIX_DOMAIN)
    case AF_UNIX:
        break;
#endif

    default: /* AF_INET */
        sin = (struct sockaddr_in *) sa;
        sin->sin_port = htons(port);
        break;
    }
}",1431.0,1458.0,1.0,1.0,28.0,5,3,5,3,1,0,3,2,0,0,,0,0,4,2,2,void
4349,23811,ngx_inet_wildcard,1,ngx_inet_wildcard,ngx_uint_t ngx_inet_wildcard (sockaddr*),core\ngx_inet.c,"ngx_uint_t
ngx_inet_wildcard(struct sockaddr *sa)
{
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    switch (sa->sa_family) {

    case AF_INET:
        sin = (struct sockaddr_in *) sa;

        if (sin->sin_addr.s_addr == INADDR_ANY) {
            return 1;
        }

        break;

#if (NGX_HAVE_INET6)

    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) sa;

        if (IN6_IS_ADDR_UNSPECIFIED(&sin6->sin6_addr)) {
            return 1;
        }

        break;

#endif
    }

    return 0;
}",1461.0,1495.0,1.0,1.0,35.0,6,5,6,4,0,0,4,4,0,0,,0,0,2,1,1,ngx_uint_t
4350,23996,ngx_list_create,1,ngx_list_create,"ngx_list_t ngx_list_create (ngx_pool_t*,ngx_uint_t,size_t)",core\ngx_list.c,"ngx_list_t *
ngx_list_create(ngx_pool_t *pool, ngx_uint_t n, size_t size)
{
    ngx_list_t  *list;

    list = ngx_palloc(pool, sizeof(ngx_list_t));
    if (list == NULL) {
        return NULL;
    }

    if (ngx_list_init(list, pool, n, size) != NGX_OK) {
        return NULL;
    }

    return list;
}",12.0,27.0,1.0,1.0,16.0,4,4,13,7,0,2,3,3,1,2,,0,2,6,3,3,ngx_list_t
4351,24030,ngx_list_push,1,ngx_list_push,void* ngx_list_push (ngx_list_t*),core\ngx_list.c,"void *
ngx_list_push(ngx_list_t *l)
{
    void             *elt;
    ngx_list_part_t  *last;

    last = l->last;

    if (last->nelts == l->nalloc) {

        /* the last part is full, allocate a new list part */

        last = ngx_palloc(l->pool, sizeof(ngx_list_part_t));
        if (last == NULL) {
            return NULL;
        }

        last->elts = ngx_palloc(l->pool, l->nalloc * l->size);
        if (last->elts == NULL) {
            return NULL;
        }

        last->nelts = 0;
        last->next = NULL;

        l->last->next = last;
        l->last = last;
    }

    elt = (char *) last->elts + l->size * last->nelts;
    last->nelts++;

    return elt;
}",30.0,63.0,1.0,1.0,34.0,35,8,30,5,9,11,4,6,1,2,,0,11,2,1,1,void*
4352,24164,ngx_list_init,1,ngx_list_init,"ANY ngx_list_init (ngx_list_t*,ngx_pool_t*,ngx_uint_t,size_t)",core\ngx_list.h,"ngx_list_init(ngx_list_t *list, ngx_pool_t *pool, ngx_uint_t n, size_t size)
{
    list->part.elts = ngx_palloc(pool, n * size);
    if (list->part.elts == NULL) {
        return NGX_ERROR;
    }

    list->part.nelts = 0;
    list->part.next = NULL;
    list->last = &list->part;
    list->size = size;
    list->nalloc = n;
    list->pool = pool;

    return NGX_OK;
}",37.0,52.0,1.0,1.0,16.0,23,6,19,7,5,10,2,2,1,1,,0,10,8,4,4,ANY
4353,24247,ngx_error_log,1,ngx_error_log,"char* ngx_error_log (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_log.c,"static char *
ngx_error_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_log_t  *dummy;

    dummy = &cf->cycle->new_log;

    return ngx_log_set_log(cf, &dummy);
}",541.0,549.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4354,24254,ngx_log_set_levels,1,ngx_log_set_levels,"char* ngx_log_set_levels (ngx_conf_t*,ngx_log_t*)",core\ngx_log.c,"static char *
ngx_log_set_levels(ngx_conf_t *cf, ngx_log_t *log)
{
    ngx_uint_t   i, n, d, found;
    ngx_str_t   *value;

    if (cf->args->nelts == 2) {
        log->log_level = NGX_LOG_ERR;
        return NGX_CONF_OK;
    }

    value = cf->args->elts;

    for (i = 2; i < cf->args->nelts; i++) {
        found = 0;

        for (n = 1; n <= NGX_LOG_DEBUG; n++) {
            if (ngx_strcmp(value[i].data, err_levels[n].data) == 0) {

                if (log->log_level != 0) {
                    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                       ""duplicate log level \""%V\"""",
                                       &value[i]);
                    return NGX_CONF_ERROR;
                }

                log->log_level = n;
                found = 1;
                break;
            }
        }

        for (n = 0, d = NGX_LOG_DEBUG_FIRST; d <= NGX_LOG_DEBUG_LAST; d <<= 1) {
            if (ngx_strcmp(value[i].data, debug_levels[n++]) == 0) {
         ...",478.0,538.0,1.0,1.0,61.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,char*
4355,24260,ngx_log_insert,1,ngx_log_insert,"void ngx_log_insert (ngx_log_t*,ngx_log_t*)",core\ngx_log.c,"static void
ngx_log_insert(ngx_log_t *log, ngx_log_t *new_log)
{
    ngx_log_t  tmp;

    if (new_log->log_level > log->log_level) {

        /*
         * list head address is permanent, insert new log after
         * head and swap its contents with head
         */

        tmp = *log;
        *log = *new_log;
        *new_log = tmp;

        log->next = new_log;
        return;
    }

    while (log->next) {
        if (new_log->log_level > log->next->log_level) {
            new_log->next = log->next;
            log->next = new_log;
            return;
        }

        log = log->next;
    }

    log->next = new_log;
}",676.0,707.0,1.0,1.0,32.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,void
4356,24344,ngx_log_error_core,1,ngx_log_error_core,"void ngx_log_error_core (ngx_uint_t,ngx_log_t*,ngx_err_t,char*,va_list)",core\ngx_log.c,"void
ngx_log_error_core(ngx_uint_t level, ngx_log_t *log, ngx_err_t err,
    const char *fmt, va_list args)

#endif
{
#if (NGX_HAVE_VARIADIC_MACROS)
    va_list      args;
#endif
    u_char      *p, *last, *msg;
    ssize_t      n;
    ngx_uint_t   wrote_stderr, debug_connection;
    u_char       errstr[NGX_MAX_ERROR_STR];

    last = errstr + NGX_MAX_ERROR_STR;

    p = ngx_cpymem(errstr, ngx_cached_err_log_time.data,
                   ngx_cached_err_log_time.len);

    p = ngx_slprintf(p, last, "" [%V] "", &err_levels[level]);

    /* pid#tid */
    p = ngx_slprintf(p, last, ""%P#"" NGX_TID_T_FMT "": "",
                    ngx_log_pid, ngx_log_tid);

    if (log->connection) {
        p = ngx_slprintf(p, last, ""*%uA "", log->connection);
    }

    msg = p;

#if (NGX_HAVE_VARIADIC_MACROS)

    va_start(args, fmt);
    p = ngx_vslprintf(p, last, fmt, args);
    va_end(args);

#else

    p = ngx_vslprintf(p, last, fmt, args);

#endif

    if (err) {
        p = ngx_log_errno(p, last, err...",101.0,210.0,1.0,1.0,110.0,68,18,89,23,2,11,15,17,1,7,,0,9,10,5,5,void
4357,24589,ngx_log_error,1,ngx_log_error,"ANY ngx_log_error (ngx_uint_t,ngx_log_t*,ngx_err_t,char*...)",core\ngx_log.c,"ngx_log_error(ngx_uint_t level, ngx_log_t *log, ngx_err_t err,
    const char *fmt, ...)
{
    va_list  args;

    if (log->log_level >= level) {
        va_start(args, fmt);
        ngx_log_error_core(level, log, err, fmt, args);
        va_end(args);
    }
}",216.0,226.0,1.0,1.0,11.0,2,2,10,5,216,1,2,2,0,1,,0,0,8,4,4,ANY
4358,24618,ngx_log_debug_core,1,ngx_log_debug_core,"ANY ngx_log_debug_core (ngx_log_t*,ngx_err_t,char*...)",core\ngx_log.c,"ngx_log_debug_core(ngx_log_t *log, ngx_err_t err, const char *fmt, ...)
{
    va_list  args;

    va_start(args, fmt);
    ngx_log_error_core(NGX_LOG_DEBUG, log, err, fmt, args);
    va_end(args);
}",230.0,237.0,1.0,1.0,8.0,0,0,8,5,0,1,1,1,0,1,,0,0,6,3,3,ANY
4359,24639,ngx_log_abort,1,ngx_log_abort,"ANY ngx_log_abort (ngx_err_t,char*...)",core\ngx_log.c,"ngx_log_abort(ngx_err_t err, const char *fmt, ...)
{
    u_char   *p;
    va_list   args;
    u_char    errstr[NGX_MAX_CONF_ERRSTR];

    va_start(args, fmt);
    p = ngx_vsnprintf(errstr, sizeof(errstr) - 1, fmt, args);
    va_end(args);

    ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, err,
                  ""%*s"", p - errstr, errstr);
}",243.0,255.0,1.0,1.0,13.0,5,4,14,7,0,1,1,1,0,1,,0,0,4,2,2,ANY
4360,24676,ngx_log_stderr,1,ngx_log_stderr,"ANY ngx_log_stderr (ngx_err_t,char*...)",core\ngx_log.c,"ngx_log_stderr(ngx_err_t err, const char *fmt, ...)
{
    u_char   *p, *last;
    va_list   args;
    u_char    errstr[NGX_MAX_ERROR_STR];

    last = errstr + NGX_MAX_ERROR_STR;

    p = ngx_cpymem(errstr, ""nginx: "", 7);

    va_start(args, fmt);
    p = ngx_vslprintf(p, last, fmt, args);
    va_end(args);

    if (err) {
        p = ngx_log_errno(p, last, err);
    }

    if (p > last - NGX_LINEFEED_SIZE) {
        p = last - NGX_LINEFEED_SIZE;
    }

    ngx_linefeed(p);

    (void) ngx_write_console(ngx_stderr, errstr, p - errstr);
}",259.0,284.0,1.0,1.0,26.0,11,5,29,9,4,3,3,3,0,3,,0,2,4,2,2,ANY
4361,24740,ngx_log_errno,1,ngx_log_errno,"u_char ngx_log_errno (u_char*,u_char*,ngx_err_t)",core\ngx_log.c,"u_char *
ngx_log_errno(u_char *buf, u_char *last, ngx_err_t err)
{
    if (buf > last - 50) {

        /* leave a space for an error code */

        buf = last - 50;
        *buf++ = '.';
        *buf++ = '.';
        *buf++ = '.';
    }

#if (NGX_WIN32)
    buf = ngx_slprintf(buf, last, ((unsigned) err < 0x80000000)
                                       ? "" (%d: "" : "" (%Xd: "", err);
#else
    buf = ngx_slprintf(buf, last, "" (%d: "", err);
#endif

    buf = ngx_strerror(err, buf, last - buf);

    if (buf < last) {
        *buf++ = ')';
    }

    return buf;
}",287.0,314.0,1.0,1.0,28.0,20,6,20,3,4,2,3,3,0,2,,0,2,6,3,3,u_char
4362,24801,ngx_log_init,1,ngx_log_init,"ngx_log_t ngx_log_init (u_char*,u_char*)",core\ngx_log.c,"ngx_log_t *
ngx_log_init(u_char *prefix, u_char *error_log)
{
    u_char  *p, *name;
    size_t   nlen, plen;

    ngx_log.file = &ngx_log_file;
    ngx_log.log_level = NGX_LOG_NOTICE;

    if (error_log == NULL) {
        error_log = (u_char *) NGX_ERROR_LOG_PATH;
    }

    name = error_log;
    nlen = ngx_strlen(name);

    if (nlen == 0) {
        ngx_log_file.fd = ngx_stderr;
        return &ngx_log;
    }

    p = NULL;

#if (NGX_WIN32)
    if (name[1] != ':') {
#else
    if (name[0] != '/') {
#endif

        if (prefix) {
            plen = ngx_strlen(prefix);

        } else {
#ifdef NGX_PREFIX
            prefix = (u_char *) NGX_PREFIX;
            plen = ngx_strlen(prefix);
#else
            plen = 0;
#endif
        }

        if (plen) {
            name = malloc(plen + nlen + 2);
            if (name == NULL) {
                return NULL;
            }

            p = ngx_cpymem(name, prefix, plen);

            if (!ngx_path_separator(*(p - 1))) {
                *p++...",317.0,398.0,1.0,1.0,82.0,38,12,52,16,1,11,10,16,1,2,,0,10,4,2,2,ngx_log_t
4363,24950,ngx_log_open_default,1,ngx_log_open_default,ngx_int_t ngx_log_open_default (ngx_cycle_t*),core\ngx_log.c,"ngx_int_t
ngx_log_open_default(ngx_cycle_t *cycle)
{
    ngx_log_t  *log;

    if (ngx_log_get_file_log(&cycle->new_log) != NULL) {
        return NGX_OK;
    }

    if (cycle->new_log.log_level != 0) {
        /* there are some error logs, but no files */

        log = ngx_pcalloc(cycle->pool, sizeof(ngx_log_t));
        if (log == NULL) {
            return NGX_ERROR;
        }

    } else {
        /* no error logs at all */
        log = &cycle->new_log;
    }

    log->log_level = NGX_LOG_ERR;

    log->file = ngx_conf_open_file(cycle, &cycle->error_log);
    if (log->file == NULL) {
        return NGX_ERROR;
    }

    if (log != &cycle->new_log) {
        ngx_log_insert(&cycle->new_log, log);
    }

    return NGX_OK;
}",401.0,435.0,1.0,1.0,35.0,23,7,23,7,1,4,6,7,1,4,,0,3,2,1,1,ngx_int_t
4364,25039,ngx_log_redirect_stderr,1,ngx_log_redirect_stderr,ngx_int_t ngx_log_redirect_stderr (ngx_cycle_t*),core\ngx_log.c,"ngx_int_t
ngx_log_redirect_stderr(ngx_cycle_t *cycle)
{
    ngx_fd_t  fd;

    if (cycle->log_use_stderr) {
        return NGX_OK;
    }

    /* file log always exists when we are called */
    fd = ngx_log_get_file_log(cycle->log)->file->fd;

    if (fd != ngx_stderr) {
        if (ngx_set_stderr(fd) == NGX_FILE_ERROR) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ngx_set_stderr_n "" failed"");

            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",438.0,460.0,1.0,1.0,23.0,7,4,10,6,3,1,4,5,0,1,,0,1,2,1,1,ngx_int_t
4365,25078,ngx_log_get_file_log,1,ngx_log_get_file_log,ngx_log_t ngx_log_get_file_log (ngx_log_t*),core\ngx_log.c,"ngx_log_t *
ngx_log_get_file_log(ngx_log_t *head)
{
    ngx_log_t  *log;

    for (log = head; log; log = log->next) {
        if (log->file != NULL) {
            return log;
        }
    }

    return NULL;
}",463.0,475.0,1.0,1.0,13.0,3,3,7,3,2,0,3,4,0,0,,0,0,2,1,1,ngx_log_t
4366,25320,ngx_log_set_log,1,ngx_log_set_log,"char* ngx_log_set_log (ngx_conf_t*,ngx_log_t**)",core\ngx_log.c,"char *
ngx_log_set_log(ngx_conf_t *cf, ngx_log_t **head)
{
    ngx_log_t          *new_log;
    ngx_str_t          *value, name;
    ngx_syslog_peer_t  *peer;

    if (*head != NULL && (*head)->log_level == 0) {
        new_log = *head;

    } else {

        new_log = ngx_pcalloc(cf->pool, sizeof(ngx_log_t));
        if (new_log == NULL) {
            return NGX_CONF_ERROR;
        }

        if (*head == NULL) {
            *head = new_log;
        }
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""stderr"") == 0) {
        ngx_str_null(&name);
        cf->cycle->log_use_stderr = 1;

        new_log->file = ngx_conf_open_file(cf->cycle, &name);
        if (new_log->file == NULL) {
            return NGX_CONF_ERROR;
        }

    } else if (ngx_strncmp(value[1].data, ""memory:"", 7) == 0) {

#if (NGX_DEBUG)
        size_t                 size, needed;
        ngx_pool_cleanup_t    *cln;
        ngx_log_memory_buf_t  *buf;

        value[1].len -= 7;
        valu...",552.0,673.0,1.0,1.0,122.0,28,9,25,8,0,3,6,7,1,3,,0,2,4,2,2,char*
4367,25617,ngx_log_handler_pt,1,ngx_log_handler_pt,"u_char* ngx_log_handler_pt (ngx_log_t*,u_char*,size_t)",core\ngx_log.h,"typedef u_char *(*ngx_log_handler_pt) (ngx_log_t *log, u_char *buf, size_t len);",45.0,45.0,16.0,79.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char*
4368,25624,ngx_log_writer_pt,1,ngx_log_writer_pt,"void ngx_log_writer_pt (ngx_log_t*,ngx_uint_t,u_char*,size_t)",core\ngx_log.h,"typedef void (*ngx_log_writer_pt) (ngx_log_t *log, ngx_uint_t level,
    u_char *buf, size_t len);",46.0,47.0,14.0,28.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,void
4369,25705,ngx_md5_body,1,ngx_md5_body,"u_char* ngx_md5_body (ngx_md5_t*,u_char*,size_t)",core\ngx_md5.c,"static const u_char *
ngx_md5_body(ngx_md5_t *ctx, const u_char *data, size_t size)
{
    uint32_t       a, b, c, d;
    uint32_t       saved_a, saved_b, saved_c, saved_d;
    const u_char  *p;
#if !(NGX_HAVE_LITTLE_ENDIAN && NGX_HAVE_NONALIGNED)
    uint32_t       block[16];
#endif

    p = data;

    a = ctx->a;
    b = ctx->b;
    c = ctx->c;
    d = ctx->d;

    do {
        saved_a = a;
        saved_b = b;
        saved_c = c;
        saved_d = d;

        /* Round 1 */

        STEP(F, a, b, c, d, SET(0),  0xd76aa478, 7);
        STEP(F, d, a, b, c, SET(1),  0xe8c7b756, 12);
        STEP(F, c, d, a, b, SET(2),  0x242070db, 17);
        STEP(F, b, c, d, a, SET(3),  0xc1bdceee, 22);
        STEP(F, a, b, c, d, SET(4),  0xf57c0faf, 7);
        STEP(F, d, a, b, c, SET(5),  0x4787c62a, 12);
        STEP(F, c, d, a, b, SET(6),  0xa8304613, 17);
        STEP(F, b, c, d, a, SET(7),  0xfd469501, 22);
        STEP(F, a, b, c, d, SET(8),  0x698098d8, 7);
        STEP(F, d, a, b, c, SET(...",169.0,283.0,1.0,8.0,115.0,0,0,0,0,4,0,1,1,0,0,,0,0,6,3,3,u_char
4370,25712,ngx_md5_init,1,ngx_md5_init,void ngx_md5_init (ngx_md5_t*),core\ngx_md5.c,"void
ngx_md5_init(ngx_md5_t *ctx)
{
    ctx->a = 0x67452301;
    ctx->b = 0xefcdab89;
    ctx->c = 0x98badcfe;
    ctx->d = 0x10325476;

    ctx->bytes = 0;
}",18.0,27.0,1.0,1.0,10.0,10,2,5,1,1,5,1,1,0,0,,0,5,2,1,1,void
4371,25742,ngx_md5_update,1,ngx_md5_update,"void ngx_md5_update (ngx_md5_t*,void*,size_t)",core\ngx_md5.c,"void
ngx_md5_update(ngx_md5_t *ctx, const void *data, size_t size)
{
    size_t  used, free;

    used = (size_t) (ctx->bytes & 0x3f);
    ctx->bytes += size;

    if (used) {
        free = 64 - used;

        if (size < free) {
            ngx_memcpy(&ctx->buffer[used], data, size);
            return;
        }

        ngx_memcpy(&ctx->buffer[used], data, free);
        data = (u_char *) data + free;
        size -= free;
        (void) ngx_md5_body(ctx, ctx->buffer, 64);
    }

    if (size >= 64) {
        data = ngx_md5_body(ctx, data, size & ~(size_t) 0x3f);
        size &= 0x3f;
    }

    ngx_memcpy(ctx->buffer, data, size);
}",30.0,58.0,1.0,1.0,29.0,26,13,33,5,1,8,4,5,0,2,,0,7,6,3,3,void
4372,25839,ngx_md5_final,1,ngx_md5_final,"void ngx_md5_final (u_char[16],ngx_md5_t*)",core\ngx_md5.c,"void
ngx_md5_final(u_char result[16], ngx_md5_t *ctx)
{
    size_t  used, free;

    used = (size_t) (ctx->bytes & 0x3f);

    ctx->buffer[used++] = 0x80;

    free = 64 - used;

    if (free < 8) {
        ngx_memzero(&ctx->buffer[used], free);
        (void) ngx_md5_body(ctx, ctx->buffer, 64);
        used = 0;
        free = 64;
    }

    ngx_memzero(&ctx->buffer[used], free - 8);

    ctx->bytes <<= 3;
    ctx->buffer[56] = (u_char) ctx->bytes;
    ctx->buffer[57] = (u_char) (ctx->bytes >> 8);
    ctx->buffer[58] = (u_char) (ctx->bytes >> 16);
    ctx->buffer[59] = (u_char) (ctx->bytes >> 24);
    ctx->buffer[60] = (u_char) (ctx->bytes >> 32);
    ctx->buffer[61] = (u_char) (ctx->bytes >> 40);
    ctx->buffer[62] = (u_char) (ctx->bytes >> 48);
    ctx->buffer[63] = (u_char) (ctx->bytes >> 56);

    (void) ngx_md5_body(ctx, ctx->buffer, 64);

    result[0] = (u_char) ctx->a;
    result[1] = (u_char) (ctx->a >> 8);
    result[2] = (u_char) (ctx->a >> 16);
    result[3] = (u_char)...",61.0,111.0,1.0,1.0,51.0,130,12,70,4,1,41,2,2,0,2,,0,39,4,2,2,void
4373,29407,ngx_module_index,1,ngx_module_index,ngx_uint_t ngx_module_index (ngx_cycle_t*),core\ngx_module.c,"static ngx_uint_t
ngx_module_index(ngx_cycle_t *cycle)
{
    ngx_uint_t     i, index;
    ngx_module_t  *module;

    index = 0;

again:

    /* find an unused index */

    for (i = 0; cycle->modules[i]; i++) {
        module = cycle->modules[i];

        if (module->index == index) {
            index++;
            goto again;
        }
    }

    /* check previous cycle */

    if (cycle->old_cycle && cycle->old_cycle->modules) {

        for (i = 0; cycle->old_cycle->modules[i]; i++) {
            module = cycle->old_cycle->modules[i];

            if (module->index == index) {
                index++;
                goto again;
            }
        }
    }

    return index;
}",279.0,315.0,1.0,1.0,37.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_uint_t
4374,29412,ngx_module_ctx_index,1,ngx_module_ctx_index,"ngx_uint_t ngx_module_ctx_index (ngx_cycle_t*,ngx_uint_t,ngx_uint_t)",core\ngx_module.c,"static ngx_uint_t
ngx_module_ctx_index(ngx_cycle_t *cycle, ngx_uint_t type, ngx_uint_t index)
{
    ngx_uint_t     i;
    ngx_module_t  *module;

again:

    /* find an unused ctx_index */

    for (i = 0; cycle->modules[i]; i++) {
        module = cycle->modules[i];

        if (module->type != type) {
            continue;
        }

        if (module->ctx_index == index) {
            index++;
            goto again;
        }
    }

    /* check previous cycle */

    if (cycle->old_cycle && cycle->old_cycle->modules) {

        for (i = 0; cycle->old_cycle->modules[i]; i++) {
            module = cycle->old_cycle->modules[i];

            if (module->type != type) {
                continue;
            }

            if (module->ctx_index == index) {
                index++;
                goto again;
            }
        }
    }

    return index;
}",318.0,360.0,1.0,1.0,43.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_uint_t
4375,29421,ngx_preinit_modules,1,ngx_preinit_modules,ngx_int_t ngx_preinit_modules (void),core\ngx_module.c,"ngx_int_t
ngx_preinit_modules(void)
{
    ngx_uint_t  i;

    for (i = 0; ngx_modules[i]; i++) {
        ngx_modules[i]->index = i;
        ngx_modules[i]->name = ngx_module_names[i];
    }

    ngx_modules_n = i;
    ngx_max_module = ngx_modules_n + NGX_MAX_DYNAMIC_MODULES;

    return NGX_OK;
}",25.0,39.0,1.0,37.0,15.0,12,4,15,6,1,3,2,2,0,0,,0,3,2,1,1,ngx_int_t
4376,29466,ngx_cycle_modules,1,ngx_cycle_modules,ngx_int_t ngx_cycle_modules (ngx_cycle_t*),core\ngx_module.c,"ngx_int_t
ngx_cycle_modules(ngx_cycle_t *cycle)
{
    /*
     * create a list of modules to be used for this cycle,
     * copy static modules to it
     */

    cycle->modules = ngx_pcalloc(cycle->pool, (ngx_max_module + 1)
                                              * sizeof(ngx_module_t *));
    if (cycle->modules == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(cycle->modules, ngx_modules,
               ngx_modules_n * sizeof(ngx_module_t *));

    cycle->modules_n = ngx_modules_n;

    return NGX_OK;
}",42.0,62.0,1.0,1.0,21.0,13,6,14,8,1,4,2,2,0,1,,0,4,2,1,1,ngx_int_t
4377,29510,ngx_init_modules,1,ngx_init_modules,ngx_int_t ngx_init_modules (ngx_cycle_t*),core\ngx_module.c,"ngx_int_t
ngx_init_modules(ngx_cycle_t *cycle)
{
    ngx_uint_t  i;

    for (i = 0; cycle->modules[i]; i++) {
        if (cycle->modules[i]->init_module) {
            if (cycle->modules[i]->init_module(cycle) != NGX_OK) {
                return NGX_ERROR;
            }
        }
    }

    return NGX_OK;
}",65.0,79.0,1.0,1.0,15.0,10,4,11,4,1,0,4,7,0,0,,0,0,2,1,1,ngx_int_t
4378,29555,ngx_count_modules,1,ngx_count_modules,"ngx_int_t ngx_count_modules (ngx_cycle_t*,ngx_uint_t)",core\ngx_module.c,"ngx_int_t
ngx_count_modules(ngx_cycle_t *cycle, ngx_uint_t type)
{
    ngx_uint_t     i, next, max;
    ngx_module_t  *module;

    next = 0;
    max = 0;

    /* count appropriate modules, set up their indices */

    for (i = 0; cycle->modules[i]; i++) {
        module = cycle->modules[i];

        if (module->type != type) {
            continue;
        }

        if (module->ctx_index != NGX_MODULE_UNSET_INDEX) {

            /* if ctx_index was assigned, preserve it */

            if (module->ctx_index > max) {
                max = module->ctx_index;
            }

            if (module->ctx_index == next) {
                next++;
            }

            continue;
        }

        /* search for some free index */

        module->ctx_index = ngx_module_ctx_index(cycle, type, next);

        if (module->ctx_index > max) {
            max = module->ctx_index;
        }

        next = module->ctx_index + 1;
    }

    /*
     * make sure the number returned is big enoug...",82.0,153.0,1.0,1.0,72.0,49,9,45,7,0,1,14,23,0,1,,0,1,4,2,2,ngx_int_t
4379,29719,ngx_add_module,1,ngx_add_module,"ngx_int_t ngx_add_module (ngx_conf_t*,ngx_str_t*,ngx_module_t*,char**)",core\ngx_module.c,"ngx_int_t
ngx_add_module(ngx_conf_t *cf, ngx_str_t *file, ngx_module_t *module,
    char **order)
{
    void               *rv;
    ngx_uint_t          i, m, before;
    ngx_core_module_t  *core_module;

    if (cf->cycle->modules_n >= ngx_max_module) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""too many modules loaded"");
        return NGX_ERROR;
    }

    if (module->version != nginx_version) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""module \""%V\"" version %ui instead of %ui"",
                           file, module->version, (ngx_uint_t) nginx_version);
        return NGX_ERROR;
    }

    if (ngx_strcmp(module->signature, NGX_MODULE_SIGNATURE) != 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""module \""%V\"" is not binary compatible"",
                           file);
        return NGX_ERROR;
    }

    for (m = 0; cf->cycle->modules[m]; m++) {
        if (ngx_strcmp(cf->cycl...",156.0,276.0,1.0,1.0,121.0,87,14,93,20,0,8,20,32,2,6,,0,3,8,4,4,ngx_int_t
4380,30259,init_master,1,ngx_module_s.init_master,ngx_int_t ngx_module_s.init_master (ngx_log_t*),core\ngx_module.h,ngx_int_t           (*init_master)(ngx_log_t *log);,238.0,238.0,25.0,54.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4381,30264,init_module,1,ngx_module_s.init_module,ngx_int_t ngx_module_s.init_module (ngx_cycle_t*),core\ngx_module.h,ngx_int_t           (*init_module)(ngx_cycle_t *cycle);,240.0,240.0,25.0,58.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4382,30269,init_process,1,ngx_module_s.init_process,ngx_int_t ngx_module_s.init_process (ngx_cycle_t*),core\ngx_module.h,ngx_int_t           (*init_process)(ngx_cycle_t *cycle);,242.0,242.0,25.0,59.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4383,30274,init_thread,1,ngx_module_s.init_thread,ngx_int_t ngx_module_s.init_thread (ngx_cycle_t*),core\ngx_module.h,ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);,243.0,243.0,25.0,58.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4384,30279,exit_thread,1,ngx_module_s.exit_thread,void ngx_module_s.exit_thread (ngx_cycle_t*),core\ngx_module.h,void                (*exit_thread)(ngx_cycle_t *cycle);,244.0,244.0,25.0,58.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4385,30284,exit_process,1,ngx_module_s.exit_process,void ngx_module_s.exit_process (ngx_cycle_t*),core\ngx_module.h,void                (*exit_process)(ngx_cycle_t *cycle);,245.0,245.0,25.0,59.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4386,30289,exit_master,1,ngx_module_s.exit_master,void ngx_module_s.exit_master (ngx_cycle_t*),core\ngx_module.h,void                (*exit_master)(ngx_cycle_t *cycle);,247.0,247.0,25.0,58.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4387,30304,create_conf,1,ngx_core_module_t.create_conf,void* ngx_core_module_t.create_conf (ngx_cycle_t*),core\ngx_module.h,void               *(*create_conf)(ngx_cycle_t *cycle);,262.0,262.0,24.0,58.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4388,30309,init_conf,1,ngx_core_module_t.init_conf,"char* ngx_core_module_t.init_conf (ngx_cycle_t*,void*)",core\ngx_module.h,"char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);",263.0,263.0,24.0,68.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4389,30359,ngx_murmur_hash2,1,ngx_murmur_hash2,"uint32_t ngx_murmur_hash2 (u_char*,size_t)",core\ngx_murmurhash.c,"uint32_t
ngx_murmur_hash2(u_char *data, size_t len)
{
    uint32_t  h, k;

    h = 0 ^ len;

    while (len >= 4) {
        k  = data[0];
        k |= data[1] << 8;
        k |= data[2] << 16;
        k |= data[3] << 24;

        k *= 0x5bd1e995;
        k ^= k >> 24;
        k *= 0x5bd1e995;

        h *= 0x5bd1e995;
        h ^= k;

        data += 4;
        len -= 4;
    }

    switch (len) {
    case 3:
        h ^= data[2] << 16;
        /* fall through */
    case 2:
        h ^= data[1] << 8;
        /* fall through */
    case 1:
        h ^= data[0];
        h *= 0x5bd1e995;
    }

    h ^= h >> 13;
    h *= 0x5bd1e995;
    h ^= h >> 15;

    return h;
}",11.0,52.0,1.0,1.0,42.0,26,9,34,4,2,0,3,3,0,0,,0,0,4,2,2,uint32_t
4390,30498,ngx_open_file_cache_cleanup,1,ngx_open_file_cache_cleanup,void ngx_open_file_cache_cleanup (void*),core\ngx_open_file_cache.c,"static void
ngx_open_file_cache_cleanup(void *data)
{
    ngx_open_file_cache_t  *cache = data;

    ngx_queue_t             *q;
    ngx_cached_open_file_t  *file;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, ngx_cycle->log, 0,
                   ""open file cache cleanup"");

    for ( ;; ) {

        if (ngx_queue_empty(&cache->expire_queue)) {
            break;
        }

        q = ngx_queue_last(&cache->expire_queue);

        file = ngx_queue_data(q, ngx_cached_open_file_t, queue);

        ngx_queue_remove(q);

        ngx_rbtree_delete(&cache->rbtree, &file->node);

        cache->current--;

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, ngx_cycle->log, 0,
                       ""delete cached open file: %s"", file->name);

        if (!file->err && !file->is_dir) {
            file->close = 1;
            file->count = 0;
            ngx_close_cached_file(cache, file, 0, ngx_cycle->log);

        } else {
            ngx_free(file->name);
            ngx_free(file);
        }
    }
...",88.0,140.0,1.0,1.0,53.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4391,30503,ngx_open_file_wrapper,1,ngx_open_file_wrapper,"ngx_fd_t ngx_open_file_wrapper (ngx_str_t*,ngx_open_file_info_t*,ngx_int_t,ngx_int_t,ngx_int_t,ngx_log_t*)",core\ngx_open_file_cache.c,"static ngx_fd_t
ngx_open_file_wrapper(ngx_str_t *name, ngx_open_file_info_t *of,
    ngx_int_t mode, ngx_int_t create, ngx_int_t access, ngx_log_t *log)
{
    ngx_fd_t  fd;

#if !(NGX_HAVE_OPENAT)

    fd = ngx_open_file(name->data, mode, create, access);

    if (fd == NGX_INVALID_FILE) {
        of->err = ngx_errno;
        of->failed = ngx_open_file_n;
        return NGX_INVALID_FILE;
    }

    return fd;

#else

    u_char           *p, *cp, *end;
    ngx_fd_t          at_fd;
    ngx_str_t         at_name;

    if (of->disable_symlinks == NGX_DISABLE_SYMLINKS_OFF) {
        fd = ngx_open_file(name->data, mode, create, access);

        if (fd == NGX_INVALID_FILE) {
            of->err = ngx_errno;
            of->failed = ngx_open_file_n;
            return NGX_INVALID_FILE;
        }

        return fd;
    }

    p = name->data;
    end = p + name->len;

    at_name = *name;

    if (of->disable_symlinks_from) {

        cp = p + of->disable_symlinks_from;

        *cp = '\0'...",613.0,777.0,1.0,1.0,165.0,0,0,0,0,0,0,1,1,0,0,,0,0,12,6,6,ngx_fd_t
4392,30513,ngx_file_info_wrapper,1,ngx_file_info_wrapper,"ngx_int_t ngx_file_info_wrapper (ngx_str_t*,ngx_open_file_info_t*,ngx_file_info_t*,ngx_log_t*)",core\ngx_open_file_cache.c,"static ngx_int_t
ngx_file_info_wrapper(ngx_str_t *name, ngx_open_file_info_t *of,
    ngx_file_info_t *fi, ngx_log_t *log)
{
    ngx_int_t  rc;

#if !(NGX_HAVE_OPENAT)

    rc = ngx_file_info(name->data, fi);

    if (rc == NGX_FILE_ERROR) {
        of->err = ngx_errno;
        of->failed = ngx_file_info_n;
        return NGX_FILE_ERROR;
    }

    return rc;

#else

    ngx_fd_t  fd;

    if (of->disable_symlinks == NGX_DISABLE_SYMLINKS_OFF) {

        rc = ngx_file_info(name->data, fi);

        if (rc == NGX_FILE_ERROR) {
            of->err = ngx_errno;
            of->failed = ngx_file_info_n;
            return NGX_FILE_ERROR;
        }

        return rc;
    }

    fd = ngx_open_file_wrapper(name, of, NGX_FILE_RDONLY|NGX_FILE_NONBLOCK,
                               NGX_FILE_OPEN, 0, log);

    if (fd == NGX_INVALID_FILE) {
        return NGX_FILE_ERROR;
    }

    rc = ngx_fd_info(fd, fi);

    if (rc == NGX_FILE_ERROR) {
        of->err = ngx_errno;
        of->failed = ng...",780.0,836.0,1.0,1.0,57.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
4393,30521,ngx_open_and_stat_file,1,ngx_open_and_stat_file,"ngx_int_t ngx_open_and_stat_file (ngx_str_t*,ngx_open_file_info_t*,ngx_log_t*)",core\ngx_open_file_cache.c,"static ngx_int_t
ngx_open_and_stat_file(ngx_str_t *name, ngx_open_file_info_t *of,
    ngx_log_t *log)
{
    ngx_fd_t         fd;
    ngx_file_info_t  fi;

    if (of->fd != NGX_INVALID_FILE) {

        if (ngx_file_info_wrapper(name, of, &fi, log) == NGX_FILE_ERROR) {
            of->fd = NGX_INVALID_FILE;
            return NGX_ERROR;
        }

        if (of->uniq == ngx_file_uniq(&fi)) {
            goto done;
        }

    } else if (of->test_dir) {

        if (ngx_file_info_wrapper(name, of, &fi, log) == NGX_FILE_ERROR) {
            of->fd = NGX_INVALID_FILE;
            return NGX_ERROR;
        }

        if (ngx_is_dir(&fi)) {
            goto done;
        }
    }

    if (!of->log) {

        /*
         * Use non-blocking open() not to hang on FIFO files, etc.
         * This flag has no effect on a regular files.
         */

        fd = ngx_open_file_wrapper(name, of, NGX_FILE_RDONLY|NGX_FILE_NONBLOCK,
                                   NGX_FILE_OPEN, 0, log);

  ...",839.0,945.0,1.0,51.0,107.0,0,0,0,0,4,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4394,30528,ngx_open_file_add_event,1,ngx_open_file_add_event,"void ngx_open_file_add_event (ngx_open_file_cache_t*,ngx_cached_open_file_t*,ngx_open_file_info_t*,ngx_log_t*)",core\ngx_open_file_cache.c,"static void
ngx_open_file_add_event(ngx_open_file_cache_t *cache,
    ngx_cached_open_file_t *file, ngx_open_file_info_t *of, ngx_log_t *log)
{
    ngx_open_file_cache_event_t  *fev;

    if (!(ngx_event_flags & NGX_USE_VNODE_EVENT)
        || !of->events
        || file->event
        || of->fd == NGX_INVALID_FILE
        || file->uses < of->min_uses)
    {
        return;
    }

    file->use_event = 0;

    file->event = ngx_calloc(sizeof(ngx_event_t), log);
    if (file->event== NULL) {
        return;
    }

    fev = ngx_alloc(sizeof(ngx_open_file_cache_event_t), log);
    if (fev == NULL) {
        ngx_free(file->event);
        file->event = NULL;
        return;
    }

    fev->fd = of->fd;
    fev->file = file;
    fev->cache = cache;

    file->event->handler = ngx_open_file_cache_remove;
    file->event->data = fev;

    /*
     * although vnode event may be called while ngx_cycle->poll
     * destruction, however, cleanup procedures are run before any
     * memory free...",953.0,1014.0,1.0,1.0,62.0,0,0,0,0,2,0,1,1,0,0,,0,0,8,4,4,void
4395,30536,ngx_open_file_cleanup,1,ngx_open_file_cleanup,void ngx_open_file_cleanup (void*),core\ngx_open_file_cache.c,"static void
ngx_open_file_cleanup(void *data)
{
    ngx_open_file_cache_cleanup_t  *c = data;

    c->file->count--;

    ngx_close_cached_file(c->cache, c->file, c->min_uses, c->log);

    /* drop one or two expired open files */
    ngx_expire_old_cached_files(c->cache, 1, c->log);
}",1017.0,1028.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4396,30541,ngx_close_cached_file,1,ngx_close_cached_file,"void ngx_close_cached_file (ngx_open_file_cache_t*,ngx_cached_open_file_t*,ngx_uint_t,ngx_log_t*)",core\ngx_open_file_cache.c,"static void
ngx_close_cached_file(ngx_open_file_cache_t *cache,
    ngx_cached_open_file_t *file, ngx_uint_t min_uses, ngx_log_t *log)
{
    ngx_log_debug5(NGX_LOG_DEBUG_CORE, log, 0,
                   ""close cached open file: %s, fd:%d, c:%d, u:%d, %d"",
                   file->name, file->fd, file->count, file->uses, file->close);

    if (!file->close) {

        file->accessed = ngx_time();

        ngx_queue_remove(&file->queue);

        ngx_queue_insert_head(&cache->expire_queue, &file->queue);

        if (file->uses >= min_uses || file->count) {
            return;
        }
    }

    ngx_open_file_del_event(file);

    if (file->count) {
        return;
    }

    if (file->fd != NGX_INVALID_FILE) {

        if (ngx_close_file(file->fd) == NGX_FILE_ERROR) {
            ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                          ngx_close_file_n "" \""%s\"" failed"", file->name);
        }

        file->fd = NGX_INVALID_FILE;
    }

    if (!file->close) {
       ...",1031.0,1074.0,1.0,1.0,44.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,void
4397,30549,ngx_open_file_del_event,1,ngx_open_file_del_event,void ngx_open_file_del_event (ngx_cached_open_file_t*),core\ngx_open_file_cache.c,"static void
ngx_open_file_del_event(ngx_cached_open_file_t *file)
{
    if (file->event == NULL) {
        return;
    }

    (void) ngx_del_event(file->event, NGX_VNODE_EVENT,
                         file->count ? NGX_FLUSH_EVENT : NGX_CLOSE_EVENT);

    ngx_free(file->event->data);
    ngx_free(file->event);
    file->event = NULL;
    file->use_event = 0;
}",1077.0,1091.0,1.0,1.0,15.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
4398,30554,ngx_expire_old_cached_files,1,ngx_expire_old_cached_files,"void ngx_expire_old_cached_files (ngx_open_file_cache_t*,ngx_uint_t,ngx_log_t*)",core\ngx_open_file_cache.c,"static void
ngx_expire_old_cached_files(ngx_open_file_cache_t *cache, ngx_uint_t n,
    ngx_log_t *log)
{
    time_t                   now;
    ngx_queue_t             *q;
    ngx_cached_open_file_t  *file;

    now = ngx_time();

    /*
     * n == 1 deletes one or two inactive files
     * n == 0 deletes least recently used file by force
     *        and one or two inactive files
     */

    while (n < 3) {

        if (ngx_queue_empty(&cache->expire_queue)) {
            return;
        }

        q = ngx_queue_last(&cache->expire_queue);

        file = ngx_queue_data(q, ngx_cached_open_file_t, queue);

        if (n++ != 0 && now - file->accessed <= cache->inactive) {
            return;
        }

        ngx_queue_remove(q);

        ngx_rbtree_delete(&cache->rbtree, &file->node);

        cache->current--;

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, log, 0,
                       ""expire cached open file: %s"", file->name);

        if (!file->err && !file->is_dir) {
      ...",1094.0,1142.0,1.0,1.0,49.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,void
4399,30561,ngx_open_file_cache_rbtree_insert_value,1,ngx_open_file_cache_rbtree_insert_value,"void ngx_open_file_cache_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",core\ngx_open_file_cache.c,"static void
ngx_open_file_cache_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t       **p;
    ngx_cached_open_file_t    *file, *file_temp;

    for ( ;; ) {

        if (node->key < temp->key) {

            p = &temp->left;

        } else if (node->key > temp->key) {

            p = &temp->right;

        } else { /* node->key == temp->key */

            file = (ngx_cached_open_file_t *) node;
            file_temp = (ngx_cached_open_file_t *) temp;

            p = (ngx_strcmp(file->name, file_temp->name) < 0)
                    ? &temp->left : &temp->right;
        }

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",1145.0,1183.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4400,30568,ngx_open_file_lookup,1,ngx_open_file_lookup,"ngx_cached_open_file_t* ngx_open_file_lookup (ngx_open_file_cache_t*,ngx_str_t*,uint32_t)",core\ngx_open_file_cache.c,"static ngx_cached_open_file_t *
ngx_open_file_lookup(ngx_open_file_cache_t *cache, ngx_str_t *name,
    uint32_t hash)
{
    ngx_int_t                rc;
    ngx_rbtree_node_t       *node, *sentinel;
    ngx_cached_open_file_t  *file;

    node = cache->rbtree.root;
    sentinel = cache->rbtree.sentinel;

    while (node != sentinel) {

        if (hash < node->key) {
            node = node->left;
            continue;
        }

        if (hash > node->key) {
            node = node->right;
            continue;
        }

        /* hash == node->key */

        file = (ngx_cached_open_file_t *) node;

        rc = ngx_strcmp(name->data, file->name);

        if (rc == 0) {
            return file;
        }

        node = (rc < 0) ? node->left : node->right;
    }

    return NULL;
}",1186.0,1223.0,1.0,1.0,38.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_cached_open_file_t
4401,30575,ngx_open_file_cache_remove,1,ngx_open_file_cache_remove,void ngx_open_file_cache_remove (ngx_event_t*),core\ngx_open_file_cache.c,"static void
ngx_open_file_cache_remove(ngx_event_t *ev)
{
    ngx_cached_open_file_t       *file;
    ngx_open_file_cache_event_t  *fev;

    fev = ev->data;
    file = fev->file;

    ngx_queue_remove(&file->queue);

    ngx_rbtree_delete(&fev->cache->rbtree, &file->node);

    fev->cache->current--;

    /* NGX_ONESHOT_EVENT was already deleted */
    file->event = NULL;
    file->use_event = 0;

    file->close = 1;

    ngx_close_cached_file(fev->cache, file, 0, ev->log);

    /* free memory only when fev->cache and fev->file are already not needed */

    ngx_free(ev->data);
    ngx_free(ev);
}",1226.0,1253.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4402,30580,ngx_open_file_cache_init,1,ngx_open_file_cache_init,"ngx_open_file_cache_t ngx_open_file_cache_init (ngx_pool_t*,ngx_uint_t,time_t)",core\ngx_open_file_cache.c,"ngx_open_file_cache_t *
ngx_open_file_cache_init(ngx_pool_t *pool, ngx_uint_t max, time_t inactive)
{
    ngx_pool_cleanup_t     *cln;
    ngx_open_file_cache_t  *cache;

    cache = ngx_palloc(pool, sizeof(ngx_open_file_cache_t));
    if (cache == NULL) {
        return NULL;
    }

    ngx_rbtree_init(&cache->rbtree, &cache->sentinel,
                    ngx_open_file_cache_rbtree_insert_value);

    ngx_queue_init(&cache->expire_queue);

    cache->current = 0;
    cache->max = max;
    cache->inactive = inactive;

    cln = ngx_pool_cleanup_add(pool, 0);
    if (cln == NULL) {
        return NULL;
    }

    cln->handler = ngx_open_file_cache_cleanup;
    cln->data = cache;

    return cache;
}",56.0,85.0,1.0,1.0,30.0,21,5,24,8,0,8,3,3,0,2,,0,8,6,3,3,ngx_open_file_cache_t
4403,30794,ngx_open_cached_file,1,ngx_open_cached_file,"ngx_int_t ngx_open_cached_file (ngx_open_file_cache_t*,ngx_str_t*,ngx_open_file_info_t*,ngx_pool_t*)",core\ngx_open_file_cache.c,"ngx_int_t
ngx_open_cached_file(ngx_open_file_cache_t *cache, ngx_str_t *name,
    ngx_open_file_info_t *of, ngx_pool_t *pool)
{
    time_t                          now;
    uint32_t                        hash;
    ngx_int_t                       rc;
    ngx_file_info_t                 fi;
    ngx_pool_cleanup_t             *cln;
    ngx_cached_open_file_t         *file;
    ngx_pool_cleanup_file_t        *clnf;
    ngx_open_file_cache_cleanup_t  *ofcln;

    of->fd = NGX_INVALID_FILE;
    of->err = 0;

    if (cache == NULL) {

        if (of->test_only) {

            if (ngx_file_info_wrapper(name, of, &fi, pool->log)
                == NGX_FILE_ERROR)
            {
                return NGX_ERROR;
            }

            of->uniq = ngx_file_uniq(&fi);
            of->mtime = ngx_file_mtime(&fi);
            of->size = ngx_file_size(&fi);
            of->fs_size = ngx_file_fs_size(&fi);
            of->is_dir = ngx_is_dir(&fi);
            of->is_file = ngx_is_file(&fi);
    ...",143.0,486.0,1.0,1.0,344.0,307,16,258,23,3,93,43,64,21,19,,0,85,8,4,4,ngx_int_t
4404,32931,ngx_output_chain_as_is,1,ngx_output_chain_as_is,"ANY ngx_output_chain_as_is (ngx_output_chain_ctx_t*,ngx_buf_t*)",core\ngx_output_chain.c,"ngx_output_chain_as_is(ngx_output_chain_ctx_t *ctx, ngx_buf_t *buf)
{
    ngx_uint_t  sendfile;

    if (ngx_buf_special(buf)) {
        return 1;
    }

#if (NGX_THREADS)
    if (buf->in_file) {
        buf->file->thread_handler = ctx->thread_handler;
        buf->file->thread_ctx = ctx->filter_ctx;
    }
#endif

    if (buf->in_file && buf->file->directio) {
        return 0;
    }

    sendfile = ctx->sendfile;

#if (NGX_SENDFILE_LIMIT)

    if (buf->in_file && buf->file_pos >= NGX_SENDFILE_LIMIT) {
        sendfile = 0;
    }

#endif

    if (!sendfile) {

        if (!ngx_buf_in_memory(buf)) {
            return 0;
        }

        buf->in_file = 0;
    }

#if (NGX_HAVE_AIO_SENDFILE)
    if (ctx->aio_preload && buf->in_file) {
        (void) ngx_output_chain_aio_setup(ctx, buf->file);
    }
#endif

    if (ctx->need_in_memory && !ngx_buf_in_memory(buf)) {
        return 0;
    }

    if (ctx->need_in_temp && (buf->memory || buf->mmap)) {
        return 0;
    }

    return 1;
}",248.0,301.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
4405,32937,ngx_output_chain_add_copy,1,ngx_output_chain_add_copy,"ngx_int_t ngx_output_chain_add_copy (ngx_pool_t*,ngx_chain_t**,ngx_chain_t*)",core\ngx_output_chain.c,"static ngx_int_t
ngx_output_chain_add_copy(ngx_pool_t *pool, ngx_chain_t **chain,
    ngx_chain_t *in)
{
    ngx_chain_t  *cl, **ll;
#if (NGX_SENDFILE_LIMIT)
    ngx_buf_t    *b, *buf;
#endif

    ll = chain;

    for (cl = *chain; cl; cl = cl->next) {
        ll = &cl->next;
    }

    while (in) {

        cl = ngx_alloc_chain_link(pool);
        if (cl == NULL) {
            return NGX_ERROR;
        }

#if (NGX_SENDFILE_LIMIT)

        buf = in->buf;

        if (buf->in_file
            && buf->file_pos < NGX_SENDFILE_LIMIT
            && buf->file_last > NGX_SENDFILE_LIMIT)
        {
            /* split a file buf on two bufs by the sendfile limit */

            b = ngx_calloc_buf(pool);
            if (b == NULL) {
                return NGX_ERROR;
            }

            ngx_memcpy(b, buf, sizeof(ngx_buf_t));

            if (ngx_buf_in_memory(buf)) {
                buf->pos += (ssize_t) (NGX_SENDFILE_LIMIT - buf->file_pos);
                b->last = buf->pos;
        ...",326.0,392.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4406,32944,ngx_output_chain_align_file_buf,1,ngx_output_chain_align_file_buf,"ngx_int_t ngx_output_chain_align_file_buf (ngx_output_chain_ctx_t*,off_t)",core\ngx_output_chain.c,"static ngx_int_t
ngx_output_chain_align_file_buf(ngx_output_chain_ctx_t *ctx, off_t bsize)
{
    size_t      size;
    ngx_buf_t  *in;

    in = ctx->in->buf;

    if (in->file == NULL || !in->file->directio) {
        return NGX_DECLINED;
    }

    ctx->directio = 1;

    size = (size_t) (in->file_pos - (in->file_pos & ~(ctx->alignment - 1)));

    if (size == 0) {

        if (bsize >= (off_t) ctx->bufs.size) {
            return NGX_DECLINED;
        }

        size = (size_t) bsize;

    } else {
        size = (size_t) ctx->alignment - size;

        if ((off_t) size > bsize) {
            size = (size_t) bsize;
        }
    }

    ctx->buf = ngx_create_temp_buf(ctx->pool, size);
    if (ctx->buf == NULL) {
        return NGX_ERROR;
    }

    /*
     * we do not set ctx->buf->tag, because we do not want
     * to reuse the buf via ctx->free list
     */

#if (NGX_HAVE_ALIGNED_DIRECTIO)
    ctx->unaligned = 1;
#endif

    return NGX_OK;
}",395.0,442.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4407,32950,ngx_output_chain_get_buf,1,ngx_output_chain_get_buf,"ngx_int_t ngx_output_chain_get_buf (ngx_output_chain_ctx_t*,off_t)",core\ngx_output_chain.c,"static ngx_int_t
ngx_output_chain_get_buf(ngx_output_chain_ctx_t *ctx, off_t bsize)
{
    size_t       size;
    ngx_buf_t   *b, *in;
    ngx_uint_t   recycled;

    in = ctx->in->buf;
    size = ctx->bufs.size;
    recycled = 1;

    if (in->last_in_chain) {

        if (bsize < (off_t) size) {

            /*
             * allocate a small temp buf for a small last buf
             * or its small last part
             */

            size = (size_t) bsize;
            recycled = 0;

        } else if (!ctx->directio
                   && ctx->bufs.num == 1
                   && (bsize < (off_t) (size + size / 4)))
        {
            /*
             * allocate a temp buf that equals to a last buf,
             * if there is no directio, the last buf size is lesser
             * than 1.25 of bufs.size and the temp buf is single
             */

            size = (size_t) bsize;
            recycled = 0;
        }
    }

    b = ngx_calloc_buf(ctx->pool);
    if (b == NULL) {
...",445.0,518.0,1.0,1.0,74.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4408,32956,ngx_output_chain_copy_buf,1,ngx_output_chain_copy_buf,ngx_int_t ngx_output_chain_copy_buf (ngx_output_chain_ctx_t*),core\ngx_output_chain.c,"static ngx_int_t
ngx_output_chain_copy_buf(ngx_output_chain_ctx_t *ctx)
{
    off_t        size;
    ssize_t      n;
    ngx_buf_t   *src, *dst;
    ngx_uint_t   sendfile;

    src = ctx->in->buf;
    dst = ctx->buf;

    size = ngx_buf_size(src);
    size = ngx_min(size, dst->end - dst->pos);

    sendfile = ctx->sendfile && !ctx->directio;

#if (NGX_SENDFILE_LIMIT)

    if (src->in_file && src->file_pos >= NGX_SENDFILE_LIMIT) {
        sendfile = 0;
    }

#endif

    if (ngx_buf_in_memory(src)) {
        ngx_memcpy(dst->pos, src->pos, (size_t) size);
        src->pos += (size_t) size;
        dst->last += (size_t) size;

        if (src->in_file) {

            if (sendfile) {
                dst->in_file = 1;
                dst->file = src->file;
                dst->file_pos = src->file_pos;
                dst->file_last = src->file_pos + size;

            } else {
                dst->in_file = 0;
            }

            src->file_pos += size;

        } else {
         ...",521.0,672.0,1.0,1.0,152.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4409,34740,ngx_palloc_block,1,ngx_palloc_block,"void* ngx_palloc_block (ngx_pool_t*,size_t)",core\ngx_palloc.c,"static void *
ngx_palloc_block(ngx_pool_t *pool, size_t size)
{
    u_char      *m;
    size_t       psize;
    ngx_pool_t  *p, *new;

    psize = (size_t) (pool->d.end - (u_char *) pool);

    m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool->log);
    if (m == NULL) {
        return NULL;
    }

    new = (ngx_pool_t *) m;

    new->d.end = m + psize;
    new->d.next = NULL;
    new->d.failed = 0;

    m += sizeof(ngx_pool_data_t);
    m = ngx_align_ptr(m, NGX_ALIGNMENT);
    new->d.last = m + size;

    for (p = pool->current; p->d.next; p = p->d.next) {
        if (p->d.failed++ > 4) {
            pool->current = p->d.next;
        }
    }

    p->d.next = new;

    return m;
}",177.0,210.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void*
4410,34746,ngx_palloc_large,1,ngx_palloc_large,"void* ngx_palloc_large (ngx_pool_t*,size_t)",core\ngx_palloc.c,"static void *
ngx_palloc_large(ngx_pool_t *pool, size_t size)
{
    void              *p;
    ngx_uint_t         n;
    ngx_pool_large_t  *large;

    p = ngx_alloc(size, pool->log);
    if (p == NULL) {
        return NULL;
    }

    n = 0;

    for (large = pool->large; large; large = large->next) {
        if (large->alloc == NULL) {
            large->alloc = p;
            return p;
        }

        if (n++ > 3) {
            break;
        }
    }

    large = ngx_palloc_small(pool, sizeof(ngx_pool_large_t), 1);
    if (large == NULL) {
        ngx_free(p);
        return NULL;
    }

    large->alloc = p;
    large->next = pool->large;
    pool->large = large;

    return p;
}",213.0,249.0,1.0,1.0,37.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,void*
4411,34752,ngx_create_pool,1,ngx_create_pool,"ngx_pool_t ngx_create_pool (size_t,ngx_log_t*)",core\ngx_palloc.c,"ngx_pool_t *
ngx_create_pool(size_t size, ngx_log_t *log)
{
    ngx_pool_t  *p;

    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);
    if (p == NULL) {
        return NULL;
    }

    p->d.last = (u_char *) p + sizeof(ngx_pool_t);
    p->d.end = (u_char *) p + size;
    p->d.next = NULL;
    p->d.failed = 0;

    size = size - sizeof(ngx_pool_t);
    p->max = (size < NGX_MAX_ALLOC_FROM_POOL) ? size : NGX_MAX_ALLOC_FROM_POOL;

    p->current = p;
    p->chain = NULL;
    p->large = NULL;
    p->cleanup = NULL;
    p->log = log;

    return p;
}",18.0,43.0,1.0,1.0,26.0,36,10,35,7,7,0,2,2,0,0,,0,0,4,2,2,ngx_pool_t
4412,34852,ngx_destroy_pool,1,ngx_destroy_pool,void ngx_destroy_pool (ngx_pool_t*),core\ngx_palloc.c,"void
ngx_destroy_pool(ngx_pool_t *pool)
{
    ngx_pool_t          *p, *n;
    ngx_pool_large_t    *l;
    ngx_pool_cleanup_t  *c;

    for (c = pool->cleanup; c; c = c->next) {
        if (c->handler) {
            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool->log, 0,
                           ""run cleanup: %p"", c);
            c->handler(c->data);
        }
    }

#if (NGX_DEBUG)

    /*
     * we could allocate the pool->log from this pool
     * so we cannot use this log while free()ing the pool
     */

    for (l = pool->large; l; l = l->next) {
        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool->log, 0, ""free: %p"", l->alloc);
    }

    for (p = pool, n = pool->d.next; /* void */; p = n, n = n->d.next) {
        ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool->log, 0,
                       ""free: %p, unused: %uz"", p, p->d.end - p->d.last);

        if (n == NULL) {
            break;
        }
    }

#endif

    for (l = pool->large; l; l = l->next) {
        if (l->alloc) {
            ...",46.0,96.0,1.0,1.0,51.0,21,5,25,7,23,0,8,10,0,0,,0,0,2,1,1,void
4413,34951,ngx_reset_pool,1,ngx_reset_pool,void ngx_reset_pool (ngx_pool_t*),core\ngx_palloc.c,"void
ngx_reset_pool(ngx_pool_t *pool)
{
    ngx_pool_t        *p;
    ngx_pool_large_t  *l;

    for (l = pool->large; l; l = l->next) {
        if (l->alloc) {
            ngx_free(l->alloc);
        }
    }

    for (p = pool; p; p = p->d.next) {
        p->d.last = (u_char *) p + sizeof(ngx_pool_t);
        p->d.failed = 0;
    }

    pool->current = pool;
    pool->chain = NULL;
    pool->large = NULL;
}",99.0,119.0,1.0,1.0,21.0,20,6,18,5,0,0,4,5,0,0,,0,0,2,1,1,void
4414,35029,ngx_palloc,1,ngx_palloc,"void* ngx_palloc (ngx_pool_t*,size_t)",core\ngx_palloc.c,"void *
ngx_palloc(ngx_pool_t *pool, size_t size)
{
#if !(NGX_DEBUG_PALLOC)
    if (size <= pool->max) {
        return ngx_palloc_small(pool, size, 1);
    }
#endif

    return ngx_palloc_large(pool, size);
}",122.0,132.0,1.0,1.0,11.0,2,2,6,2,46,1,2,2,0,1,,0,0,4,2,2,void*
4415,35051,ngx_pnalloc,1,ngx_pnalloc,"void* ngx_pnalloc (ngx_pool_t*,size_t)",core\ngx_palloc.c,"void *
ngx_pnalloc(ngx_pool_t *pool, size_t size)
{
#if !(NGX_DEBUG_PALLOC)
    if (size <= pool->max) {
        return ngx_palloc_small(pool, size, 0);
    }
#endif

    return ngx_palloc_large(pool, size);
}",135.0,145.0,1.0,1.0,11.0,2,2,6,2,63,1,2,2,0,1,,0,0,4,2,2,void*
4416,35301,ngx_pmemalign,1,ngx_pmemalign,"void* ngx_pmemalign (ngx_pool_t*,size_t,size_t)",core\ngx_palloc.c,"void *
ngx_pmemalign(ngx_pool_t *pool, size_t size, size_t alignment)
{
    void              *p;
    ngx_pool_large_t  *large;

    p = ngx_memalign(alignment, size, pool->log);
    if (p == NULL) {
        return NULL;
    }

    large = ngx_palloc_small(pool, sizeof(ngx_pool_large_t), 1);
    if (large == NULL) {
        ngx_free(p);
        return NULL;
    }

    large->alloc = p;
    large->next = pool->large;
    pool->large = large;

    return p;
}",252.0,274.0,1.0,1.0,23.0,13,4,21,7,0,0,3,3,0,0,,0,0,6,3,3,void*
4417,35360,ngx_pfree,1,ngx_pfree,"ngx_int_t ngx_pfree (ngx_pool_t*,void*)",core\ngx_palloc.c,"ngx_int_t
ngx_pfree(ngx_pool_t *pool, void *p)
{
    ngx_pool_large_t  *l;

    for (l = pool->large; l; l = l->next) {
        if (p == l->alloc) {
            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool->log, 0,
                           ""free: %p"", l->alloc);
            ngx_free(l->alloc);
            l->alloc = NULL;

            return NGX_OK;
        }
    }

    return NGX_DECLINED;
}",277.0,294.0,1.0,1.0,18.0,9,3,13,7,4,0,3,4,0,0,,0,0,4,2,2,ngx_int_t
4418,35411,ngx_pcalloc,1,ngx_pcalloc,"void* ngx_pcalloc (ngx_pool_t*,size_t)",core\ngx_palloc.c,"void *
ngx_pcalloc(ngx_pool_t *pool, size_t size)
{
    void *p;

    p = ngx_palloc(pool, size);
    if (p) {
        ngx_memzero(p, size);
    }

    return p;
}",297.0,308.0,1.0,1.0,12.0,1,1,7,3,72,1,2,2,0,1,,0,1,4,2,2,void*
4419,35431,ngx_pool_cleanup_add,1,ngx_pool_cleanup_add,"ngx_pool_cleanup_t ngx_pool_cleanup_add (ngx_pool_t*,size_t)",core\ngx_palloc.c,"ngx_pool_cleanup_t *
ngx_pool_cleanup_add(ngx_pool_t *p, size_t size)
{
    ngx_pool_cleanup_t  *c;

    c = ngx_palloc(p, sizeof(ngx_pool_cleanup_t));
    if (c == NULL) {
        return NULL;
    }

    if (size) {
        c->data = ngx_palloc(p, size);
        if (c->data == NULL) {
            return NULL;
        }

    } else {
        c->data = NULL;
    }

    c->handler = NULL;
    c->next = p->cleanup;

    p->cleanup = c;

    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, p->log, 0, ""add cleanup: %p"", c);

    return c;
}",311.0,339.0,1.0,1.0,29.0,15,4,23,6,11,2,4,5,0,2,,0,2,4,2,2,ngx_pool_cleanup_t
4420,35504,ngx_pool_run_cleanup_file,1,ngx_pool_run_cleanup_file,"void ngx_pool_run_cleanup_file (ngx_pool_t*,ngx_fd_t)",core\ngx_palloc.c,"void
ngx_pool_run_cleanup_file(ngx_pool_t *p, ngx_fd_t fd)
{
    ngx_pool_cleanup_t       *c;
    ngx_pool_cleanup_file_t  *cf;

    for (c = p->cleanup; c; c = c->next) {
        if (c->handler == ngx_pool_cleanup_file) {

            cf = c->data;

            if (cf->fd == fd) {
                c->handler(cf);
                c->handler = NULL;
                return;
            }
        }
    }
}",342.0,360.0,1.0,1.0,19.0,11,3,12,5,0,1,4,7,1,0,,0,1,4,2,2,void
4421,35556,ngx_pool_cleanup_file,1,ngx_pool_cleanup_file,void ngx_pool_cleanup_file (void*),core\ngx_palloc.c,"void
ngx_pool_cleanup_file(void *data)
{
    ngx_pool_cleanup_file_t  *c = data;

    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, c->log, 0, ""file cleanup: fd:%d"",
                   c->fd);

    if (ngx_close_file(c->fd) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                      ngx_close_file_n "" \""%s\"" failed"", c->name);
    }
}",363.0,375.0,1.0,1.0,13.0,5,3,7,4,0,3,2,2,1,0,,0,3,2,1,1,void
4422,35584,ngx_pool_delete_file,1,ngx_pool_delete_file,void ngx_pool_delete_file (void*),core\ngx_palloc.c,"void
ngx_pool_delete_file(void *data)
{
    ngx_pool_cleanup_file_t  *c = data;

    ngx_err_t  err;

    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, c->log, 0, ""file cleanup: fd:%d %s"",
                   c->fd, c->name);

    if (ngx_delete_file(c->name) == NGX_FILE_ERROR) {
        err = ngx_errno;

        if (err != NGX_ENOENT) {
            ngx_log_error(NGX_LOG_CRIT, c->log, err,
                          ngx_delete_file_n "" \""%s\"" failed"", c->name);
        }
    }

    if (ngx_close_file(c->fd) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                      ngx_close_file_n "" \""%s\"" failed"", c->name);
    }
}",378.0,401.0,1.0,1.0,24.0,10,4,14,7,0,5,4,5,2,0,,0,5,2,1,1,void
4423,35642,ngx_pool_cleanup_pt,1,ngx_pool_cleanup_pt,void ngx_pool_cleanup_pt (void*),core\ngx_palloc.h,typedef void (*ngx_pool_cleanup_pt)(void *data);,30.0,30.0,14.0,47.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4424,35755,ngx_parse_size,1,ngx_parse_size,ssize_t ngx_parse_size (ngx_str_t*),core\ngx_parse.c,"ssize_t
ngx_parse_size(ngx_str_t *line)
{
    u_char   unit;
    size_t   len;
    ssize_t  size, scale, max;

    len = line->len;

    if (len == 0) {
        return NGX_ERROR;
    }

    unit = line->data[len - 1];

    switch (unit) {
    case 'K':
    case 'k':
        len--;
        max = NGX_MAX_SIZE_T_VALUE / 1024;
        scale = 1024;
        break;

    case 'M':
    case 'm':
        len--;
        max = NGX_MAX_SIZE_T_VALUE / (1024 * 1024);
        scale = 1024 * 1024;
        break;

    default:
        max = NGX_MAX_SIZE_T_VALUE;
        scale = 1;
    }

    size = ngx_atosz(line->data, len);
    if (size == NGX_ERROR || size > max) {
        return NGX_ERROR;
    }

    size *= scale;

    return size;
}",12.0,55.0,1.0,1.0,44.0,25,11,30,8,6,4,6,4,0,1,,0,4,2,1,1,ssize_t
4425,35853,ngx_parse_offset,1,ngx_parse_offset,off_t ngx_parse_offset (ngx_str_t*),core\ngx_parse.c,"off_t
ngx_parse_offset(ngx_str_t *line)
{
    u_char  unit;
    off_t   offset, scale, max;
    size_t  len;

    len = line->len;

    if (len == 0) {
        return NGX_ERROR;
    }

    unit = line->data[len - 1];

    switch (unit) {
    case 'K':
    case 'k':
        len--;
        max = NGX_MAX_OFF_T_VALUE / 1024;
        scale = 1024;
        break;

    case 'M':
    case 'm':
        len--;
        max = NGX_MAX_OFF_T_VALUE / (1024 * 1024);
        scale = 1024 * 1024;
        break;

    case 'G':
    case 'g':
        len--;
        max = NGX_MAX_OFF_T_VALUE / (1024 * 1024 * 1024);
        scale = 1024 * 1024 * 1024;
        break;

    default:
        max = NGX_MAX_OFF_T_VALUE;
        scale = 1;
    }

    offset = ngx_atoof(line->data, len);
    if (offset == NGX_ERROR || offset > max) {
        return NGX_ERROR;
    }

    offset *= scale;

    return offset;
}",58.0,108.0,1.0,1.0,51.0,33,11,34,8,1,4,7,4,0,1,,0,4,2,1,1,off_t
4426,35974,ngx_parse_time,1,ngx_parse_time,"ngx_int_t ngx_parse_time (ngx_str_t*,ngx_uint_t)",core\ngx_parse.c,"ngx_int_t
ngx_parse_time(ngx_str_t *line, ngx_uint_t is_sec)
{
    u_char      *p, *last;
    ngx_int_t    value, total, scale;
    ngx_int_t    max, cutoff, cutlim;
    ngx_uint_t   valid;
    enum {
        st_start = 0,
        st_year,
        st_month,
        st_week,
        st_day,
        st_hour,
        st_min,
        st_sec,
        st_msec,
        st_last
    } step;

    valid = 0;
    value = 0;
    total = 0;
    cutoff = NGX_MAX_INT_T_VALUE / 10;
    cutlim = NGX_MAX_INT_T_VALUE % 10;
    step = is_sec ? st_start : st_month;

    p = line->data;
    last = p + line->len;

    while (p < last) {

        if (*p >= '0' && *p <= '9') {
            if (value >= cutoff && (value > cutoff || *p - '0' > cutlim)) {
                return NGX_ERROR;
            }

            value = value * 10 + (*p++ - '0');
            valid = 1;
            continue;
        }

        switch (*p++) {

        case 'y':
            if (step > st_start) {
                return NGX_ERRO...",111.0,283.0,1.0,1.0,173.0,132,22,144,24,3,2,33,53,0,0,,0,2,4,2,2,ngx_int_t
4427,36463,ngx_parse_http_time,1,ngx_parse_http_time,"time_t ngx_parse_http_time (u_char*,size_t)",core\ngx_parse_time.c,"time_t
ngx_parse_http_time(u_char *value, size_t len)
{
    u_char      *p, *end;
    ngx_int_t    month;
    ngx_uint_t   day, year, hour, min, sec;
    uint64_t     time;
    enum {
        no = 0,
        rfc822,   /* Tue, 10 Nov 2002 23:50:13   */
        rfc850,   /* Tuesday, 10-Dec-02 23:50:13 */
        isoc      /* Tue Dec 10 23:50:13 2002    */
    } fmt;

    fmt = 0;
    end = value + len;

#if (NGX_SUPPRESS_WARN)
    day = 32;
    year = 2038;
#endif

    for (p = value; p < end; p++) {
        if (*p == ',') {
            break;
        }

        if (*p == ' ') {
            fmt = isoc;
            break;
        }
    }

    for (p++; p < end; p++) {
        if (*p != ' ') {
            break;
        }
    }

    if (end - p < 18) {
        return NGX_ERROR;
    }

    if (fmt != isoc) {
        if (*p < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {
            return NGX_ERROR;
        }

        day = (*p - '0') * 10 + (*(p + 1) - '0');
        p += 2;

  ...",14.0,277.0,1.0,1.0,264.0,328,21,173,16,1,0,46,52,0,0,,0,0,4,2,2,time_t
4428,37430,ngx_proxy_protocol_read_addr,1,ngx_proxy_protocol_read_addr,"u_char* ngx_proxy_protocol_read_addr (ngx_connection_t*,u_char*,u_char*,ngx_str_t*)",core\ngx_proxy_protocol.c,"static u_char *
ngx_proxy_protocol_read_addr(ngx_connection_t *c, u_char *p, u_char *last,
    ngx_str_t *addr)
{
    size_t  len;
    u_char  ch, *pos;

    pos = p;

    for ( ;; ) {
        if (p == last) {
            return NULL;
        }

        ch = *p++;

        if (ch == ' ') {
            break;
        }

        if (ch != ':' && ch != '.'
            && (ch < 'a' || ch > 'f')
            && (ch < 'A' || ch > 'F')
            && (ch < '0' || ch > '9'))
        {
            return NULL;
        }
    }

    len = p - pos - 1;

    addr->data = ngx_pnalloc(c->pool, len);
    if (addr->data == NULL) {
        return NULL;
    }

    ngx_memcpy(addr->data, pos, len);
    addr->len = len;

    return p;
}",149.0,189.0,1.0,1.0,41.0,0,0,0,0,2,0,1,1,0,0,,0,0,8,4,4,u_char
4429,37438,ngx_proxy_protocol_read_port,1,ngx_proxy_protocol_read_port,"u_char* ngx_proxy_protocol_read_port (u_char*,u_char*,in_port_t*,u_char)",core\ngx_proxy_protocol.c,"static u_char *
ngx_proxy_protocol_read_port(u_char *p, u_char *last, in_port_t *port,
    u_char sep)
{
    size_t      len;
    u_char     *pos;
    ngx_int_t   n;

    pos = p;

    for ( ;; ) {
        if (p == last) {
            return NULL;
        }

        if (*p++ == sep) {
            break;
        }
    }

    len = p - pos - 1;

    n = ngx_atoi(pos, len);
    if (n < 0 || n > 65535) {
        return NULL;
    }

    *port = (in_port_t) n;

    return p;
}",192.0,222.0,1.0,1.0,31.0,0,0,0,0,2,0,1,1,0,0,,0,0,8,4,4,u_char
4430,37446,ngx_proxy_protocol_v2_read,1,ngx_proxy_protocol_v2_read,"u_char* ngx_proxy_protocol_v2_read (ngx_connection_t*,u_char*,u_char*)",core\ngx_proxy_protocol.c,"static u_char *
ngx_proxy_protocol_v2_read(ngx_connection_t *c, u_char *buf, u_char *last)
{
    u_char                             *end;
    size_t                              len;
    socklen_t                           socklen;
    ngx_uint_t                          version, command, family, transport;
    ngx_sockaddr_t                      src_sockaddr, dst_sockaddr;
    ngx_proxy_protocol_t               *pp;
    ngx_proxy_protocol_header_t        *header;
    ngx_proxy_protocol_inet_addrs_t    *in;
#if (NGX_HAVE_INET6)
    ngx_proxy_protocol_inet6_addrs_t   *in6;
#endif

    header = (ngx_proxy_protocol_header_t *) buf;

    buf += sizeof(ngx_proxy_protocol_header_t);

    version = header->version_command >> 4;

    if (version != 2) {
        ngx_log_error(NGX_LOG_ERR, c->log, 0,
                      ""unknown PROXY protocol version: %ui"", version);
        return NULL;
    }

    len = ngx_proxy_protocol_parse_uint16(header->len);

    if ((size_t) (last - buf) < len) {
...",269.0,422.0,1.0,10.0,154.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,u_char
4431,37453,ngx_proxy_protocol_read,1,ngx_proxy_protocol_read,"u_char ngx_proxy_protocol_read (ngx_connection_t*,u_char*,u_char*)",core\ngx_proxy_protocol.c,"u_char *
ngx_proxy_protocol_read(ngx_connection_t *c, u_char *buf, u_char *last)
{
    size_t                 len;
    u_char                *p;
    ngx_proxy_protocol_t  *pp;

    static const u_char signature[] = ""\r\n\r\n\0\r\nQUIT\n"";

    p = buf;
    len = last - buf;

    if (len >= sizeof(ngx_proxy_protocol_header_t)
        && memcmp(p, signature, sizeof(signature) - 1) == 0)
    {
        return ngx_proxy_protocol_v2_read(c, buf, last);
    }

    if (len < 8 || ngx_strncmp(p, ""PROXY "", 6) != 0) {
        goto invalid;
    }

    p += 6;
    len -= 6;

    if (len >= 7 && ngx_strncmp(p, ""UNKNOWN"", 7) == 0) {
        ngx_log_debug0(NGX_LOG_DEBUG_CORE, c->log, 0,
                       ""PROXY protocol unknown protocol"");
        p += 7;
        goto skip;
    }

    if (len < 5 || ngx_strncmp(p, ""TCP"", 3) != 0
        || (p[3] != '4' && p[3] != '6') || p[4] != ' ')
    {
        goto invalid;
    }

    p += 5;

    pp = ngx_pcalloc(c->pool, sizeof(ngx_proxy_protocol_t));
  ...",51.0,146.0,1.0,1.0,96.0,76,17,88,14,0,8,23,15,1,7,,0,6,6,3,3,u_char
4432,37907,ngx_proxy_protocol_write,1,ngx_proxy_protocol_write,"u_char ngx_proxy_protocol_write (ngx_connection_t*,u_char*,u_char*)",core\ngx_proxy_protocol.c,"u_char *
ngx_proxy_protocol_write(ngx_connection_t *c, u_char *buf, u_char *last)
{
    ngx_uint_t  port, lport;

    if (last - buf < NGX_PROXY_PROTOCOL_MAX_HEADER) {
        return NULL;
    }

    if (ngx_connection_local_sockaddr(c, NULL, 0) != NGX_OK) {
        return NULL;
    }

    switch (c->sockaddr->sa_family) {

    case AF_INET:
        buf = ngx_cpymem(buf, ""PROXY TCP4 "", sizeof(""PROXY TCP4 "") - 1);
        break;

#if (NGX_HAVE_INET6)
    case AF_INET6:
        buf = ngx_cpymem(buf, ""PROXY TCP6 "", sizeof(""PROXY TCP6 "") - 1);
        break;
#endif

    default:
        return ngx_cpymem(buf, ""PROXY UNKNOWN"" CRLF,
                          sizeof(""PROXY UNKNOWN"" CRLF) - 1);
    }

    buf += ngx_sock_ntop(c->sockaddr, c->socklen, buf, last - buf, 0);

    *buf++ = ' ';

    buf += ngx_sock_ntop(c->local_sockaddr, c->local_socklen, buf, last - buf,
                         0);

    port = ngx_inet_get_port(c->sockaddr);
    lport = ngx_inet_get_port(c->local_sockaddr);

...",225.0,266.0,1.0,1.0,42.0,23,9,29,9,0,5,5,4,1,5,,0,3,6,3,3,u_char
4433,38459,ngx_queue_middle,1,ngx_queue_middle,ngx_queue_t ngx_queue_middle (ngx_queue_t*),core\ngx_queue.c,"ngx_queue_t *
ngx_queue_middle(ngx_queue_t *queue)
{
    ngx_queue_t  *middle, *next;

    middle = ngx_queue_head(queue);

    if (middle == ngx_queue_last(queue)) {
        return middle;
    }

    next = ngx_queue_head(queue);

    for ( ;; ) {
        middle = ngx_queue_next(middle);

        next = ngx_queue_next(next);

        if (next == ngx_queue_last(queue)) {
            return middle;
        }

        next = ngx_queue_next(next);

        if (next == ngx_queue_last(queue)) {
            return middle;
        }
    }
}",17.0,45.0,1.0,1.0,29.0,8,2,19,3,0,0,5,7,0,0,,0,0,2,1,1,ngx_queue_t
4434,38513,ngx_queue_sort,1,ngx_queue_sort,"void ngx_queue_sort (ngx_queue_t*,ngx_int_t)",core\ngx_queue.c,"void
ngx_queue_sort(ngx_queue_t *queue,
    ngx_int_t (*cmp)(const ngx_queue_t *, const ngx_queue_t *))
{
    ngx_queue_t  *q, *prev, *next;

    q = ngx_queue_head(queue);

    if (q == ngx_queue_last(queue)) {
        return;
    }

    for (q = ngx_queue_next(q); q != ngx_queue_sentinel(queue); q = next) {

        prev = ngx_queue_prev(q);
        next = ngx_queue_next(q);

        ngx_queue_remove(q);

        do {
            if (cmp(prev, q) <= 0) {
                break;
            }

            prev = ngx_queue_prev(prev);

        } while (prev != ngx_queue_sentinel(queue));

        ngx_queue_insert_after(prev, q);
    }
}",50.0,80.0,1.0,1.0,31.0,9,4,21,4,0,0,6,8,0,0,,0,0,4,2,2,void
4435,38612,ngx_radix_alloc,1,ngx_radix_alloc,ngx_radix_node_t* ngx_radix_alloc (ngx_radix_tree_t*),core\ngx_radix_tree.c,"static ngx_radix_node_t *
ngx_radix_alloc(ngx_radix_tree_t *tree)
{
    ngx_radix_node_t  *p;

    if (tree->free) {
        p = tree->free;
        tree->free = tree->free->right;
        return p;
    }

    if (tree->size < sizeof(ngx_radix_node_t)) {
        tree->start = ngx_pmemalign(tree->pool, ngx_pagesize, ngx_pagesize);
        if (tree->start == NULL) {
            return NULL;
        }

        tree->size = ngx_pagesize;
    }

    p = (ngx_radix_node_t *) tree->start;
    tree->start += sizeof(ngx_radix_node_t);
    tree->size -= sizeof(ngx_radix_node_t);

    return p;
}",463.0,488.0,1.0,1.0,26.0,0,0,0,0,2,0,1,1,0,0,,0,0,2,1,1,ngx_radix_node_t
4436,38617,ngx_radix_tree_create,1,ngx_radix_tree_create,"ngx_radix_tree_t ngx_radix_tree_create (ngx_pool_t*,ngx_int_t)",core\ngx_radix_tree.c,"ngx_radix_tree_t *
ngx_radix_tree_create(ngx_pool_t *pool, ngx_int_t preallocate)
{
    uint32_t           key, mask, inc;
    ngx_radix_tree_t  *tree;

    tree = ngx_palloc(pool, sizeof(ngx_radix_tree_t));
    if (tree == NULL) {
        return NULL;
    }

    tree->pool = pool;
    tree->free = NULL;
    tree->start = NULL;
    tree->size = 0;

    tree->root = ngx_radix_alloc(tree);
    if (tree->root == NULL) {
        return NULL;
    }

    tree->root->right = NULL;
    tree->root->left = NULL;
    tree->root->parent = NULL;
    tree->root->value = NGX_RADIX_NO_VALUE;

    if (preallocate == 0) {
        return tree;
    }

    /*
     * Preallocation of first nodes : 0, 1, 00, 01, 10, 11, 000, 001, etc.
     * increases TLB hits even if for first lookup iterations.
     * On 32-bit platforms the 7 preallocated bits takes continuous 4K,
     * 8 - 8K, 9 - 16K, etc.  On 64-bit platforms the 6 preallocated bits
     * takes continuous 4K, 7 - 8K, 8 - 16K, etc.  There is no sen...",15.0,105.0,1.0,1.0,91.0,41,9,51,12,0,13,11,13,2,3,,0,13,4,2,2,ngx_radix_tree_t
4437,38779,ngx_radix32tree_insert,1,ngx_radix32tree_insert,"ngx_int_t ngx_radix32tree_insert (ngx_radix_tree_t*,uint32_t,uint32_t,uintptr_t)",core\ngx_radix_tree.c,"ngx_int_t
ngx_radix32tree_insert(ngx_radix_tree_t *tree, uint32_t key, uint32_t mask,
    uintptr_t value)
{
    uint32_t           bit;
    ngx_radix_node_t  *node, *next;

    bit = 0x80000000;

    node = tree->root;
    next = tree->root;

    while (bit & mask) {
        if (key & bit) {
            next = node->right;

        } else {
            next = node->left;
        }

        if (next == NULL) {
            break;
        }

        bit >>= 1;
        node = next;
    }

    if (next) {
        if (node->value != NGX_RADIX_NO_VALUE) {
            return NGX_BUSY;
        }

        node->value = value;
        return NGX_OK;
    }

    while (bit & mask) {
        next = ngx_radix_alloc(tree);
        if (next == NULL) {
            return NGX_ERROR;
        }

        next->right = NULL;
        next->left = NULL;
        next->parent = node;
        next->value = NGX_RADIX_NO_VALUE;

        if (key & bit) {
            node->right = next;

        } else {
        ...",108.0,170.0,1.0,1.0,63.0,32,5,48,12,1,3,10,14,0,1,,0,3,8,4,4,ngx_int_t
4438,38922,ngx_radix32tree_delete,1,ngx_radix32tree_delete,"ngx_int_t ngx_radix32tree_delete (ngx_radix_tree_t*,uint32_t,uint32_t)",core\ngx_radix_tree.c,"ngx_int_t
ngx_radix32tree_delete(ngx_radix_tree_t *tree, uint32_t key, uint32_t mask)
{
    uint32_t           bit;
    ngx_radix_node_t  *node;

    bit = 0x80000000;
    node = tree->root;

    while (node && (bit & mask)) {
        if (key & bit) {
            node = node->right;

        } else {
            node = node->left;
        }

        bit >>= 1;
    }

    if (node == NULL) {
        return NGX_ERROR;
    }

    if (node->right || node->left) {
        if (node->value != NGX_RADIX_NO_VALUE) {
            node->value = NGX_RADIX_NO_VALUE;
            return NGX_OK;
        }

        return NGX_ERROR;
    }

    for ( ;; ) {
        if (node->parent->right == node) {
            node->parent->right = NULL;

        } else {
            node->parent->left = NULL;
        }

        node->right = tree->free;
        tree->free = node;

        node = node->parent;

        if (node->right || node->left) {
            break;
        }

        if (node->value != NGX_RADIX...",173.0,233.0,1.0,1.0,61.0,36,7,39,9,0,3,14,17,0,0,,0,3,6,3,3,ngx_int_t
4439,39071,ngx_radix32tree_find,1,ngx_radix32tree_find,"uintptr_t ngx_radix32tree_find (ngx_radix_tree_t*,uint32_t)",core\ngx_radix_tree.c,"uintptr_t
ngx_radix32tree_find(ngx_radix_tree_t *tree, uint32_t key)
{
    uint32_t           bit;
    uintptr_t          value;
    ngx_radix_node_t  *node;

    bit = 0x80000000;
    value = NGX_RADIX_NO_VALUE;
    node = tree->root;

    while (node) {
        if (node->value != NGX_RADIX_NO_VALUE) {
            value = node->value;
        }

        if (key & bit) {
            node = node->right;

        } else {
            node = node->left;
        }

        bit >>= 1;
    }

    return value;
}",236.0,263.0,1.0,1.0,28.0,11,4,16,6,4,1,4,6,0,0,,0,1,4,2,2,uintptr_t
4440,39269,ngx_rbtree_insert,1,ngx_rbtree_insert,"void ngx_rbtree_insert (ngx_rbtree_t*,ngx_rbtree_node_t*)",core\ngx_rbtree.c,"void
ngx_rbtree_insert(ngx_rbtree_t *tree, ngx_rbtree_node_t *node)
{
    ngx_rbtree_node_t  **root, *temp, *sentinel;

    /* a binary tree insert */

    root = &tree->root;
    sentinel = tree->sentinel;

    if (*root == sentinel) {
        node->parent = NULL;
        node->left = sentinel;
        node->right = sentinel;
        ngx_rbt_black(node);
        *root = node;

        return;
    }

    tree->insert(*root, node, sentinel);

    /* re-balance tree */

    while (node != *root && ngx_rbt_is_red(node->parent)) {

        if (node->parent == node->parent->parent->left) {
            temp = node->parent->parent->right;

            if (ngx_rbt_is_red(temp)) {
                ngx_rbt_black(node->parent);
                ngx_rbt_black(temp);
                ngx_rbt_red(node->parent->parent);
                node = node->parent->parent;

            } else {
                if (node == node->parent->right) {
                    node = node->parent;
                    ngx_...",24.0,93.0,1.0,1.0,70.0,37,7,33,6,3,0,5,8,0,0,,0,0,4,2,2,void
4441,39494,ngx_rbtree_insert_value,1,ngx_rbtree_insert_value,"void ngx_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",core\ngx_rbtree.c,"void
ngx_rbtree_insert_value(ngx_rbtree_node_t *temp, ngx_rbtree_node_t *node,
    ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t  **p;

    for ( ;; ) {

        p = (node->key < temp->key) ? &temp->left : &temp->right;

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",96.0,118.0,1.0,1.0,23.0,21,7,18,4,0,0,4,4,0,0,,0,0,6,3,3,void
4442,39555,ngx_rbtree_insert_timer_value,1,ngx_rbtree_insert_timer_value,"void ngx_rbtree_insert_timer_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",core\ngx_rbtree.c,"void
ngx_rbtree_insert_timer_value(ngx_rbtree_node_t *temp, ngx_rbtree_node_t *node,
    ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t  **p;

    for ( ;; ) {

        /*
         * Timer values
         * 1) are spread in small range, usually several minutes,
         * 2) and overflow each 49 days, if milliseconds are stored in 32 bits.
         * The comparison takes into account that overflow.
         */

        /*  node->key < temp->key */

        p = ((ngx_rbtree_key_int_t) (node->key - temp->key) < 0)
            ? &temp->left : &temp->right;

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",121.0,153.0,1.0,1.0,33.0,22,8,18,4,0,0,4,4,0,0,,0,0,6,3,3,void
4443,39619,ngx_rbtree_delete,1,ngx_rbtree_delete,"void ngx_rbtree_delete (ngx_rbtree_t*,ngx_rbtree_node_t*)",core\ngx_rbtree.c,"void
ngx_rbtree_delete(ngx_rbtree_t *tree, ngx_rbtree_node_t *node)
{
    ngx_uint_t           red;
    ngx_rbtree_node_t  **root, *sentinel, *subst, *temp, *w;

    /* a binary tree delete */

    root = &tree->root;
    sentinel = tree->sentinel;

    if (node->left == sentinel) {
        temp = node->right;
        subst = node;

    } else if (node->right == sentinel) {
        temp = node->left;
        subst = node;

    } else {
        subst = ngx_rbtree_min(node->right, sentinel);
        temp = subst->right;
    }

    if (subst == *root) {
        *root = temp;
        ngx_rbt_black(temp);

        /* DEBUG stuff */
        node->left = NULL;
        node->right = NULL;
        node->parent = NULL;
        node->key = 0;

        return;
    }

    red = ngx_rbt_is_red(subst);

    if (subst == subst->parent->left) {
        subst->parent->left = temp;

    } else {
        subst->parent->right = temp;
    }

    if (subst == node) {

        temp->parent = subst->parent;...",156.0,315.0,1.0,1.0,160.0,60,7,61,9,4,0,10,15,0,0,,0,0,4,2,2,void
4444,40114,ngx_rbtree_next,1,ngx_rbtree_next,"ngx_rbtree_node_t ngx_rbtree_next (ngx_rbtree_t*,ngx_rbtree_node_t*)",core\ngx_rbtree.c,"ngx_rbtree_node_t *
ngx_rbtree_next(ngx_rbtree_t *tree, ngx_rbtree_node_t *node)
{
    ngx_rbtree_node_t  *root, *sentinel, *parent;

    sentinel = tree->sentinel;

    if (node->right != sentinel) {
        return ngx_rbtree_min(node->right, sentinel);
    }

    root = tree->root;

    for ( ;; ) {
        parent = node->parent;

        if (node == root) {
            return NULL;
        }

        if (node == parent->left) {
            return parent;
        }

        node = parent;
    }
}",378.0,404.0,1.0,1.0,27.0,13,4,18,6,0,0,5,7,0,0,,0,0,4,2,2,ngx_rbtree_node_t
4445,40195,ngx_rbtree_insert_pt,1,ngx_rbtree_insert_pt,"void ngx_rbtree_insert_pt (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",core\ngx_rbtree.h,"typedef void (*ngx_rbtree_insert_pt) (ngx_rbtree_node_t *root,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel);",34.0,35.0,14.0,57.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4446,40253,ngx_regex_module_init,1,ngx_regex_module_init,ngx_int_t ngx_regex_module_init (ngx_cycle_t*),core\ngx_regex.c,"static ngx_int_t
ngx_regex_module_init(ngx_cycle_t *cycle)
{
    int               opt;
    const char       *errstr;
    ngx_uint_t        i;
    ngx_list_part_t  *part;
    ngx_regex_elt_t  *elts;

    opt = 0;

#if (NGX_HAVE_PCRE_JIT)
    {
    ngx_regex_conf_t    *rcf;
    ngx_pool_cleanup_t  *cln;

    rcf = (ngx_regex_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_regex_module);

    if (rcf->pcre_jit) {
        opt = PCRE_STUDY_JIT_COMPILE;

        /*
         * The PCRE JIT compiler uses mmap for its executable codes, so we
         * have to explicitly call the pcre_free_study() function to free
         * this memory.
         */

        cln = ngx_pool_cleanup_add(cycle->pool, 0);
        if (cln == NULL) {
            return NGX_ERROR;
        }

        cln->handler = ngx_pcre_free_studies;
        cln->data = ngx_pcre_studies;
    }
    }
#endif

    ngx_regex_malloc_init(cycle->pool);

    part = &ngx_pcre_studies->part;
    elts = part->elts;

    for (i = 0; /* void *...",286.0,371.0,1.0,1.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4447,40258,ngx_regex_create_conf,1,ngx_regex_create_conf,void* ngx_regex_create_conf (ngx_cycle_t*),core\ngx_regex.c,"static void *
ngx_regex_create_conf(ngx_cycle_t *cycle)
{
    ngx_regex_conf_t  *rcf;

    rcf = ngx_pcalloc(cycle->pool, sizeof(ngx_regex_conf_t));
    if (rcf == NULL) {
        return NULL;
    }

    rcf->pcre_jit = NGX_CONF_UNSET;

    ngx_pcre_studies = ngx_list_create(cycle->pool, 8, sizeof(ngx_regex_elt_t));
    if (ngx_pcre_studies == NULL) {
        return NULL;
    }

    return rcf;
}",374.0,392.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4448,40263,ngx_regex_init_conf,1,ngx_regex_init_conf,"char* ngx_regex_init_conf (ngx_cycle_t*,void*)",core\ngx_regex.c,"static char *
ngx_regex_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_regex_conf_t *rcf = conf;

    ngx_conf_init_value(rcf->pcre_jit, 0);

    return NGX_CONF_OK;
}",395.0,403.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4449,40269,ngx_regex_pcre_jit,1,ngx_regex_pcre_jit,"char* ngx_regex_pcre_jit (ngx_conf_t*,void*,void*)",core\ngx_regex.c,"static char *
ngx_regex_pcre_jit(ngx_conf_t *cf, void *post, void *data)
{
    ngx_flag_t  *fp = data;

    if (*fp == 0) {
        return NGX_CONF_OK;
    }

#if (NGX_HAVE_PCRE_JIT)
    {
    int  jit, r;

    jit = 0;
    r = pcre_config(PCRE_CONFIG_JIT, &jit);

    if (r != 0 || jit != 1) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""PCRE library does not support JIT"");
        *fp = 0;
    }
    }
#else
    ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                       ""nginx was built without PCRE JIT support"");
    *fp = 0;
#endif

    return NGX_CONF_OK;
}",406.0,435.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4450,40328,ngx_regex_init,1,ngx_regex_init,void ngx_regex_init (void),core\ngx_regex.c,"void
ngx_regex_init(void)
{
    pcre_malloc = ngx_regex_malloc;
    pcre_free = ngx_regex_free;
}",72.0,77.0,1.0,1.0,6.0,2,1,2,2,0,0,1,1,0,0,,0,0,2,1,1,void
4451,40341,ngx_regex_compile,1,ngx_regex_compile,ngx_int_t ngx_regex_compile (ngx_regex_compile_t*),core\ngx_regex.c,"ngx_int_t
ngx_regex_compile(ngx_regex_compile_t *rc)
{
    int               n, erroff;
    char             *p;
    pcre             *re;
    const char       *errstr;
    ngx_regex_elt_t  *elt;

    ngx_regex_malloc_init(rc->pool);

    re = pcre_compile((const char *) rc->pattern.data, (int) rc->options,
                      &errstr, &erroff, NULL);

    /* ensure that there is no current pool */
    ngx_regex_malloc_done();

    if (re == NULL) {
        if ((size_t) erroff == rc->pattern.len) {
           rc->err.len = ngx_snprintf(rc->err.data, rc->err.len,
                              ""pcre_compile() failed: %s in \""%V\"""",
                               errstr, &rc->pattern)
                      - rc->err.data;

        } else {
           rc->err.len = ngx_snprintf(rc->err.data, rc->err.len,
                              ""pcre_compile() failed: %s in \""%V\"" at \""%s\"""",
                               errstr, &rc->pattern, rc->pattern.data + erroff)
                      - ...",94.0,194.0,1.0,1.0,101.0,93,10,82,16,0,40,18,14,5,5,,0,40,2,1,1,ngx_int_t
4452,40677,ngx_regex_exec_array,1,ngx_regex_exec_array,"ngx_int_t ngx_regex_exec_array (ngx_array_t*,ngx_str_t*,ngx_log_t*)",core\ngx_regex.c,"ngx_int_t
ngx_regex_exec_array(ngx_array_t *a, ngx_str_t *s, ngx_log_t *log)
{
    ngx_int_t         n;
    ngx_uint_t        i;
    ngx_regex_elt_t  *re;

    re = a->elts;

    for (i = 0; i < a->nelts; i++) {

        n = ngx_regex_exec(re[i].regex, s, NULL, 0);

        if (n == NGX_REGEX_NO_MATCHED) {
            continue;
        }

        if (n < 0) {
            ngx_log_error(NGX_LOG_ALERT, log, 0,
                          ngx_regex_exec_n "" failed: %i on \""%V\"" using \""%s\"""",
                          n, s, re[i].name);
            return NGX_ERROR;
        }

        /* match */

        return NGX_OK;
    }

    return NGX_DECLINED;
}",197.0,227.0,1.0,1.0,31.0,10,6,16,10,0,2,5,6,1,0,,0,2,6,3,3,ngx_int_t
4453,40736,ngx_regex_malloc,1,ngx_regex_malloc,ANY ngx_regex_malloc (size_t),core\ngx_regex.c,"ngx_regex_malloc(size_t size)
{
    ngx_pool_t      *pool;
    pool = ngx_pcre_pool;

    if (pool) {
        return ngx_palloc(pool, size);
    }

    return NULL;
}",231.0,241.0,1.0,1.0,11.0,1,1,6,4,0,2,2,2,0,1,,0,1,2,1,1,ANY
4454,40756,ngx_regex_free,1,ngx_regex_free,ANY ngx_regex_free (void*),core\ngx_regex.c,"ngx_regex_free(void *p)
{
    return;
}",245.0,248.0,1.0,1.0,4.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ANY
4455,41053,ngx_udp_connect,1,ngx_udp_connect,ngx_int_t ngx_udp_connect (ngx_resolver_connection_t*),core\ngx_resolver.c,"static ngx_int_t
ngx_udp_connect(ngx_resolver_connection_t *rec)
{
    int                rc;
    ngx_int_t          event;
    ngx_event_t       *rev, *wev;
    ngx_socket_t       s;
    ngx_connection_t  *c;

    s = ngx_socket(rec->sockaddr->sa_family, SOCK_DGRAM, 0);

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, &rec->log, 0, ""UDP socket %d"", s);

    if (s == (ngx_socket_t) -1) {
        ngx_log_error(NGX_LOG_ALERT, &rec->log, ngx_socket_errno,
                      ngx_socket_n "" failed"");
        return NGX_ERROR;
    }

    c = ngx_get_connection(s, &rec->log);

    if (c == NULL) {
        if (ngx_close_socket(s) == -1) {
            ngx_log_error(NGX_LOG_ALERT, &rec->log, ngx_socket_errno,
                          ngx_close_socket_n "" failed"");
        }

        return NGX_ERROR;
    }

    if (ngx_nonblocking(s) == -1) {
        ngx_log_error(NGX_LOG_ALERT, &rec->log, ngx_socket_errno,
                      ngx_nonblocking_n "" failed"");

        goto failed;
    }

    rev =...",4422.0,4505.0,1.0,1.0,84.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4456,41058,ngx_tcp_connect,1,ngx_tcp_connect,ngx_int_t ngx_tcp_connect (ngx_resolver_connection_t*),core\ngx_resolver.c,"static ngx_int_t
ngx_tcp_connect(ngx_resolver_connection_t *rec)
{
    int                rc;
    ngx_int_t          event;
    ngx_err_t          err;
    ngx_uint_t         level;
    ngx_socket_t       s;
    ngx_event_t       *rev, *wev;
    ngx_connection_t  *c;

    s = ngx_socket(rec->sockaddr->sa_family, SOCK_STREAM, 0);

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, &rec->log, 0, ""TCP socket %d"", s);

    if (s == (ngx_socket_t) -1) {
        ngx_log_error(NGX_LOG_ALERT, &rec->log, ngx_socket_errno,
                      ngx_socket_n "" failed"");
        return NGX_ERROR;
    }

    c = ngx_get_connection(s, &rec->log);

    if (c == NULL) {
        if (ngx_close_socket(s) == -1) {
            ngx_log_error(NGX_LOG_ALERT, &rec->log, ngx_socket_errno,
                          ngx_close_socket_n "" failed"");
        }

        return NGX_ERROR;
    }

    if (ngx_nonblocking(s) == -1) {
        ngx_log_error(NGX_LOG_ALERT, &rec->log, ngx_socket_errno,
                      ngx_nonbl...",4508.0,4690.0,1.0,1.0,183.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4457,41063,ngx_resolver_cleanup,1,ngx_resolver_cleanup,void ngx_resolver_cleanup (void*),core\ngx_resolver.c,"static void
ngx_resolver_cleanup(void *data)
{
    ngx_resolver_t  *r = data;

    ngx_uint_t                  i;
    ngx_resolver_connection_t  *rec;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, ngx_cycle->log, 0, ""cleanup resolver"");

    ngx_resolver_cleanup_tree(r, &r->name_rbtree);

    ngx_resolver_cleanup_tree(r, &r->srv_rbtree);

    ngx_resolver_cleanup_tree(r, &r->addr_rbtree);

#if (NGX_HAVE_INET6)
    ngx_resolver_cleanup_tree(r, &r->addr6_rbtree);
#endif

    if (r->event->timer_set) {
        ngx_del_timer(r->event);
    }

    rec = r->connections.elts;

    for (i = 0; i < r->connections.nelts; i++) {
        if (rec[i].udp) {
            ngx_close_connection(rec[i].udp);
        }

        if (rec[i].tcp) {
            ngx_close_connection(rec[i].tcp);
        }

        if (rec[i].read_buf) {
            ngx_resolver_free(r, rec[i].read_buf->start);
            ngx_resolver_free(r, rec[i].read_buf);
        }

        if (rec[i].write_buf) {
            ngx_resolver_fre...",285.0,330.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4458,41068,ngx_resolver_cleanup_tree,1,ngx_resolver_cleanup_tree,"void ngx_resolver_cleanup_tree (ngx_resolver_t*,ngx_rbtree_t*)",core\ngx_resolver.c,"static void
ngx_resolver_cleanup_tree(ngx_resolver_t *r, ngx_rbtree_t *tree)
{
    ngx_resolver_ctx_t   *ctx, *next;
    ngx_resolver_node_t  *rn;

    while (tree->root != tree->sentinel) {

        rn = ngx_resolver_node(ngx_rbtree_min(tree->root, tree->sentinel));

        ngx_queue_remove(&rn->queue);

        for (ctx = rn->waiting; ctx; ctx = next) {
            next = ctx->next;

            if (ctx->event) {
                if (ctx->event->timer_set) {
                    ngx_del_timer(ctx->event);
                }

                ngx_resolver_free(r, ctx->event);
            }

            ngx_resolver_free(r, ctx);
        }

        ngx_rbtree_delete(tree, &rn->node);

        ngx_resolver_free_node(r, rn);
    }
}",333.0,363.0,1.0,13.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4459,41074,ngx_resolve_name_locked,1,ngx_resolve_name_locked,"ngx_int_t ngx_resolve_name_locked (ngx_resolver_t*,ngx_resolver_ctx_t*,ngx_str_t*)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolve_name_locked(ngx_resolver_t *r, ngx_resolver_ctx_t *ctx,
    ngx_str_t *name)
{
    uint32_t              hash;
    ngx_int_t             rc;
    ngx_str_t             cname;
    ngx_uint_t            i, naddrs;
    ngx_queue_t          *resend_queue, *expire_queue;
    ngx_rbtree_t         *tree;
    ngx_resolver_ctx_t   *next, *last;
    ngx_resolver_addr_t  *addrs;
    ngx_resolver_node_t  *rn;

    ngx_strlow(name->data, name->data, name->len);

    hash = ngx_crc32_short(name->data, name->len);

    if (ctx->service.len) {
        rn = ngx_resolver_lookup_srv(r, name, hash);

        tree = &r->srv_rbtree;
        resend_queue = &r->srv_resend_queue;
        expire_queue = &r->srv_expire_queue;

    } else {
        rn = ngx_resolver_lookup_name(r, name, hash);

        tree = &r->name_rbtree;
        resend_queue = &r->name_resend_queue;
        expire_queue = &r->name_expire_queue;
    }

    if (rn) {

        /* ctx can be a list after NGX_RESOLV...",578.0,900.0,1.0,1.0,323.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4460,41081,ngx_resolver_expire,1,ngx_resolver_expire,"void ngx_resolver_expire (ngx_resolver_t*,ngx_rbtree_t*,ngx_queue_t*)",core\ngx_resolver.c,"static void
ngx_resolver_expire(ngx_resolver_t *r, ngx_rbtree_t *tree, ngx_queue_t *queue)
{
    time_t                now;
    ngx_uint_t            i;
    ngx_queue_t          *q;
    ngx_resolver_node_t  *rn;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, r->log, 0, ""resolver expire"");

    now = ngx_time();

    for (i = 0; i < 2; i++) {
        if (ngx_queue_empty(queue)) {
            return;
        }

        q = ngx_queue_last(queue);

        rn = ngx_queue_data(q, ngx_resolver_node_t, queue);

        if (now <= rn->expire) {
            return;
        }

        ngx_log_debug2(NGX_LOG_DEBUG_CORE, r->log, 0,
                       ""resolver expire \""%*s\"""", (size_t) rn->nlen, rn->name);

        ngx_queue_remove(q);

        ngx_rbtree_delete(tree, &rn->node);

        ngx_resolver_free_node(r, rn);
    }
}",1213.0,1247.0,1.0,1.0,35.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,void
4461,41088,ngx_resolver_send_query,1,ngx_resolver_send_query,"ngx_int_t ngx_resolver_send_query (ngx_resolver_t*,ngx_resolver_node_t*)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_send_query(ngx_resolver_t *r, ngx_resolver_node_t *rn)
{
    ngx_int_t                   rc;
    ngx_resolver_connection_t  *rec;

    rec = r->connections.elts;
    rec = &rec[rn->last_connection];

    if (rec->log.handler == NULL) {
        rec->log = *r->log;
        rec->log.handler = ngx_resolver_log_error;
        rec->log.data = rec;
        rec->log.action = ""resolving"";
    }

    if (rn->naddrs == (u_short) -1) {
        rc = rn->tcp ? ngx_resolver_send_tcp_query(r, rec, rn->query, rn->qlen)
                     : ngx_resolver_send_udp_query(r, rec, rn->query, rn->qlen);

        if (rc != NGX_OK) {
            return rc;
        }
    }

#if (NGX_HAVE_INET6)

    if (rn->query6 && rn->naddrs6 == (u_short) -1) {
        rc = rn->tcp6
                    ? ngx_resolver_send_tcp_query(r, rec, rn->query6, rn->qlen)
                    : ngx_resolver_send_udp_query(r, rec, rn->query6, rn->qlen);

        if (rc != NGX_OK) {
            return rc;...",1250.0,1290.0,1.0,1.0,41.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4462,41094,ngx_resolver_send_udp_query,1,ngx_resolver_send_udp_query,"ngx_int_t ngx_resolver_send_udp_query (ngx_resolver_t*,ngx_resolver_connection_t*,u_char*,u_short)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_send_udp_query(ngx_resolver_t *r, ngx_resolver_connection_t  *rec,
    u_char *query, u_short qlen)
{
    ssize_t  n;

    if (rec->udp == NULL) {
        if (ngx_udp_connect(rec) != NGX_OK) {
            return NGX_ERROR;
        }

        rec->udp->data = rec;
        rec->udp->read->handler = ngx_resolver_udp_read;
        rec->udp->read->resolver = 1;
    }

    n = ngx_send(rec->udp, query, qlen);

    if (n == NGX_ERROR) {
        goto failed;
    }

    if ((size_t) n != (size_t) qlen) {
        ngx_log_error(NGX_LOG_CRIT, &rec->log, 0, ""send() incomplete"");
        goto failed;
    }

    return NGX_OK;

failed:

    ngx_close_connection(rec->udp);
    rec->udp = NULL;

    return NGX_ERROR;
}",1293.0,1328.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
4463,41102,ngx_resolver_send_tcp_query,1,ngx_resolver_send_tcp_query,"ngx_int_t ngx_resolver_send_tcp_query (ngx_resolver_t*,ngx_resolver_connection_t*,u_char*,u_short)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_send_tcp_query(ngx_resolver_t *r, ngx_resolver_connection_t *rec,
    u_char *query, u_short qlen)
{
    ngx_buf_t  *b;
    ngx_int_t   rc;

    rc = NGX_OK;

    if (rec->tcp == NULL) {
        b = rec->read_buf;

        if (b == NULL) {
            b = ngx_resolver_calloc(r, sizeof(ngx_buf_t));
            if (b == NULL) {
                return NGX_ERROR;
            }

            b->start = ngx_resolver_alloc(r, NGX_RESOLVER_TCP_RSIZE);
            if (b->start == NULL) {
                ngx_resolver_free(r, b);
                return NGX_ERROR;
            }

            b->end = b->start + NGX_RESOLVER_TCP_RSIZE;

            rec->read_buf = b;
        }

        b->pos = b->start;
        b->last = b->start;

        b = rec->write_buf;

        if (b == NULL) {
            b = ngx_resolver_calloc(r, sizeof(ngx_buf_t));
            if (b == NULL) {
                return NGX_ERROR;
            }

            b->start = ngx_resolver_alloc(r, NGX...",1331.0,1414.0,1.0,45.0,84.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
4464,41110,ngx_resolver_create_name_query,1,ngx_resolver_create_name_query,"ngx_int_t ngx_resolver_create_name_query (ngx_resolver_t*,ngx_resolver_node_t*,ngx_str_t*)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_create_name_query(ngx_resolver_t *r, ngx_resolver_node_t *rn,
    ngx_str_t *name)
{
    u_char              *p, *s;
    size_t               len, nlen;
    ngx_uint_t           ident;
    ngx_resolver_qs_t   *qs;
    ngx_resolver_hdr_t  *query;

    nlen = name->len ? (1 + name->len + 1) : 1;

    len = sizeof(ngx_resolver_hdr_t) + nlen + sizeof(ngx_resolver_qs_t);

#if (NGX_HAVE_INET6)
    p = ngx_resolver_alloc(r, r->ipv6 ? len * 2 : len);
#else
    p = ngx_resolver_alloc(r, len);
#endif
    if (p == NULL) {
        return NGX_ERROR;
    }

    rn->qlen = (u_short) len;
    rn->query = p;

#if (NGX_HAVE_INET6)
    if (r->ipv6) {
        rn->query6 = p + len;
    }
#endif

    query = (ngx_resolver_hdr_t *) p;

    ident = ngx_random();

    ngx_log_debug2(NGX_LOG_DEBUG_CORE, r->log, 0,
                   ""resolve: \""%V\"" A %i"", name, ident & 0xffff);

    query->ident_hi = (u_char) ((ident >> 8) & 0xff);
    query->ident_lo = (u_char) (ident & 0xff);...",3632.0,3753.0,1.0,1.0,122.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4465,41117,ngx_resolver_create_srv_query,1,ngx_resolver_create_srv_query,"ngx_int_t ngx_resolver_create_srv_query (ngx_resolver_t*,ngx_resolver_node_t*,ngx_str_t*)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_create_srv_query(ngx_resolver_t *r, ngx_resolver_node_t *rn,
    ngx_str_t *name)
{
    u_char              *p, *s;
    size_t               len, nlen;
    ngx_uint_t           ident;
    ngx_resolver_qs_t   *qs;
    ngx_resolver_hdr_t  *query;

    nlen = name->len ? (1 + name->len + 1) : 1;

    len = sizeof(ngx_resolver_hdr_t) + nlen + sizeof(ngx_resolver_qs_t);

    p = ngx_resolver_alloc(r, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    rn->qlen = (u_short) len;
    rn->query = p;

    query = (ngx_resolver_hdr_t *) p;

    ident = ngx_random();

    ngx_log_debug2(NGX_LOG_DEBUG_CORE, r->log, 0,
                   ""resolve: \""%V\"" SRV %i"", name, ident & 0xffff);

    query->ident_hi = (u_char) ((ident >> 8) & 0xff);
    query->ident_lo = (u_char) (ident & 0xff);

    /* recursion query */
    query->flags_hi = 1; query->flags_lo = 0;

    /* one question */
    query->nqs_hi = 0; query->nqs_lo = 1;
    query->nan_hi = 0; query->nan...",3756.0,3841.0,1.0,1.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4466,41124,ngx_resolver_create_addr_query,1,ngx_resolver_create_addr_query,"ngx_int_t ngx_resolver_create_addr_query (ngx_resolver_t*,ngx_resolver_node_t*,ngx_resolver_addr_t*)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_create_addr_query(ngx_resolver_t *r, ngx_resolver_node_t *rn,
    ngx_resolver_addr_t *addr)
{
    u_char               *p, *d;
    size_t                len;
    in_addr_t             inaddr;
    ngx_int_t             n;
    ngx_uint_t            ident;
    ngx_resolver_hdr_t   *query;
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    switch (addr->sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        len = sizeof(ngx_resolver_hdr_t)
              + 64 + sizeof("".ip6.arpa."") - 1
              + sizeof(ngx_resolver_qs_t);

        break;
#endif

    default: /* AF_INET */
        len = sizeof(ngx_resolver_hdr_t)
              + sizeof("".255.255.255.255.in-addr.arpa."") - 1
              + sizeof(ngx_resolver_qs_t);
    }

    p = ngx_resolver_alloc(r, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    rn->query = p;
    query = (ngx_resolver_hdr_t *) p;

    ident = ngx_random()...",3844.0,3937.0,1.0,1.0,94.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4467,41131,ngx_resolver_resend_handler,1,ngx_resolver_resend_handler,void ngx_resolver_resend_handler (ngx_event_t*),core\ngx_resolver.c,"static void
ngx_resolver_resend_handler(ngx_event_t *ev)
{
    time_t           timer, atimer, stimer, ntimer;
#if (NGX_HAVE_INET6)
    time_t           a6timer;
#endif
    ngx_resolver_t  *r;

    r = ev->data;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, r->log, 0,
                   ""resolver resend handler"");

    /* lock name mutex */

    ntimer = ngx_resolver_resend(r, &r->name_rbtree, &r->name_resend_queue);

    stimer = ngx_resolver_resend(r, &r->srv_rbtree, &r->srv_resend_queue);

    /* unlock name mutex */

    /* lock addr mutex */

    atimer = ngx_resolver_resend(r, &r->addr_rbtree, &r->addr_resend_queue);

    /* unlock addr mutex */

#if (NGX_HAVE_INET6)

    /* lock addr6 mutex */

    a6timer = ngx_resolver_resend(r, &r->addr6_rbtree, &r->addr6_resend_queue);

    /* unlock addr6 mutex */

#endif

    timer = ntimer;

    if (timer == 0) {
        timer = atimer;

    } else if (atimer) {
        timer = ngx_min(timer, atimer);
    }

    if (timer == 0) {
        tim...",1417.0,1485.0,1.0,1.0,69.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4468,41136,ngx_resolver_resend,1,ngx_resolver_resend,"time_t ngx_resolver_resend (ngx_resolver_t*,ngx_rbtree_t*,ngx_queue_t*)",core\ngx_resolver.c,"static time_t
ngx_resolver_resend(ngx_resolver_t *r, ngx_rbtree_t *tree, ngx_queue_t *queue)
{
    time_t                now;
    ngx_queue_t          *q;
    ngx_resolver_node_t  *rn;

    now = ngx_time();

    for ( ;; ) {
        if (ngx_queue_empty(queue)) {
            return 0;
        }

        q = ngx_queue_last(queue);

        rn = ngx_queue_data(q, ngx_resolver_node_t, queue);

        if (now < rn->expire) {
            return rn->expire - now;
        }

        ngx_log_debug3(NGX_LOG_DEBUG_CORE, r->log, 0,
                       ""resolver resend \""%*s\"" %p"",
                       (size_t) rn->nlen, rn->name, rn->waiting);

        ngx_queue_remove(q);

        if (rn->waiting) {

            if (++rn->last_connection == r->connections.nelts) {
                rn->last_connection = 0;
            }

            (void) ngx_resolver_send_query(r, rn);

            rn->expire = now + r->resend_timeout;

            ngx_queue_insert_head(queue, q);

            continue;...",1488.0,1535.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,time_t
4469,41143,ngx_resolver_resend_empty,1,ngx_resolver_resend_empty,ngx_uint_t ngx_resolver_resend_empty (ngx_resolver_t*),core\ngx_resolver.c,"static ngx_uint_t
ngx_resolver_resend_empty(ngx_resolver_t *r)
{
    return ngx_queue_empty(&r->name_resend_queue)
           && ngx_queue_empty(&r->srv_resend_queue)
#if (NGX_HAVE_INET6)
           && ngx_queue_empty(&r->addr6_resend_queue)
#endif
           && ngx_queue_empty(&r->addr_resend_queue);
}",1538.0,1547.0,1.0,1.0,10.0,0,0,0,0,3,0,1,1,0,0,,0,0,2,1,1,ngx_uint_t
4470,41148,ngx_resolver_udp_read,1,ngx_resolver_udp_read,void ngx_resolver_udp_read (ngx_event_t*),core\ngx_resolver.c,"static void
ngx_resolver_udp_read(ngx_event_t *rev)
{
    ssize_t                     n;
    ngx_connection_t           *c;
    ngx_resolver_connection_t  *rec;
    u_char                      buf[NGX_RESOLVER_UDP_SIZE];

    c = rev->data;
    rec = c->data;

    do {
        n = ngx_udp_recv(c, buf, NGX_RESOLVER_UDP_SIZE);

        if (n == NGX_AGAIN) {
            break;
        }

        if (n == NGX_ERROR) {
            goto failed;
        }

        ngx_resolver_process_response(rec->resolver, buf, n, 0);

    } while (rev->ready);

    if (ngx_handle_read_event(rev, 0) != NGX_OK) {
        goto failed;
    }

    return;

failed:

    ngx_close_connection(rec->udp);
    rec->udp = NULL;
}",1550.0,1586.0,1.0,36.0,37.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4471,41153,ngx_resolver_tcp_write,1,ngx_resolver_tcp_write,void ngx_resolver_tcp_write (ngx_event_t*),core\ngx_resolver.c,"static void
ngx_resolver_tcp_write(ngx_event_t *wev)
{
    off_t                       sent;
    ssize_t                     n;
    ngx_buf_t                  *b;
    ngx_resolver_t             *r;
    ngx_connection_t           *c;
    ngx_resolver_connection_t  *rec;

    c = wev->data;
    rec = c->data;
    b = rec->write_buf;
    r = rec->resolver;

    if (wev->timedout) {
        goto failed;
    }

    sent = c->sent;

    while (wev->ready && b->pos < b->last) {
        n = ngx_send(c, b->pos, b->last - b->pos);

        if (n == NGX_AGAIN) {
            break;
        }

        if (n == NGX_ERROR) {
            goto failed;
        }

        b->pos += n;
    }

    if (b->pos != b->start) {
        b->last = ngx_movemem(b->start, b->pos, b->last - b->pos);
        b->pos = b->start;
    }

    if (c->sent != sent) {
        ngx_add_timer(wev, (ngx_msec_t) (r->tcp_timeout * 1000));
    }

    if (ngx_handle_write_event(wev, 0) != NGX_OK) {
        goto failed;
    }

    ...",1589.0,1643.0,1.0,1.0,55.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4472,41158,ngx_resolver_tcp_read,1,ngx_resolver_tcp_read,void ngx_resolver_tcp_read (ngx_event_t*),core\ngx_resolver.c,"static void
ngx_resolver_tcp_read(ngx_event_t *rev)
{
    u_char                     *p;
    size_t                      size;
    ssize_t                     n;
    u_short                     qlen;
    ngx_buf_t                  *b;
    ngx_resolver_t             *r;
    ngx_connection_t           *c;
    ngx_resolver_connection_t  *rec;

    c = rev->data;
    rec = c->data;
    b = rec->read_buf;
    r = rec->resolver;

    while (rev->ready) {
        n = ngx_recv(c, b->last, b->end - b->last);

        if (n == NGX_AGAIN) {
            break;
        }

        if (n == NGX_ERROR || n == 0) {
            goto failed;
        }

        b->last += n;

        for ( ;; ) {
            p = b->pos;
            size = b->last - p;

            if (size < 2) {
                break;
            }

            qlen = (u_short) *p++ << 8;
            qlen += *p++;

            if (size < (size_t) (2 + qlen)) {
                break;
            }

            ngx_resolver_process_resp...",1646.0,1712.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4473,41163,ngx_resolver_process_response,1,ngx_resolver_process_response,"void ngx_resolver_process_response (ngx_resolver_t*,u_char*,size_t,ngx_uint_t)",core\ngx_resolver.c,"static void
ngx_resolver_process_response(ngx_resolver_t *r, u_char *buf, size_t n,
    ngx_uint_t tcp)
{
    char                 *err;
    ngx_uint_t            i, times, ident, qident, flags, code, nqs, nan, trunc,
                          qtype, qclass;
#if (NGX_HAVE_INET6)
    ngx_uint_t            qident6;
#endif
    ngx_queue_t          *q;
    ngx_resolver_qs_t    *qs;
    ngx_resolver_hdr_t   *response;
    ngx_resolver_node_t  *rn;

    if (n < sizeof(ngx_resolver_hdr_t)) {
        goto short_response;
    }

    response = (ngx_resolver_hdr_t *) buf;

    ident = (response->ident_hi << 8) + response->ident_lo;
    flags = (response->flags_hi << 8) + response->flags_lo;
    nqs = (response->nqs_hi << 8) + response->nqs_lo;
    nan = (response->nan_hi << 8) + response->nan_lo;
    trunc = flags & 0x0200;

    ngx_log_debug6(NGX_LOG_DEBUG_CORE, r->log, 0,
                   ""resolver DNS response %ui fl:%04Xi %ui/%ui/%ud/%ud"",
                   ident, flags, nqs, nan,
    ...",1715.0,1898.0,1.0,1.0,184.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,void
4474,41171,ngx_resolver_process_a,1,ngx_resolver_process_a,"void ngx_resolver_process_a (ngx_resolver_t*,u_char*,size_t,ngx_uint_t,ngx_uint_t,ngx_uint_t,ngx_uint_t,ngx_uint_t,ngx_uint_t)",core\ngx_resolver.c,"static void
ngx_resolver_process_a(ngx_resolver_t *r, u_char *buf, size_t n,
    ngx_uint_t ident, ngx_uint_t code, ngx_uint_t qtype,
    ngx_uint_t nan, ngx_uint_t trunc, ngx_uint_t ans)
{
    char                       *err;
    u_char                     *cname;
    size_t                      len;
    int32_t                     ttl;
    uint32_t                    hash;
    in_addr_t                  *addr;
    ngx_str_t                   name;
    ngx_uint_t                  type, class, qident, naddrs, a, i, j, start;
#if (NGX_HAVE_INET6)
    struct in6_addr            *addr6;
#endif
    ngx_resolver_an_t          *an;
    ngx_resolver_ctx_t         *ctx, *next;
    ngx_resolver_node_t        *rn;
    ngx_resolver_addr_t        *addrs;
    ngx_resolver_connection_t  *rec;

    if (ngx_resolver_copy(r, &name, buf,
                          buf + sizeof(ngx_resolver_hdr_t), buf + n)
        != NGX_OK)
    {
        return;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, r->log, 0...",1901.0,2553.0,1.0,1.0,653.0,0,0,0,0,0,0,1,1,0,0,,0,0,18,9,9,void
4475,41184,ngx_resolver_process_srv,1,ngx_resolver_process_srv,"void ngx_resolver_process_srv (ngx_resolver_t*,u_char*,size_t,ngx_uint_t,ngx_uint_t,ngx_uint_t,ngx_uint_t,ngx_uint_t)",core\ngx_resolver.c,"static void
ngx_resolver_process_srv(ngx_resolver_t *r, u_char *buf, size_t n,
    ngx_uint_t ident, ngx_uint_t code, ngx_uint_t nan,
    ngx_uint_t trunc, ngx_uint_t ans)
{
    char                       *err;
    u_char                     *cname;
    size_t                      len;
    int32_t                     ttl;
    uint32_t                    hash;
    ngx_str_t                   name;
    ngx_uint_t                  type, qident, class, start, nsrvs, a, i, j;
    ngx_resolver_an_t          *an;
    ngx_resolver_ctx_t         *ctx, *next;
    ngx_resolver_srv_t         *srvs;
    ngx_resolver_node_t        *rn;
    ngx_resolver_connection_t  *rec;

    if (ngx_resolver_copy(r, &name, buf,
                          buf + sizeof(ngx_resolver_hdr_t), buf + n)
        != NGX_OK)
    {
        return;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, r->log, 0, ""resolver qs:%V"", &name);

    hash = ngx_crc32_short(name.data, name.len);

    rn = ngx_resolver_lookup_srv(r, &name, h...",2556.0,2936.0,1.0,1.0,381.0,0,0,0,0,0,0,1,1,0,0,,0,0,16,8,8,void
4476,41196,ngx_resolver_process_ptr,1,ngx_resolver_process_ptr,"void ngx_resolver_process_ptr (ngx_resolver_t*,u_char*,size_t,ngx_uint_t,ngx_uint_t,ngx_uint_t)",core\ngx_resolver.c,"static void
ngx_resolver_process_ptr(ngx_resolver_t *r, u_char *buf, size_t n,
    ngx_uint_t ident, ngx_uint_t code, ngx_uint_t nan)
{
    char                 *err;
    size_t                len;
    in_addr_t             addr;
    int32_t               ttl;
    ngx_int_t             octet;
    ngx_str_t             name;
    ngx_uint_t            mask, type, class, qident, a, i, start;
    ngx_queue_t          *expire_queue;
    ngx_rbtree_t         *tree;
    ngx_resolver_an_t    *an;
    ngx_resolver_ctx_t   *ctx, *next;
    ngx_resolver_node_t  *rn;
#if (NGX_HAVE_INET6)
    uint32_t              hash;
    ngx_int_t             digit;
    struct in6_addr       addr6;
#endif

    if (ngx_resolver_copy(r, &name, buf,
                          buf + sizeof(ngx_resolver_hdr_t), buf + n)
        != NGX_OK)
    {
        return;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, r->log, 0, ""resolver qs:%V"", &name);

    /* AF_INET */

    addr = 0;
    i = sizeof(ngx_resolver_hdr_t);

   ...",3070.0,3384.0,1.0,1.0,315.0,0,0,0,0,0,0,1,1,0,0,,0,0,12,6,6,void
4477,41206,ngx_resolver_lookup_name,1,ngx_resolver_lookup_name,"ngx_resolver_node_t* ngx_resolver_lookup_name (ngx_resolver_t*,ngx_str_t*,uint32_t)",core\ngx_resolver.c,"static ngx_resolver_node_t *
ngx_resolver_lookup_name(ngx_resolver_t *r, ngx_str_t *name, uint32_t hash)
{
    ngx_int_t             rc;
    ngx_rbtree_node_t    *node, *sentinel;
    ngx_resolver_node_t  *rn;

    node = r->name_rbtree.root;
    sentinel = r->name_rbtree.sentinel;

    while (node != sentinel) {

        if (hash < node->key) {
            node = node->left;
            continue;
        }

        if (hash > node->key) {
            node = node->right;
            continue;
        }

        /* hash == node->key */

        rn = ngx_resolver_node(node);

        rc = ngx_memn2cmp(name->data, rn->name, name->len, rn->nlen);

        if (rc == 0) {
            return rn;
        }

        node = (rc < 0) ? node->left : node->right;
    }

    /* not found */

    return NULL;
}",3387.0,3425.0,1.0,13.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_resolver_node_t
4478,41213,ngx_resolver_lookup_srv,1,ngx_resolver_lookup_srv,"ngx_resolver_node_t* ngx_resolver_lookup_srv (ngx_resolver_t*,ngx_str_t*,uint32_t)",core\ngx_resolver.c,"static ngx_resolver_node_t *
ngx_resolver_lookup_srv(ngx_resolver_t *r, ngx_str_t *name, uint32_t hash)
{
    ngx_int_t             rc;
    ngx_rbtree_node_t    *node, *sentinel;
    ngx_resolver_node_t  *rn;

    node = r->srv_rbtree.root;
    sentinel = r->srv_rbtree.sentinel;

    while (node != sentinel) {

        if (hash < node->key) {
            node = node->left;
            continue;
        }

        if (hash > node->key) {
            node = node->right;
            continue;
        }

        /* hash == node->key */

        rn = ngx_resolver_node(node);

        rc = ngx_memn2cmp(name->data, rn->name, name->len, rn->nlen);

        if (rc == 0) {
            return rn;
        }

        node = (rc < 0) ? node->left : node->right;
    }

    /* not found */

    return NULL;
}",3428.0,3466.0,1.0,13.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_resolver_node_t
4479,41220,ngx_resolver_lookup_addr,1,ngx_resolver_lookup_addr,"ngx_resolver_node_t* ngx_resolver_lookup_addr (ngx_resolver_t*,in_addr_t)",core\ngx_resolver.c,"static ngx_resolver_node_t *
ngx_resolver_lookup_addr(ngx_resolver_t *r, in_addr_t addr)
{
    ngx_rbtree_node_t  *node, *sentinel;

    node = r->addr_rbtree.root;
    sentinel = r->addr_rbtree.sentinel;

    while (node != sentinel) {

        if (addr < node->key) {
            node = node->left;
            continue;
        }

        if (addr > node->key) {
            node = node->right;
            continue;
        }

        /* addr == node->key */

        return ngx_resolver_node(node);
    }

    /* not found */

    return NULL;
}",3469.0,3497.0,1.0,15.0,29.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_resolver_node_t
4480,41226,ngx_resolver_rbtree_insert_value,1,ngx_resolver_rbtree_insert_value,"void ngx_resolver_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",core\ngx_resolver.c,"static void
ngx_resolver_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t    **p;
    ngx_resolver_node_t   *rn, *rn_temp;

    for ( ;; ) {

        if (node->key < temp->key) {

            p = &temp->left;

        } else if (node->key > temp->key) {

            p = &temp->right;

        } else { /* node->key == temp->key */

            rn = ngx_resolver_node(node);
            rn_temp = ngx_resolver_node(temp);

            p = (ngx_memn2cmp(rn->name, rn_temp->name, rn->nlen, rn_temp->nlen)
                 < 0) ? &temp->left : &temp->right;
        }

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",3546.0,3584.0,1.0,17.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4481,41233,ngx_resolver_copy,1,ngx_resolver_copy,"ngx_int_t ngx_resolver_copy (ngx_resolver_t*,ngx_str_t*,u_char*,u_char*,u_char*)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_copy(ngx_resolver_t *r, ngx_str_t *name, u_char *buf, u_char *src,
    u_char *last)
{
    char        *err;
    u_char      *p, *dst;
    size_t       len;
    ngx_uint_t   i, n;

    p = src;
    len = 0;

    /*
     * compression pointers allow to create endless loop, so we set limit;
     * 128 pointers should be enough to store 255-byte name
     */

    for (i = 0; i < 128; i++) {
        n = *p++;

        if (n == 0) {
            goto done;
        }

        if (n & 0xc0) {
            if ((n & 0xc0) != 0xc0) {
                err = ""invalid label type in DNS response"";
                goto invalid;
            }

            if (p >= last) {
                err = ""name is out of DNS response"";
                goto invalid;
            }

            n = ((n & 0x3f) << 8) + *p;
            p = &buf[n];

        } else {
            len += 1 + n;
            p = &p[n];
        }

        if (p >= last) {
            err = ""name is out of DNS r...",3940.0,4034.0,1.0,1.0,95.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
4482,41242,ngx_resolver_set_timeout,1,ngx_resolver_set_timeout,"ngx_int_t ngx_resolver_set_timeout (ngx_resolver_t*,ngx_resolver_ctx_t*)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_set_timeout(ngx_resolver_t *r, ngx_resolver_ctx_t *ctx)
{
    if (ctx->event || ctx->timeout == 0) {
        return NGX_OK;
    }

    ctx->event = ngx_resolver_calloc(r, sizeof(ngx_event_t));
    if (ctx->event == NULL) {
        return NGX_ERROR;
    }

    ctx->event->handler = ngx_resolver_timeout_handler;
    ctx->event->data = ctx;
    ctx->event->log = r->log;
    ctx->event->cancelable = ctx->cancelable;
    ctx->ident = -1;

    ngx_add_timer(ctx->event, ctx->timeout);

    return NGX_OK;
}",4037.0,4058.0,1.0,1.0,22.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4483,41248,ngx_resolver_timeout_handler,1,ngx_resolver_timeout_handler,void ngx_resolver_timeout_handler (ngx_event_t*),core\ngx_resolver.c,"static void
ngx_resolver_timeout_handler(ngx_event_t *ev)
{
    ngx_resolver_ctx_t  *ctx;

    ctx = ev->data;

    ctx->state = NGX_RESOLVE_TIMEDOUT;

    ctx->handler(ctx);
}",4061.0,4071.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4484,41253,ngx_resolver_free_node,1,ngx_resolver_free_node,"void ngx_resolver_free_node (ngx_resolver_t*,ngx_resolver_node_t*)",core\ngx_resolver.c,"static void
ngx_resolver_free_node(ngx_resolver_t *r, ngx_resolver_node_t *rn)
{
    ngx_uint_t  i;

    /* lock alloc mutex */

    if (rn->query) {
        ngx_resolver_free_locked(r, rn->query);
    }

    if (rn->name) {
        ngx_resolver_free_locked(r, rn->name);
    }

    if (rn->cnlen) {
        ngx_resolver_free_locked(r, rn->u.cname);
    }

    if (rn->naddrs > 1 && rn->naddrs != (u_short) -1) {
        ngx_resolver_free_locked(r, rn->u.addrs);
    }

#if (NGX_HAVE_INET6)
    if (rn->naddrs6 > 1 && rn->naddrs6 != (u_short) -1) {
        ngx_resolver_free_locked(r, rn->u6.addrs6);
    }
#endif

    if (rn->nsrvs) {
        for (i = 0; i < (ngx_uint_t) rn->nsrvs; i++) {
            if (rn->u.srvs[i].name.data) {
                ngx_resolver_free_locked(r, rn->u.srvs[i].name.data);
            }
        }

        ngx_resolver_free_locked(r, rn->u.srvs);
    }

    ngx_resolver_free_locked(r, rn);

    /* unlock alloc mutex */
}",4074.0,4116.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4485,41259,ngx_resolver_alloc,1,ngx_resolver_alloc,"void* ngx_resolver_alloc (ngx_resolver_t*,size_t)",core\ngx_resolver.c,"static void *
ngx_resolver_alloc(ngx_resolver_t *r, size_t size)
{
    u_char  *p;

    /* lock alloc mutex */

    p = ngx_alloc(size, r->log);

    /* unlock alloc mutex */

    return p;
}",4119.0,4131.0,1.0,1.0,13.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,void*
4486,41265,ngx_resolver_calloc,1,ngx_resolver_calloc,"void* ngx_resolver_calloc (ngx_resolver_t*,size_t)",core\ngx_resolver.c,"static void *
ngx_resolver_calloc(ngx_resolver_t *r, size_t size)
{
    u_char  *p;

    p = ngx_resolver_alloc(r, size);

    if (p) {
        ngx_memzero(p, size);
    }

    return p;
}",4134.0,4146.0,1.0,1.0,13.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,void*
4487,41271,ngx_resolver_free,1,ngx_resolver_free,"void ngx_resolver_free (ngx_resolver_t*,void*)",core\ngx_resolver.c,"static void
ngx_resolver_free(ngx_resolver_t *r, void *p)
{
    /* lock alloc mutex */

    ngx_free(p);

    /* unlock alloc mutex */
}",4149.0,4157.0,1.0,1.0,9.0,0,0,0,0,14,0,1,1,0,0,,0,0,4,2,2,void
4488,41277,ngx_resolver_free_locked,1,ngx_resolver_free_locked,"void ngx_resolver_free_locked (ngx_resolver_t*,void*)",core\ngx_resolver.c,"static void
ngx_resolver_free_locked(ngx_resolver_t *r, void *p)
{
    ngx_free(p);
}",4160.0,4164.0,1.0,1.0,5.0,0,0,0,0,4,0,1,1,0,0,,0,0,4,2,2,void
4489,41283,ngx_resolver_dup,1,ngx_resolver_dup,"void* ngx_resolver_dup (ngx_resolver_t*,void*,size_t)",core\ngx_resolver.c,"static void *
ngx_resolver_dup(ngx_resolver_t *r, void *src, size_t size)
{
    void  *dst;

    dst = ngx_resolver_alloc(r, size);

    if (dst == NULL) {
        return dst;
    }

    ngx_memcpy(dst, src, size);

    return dst;
}",4167.0,4181.0,1.0,1.0,15.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,void*
4490,41290,ngx_resolver_export,1,ngx_resolver_export,"ngx_resolver_addr_t* ngx_resolver_export (ngx_resolver_t*,ngx_resolver_node_t*,ngx_uint_t)",core\ngx_resolver.c,"static ngx_resolver_addr_t *
ngx_resolver_export(ngx_resolver_t *r, ngx_resolver_node_t *rn,
    ngx_uint_t rotate)
{
    ngx_uint_t            d, i, j, n;
    in_addr_t            *addr;
    ngx_sockaddr_t       *sockaddr;
    struct sockaddr_in   *sin;
    ngx_resolver_addr_t  *dst;
#if (NGX_HAVE_INET6)
    struct in6_addr      *addr6;
    struct sockaddr_in6  *sin6;
#endif

    n = rn->naddrs;
#if (NGX_HAVE_INET6)
    n += rn->naddrs6;
#endif

    dst = ngx_resolver_calloc(r, n * sizeof(ngx_resolver_addr_t));
    if (dst == NULL) {
        return NULL;
    }

    sockaddr = ngx_resolver_calloc(r, n * sizeof(ngx_sockaddr_t));
    if (sockaddr == NULL) {
        ngx_resolver_free(r, dst);
        return NULL;
    }

    i = 0;
    d = rotate ? ngx_random() % n : 0;

    if (rn->naddrs) {
        j = rotate ? ngx_random() % rn->naddrs : 0;

        addr = (rn->naddrs == 1) ? &rn->u.addr : rn->u.addrs;

        do {
            sin = &sockaddr[d].sockaddr_in;
            sin->sin_fam...",4184.0,4264.0,1.0,1.0,81.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_resolver_addr_t
4491,41297,ngx_resolver_report_srv,1,ngx_resolver_report_srv,"void ngx_resolver_report_srv (ngx_resolver_t*,ngx_resolver_ctx_t*)",core\ngx_resolver.c,"static void
ngx_resolver_report_srv(ngx_resolver_t *r, ngx_resolver_ctx_t *ctx)
{
    ngx_uint_t                naddrs, nsrvs, nw, i, j, k, l, m, n, w;
    ngx_resolver_addr_t      *addrs;
    ngx_resolver_srv_name_t  *srvs;

    srvs = ctx->srvs;
    nsrvs = ctx->nsrvs;

    naddrs = 0;

    for (i = 0; i < nsrvs; i++) {
        if (srvs[i].state == NGX_ERROR) {
            ctx->state = NGX_ERROR;
            ctx->valid = ngx_time() + (r->valid ? r->valid : 10);

            ctx->handler(ctx);
            return;
        }

        naddrs += srvs[i].naddrs;
    }

    if (naddrs == 0) {
        ctx->state = srvs[0].state;

        for (i = 0; i < nsrvs; i++) {
            if (srvs[i].state == NGX_RESOLVE_NXDOMAIN) {
                ctx->state = NGX_RESOLVE_NXDOMAIN;
                break;
            }
        }

        ctx->valid = ngx_time() + (r->valid ? r->valid : 10);

        ctx->handler(ctx);
        return;
    }

    addrs = ngx_resolver_calloc(r, naddrs * sizeof(ngx_res...",4267.0,4373.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4492,41303,ngx_resolver_log_error,1,ngx_resolver_log_error,"u_char* ngx_resolver_log_error (ngx_log_t*,u_char*,size_t)",core\ngx_resolver.c,"static u_char *
ngx_resolver_log_error(ngx_log_t *log, u_char *buf, size_t len)
{
    u_char                     *p;
    ngx_resolver_connection_t  *rec;

    p = buf;

    if (log->action) {
        p = ngx_snprintf(buf, len, "" while %s"", log->action);
        len -= p - buf;
    }

    rec = log->data;

    if (rec) {
        p = ngx_snprintf(p, len, "", resolver: %V"", &rec->server);
    }

    return p;
}",4399.0,4419.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
4493,41310,ngx_resolver_resolve_srv_names,1,ngx_resolver_resolve_srv_names,"void ngx_resolver_resolve_srv_names (ngx_resolver_ctx_t*,ngx_resolver_node_t*)",core\ngx_resolver.c,"static void
ngx_resolver_resolve_srv_names(ngx_resolver_ctx_t *ctx, ngx_resolver_node_t *rn)
{
    ngx_uint_t                i;
    ngx_resolver_t           *r;
    ngx_resolver_ctx_t       *cctx;
    ngx_resolver_srv_name_t  *srvs;

    r = ctx->resolver;

    ctx->node = NULL;
    ctx->state = NGX_OK;
    ctx->valid = rn->valid;
    ctx->count = rn->nsrvs;

    srvs = ngx_resolver_calloc(r, rn->nsrvs * sizeof(ngx_resolver_srv_name_t));
    if (srvs == NULL) {
        goto failed;
    }

    ctx->srvs = srvs;
    ctx->nsrvs = rn->nsrvs;

    if (ctx->event && ctx->event->timer_set) {
        ngx_del_timer(ctx->event);
    }

    for (i = 0; i < (ngx_uint_t) rn->nsrvs; i++) {
        srvs[i].name.data = ngx_resolver_alloc(r, rn->u.srvs[i].name.len);
        if (srvs[i].name.data == NULL) {
            goto failed;
        }

        srvs[i].name.len = rn->u.srvs[i].name.len;
        ngx_memcpy(srvs[i].name.data, rn->u.srvs[i].name.data,
                   srvs[i].name.len);

       ...",2939.0,3006.0,1.0,1.0,68.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4494,41316,ngx_resolver_srv_names_handler,1,ngx_resolver_srv_names_handler,void ngx_resolver_srv_names_handler (ngx_resolver_ctx_t*),core\ngx_resolver.c,"static void
ngx_resolver_srv_names_handler(ngx_resolver_ctx_t *cctx)
{
    ngx_uint_t                i;
    ngx_addr_t               *addrs;
    ngx_resolver_t           *r;
    ngx_sockaddr_t           *sockaddr;
    ngx_resolver_ctx_t       *ctx;
    ngx_resolver_srv_name_t  *srv;

    r = cctx->resolver;
    ctx = cctx->data;
    srv = cctx->srvs;

    ctx->count--;
    ctx->async |= cctx->async;

    srv->ctx = NULL;
    srv->state = cctx->state;

    if (cctx->naddrs) {

        ctx->valid = ngx_min(ctx->valid, cctx->valid);

        addrs = ngx_resolver_calloc(r, cctx->naddrs * sizeof(ngx_addr_t));
        if (addrs == NULL) {
            srv->state = NGX_ERROR;
            goto done;
        }

        sockaddr = ngx_resolver_alloc(r, cctx->naddrs * sizeof(ngx_sockaddr_t));
        if (sockaddr == NULL) {
            ngx_resolver_free(r, addrs);
            srv->state = NGX_ERROR;
            goto done;
        }

        for (i = 0; i < cctx->naddrs; i++) {
            addrs...",3009.0,3067.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4495,41321,ngx_resolver_cmp_srvs,1,ngx_resolver_cmp_srvs,"ngx_int_t ngx_resolver_cmp_srvs (void*,void*)",core\ngx_resolver.c,"static ngx_int_t
ngx_resolver_cmp_srvs(const void *one, const void *two)
{
    ngx_int_t            p1, p2;
    ngx_resolver_srv_t  *first, *second;

    first = (ngx_resolver_srv_t *) one;
    second = (ngx_resolver_srv_t *) two;

    p1 = first->priority;
    p2 = second->priority;

    return p1 - p2;
}",4693.0,4706.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4496,41327,ngx_resolver_create,1,ngx_resolver_create,"ngx_resolver_t ngx_resolver_create (ngx_conf_t*,ngx_str_t*,ngx_uint_t)",core\ngx_resolver.c,"ngx_resolver_t *
ngx_resolver_create(ngx_conf_t *cf, ngx_str_t *names, ngx_uint_t n)
{
    ngx_str_t                   s;
    ngx_url_t                   u;
    ngx_uint_t                  i, j;
    ngx_resolver_t             *r;
    ngx_pool_cleanup_t         *cln;
    ngx_resolver_connection_t  *rec;

    r = ngx_pcalloc(cf->pool, sizeof(ngx_resolver_t));
    if (r == NULL) {
        return NULL;
    }

    r->event = ngx_pcalloc(cf->pool, sizeof(ngx_event_t));
    if (r->event == NULL) {
        return NULL;
    }

    cln = ngx_pool_cleanup_add(cf->pool, 0);
    if (cln == NULL) {
        return NULL;
    }

    cln->handler = ngx_resolver_cleanup;
    cln->data = r;

    ngx_rbtree_init(&r->name_rbtree, &r->name_sentinel,
                    ngx_resolver_rbtree_insert_value);

    ngx_rbtree_init(&r->srv_rbtree, &r->srv_sentinel,
                    ngx_resolver_rbtree_insert_value);

    ngx_rbtree_init(&r->addr_rbtree, &r->addr_sentinel,
                    ngx_rbtree_insert_...",132.0,282.0,1.0,1.0,151.0,152,15,125,22,0,23,15,23,4,10,,0,20,6,3,3,ngx_resolver_t
4497,42005,ngx_resolve_start,1,ngx_resolve_start,"ngx_resolver_ctx_t ngx_resolve_start (ngx_resolver_t*,ngx_resolver_ctx_t*)",core\ngx_resolver.c,"ngx_resolver_ctx_t *
ngx_resolve_start(ngx_resolver_t *r, ngx_resolver_ctx_t *temp)
{
    in_addr_t            addr;
    ngx_resolver_ctx_t  *ctx;

    if (temp) {
        addr = ngx_inet_addr(temp->name.data, temp->name.len);

        if (addr != INADDR_NONE) {
            temp->resolver = r;
            temp->state = NGX_OK;
            temp->naddrs = 1;
            temp->addrs = &temp->addr;
            temp->addr.sockaddr = (struct sockaddr *) &temp->sin;
            temp->addr.socklen = sizeof(struct sockaddr_in);
            ngx_memzero(&temp->sin, sizeof(struct sockaddr_in));
            temp->sin.sin_family = AF_INET;
            temp->sin.sin_addr.s_addr = addr;
            temp->quick = 1;

            return temp;
        }
    }

    if (r->connections.nelts == 0) {
        return NGX_NO_RESOLVER;
    }

    ctx = ngx_resolver_calloc(r, sizeof(ngx_resolver_ctx_t));

    if (ctx) {
        ctx->resolver = r;
    }

    return ctx;
}",366.0,402.0,1.0,1.0,37.0,45,8,34,10,1,2,5,6,0,2,,0,2,4,2,2,ngx_resolver_ctx_t
4498,42134,ngx_resolve_name,1,ngx_resolve_name,ngx_int_t ngx_resolve_name (ngx_resolver_ctx_t*),core\ngx_resolver.c,"ngx_int_t
ngx_resolve_name(ngx_resolver_ctx_t *ctx)
{
    size_t           slen;
    ngx_int_t        rc;
    ngx_str_t        name;
    ngx_resolver_t  *r;

    r = ctx->resolver;

    if (ctx->name.len > 0 && ctx->name.data[ctx->name.len - 1] == '.') {
        ctx->name.len--;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, r->log, 0,
                   ""resolve: \""%V\"""", &ctx->name);

    if (ctx->quick) {
        ctx->handler(ctx);
        return NGX_OK;
    }

    if (ctx->service.len) {
        slen = ctx->service.len;

        if (ngx_strlchr(ctx->service.data,
                        ctx->service.data + ctx->service.len, '.')
            == NULL)
        {
            slen += sizeof(""_._tcp"") - 1;
        }

        name.len = slen + 1 + ctx->name.len;

        name.data = ngx_resolver_alloc(r, name.len);
        if (name.data == NULL) {
            goto failed;
        }

        if (slen == ctx->service.len) {
            ngx_sprintf(name.data, ""%V.%V"", &ctx->service, &ctx->...",405.0,484.0,1.0,1.0,80.0,63,13,52,10,0,12,11,13,1,6,,0,8,2,1,1,ngx_int_t
4499,42364,ngx_resolve_name_done,1,ngx_resolve_name_done,void ngx_resolve_name_done (ngx_resolver_ctx_t*),core\ngx_resolver.c,"void
ngx_resolve_name_done(ngx_resolver_ctx_t *ctx)
{
    ngx_uint_t            i;
    ngx_resolver_t       *r;
    ngx_resolver_ctx_t   *w, **p;
    ngx_resolver_node_t  *rn;

    r = ctx->resolver;

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, r->log, 0,
                   ""resolve name done: %i"", ctx->state);

    if (ctx->quick) {
        return;
    }

    if (ctx->event && ctx->event->timer_set) {
        ngx_del_timer(ctx->event);
    }

    /* lock name mutex */

    if (ctx->nsrvs) {
        for (i = 0; i < ctx->nsrvs; i++) {
            if (ctx->srvs[i].ctx) {
                ngx_resolve_name_done(ctx->srvs[i].ctx);
            }

            if (ctx->srvs[i].addrs) {
                ngx_resolver_free(r, ctx->srvs[i].addrs->sockaddr);
                ngx_resolver_free(r, ctx->srvs[i].addrs);
            }

            ngx_resolver_free(r, ctx->srvs[i].name.data);
        }

        ngx_resolver_free(r, ctx->srvs);
    }

    if (ctx->state == NGX_AGAIN || ctx->state == NGX_RESOL...",487.0,575.0,1.0,1.0,89.0,71,10,65,10,0,11,15,25,1,9,,0,3,2,1,1,void
4500,43531,ngx_resolve_addr,1,ngx_resolve_addr,ngx_int_t ngx_resolve_addr (ngx_resolver_ctx_t*),core\ngx_resolver.c,"ngx_int_t
ngx_resolve_addr(ngx_resolver_ctx_t *ctx)
{
    u_char               *name;
    in_addr_t             addr;
    ngx_queue_t          *resend_queue, *expire_queue;
    ngx_rbtree_t         *tree;
    ngx_resolver_t       *r;
    struct sockaddr_in   *sin;
    ngx_resolver_node_t  *rn;
#if (NGX_HAVE_INET6)
    uint32_t              hash;
    struct sockaddr_in6  *sin6;
#endif

#if (NGX_SUPPRESS_WARN)
    addr = 0;
#if (NGX_HAVE_INET6)
    hash = 0;
    sin6 = NULL;
#endif
#endif

    r = ctx->resolver;

    switch (ctx->addr.sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) ctx->addr.sockaddr;
        hash = ngx_crc32_short(sin6->sin6_addr.s6_addr, 16);

        /* lock addr mutex */

        rn = ngx_resolver_lookup_addr6(r, &sin6->sin6_addr, hash);

        tree = &r->addr6_rbtree;
        resend_queue = &r->addr6_resend_queue;
        expire_queue = &r->addr6_expire_queue;

        break;
#endif

    default: /* AF_INET...",903.0,1121.0,1.0,1.0,219.0,134,12,129,16,1,49,18,24,9,16,,0,40,2,1,1,ngx_int_t
4501,44006,ngx_resolve_addr_done,1,ngx_resolve_addr_done,void ngx_resolve_addr_done (ngx_resolver_ctx_t*),core\ngx_resolver.c,"void
ngx_resolve_addr_done(ngx_resolver_ctx_t *ctx)
{
    ngx_queue_t          *expire_queue;
    ngx_rbtree_t         *tree;
    ngx_resolver_t       *r;
    ngx_resolver_ctx_t   *w, **p;
    ngx_resolver_node_t  *rn;

    r = ctx->resolver;

    switch (ctx->addr.sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        tree = &r->addr6_rbtree;
        expire_queue = &r->addr6_expire_queue;
        break;
#endif

    default: /* AF_INET */
        tree = &r->addr_rbtree;
        expire_queue = &r->addr_expire_queue;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, r->log, 0,
                   ""resolve addr done: %i"", ctx->state);

    if (ctx->event && ctx->event->timer_set) {
        ngx_del_timer(ctx->event);
    }

    /* lock addr mutex */

    if (ctx->state == NGX_AGAIN || ctx->state == NGX_RESOLVE_TIMEDOUT) {

        rn = ctx->node;

        if (rn) {
            p = &rn->waiting;
            w = rn->waiting;

            while (w) {
                if (w == ct...",1124.0,1210.0,1.0,1.0,87.0,55,8,54,14,0,10,10,15,1,6,,0,6,2,1,1,void
4502,51697,ngx_resolver_strerror,1,ngx_resolver_strerror,char* ngx_resolver_strerror (ngx_int_t),core\ngx_resolver.c,"char *
ngx_resolver_strerror(ngx_int_t err)
{
    static char *errors[] = {
        ""Format error"",     /* FORMERR */
        ""Server failure"",   /* SERVFAIL */
        ""Host not found"",   /* NXDOMAIN */
        ""Unimplemented"",    /* NOTIMP */
        ""Operation refused"" /* REFUSED */
    };

    if (err > 0 && err < 6) {
        return errors[err - 1];
    }

    if (err == NGX_RESOLVE_TIMEDOUT) {
        return ""Operation timed out"";
    }

    return ""Unknown error"";
}",4376.0,4396.0,1.0,1.0,21.0,8,8,7,3,0,0,3,3,0,0,,0,0,2,1,1,char*
4503,52381,ngx_resolver_handler_pt,1,ngx_resolver_handler_pt,void ngx_resolver_handler_pt (ngx_resolver_ctx_t*),core\ngx_resolver.h,typedef void (*ngx_resolver_handler_pt)(ngx_resolver_ctx_t *ctx);,58.0,58.0,14.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4504,52555,ngx_rwlock_wlock,1,ngx_rwlock_wlock,void ngx_rwlock_wlock (ngx_atomic_t*),core\ngx_rwlock.h,void ngx_rwlock_wlock(ngx_atomic_t *lock);,16.0,16.0,6.0,41.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4505,52560,ngx_rwlock_rlock,1,ngx_rwlock_rlock,void ngx_rwlock_rlock (ngx_atomic_t*),core\ngx_rwlock.h,void ngx_rwlock_rlock(ngx_atomic_t *lock);,17.0,17.0,6.0,41.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4506,52565,ngx_rwlock_unlock,1,ngx_rwlock_unlock,void ngx_rwlock_unlock (ngx_atomic_t*),core\ngx_rwlock.h,void ngx_rwlock_unlock(ngx_atomic_t *lock);,18.0,18.0,6.0,42.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4507,52570,ngx_rwlock_downgrade,1,ngx_rwlock_downgrade,void ngx_rwlock_downgrade (ngx_atomic_t*),core\ngx_rwlock.h,void ngx_rwlock_downgrade(ngx_atomic_t *lock);,19.0,19.0,6.0,45.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4508,52586,ngx_sha1_body,1,ngx_sha1_body,"u_char* ngx_sha1_body (ngx_sha1_t*,u_char*,size_t)",core\ngx_sha1.c,"static const u_char *
ngx_sha1_body(ngx_sha1_t *ctx, const u_char *data, size_t size)
{
    uint32_t       a, b, c, d, e, temp;
    uint32_t       saved_a, saved_b, saved_c, saved_d, saved_e;
    uint32_t       words[80];
    ngx_uint_t     i;
    const u_char  *p;

    p = data;

    a = ctx->a;
    b = ctx->b;
    c = ctx->c;
    d = ctx->d;
    e = ctx->e;

    do {
        saved_a = a;
        saved_b = b;
        saved_c = c;
        saved_d = d;
        saved_e = e;

        /* Load data block into the words array */

        for (i = 0; i < 16; i++) {
            words[i] = GET(i);
        }

        for (i = 16; i < 80; i++) {
            words[i] = ROTATE(1, words[i - 3] ^ words[i - 8] ^ words[i - 14]
                                 ^ words[i - 16]);
        }

        /* Transformations */

        STEP(F1, a, b, c, d, e, words[0],  0x5a827999);
        STEP(F1, a, b, c, d, e, words[1],  0x5a827999);
        STEP(F1, a, b, c, d, e, words[2],  0x5a827999);
        STEP(F1,...",156.0,294.0,1.0,23.0,139.0,0,0,0,0,4,0,1,1,0,0,,0,0,6,3,3,u_char
4509,52593,ngx_sha1_init,1,ngx_sha1_init,void ngx_sha1_init (ngx_sha1_t*),core\ngx_sha1.c,"void
ngx_sha1_init(ngx_sha1_t *ctx)
{
    ctx->a = 0x67452301;
    ctx->b = 0xefcdab89;
    ctx->c = 0x98badcfe;
    ctx->d = 0x10325476;
    ctx->e = 0xc3d2e1f0;

    ctx->bytes = 0;
}",19.0,29.0,1.0,1.0,11.0,12,2,6,1,0,6,1,1,0,0,,0,6,2,1,1,void
4510,52628,ngx_sha1_update,1,ngx_sha1_update,"void ngx_sha1_update (ngx_sha1_t*,void*,size_t)",core\ngx_sha1.c,"void
ngx_sha1_update(ngx_sha1_t *ctx, const void *data, size_t size)
{
    size_t  used, free;

    used = (size_t) (ctx->bytes & 0x3f);
    ctx->bytes += size;

    if (used) {
        free = 64 - used;

        if (size < free) {
            ngx_memcpy(&ctx->buffer[used], data, size);
            return;
        }

        ngx_memcpy(&ctx->buffer[used], data, free);
        data = (u_char *) data + free;
        size -= free;
        (void) ngx_sha1_body(ctx, ctx->buffer, 64);
    }

    if (size >= 64) {
        data = ngx_sha1_body(ctx, data, size & ~(size_t) 0x3f);
        size &= 0x3f;
    }

    ngx_memcpy(ctx->buffer, data, size);
}",32.0,60.0,1.0,1.0,29.0,26,13,33,5,0,8,4,5,0,2,,0,7,6,3,3,void
4511,52725,ngx_sha1_final,1,ngx_sha1_final,"void ngx_sha1_final (u_char[20],ngx_sha1_t*)",core\ngx_sha1.c,"void
ngx_sha1_final(u_char result[20], ngx_sha1_t *ctx)
{
    size_t  used, free;

    used = (size_t) (ctx->bytes & 0x3f);

    ctx->buffer[used++] = 0x80;

    free = 64 - used;

    if (free < 8) {
        ngx_memzero(&ctx->buffer[used], free);
        (void) ngx_sha1_body(ctx, ctx->buffer, 64);
        used = 0;
        free = 64;
    }

    ngx_memzero(&ctx->buffer[used], free - 8);

    ctx->bytes <<= 3;
    ctx->buffer[56] = (u_char) (ctx->bytes >> 56);
    ctx->buffer[57] = (u_char) (ctx->bytes >> 48);
    ctx->buffer[58] = (u_char) (ctx->bytes >> 40);
    ctx->buffer[59] = (u_char) (ctx->bytes >> 32);
    ctx->buffer[60] = (u_char) (ctx->bytes >> 24);
    ctx->buffer[61] = (u_char) (ctx->bytes >> 16);
    ctx->buffer[62] = (u_char) (ctx->bytes >> 8);
    ctx->buffer[63] = (u_char) ctx->bytes;

    (void) ngx_sha1_body(ctx, ctx->buffer, 64);

    result[0] = (u_char) (ctx->a >> 24);
    result[1] = (u_char) (ctx->a >> 16);
    result[2] = (u_char) (ctx->a >> 8);
    result[3...",63.0,117.0,1.0,1.0,55.0,146,12,78,4,0,45,2,2,0,2,,0,43,4,2,2,void
4512,58297,ngx_shmtx_create,1,ngx_shmtx_create,"ngx_int_t ngx_shmtx_create (ngx_shmtx_t*,ngx_shmtx_sh_t*,u_char*)",core\ngx_shmtx.c,"ngx_int_t
ngx_shmtx_create(ngx_shmtx_t *mtx, ngx_shmtx_sh_t *addr, u_char *name)
{
    if (mtx->name) {

        if (ngx_strcmp(name, mtx->name) == 0) {
            mtx->name = name;
            return NGX_OK;
        }

        ngx_shmtx_destroy(mtx);
    }

    mtx->fd = ngx_open_file(name, NGX_FILE_RDWR, NGX_FILE_CREATE_OR_OPEN,
                            NGX_FILE_DEFAULT_ACCESS);

    if (mtx->fd == NGX_INVALID_FILE) {
        ngx_log_error(NGX_LOG_EMERG, ngx_cycle->log, ngx_errno,
                      ngx_open_file_n "" \""%s\"" failed"", name);
        return NGX_ERROR;
    }

    if (ngx_delete_file(name) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_errno,
                      ngx_delete_file_n "" \""%s\"" failed"", name);
    }

    mtx->name = name;

    return NGX_OK;
}",202.0,232.0,1.0,1.0,31.0,12,3,20,9,0,8,5,6,3,2,,0,7,6,3,3,ngx_int_t
4513,58360,ngx_shmtx_destroy,1,ngx_shmtx_destroy,void ngx_shmtx_destroy (ngx_shmtx_t*),core\ngx_shmtx.c,"void
ngx_shmtx_destroy(ngx_shmtx_t *mtx)
{
    if (ngx_close_file(mtx->fd) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_errno,
                      ngx_close_file_n "" \""%s\"" failed"", mtx->name);
    }
}",235.0,242.0,1.0,1.0,8.0,2,2,2,2,1,1,2,2,1,0,,0,1,2,1,1,void
4514,58374,ngx_shmtx_trylock,1,ngx_shmtx_trylock,ngx_uint_t ngx_shmtx_trylock (ngx_shmtx_t*),core\ngx_shmtx.c,"ngx_uint_t
ngx_shmtx_trylock(ngx_shmtx_t *mtx)
{
    ngx_err_t  err;

    err = ngx_trylock_fd(mtx->fd);

    if (err == 0) {
        return 1;
    }

    if (err == NGX_EAGAIN) {
        return 0;
    }

#if __osf__ /* Tru64 UNIX */

    if (err == NGX_EACCES) {
        return 0;
    }

#endif

    ngx_log_abort(err, ngx_trylock_fd_n "" %s failed"", mtx->name);

    return 0;
}",245.0,271.0,1.0,1.0,27.0,4,3,5,3,0,2,3,3,0,1,,0,2,2,1,1,ngx_uint_t
4515,58403,ngx_shmtx_lock,1,ngx_shmtx_lock,void ngx_shmtx_lock (ngx_shmtx_t*),core\ngx_shmtx.c,"void
ngx_shmtx_lock(ngx_shmtx_t *mtx)
{
    ngx_err_t  err;

    err = ngx_lock_fd(mtx->fd);

    if (err == 0) {
        return;
    }

    ngx_log_abort(err, ngx_lock_fd_n "" %s failed"", mtx->name);
}",274.0,286.0,1.0,1.0,13.0,3,3,3,2,7,2,2,2,0,1,,0,2,2,1,1,void
4516,58422,ngx_shmtx_unlock,1,ngx_shmtx_unlock,void ngx_shmtx_unlock (ngx_shmtx_t*),core\ngx_shmtx.c,"void
ngx_shmtx_unlock(ngx_shmtx_t *mtx)
{
    ngx_err_t  err;

    err = ngx_unlock_fd(mtx->fd);

    if (err == 0) {
        return;
    }

    ngx_log_abort(err, ngx_unlock_fd_n "" %s failed"", mtx->name);
}",289.0,301.0,1.0,1.0,13.0,3,3,3,2,10,2,2,2,0,1,,0,2,2,1,1,void
4517,58441,ngx_shmtx_force_unlock,1,ngx_shmtx_force_unlock,"ngx_uint_t ngx_shmtx_force_unlock (ngx_shmtx_t*,ngx_pid_t)",core\ngx_shmtx.c,"ngx_uint_t
ngx_shmtx_force_unlock(ngx_shmtx_t *mtx, ngx_pid_t pid)
{
    return 0;
}",304.0,308.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
4518,58513,ngx_slab_alloc_pages,1,ngx_slab_alloc_pages,"ngx_slab_page_t* ngx_slab_alloc_pages (ngx_slab_pool_t*,ngx_uint_t)",core\ngx_slab.c,"static ngx_slab_page_t *
ngx_slab_alloc_pages(ngx_slab_pool_t *pool, ngx_uint_t pages)
{
    ngx_slab_page_t  *page, *p;

    for (page = pool->free.next; page != &pool->free; page = page->next) {

        if (page->slab >= pages) {

            if (page->slab > pages) {
                page[page->slab - 1].prev = (uintptr_t) &page[pages];

                page[pages].slab = page->slab - pages;
                page[pages].next = page->next;
                page[pages].prev = page->prev;

                p = (ngx_slab_page_t *) page->prev;
                p->next = &page[pages];
                page->next->prev = (uintptr_t) &page[pages];

            } else {
                p = (ngx_slab_page_t *) page->prev;
                p->next = page->next;
                page->next->prev = page->prev;
            }

            page->slab = pages | NGX_SLAB_PAGE_START;
            page->next = NULL;
            page->prev = NGX_SLAB_PAGE;

            pool->pfree -= pages;

            if (...",677.0,730.0,1.0,33.0,54.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_slab_page_t
4519,58519,ngx_slab_free_pages,1,ngx_slab_free_pages,"void ngx_slab_free_pages (ngx_slab_pool_t*,ngx_slab_page_t*,ngx_uint_t)",core\ngx_slab.c,"static void
ngx_slab_free_pages(ngx_slab_pool_t *pool, ngx_slab_page_t *page,
    ngx_uint_t pages)
{
    ngx_slab_page_t  *prev, *join;

    pool->pfree += pages;

    page->slab = pages--;

    if (pages) {
        ngx_memzero(&page[1], pages * sizeof(ngx_slab_page_t));
    }

    if (page->next) {
        prev = ngx_slab_page_prev(page);
        prev->next = page->next;
        page->next->prev = page->prev;
    }

    join = page + page->slab;

    if (join < pool->last) {

        if (ngx_slab_page_type(join) == NGX_SLAB_PAGE) {

            if (join->next != NULL) {
                pages += join->slab;
                page->slab += join->slab;

                prev = ngx_slab_page_prev(join);
                prev->next = join->next;
                join->next->prev = join->prev;

                join->slab = NGX_SLAB_PAGE_FREE;
                join->next = NULL;
                join->prev = NGX_SLAB_PAGE;
            }
        }
    }

    if (page > pool->pages) {
        joi...",733.0,810.0,1.0,15.0,78.0,0,0,0,0,4,0,1,1,0,0,,0,0,6,3,3,void
4520,58526,ngx_slab_error,1,ngx_slab_error,"void ngx_slab_error (ngx_slab_pool_t*,ngx_uint_t,char*)",core\ngx_slab.c,"static void
ngx_slab_error(ngx_slab_pool_t *pool, ngx_uint_t level, char *text)
{
    ngx_log_error(level, ngx_cycle->log, 0, ""%s%s"", text, pool->log_ctx);
}",813.0,817.0,1.0,1.0,5.0,0,0,0,0,6,0,1,1,0,0,,0,0,6,3,3,void
4521,58536,ngx_slab_sizes_init,1,ngx_slab_sizes_init,void ngx_slab_sizes_init (void),core\ngx_slab.c,"void
ngx_slab_sizes_init(void)
{
    ngx_uint_t  n;

    ngx_slab_max_size = ngx_pagesize / 2;
    ngx_slab_exact_size = ngx_pagesize / (8 * sizeof(uintptr_t));
    for (n = ngx_slab_exact_size; n >>= 1; ngx_slab_exact_shift++) {
        /* void */
    }
}",85.0,95.0,1.0,1.0,11.0,7,4,8,5,1,3,2,2,0,0,,0,3,2,1,1,void
4522,58566,ngx_slab_init,1,ngx_slab_init,void ngx_slab_init (ngx_slab_pool_t*),core\ngx_slab.c,"void
ngx_slab_init(ngx_slab_pool_t *pool)
{
    u_char           *p;
    size_t            size;
    ngx_int_t         m;
    ngx_uint_t        i, n, pages;
    ngx_slab_page_t  *slots, *page;

    pool->min_size = (size_t) 1 << pool->min_shift;

    slots = ngx_slab_slots(pool);

    p = (u_char *) slots;
    size = pool->end - p;

    ngx_slab_junk(p, size);

    n = ngx_pagesize_shift - pool->min_shift;

    for (i = 0; i < n; i++) {
        /* only ""next"" is used in list head */
        slots[i].slab = 0;
        slots[i].next = &slots[i];
        slots[i].prev = 0;
    }

    p += n * sizeof(ngx_slab_page_t);

    pool->stats = (ngx_slab_stat_t *) p;
    ngx_memzero(pool->stats, n * sizeof(ngx_slab_stat_t));

    p += n * sizeof(ngx_slab_stat_t);

    size -= n * (sizeof(ngx_slab_page_t) + sizeof(ngx_slab_stat_t));

    pages = (ngx_uint_t) (size / (ngx_pagesize + sizeof(ngx_slab_page_t)));

    pool->pages = (ngx_slab_page_t *) p;
    ngx_memzero(pool->pages, pages * sizeof(ng...",98.0,165.0,1.0,12.0,68.0,108,17,86,15,0,24,3,3,0,0,,0,24,2,1,1,void
4523,58835,ngx_slab_alloc,1,ngx_slab_alloc,"void* ngx_slab_alloc (ngx_slab_pool_t*,size_t)",core\ngx_slab.c,"void *
ngx_slab_alloc(ngx_slab_pool_t *pool, size_t size)
{
    void  *p;

    ngx_shmtx_lock(&pool->mutex);

    p = ngx_slab_alloc_locked(pool, size);

    ngx_shmtx_unlock(&pool->mutex);

    return p;
}",168.0,180.0,1.0,1.0,13.0,5,3,6,3,10,5,1,1,0,3,,0,3,4,2,2,void*
4524,58859,ngx_slab_alloc_locked,1,ngx_slab_alloc_locked,"void* ngx_slab_alloc_locked (ngx_slab_pool_t*,size_t)",core\ngx_slab.c,"void *
ngx_slab_alloc_locked(ngx_slab_pool_t *pool, size_t size)
{
    size_t            s;
    uintptr_t         p, m, mask, *bitmap;
    ngx_uint_t        i, n, slot, shift, map;
    ngx_slab_page_t  *page, *prev, *slots;

    if (size > ngx_slab_max_size) {

        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle->log, 0,
                       ""slab alloc: %uz"", size);

        page = ngx_slab_alloc_pages(pool, (size >> ngx_pagesize_shift)
                                          + ((size % ngx_pagesize) ? 1 : 0));
        if (page) {
            p = ngx_slab_page_addr(pool, page);

        } else {
            p = 0;
        }

        goto done;
    }

    if (size > pool->min_size) {
        shift = 1;
        for (s = size - 1; s >>= 1; shift++) { /* void */ }
        slot = shift - pool->min_shift;

    } else {
        shift = pool->min_shift;
        slot = 0;
    }

    pool->stats[slot].reqs++;

    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, ngx_cycle->log, 0,
                 ...",183.0,417.0,1.0,16.0,235.0,179,25,175,24,4,18,24,61,4,4,,0,16,4,2,2,void*
4525,59853,ngx_slab_calloc,1,ngx_slab_calloc,"void* ngx_slab_calloc (ngx_slab_pool_t*,size_t)",core\ngx_slab.c,"void *
ngx_slab_calloc(ngx_slab_pool_t *pool, size_t size)
{
    void  *p;

    ngx_shmtx_lock(&pool->mutex);

    p = ngx_slab_calloc_locked(pool, size);

    ngx_shmtx_unlock(&pool->mutex);

    return p;
}",420.0,432.0,1.0,1.0,13.0,5,3,6,3,0,5,1,1,0,3,,0,3,4,2,2,void*
4526,59877,ngx_slab_calloc_locked,1,ngx_slab_calloc_locked,"void* ngx_slab_calloc_locked (ngx_slab_pool_t*,size_t)",core\ngx_slab.c,"void *
ngx_slab_calloc_locked(ngx_slab_pool_t *pool, size_t size)
{
    void  *p;

    p = ngx_slab_alloc_locked(pool, size);
    if (p) {
        ngx_memzero(p, size);
    }

    return p;
}",435.0,446.0,1.0,1.0,12.0,1,1,7,3,1,1,2,2,0,1,,0,1,4,2,2,void*
4527,59897,ngx_slab_free,1,ngx_slab_free,"void ngx_slab_free (ngx_slab_pool_t*,void*)",core\ngx_slab.c,"void
ngx_slab_free(ngx_slab_pool_t *pool, void *p)
{
    ngx_shmtx_lock(&pool->mutex);

    ngx_slab_free_locked(pool, p);

    ngx_shmtx_unlock(&pool->mutex);
}",449.0,457.0,1.0,1.0,9.0,4,2,4,2,0,5,1,1,0,3,,0,2,4,2,2,void
4528,59916,ngx_slab_free_locked,1,ngx_slab_free_locked,"void ngx_slab_free_locked (ngx_slab_pool_t*,void*)",core\ngx_slab.c,"void
ngx_slab_free_locked(ngx_slab_pool_t *pool, void *p)
{
    size_t            size;
    uintptr_t         slab, m, *bitmap;
    ngx_uint_t        i, n, type, slot, shift, map;
    ngx_slab_page_t  *slots, *page;

    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle->log, 0, ""slab free: %p"", p);

    if ((u_char *) p < pool->start || (u_char *) p > pool->end) {
        ngx_slab_error(pool, NGX_LOG_ALERT, ""ngx_slab_free(): outside of pool"");
        goto fail;
    }

    n = ((u_char *) p - pool->start) >> ngx_pagesize_shift;
    page = &pool->pages[n];
    slab = page->slab;
    type = ngx_slab_page_type(page);

    switch (type) {

    case NGX_SLAB_SMALL:

        shift = slab & NGX_SLAB_SHIFT_MASK;
        size = (size_t) 1 << shift;

        if ((uintptr_t) p & (size - 1)) {
            goto wrong_chunk;
        }

        n = ((uintptr_t) p & (ngx_pagesize - 1)) >> shift;
        m = (uintptr_t) 1 << (n % (8 * sizeof(uintptr_t)));
        n /= 8 * sizeof(uintptr_t);
        bit...",460.0,674.0,1.0,11.0,215.0,231,25,198,24,1,23,39,49,2,9,,0,14,4,2,2,void
4529,61272,ngx_spinlock,1,ngx_spinlock,"void ngx_spinlock (ngx_atomic_t*,ngx_atomic_int_t,ngx_uint_t)",core\ngx_spinlock.c,"void
ngx_spinlock(ngx_atomic_t *lock, ngx_atomic_int_t value, ngx_uint_t spin)
{

#if (NGX_HAVE_ATOMIC_OPS)

    ngx_uint_t  i, n;

    for ( ;; ) {

        if (*lock == 0 && ngx_atomic_cmp_set(lock, 0, value)) {
            return;
        }

        if (ngx_ncpu > 1) {

            for (n = 1; n < spin; n <<= 1) {

                for (i = 0; i < n; i++) {
                    ngx_cpu_pause();
                }

                if (*lock == 0 && ngx_atomic_cmp_set(lock, 0, value)) {
                    return;
                }
            }
        }

        ngx_sched_yield();
    }

#else

#if (NGX_THREADS)

#error ngx_spinlock() or ngx_atomic_cmp_set() are not defined !

#endif

#endif

}",12.0,53.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4530,61288,ngx_sprintf_num,1,ngx_sprintf_num,"u_char* ngx_sprintf_num (u_char*,u_char*,uint64_t,u_char,ngx_uint_t,ngx_uint_t)",core\ngx_string.c,"static u_char *
ngx_sprintf_num(u_char *buf, u_char *last, uint64_t ui64, u_char zero,
    ngx_uint_t hexadecimal, ngx_uint_t width)
{
    u_char         *p, temp[NGX_INT64_LEN + 1];
                       /*
                        * we need temp[NGX_INT64_LEN] only,
                        * but icc issues the warning
                        */
    size_t          len;
    uint32_t        ui32;
    static u_char   hex[] = ""0123456789abcdef"";
    static u_char   HEX[] = ""0123456789ABCDEF"";

    p = temp + NGX_INT64_LEN;

    if (hexadecimal == 0) {

        if (ui64 <= (uint64_t) NGX_MAX_UINT32_VALUE) {

            /*
             * To divide 64-bit numbers and to find remainders
             * on the x86 platform gcc and icc call the libc functions
             * [u]divdi3() and [u]moddi3(), they call another function
             * in its turn.  On FreeBSD it is the qdivrem() function,
             * its source code is about 170 lines of the code.
             * The glibc counte...",484.0,567.0,1.0,1.0,84.0,0,0,0,0,3,0,1,1,0,0,,0,0,12,6,6,u_char
4531,61298,ngx_sprintf_str,1,ngx_sprintf_str,"u_char* ngx_sprintf_str (u_char*,u_char*,u_char*,size_t,ngx_uint_t)",core\ngx_string.c,"static u_char *
ngx_sprintf_str(u_char *buf, u_char *last, u_char *src, size_t len,
    ngx_uint_t hexadecimal)
{
    static u_char   hex[] = ""0123456789abcdef"";
    static u_char   HEX[] = ""0123456789ABCDEF"";

    if (hexadecimal == 0) {

        if (len == (size_t) -1) {
            while (*src && buf < last) {
                *buf++ = *src++;
            }

        } else {
            len = ngx_min((size_t) (last - buf), len);
            buf = ngx_cpymem(buf, src, len);
        }

    } else if (hexadecimal == 1) {

        if (len == (size_t) -1) {

            while (*src && buf < last - 1) {
                *buf++ = hex[*src >> 4];
                *buf++ = hex[*src++ & 0xf];
            }

        } else {

            while (len-- && buf < last - 1) {
                *buf++ = hex[*src >> 4];
                *buf++ = hex[*src++ & 0xf];
            }
        }

    } else { /* hexadecimal == 2 */

        if (len == (size_t) -1) {

            while (*src && buf < last - 1) {...",570.0,625.0,1.0,1.0,56.0,0,0,0,0,3,0,1,1,0,0,,0,0,10,5,5,u_char
4532,61307,ngx_encode_base64_internal,1,ngx_encode_base64_internal,"void ngx_encode_base64_internal (ngx_str_t*,ngx_str_t*,u_char*,ngx_uint_t)",core\ngx_string.c,"static void
ngx_encode_base64_internal(ngx_str_t *dst, ngx_str_t *src, const u_char *basis,
    ngx_uint_t padding)
{
    u_char         *d, *s;
    size_t          len;

    len = src->len;
    s = src->data;
    d = dst->data;

    while (len > 2) {
        *d++ = basis[(s[0] >> 2) & 0x3f];
        *d++ = basis[((s[0] & 3) << 4) | (s[1] >> 4)];
        *d++ = basis[((s[1] & 0x0f) << 2) | (s[2] >> 6)];
        *d++ = basis[s[2] & 0x3f];

        s += 3;
        len -= 3;
    }

    if (len) {
        *d++ = basis[(s[0] >> 2) & 0x3f];

        if (len == 1) {
            *d++ = basis[(s[0] & 3) << 4];
            if (padding) {
                *d++ = '=';
            }

        } else {
            *d++ = basis[((s[0] & 3) << 4) | (s[1] >> 4)];
            *d++ = basis[(s[1] & 0x0f) << 2];
        }

        if (padding) {
            *d++ = '=';
        }
    }

    dst->len = d - dst->data;
}",1206.0,1247.0,1.0,1.0,42.0,0,0,0,0,2,0,1,1,0,0,,0,0,8,4,4,void
4533,61315,ngx_decode_base64_internal,1,ngx_decode_base64_internal,"ngx_int_t ngx_decode_base64_internal (ngx_str_t*,ngx_str_t*,u_char*)",core\ngx_string.c,"static ngx_int_t
ngx_decode_base64_internal(ngx_str_t *dst, ngx_str_t *src, const u_char *basis)
{
    size_t          len;
    u_char         *d, *s;

    for (len = 0; len < src->len; len++) {
        if (src->data[len] == '=') {
            break;
        }

        if (basis[src->data[len]] == 77) {
            return NGX_ERROR;
        }
    }

    if (len % 4 == 1) {
        return NGX_ERROR;
    }

    s = src->data;
    d = dst->data;

    while (len > 3) {
        *d++ = (u_char) (basis[s[0]] << 2 | basis[s[1]] >> 4);
        *d++ = (u_char) (basis[s[1]] << 4 | basis[s[2]] >> 2);
        *d++ = (u_char) (basis[s[2]] << 6 | basis[s[3]]);

        s += 4;
        len -= 4;
    }

    if (len > 1) {
        *d++ = (u_char) (basis[s[0]] << 2 | basis[s[1]] >> 4);
    }

    if (len > 2) {
        *d++ = (u_char) (basis[s[1]] << 4 | basis[s[2]] >> 2);
    }

    dst->len = d - dst->data;

    return NGX_OK;
}",1304.0,1347.0,1.0,1.0,44.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4534,61322,ngx_strlow,1,ngx_strlow,"void ngx_strlow (u_char*,u_char*,size_t)",core\ngx_string.c,"void
ngx_strlow(u_char *dst, u_char *src, size_t n)
{
    while (n) {
        *dst = ngx_tolower(*src);
        dst++;
        src++;
        n--;
    }
}",22.0,31.0,1.0,1.0,10.0,6,4,6,3,6,0,2,2,0,0,,0,0,6,3,3,void
4535,61344,ngx_strnlen,1,ngx_strnlen,"size_t ngx_strnlen (u_char*,size_t)",core\ngx_string.c,"size_t
ngx_strnlen(u_char *p, size_t n)
{
    size_t  i;

    for (i = 0; i < n; i++) {

        if (p[i] == '\0') {
            return i;
        }
    }

    return n;
}",34.0,47.0,1.0,1.0,14.0,4,4,7,3,0,0,3,4,0,0,,0,0,4,2,2,size_t
4536,61373,ngx_cpystrn,1,ngx_cpystrn,"u_char ngx_cpystrn (u_char*,u_char*,size_t)",core\ngx_string.c,"u_char *
ngx_cpystrn(u_char *dst, u_char *src, size_t n)
{
    if (n == 0) {
        return dst;
    }

    while (--n) {
        *dst = *src;

        if (*dst == '\0') {
            return dst;
        }

        dst++;
        src++;
    }

    *dst = '\0';

    return dst;
}",50.0,71.0,1.0,1.0,22.0,11,5,11,3,14,0,4,5,0,0,,0,0,6,3,3,u_char
4537,61414,ngx_pstrdup,1,ngx_pstrdup,"u_char ngx_pstrdup (ngx_pool_t*,ngx_str_t*)",core\ngx_string.c,"u_char *
ngx_pstrdup(ngx_pool_t *pool, ngx_str_t *src)
{
    u_char  *dst;

    dst = ngx_pnalloc(pool, src->len);
    if (dst == NULL) {
        return NULL;
    }

    ngx_memcpy(dst, src->data, src->len);

    return dst;
}",74.0,87.0,1.0,1.0,14.0,5,3,10,4,6,4,2,2,0,1,,0,4,4,2,2,u_char
4538,61447,ngx_sprintf,1,ngx_sprintf,"ANY ngx_sprintf (u_char*,char*...)",core\ngx_string.c,"ngx_sprintf(u_char *buf, const char *fmt, ...)
{
    u_char   *p;
    va_list   args;

    va_start(args, fmt);
    p = ngx_vslprintf(buf, (void *) -1, fmt, args);
    va_end(args);

    return p;
}",123.0,133.0,1.0,1.0,11.0,3,3,8,4,28,1,1,1,0,1,,0,1,4,2,2,ANY
4539,61474,ngx_snprintf,1,ngx_snprintf,"ANY ngx_snprintf (u_char*,size_t,char*...)",core\ngx_string.c,"ngx_snprintf(u_char *buf, size_t max, const char *fmt, ...)
{
    u_char   *p;
    va_list   args;

    va_start(args, fmt);
    p = ngx_vslprintf(buf, buf + max, fmt, args);
    va_end(args);

    return p;
}",137.0,147.0,1.0,1.0,11.0,2,2,10,5,8,1,1,1,0,1,,0,1,6,3,3,ANY
4540,61501,ngx_slprintf,1,ngx_slprintf,"ANY ngx_slprintf (u_char*,u_char*,char*...)",core\ngx_string.c,"ngx_slprintf(u_char *buf, u_char *last, const char *fmt, ...)
{
    u_char   *p;
    va_list   args;

    va_start(args, fmt);
    p = ngx_vslprintf(buf, last, fmt, args);
    va_end(args);

    return p;
}",151.0,161.0,1.0,1.0,11.0,1,1,9,5,3,1,1,1,0,1,,0,1,6,3,3,ANY
4541,61524,ngx_vslprintf,1,ngx_vslprintf,"u_char ngx_vslprintf (u_char*,u_char*,char*,va_list)",core\ngx_string.c,"u_char *
ngx_vslprintf(u_char *buf, u_char *last, const char *fmt, va_list args)
{
    u_char                *p, zero;
    int                    d;
    double                 f;
    size_t                 slen;
    int64_t                i64;
    uint64_t               ui64, frac;
    ngx_msec_t             ms;
    ngx_uint_t             width, sign, hex, max_width, frac_width, scale, n;
    ngx_str_t             *v;
    ngx_variable_value_t  *vv;

    while (*fmt && buf < last) {

        /*
         * ""buf < last"" means that we could copy at least one character:
         * the plain character, ""%%"", ""%c"", and minus without the checking
         */

        if (*fmt == '%') {

            i64 = 0;
            ui64 = 0;

            zero = (u_char) ((*++fmt == '0') ? '0' : ' ');
            width = 0;
            sign = 1;
            hex = 0;
            max_width = 0;
            frac_width = 0;
            slen = (size_t) -1;

            while (*fmt >= '0' && *fmt <= '9') {
   ...",164.0,481.0,1.0,1.0,318.0,163,19,188,39,8,10,56,96,0,6,,0,10,8,4,4,u_char
4542,62603,ngx_strcasecmp,1,ngx_strcasecmp,"ngx_int_t ngx_strcasecmp (u_char*,u_char*)",core\ngx_string.c,"ngx_int_t
ngx_strcasecmp(u_char *s1, u_char *s2)
{
    ngx_uint_t  c1, c2;

    for ( ;; ) {
        c1 = (ngx_uint_t) *s1++;
        c2 = (ngx_uint_t) *s2++;

        c1 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;
        c2 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

        if (c1 == c2) {

            if (c1) {
                continue;
            }

            return 0;
        }

        return c1 - c2;
    }
}",635.0,658.0,1.0,1.0,24.0,20,10,21,5,5,0,5,7,0,0,,0,0,4,2,2,ngx_int_t
4543,62669,ngx_strncasecmp,1,ngx_strncasecmp,"ngx_int_t ngx_strncasecmp (u_char*,u_char*,size_t)",core\ngx_string.c,"ngx_int_t
ngx_strncasecmp(u_char *s1, u_char *s2, size_t n)
{
    ngx_uint_t  c1, c2;

    while (n) {
        c1 = (ngx_uint_t) *s1++;
        c2 = (ngx_uint_t) *s2++;

        c1 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;
        c2 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

        if (c1 == c2) {

            if (c1) {
                n--;
                continue;
            }

            return 0;
        }

        return c1 - c2;
    }

    return 0;
}",661.0,687.0,1.0,1.0,27.0,21,11,23,6,13,0,5,7,0,0,,0,0,6,3,3,ngx_int_t
4544,62740,ngx_strnstr,1,ngx_strnstr,"u_char ngx_strnstr (u_char*,char*,size_t)",core\ngx_string.c,"u_char *
ngx_strnstr(u_char *s1, char *s2, size_t len)
{
    u_char  c1, c2;
    size_t  n;

    c2 = *(u_char *) s2++;

    n = ngx_strlen(s2);

    do {
        do {
            if (len-- == 0) {
                return NULL;
            }

            c1 = *s1++;

            if (c1 == 0) {
                return NULL;
            }

        } while (c1 != c2);

        if (n > len) {
            return NULL;
        }

    } while (ngx_strncmp(s1, (u_char *) s2, n) != 0);

    return --s1;
}",690.0,721.0,1.0,1.0,32.0,16,9,19,7,0,0,6,12,0,0,,0,0,6,3,3,u_char
4545,62806,ngx_strstrn,1,ngx_strstrn,"u_char ngx_strstrn (u_char*,char*,size_t)",core\ngx_string.c,"u_char *
ngx_strstrn(u_char *s1, char *s2, size_t n)
{
    u_char  c1, c2;

    c2 = *(u_char *) s2++;

    do {
        do {
            c1 = *s1++;

            if (c1 == 0) {
                return NULL;
            }

        } while (c1 != c2);

    } while (ngx_strncmp(s1, (u_char *) s2, n) != 0);

    return --s1;
}",730.0,750.0,1.0,1.0,21.0,12,7,12,6,0,0,4,7,0,0,,0,0,6,3,3,u_char
4546,62852,ngx_strcasestrn,1,ngx_strcasestrn,"u_char ngx_strcasestrn (u_char*,char*,size_t)",core\ngx_string.c,"u_char *
ngx_strcasestrn(u_char *s1, char *s2, size_t n)
{
    ngx_uint_t  c1, c2;

    c2 = (ngx_uint_t) *s2++;
    c2 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

    do {
        do {
            c1 = (ngx_uint_t) *s1++;

            if (c1 == 0) {
                return NULL;
            }

            c1 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

        } while (c1 != c2);

    } while (ngx_strncasecmp(s1, (u_char *) s2, n) != 0);

    return --s1;
}",753.0,776.0,1.0,1.0,24.0,23,12,24,7,0,1,4,7,1,1,,0,1,6,3,3,u_char
4547,62926,ngx_strlcasestrn,1,ngx_strlcasestrn,"u_char ngx_strlcasestrn (u_char*,u_char*,u_char*,size_t)",core\ngx_string.c,"u_char *
ngx_strlcasestrn(u_char *s1, u_char *last, u_char *s2, size_t n)
{
    ngx_uint_t  c1, c2;

    c2 = (ngx_uint_t) *s2++;
    c2 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;
    last -= n;

    do {
        do {
            if (s1 >= last) {
                return NULL;
            }

            c1 = (ngx_uint_t) *s1++;

            c1 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

        } while (c1 != c2);

    } while (ngx_strncasecmp(s1, s2, n) != 0);

    return --s1;
}",785.0,809.0,1.0,1.0,25.0,23,11,27,8,0,1,4,7,1,1,,0,1,8,4,4,u_char
4548,63002,ngx_rstrncmp,1,ngx_rstrncmp,"ngx_int_t ngx_rstrncmp (u_char*,u_char*,size_t)",core\ngx_string.c,"ngx_int_t
ngx_rstrncmp(u_char *s1, u_char *s2, size_t n)
{
    if (n == 0) {
        return 0;
    }

    n--;

    for ( ;; ) {
        if (s1[n] != s2[n]) {
            return s1[n] - s2[n];
        }

        if (n == 0) {
            return 0;
        }

        n--;
    }
}",812.0,832.0,1.0,1.0,21.0,10,5,12,3,1,0,5,7,0,0,,0,0,6,3,3,ngx_int_t
4549,63047,ngx_rstrncasecmp,1,ngx_rstrncasecmp,"ngx_int_t ngx_rstrncasecmp (u_char*,u_char*,size_t)",core\ngx_string.c,"ngx_int_t
ngx_rstrncasecmp(u_char *s1, u_char *s2, size_t n)
{
    u_char  c1, c2;

    if (n == 0) {
        return 0;
    }

    n--;

    for ( ;; ) {
        c1 = s1[n];
        if (c1 >= 'a' && c1 <= 'z') {
            c1 -= 'a' - 'A';
        }

        c2 = s2[n];
        if (c2 >= 'a' && c2 <= 'z') {
            c2 -= 'a' - 'A';
        }

        if (c1 != c2) {
            return c1 - c2;
        }

        if (n == 0) {
            return 0;
        }

        n--;
    }
}",835.0,867.0,1.0,1.0,33.0,20,10,20,5,1,0,7,11,0,0,,0,0,6,3,3,ngx_int_t
4550,63124,ngx_memn2cmp,1,ngx_memn2cmp,"ngx_int_t ngx_memn2cmp (u_char*,u_char*,size_t,size_t)",core\ngx_string.c,"ngx_int_t
ngx_memn2cmp(u_char *s1, u_char *s2, size_t n1, size_t n2)
{
    size_t     n;
    ngx_int_t  m, z;

    if (n1 <= n2) {
        n = n1;
        z = -1;

    } else {
        n = n2;
        z = 1;
    }

    m = ngx_memcmp(s1, s2, n);

    if (m || n1 == n2) {
        return m;
    }

    return z;
}",870.0,892.0,1.0,1.0,23.0,7,5,14,7,0,0,3,3,0,0,,0,0,8,4,4,ngx_int_t
4551,63172,ngx_dns_strcmp,1,ngx_dns_strcmp,"ngx_int_t ngx_dns_strcmp (u_char*,u_char*)",core\ngx_string.c,"ngx_int_t
ngx_dns_strcmp(u_char *s1, u_char *s2)
{
    ngx_uint_t  c1, c2;

    for ( ;; ) {
        c1 = (ngx_uint_t) *s1++;
        c2 = (ngx_uint_t) *s2++;

        c1 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;
        c2 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

        if (c1 == c2) {

            if (c1) {
                continue;
            }

            return 0;
        }

        /* in ASCII '.' > '-', but we need '.' to be the lowest character */

        c1 = (c1 == '.') ? ' ' : c1;
        c2 = (c2 == '.') ? ' ' : c2;

        return c1 - c2;
    }
}",895.0,923.0,1.0,1.0,29.0,26,10,27,5,4,0,5,7,0,0,,0,0,4,2,2,ngx_int_t
4552,63254,ngx_filename_cmp,1,ngx_filename_cmp,"ngx_int_t ngx_filename_cmp (u_char*,u_char*,size_t)",core\ngx_string.c,"ngx_int_t
ngx_filename_cmp(u_char *s1, u_char *s2, size_t n)
{
    ngx_uint_t  c1, c2;

    while (n) {
        c1 = (ngx_uint_t) *s1++;
        c2 = (ngx_uint_t) *s2++;

#if (NGX_HAVE_CASELESS_FILESYSTEM)
        c1 = tolower(c1);
        c2 = tolower(c2);
#endif

        if (c1 == c2) {

            if (c1) {
                n--;
                continue;
            }

            return 0;
        }

        /* we need '/' to be the lowest character */

        if (c1 == 0 || c2 == 0) {
            return c1 - c2;
        }

        c1 = (c1 == '/') ? 0 : c1;
        c2 = (c2 == '/') ? 0 : c2;

        return c1 - c2;
    }

    return 0;
}",926.0,963.0,1.0,1.0,38.0,19,8,23,6,0,0,6,9,0,0,,0,0,6,3,3,ngx_int_t
4553,63326,ngx_atoi,1,ngx_atoi,"ngx_int_t ngx_atoi (u_char*,size_t)",core\ngx_string.c,"ngx_int_t
ngx_atoi(u_char *line, size_t n)
{
    ngx_int_t  value, cutoff, cutlim;

    if (n == 0) {
        return NGX_ERROR;
    }

    cutoff = NGX_MAX_INT_T_VALUE / 10;
    cutlim = NGX_MAX_INT_T_VALUE % 10;

    for (value = 0; n--; line++) {
        if (*line < '0' || *line > '9') {
            return NGX_ERROR;
        }

        if (value >= cutoff && (value > cutoff || *line - '0' > cutlim)) {
            return NGX_ERROR;
        }

        value = value * 10 + (*line - '0');
    }

    return value;
}",966.0,991.0,1.0,1.0,26.0,24,14,22,7,6,0,5,7,0,0,,0,0,4,2,2,ngx_int_t
4554,63405,ngx_atofp,1,ngx_atofp,"ngx_int_t ngx_atofp (u_char*,size_t,size_t)",core\ngx_string.c,"ngx_int_t
ngx_atofp(u_char *line, size_t n, size_t point)
{
    ngx_int_t   value, cutoff, cutlim;
    ngx_uint_t  dot;

    if (n == 0) {
        return NGX_ERROR;
    }

    cutoff = NGX_MAX_INT_T_VALUE / 10;
    cutlim = NGX_MAX_INT_T_VALUE % 10;

    dot = 0;

    for (value = 0; n--; line++) {

        if (point == 0) {
            return NGX_ERROR;
        }

        if (*line == '.') {
            if (dot) {
                return NGX_ERROR;
            }

            dot = 1;
            continue;
        }

        if (*line < '0' || *line > '9') {
            return NGX_ERROR;
        }

        if (value >= cutoff && (value > cutoff || *line - '0' > cutlim)) {
            return NGX_ERROR;
        }

        value = value * 10 + (*line - '0');
        point -= dot;
    }

    while (point--) {
        if (value > cutoff) {
            return NGX_ERROR;
        }

        value = value * 10;
    }

    return value;
}",996.0,1047.0,1.0,1.0,52.0,34,15,37,9,0,0,11,17,0,0,,0,0,6,3,3,ngx_int_t
4555,63530,ngx_atosz,1,ngx_atosz,"ssize_t ngx_atosz (u_char*,size_t)",core\ngx_string.c,"ssize_t
ngx_atosz(u_char *line, size_t n)
{
    ssize_t  value, cutoff, cutlim;

    if (n == 0) {
        return NGX_ERROR;
    }

    cutoff = NGX_MAX_SIZE_T_VALUE / 10;
    cutlim = NGX_MAX_SIZE_T_VALUE % 10;

    for (value = 0; n--; line++) {
        if (*line < '0' || *line > '9') {
            return NGX_ERROR;
        }

        if (value >= cutoff && (value > cutoff || *line - '0' > cutlim)) {
            return NGX_ERROR;
        }

        value = value * 10 + (*line - '0');
    }

    return value;
}",1050.0,1075.0,1.0,1.0,26.0,24,14,22,7,1,0,5,7,0,0,,0,0,4,2,2,ssize_t
4556,63609,ngx_atoof,1,ngx_atoof,"off_t ngx_atoof (u_char*,size_t)",core\ngx_string.c,"off_t
ngx_atoof(u_char *line, size_t n)
{
    off_t  value, cutoff, cutlim;

    if (n == 0) {
        return NGX_ERROR;
    }

    cutoff = NGX_MAX_OFF_T_VALUE / 10;
    cutlim = NGX_MAX_OFF_T_VALUE % 10;

    for (value = 0; n--; line++) {
        if (*line < '0' || *line > '9') {
            return NGX_ERROR;
        }

        if (value >= cutoff && (value > cutoff || *line - '0' > cutlim)) {
            return NGX_ERROR;
        }

        value = value * 10 + (*line - '0');
    }

    return value;
}",1078.0,1103.0,1.0,1.0,26.0,24,14,22,7,2,0,5,7,0,0,,0,0,4,2,2,off_t
4557,63688,ngx_atotm,1,ngx_atotm,"time_t ngx_atotm (u_char*,size_t)",core\ngx_string.c,"time_t
ngx_atotm(u_char *line, size_t n)
{
    time_t  value, cutoff, cutlim;

    if (n == 0) {
        return NGX_ERROR;
    }

    cutoff = NGX_MAX_TIME_T_VALUE / 10;
    cutlim = NGX_MAX_TIME_T_VALUE % 10;

    for (value = 0; n--; line++) {
        if (*line < '0' || *line > '9') {
            return NGX_ERROR;
        }

        if (value >= cutoff && (value > cutoff || *line - '0' > cutlim)) {
            return NGX_ERROR;
        }

        value = value * 10 + (*line - '0');
    }

    return value;
}",1106.0,1131.0,1.0,1.0,26.0,24,14,22,7,1,0,5,7,0,0,,0,0,4,2,2,time_t
4558,63767,ngx_hextoi,1,ngx_hextoi,"ngx_int_t ngx_hextoi (u_char*,size_t)",core\ngx_string.c,"ngx_int_t
ngx_hextoi(u_char *line, size_t n)
{
    u_char     c, ch;
    ngx_int_t  value, cutoff;

    if (n == 0) {
        return NGX_ERROR;
    }

    cutoff = NGX_MAX_INT_T_VALUE / 16;

    for (value = 0; n--; line++) {
        if (value > cutoff) {
            return NGX_ERROR;
        }

        ch = *line;

        if (ch >= '0' && ch <= '9') {
            value = value * 16 + (ch - '0');
            continue;
        }

        c = (u_char) (ch | 0x20);

        if (c >= 'a' && c <= 'f') {
            value = value * 16 + (c - 'a' + 10);
            continue;
        }

        return NGX_ERROR;
    }

    return value;
}",1134.0,1169.0,1.0,1.0,36.0,25,13,25,8,0,0,8,9,0,0,,0,0,4,2,2,ngx_int_t
4559,63860,ngx_hex_dump,1,ngx_hex_dump,"u_char ngx_hex_dump (u_char*,u_char*,size_t)",core\ngx_string.c,"u_char *
ngx_hex_dump(u_char *dst, u_char *src, size_t len)
{
    static u_char  hex[] = ""0123456789abcdef"";

    while (len--) {
        *dst++ = hex[*src >> 4];
        *dst++ = hex[*src++ & 0xf];
    }

    return dst;
}",1172.0,1183.0,1.0,1.0,12.0,15,7,9,4,2,0,2,2,0,0,,0,0,6,3,3,u_char
4560,63898,ngx_encode_base64,1,ngx_encode_base64,"void ngx_encode_base64 (ngx_str_t*,ngx_str_t*)",core\ngx_string.c,"void
ngx_encode_base64(ngx_str_t *dst, ngx_str_t *src)
{
    static u_char   basis64[] =
            ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"";

    ngx_encode_base64_internal(dst, src, basis64, 1);
}",1186.0,1193.0,1.0,1.0,8.0,1,1,4,3,0,1,1,1,0,1,,0,0,4,2,2,void
4561,63913,ngx_encode_base64url,1,ngx_encode_base64url,"void ngx_encode_base64url (ngx_str_t*,ngx_str_t*)",core\ngx_string.c,"void
ngx_encode_base64url(ngx_str_t *dst, ngx_str_t *src)
{
    static u_char   basis64[] =
            ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"";

    ngx_encode_base64_internal(dst, src, basis64, 0);
}",1196.0,1203.0,1.0,1.0,8.0,1,1,4,3,0,1,1,1,0,1,,0,0,4,2,2,void
4562,64120,ngx_decode_base64,1,ngx_decode_base64,"ngx_int_t ngx_decode_base64 (ngx_str_t*,ngx_str_t*)",core\ngx_string.c,"ngx_int_t
ngx_decode_base64(ngx_str_t *dst, ngx_str_t *src)
{
    static u_char   basis64[] = {
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 62, 77, 77, 77, 63,
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 77, 77, 77, 77, 77, 77,
        77,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 77, 77, 77, 77, 77,
        77, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 77, 77, 77, 77, 77,

        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, ...",1250.0,1274.0,1.0,1.0,25.0,2,2,4,3,1,1,1,1,0,1,,0,0,4,2,2,ngx_int_t
4563,64391,ngx_decode_base64url,1,ngx_decode_base64url,"ngx_int_t ngx_decode_base64url (ngx_str_t*,ngx_str_t*)",core\ngx_string.c,"ngx_int_t
ngx_decode_base64url(ngx_str_t *dst, ngx_str_t *src)
{
    static u_char   basis64[] = {
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 62, 77, 77,
        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 77, 77, 77, 77, 77, 77,
        77,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 77, 77, 77, 77, 63,
        77, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
        41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 77, 77, 77, 77, 77,

        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
        77, 77, 77, 77, 77, 77, 7...",1277.0,1301.0,1.0,1.0,25.0,2,2,4,3,1,1,1,1,0,1,,0,0,4,2,2,ngx_int_t
4564,64857,ngx_utf8_decode,1,ngx_utf8_decode,"uint32_t ngx_utf8_decode (u_char**,size_t)",core\ngx_string.c,"uint32_t
ngx_utf8_decode(u_char **p, size_t n)
{
    size_t    len;
    uint32_t  u, i, valid;

    u = **p;

    if (u >= 0xf0) {

        u &= 0x07;
        valid = 0xffff;
        len = 3;

    } else if (u >= 0xe0) {

        u &= 0x0f;
        valid = 0x7ff;
        len = 2;

    } else if (u >= 0xc2) {

        u &= 0x1f;
        valid = 0x7f;
        len = 1;

    } else {
        (*p)++;
        return 0xffffffff;
    }

    if (n - 1 < len) {
        return 0xfffffffe;
    }

    (*p)++;

    while (len) {
        i = *(*p)++;

        if (i < 0x80) {
            return 0xffffffff;
        }

        u = (u << 6) | (i & 0x3f);

        len--;
    }

    if (u > valid) {
        return u;
    }

    return 0xffffffff;
}",1359.0,1413.0,1.0,1.0,55.0,21,11,20,6,2,0,6,7,0,0,,0,0,4,2,2,uint32_t
4565,64973,ngx_utf8_length,1,ngx_utf8_length,"size_t ngx_utf8_length (u_char*,size_t)",core\ngx_string.c,"size_t
ngx_utf8_length(u_char *p, size_t n)
{
    u_char  c, *last;
    size_t  len;

    last = p + n;

    for (len = 0; p < last; len++) {

        c = *p;

        if (c < 0x80) {
            p++;
            continue;
        }

        if (ngx_utf8_decode(&p, last - p) > 0x10ffff) {
            /* invalid UTF-8 */
            return n;
        }
    }

    return len;
}",1416.0,1440.0,1.0,1.0,25.0,11,8,15,5,0,1,5,6,1,1,,0,1,4,2,2,size_t
4566,65024,ngx_utf8_cpystrn,1,ngx_utf8_cpystrn,"u_char ngx_utf8_cpystrn (u_char*,u_char*,size_t,size_t)",core\ngx_string.c,"u_char *
ngx_utf8_cpystrn(u_char *dst, u_char *src, size_t n, size_t len)
{
    u_char  c, *next;

    if (n == 0) {
        return dst;
    }

    while (--n) {

        c = *src;
        *dst = c;

        if (c < 0x80) {

            if (c != '\0') {
                dst++;
                src++;
                len--;

                continue;
            }

            return dst;
        }

        next = src;

        if (ngx_utf8_decode(&next, len) > 0x10ffff) {
            /* invalid UTF-8 */
            break;
        }

        while (src < next) {
            *dst++ = *src++;
            len--;
        }
    }

    *dst = '\0';

    return dst;
}",1443.0,1486.0,1.0,1.0,44.0,23,10,24,6,0,1,9,12,1,1,,0,1,8,4,4,u_char
4567,65104,ngx_escape_uri,1,ngx_escape_uri,"uintptr_t ngx_escape_uri (u_char*,u_char*,size_t,ngx_uint_t)",core\ngx_string.c,"uintptr_t
ngx_escape_uri(u_char *dst, u_char *src, size_t size, ngx_uint_t type)
{
    ngx_uint_t      n;
    uint32_t       *escape;
    static u_char   hex[] = ""0123456789ABCDEF"";

    /*
     * Per RFC 3986 only the following chars are allowed in URIs unescaped:
     *
     * unreserved    = ALPHA / DIGIT / ""-"" / ""."" / ""_"" / ""~""
     * gen-delims    = "":"" / ""/"" / ""?"" / ""#"" / ""["" / ""]"" / ""@""
     * sub-delims    = ""!"" / ""$"" / ""&"" / ""'"" / ""("" / "")""
     *               / ""*"" / ""+"" / "","" / "";"" / ""=""
     *
     * And ""%"" can appear as a part of escaping itself.  The following
     * characters are not allowed and need to be escaped: %00-%1F, %7F-%FF,
     * "" "", """""", ""<"", "">"", ""\"", ""^"", ""`"", ""{"", ""|"", ""}"".
     */

                    /* "" "", ""#"", ""%"", ""?"", not allowed */

    static uint32_t   uri[] = {
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */

                    /* ?>=< ;:98 7654 3210  /.-, +*)( '&%$ #""!  */
        0xd000002d, /* 1101 0000 0000 0000  00...",1489.0,1668.0,1.0,1.0,180.0,55,11,43,15,2,0,6,10,0,0,,0,0,8,4,4,uintptr_t
4568,65302,ngx_unescape_uri,1,ngx_unescape_uri,"void ngx_unescape_uri (u_char**,u_char**,size_t,ngx_uint_t)",core\ngx_string.c,"void
ngx_unescape_uri(u_char **dst, u_char **src, size_t size, ngx_uint_t type)
{
    u_char  *d, *s, ch, c, decoded;
    enum {
        sw_usual = 0,
        sw_quoted,
        sw_quoted_second
    } state;

    d = *dst;
    s = *src;

    state = 0;
    decoded = 0;

    while (size--) {

        ch = *s++;

        switch (state) {
        case sw_usual:
            if (ch == '?'
                && (type & (NGX_UNESCAPE_URI|NGX_UNESCAPE_REDIRECT)))
            {
                *d++ = ch;
                goto done;
            }

            if (ch == '%') {
                state = sw_quoted;
                break;
            }

            *d++ = ch;
            break;

        case sw_quoted:

            if (ch >= '0' && ch <= '9') {
                decoded = (u_char) (ch - '0');
                state = sw_quoted_second;
                break;
            }

            c = (u_char) (ch | 0x20);
            if (c >= 'a' && c <= 'f') {
                decoded = (u_char) (c - ...",1671.0,1798.0,1.0,1.0,128.0,121,15,96,15,0,0,32,54,0,0,,0,0,8,4,4,void
4569,65623,ngx_escape_html,1,ngx_escape_html,"uintptr_t ngx_escape_html (u_char*,u_char*,size_t)",core\ngx_string.c,"uintptr_t
ngx_escape_html(u_char *dst, u_char *src, size_t size)
{
    u_char      ch;
    ngx_uint_t  len;

    if (dst == NULL) {

        len = 0;

        while (size) {
            switch (*src++) {

            case '<':
                len += sizeof(""&lt;"") - 2;
                break;

            case '>':
                len += sizeof(""&gt;"") - 2;
                break;

            case '&':
                len += sizeof(""&amp;"") - 2;
                break;

            case '""':
                len += sizeof(""&quot;"") - 2;
                break;

            default:
                break;
            }
            size--;
        }

        return (uintptr_t) len;
    }

    while (size) {
        ch = *src++;

        switch (ch) {

        case '<':
            *dst++ = '&'; *dst++ = 'l'; *dst++ = 't'; *dst++ = ';';
            break;

        case '>':
            *dst++ = '&'; *dst++ = 'g'; *dst++ = 't'; *dst++ = ';';
            break;

        case '&':
           ...",1801.0,1870.0,1.0,1.0,70.0,83,9,38,6,0,0,16,10,0,0,,0,0,6,3,3,uintptr_t
4570,65823,ngx_escape_json,1,ngx_escape_json,"uintptr_t ngx_escape_json (u_char*,u_char*,size_t)",core\ngx_string.c,"uintptr_t
ngx_escape_json(u_char *dst, u_char *src, size_t size)
{
    u_char      ch;
    ngx_uint_t  len;

    if (dst == NULL) {
        len = 0;

        while (size) {
            ch = *src++;

            if (ch == '\\' || ch == '""') {
                len++;

            } else if (ch <= 0x1f) {

                switch (ch) {
                case '\n':
                case '\r':
                case '\t':
                case '\b':
                case '\f':
                    len++;
                    break;

                default:
                    len += sizeof(""\\u001F"") - 2;
                }
            }

            size--;
        }

        return (uintptr_t) len;
    }

    while (size) {
        ch = *src++;

        if (ch > 0x1f) {

            if (ch == '\\' || ch == '""') {
                *dst++ = '\\';
            }

            *dst++ = ch;

        } else {
            *dst++ = '\\';

            switch (ch) {
            case '\n':
                *ds...",1873.0,1959.0,1.0,1.0,87.0,26,8,22,6,0,0,7,13,0,0,,0,0,6,3,3,uintptr_t
4571,66027,ngx_str_rbtree_insert_value,1,ngx_str_rbtree_insert_value,"void ngx_str_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",core\ngx_string.c,"void
ngx_str_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_str_node_t      *n, *t;
    ngx_rbtree_node_t  **p;

    for ( ;; ) {

        n = (ngx_str_node_t *) node;
        t = (ngx_str_node_t *) temp;

        if (node->key != temp->key) {

            p = (node->key < temp->key) ? &temp->left : &temp->right;

        } else if (n->str.len != t->str.len) {

            p = (n->str.len < t->str.len) ? &temp->left : &temp->right;

        } else {
            p = (ngx_memcmp(n->str.data, t->str.data, n->str.len) < 0)
                 ? &temp->left : &temp->right;
        }

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",1962.0,1999.0,1.0,1.0,38.0,28,9,24,6,0,0,5,6,0,0,,0,0,6,3,3,void
4572,66177,ngx_str_rbtree_lookup,1,ngx_str_rbtree_lookup,"ngx_str_node_t ngx_str_rbtree_lookup (ngx_rbtree_t*,ngx_str_t*,uint32_t)",core\ngx_string.c,"ngx_str_node_t *
ngx_str_rbtree_lookup(ngx_rbtree_t *rbtree, ngx_str_t *val, uint32_t hash)
{
    ngx_int_t           rc;
    ngx_str_node_t     *n;
    ngx_rbtree_node_t  *node, *sentinel;

    node = rbtree->root;
    sentinel = rbtree->sentinel;

    while (node != sentinel) {

        n = (ngx_str_node_t *) node;

        if (hash != node->key) {
            node = (hash < node->key) ? node->left : node->right;
            continue;
        }

        if (val->len != n->str.len) {
            node = (val->len < n->str.len) ? node->left : node->right;
            continue;
        }

        rc = ngx_memcmp(val->data, n->str.data, val->len);

        if (rc < 0) {
            node = node->left;
            continue;
        }

        if (rc > 0) {
            node = node->right;
            continue;
        }

        return n;
    }

    return NULL;
}",2002.0,2042.0,1.0,1.0,41.0,38,8,34,8,0,7,10,10,2,0,,0,7,6,3,3,ngx_str_node_t
4573,66300,ngx_sort,1,ngx_sort,"void ngx_sort (void*,size_t,size_t,ngx_int_t)",core\ngx_string.c,"void
ngx_sort(void *base, size_t n, size_t size,
    ngx_int_t (*cmp)(const void *, const void *))
{
    u_char  *p1, *p2, *p;

    p = ngx_alloc(size, ngx_cycle->log);
    if (p == NULL) {
        return;
    }

    for (p1 = (u_char *) base + size;
         p1 < (u_char *) base + n * size;
         p1 += size)
    {
        ngx_memcpy(p, p1, size);

        for (p2 = p1;
             p2 > (u_char *) base && cmp(p2 - size, p) > 0;
             p2 -= size)
        {
            ngx_memcpy(p2, p2 - size, size);
        }

        ngx_memcpy(p2, p, size);
    }

    ngx_free(p);
}",2047.0,2075.0,1.0,1.0,29.0,17,10,30,8,0,1,4,5,0,1,,0,1,8,4,4,void
4574,66384,ngx_explicit_memzero,1,ngx_explicit_memzero,"void ngx_explicit_memzero (void*,size_t)",core\ngx_string.c,"void
ngx_explicit_memzero(void *buf, size_t n)
{
    ngx_memzero(buf, n);
    ngx_memory_barrier();
}",2078.0,2083.0,1.0,1.0,6.0,0,0,2,2,1,0,1,1,0,0,,0,0,4,2,2,void
4575,66695,ngx_syslog_parse_args,1,ngx_syslog_parse_args,"char* ngx_syslog_parse_args (ngx_conf_t*,ngx_syslog_peer_t*)",core\ngx_syslog.c,"static char *
ngx_syslog_parse_args(ngx_conf_t *cf, ngx_syslog_peer_t *peer)
{
    u_char      *p, *comma, c;
    size_t       len;
    ngx_str_t   *value;
    ngx_url_t    u;
    ngx_uint_t   i;

    value = cf->args->elts;

    p = value[1].data + sizeof(""syslog:"") - 1;

    for ( ;; ) {
        comma = (u_char *) ngx_strchr(p, ',');

        if (comma != NULL) {
            len = comma - p;
            *comma = '\0';

        } else {
            len = value[1].data + value[1].len - p;
        }

        if (ngx_strncmp(p, ""server="", 7) == 0) {

            if (peer->server.sockaddr != NULL) {
                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                   ""duplicate syslog \""server\"""");
                return NGX_CONF_ERROR;
            }

            ngx_memzero(&u, sizeof(ngx_url_t));

            u.url.data = p + 7;
            u.url.len = len - 7;
            u.default_port = 514;

            if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
         ...",88.0,230.0,1.0,1.0,143.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,char*
4576,66701,ngx_syslog_init_peer,1,ngx_syslog_init_peer,ngx_int_t ngx_syslog_init_peer (ngx_syslog_peer_t*),core\ngx_syslog.c,"static ngx_int_t
ngx_syslog_init_peer(ngx_syslog_peer_t *peer)
{
    ngx_socket_t  fd;

    fd = ngx_socket(peer->server.sockaddr->sa_family, SOCK_DGRAM, 0);
    if (fd == (ngx_socket_t) -1) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_socket_errno,
                      ngx_socket_n "" failed"");
        return NGX_ERROR;
    }

    if (ngx_nonblocking(fd) == -1) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_socket_errno,
                      ngx_nonblocking_n "" failed"");
        goto failed;
    }

    if (connect(fd, peer->server.sockaddr, peer->server.socklen) == -1) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_socket_errno,
                      ""connect() failed"");
        goto failed;
    }

    peer->conn.fd = fd;

    /* UDP sockets are always ready to write */
    peer->conn.write->ready = 1;

    return NGX_OK;

failed:

    if (ngx_close_socket(fd) == -1) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_socket_errno,
    ...",320.0,359.0,1.0,1.0,40.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4577,66706,ngx_syslog_cleanup,1,ngx_syslog_cleanup,void ngx_syslog_cleanup (void*),core\ngx_syslog.c,"static void
ngx_syslog_cleanup(void *data)
{
    ngx_syslog_peer_t  *peer = data;

    /* prevents further use of this peer */
    peer->busy = 1;

    if (peer->conn.fd == (ngx_socket_t) -1) {
        return;
    }

    if (ngx_close_socket(peer->conn.fd) == -1) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_socket_errno,
                      ngx_close_socket_n "" failed"");
    }
}",362.0,378.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4578,66755,ngx_syslog_process_conf,1,ngx_syslog_process_conf,"char* ngx_syslog_process_conf (ngx_conf_t*,ngx_syslog_peer_t*)",core\ngx_syslog.c,"char *
ngx_syslog_process_conf(ngx_conf_t *cf, ngx_syslog_peer_t *peer)
{
    ngx_pool_cleanup_t  *cln;

    peer->facility = NGX_CONF_UNSET_UINT;
    peer->severity = NGX_CONF_UNSET_UINT;

    if (ngx_syslog_parse_args(cf, peer) != NGX_CONF_OK) {
        return NGX_CONF_ERROR;
    }

    if (peer->server.sockaddr == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""no syslog server specified"");
        return NGX_CONF_ERROR;
    }

    if (peer->facility == NGX_CONF_UNSET_UINT) {
        peer->facility = 23; /* local7 */
    }

    if (peer->severity == NGX_CONF_UNSET_UINT) {
        peer->severity = 6; /* info */
    }

    if (peer->tag.data == NULL) {
        ngx_str_set(&peer->tag, ""nginx"");
    }

    peer->conn.fd = (ngx_socket_t) -1;

    peer->conn.read = &ngx_syslog_dummy_event;
    peer->conn.write = &ngx_syslog_dummy_event;

    ngx_syslog_dummy_event.log = &ngx_syslog_dummy_log;

    cln = ngx_pool_cleanup_add(cf->pool, 0);
    if (cln...",39.0,85.0,1.0,1.0,47.0,43,7,40,12,0,19,7,7,5,3,,0,18,4,2,2,char*
4579,67330,ngx_syslog_add_header,1,ngx_syslog_add_header,"u_char ngx_syslog_add_header (ngx_syslog_peer_t*,u_char*)",core\ngx_syslog.c,"u_char *
ngx_syslog_add_header(ngx_syslog_peer_t *peer, u_char *buf)
{
    ngx_uint_t  pri;

    pri = peer->facility * 8 + peer->severity;

    if (peer->nohostname) {
        return ngx_sprintf(buf, ""<%ui>%V %V: "", pri, &ngx_cached_syslog_time,
                           &peer->tag);
    }

    return ngx_sprintf(buf, ""<%ui>%V %V %V: "", pri, &ngx_cached_syslog_time,
                       &ngx_cycle->hostname, &peer->tag);
}",233.0,247.0,1.0,1.0,15.0,14,5,13,5,3,7,2,2,1,2,,0,5,4,2,2,u_char
4580,67379,ngx_syslog_writer,1,ngx_syslog_writer,"void ngx_syslog_writer (ngx_log_t*,ngx_uint_t,u_char*,size_t)",core\ngx_syslog.c,"void
ngx_syslog_writer(ngx_log_t *log, ngx_uint_t level, u_char *buf,
    size_t len)
{
    u_char             *p, msg[NGX_SYSLOG_MAX_STR];
    ngx_uint_t          head_len;
    ngx_syslog_peer_t  *peer;

    peer = log->wdata;

    if (peer->busy) {
        return;
    }

    peer->busy = 1;
    peer->severity = level - 1;

    p = ngx_syslog_add_header(peer, msg);
    head_len = p - msg;

    len -= NGX_LINEFEED_SIZE;

    if (len > NGX_SYSLOG_MAX_STR - head_len) {
        len = NGX_SYSLOG_MAX_STR - head_len;
    }

    p = ngx_snprintf(p, len, ""%s"", buf);

    (void) ngx_syslog_send(peer, msg, p - msg);

    peer->busy = 0;
}",250.0,281.0,1.0,31.0,32.0,37,8,31,11,0,7,3,3,1,3,,0,6,8,4,4,void
4581,67493,ngx_syslog_send,1,ngx_syslog_send,"ssize_t ngx_syslog_send (ngx_syslog_peer_t*,u_char*,size_t)",core\ngx_syslog.c,"ssize_t
ngx_syslog_send(ngx_syslog_peer_t *peer, u_char *buf, size_t len)
{
    ssize_t  n;

    if (peer->conn.fd == (ngx_socket_t) -1) {
        if (ngx_syslog_init_peer(peer) != NGX_OK) {
            return NGX_ERROR;
        }
    }

    /* log syslog socket events with valid log */
    peer->conn.log = ngx_cycle->log;

    if (ngx_send) {
        n = ngx_send(&peer->conn, buf, len);

    } else {
        /* event module has not yet set ngx_io */
        n = ngx_os_io.send(&peer->conn, buf, len);
    }

    if (n == NGX_ERROR) {

        if (ngx_close_socket(peer->conn.fd) == -1) {
            ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_socket_errno,
                          ngx_close_socket_n "" failed"");
        }

        peer->conn.fd = (ngx_socket_t) -1;
    }

    return n;
}",284.0,317.0,1.0,1.0,34.0,21,8,18,9,3,6,6,8,3,1,,0,6,6,3,3,ssize_t
4582,67782,ngx_thread_pool_init,1,ngx_thread_pool_init,"ngx_int_t ngx_thread_pool_init (ngx_thread_pool_t*,ngx_log_t*,ngx_pool_t*)",core\ngx_thread_pool.c,"static ngx_int_t
ngx_thread_pool_init(ngx_thread_pool_t *tp, ngx_log_t *log, ngx_pool_t *pool)
{
    int             err;
    pthread_t       tid;
    ngx_uint_t      n;
    pthread_attr_t  attr;

    if (ngx_notify == NULL) {
        ngx_log_error(NGX_LOG_ALERT, log, 0,
               ""the configured event method cannot be used with thread pools"");
        return NGX_ERROR;
    }

    ngx_thread_pool_queue_init(&tp->queue);

    if (ngx_thread_mutex_create(&tp->mtx, log) != NGX_OK) {
        return NGX_ERROR;
    }

    if (ngx_thread_cond_create(&tp->cond, log) != NGX_OK) {
        (void) ngx_thread_mutex_destroy(&tp->mtx, log);
        return NGX_ERROR;
    }

    tp->log = log;

    err = pthread_attr_init(&attr);
    if (err) {
        ngx_log_error(NGX_LOG_ALERT, log, err,
                      ""pthread_attr_init() failed"");
        return NGX_ERROR;
    }

    err = pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
    if (err) {
        ngx_log_error(NGX_LOG_ALERT...",106.0,168.0,1.0,4.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4583,67789,ngx_thread_pool_destroy,1,ngx_thread_pool_destroy,void ngx_thread_pool_destroy (ngx_thread_pool_t*),core\ngx_thread_pool.c,"static void
ngx_thread_pool_destroy(ngx_thread_pool_t *tp)
{
    ngx_uint_t           n;
    ngx_thread_task_t    task;
    volatile ngx_uint_t  lock;

    ngx_memzero(&task, sizeof(ngx_thread_task_t));

    task.handler = ngx_thread_pool_exit_handler;
    task.ctx = (void *) &lock;

    for (n = 0; n < tp->threads; n++) {
        lock = 1;

        if (ngx_thread_task_post(tp, &task) != NGX_OK) {
            return;
        }

        while (lock) {
            ngx_sched_yield();
        }

        task.event.active = 0;
    }

    (void) ngx_thread_cond_destroy(&tp->cond, tp->log);

    (void) ngx_thread_mutex_destroy(&tp->mtx, tp->log);
}",171.0,200.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4584,67794,ngx_thread_pool_exit_handler,1,ngx_thread_pool_exit_handler,"void ngx_thread_pool_exit_handler (void*,ngx_log_t*)",core\ngx_thread_pool.c,"static void
ngx_thread_pool_exit_handler(void *data, ngx_log_t *log)
{
    ngx_uint_t *lock = data;

    *lock = 0;

    pthread_exit(0);
}",203.0,211.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4585,67800,ngx_thread_pool_cycle,1,ngx_thread_pool_cycle,void* ngx_thread_pool_cycle (void*),core\ngx_thread_pool.c,"static void *
ngx_thread_pool_cycle(void *data)
{
    ngx_thread_pool_t *tp = data;

    int                 err;
    sigset_t            set;
    ngx_thread_task_t  *task;

#if 0
    ngx_time_update();
#endif

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, tp->log, 0,
                   ""thread in pool \""%V\"" started"", &tp->name);

    sigfillset(&set);

    sigdelset(&set, SIGILL);
    sigdelset(&set, SIGFPE);
    sigdelset(&set, SIGSEGV);
    sigdelset(&set, SIGBUS);

    err = pthread_sigmask(SIG_BLOCK, &set, NULL);
    if (err) {
        ngx_log_error(NGX_LOG_ALERT, tp->log, err, ""pthread_sigmask() failed"");
        return NULL;
    }

    for ( ;; ) {
        if (ngx_thread_mutex_lock(&tp->mtx, tp->log) != NGX_OK) {
            return NULL;
        }

        /* the number may become negative */
        tp->waiting--;

        while (tp->queue.first == NULL) {
            if (ngx_thread_cond_wait(&tp->cond, &tp->mtx, tp->log)
                != NGX_OK)
            {
                (v...",277.0,361.0,1.0,1.0,85.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4586,67805,ngx_thread_pool_handler,1,ngx_thread_pool_handler,void ngx_thread_pool_handler (ngx_event_t*),core\ngx_thread_pool.c,"static void
ngx_thread_pool_handler(ngx_event_t *ev)
{
    ngx_event_t        *event;
    ngx_thread_task_t  *task;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, ev->log, 0, ""thread pool handler"");

    ngx_spinlock(&ngx_thread_pool_done_lock, 1, 2048);

    task = ngx_thread_pool_done.first;
    ngx_thread_pool_done.first = NULL;
    ngx_thread_pool_done.last = &ngx_thread_pool_done.first;

    ngx_memory_barrier();

    ngx_unlock(&ngx_thread_pool_done_lock);

    while (task) {
        ngx_log_debug1(NGX_LOG_DEBUG_CORE, ev->log, 0,
                       ""run completion handler for task #%ui"", task->id);

        event = &task->event;
        task = task->next;

        event->complete = 1;
        event->active = 0;

        event->handler(event);
    }
}",364.0,394.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4587,67810,ngx_thread_pool,1,ngx_thread_pool,"char* ngx_thread_pool (ngx_conf_t*,ngx_command_t*,void*)",core\ngx_thread_pool.c,"static char *
ngx_thread_pool(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_str_t          *value;
    ngx_uint_t          i;
    ngx_thread_pool_t  *tp;

    value = cf->args->elts;

    tp = ngx_thread_pool_add(cf, &value[1]);

    if (tp == NULL) {
        return NGX_CONF_ERROR;
    }

    if (tp->threads) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""duplicate thread pool \""%V\"""", &tp->name);
        return NGX_CONF_ERROR;
    }

    tp->max_queue = 65536;

    for (i = 2; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""threads="", 8) == 0) {

            tp->threads = ngx_atoi(value[i].data + 8, value[i].len - 8);

            if (tp->threads == (ngx_uint_t) NGX_ERROR || tp->threads == 0) {
                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                   ""invalid threads value \""%V\"""", &value[i]);
                return NGX_CONF_ERROR;
            }

            continue;
        }

    ...",455.0,515.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4588,67817,ngx_thread_pool_create_conf,1,ngx_thread_pool_create_conf,void* ngx_thread_pool_create_conf (ngx_cycle_t*),core\ngx_thread_pool.c,"static void *
ngx_thread_pool_create_conf(ngx_cycle_t *cycle)
{
    ngx_thread_pool_conf_t  *tcf;

    tcf = ngx_pcalloc(cycle->pool, sizeof(ngx_thread_pool_conf_t));
    if (tcf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&tcf->pools, cycle->pool, 4,
                       sizeof(ngx_thread_pool_t *))
        != NGX_OK)
    {
        return NULL;
    }

    return tcf;
}",397.0,415.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4589,67822,ngx_thread_pool_init_conf,1,ngx_thread_pool_init_conf,"char* ngx_thread_pool_init_conf (ngx_cycle_t*,void*)",core\ngx_thread_pool.c,"static char *
ngx_thread_pool_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_thread_pool_conf_t *tcf = conf;

    ngx_uint_t           i;
    ngx_thread_pool_t  **tpp;

    tpp = tcf->pools.elts;

    for (i = 0; i < tcf->pools.nelts; i++) {

        if (tpp[i]->threads) {
            continue;
        }

        if (tpp[i]->name.len == ngx_thread_pool_default.len
            && ngx_strncmp(tpp[i]->name.data, ngx_thread_pool_default.data,
                           ngx_thread_pool_default.len)
               == 0)
        {
            tpp[i]->threads = 32;
            tpp[i]->max_queue = 65536;
            continue;
        }

        ngx_log_error(NGX_LOG_EMERG, cycle->log, 0,
                      ""unknown thread pool \""%V\"" in %s:%ui"",
                      &tpp[i]->name, tpp[i]->file, tpp[i]->line);

        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",418.0,452.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4590,67828,ngx_thread_pool_init_worker,1,ngx_thread_pool_init_worker,ngx_int_t ngx_thread_pool_init_worker (ngx_cycle_t*),core\ngx_thread_pool.c,"static ngx_int_t
ngx_thread_pool_init_worker(ngx_cycle_t *cycle)
{
    ngx_uint_t                i;
    ngx_thread_pool_t       **tpp;
    ngx_thread_pool_conf_t   *tcf;

    if (ngx_process != NGX_PROCESS_WORKER
        && ngx_process != NGX_PROCESS_SINGLE)
    {
        return NGX_OK;
    }

    tcf = (ngx_thread_pool_conf_t *) ngx_get_conf(cycle->conf_ctx,
                                                  ngx_thread_pool_module);

    if (tcf == NULL) {
        return NGX_OK;
    }

    ngx_thread_pool_queue_init(&ngx_thread_pool_done);

    tpp = tcf->pools.elts;

    for (i = 0; i < tcf->pools.nelts; i++) {
        if (ngx_thread_pool_init(tpp[i], cycle->log, cycle->pool) != NGX_OK) {
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",582.0,613.0,1.0,4.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4591,67833,ngx_thread_pool_exit_worker,1,ngx_thread_pool_exit_worker,void ngx_thread_pool_exit_worker (ngx_cycle_t*),core\ngx_thread_pool.c,"static void
ngx_thread_pool_exit_worker(ngx_cycle_t *cycle)
{
    ngx_uint_t                i;
    ngx_thread_pool_t       **tpp;
    ngx_thread_pool_conf_t   *tcf;

    if (ngx_process != NGX_PROCESS_WORKER
        && ngx_process != NGX_PROCESS_SINGLE)
    {
        return;
    }

    tcf = (ngx_thread_pool_conf_t *) ngx_get_conf(cycle->conf_ctx,
                                                  ngx_thread_pool_module);

    if (tcf == NULL) {
        return;
    }

    tpp = tcf->pools.elts;

    for (i = 0; i < tcf->pools.nelts; i++) {
        ngx_thread_pool_destroy(tpp[i]);
    }
}",616.0,641.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4592,68144,ngx_thread_task_alloc,1,ngx_thread_task_alloc,"ngx_thread_task_t ngx_thread_task_alloc (ngx_pool_t*,size_t)",core\ngx_thread_pool.c,"ngx_thread_task_t *
ngx_thread_task_alloc(ngx_pool_t *pool, size_t size)
{
    ngx_thread_task_t  *task;

    task = ngx_pcalloc(pool, sizeof(ngx_thread_task_t) + size);
    if (task == NULL) {
        return NULL;
    }

    task->ctx = task + 1;

    return task;
}",214.0,227.0,1.0,1.0,14.0,7,5,10,5,0,1,2,2,0,1,,0,1,4,2,2,ngx_thread_task_t
4593,68175,ngx_thread_task_post,1,ngx_thread_task_post,"ngx_int_t ngx_thread_task_post (ngx_thread_pool_t*,ngx_thread_task_t*)",core\ngx_thread_pool.c,"ngx_int_t
ngx_thread_task_post(ngx_thread_pool_t *tp, ngx_thread_task_t *task)
{
    if (task->event.active) {
        ngx_log_error(NGX_LOG_ALERT, tp->log, 0,
                      ""task #%ui already active"", task->id);
        return NGX_ERROR;
    }

    if (ngx_thread_mutex_lock(&tp->mtx, tp->log) != NGX_OK) {
        return NGX_ERROR;
    }

    if (tp->waiting >= tp->max_queue) {
        (void) ngx_thread_mutex_unlock(&tp->mtx, tp->log);

        ngx_log_error(NGX_LOG_ERR, tp->log, 0,
                      ""thread pool \""%V\"" queue overflow: %i tasks waiting"",
                      &tp->name, tp->waiting);
        return NGX_ERROR;
    }

    task->event.active = 1;

    task->id = ngx_thread_pool_task_id++;
    task->next = NULL;

    if (ngx_thread_cond_signal(&tp->cond, tp->log) != NGX_OK) {
        (void) ngx_thread_mutex_unlock(&tp->mtx, tp->log);
        return NGX_ERROR;
    }

    *tp->queue.last = task;
    tp->queue.last = &task->next;

    tp->waiting++;

    (void)...",230.0,274.0,1.0,1.0,45.0,54,9,41,9,0,8,5,5,2,7,,0,3,4,2,2,ngx_int_t
4594,69009,ngx_thread_pool_add,1,ngx_thread_pool_add,"ngx_thread_pool_t ngx_thread_pool_add (ngx_conf_t*,ngx_str_t*)",core\ngx_thread_pool.c,"ngx_thread_pool_t *
ngx_thread_pool_add(ngx_conf_t *cf, ngx_str_t *name)
{
    ngx_thread_pool_t       *tp, **tpp;
    ngx_thread_pool_conf_t  *tcf;

    if (name == NULL) {
        name = &ngx_thread_pool_default;
    }

    tp = ngx_thread_pool_get(cf->cycle, name);

    if (tp) {
        return tp;
    }

    tp = ngx_pcalloc(cf->pool, sizeof(ngx_thread_pool_t));
    if (tp == NULL) {
        return NULL;
    }

    tp->name = *name;
    tp->file = cf->conf_file->file.name.data;
    tp->line = cf->conf_file->line;

    tcf = (ngx_thread_pool_conf_t *) ngx_get_conf(cf->cycle->conf_ctx,
                                                  ngx_thread_pool_module);

    tpp = ngx_array_push(&tcf->pools);
    if (tpp == NULL) {
        return NULL;
    }

    *tpp = tp;

    return tp;
}",518.0,554.0,1.0,1.0,37.0,32,8,32,9,0,6,5,5,0,3,,0,6,4,2,2,ngx_thread_pool_t
4595,69113,ngx_thread_pool_get,1,ngx_thread_pool_get,"ngx_thread_pool_t ngx_thread_pool_get (ngx_cycle_t*,ngx_str_t*)",core\ngx_thread_pool.c,"ngx_thread_pool_t *
ngx_thread_pool_get(ngx_cycle_t *cycle, ngx_str_t *name)
{
    ngx_uint_t                i;
    ngx_thread_pool_t       **tpp;
    ngx_thread_pool_conf_t   *tcf;

    tcf = (ngx_thread_pool_conf_t *) ngx_get_conf(cycle->conf_ctx,
                                                  ngx_thread_pool_module);

    tpp = tcf->pools.elts;

    for (i = 0; i < tcf->pools.nelts; i++) {

        if (tpp[i]->name.len == name->len
            && ngx_strncmp(tpp[i]->name.data, name->data, name->len) == 0)
        {
            return tpp[i];
        }
    }

    return NULL;
}",557.0,579.0,1.0,1.0,23.0,23,8,18,7,1,6,3,4,4,0,,0,6,4,2,2,ngx_thread_pool_t
4596,69358,handler,1,ngx_thread_task_s.handler,"void ngx_thread_task_s.handler (void*,ngx_log_t*)",core\ngx_thread_pool.h,"void               (*handler)(void *data, ngx_log_t *log);",21.0,21.0,24.0,61.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4597,69400,ngx_monotonic_time,1,ngx_monotonic_time,"ngx_msec_t ngx_monotonic_time (time_t,ngx_uint_t)",core\ngx_times.c,"static ngx_msec_t
ngx_monotonic_time(time_t sec, ngx_uint_t msec)
{
#if (NGX_HAVE_CLOCK_MONOTONIC)
    struct timespec  ts;

#if defined(CLOCK_MONOTONIC_FAST)
    clock_gettime(CLOCK_MONOTONIC_FAST, &ts);

#elif defined(CLOCK_MONOTONIC_COARSE)
    clock_gettime(CLOCK_MONOTONIC_COARSE, &ts);

#else
    clock_gettime(CLOCK_MONOTONIC, &ts);
#endif

    sec = ts.tv_sec;
    msec = ts.tv_nsec / 1000000;

#endif

    return (ngx_msec_t) sec * 1000 + msec;
}",195.0,217.0,1.0,1.0,23.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_msec_t
4598,69483,ngx_time_init,1,ngx_time_init,void ngx_time_init (void),core\ngx_times.c,"void
ngx_time_init(void)
{
    ngx_cached_err_log_time.len = sizeof(""1970/09/28 12:00:00"") - 1;
    ngx_cached_http_time.len = sizeof(""Mon, 28 Sep 1970 06:00:00 GMT"") - 1;
    ngx_cached_http_log_time.len = sizeof(""28/Sep/1970:12:00:00 +0600"") - 1;
    ngx_cached_http_log_iso8601.len = sizeof(""1970-09-28T12:00:00+06:00"") - 1;
    ngx_cached_syslog_time.len = sizeof(""Sep 28 12:00:00"") - 1;

    ngx_cached_time = &cached_time[0];

    ngx_time_update();
}",65.0,77.0,1.0,1.0,13.0,23,6,7,7,1,13,1,1,0,1,,0,12,2,1,1,void
4599,69535,ngx_time_update,1,ngx_time_update,void ngx_time_update (void),core\ngx_times.c,"void
ngx_time_update(void)
{
    u_char          *p0, *p1, *p2, *p3, *p4;
    ngx_tm_t         tm, gmt;
    time_t           sec;
    ngx_uint_t       msec;
    ngx_time_t      *tp;
    struct timeval   tv;

    if (!ngx_trylock(&ngx_time_lock)) {
        return;
    }

    ngx_gettimeofday(&tv);

    sec = tv.tv_sec;
    msec = tv.tv_usec / 1000;

    ngx_current_msec = ngx_monotonic_time(sec, msec);

    tp = &cached_time[slot];

    if (tp->sec == sec) {
        tp->msec = msec;
        ngx_unlock(&ngx_time_lock);
        return;
    }

    if (slot == NGX_TIME_SLOTS - 1) {
        slot = 0;
    } else {
        slot++;
    }

    tp = &cached_time[slot];

    tp->sec = sec;
    tp->msec = msec;

    ngx_gmtime(sec, &gmt);


    p0 = &cached_http_time[slot][0];

    (void) ngx_sprintf(p0, ""%s, %02d %s %4d %02d:%02d:%02d GMT"",
                       week[gmt.ngx_tm_wday], gmt.ngx_tm_mday,
                       months[gmt.ngx_tm_mon - 1], gmt.ngx_tm_year,
                       gm...",80.0,192.0,1.0,16.0,113.0,121,13,107,29,4,57,4,4,3,9,,0,49,2,1,1,void
4600,69906,ngx_time_sigsafe_update,1,ngx_time_sigsafe_update,void ngx_time_sigsafe_update (void),core\ngx_times.c,"void
ngx_time_sigsafe_update(void)
{
    u_char          *p, *p2;
    ngx_tm_t         tm;
    time_t           sec;
    ngx_time_t      *tp;
    struct timeval   tv;

    if (!ngx_trylock(&ngx_time_lock)) {
        return;
    }

    ngx_gettimeofday(&tv);

    sec = tv.tv_sec;

    tp = &cached_time[slot];

    if (tp->sec == sec) {
        ngx_unlock(&ngx_time_lock);
        return;
    }

    if (slot == NGX_TIME_SLOTS - 1) {
        slot = 0;
    } else {
        slot++;
    }

    tp = &cached_time[slot];

    tp->sec = 0;

    ngx_gmtime(sec + cached_gmtoff * 60, &tm);

    p = &cached_err_log_time[slot][0];

    (void) ngx_sprintf(p, ""%4d/%02d/%02d %02d:%02d:%02d"",
                       tm.ngx_tm_year, tm.ngx_tm_mon,
                       tm.ngx_tm_mday, tm.ngx_tm_hour,
                       tm.ngx_tm_min, tm.ngx_tm_sec);

    p2 = &cached_syslog_time[slot][0];

    (void) ngx_sprintf(p2, ""%s %2d %02d:%02d:%02d"",
                       months[tm.ngx_tm_mon - 1], tm.ngx_tm...",222.0,277.0,1.0,16.0,56.0,50,11,44,15,0,25,4,4,3,4,,0,21,2,1,1,void
4601,70061,ngx_http_time,1,ngx_http_time,"u_char ngx_http_time (u_char*,time_t)",core\ngx_times.c,"u_char *
ngx_http_time(u_char *buf, time_t t)
{
    ngx_tm_t  tm;

    ngx_gmtime(t, &tm);

    return ngx_sprintf(buf, ""%s, %02d %s %4d %02d:%02d:%02d GMT"",
                       week[tm.ngx_tm_wday],
                       tm.ngx_tm_mday,
                       months[tm.ngx_tm_mon - 1],
                       tm.ngx_tm_year,
                       tm.ngx_tm_hour,
                       tm.ngx_tm_min,
                       tm.ngx_tm_sec);
}",282.0,297.0,1.0,1.0,16.0,11,4,12,5,1,4,1,1,0,2,,0,2,4,2,2,u_char
4602,70103,ngx_http_cookie_time,1,ngx_http_cookie_time,"u_char ngx_http_cookie_time (u_char*,time_t)",core\ngx_times.c,"u_char *
ngx_http_cookie_time(u_char *buf, time_t t)
{
    ngx_tm_t  tm;

    ngx_gmtime(t, &tm);

    /*
     * Netscape 3.x does not understand 4-digit years at all and
     * 2-digit years more than ""37""
     */

    return ngx_sprintf(buf,
                       (tm.ngx_tm_year > 2037) ?
                                         ""%s, %02d-%s-%d %02d:%02d:%02d GMT"":
                                         ""%s, %02d-%s-%02d %02d:%02d:%02d GMT"",
                       week[tm.ngx_tm_wday],
                       tm.ngx_tm_mday,
                       months[tm.ngx_tm_mon - 1],
                       (tm.ngx_tm_year > 2037) ? tm.ngx_tm_year:
                                                 tm.ngx_tm_year % 100,
                       tm.ngx_tm_hour,
                       tm.ngx_tm_min,
                       tm.ngx_tm_sec);
}",300.0,324.0,1.0,1.0,25.0,19,7,15,5,0,4,1,1,0,2,,0,2,4,2,2,u_char
4603,70163,ngx_gmtime,1,ngx_gmtime,"void ngx_gmtime (time_t,ngx_tm_t*)",core\ngx_times.c,"void
ngx_gmtime(time_t t, ngx_tm_t *tp)
{
    ngx_int_t   yday;
    ngx_uint_t  sec, min, hour, mday, mon, year, wday, days, leap;

    /* the calculation is valid for positive time_t only */

    if (t < 0) {
        t = 0;
    }

    days = t / 86400;
    sec = t % 86400;

    /*
     * no more than 4 year digits supported,
     * truncate to December 31, 9999, 23:59:59
     */

    if (days > 2932896) {
        days = 2932896;
        sec = 86399;
    }

    /* January 1, 1970 was Thursday */

    wday = (4 + days) % 7;

    hour = sec / 3600;
    sec %= 3600;
    min = sec / 60;
    sec %= 60;

    /*
     * the algorithm based on Gauss' formula,
     * see src/core/ngx_parse_time.c
     */

    /* days since March 1, 1 BC */
    days = days - (31 + 28) + 719527;

    /*
     * The ""days"" should be adjusted to 1 only, however, some March 1st's go
     * to previous year, so we adjust them to 2.  This causes also shift of the
     * last February days to next year, but we catch t...",327.0,429.0,1.0,1.0,103.0,84,17,58,12,4,0,5,5,0,0,,0,0,4,2,2,void
4604,70393,ngx_next_time,1,ngx_next_time,time_t ngx_next_time (time_t),core\ngx_times.c,"time_t
ngx_next_time(time_t when)
{
    time_t     now, next;
    struct tm  tm;

    now = ngx_time();

    ngx_libc_localtime(now, &tm);

    tm.tm_hour = (int) (when / 3600);
    when %= 3600;
    tm.tm_min = (int) (when / 60);
    tm.tm_sec = (int) (when % 60);

    next = mktime(&tm);

    if (next == -1) {
        return -1;
    }

    if (next - now > 0) {
        return next;
    }

    tm.tm_mday++;

    /* mktime() should normalize a date (Jan 32, etc) */

    next = mktime(&tm);

    if (next != -1) {
        return next;
    }

    return -1;
}",432.0,468.0,1.0,1.0,37.0,28,12,21,4,0,1,4,4,0,1,,0,0,2,1,1,time_t
4605,70555,ngx_devpoll_init,1,ngx_devpoll_init,"ngx_int_t ngx_devpoll_init (ngx_cycle_t*,ngx_msec_t)",event\modules\ngx_devpoll_module.c,"static ngx_int_t
ngx_devpoll_init(ngx_cycle_t *cycle, ngx_msec_t timer)
{
    size_t               n;
    ngx_devpoll_conf_t  *dpcf;

    dpcf = ngx_event_get_conf(cycle->conf_ctx, ngx_devpoll_module);

    if (dp == -1) {
        dp = open(""/dev/poll"", O_RDWR);

        if (dp == -1) {
            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
                          ""open(/dev/poll) failed"");
            return NGX_ERROR;
        }
    }

    if (max_changes < dpcf->changes) {
        if (nchanges) {
            n = nchanges * sizeof(struct pollfd);
            if (write(dp, change_list, n) != (ssize_t) n) {
                ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                              ""write(/dev/poll) failed"");
                return NGX_ERROR;
            }

            nchanges = 0;
        }

        if (change_list) {
            ngx_free(change_list);
        }

        change_list = ngx_alloc(sizeof(struct pollfd) * dpcf->changes,
                ...",117.0,191.0,1.0,1.0,75.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4606,70561,ngx_devpoll_done,1,ngx_devpoll_done,void ngx_devpoll_done (ngx_cycle_t*),event\modules\ngx_devpoll_module.c,"static void
ngx_devpoll_done(ngx_cycle_t *cycle)
{
    if (close(dp) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""close(/dev/poll) failed"");
    }

    dp = -1;

    ngx_free(change_list);
    ngx_free(event_list);
    ngx_free(change_index);

    change_list = NULL;
    event_list = NULL;
    change_index = NULL;
    max_changes = 0;
    nchanges = 0;
    nevents = 0;
}",194.0,214.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4607,70566,ngx_devpoll_add_event,1,ngx_devpoll_add_event,"ngx_int_t ngx_devpoll_add_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_devpoll_module.c,"static ngx_int_t
ngx_devpoll_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
#if (NGX_DEBUG)
    ngx_connection_t *c;
#endif

#if (NGX_READ_EVENT != POLLIN)
    event = (event == NGX_READ_EVENT) ? POLLIN : POLLOUT;
#endif

#if (NGX_DEBUG)
    c = ev->data;
    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""devpoll add event: fd:%d ev:%04Xi"", c->fd, event);
#endif

    ev->active = 1;

    return ngx_devpoll_set_event(ev, event, 0);
}",217.0,237.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4608,70573,ngx_devpoll_del_event,1,ngx_devpoll_del_event,"ngx_int_t ngx_devpoll_del_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_devpoll_module.c,"static ngx_int_t
ngx_devpoll_del_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_event_t       *e;
    ngx_connection_t  *c;

    c = ev->data;

#if (NGX_READ_EVENT != POLLIN)
    event = (event == NGX_READ_EVENT) ? POLLIN : POLLOUT;
#endif

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""devpoll del event: fd:%d ev:%04Xi"", c->fd, event);

    if (ngx_devpoll_set_event(ev, POLLREMOVE, flags) == NGX_ERROR) {
        return NGX_ERROR;
    }

    ev->active = 0;

    if (flags & NGX_CLOSE_EVENT) {
        e = (event == POLLIN) ? c->write : c->read;

        if (e) {
            e->active = 0;
        }

        return NGX_OK;
    }

    /* restore the pair event if it exists */

    if (event == POLLIN) {
        e = c->write;
        event = POLLOUT;

    } else {
        e = c->read;
        event = POLLIN;
    }

    if (e && e->active) {
        return ngx_devpoll_set_event(e, event, 0);
    }

    return NGX_OK;
}",240.0,287.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4609,70580,ngx_devpoll_set_event,1,ngx_devpoll_set_event,"ngx_int_t ngx_devpoll_set_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_devpoll_module.c,"static ngx_int_t
ngx_devpoll_set_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    size_t             n;
    ngx_connection_t  *c;

    c = ev->data;

    ngx_log_debug3(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""devpoll fd:%d ev:%04Xi fl:%04Xi"", c->fd, event, flags);

    if (nchanges >= max_changes) {
        ngx_log_error(NGX_LOG_WARN, ev->log, 0,
                      ""/dev/pool change list is filled up"");

        n = nchanges * sizeof(struct pollfd);
        if (write(dp, change_list, n) != (ssize_t) n) {
            ngx_log_error(NGX_LOG_ALERT, ev->log, ngx_errno,
                          ""write(/dev/poll) failed"");
            return NGX_ERROR;
        }

        nchanges = 0;
    }

    change_list[nchanges].fd = c->fd;
    change_list[nchanges].events = (short) event;
    change_list[nchanges].revents = 0;

    change_index[nchanges] = ev;
    ev->index = nchanges;

    nchanges++;

    if (flags & NGX_CLOSE_EVENT) {
        n = nchanges * sizeof(s...",290.0,336.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4610,70587,ngx_devpoll_process_events,1,ngx_devpoll_process_events,"ngx_int_t ngx_devpoll_process_events (ngx_cycle_t*,ngx_msec_t,ngx_uint_t)",event\modules\ngx_devpoll_module.c,"static ngx_int_t
ngx_devpoll_process_events(ngx_cycle_t *cycle, ngx_msec_t timer,
    ngx_uint_t flags)
{
    int                 events, revents, rc;
    size_t              n;
    ngx_fd_t            fd;
    ngx_err_t           err;
    ngx_int_t           i;
    ngx_uint_t          level, instance;
    ngx_event_t        *rev, *wev;
    ngx_queue_t        *queue;
    ngx_connection_t   *c;
    struct pollfd       pfd;
    struct dvpoll       dvp;

    /* NGX_TIMER_INFINITE == INFTIM */

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                   ""devpoll timer: %M"", timer);

    if (nchanges) {
        n = nchanges * sizeof(struct pollfd);
        if (write(dp, change_list, n) != (ssize_t) n) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""write(/dev/poll) failed"");
            return NGX_ERROR;
        }

        nchanges = 0;
    }

    dvp.dp_fds = event_list;
    dvp.dp_nfds = (int) nevents;
    dvp.dp_timeout = timer...",339.0,532.0,1.0,1.0,194.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4611,70594,ngx_devpoll_create_conf,1,ngx_devpoll_create_conf,void* ngx_devpoll_create_conf (ngx_cycle_t*),event\modules\ngx_devpoll_module.c,"static void *
ngx_devpoll_create_conf(ngx_cycle_t *cycle)
{
    ngx_devpoll_conf_t  *dpcf;

    dpcf = ngx_palloc(cycle->pool, sizeof(ngx_devpoll_conf_t));
    if (dpcf == NULL) {
        return NULL;
    }

    dpcf->changes = NGX_CONF_UNSET;
    dpcf->events = NGX_CONF_UNSET;

    return dpcf;
}",535.0,549.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4612,70599,ngx_devpoll_init_conf,1,ngx_devpoll_init_conf,"char* ngx_devpoll_init_conf (ngx_cycle_t*,void*)",event\modules\ngx_devpoll_module.c,"static char *
ngx_devpoll_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_devpoll_conf_t *dpcf = conf;

    ngx_conf_init_uint_value(dpcf->changes, 32);
    ngx_conf_init_uint_value(dpcf->events, 32);

    return NGX_CONF_OK;
}",552.0,561.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4613,71752,ngx_epoll_init,1,ngx_epoll_init,"ngx_int_t ngx_epoll_init (ngx_cycle_t*,ngx_msec_t)",event\modules\ngx_epoll_module.c,"static ngx_int_t
ngx_epoll_init(ngx_cycle_t *cycle, ngx_msec_t timer)
{
    ngx_epoll_conf_t  *epcf;

    epcf = ngx_event_get_conf(cycle->conf_ctx, ngx_epoll_module);

    if (ep == -1) {
        ep = epoll_create(cycle->connection_n / 2);

        if (ep == -1) {
            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
                          ""epoll_create() failed"");
            return NGX_ERROR;
        }

#if (NGX_HAVE_EVENTFD)
        if (ngx_epoll_notify_init(cycle->log) != NGX_OK) {
            ngx_epoll_module_ctx.actions.notify = NULL;
        }
#endif

#if (NGX_HAVE_FILE_AIO)
        ngx_epoll_aio_init(cycle, epcf);
#endif

#if (NGX_HAVE_EPOLLRDHUP)
        ngx_epoll_test_rdhup(cycle);
#endif
    }

    if (nevents < epcf->events) {
        if (event_list) {
            ngx_free(event_list);
        }

        event_list = ngx_alloc(sizeof(struct epoll_event) * epcf->events,
                               cycle->log);
        if (event_list == NULL) {
           ...",322.0,380.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4614,71758,ngx_epoll_done,1,ngx_epoll_done,void ngx_epoll_done (ngx_cycle_t*),event\modules\ngx_epoll_module.c,"static void
ngx_epoll_done(ngx_cycle_t *cycle)
{
    if (close(ep) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""epoll close() failed"");
    }

    ep = -1;

#if (NGX_HAVE_EVENTFD)

    if (close(notify_fd) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""eventfd close() failed"");
    }

    notify_fd = -1;

#endif

#if (NGX_HAVE_FILE_AIO)

    if (ngx_eventfd != -1) {

        if (io_destroy(ngx_aio_ctx) == -1) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""io_destroy() failed"");
        }

        if (close(ngx_eventfd) == -1) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""eventfd close() failed"");
        }

        ngx_eventfd = -1;
    }

    ngx_aio_ctx = 0;

#endif

    ngx_free(event_list);

    event_list = NULL;
    nevents = 0;
}",529.0,575.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4615,71763,ngx_epoll_add_event,1,ngx_epoll_add_event,"ngx_int_t ngx_epoll_add_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_epoll_module.c,"static ngx_int_t
ngx_epoll_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    int                  op;
    uint32_t             events, prev;
    ngx_event_t         *e;
    ngx_connection_t    *c;
    struct epoll_event   ee;

    c = ev->data;

    events = (uint32_t) event;

    if (event == NGX_READ_EVENT) {
        e = c->write;
        prev = EPOLLOUT;
#if (NGX_READ_EVENT != EPOLLIN|EPOLLRDHUP)
        events = EPOLLIN|EPOLLRDHUP;
#endif

    } else {
        e = c->read;
        prev = EPOLLIN|EPOLLRDHUP;
#if (NGX_WRITE_EVENT != EPOLLOUT)
        events = EPOLLOUT;
#endif
    }

    if (e->active) {
        op = EPOLL_CTL_MOD;
        events |= prev;

    } else {
        op = EPOLL_CTL_ADD;
    }

#if (NGX_HAVE_EPOLLEXCLUSIVE && NGX_HAVE_EPOLLRDHUP)
    if (flags & NGX_EXCLUSIVE_EVENT) {
        events &= ~EPOLLRDHUP;
    }
#endif

    ee.events = events | (uint32_t) flags;
    ee.data.ptr = (void *) ((uintptr_t) c | ev->instance);

    ngx_log_debug3(NGX_LO...",578.0,639.0,1.0,1.0,62.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4616,71770,ngx_epoll_del_event,1,ngx_epoll_del_event,"ngx_int_t ngx_epoll_del_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_epoll_module.c,"static ngx_int_t
ngx_epoll_del_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    int                  op;
    uint32_t             prev;
    ngx_event_t         *e;
    ngx_connection_t    *c;
    struct epoll_event   ee;

    /*
     * when the file descriptor is closed, the epoll automatically deletes
     * it from its queue, so we do not need to delete explicitly the event
     * before the closing the file descriptor
     */

    if (flags & NGX_CLOSE_EVENT) {
        ev->active = 0;
        return NGX_OK;
    }

    c = ev->data;

    if (event == NGX_READ_EVENT) {
        e = c->write;
        prev = EPOLLOUT;

    } else {
        e = c->read;
        prev = EPOLLIN|EPOLLRDHUP;
    }

    if (e->active) {
        op = EPOLL_CTL_MOD;
        ee.events = prev | (uint32_t) flags;
        ee.data.ptr = (void *) ((uintptr_t) c | ev->instance);

    } else {
        op = EPOLL_CTL_DEL;
        ee.events = 0;
        ee.data.ptr = NULL;
    }

    ngx_log_debug3(NGX_L...",642.0,697.0,1.0,1.0,56.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4617,71777,ngx_epoll_add_connection,1,ngx_epoll_add_connection,ngx_int_t ngx_epoll_add_connection (ngx_connection_t*),event\modules\ngx_epoll_module.c,"static ngx_int_t
ngx_epoll_add_connection(ngx_connection_t *c)
{
    struct epoll_event  ee;

    ee.events = EPOLLIN|EPOLLOUT|EPOLLET|EPOLLRDHUP;
    ee.data.ptr = (void *) ((uintptr_t) c | c->read->instance);

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""epoll add connection: fd:%d ev:%08XD"", c->fd, ee.events);

    if (epoll_ctl(ep, EPOLL_CTL_ADD, c->fd, &ee) == -1) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                      ""epoll_ctl(EPOLL_CTL_ADD, %d) failed"", c->fd);
        return NGX_ERROR;
    }

    c->read->active = 1;
    c->write->active = 1;

    return NGX_OK;
}",700.0,721.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4618,71782,ngx_epoll_del_connection,1,ngx_epoll_del_connection,"ngx_int_t ngx_epoll_del_connection (ngx_connection_t*,ngx_uint_t)",event\modules\ngx_epoll_module.c,"static ngx_int_t
ngx_epoll_del_connection(ngx_connection_t *c, ngx_uint_t flags)
{
    int                 op;
    struct epoll_event  ee;

    /*
     * when the file descriptor is closed the epoll automatically deletes
     * it from its queue so we do not need to delete explicitly the event
     * before the closing the file descriptor
     */

    if (flags & NGX_CLOSE_EVENT) {
        c->read->active = 0;
        c->write->active = 0;
        return NGX_OK;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""epoll del connection: fd:%d"", c->fd);

    op = EPOLL_CTL_DEL;
    ee.events = 0;
    ee.data.ptr = NULL;

    if (epoll_ctl(ep, op, c->fd, &ee) == -1) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                      ""epoll_ctl(%d, %d) failed"", op, c->fd);
        return NGX_ERROR;
    }

    c->read->active = 0;
    c->write->active = 0;

    return NGX_OK;
}",724.0,759.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4619,71788,ngx_epoll_process_events,1,ngx_epoll_process_events,"ngx_int_t ngx_epoll_process_events (ngx_cycle_t*,ngx_msec_t,ngx_uint_t)",event\modules\ngx_epoll_module.c,"static ngx_int_t
ngx_epoll_process_events(ngx_cycle_t *cycle, ngx_msec_t timer, ngx_uint_t flags)
{
    int                events;
    uint32_t           revents;
    ngx_int_t          instance, i;
    ngx_uint_t         level;
    ngx_err_t          err;
    ngx_event_t       *rev, *wev;
    ngx_queue_t       *queue;
    ngx_connection_t  *c;

    /* NGX_TIMER_INFINITE == INFTIM */

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                   ""epoll timer: %M"", timer);

    events = epoll_wait(ep, event_list, (int) nevents, timer);

    err = (events == -1) ? ngx_errno : 0;

    if (flags & NGX_UPDATE_TIME || ngx_event_timer_alarm) {
        ngx_time_update();
    }

    if (err) {
        if (err == NGX_EINTR) {

            if (ngx_event_timer_alarm) {
                ngx_event_timer_alarm = 0;
                return NGX_OK;
            }

            level = NGX_LOG_INFO;

        } else {
            level = NGX_LOG_ALERT;
        }

        ngx_log_error(level, c...",783.0,936.0,1.0,1.0,154.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4620,71795,ngx_epoll_create_conf,1,ngx_epoll_create_conf,void* ngx_epoll_create_conf (ngx_cycle_t*),event\modules\ngx_epoll_module.c,"static void *
ngx_epoll_create_conf(ngx_cycle_t *cycle)
{
    ngx_epoll_conf_t  *epcf;

    epcf = ngx_palloc(cycle->pool, sizeof(ngx_epoll_conf_t));
    if (epcf == NULL) {
        return NULL;
    }

    epcf->events = NGX_CONF_UNSET;
    epcf->aio_requests = NGX_CONF_UNSET;

    return epcf;
}",1025.0,1039.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4621,71800,ngx_epoll_init_conf,1,ngx_epoll_init_conf,"char* ngx_epoll_init_conf (ngx_cycle_t*,void*)",event\modules\ngx_epoll_module.c,"static char *
ngx_epoll_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_epoll_conf_t *epcf = conf;

    ngx_conf_init_uint_value(epcf->events, 512);
    ngx_conf_init_uint_value(epcf->aio_requests, 32);

    return NGX_CONF_OK;
}",1042.0,1051.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4622,72874,ngx_eventport_init,1,ngx_eventport_init,"ngx_int_t ngx_eventport_init (ngx_cycle_t*,ngx_msec_t)",event\modules\ngx_eventport_module.c,"static ngx_int_t
ngx_eventport_init(ngx_cycle_t *cycle, ngx_msec_t timer)
{
    port_notify_t          pn;
    struct itimerspec      its;
    struct sigevent        sev;
    ngx_eventport_conf_t  *epcf;

    epcf = ngx_event_get_conf(cycle->conf_ctx, ngx_eventport_module);

    if (ep == -1) {
        ep = port_create();

        if (ep == -1) {
            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
                          ""port_create() failed"");
            return NGX_ERROR;
        }

        notify_event.active = 1;
        notify_event.log = cycle->log;
    }

    if (nevents < epcf->events) {
        if (event_list) {
            ngx_free(event_list);
        }

        event_list = ngx_alloc(sizeof(port_event_t) * epcf->events,
                               cycle->log);
        if (event_list == NULL) {
            return NGX_ERROR;
        }
    }

    ngx_event_flags = NGX_USE_EVENTPORT_EVENT;

    if (timer) {
        ngx_memzero(&pn, sizeof(port_notify_t));
 ...",210.0,282.0,1.0,1.0,73.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4623,72880,ngx_eventport_done,1,ngx_eventport_done,void ngx_eventport_done (ngx_cycle_t*),event\modules\ngx_eventport_module.c,"static void
ngx_eventport_done(ngx_cycle_t *cycle)
{
    if (event_timer != (timer_t) -1) {
        if (timer_delete(event_timer) == -1) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""timer_delete() failed"");
        }

        event_timer = (timer_t) -1;
    }

    if (close(ep) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""close() event port failed"");
    }

    ep = -1;

    ngx_free(event_list);

    event_list = NULL;
    nevents = 0;
}",285.0,308.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4624,72885,ngx_eventport_add_event,1,ngx_eventport_add_event,"ngx_int_t ngx_eventport_add_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_eventport_module.c,"static ngx_int_t
ngx_eventport_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_int_t          events, prev;
    ngx_event_t       *e;
    ngx_connection_t  *c;

    c = ev->data;

    events = event;

    if (event == NGX_READ_EVENT) {
        e = c->write;
        prev = POLLOUT;
#if (NGX_READ_EVENT != POLLIN)
        events = POLLIN;
#endif

    } else {
        e = c->read;
        prev = POLLIN;
#if (NGX_WRITE_EVENT != POLLOUT)
        events = POLLOUT;
#endif
    }

    if (e->oneshot) {
        events |= prev;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""eventport add event: fd:%d ev:%04Xi"", c->fd, events);

    if (port_associate(ep, PORT_SOURCE_FD, c->fd, events,
                       (void *) ((uintptr_t) ev | ev->instance))
        == -1)
    {
        ngx_log_error(NGX_LOG_ALERT, ev->log, ngx_errno,
                      ""port_associate() failed"");
        return NGX_ERROR;
    }

    ev->active = 1;
    ev->onesh...",311.0,357.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4625,72892,ngx_eventport_del_event,1,ngx_eventport_del_event,"ngx_int_t ngx_eventport_del_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_eventport_module.c,"static ngx_int_t
ngx_eventport_del_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_event_t       *e;
    ngx_connection_t  *c;

    /*
     * when the file descriptor is closed, the event port automatically
     * dissociates it from the port, so we do not need to dissociate explicitly
     * the event before the closing the file descriptor
     */

    if (flags & NGX_CLOSE_EVENT) {
        ev->active = 0;
        ev->oneshot = 0;
        return NGX_OK;
    }

    c = ev->data;

    if (event == NGX_READ_EVENT) {
        e = c->write;
        event = POLLOUT;

    } else {
        e = c->read;
        event = POLLIN;
    }

    if (e->oneshot) {
        ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                       ""eventport change event: fd:%d ev:%04Xi"", c->fd, event);

        if (port_associate(ep, PORT_SOURCE_FD, c->fd, event,
                           (void *) ((uintptr_t) ev | ev->instance))
            == -1)
        {
            ngx_log_error(...",360.0,417.0,1.0,1.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4626,72899,ngx_eventport_notify,1,ngx_eventport_notify,ngx_int_t ngx_eventport_notify (ngx_event_handler_pt),event\modules\ngx_eventport_module.c,"static ngx_int_t
ngx_eventport_notify(ngx_event_handler_pt handler)
{
    notify_event.handler = handler;

    if (port_send(ep, 0, &notify_event) != 0) {
        ngx_log_error(NGX_LOG_ALERT, notify_event.log, ngx_errno,
                      ""port_send() failed"");
        return NGX_ERROR;
    }

    return NGX_OK;
}",420.0,432.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4627,72904,ngx_eventport_process_events,1,ngx_eventport_process_events,"ngx_int_t ngx_eventport_process_events (ngx_cycle_t*,ngx_msec_t,ngx_uint_t)",event\modules\ngx_eventport_module.c,"static ngx_int_t
ngx_eventport_process_events(ngx_cycle_t *cycle, ngx_msec_t timer,
    ngx_uint_t flags)
{
    int                 n, revents;
    u_int               events;
    ngx_err_t           err;
    ngx_int_t           instance;
    ngx_uint_t          i, level;
    ngx_event_t        *ev, *rev, *wev;
    ngx_queue_t        *queue;
    ngx_connection_t   *c;
    struct timespec     ts, *tp;

    if (timer == NGX_TIMER_INFINITE) {
        tp = NULL;

    } else {
        ts.tv_sec = timer / 1000;
        ts.tv_nsec = (timer % 1000) * 1000000;
        tp = &ts;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                   ""eventport timer: %M"", timer);

    events = 1;

    n = port_getn(ep, event_list, (u_int) nevents, &events, tp);

    err = ngx_errno;

    if (flags & NGX_UPDATE_TIME) {
        ngx_time_update();
    }

    if (n == -1) {
        if (err == ETIME) {
            if (timer != NGX_TIMER_INFINITE) {
                return NGX_OK;
         ...",435.0,623.0,1.0,1.0,189.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4628,72911,ngx_eventport_create_conf,1,ngx_eventport_create_conf,void* ngx_eventport_create_conf (ngx_cycle_t*),event\modules\ngx_eventport_module.c,"static void *
ngx_eventport_create_conf(ngx_cycle_t *cycle)
{
    ngx_eventport_conf_t  *epcf;

    epcf = ngx_palloc(cycle->pool, sizeof(ngx_eventport_conf_t));
    if (epcf == NULL) {
        return NULL;
    }

    epcf->events = NGX_CONF_UNSET;

    return epcf;
}",626.0,639.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4629,72916,ngx_eventport_init_conf,1,ngx_eventport_init_conf,"char* ngx_eventport_init_conf (ngx_cycle_t*,void*)",event\modules\ngx_eventport_module.c,"static char *
ngx_eventport_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_eventport_conf_t *epcf = conf;

    ngx_conf_init_uint_value(epcf->events, 32);

    return NGX_CONF_OK;
}",642.0,650.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4630,74093,ngx_iocp_init,1,ngx_iocp_init,"ngx_int_t ngx_iocp_init (ngx_cycle_t*,ngx_msec_t)",event\modules\ngx_iocp_module.c,"static ngx_int_t
ngx_iocp_init(ngx_cycle_t *cycle, ngx_msec_t timer)
{
    ngx_iocp_conf_t  *cf;

    cf = ngx_event_get_conf(cycle->conf_ctx, ngx_iocp_module);

    if (iocp == NULL) {
        iocp = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0,
                                      cf->threads);
    }

    if (iocp == NULL) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""CreateIoCompletionPort() failed"");
        return NGX_ERROR;
    }

    ngx_io = ngx_iocp_io;

    ngx_event_actions = ngx_iocp_module_ctx.actions;

    ngx_event_flags = NGX_USE_IOCP_EVENT;

    if (timer == 0) {
        return NGX_OK;
    }

    /*
     * The waitable timer could not be used, because
     * GetQueuedCompletionStatus() does not set a thread to alertable state
     */

    if (timer_thread == NULL) {

        msec = timer;

        if (ngx_create_thread(&timer_thread, ngx_iocp_timer, &msec, cycle->log)
            != 0)
        {
            return NGX_...",108.0,155.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4631,74099,ngx_iocp_timer,1,ngx_iocp_timer,ngx_thread_value_t ngx_iocp_timer (void*),event\modules\ngx_iocp_module.c,"static ngx_thread_value_t __stdcall
ngx_iocp_timer(void *data)
{
    ngx_msec_t  timer = *(ngx_msec_t *) data;

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ngx_cycle->log, 0,
                   ""THREAD %p %p"", &msec, data);

    for ( ;; ) {
        Sleep(timer);

        ngx_time_update();
#if 1
        ngx_log_debug0(NGX_LOG_DEBUG_EVENT, ngx_cycle->log, 0, ""timer"");
#endif
    }

#if defined(__WATCOMC__) || defined(__GNUC__)
    return 0;
#endif
}",158.0,178.0,1.0,26.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_thread_value_t
4632,74104,ngx_iocp_done,1,ngx_iocp_done,void ngx_iocp_done (ngx_cycle_t*),event\modules\ngx_iocp_module.c,"static void
ngx_iocp_done(ngx_cycle_t *cycle)
{
    if (CloseHandle(iocp) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""iocp CloseHandle() failed"");
    }

    iocp = NULL;
}",181.0,190.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4633,74109,ngx_iocp_add_event,1,ngx_iocp_add_event,"ngx_int_t ngx_iocp_add_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_iocp_module.c,"static ngx_int_t
ngx_iocp_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t key)
{
    ngx_connection_t  *c;

    c = (ngx_connection_t *) ev->data;

    c->read->active = 1;
    c->write->active = 1;

    ngx_log_debug3(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""iocp add: fd:%d k:%ui ov:%p"", c->fd, key, &ev->ovlp);

    if (CreateIoCompletionPort((HANDLE) c->fd, iocp, key, 0) == NULL) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                      ""CreateIoCompletionPort() failed"");
        return NGX_ERROR;
    }

    return NGX_OK;
}",193.0,213.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4634,74116,ngx_iocp_del_connection,1,ngx_iocp_del_connection,"ngx_int_t ngx_iocp_del_connection (ngx_connection_t*,ngx_uint_t)",event\modules\ngx_iocp_module.c,"static ngx_int_t
ngx_iocp_del_connection(ngx_connection_t *c, ngx_uint_t flags)
{
#if 0
    if (flags & NGX_CLOSE_EVENT) {
        return NGX_OK;
    }

    if (CancelIo((HANDLE) c->fd) == 0) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno, ""CancelIo() failed"");
        return NGX_ERROR;
    }
#endif

    return NGX_OK;
}",216.0,231.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4635,74122,ngx_iocp_process_events,1,ngx_iocp_process_events,"ngx_int_t ngx_iocp_process_events (ngx_cycle_t*,ngx_msec_t,ngx_uint_t)",event\modules\ngx_iocp_module.c,"static
ngx_int_t ngx_iocp_process_events(ngx_cycle_t *cycle, ngx_msec_t timer,
    ngx_uint_t flags)
{
    int                rc;
    u_int              key;
    u_long             bytes;
    ngx_err_t          err;
    ngx_msec_t         delta;
    ngx_event_t       *ev;
    ngx_event_ovlp_t  *ovlp;

    if (timer == NGX_TIMER_INFINITE) {
        timer = INFINITE;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0, ""iocp timer: %M"", timer);

    rc = GetQueuedCompletionStatus(iocp, &bytes, (PULONG_PTR) &key,
                                   (LPOVERLAPPED *) &ovlp, (u_long) timer);

    if (rc == 0) {
        err = ngx_errno;
    } else {
        err = 0;
    }

    delta = ngx_current_msec;

    if (flags & NGX_UPDATE_TIME) {
        ngx_time_update();
    }

    ngx_log_debug4(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                   ""iocp: %d b:%d k:%d ov:%p"", rc, bytes, key, ovlp);

    if (timer != INFINITE) {
        delta = ngx_current_msec - delta;

        ngx_log_...",234.0,349.0,1.0,1.0,116.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4636,74129,ngx_iocp_create_conf,1,ngx_iocp_create_conf,void* ngx_iocp_create_conf (ngx_cycle_t*),event\modules\ngx_iocp_module.c,"static void *
ngx_iocp_create_conf(ngx_cycle_t *cycle)
{
    ngx_iocp_conf_t  *cf;

    cf = ngx_palloc(cycle->pool, sizeof(ngx_iocp_conf_t));
    if (cf == NULL) {
        return NGX_CONF_ERROR;
    }

    cf->threads = NGX_CONF_UNSET;
    cf->post_acceptex = NGX_CONF_UNSET;
    cf->acceptex_read = NGX_CONF_UNSET;

    return cf;
}",352.0,367.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4637,74134,ngx_iocp_init_conf,1,ngx_iocp_init_conf,"char* ngx_iocp_init_conf (ngx_cycle_t*,void*)",event\modules\ngx_iocp_module.c,"static char *
ngx_iocp_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_iocp_conf_t *cf = conf;

    ngx_conf_init_value(cf->threads, 0);
    ngx_conf_init_value(cf->post_acceptex, 10);
    ngx_conf_init_value(cf->acceptex_read, 1);

    return NGX_CONF_OK;
}",370.0,380.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4638,74788,ngx_kqueue_init,1,ngx_kqueue_init,"ngx_int_t ngx_kqueue_init (ngx_cycle_t*,ngx_msec_t)",event\modules\ngx_kqueue_module.c,"static ngx_int_t
ngx_kqueue_init(ngx_cycle_t *cycle, ngx_msec_t timer)
{
    ngx_kqueue_conf_t  *kcf;
    struct timespec     ts;
#if (NGX_HAVE_TIMER_EVENT)
    struct kevent       kev;
#endif

    kcf = ngx_event_get_conf(cycle->conf_ctx, ngx_kqueue_module);

    if (ngx_kqueue == -1) {
        ngx_kqueue = kqueue();

        if (ngx_kqueue == -1) {
            ngx_log_error(NGX_LOG_EMERG, cycle->log, ngx_errno,
                          ""kqueue() failed"");
            return NGX_ERROR;
        }

#ifdef EVFILT_USER
        if (ngx_kqueue_notify_init(cycle->log) != NGX_OK) {
            return NGX_ERROR;
        }
#endif
    }

    if (max_changes < kcf->changes) {
        if (nchanges) {
            ts.tv_sec = 0;
            ts.tv_nsec = 0;

            if (kevent(ngx_kqueue, change_list, (int) nchanges, NULL, 0, &ts)
                == -1)
            {
                ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                              ""kevent() failed"");
         ...",116.0,227.0,1.0,1.0,112.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4639,74794,ngx_kqueue_done,1,ngx_kqueue_done,void ngx_kqueue_done (ngx_cycle_t*),event\modules\ngx_kqueue_module.c,"static void
ngx_kqueue_done(ngx_cycle_t *cycle)
{
    if (close(ngx_kqueue) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""kqueue close() failed"");
    }

    ngx_kqueue = -1;

    ngx_free(change_list);
    ngx_free(event_list);

    change_list = NULL;
    event_list = NULL;
    max_changes = 0;
    nchanges = 0;
    nevents = 0;
}",261.0,279.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4640,74799,ngx_kqueue_add_event,1,ngx_kqueue_add_event,"ngx_int_t ngx_kqueue_add_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_kqueue_module.c,"static ngx_int_t
ngx_kqueue_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_int_t          rc;
#if 0
    ngx_event_t       *e;
    ngx_connection_t  *c;
#endif

    ev->active = 1;
    ev->disabled = 0;
    ev->oneshot = (flags & NGX_ONESHOT_EVENT) ? 1 : 0;

#if 0

    if (ev->index < nchanges
        && ((uintptr_t) change_list[ev->index].udata & (uintptr_t) ~1)
            == (uintptr_t) ev)
    {
        if (change_list[ev->index].flags == EV_DISABLE) {

            /*
             * if the EV_DISABLE is still not passed to a kernel
             * we will not pass it
             */

            ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                           ""kevent activated: %d: ft:%i"",
                           ngx_event_ident(ev->data), event);

            if (ev->index < --nchanges) {
                e = (ngx_event_t *)
                    ((uintptr_t) change_list[nchanges].udata & (uintptr_t) ~1);
                change_list[ev->index] =...",282.0,335.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4641,74806,ngx_kqueue_del_event,1,ngx_kqueue_del_event,"ngx_int_t ngx_kqueue_del_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_kqueue_module.c,"static ngx_int_t
ngx_kqueue_del_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_int_t     rc;
    ngx_event_t  *e;

    ev->active = 0;
    ev->disabled = 0;

    if (ev->index < nchanges
        && ((uintptr_t) change_list[ev->index].udata & (uintptr_t) ~1)
            == (uintptr_t) ev)
    {
        ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                       ""kevent deleted: %d: ft:%i"",
                       ngx_event_ident(ev->data), event);

        /* if the event is still not passed to a kernel we will not pass it */

        nchanges--;

        if (ev->index < nchanges) {
            e = (ngx_event_t *)
                    ((uintptr_t) change_list[nchanges].udata & (uintptr_t) ~1);
            change_list[ev->index] = change_list[nchanges];
            e->index = ev->index;
        }

        return NGX_OK;
    }

    /*
     * when the file descriptor is closed the kqueue automatically deletes
     * its filters so we do not need to delete e...",338.0,389.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4642,74813,ngx_kqueue_set_event,1,ngx_kqueue_set_event,"ngx_int_t ngx_kqueue_set_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_kqueue_module.c,"static ngx_int_t
ngx_kqueue_set_event(ngx_event_t *ev, ngx_int_t filter, ngx_uint_t flags)
{
    struct kevent     *kev;
    struct timespec    ts;
    ngx_connection_t  *c;

    c = ev->data;

    ngx_log_debug3(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""kevent set event: %d: ft:%i fl:%04Xi"",
                   c->fd, filter, flags);

    if (nchanges >= max_changes) {
        ngx_log_error(NGX_LOG_WARN, ev->log, 0,
                      ""kqueue change list is filled up"");

        ts.tv_sec = 0;
        ts.tv_nsec = 0;

        if (kevent(ngx_kqueue, change_list, (int) nchanges, NULL, 0, &ts)
            == -1)
        {
            ngx_log_error(NGX_LOG_ALERT, ev->log, ngx_errno, ""kevent() failed"");
            return NGX_ERROR;
        }

        nchanges = 0;
    }

    kev = &change_list[nchanges];

    kev->ident = c->fd;
    kev->filter = (short) filter;
    kev->flags = (u_short) flags;
    kev->udata = NGX_KQUEUE_UDATA_T ((uintptr_t) ev | ev->instance);

    if (...",392.0,475.0,1.0,1.0,84.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4643,74820,ngx_kqueue_process_events,1,ngx_kqueue_process_events,"ngx_int_t ngx_kqueue_process_events (ngx_cycle_t*,ngx_msec_t,ngx_uint_t)",event\modules\ngx_kqueue_module.c,"static ngx_int_t
ngx_kqueue_process_events(ngx_cycle_t *cycle, ngx_msec_t timer,
    ngx_uint_t flags)
{
    int               events, n;
    ngx_int_t         i, instance;
    ngx_uint_t        level;
    ngx_err_t         err;
    ngx_event_t      *ev;
    ngx_queue_t      *queue;
    struct timespec   ts, *tp;

    n = (int) nchanges;
    nchanges = 0;

    if (timer == NGX_TIMER_INFINITE) {
        tp = NULL;

    } else {

        ts.tv_sec = timer / 1000;
        ts.tv_nsec = (timer % 1000) * 1000000;

        /*
         * 64-bit Darwin kernel has the bug: kernel level ts.tv_nsec is
         * the int32_t while user level ts.tv_nsec is the long (64-bit),
         * so on the big endian PowerPC all nanoseconds are lost.
         */

#if (NGX_DARWIN_KEVENT_BUG)
        ts.tv_nsec <<= 32;
#endif

        tp = &ts;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                   ""kevent timer: %M, changes: %d"", timer, n);

    events = kevent(ngx_kqueue, change_li...",497.0,673.0,1.0,1.0,177.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4644,74828,ngx_kqueue_create_conf,1,ngx_kqueue_create_conf,void* ngx_kqueue_create_conf (ngx_cycle_t*),event\modules\ngx_kqueue_module.c,"static void *
ngx_kqueue_create_conf(ngx_cycle_t *cycle)
{
    ngx_kqueue_conf_t  *kcf;

    kcf = ngx_palloc(cycle->pool, sizeof(ngx_kqueue_conf_t));
    if (kcf == NULL) {
        return NULL;
    }

    kcf->changes = NGX_CONF_UNSET;
    kcf->events = NGX_CONF_UNSET;

    return kcf;
}",696.0,710.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4645,74833,ngx_kqueue_init_conf,1,ngx_kqueue_init_conf,"char* ngx_kqueue_init_conf (ngx_cycle_t*,void*)",event\modules\ngx_kqueue_module.c,"static char *
ngx_kqueue_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_kqueue_conf_t *kcf = conf;

    ngx_conf_init_uint_value(kcf->changes, 512);
    ngx_conf_init_uint_value(kcf->events, 512);

    return NGX_CONF_OK;
}",713.0,722.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4646,75979,ngx_poll_init,1,ngx_poll_init,"ngx_int_t ngx_poll_init (ngx_cycle_t*,ngx_msec_t)",event\modules\ngx_win32_poll_module.c,"static ngx_int_t
ngx_poll_init(ngx_cycle_t *cycle, ngx_msec_t timer)
{
    struct pollfd      *list;
    ngx_connection_t  **index;

    if (event_list == NULL) {
        nevents = 0;
    }

    if (ngx_process >= NGX_PROCESS_WORKER
        || cycle->old_cycle == NULL
        || cycle->old_cycle->connection_n < cycle->connection_n)
    {
        list = ngx_alloc(sizeof(struct pollfd) * cycle->connection_n,
                         cycle->log);
        if (list == NULL) {
            return NGX_ERROR;
        }

        if (event_list) {
            ngx_memcpy(list, event_list, sizeof(struct pollfd) * nevents);
            ngx_free(event_list);
        }

        event_list = list;

        index = ngx_alloc(sizeof(ngx_connection_t *) * cycle->connection_n,
                          cycle->log);
        if (index == NULL) {
            return NGX_ERROR;
        }

        if (event_index) {
            ngx_memcpy(index, event_index,
                       sizeof(ngx_connection_t *) *...",69.0,118.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4647,75985,ngx_poll_done,1,ngx_poll_done,void ngx_poll_done (ngx_cycle_t*),event\modules\ngx_win32_poll_module.c,"static void
ngx_poll_done(ngx_cycle_t *cycle)
{
    ngx_free(event_list);
    ngx_free(event_index);

    event_list = NULL;
    event_index = NULL;
}",121.0,129.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4648,75990,ngx_poll_add_event,1,ngx_poll_add_event,"ngx_int_t ngx_poll_add_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_win32_poll_module.c,"static ngx_int_t
ngx_poll_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_event_t       *e;
    ngx_connection_t  *c;

    c = ev->data;

    ev->active = 1;

    if (ev->index != NGX_INVALID_INDEX) {
        ngx_log_error(NGX_LOG_ALERT, ev->log, 0,
                      ""poll event fd:%d ev:%i is already set"", c->fd, event);
        return NGX_OK;
    }

    if (event == NGX_READ_EVENT) {
        e = c->write;
#if (NGX_READ_EVENT != POLLIN)
        event = POLLIN;
#endif

    } else {
        e = c->read;
#if (NGX_WRITE_EVENT != POLLOUT)
        event = POLLOUT;
#endif
    }

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""poll add event: fd:%d ev:%i"", c->fd, event);

    if (e == NULL || e->index == NGX_INVALID_INDEX) {

        event_list[nevents].fd = c->fd;
        event_list[nevents].events = (short) event;
        event_list[nevents].revents = 0;

        event_index[nevents] = c;

        ev->index = nevents;
        nevents++;...",132.0,184.0,1.0,1.0,53.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4649,75997,ngx_poll_del_event,1,ngx_poll_del_event,"ngx_int_t ngx_poll_del_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_win32_poll_module.c,"static ngx_int_t
ngx_poll_del_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_event_t       *e;
    ngx_connection_t  *c;

    c = ev->data;

    ev->active = 0;

    if (ev->index == NGX_INVALID_INDEX) {
        ngx_log_error(NGX_LOG_ALERT, ev->log, 0,
                      ""poll event fd:%d ev:%i is already deleted"",
                      c->fd, event);
        return NGX_OK;
    }

    if (event == NGX_READ_EVENT) {
        e = c->write;
#if (NGX_READ_EVENT != POLLIN)
        event = POLLIN;
#endif

    } else {
        e = c->read;
#if (NGX_WRITE_EVENT != POLLOUT)
        event = POLLOUT;
#endif
    }

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""poll del event: fd:%d ev:%i"", c->fd, event);

    if (e == NULL || e->index == NGX_INVALID_INDEX) {
        nevents--;

        if (ev->index < nevents) {

            ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                           ""index: copy event %ui to %i"", nevents, ev->inde...",187.0,258.0,1.0,1.0,72.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4650,76004,ngx_poll_process_events,1,ngx_poll_process_events,"ngx_int_t ngx_poll_process_events (ngx_cycle_t*,ngx_msec_t,ngx_uint_t)",event\modules\ngx_win32_poll_module.c,"static ngx_int_t
ngx_poll_process_events(ngx_cycle_t *cycle, ngx_msec_t timer, ngx_uint_t flags)
{
    int                 ready, revents;
    ngx_err_t           err;
    ngx_uint_t          i, found;
    ngx_event_t        *ev;
    ngx_queue_t        *queue;
    ngx_connection_t   *c;

    /* NGX_TIMER_INFINITE == INFTIM */

#if (NGX_DEBUG0)
    if (cycle->log->log_level & NGX_LOG_DEBUG_ALL) {
        for (i = 0; i < nevents; i++) {
            ngx_log_debug3(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                           ""poll: %ui: fd:%d ev:%04Xd"",
                           i, event_list[i].fd, event_list[i].events);
        }
    }
#endif

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0, ""poll timer: %M"", timer);

    ready = WSAPoll(event_list, (u_int) nevents, (int) timer);

    err = (ready == -1) ? ngx_errno : 0;

    if (flags & NGX_UPDATE_TIME || ngx_event_timer_alarm) {
        ngx_time_update();
    }

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
       ...",261.0,411.0,1.0,1.0,151.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4651,76011,ngx_poll_init_conf,1,ngx_poll_init_conf,"char* ngx_poll_init_conf (ngx_cycle_t*,void*)",event\modules\ngx_win32_poll_module.c,"static char *
ngx_poll_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_event_conf_t  *ecf;

    ecf = ngx_event_get_conf(cycle->conf_ctx, ngx_event_core_module);

    if (ecf->use != ngx_poll_module.ctx_index) {
        return NGX_CONF_OK;
    }

#if (NGX_LOAD_WSAPOLL)

    if (!ngx_have_wsapoll) {
        ngx_log_error(NGX_LOG_EMERG, cycle->log, 0,
                      ""poll is not available on this platform"");
        return NGX_CONF_ERROR;
    }

#endif

    return NGX_CONF_OK;
}",414.0,436.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4652,76911,ngx_select_init,1,ngx_select_init,"ngx_int_t ngx_select_init (ngx_cycle_t*,ngx_msec_t)",event\modules\ngx_win32_select_module.c,"static ngx_int_t
ngx_select_init(ngx_cycle_t *cycle, ngx_msec_t timer)
{
    ngx_event_t  **index;

    if (event_index == NULL) {
        FD_ZERO(&master_read_fd_set);
        FD_ZERO(&master_write_fd_set);
        nevents = 0;
    }

    if (ngx_process >= NGX_PROCESS_WORKER
        || cycle->old_cycle == NULL
        || cycle->old_cycle->connection_n < cycle->connection_n)
    {
        index = ngx_alloc(sizeof(ngx_event_t *) * 2 * cycle->connection_n,
                          cycle->log);
        if (index == NULL) {
            return NGX_ERROR;
        }

        if (event_index) {
            ngx_memcpy(index, event_index, sizeof(ngx_event_t *) * nevents);
            ngx_free(event_index);
        }

        event_index = index;
    }

    ngx_io = ngx_os_io;

    ngx_event_actions = ngx_select_module_ctx.actions;

    ngx_event_flags = NGX_USE_LEVEL_EVENT;

    max_read = 0;
    max_write = 0;

    return NGX_OK;
}",76.0,115.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4653,76917,ngx_select_done,1,ngx_select_done,void ngx_select_done (ngx_cycle_t*),event\modules\ngx_win32_select_module.c,"static void
ngx_select_done(ngx_cycle_t *cycle)
{
    ngx_free(event_index);

    event_index = NULL;
}",118.0,124.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4654,76922,ngx_select_add_event,1,ngx_select_add_event,"ngx_int_t ngx_select_add_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_win32_select_module.c,"static ngx_int_t
ngx_select_add_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_connection_t  *c;

    c = ev->data;

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""select add event fd:%d ev:%i"", c->fd, event);

    if (ev->index != NGX_INVALID_INDEX) {
        ngx_log_error(NGX_LOG_ALERT, ev->log, 0,
                      ""select event fd:%d ev:%i is already set"", c->fd, event);
        return NGX_OK;
    }

    if ((event == NGX_READ_EVENT && ev->write)
        || (event == NGX_WRITE_EVENT && !ev->write))
    {
        ngx_log_error(NGX_LOG_ALERT, ev->log, 0,
                      ""invalid select %s event fd:%d ev:%i"",
                      ev->write ? ""write"" : ""read"", c->fd, event);
        return NGX_ERROR;
    }

    if ((event == NGX_READ_EVENT && max_read >= FD_SETSIZE)
        || (event == NGX_WRITE_EVENT && max_write >= FD_SETSIZE))
    {
        ngx_log_error(NGX_LOG_ERR, ev->log, 0,
                      ""maximum number of des...",127.0,177.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4655,76929,ngx_select_del_event,1,ngx_select_del_event,"ngx_int_t ngx_select_del_event (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\modules\ngx_win32_select_module.c,"static ngx_int_t
ngx_select_del_event(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags)
{
    ngx_event_t       *e;
    ngx_connection_t  *c;

    c = ev->data;

    ev->active = 0;

    if (ev->index == NGX_INVALID_INDEX) {
        return NGX_OK;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""select del event fd:%d ev:%i"", c->fd, event);

    if (event == NGX_READ_EVENT) {
        FD_CLR(c->fd, &master_read_fd_set);
        max_read--;

    } else if (event == NGX_WRITE_EVENT) {
        FD_CLR(c->fd, &master_write_fd_set);
        max_write--;
    }

    if (ev->index < --nevents) {
        e = event_index[nevents];
        event_index[ev->index] = e;
        e->index = ev->index;
    }

    ev->index = NGX_INVALID_INDEX;

    return NGX_OK;
}",180.0,215.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4656,76936,ngx_select_process_events,1,ngx_select_process_events,"ngx_int_t ngx_select_process_events (ngx_cycle_t*,ngx_msec_t,ngx_uint_t)",event\modules\ngx_win32_select_module.c,"static ngx_int_t
ngx_select_process_events(ngx_cycle_t *cycle, ngx_msec_t timer,
    ngx_uint_t flags)
{
    int                ready, nready;
    ngx_err_t          err;
    ngx_uint_t         i, found;
    ngx_event_t       *ev;
    ngx_queue_t       *queue;
    struct timeval     tv, *tp;
    ngx_connection_t  *c;

#if (NGX_DEBUG)
    if (cycle->log->log_level & NGX_LOG_DEBUG_ALL) {
        for (i = 0; i < nevents; i++) {
            ev = event_index[i];
            c = ev->data;
            ngx_log_debug2(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                           ""select event: fd:%d wr:%d"", c->fd, ev->write);
        }
    }
#endif

    if (timer == NGX_TIMER_INFINITE) {
        tp = NULL;

    } else {
        tv.tv_sec = (long) (timer / 1000);
        tv.tv_usec = (long) ((timer % 1000) * 1000);
        tp = &tv;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                   ""select timer: %M"", timer);

    work_read_fd_set = master_read_fd_set;
    work...",218.0,352.0,1.0,1.0,135.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4657,76943,ngx_select_repair_fd_sets,1,ngx_select_repair_fd_sets,void ngx_select_repair_fd_sets (ngx_cycle_t*),event\modules\ngx_win32_select_module.c,"static void
ngx_select_repair_fd_sets(ngx_cycle_t *cycle)
{
    int           n;
    u_int         i;
    socklen_t     len;
    ngx_err_t     err;
    ngx_socket_t  s;

    for (i = 0; i < master_read_fd_set.fd_count; i++) {

        s = master_read_fd_set.fd_array[i];
        len = sizeof(int);

        if (getsockopt(s, SOL_SOCKET, SO_TYPE, (char *) &n, &len) == -1) {
            err = ngx_socket_errno;

            ngx_log_error(NGX_LOG_ALERT, cycle->log, err,
                          ""invalid descriptor #%d in read fd_set"", s);

            FD_CLR(s, &master_read_fd_set);
        }
    }

    for (i = 0; i < master_write_fd_set.fd_count; i++) {

        s = master_write_fd_set.fd_array[i];
        len = sizeof(int);

        if (getsockopt(s, SOL_SOCKET, SO_TYPE, (char *) &n, &len) == -1) {
            err = ngx_socket_errno;

            ngx_log_error(NGX_LOG_ALERT, cycle->log, err,
                          ""invalid descriptor #%d in write fd_set"", s);

            FD_CLR(s,...",355.0,393.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4658,76948,ngx_select_init_conf,1,ngx_select_init_conf,"char* ngx_select_init_conf (ngx_cycle_t*,void*)",event\modules\ngx_win32_select_module.c,"static char *
ngx_select_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_event_conf_t  *ecf;

    ecf = ngx_event_get_conf(cycle->conf_ctx, ngx_event_core_module);

    if (ecf->use != ngx_select_module.ctx_index) {
        return NGX_CONF_OK;
    }

    return NGX_CONF_OK;
}",396.0,408.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4659,79729,ngx_event_init_conf,1,ngx_event_init_conf,"char* ngx_event_init_conf (ngx_cycle_t*,void*)",event\ngx_event.c,"static char *
ngx_event_init_conf(ngx_cycle_t *cycle, void *conf)
{
#if (NGX_HAVE_REUSEPORT)
    ngx_uint_t        i;
    ngx_listening_t  *ls;
#endif

    if (ngx_get_conf(cycle->conf_ctx, ngx_events_module) == NULL) {
        ngx_log_error(NGX_LOG_EMERG, cycle->log, 0,
                      ""no \""events\"" section in configuration"");
        return NGX_CONF_ERROR;
    }

    if (cycle->connection_n < cycle->listening.nelts + 1) {

        /*
         * there should be at least one connection for each listening
         * socket, plus an additional connection for channel
         */

        ngx_log_error(NGX_LOG_EMERG, cycle->log, 0,
                      ""%ui worker_connections are not enough ""
                      ""for %ui listening sockets"",
                      cycle->connection_n, cycle->listening.nelts);

        return NGX_CONF_ERROR;
    }

#if (NGX_HAVE_REUSEPORT)

    if (!ngx_test_config) {

        ls = cycle->listening.elts;
        for (i = 0; i < cycle->listening.n...",413.0,466.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4660,79735,ngx_event_module_init,1,ngx_event_module_init,ngx_int_t ngx_event_module_init (ngx_cycle_t*),event\ngx_event.c,"static ngx_int_t
ngx_event_module_init(ngx_cycle_t *cycle)
{
    void              ***cf;
    u_char              *shared;
    size_t               size, cl;
    ngx_shm_t            shm;
    ngx_time_t          *tp;
    ngx_core_conf_t     *ccf;
    ngx_event_conf_t    *ecf;

    cf = ngx_get_conf(cycle->conf_ctx, ngx_events_module);
    ecf = (*cf)[ngx_event_core_module.ctx_index];

    if (!ngx_test_config && ngx_process <= NGX_PROCESS_MASTER) {
        ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0,
                      ""using the \""%s\"" event method"", ecf->name);
    }

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    ngx_timer_resolution = ccf->timer_resolution;

#if !(NGX_WIN32)
    {
    ngx_int_t      limit;
    struct rlimit  rlmt;

    if (getrlimit(RLIMIT_NOFILE, &rlmt) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""getrlimit(RLIMIT_NOFILE) failed, ignored"");

    } else {
        if (ecf->conne...",469.0,595.0,1.0,1.0,127.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4661,79740,ngx_event_process_init,1,ngx_event_process_init,ngx_int_t ngx_event_process_init (ngx_cycle_t*),event\ngx_event.c,"static ngx_int_t
ngx_event_process_init(ngx_cycle_t *cycle)
{
    ngx_uint_t           m, i;
    ngx_event_t         *rev, *wev;
    ngx_listening_t     *ls;
    ngx_connection_t    *c, *next, *old;
    ngx_core_conf_t     *ccf;
    ngx_event_conf_t    *ecf;
    ngx_event_module_t  *module;

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);
    ecf = ngx_event_get_conf(cycle->conf_ctx, ngx_event_core_module);

    if (ccf->master && ccf->worker_processes > 1 && ecf->accept_mutex) {
        ngx_use_accept_mutex = 1;
        ngx_accept_mutex_held = 0;
        ngx_accept_mutex_delay = ecf->accept_mutex_delay;

    } else {
        ngx_use_accept_mutex = 0;
    }

#if (NGX_WIN32)

    /*
     * disable accept mutex on win32 as it may cause deadlock if
     * grabbed by a process which can't accept connections
     */

    ngx_use_accept_mutex = 0;

#endif

    ngx_queue_init(&ngx_posted_accept_events);
    ngx_queue_init(&ngx_posted_next_events);
    ngx_queu...",613.0,912.0,1.0,1.0,300.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4662,79745,ngx_events_block,1,ngx_events_block,"char* ngx_events_block (ngx_conf_t*,ngx_command_t*,void*)",event\ngx_event.c,"static char *
ngx_events_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                 *rv;
    void               ***ctx;
    ngx_uint_t            i;
    ngx_conf_t            pcf;
    ngx_event_module_t   *m;

    if (*(void **) conf) {
        return ""is duplicate"";
    }

    /* count the number of the event modules and set up their indices */

    ngx_event_max_module = ngx_count_modules(cf->cycle, NGX_EVENT_MODULE);

    ctx = ngx_pcalloc(cf->pool, sizeof(void *));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    *ctx = ngx_pcalloc(cf->pool, ngx_event_max_module * sizeof(void *));
    if (*ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    *(void **) conf = ctx;

    for (i = 0; cf->cycle->modules[i]; i++) {
        if (cf->cycle->modules[i]->type != NGX_EVENT_MODULE) {
            continue;
        }

        m = cf->cycle->modules[i]->ctx;

        if (m->create_conf) {
            (*ctx)[cf->cycle->modules[i]->ctx_index] =
         ...",950.0,1025.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4663,79752,ngx_event_connections,1,ngx_event_connections,"char* ngx_event_connections (ngx_conf_t*,ngx_command_t*,void*)",event\ngx_event.c,"static char *
ngx_event_connections(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_event_conf_t  *ecf = conf;

    ngx_str_t  *value;

    if (ecf->connections != NGX_CONF_UNSET_UINT) {
        return ""is duplicate"";
    }

    value = cf->args->elts;
    ecf->connections = ngx_atoi(value[1].data, value[1].len);
    if (ecf->connections == (ngx_uint_t) NGX_ERROR) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid number \""%V\"""", &value[1]);

        return NGX_CONF_ERROR;
    }

    cf->cycle->connection_n = ecf->connections;

    return NGX_CONF_OK;
}",1028.0,1051.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4664,79759,ngx_event_use,1,ngx_event_use,"char* ngx_event_use (ngx_conf_t*,ngx_command_t*,void*)",event\ngx_event.c,"static char *
ngx_event_use(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_event_conf_t  *ecf = conf;

    ngx_int_t             m;
    ngx_str_t            *value;
    ngx_event_conf_t     *old_ecf;
    ngx_event_module_t   *module;

    if (ecf->use != NGX_CONF_UNSET_UINT) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (cf->cycle->old_cycle->conf_ctx) {
        old_ecf = ngx_event_get_conf(cf->cycle->old_cycle->conf_ctx,
                                     ngx_event_core_module);
    } else {
        old_ecf = NULL;
    }


    for (m = 0; cf->cycle->modules[m]; m++) {
        if (cf->cycle->modules[m]->type != NGX_EVENT_MODULE) {
            continue;
        }

        module = cf->cycle->modules[m]->ctx;
        if (module->name->len == value[1].len) {
            if (ngx_strcmp(module->name->data, value[1].data) == 0) {
                ecf->use = cf->cycle->modules[m]->ctx_index;
                ecf->name = module->name->data;

        ...",1054.0,1114.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4665,79766,ngx_event_debug_connection,1,ngx_event_debug_connection,"char* ngx_event_debug_connection (ngx_conf_t*,ngx_command_t*,void*)",event\ngx_event.c,"static char *
ngx_event_debug_connection(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
#if (NGX_DEBUG)
    ngx_event_conf_t  *ecf = conf;

    ngx_int_t             rc;
    ngx_str_t            *value;
    ngx_url_t             u;
    ngx_cidr_t            c, *cidr;
    ngx_uint_t            i;
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    value = cf->args->elts;

#if (NGX_HAVE_UNIX_DOMAIN)

    if (ngx_strcmp(value[1].data, ""unix:"") == 0) {
        cidr = ngx_array_push(&ecf->debug_connection);
        if (cidr == NULL) {
            return NGX_CONF_ERROR;
        }

        cidr->family = AF_UNIX;
        return NGX_CONF_OK;
    }

#endif

    rc = ngx_ptocidr(&value[1], &c);

    if (rc != NGX_ERROR) {
        if (rc == NGX_DONE) {
            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                               ""low address bits of %V are meaningless"",
                               &value[1]);
        }

        cidr = ngx_...",1117.0,1218.0,1.0,1.0,102.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4666,79773,ngx_event_core_create_conf,1,ngx_event_core_create_conf,void* ngx_event_core_create_conf (ngx_cycle_t*),event\ngx_event.c,"static void *
ngx_event_core_create_conf(ngx_cycle_t *cycle)
{
    ngx_event_conf_t  *ecf;

    ecf = ngx_palloc(cycle->pool, sizeof(ngx_event_conf_t));
    if (ecf == NULL) {
        return NULL;
    }

    ecf->connections = NGX_CONF_UNSET_UINT;
    ecf->use = NGX_CONF_UNSET_UINT;
    ecf->multi_accept = NGX_CONF_UNSET;
    ecf->accept_mutex = NGX_CONF_UNSET;
    ecf->accept_mutex_delay = NGX_CONF_UNSET_MSEC;
    ecf->name = (void *) NGX_CONF_UNSET;

#if (NGX_DEBUG)

    if (ngx_array_init(&ecf->debug_connection, cycle->pool, 4,
                       sizeof(ngx_cidr_t)) == NGX_ERROR)
    {
        return NULL;
    }

#endif

    return ecf;
}",1221.0,1249.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4667,79778,ngx_event_core_init_conf,1,ngx_event_core_init_conf,"char* ngx_event_core_init_conf (ngx_cycle_t*,void*)",event\ngx_event.c,"static char *
ngx_event_core_init_conf(ngx_cycle_t *cycle, void *conf)
{
    ngx_event_conf_t  *ecf = conf;

#if (NGX_HAVE_EPOLL) && !(NGX_TEST_BUILD_EPOLL)
    int                  fd;
#endif
    ngx_int_t            i;
    ngx_module_t        *module;
    ngx_event_module_t  *event_module;

    module = NULL;

#if (NGX_HAVE_EPOLL) && !(NGX_TEST_BUILD_EPOLL)

    fd = epoll_create(100);

    if (fd != -1) {
        (void) close(fd);
        module = &ngx_epoll_module;

    } else if (ngx_errno != NGX_ENOSYS) {
        module = &ngx_epoll_module;
    }

#endif

#if (NGX_HAVE_DEVPOLL) && !(NGX_TEST_BUILD_DEVPOLL)

    module = &ngx_devpoll_module;

#endif

#if (NGX_HAVE_KQUEUE)

    module = &ngx_kqueue_module;

#endif

#if (NGX_HAVE_SELECT)

    if (module == NULL) {
        module = &ngx_select_module;
    }

#endif

    if (module == NULL) {
        for (i = 0; cycle->modules[i]; i++) {

            if (cycle->modules[i]->type != NGX_EVENT_MODULE) {
                continue;
     ...",1252.0,1337.0,1.0,47.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4668,79959,ngx_process_events_and_timers,1,ngx_process_events_and_timers,void ngx_process_events_and_timers (ngx_cycle_t*),event\ngx_event.c,"void
ngx_process_events_and_timers(ngx_cycle_t *cycle)
{
    ngx_uint_t  flags;
    ngx_msec_t  timer, delta;

    if (ngx_timer_resolution) {
        timer = NGX_TIMER_INFINITE;
        flags = 0;

    } else {
        timer = ngx_event_find_timer();
        flags = NGX_UPDATE_TIME;

#if (NGX_WIN32)

        /* handle signals from master in case of network inactivity */

        if (timer == NGX_TIMER_INFINITE || timer > 500) {
            timer = 500;
        }

#endif
    }

    if (ngx_use_accept_mutex) {
        if (ngx_accept_disabled > 0) {
            ngx_accept_disabled--;

        } else {
            if (ngx_trylock_accept_mutex(cycle) == NGX_ERROR) {
                return;
            }

            if (ngx_accept_mutex_held) {
                flags |= NGX_POST_EVENTS;

            } else {
                if (timer == NGX_TIMER_INFINITE
                    || timer > ngx_accept_mutex_delay)
                {
                    timer = ngx_accept_mutex_delay;
         ...",193.0,263.0,1.0,1.0,71.0,15,8,27,15,1,11,6,7,4,5,,0,6,2,1,1,void
4669,80071,ngx_handle_read_event,1,ngx_handle_read_event,"ngx_int_t ngx_handle_read_event (ngx_event_t*,ngx_uint_t)",event\ngx_event.c,"ngx_int_t
ngx_handle_read_event(ngx_event_t *rev, ngx_uint_t flags)
{
    if (ngx_event_flags & NGX_USE_CLEAR_EVENT) {

        /* kqueue, epoll */

        if (!rev->active && !rev->ready) {
            if (ngx_add_event(rev, NGX_READ_EVENT, NGX_CLEAR_EVENT)
                == NGX_ERROR)
            {
                return NGX_ERROR;
            }
        }

        return NGX_OK;

    } else if (ngx_event_flags & NGX_USE_LEVEL_EVENT) {

        /* select, poll, /dev/poll */

        if (!rev->active && !rev->ready) {
            if (ngx_add_event(rev, NGX_READ_EVENT, NGX_LEVEL_EVENT)
                == NGX_ERROR)
            {
                return NGX_ERROR;
            }

            return NGX_OK;
        }

        if (rev->active && (rev->ready || (flags & NGX_CLOSE_EVENT))) {
            if (ngx_del_event(rev, NGX_READ_EVENT, NGX_LEVEL_EVENT | flags)
                == NGX_ERROR)
            {
                return NGX_ERROR;
            }

            return NGX_OK;
    ...",266.0,331.0,1.0,1.0,66.0,7,5,11,7,19,1,4,7,1,0,,0,1,4,2,2,ngx_int_t
4670,80215,ngx_handle_write_event,1,ngx_handle_write_event,"ngx_int_t ngx_handle_write_event (ngx_event_t*,size_t)",event\ngx_event.c,"ngx_int_t
ngx_handle_write_event(ngx_event_t *wev, size_t lowat)
{
    ngx_connection_t  *c;

    if (lowat) {
        c = wev->data;

        if (ngx_send_lowat(c, lowat) == NGX_ERROR) {
            return NGX_ERROR;
        }
    }

    if (ngx_event_flags & NGX_USE_CLEAR_EVENT) {

        /* kqueue, epoll */

        if (!wev->active && !wev->ready) {
            if (ngx_add_event(wev, NGX_WRITE_EVENT,
                              NGX_CLEAR_EVENT | (lowat ? NGX_LOWAT_EVENT : 0))
                == NGX_ERROR)
            {
                return NGX_ERROR;
            }
        }

        return NGX_OK;

    } else if (ngx_event_flags & NGX_USE_LEVEL_EVENT) {

        /* select, poll, /dev/poll */

        if (!wev->active && !wev->ready) {
            if (ngx_add_event(wev, NGX_WRITE_EVENT, NGX_LEVEL_EVENT)
                == NGX_ERROR)
            {
                return NGX_ERROR;
            }

            return NGX_OK;
        }

        if (wev->active && wev->ready) {
  ...",334.0,410.0,1.0,1.0,77.0,12,8,20,10,7,2,6,10,2,1,,0,2,4,2,2,ngx_int_t
4671,80700,ngx_timer_signal_handler,1,ngx_timer_signal_handler,void ngx_timer_signal_handler (int),event\ngx_event.c,"static void
ngx_timer_signal_handler(int signo)
{
    ngx_event_timer_alarm = 1;

#if 1
    ngx_log_debug0(NGX_LOG_DEBUG_EVENT, ngx_cycle->log, 0, ""timer signal"");
#endif
}",600.0,608.0,1.0,1.0,9.0,2,2,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
4672,81379,ngx_send_lowat,1,ngx_send_lowat,"ngx_int_t ngx_send_lowat (ngx_connection_t*,size_t)",event\ngx_event.c,"ngx_int_t
ngx_send_lowat(ngx_connection_t *c, size_t lowat)
{
    int  sndlowat;

#if (NGX_HAVE_LOWAT_EVENT)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {
        c->write->available = lowat;
        return NGX_OK;
    }

#endif

    if (lowat == 0 || c->sndlowat) {
        return NGX_OK;
    }

    sndlowat = (int) lowat;

    if (setsockopt(c->fd, SOL_SOCKET, SO_SNDLOWAT,
                   (const void *) &sndlowat, sizeof(int))
        == -1)
    {
        ngx_connection_error(c, ngx_socket_errno,
                             ""setsockopt(SO_SNDLOWAT) failed"");
        return NGX_ERROR;
    }

    c->sndlowat = 1;

    return NGX_OK;
}",915.0,947.0,1.0,1.0,33.0,13,8,15,9,1,1,3,3,0,1,,0,0,4,2,2,ngx_int_t
4673,82221,add,1,ngx_event_actions_t.add,"ngx_int_t ngx_event_actions_t.add (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\ngx_event.h,"ngx_int_t  (*add)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);",171.0,171.0,16.0,73.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4674,82228,del,1,ngx_event_actions_t.del,"ngx_int_t ngx_event_actions_t.del (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\ngx_event.h,"ngx_int_t  (*del)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);",172.0,172.0,16.0,73.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4675,82235,enable,1,ngx_event_actions_t.enable,"ngx_int_t ngx_event_actions_t.enable (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\ngx_event.h,"ngx_int_t  (*enable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);",174.0,174.0,16.0,76.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4676,82242,disable,1,ngx_event_actions_t.disable,"ngx_int_t ngx_event_actions_t.disable (ngx_event_t*,ngx_int_t,ngx_uint_t)",event\ngx_event.h,"ngx_int_t  (*disable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);",175.0,175.0,16.0,77.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4677,82249,add_conn,1,ngx_event_actions_t.add_conn,ngx_int_t ngx_event_actions_t.add_conn (ngx_connection_t*),event\ngx_event.h,ngx_int_t  (*add_conn)(ngx_connection_t *c);,177.0,177.0,16.0,47.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4678,82254,del_conn,1,ngx_event_actions_t.del_conn,"ngx_int_t ngx_event_actions_t.del_conn (ngx_connection_t*,ngx_uint_t)",event\ngx_event.h,"ngx_int_t  (*del_conn)(ngx_connection_t *c, ngx_uint_t flags);",178.0,178.0,16.0,65.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4679,82260,notify,1,ngx_event_actions_t.notify,ngx_int_t ngx_event_actions_t.notify (ngx_event_handler_pt),event\ngx_event.h,ngx_int_t  (*notify)(ngx_event_handler_pt handler);,180.0,180.0,16.0,54.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4680,82265,process_events,1,ngx_event_actions_t.process_events,"ngx_int_t ngx_event_actions_t.process_events (ngx_cycle_t*,ngx_msec_t,ngx_uint_t)",event\ngx_event.h,"ngx_int_t  (*process_events)(ngx_cycle_t *cycle, ngx_msec_t timer,
                                 ngx_uint_t flags);",182.0,183.0,16.0,50.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4681,82272,init,1,ngx_event_actions_t.init,"ngx_int_t ngx_event_actions_t.init (ngx_cycle_t*,ngx_msec_t)",event\ngx_event.h,"ngx_int_t  (*init)(ngx_cycle_t *cycle, ngx_msec_t timer);",185.0,185.0,16.0,60.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4682,82278,done,1,ngx_event_actions_t.done,void ngx_event_actions_t.done (ngx_cycle_t*),event\ngx_event.h,void       (*done)(ngx_cycle_t *cycle);,186.0,186.0,16.0,42.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4683,82297,create_conf,1,ngx_event_module_t.create_conf,void* ngx_event_module_t.create_conf (ngx_cycle_t*),event\ngx_event.h,void                 *(*create_conf)(ngx_cycle_t *cycle);,453.0,453.0,26.0,60.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4684,82302,init_conf,1,ngx_event_module_t.init_conf,"char* ngx_event_module_t.init_conf (ngx_cycle_t*,void*)",event\ngx_event.h,"char                 *(*init_conf)(ngx_cycle_t *cycle, void *conf);",454.0,454.0,26.0,70.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4685,82322,ngx_event_accept,1,ngx_event_accept,void ngx_event_accept (ngx_event_t*),event\ngx_event_accept.c,"void
ngx_event_accept(ngx_event_t *ev)
{
    socklen_t          socklen;
    ngx_err_t          err;
    ngx_log_t         *log;
    ngx_uint_t         level;
    ngx_socket_t       s;
    ngx_event_t       *rev, *wev;
    ngx_sockaddr_t     sa;
    ngx_listening_t   *ls;
    ngx_connection_t  *c, *lc;
    ngx_event_conf_t  *ecf;
#if (NGX_HAVE_ACCEPT4)
    static ngx_uint_t  use_accept4 = 1;
#endif

    if (ev->timedout) {
        if (ngx_enable_accept_events((ngx_cycle_t *) ngx_cycle) != NGX_OK) {
            return;
        }

        ev->timedout = 0;
    }

    ecf = ngx_event_get_conf(ngx_cycle->conf_ctx, ngx_event_core_module);

    if (!(ngx_event_flags & NGX_USE_KQUEUE_EVENT)) {
        ev->available = ecf->multi_accept;
    }

    lc = ev->data;
    ls = lc->listening;
    ev->ready = 0;

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""accept on %V, ready: %d"", &ls->addr_text, ev->available);

    do {
        socklen = sizeof(ngx_sockaddr_t);

#if (...",17.0,317.0,1.0,1.0,301.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4686,82327,ngx_event_recvmsg,1,ngx_event_recvmsg,void ngx_event_recvmsg (ngx_event_t*),event\ngx_event_udp.c,"void
ngx_event_recvmsg(ngx_event_t *ev)
{
    ssize_t            n;
    ngx_buf_t          buf;
    ngx_log_t         *log;
    ngx_err_t          err;
    socklen_t          socklen, local_socklen;
    ngx_event_t       *rev, *wev;
    struct iovec       iov[1];
    struct msghdr      msg;
    ngx_sockaddr_t     sa, lsa;
    struct sockaddr   *sockaddr, *local_sockaddr;
    ngx_listening_t   *ls;
    ngx_event_conf_t  *ecf;
    ngx_connection_t  *c, *lc;
    static u_char      buffer[65535];

#if (NGX_HAVE_MSGHDR_MSG_CONTROL)

#if (NGX_HAVE_IP_RECVDSTADDR)
    u_char             msg_control[CMSG_SPACE(sizeof(struct in_addr))];
#elif (NGX_HAVE_IP_PKTINFO)
    u_char             msg_control[CMSG_SPACE(sizeof(struct in_pktinfo))];
#endif

#if (NGX_HAVE_INET6 && NGX_HAVE_IPV6_RECVPKTINFO)
    u_char             msg_control6[CMSG_SPACE(sizeof(struct in6_pktinfo))];
#endif

#endif

    if (ev->timedout) {
        if (ngx_enable_accept_events((ngx_cycle_t *) ngx_cycle) != NGX_OK) {
      ...",31.0,425.0,1.0,1.0,395.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4687,82332,ngx_udp_rbtree_insert_value,1,ngx_udp_rbtree_insert_value,"void ngx_udp_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",event\ngx_event_udp.c,"void
ngx_udp_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_int_t               rc;
    ngx_connection_t       *c, *ct;
    ngx_rbtree_node_t     **p;
    ngx_udp_connection_t   *udp, *udpt;

    for ( ;; ) {

        if (node->key < temp->key) {

            p = &temp->left;

        } else if (node->key > temp->key) {

            p = &temp->right;

        } else { /* node->key == temp->key */

            udp = (ngx_udp_connection_t *) node;
            c = udp->connection;

            udpt = (ngx_udp_connection_t *) temp;
            ct = udpt->connection;

            rc = ngx_cmp_sockaddr(c->sockaddr, c->socklen,
                                  ct->sockaddr, ct->socklen, 1);

            if (rc == 0 && c->listening->wildcard) {
                rc = ngx_cmp_sockaddr(c->local_sockaddr, c->local_socklen,
                                      ct->local_sockaddr, ct->local_socklen, 1);
            }

            ...",470.0,520.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4688,82339,ngx_delete_udp_connection,1,ngx_delete_udp_connection,void ngx_delete_udp_connection (void*),event\ngx_event_udp.c,"void
ngx_delete_udp_connection(void *data)
{
    ngx_connection_t  *c = data;

    if (c->udp == NULL) {
        return;
    }

    ngx_rbtree_delete(&c->listening->rbtree, &c->udp->node);

    c->udp = NULL;
}",568.0,580.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4689,82344,ngx_trylock_accept_mutex,1,ngx_trylock_accept_mutex,ngx_int_t ngx_trylock_accept_mutex (ngx_cycle_t*),event\ngx_event_accept.c,"ngx_int_t
ngx_trylock_accept_mutex(ngx_cycle_t *cycle)
{
    if (ngx_shmtx_trylock(&ngx_accept_mutex)) {

        ngx_log_debug0(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                       ""accept mutex locked"");

        if (ngx_accept_mutex_held && ngx_accept_events == 0) {
            return NGX_OK;
        }

        if (ngx_enable_accept_events(cycle) == NGX_ERROR) {
            ngx_shmtx_unlock(&ngx_accept_mutex);
            return NGX_ERROR;
        }

        ngx_accept_events = 0;
        ngx_accept_mutex_held = 1;

        return NGX_OK;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                   ""accept mutex lock failed: %ui"", ngx_accept_mutex_held);

    if (ngx_accept_mutex_held) {
        if (ngx_disable_accept_events(cycle, 0) == NGX_ERROR) {
            return NGX_ERROR;
        }

        ngx_accept_mutex_held = 0;
    }

    return NGX_OK;
}",320.0,355.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4690,82349,ngx_enable_accept_events,1,ngx_enable_accept_events,ngx_int_t ngx_enable_accept_events (ngx_cycle_t*),event\ngx_event_accept.c,"ngx_int_t
ngx_enable_accept_events(ngx_cycle_t *cycle)
{
    ngx_uint_t         i;
    ngx_listening_t   *ls;
    ngx_connection_t  *c;

    ls = cycle->listening.elts;
    for (i = 0; i < cycle->listening.nelts; i++) {

        c = ls[i].connection;

        if (c == NULL || c->read->active) {
            continue;
        }

        if (ngx_add_event(c->read, NGX_READ_EVENT, 0) == NGX_ERROR) {
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",358.0,380.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4691,82354,ngx_accept_log_error,1,ngx_accept_log_error,"u_char* ngx_accept_log_error (ngx_log_t*,u_char*,size_t)",event\ngx_event_accept.c,"u_char *
ngx_accept_log_error(ngx_log_t *log, u_char *buf, size_t len)
{
    return ngx_snprintf(buf, len, "" while accepting new connection on %V"",
                        log->data);
}",448.0,453.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
4692,82395,ngx_disable_accept_events,1,ngx_disable_accept_events,"ngx_int_t ngx_disable_accept_events (ngx_cycle_t*,ngx_uint_t)",event\ngx_event_accept.c,"static ngx_int_t
ngx_disable_accept_events(ngx_cycle_t *cycle, ngx_uint_t all)
{
    ngx_uint_t         i;
    ngx_listening_t   *ls;
    ngx_connection_t  *c;

    ls = cycle->listening.elts;
    for (i = 0; i < cycle->listening.nelts; i++) {

        c = ls[i].connection;

        if (c == NULL || !c->read->active) {
            continue;
        }

#if (NGX_HAVE_REUSEPORT)

        /*
         * do not disable accept on worker's own sockets
         * when disabling accept events due to accept mutex
         */

        if (ls[i].reuseport && !all) {
            continue;
        }

#endif

        if (ngx_del_event(c->read, NGX_READ_EVENT, NGX_DISABLE_EVENT)
            == NGX_ERROR)
        {
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",383.0,420.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4693,82401,ngx_close_accepted_connection,1,ngx_close_accepted_connection,void ngx_close_accepted_connection (ngx_connection_t*),event\ngx_event_accept.c,"static void
ngx_close_accepted_connection(ngx_connection_t *c)
{
    ngx_socket_t  fd;

    ngx_free_connection(c);

    fd = c->fd;
    c->fd = (ngx_socket_t) -1;

    if (ngx_close_socket(fd) == -1) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_socket_errno,
                      ngx_close_socket_n "" failed"");
    }

    if (c->pool) {
        ngx_destroy_pool(c->pool);
    }

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
#endif
}",423.0,445.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4694,83265,ngx_close_posted_connection,1,ngx_close_posted_connection,void ngx_close_posted_connection (ngx_connection_t*),event\ngx_event_acceptex.c,"static void
ngx_close_posted_connection(ngx_connection_t *c)
{
    ngx_socket_t  fd;

    ngx_free_connection(c);

    fd = c->fd;
    c->fd = (ngx_socket_t) -1;

    if (ngx_close_socket(fd) == -1) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_socket_errno,
                      ngx_close_socket_n "" failed"");
    }

    if (c->pool) {
        ngx_destroy_pool(c->pool);
    }
}",204.0,222.0,1.0,1.0,19.0,0,0,0,0,7,0,1,1,0,0,,0,0,2,1,1,void
4695,83270,ngx_event_acceptex,1,ngx_event_acceptex,void ngx_event_acceptex (ngx_event_t*),event\ngx_event_acceptex.c,"void
ngx_event_acceptex(ngx_event_t *rev)
{
    ngx_listening_t   *ls;
    ngx_connection_t  *c;

    c = rev->data;
    ls = c->listening;

    c->log->handler = ngx_accept_log_error;

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, ""AcceptEx: %d"", c->fd);

    if (rev->ovlp.error) {
        ngx_log_error(NGX_LOG_CRIT, c->log, rev->ovlp.error,
                      ""AcceptEx() %V failed"", &ls->addr_text);
        return;
    }

    /* SO_UPDATE_ACCEPT_CONTEXT is required for shutdown() to work */

    if (setsockopt(c->fd, SOL_SOCKET, SO_UPDATE_ACCEPT_CONTEXT,
                   (char *) &ls->fd, sizeof(ngx_socket_t))
        == -1)
    {
        ngx_log_error(NGX_LOG_CRIT, c->log, ngx_socket_errno,
                      ""setsockopt(SO_UPDATE_ACCEPT_CONTEXT) failed for %V"",
                      &c->addr_text);
        /* TODO: close socket */
        return;
    }

    ngx_getacceptexsockaddrs(c->buffer->pos,
                             ls->post_accept_buffer_size,
           ...",16.0,89.0,1.0,1.0,74.0,78,10,56,13,0,6,7,9,0,6,,0,3,2,1,1,void
4696,83510,ngx_event_post_acceptex,1,ngx_event_post_acceptex,"ngx_int_t ngx_event_post_acceptex (ngx_listening_t*,ngx_uint_t)",event\ngx_event_acceptex.c,"ngx_int_t
ngx_event_post_acceptex(ngx_listening_t *ls, ngx_uint_t n)
{
    u_long             rcvd;
    ngx_err_t          err;
    ngx_log_t         *log;
    ngx_uint_t         i;
    ngx_event_t       *rev, *wev;
    ngx_socket_t       s;
    ngx_connection_t  *c;

    for (i = 0; i < n; i++) {

        /* TODO: look up reused sockets */

        s = ngx_socket(ls->sockaddr->sa_family, ls->type, 0);

        ngx_log_debug1(NGX_LOG_DEBUG_EVENT, &ls->log, 0,
                       ngx_socket_n "" s:%d"", s);

        if (s == (ngx_socket_t) -1) {
            ngx_log_error(NGX_LOG_ALERT, &ls->log, ngx_socket_errno,
                          ngx_socket_n "" failed"");

            return NGX_ERROR;
        }

        c = ngx_get_connection(s, &ls->log);

        if (c == NULL) {
            return NGX_ERROR;
        }

        c->pool = ngx_create_pool(ls->pool_size, &ls->log);
        if (c->pool == NULL) {
            ngx_close_posted_connection(c);
            return NGX_ERROR;
      ...",92.0,201.0,1.0,1.0,110.0,101,13,105,24,2,14,12,23,0,14,,0,6,4,2,2,ngx_int_t
4697,83885,ngx_acceptex_log_error,1,ngx_acceptex_log_error,"u_char ngx_acceptex_log_error (ngx_log_t*,u_char*,size_t)",event\ngx_event_acceptex.c,"u_char *
ngx_acceptex_log_error(ngx_log_t *log, u_char *buf, size_t len)
{
    return ngx_snprintf(buf, len, "" while posting AcceptEx() on %V"", log->data);
}",225.0,229.0,1.0,1.0,5.0,1,1,3,3,0,1,1,1,0,1,,0,0,6,3,3,u_char
4698,83913,ngx_event_connect_peer,1,ngx_event_connect_peer,ngx_int_t ngx_event_connect_peer (ngx_peer_connection_t*),event\ngx_event_connect.c,"ngx_int_t
ngx_event_connect_peer(ngx_peer_connection_t *pc)
{
    int                rc, type, value;
#if (NGX_HAVE_IP_BIND_ADDRESS_NO_PORT || NGX_LINUX)
    in_port_t          port;
#endif
    ngx_int_t          event;
    ngx_err_t          err;
    ngx_uint_t         level;
    ngx_socket_t       s;
    ngx_event_t       *rev, *wev;
    ngx_connection_t  *c;

    rc = pc->get(pc, pc->data);
    if (rc != NGX_OK) {
        return rc;
    }

    type = (pc->type ? pc->type : SOCK_STREAM);

    s = ngx_socket(pc->sockaddr->sa_family, type, 0);

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, pc->log, 0, ""%s socket %d"",
                   (type == SOCK_STREAM) ? ""stream"" : ""dgram"", s);

    if (s == (ngx_socket_t) -1) {
        ngx_log_error(NGX_LOG_ALERT, pc->log, ngx_socket_errno,
                      ngx_socket_n "" failed"");
        return NGX_ERROR;
    }


    c = ngx_get_connection(s, pc->log);

    if (c == NULL) {
        if (ngx_close_socket(s) == -1) {
            ngx_log_error(NG...",20.0,329.0,1.0,1.0,310.0,140,12,170,50,0,10,34,39,2,10,,0,4,2,1,1,ngx_int_t
4699,84457,ngx_event_get_peer,1,ngx_event_get_peer,"ngx_int_t ngx_event_get_peer (ngx_peer_connection_t*,void*)",event\ngx_event_connect.c,"ngx_int_t
ngx_event_get_peer(ngx_peer_connection_t *pc, void *data)
{
    return NGX_OK;
}",429.0,433.0,1.0,1.0,5.0,0,0,1,1,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4700,84478,ngx_event_get_peer_pt,1,ngx_event_get_peer_pt,"ngx_int_t ngx_event_get_peer_pt (ngx_peer_connection_t*,void*)",event\ngx_event_connect.h,"typedef ngx_int_t (*ngx_event_get_peer_pt)(ngx_peer_connection_t *pc,
    void *data);",24.0,25.0,19.0,15.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4701,84484,ngx_event_free_peer_pt,1,ngx_event_free_peer_pt,"void ngx_event_free_peer_pt (ngx_peer_connection_t*,void*,ngx_uint_t)",event\ngx_event_connect.h,"typedef void (*ngx_event_free_peer_pt)(ngx_peer_connection_t *pc, void *data,
    ngx_uint_t state);",26.0,27.0,14.0,21.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4702,84491,ngx_event_notify_peer_pt,1,ngx_event_notify_peer_pt,"void ngx_event_notify_peer_pt (ngx_peer_connection_t*,void*,ngx_uint_t)",event\ngx_event_connect.h,"typedef void (*ngx_event_notify_peer_pt)(ngx_peer_connection_t *pc,
    void *data, ngx_uint_t type);",28.0,29.0,14.0,32.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4703,84498,ngx_event_set_peer_session_pt,1,ngx_event_set_peer_session_pt,"ngx_int_t ngx_event_set_peer_session_pt (ngx_peer_connection_t*,void*)",event\ngx_event_connect.h,"typedef ngx_int_t (*ngx_event_set_peer_session_pt)(ngx_peer_connection_t *pc,
    void *data);",30.0,31.0,19.0,15.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4704,84504,ngx_event_save_peer_session_pt,1,ngx_event_save_peer_session_pt,"void ngx_event_save_peer_session_pt (ngx_peer_connection_t*,void*)",event\ngx_event_connect.h,"typedef void (*ngx_event_save_peer_session_pt)(ngx_peer_connection_t *pc,
    void *data);",32.0,33.0,14.0,15.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4705,84578,ngx_iocp_wait_connect,1,ngx_iocp_wait_connect,int ngx_iocp_wait_connect (ngx_connection_t*),event\ngx_event_connectex.c,"int ngx_iocp_wait_connect(ngx_connection_t *c)
{
    for ( ;; ) {
        EnterCriticalSection(&connect_lock);

        if (nconnects < NGX_MAX_PENDING_CONN) {
            pending_connects[--nconnects] = c;
            LeaveCriticalSection(&connect_lock);

            if (SetEvent(pending_connect_event) == 0) {
                ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                              ""SetEvent() failed"");
                return NGX_ERROR;

            break;
        }

        LeaveCriticalSection(&connect_lock);
        ngx_log_error(NGX_LOG_NOTICE, c->log, 0,
                      ""max number of pending connect()s is %d"",
                      NGX_MAX_PENDING_CONN);
        msleep(100);
    }

    if (!started) {
        if (ngx_iocp_new_thread(1) == NGX_ERROR) {
            return NGX_ERROR;
        }
        started = 1;
    }

    return NGX_OK;
}


int ngx_iocp_new_thread(int main)
{
    u_int  id;

    if (main) {
        pending_connect_event = CreateEven...",28.0,118.0,1.0,24.0,91.0,38,10,70,21,0,29,7,12,2,7,,0,22,2,1,1,int
4706,84651,ngx_iocp_new_thread,1,ngx_iocp_wait_connect.ngx_iocp_new_thread,int ngx_iocp_wait_connect.ngx_iocp_new_thread (int),event\ngx_event_connectex.c,"int ngx_iocp_new_thread(int main)
{
    u_int  id;

    if (main) {
        pending_connect_event = CreateEvent(NULL, 0, 1, NULL);
        if (pending_connect_event == INVALID_HANDLE_VALUE) {
            ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                          ""CreateThread() failed"");
            return NGX_ERROR;
        }
    }

    if (CreateThread(NULL, 0, ngx_iocp_wait_events, main, 0, &id)
                                                       == INVALID_HANDLE_VALUE)
    {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                      ""CreateThread() failed"");
        return NGX_ERROR;
    }

    SetEvent(event) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_errno,
                      ""SetEvent() failed"");
        return NGX_ERROR;
    }

    return NGX_OK;
}",63.0,91.0,1.0,1.0,29.0,7,4,24,11,0,5,4,5,1,3,,0,2,2,1,1,int
4707,84717,ngx_iocp_new_connect,1,ngx_iocp_wait_connect.ngx_iocp_new_connect,int ngx_iocp_wait_connect.ngx_iocp_new_connect (),event\ngx_event_connectex.c,"int ngx_iocp_new_connect()
{
    EnterCriticalSection(&connect_lock);
    c = pending_connects[--nconnects];
    LeaveCriticalSection(&connect_lock);

    conn[nevents] = c;

    events[nevents] = WSACreateEvent();
    if (events[nevents] == INVALID_HANDLE_VALUE) {
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_socket_errno,
                      ""WSACreateEvent() failed"");
        return NGX_ERROR;
    }

    if (WSAEventSelect(c->fd, events[nevents], FD_CONNECT) == -1)
        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_socket_errno,
                      ""WSAEventSelect() failed"");
        return NGX_ERROR;
    }",94.0,113.0,1.0,5.0,20.0,17,7,25,12,0,14,3,3,4,2,,0,12,0,0,0,int
4708,84787,ngx_iocp_wait_events,1,ngx_iocp_wait_events,void ngx_iocp_wait_events (int),event\ngx_event_connectex.c,"void ngx_iocp_wait_events(int main)
{
    WSANETWORKEVENTS  ne;

    nevents = 1;
    events[0] = pending_connect_event;
    conn[0] = NULL;

    for ( ;; ) {
        offset = (nevents == WSA_MAXIMUM_WAIT_EVENTS + 1) ? 1: 0;
        timeout = (nevents == 1 && !first) ? 60000: INFINITE;

        n = WSAWaitForMultipleEvents(nevents - offset, events[offset],
                                     0, timeout, 0);
        if (n == WAIT_FAILED) {
            ngx_log_error(NGX_LOG_ALERT, log, ngx_socket_errno,
                          ""WSAWaitForMultipleEvents() failed"");
            continue;
        }

        if (n == WAIT_TIMEOUT) {
            if (nevents == 2 && !main) {
                ExitThread(0);
            }

            ngx_log_error(NGX_LOG_ALERT, log, 0,
                          ""WSAWaitForMultipleEvents() ""
                          ""returned unexpected WAIT_TIMEOUT"");
            continue;
        }

        n -= WSA_WAIT_EVENT_0;

        if (events[n] == NULL) {

     ...",121.0,206.0,1.0,1.0,86.0,61,16,76,25,0,29,19,26,6,6,,0,23,2,1,1,void
4709,85025,ngx_ssl_load_certificate_key,1,ngx_ssl_load_certificate_key,"EVP_PKEY* ngx_ssl_load_certificate_key (ngx_pool_t*,char**,ngx_str_t*,ngx_array_t*)",event\ngx_event_openssl.c,"static EVP_PKEY *
ngx_ssl_load_certificate_key(ngx_pool_t *pool, char **err,
    ngx_str_t *key, ngx_array_t *passwords)
{
    BIO              *bio;
    EVP_PKEY         *pkey;
    ngx_str_t        *pwd;
    ngx_uint_t        tries;
    pem_password_cb  *cb;

    if (ngx_strncmp(key->data, ""engine:"", sizeof(""engine:"") - 1) == 0) {

#ifndef OPENSSL_NO_ENGINE

        u_char  *p, *last;
        ENGINE  *engine;

        p = key->data + sizeof(""engine:"") - 1;
        last = (u_char *) ngx_strchr(p, ':');

        if (last == NULL) {
            *err = ""invalid syntax"";
            return NULL;
        }

        *last = '\0';

        engine = ENGINE_by_id((char *) p);

        if (engine == NULL) {
            *err = ""ENGINE_by_id() failed"";
            return NULL;
        }

        *last++ = ':';

        pkey = ENGINE_load_private_key(engine, (char *) last, 0, 0);

        if (pkey == NULL) {
            *err = ""ENGINE_load_private_key() failed"";
            ENGINE_free(engine);
...",702.0,816.0,1.0,1.0,115.0,0,0,0,0,2,0,1,1,0,0,,0,0,8,4,4,EVP_PKEY
4710,85033,ngx_ssl_password_callback,1,ngx_ssl_password_callback,"int ngx_ssl_password_callback (char*,int,int,void*)",event\ngx_event_openssl.c,"static int
ngx_ssl_password_callback(char *buf, int size, int rwflag, void *userdata)
{
    ngx_str_t *pwd = userdata;

    if (rwflag) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0,
                      ""ngx_ssl_password_callback() is called for encryption"");
        return 0;
    }

    if (pwd == NULL) {
        return 0;
    }

    if (pwd->len > (size_t) size) {
        ngx_log_error(NGX_LOG_ERR, ngx_cycle->log, 0,
                      ""password is truncated to %d bytes"", size);
    } else {
        size = pwd->len;
    }

    ngx_memcpy(buf, pwd->data, size);

    return size;
}",819.0,844.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,int
4711,85041,ngx_ssl_verify_callback,1,ngx_ssl_verify_callback,"int ngx_ssl_verify_callback (int,X509_STORE_CTX*)",event\ngx_event_openssl.c,"static int
ngx_ssl_verify_callback(int ok, X509_STORE_CTX *x509_store)
{
#if (NGX_DEBUG)
    char              *subject, *issuer;
    int                err, depth;
    X509              *cert;
    X509_NAME         *sname, *iname;
    ngx_connection_t  *c;
    ngx_ssl_conn_t    *ssl_conn;

    ssl_conn = X509_STORE_CTX_get_ex_data(x509_store,
                                          SSL_get_ex_data_X509_STORE_CTX_idx());

    c = ngx_ssl_get_connection(ssl_conn);

    if (!(c->log->log_level & NGX_LOG_DEBUG_EVENT)) {
        return 1;
    }

    cert = X509_STORE_CTX_get_current_cert(x509_store);
    err = X509_STORE_CTX_get_error(x509_store);
    depth = X509_STORE_CTX_get_error_depth(x509_store);

    sname = X509_get_subject_name(cert);

    if (sname) {
        subject = X509_NAME_oneline(sname, NULL, 0);
        if (subject == NULL) {
            ngx_ssl_error(NGX_LOG_ALERT, c->log, 0,
                          ""X509_NAME_oneline() failed"");
        }

    } else {
        su...",1001.0,1068.0,1.0,1.0,68.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,int
4712,85047,ngx_ssl_info_callback,1,ngx_ssl_info_callback,"void ngx_ssl_info_callback (ngx_ssl_conn_t*,int,int)",event\ngx_event_openssl.c,"static void
ngx_ssl_info_callback(const ngx_ssl_conn_t *ssl_conn, int where, int ret)
{
    BIO               *rbio, *wbio;
    ngx_connection_t  *c;

#ifndef SSL_OP_NO_RENEGOTIATION

    if ((where & SSL_CB_HANDSHAKE_START)
        && SSL_is_server((ngx_ssl_conn_t *) ssl_conn))
    {
        c = ngx_ssl_get_connection((ngx_ssl_conn_t *) ssl_conn);

        if (c->ssl->handshaked) {
            c->ssl->renegotiation = 1;
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, 0, ""SSL renegotiation"");
        }
    }

#endif

    if ((where & SSL_CB_ACCEPT_LOOP) == SSL_CB_ACCEPT_LOOP) {
        c = ngx_ssl_get_connection((ngx_ssl_conn_t *) ssl_conn);

        if (!c->ssl->handshake_buffer_set) {
            /*
             * By default OpenSSL uses 4k buffer during a handshake,
             * which is too low for long certificate chains and might
             * result in extra round-trips.
             *
             * To adjust a buffer size we detect that buffering was added
      ...",1071.0,1116.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4713,85054,ngx_ssl_passwords_cleanup,1,ngx_ssl_passwords_cleanup,void ngx_ssl_passwords_cleanup (void*),event\ngx_event_openssl.c,"static void
ngx_ssl_passwords_cleanup(void *data)
{
    ngx_array_t *passwords = data;

    ngx_str_t   *pwd;
    ngx_uint_t   i;

    pwd = passwords->elts;

    for (i = 0; i < passwords->nelts; i++) {
        ngx_explicit_memzero(pwd[i].data, pwd[i].len);
    }
}",1334.0,1347.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4714,85059,ngx_ssl_new_client_session,1,ngx_ssl_new_client_session,"int ngx_ssl_new_client_session (ngx_ssl_conn_t*,ngx_ssl_session_t*)",event\ngx_event_openssl.c,"static int
ngx_ssl_new_client_session(ngx_ssl_conn_t *ssl_conn, ngx_ssl_session_t *sess)
{
    ngx_connection_t  *c;

    c = ngx_ssl_get_connection(ssl_conn);

    if (c->ssl->save_session) {
        c->ssl->session = sess;

        c->ssl->save_session(c);

        c->ssl->session = NULL;
    }

    return 0;
}",1588.0,1604.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,int
4715,85065,ngx_ssl_handshake_handler,1,ngx_ssl_handshake_handler,void ngx_ssl_handshake_handler (ngx_event_t*),event\ngx_event_openssl.c,"static void
ngx_ssl_handshake_handler(ngx_event_t *ev)
{
    ngx_connection_t  *c;

    c = ev->data;

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""SSL handshake handler: %d"", ev->write);

    if (ev->timedout) {
        c->ssl->handler(c);
        return;
    }

    if (ngx_ssl_handshake(c) == NGX_AGAIN) {
        return;
    }

    c->ssl->handler(c);
}",2022.0,2042.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4716,85070,ngx_ssl_handle_recv,1,ngx_ssl_handle_recv,"ngx_int_t ngx_ssl_handle_recv (ngx_connection_t*,int)",event\ngx_event_openssl.c,"static ngx_int_t
ngx_ssl_handle_recv(ngx_connection_t *c, int n)
{
    int        sslerr;
    ngx_err_t  err;

#ifndef SSL_OP_NO_RENEGOTIATION

    if (c->ssl->renegotiation) {
        /*
         * disable renegotiation (CVE-2009-3555):
         * OpenSSL (at least up to 0.9.8l) does not handle disabled
         * renegotiation gracefully, so drop connection here
         */

        ngx_log_error(NGX_LOG_NOTICE, c->log, 0, ""SSL renegotiation disabled"");

        while (ERR_peek_error()) {
            ngx_ssl_error(NGX_LOG_DEBUG, c->log, 0,
                          ""ignoring stale global SSL error"");
        }

        ERR_clear_error();

        c->ssl->no_wait_shutdown = 1;
        c->ssl->no_send_shutdown = 1;

        return NGX_ERROR;
    }

#endif

    if (n > 0) {

        if (c->ssl->saved_write_handler) {

            c->write->handler = c->ssl->saved_write_handler;
            c->ssl->saved_write_handler = NULL;
            c->write->ready = 1;

            if (ngx_handl...",2354.0,2464.0,1.0,1.0,111.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4717,85076,ngx_ssl_write_handler,1,ngx_ssl_write_handler,void ngx_ssl_write_handler (ngx_event_t*),event\ngx_event_openssl.c,"static void
ngx_ssl_write_handler(ngx_event_t *wev)
{
    ngx_connection_t  *c;

    c = wev->data;

    ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, 0, ""SSL write handler"");

    c->read->handler(c->read);
}",2467.0,2477.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4718,85081,ngx_ssl_read_handler,1,ngx_ssl_read_handler,void ngx_ssl_read_handler (ngx_event_t*),event\ngx_event_openssl.c,"static void
ngx_ssl_read_handler(ngx_event_t *rev)
{
    ngx_connection_t  *c;

    c = rev->data;

    ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, 0, ""SSL read handler"");

    c->write->handler(c->write);
}",2871.0,2881.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4719,85086,ngx_ssl_shutdown_handler,1,ngx_ssl_shutdown_handler,void ngx_ssl_shutdown_handler (ngx_event_t*),event\ngx_event_openssl.c,"static void
ngx_ssl_shutdown_handler(ngx_event_t *ev)
{
    ngx_connection_t           *c;
    ngx_connection_handler_pt   handler;

    c = ev->data;
    handler = c->ssl->handler;

    if (ev->timedout) {
        c->timedout = 1;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_EVENT, ev->log, 0, ""SSL shutdown handler"");

    if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
        return;
    }

    handler(c);
}",3025.0,3045.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4720,85091,ngx_ssl_connection_error,1,ngx_ssl_connection_error,"void ngx_ssl_connection_error (ngx_connection_t*,int,ngx_err_t,char*)",event\ngx_event_openssl.c,"static void
ngx_ssl_connection_error(ngx_connection_t *c, int sslerr, ngx_err_t err,
    char *text)
{
    int         n;
    ngx_uint_t  level;

    level = NGX_LOG_CRIT;

    if (sslerr == SSL_ERROR_SYSCALL) {

        if (err == NGX_ECONNRESET
#if (NGX_WIN32)
            || err == NGX_ECONNABORTED
#endif
            || err == NGX_EPIPE
            || err == NGX_ENOTCONN
            || err == NGX_ETIMEDOUT
            || err == NGX_ECONNREFUSED
            || err == NGX_ENETDOWN
            || err == NGX_ENETUNREACH
            || err == NGX_EHOSTDOWN
            || err == NGX_EHOSTUNREACH)
        {
            switch (c->log_error) {

            case NGX_ERROR_IGNORE_ECONNRESET:
            case NGX_ERROR_INFO:
                level = NGX_LOG_INFO;
                break;

            case NGX_ERROR_ERR:
                level = NGX_LOG_ERR;
                break;

            default:
                break;
            }
        }

    } else if (sslerr == SSL_ERROR_SSL) {

    ...",3048.0,3202.0,1.0,1.0,155.0,0,0,0,0,3,0,1,1,0,0,,0,0,8,4,4,void
4721,85099,ngx_ssl_clear_error,1,ngx_ssl_clear_error,void ngx_ssl_clear_error (ngx_log_t*),event\ngx_event_openssl.c,"static void
ngx_ssl_clear_error(ngx_log_t *log)
{
    while (ERR_peek_error()) {
        ngx_ssl_error(NGX_LOG_ALERT, log, 0, ""ignoring stale global SSL error"");
    }

    ERR_clear_error();
}",3205.0,3213.0,1.0,1.0,9.0,0,0,0,0,4,0,1,1,0,0,,0,0,2,1,1,void
4722,85104,ngx_ssl_session_id_context,1,ngx_ssl_session_id_context,"ngx_int_t ngx_ssl_session_id_context (ngx_ssl_t*,ngx_str_t*,ngx_array_t*)",event\ngx_event_openssl.c,"static ngx_int_t
ngx_ssl_session_id_context(ngx_ssl_t *ssl, ngx_str_t *sess_ctx,
    ngx_array_t *certificates)
{
    int                   n, i;
    X509                 *cert;
    X509_NAME            *name;
    ngx_str_t            *certs;
    ngx_uint_t            k;
    EVP_MD_CTX           *md;
    unsigned int          len;
    STACK_OF(X509_NAME)  *list;
    u_char                buf[EVP_MAX_MD_SIZE];

    /*
     * Session ID context is set based on the string provided,
     * the server certificates, and the client CA list.
     */

    md = EVP_MD_CTX_create();
    if (md == NULL) {
        return NGX_ERROR;
    }

    if (EVP_DigestInit_ex(md, EVP_sha1(), NULL) == 0) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""EVP_DigestInit_ex() failed"");
        goto failed;
    }

    if (EVP_DigestUpdate(md, sess_ctx->data, sess_ctx->len) == 0) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""EVP_DigestUpdate() failed"");
      ...",3350.0,3465.0,1.0,1.0,116.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4723,85111,ngx_ssl_new_session,1,ngx_ssl_new_session,"int ngx_ssl_new_session (ngx_ssl_conn_t*,ngx_ssl_session_t*)",event\ngx_event_openssl.c,"static int
ngx_ssl_new_session(ngx_ssl_conn_t *ssl_conn, ngx_ssl_session_t *sess)
{
    int                       len;
    u_char                   *p, *id, *cached_sess, *session_id;
    uint32_t                  hash;
    SSL_CTX                  *ssl_ctx;
    unsigned int              session_id_length;
    ngx_shm_zone_t           *shm_zone;
    ngx_connection_t         *c;
    ngx_slab_pool_t          *shpool;
    ngx_ssl_sess_id_t        *sess_id;
    ngx_ssl_session_cache_t  *cache;
    u_char                    buf[NGX_SSL_MAX_SESSION_SIZE];

    len = i2d_SSL_SESSION(sess, NULL);

    /* do not cache too big session */

    if (len > (int) NGX_SSL_MAX_SESSION_SIZE) {
        return 0;
    }

    p = buf;
    i2d_SSL_SESSION(sess, &p);

    c = ngx_ssl_get_connection(ssl_conn);

    ssl_ctx = c->ssl->session_ctx;
    shm_zone = SSL_CTX_get_ex_data(ssl_ctx, ngx_ssl_session_cache_index);

    cache = shm_zone->data;
    shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;

    ngx...",3533.0,3670.0,1.0,1.0,138.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,int
4724,85117,ngx_ssl_get_cached_session,1,ngx_ssl_get_cached_session,"ngx_ssl_session_t* ngx_ssl_get_cached_session (ngx_ssl_conn_t*,u_char*,int,int*)",event\ngx_event_openssl.c,"static ngx_ssl_session_t *
ngx_ssl_get_cached_session(ngx_ssl_conn_t *ssl_conn,
#if OPENSSL_VERSION_NUMBER >= 0x10100003L
    const
#endif
    u_char *id, int len, int *copy)
{
    size_t                    slen;
    uint32_t                  hash;
    ngx_int_t                 rc;
    const u_char             *p;
    ngx_shm_zone_t           *shm_zone;
    ngx_slab_pool_t          *shpool;
    ngx_rbtree_node_t        *node, *sentinel;
    ngx_ssl_session_t        *sess;
    ngx_ssl_sess_id_t        *sess_id;
    ngx_ssl_session_cache_t  *cache;
    u_char                    buf[NGX_SSL_MAX_SESSION_SIZE];
    ngx_connection_t         *c;

    hash = ngx_crc32_short((u_char *) (uintptr_t) id, (size_t) len);
    *copy = 0;

    c = ngx_ssl_get_connection(ssl_conn);

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""ssl get session: %08XD:%d"", hash, len);

    shm_zone = SSL_CTX_get_ex_data(c->ssl->session_ctx,
                                   ngx_ssl_session_ca...",3673.0,3772.0,1.0,1.0,100.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_ssl_session_t
4725,85125,ngx_ssl_remove_session,1,ngx_ssl_remove_session,"void ngx_ssl_remove_session (SSL_CTX*,ngx_ssl_session_t*)",event\ngx_event_openssl.c,"static void
ngx_ssl_remove_session(SSL_CTX *ssl, ngx_ssl_session_t *sess)
{
    u_char                   *id;
    uint32_t                  hash;
    ngx_int_t                 rc;
    unsigned int              len;
    ngx_shm_zone_t           *shm_zone;
    ngx_slab_pool_t          *shpool;
    ngx_rbtree_node_t        *node, *sentinel;
    ngx_ssl_sess_id_t        *sess_id;
    ngx_ssl_session_cache_t  *cache;

    shm_zone = SSL_CTX_get_ex_data(ssl, ngx_ssl_session_cache_index);

    if (shm_zone == NULL) {
        return;
    }

    cache = shm_zone->data;

    id = (u_char *) SSL_SESSION_get_id(sess, &len);

    hash = ngx_crc32_short(id, len);

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ngx_cycle->log, 0,
                   ""ssl remove session: %08XD:%ud"", hash, len);

    shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;

    ngx_shmtx_lock(&shpool->mutex);

    node = cache->session_rbtree.root;
    sentinel = cache->session_rbtree.sentinel;

    while (node != sentinel) {

    ...",3784.0,3858.0,1.0,1.0,75.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,void
4726,85131,ngx_ssl_expire_sessions,1,ngx_ssl_expire_sessions,"void ngx_ssl_expire_sessions (ngx_ssl_session_cache_t*,ngx_slab_pool_t*,ngx_uint_t)",event\ngx_event_openssl.c,"static void
ngx_ssl_expire_sessions(ngx_ssl_session_cache_t *cache,
    ngx_slab_pool_t *shpool, ngx_uint_t n)
{
    time_t              now;
    ngx_queue_t        *q;
    ngx_ssl_sess_id_t  *sess_id;

    now = ngx_time();

    while (n < 3) {

        if (ngx_queue_empty(&cache->expire_queue)) {
            return;
        }

        q = ngx_queue_last(&cache->expire_queue);

        sess_id = ngx_queue_data(q, ngx_ssl_sess_id_t, queue);

        if (n++ != 0 && sess_id->expire > now) {
            return;
        }

        ngx_queue_remove(q);

        ngx_log_debug1(NGX_LOG_DEBUG_EVENT, ngx_cycle->log, 0,
                       ""expire session: %08Xi"", sess_id->node.key);

        ngx_rbtree_delete(&cache->session_rbtree, &sess_id->node);

        ngx_slab_free_locked(shpool, sess_id->session);
#if (NGX_PTR_SIZE == 4)
        ngx_slab_free_locked(shpool, sess_id->id);
#endif
        ngx_slab_free_locked(shpool, sess_id);
    }
}",3861.0,3898.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4727,85138,ngx_ssl_session_rbtree_insert_value,1,ngx_ssl_session_rbtree_insert_value,"void ngx_ssl_session_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",event\ngx_event_openssl.c,"static void
ngx_ssl_session_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t  **p;
    ngx_ssl_sess_id_t   *sess_id, *sess_id_temp;

    for ( ;; ) {

        if (node->key < temp->key) {

            p = &temp->left;

        } else if (node->key > temp->key) {

            p = &temp->right;

        } else { /* node->key == temp->key */

            sess_id = (ngx_ssl_sess_id_t *) node;
            sess_id_temp = (ngx_ssl_sess_id_t *) temp;

            p = (ngx_memn2cmp(sess_id->id, sess_id_temp->id,
                              (size_t) node->data, (size_t) temp->data)
                 < 0) ? &temp->left : &temp->right;
        }

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",3901.0,3940.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
4728,85145,ngx_ssl_check_name,1,ngx_ssl_check_name,"ngx_int_t ngx_ssl_check_name (ngx_str_t*,ASN1_STRING*)",event\ngx_event_openssl.c,"static ngx_int_t
ngx_ssl_check_name(ngx_str_t *name, ASN1_STRING *pattern)
{
    u_char  *s, *p, *end;
    size_t   slen, plen;

    s = name->data;
    slen = name->len;

    p = ASN1_STRING_data(pattern);
    plen = ASN1_STRING_length(pattern);

    if (slen == plen && ngx_strncasecmp(s, p, plen) == 0) {
        return NGX_OK;
    }

    if (plen > 2 && p[0] == '*' && p[1] == '.') {
        plen -= 1;
        p += 1;

        end = s + slen;
        s = ngx_strlchr(s, end, '.');

        if (s == NULL) {
            return NGX_ERROR;
        }

        slen = end - s;

        if (plen == slen && ngx_strncasecmp(s, p, plen) == 0) {
            return NGX_OK;
        }
    }

    return NGX_ERROR;
}",4380.0,4415.0,1.0,1.0,36.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4729,85151,ngx_ssl_parse_time,1,ngx_ssl_parse_time,"time_t ngx_ssl_parse_time (ASN1_TIME*,ngx_log_t*)",event\ngx_event_openssl.c,"static time_t
ngx_ssl_parse_time(
#if OPENSSL_VERSION_NUMBER > 0x10100000L
    const
#endif
    ASN1_TIME *asn1time, ngx_log_t *log)
{
    BIO     *bio;
    char    *value;
    size_t   len;
    time_t   time;

    /*
     * OpenSSL doesn't provide a way to convert ASN1_TIME
     * into time_t.  To do this, we use ASN1_TIME_print(),
     * which uses the ""MMM DD HH:MM:SS YYYY [GMT]"" format (e.g.,
     * ""Feb  3 00:55:52 2015 GMT""), and parse the result.
     */

    bio = BIO_new(BIO_s_mem());
    if (bio == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, log, 0, ""BIO_new() failed"");
        return NGX_ERROR;
    }

    /* fake weekday prepended to match C asctime() format */

    BIO_write(bio, ""Tue "", sizeof(""Tue "") - 1);
    ASN1_TIME_print(bio, asn1time);
    len = BIO_get_mem_data(bio, &value);

    time = ngx_parse_http_time((u_char *) value, len);

    BIO_free(bio);

    return time;
}",5264.0,5300.0,1.0,1.0,37.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,time_t
4730,85157,ngx_openssl_create_conf,1,ngx_openssl_create_conf,void* ngx_openssl_create_conf (ngx_cycle_t*),event\ngx_event_openssl.c,"static void *
ngx_openssl_create_conf(ngx_cycle_t *cycle)
{
    ngx_openssl_conf_t  *oscf;

    oscf = ngx_pcalloc(cycle->pool, sizeof(ngx_openssl_conf_t));
    if (oscf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     oscf->engine = 0;
     */

    return oscf;
}",5303.0,5320.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4731,85162,ngx_openssl_engine,1,ngx_openssl_engine,"char* ngx_openssl_engine (ngx_conf_t*,ngx_command_t*,void*)",event\ngx_event_openssl.c,"static char *
ngx_openssl_engine(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
#ifndef OPENSSL_NO_ENGINE

    ngx_openssl_conf_t *oscf = conf;

    ENGINE     *engine;
    ngx_str_t  *value;

    if (oscf->engine) {
        return ""is duplicate"";
    }

    oscf->engine = 1;

    value = cf->args->elts;

    engine = ENGINE_by_id((char *) value[1].data);

    if (engine == NULL) {
        ngx_ssl_error(NGX_LOG_EMERG, cf->log, 0,
                      ""ENGINE_by_id(\""%V\"") failed"", &value[1]);
        return NGX_CONF_ERROR;
    }

    if (ENGINE_set_default(engine, ENGINE_METHOD_ALL) == 0) {
        ngx_ssl_error(NGX_LOG_EMERG, cf->log, 0,
                      ""ENGINE_set_default(\""%V\"", ENGINE_METHOD_ALL) failed"",
                      &value[1]);

        ENGINE_free(engine);

        return NGX_CONF_ERROR;
    }

    ENGINE_free(engine);

    return NGX_CONF_OK;

#else

    return ""is not supported"";

#endif
}",5323.0,5368.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4732,85169,ngx_openssl_exit,1,ngx_openssl_exit,void ngx_openssl_exit (ngx_cycle_t*),event\ngx_event_openssl.c,"static void
ngx_openssl_exit(ngx_cycle_t *cycle)
{
#if OPENSSL_VERSION_NUMBER < 0x10100003L

    EVP_cleanup();
#ifndef OPENSSL_NO_ENGINE
    ENGINE_cleanup();
#endif

#endif
}",5371.0,5382.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4733,85225,ngx_ssl_init,1,ngx_ssl_init,ngx_int_t ngx_ssl_init (ngx_log_t*),event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_init(ngx_log_t *log)
{
#if OPENSSL_VERSION_NUMBER >= 0x10100003L

    if (OPENSSL_init_ssl(OPENSSL_INIT_LOAD_CONFIG, NULL) == 0) {
        ngx_ssl_error(NGX_LOG_ALERT, log, 0, ""OPENSSL_init_ssl() failed"");
        return NGX_ERROR;
    }

    /*
     * OPENSSL_init_ssl() may leave errors in the error queue
     * while returning success
     */

    ERR_clear_error();

#else

    OPENSSL_config(NULL);

    SSL_library_init();
    SSL_load_error_strings();

    OpenSSL_add_all_algorithms();

#endif

#ifndef SSL_OP_NO_COMPRESSION
    {
    /*
     * Disable gzip compression in OpenSSL prior to 1.0.0 version,
     * this saves about 522K per connection.
     */
    int                  n;
    STACK_OF(SSL_COMP)  *ssl_comp_methods;

    ssl_comp_methods = SSL_COMP_get_compression_methods();
    n = sk_SSL_COMP_num(ssl_comp_methods);

    while (n--) {
        (void) sk_SSL_COMP_pop(ssl_comp_methods);
    }
    }
#endif

    ngx_ssl_connection_index = SSL_get_ex_new_ind...",140.0,255.0,1.0,1.0,116.0,32,6,90,17,0,27,11,11,9,9,,0,18,2,1,1,ngx_int_t
4734,85447,ngx_ssl_create,1,ngx_ssl_create,"ngx_int_t ngx_ssl_create (ngx_ssl_t*,ngx_uint_t,void*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_create(ngx_ssl_t *ssl, ngx_uint_t protocols, void *data)
{
    ssl->ctx = SSL_CTX_new(SSLv23_method());

    if (ssl->ctx == NULL) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0, ""SSL_CTX_new() failed"");
        return NGX_ERROR;
    }

    if (SSL_CTX_set_ex_data(ssl->ctx, ngx_ssl_server_conf_index, data) == 0) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""SSL_CTX_set_ex_data() failed"");
        return NGX_ERROR;
    }

    if (SSL_CTX_set_ex_data(ssl->ctx, ngx_ssl_certificate_index, NULL) == 0) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""SSL_CTX_set_ex_data() failed"");
        return NGX_ERROR;
    }

    ssl->buffer_size = NGX_SSL_BUFSIZE;

    /* client side options */

#ifdef SSL_OP_MICROSOFT_SESS_ID_BUG
    SSL_CTX_set_options(ssl->ctx, SSL_OP_MICROSOFT_SESS_ID_BUG);
#endif

#ifdef SSL_OP_NETSCAPE_CHALLENGE_BUG
    SSL_CTX_set_options(ssl->ctx, SSL_OP_NETSCAPE_CHALLENGE_BUG);
#endif

    /* serve...",258.0,394.0,1.0,1.0,137.0,25,5,38,18,0,5,7,7,2,3,,0,2,6,3,3,ngx_int_t
4735,85569,ngx_ssl_certificates,1,ngx_ssl_certificates,"ngx_int_t ngx_ssl_certificates (ngx_conf_t*,ngx_ssl_t*,ngx_array_t*,ngx_array_t*,ngx_array_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_certificates(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_array_t *certs,
    ngx_array_t *keys, ngx_array_t *passwords)
{
    ngx_str_t   *cert, *key;
    ngx_uint_t   i;

    cert = certs->elts;
    key = keys->elts;

    for (i = 0; i < certs->nelts; i++) {

        if (ngx_ssl_certificate(cf, ssl, &cert[i], &key[i], passwords)
            != NGX_OK)
        {
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",397.0,417.0,1.0,1.0,21.0,12,6,17,10,0,4,3,4,2,1,,0,4,10,5,5,ngx_int_t
4736,85624,ngx_ssl_certificate,1,ngx_ssl_certificate,"ngx_int_t ngx_ssl_certificate (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*,ngx_str_t*,ngx_array_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *cert,
    ngx_str_t *key, ngx_array_t *passwords)
{
    char            *err;
    X509            *x509;
    EVP_PKEY        *pkey;
    STACK_OF(X509)  *chain;

    x509 = ngx_ssl_load_certificate(cf->pool, &err, cert, &chain);
    if (x509 == NULL) {
        if (err != NULL) {
            ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                          ""cannot load certificate \""%s\"": %s"",
                          cert->data, err);
        }

        return NGX_ERROR;
    }

    if (SSL_CTX_use_certificate(ssl->ctx, x509) == 0) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""SSL_CTX_use_certificate(\""%s\"") failed"", cert->data);
        X509_free(x509);
        sk_X509_pop_free(chain, X509_free);
        return NGX_ERROR;
    }

    if (X509_set_ex_data(x509, ngx_ssl_certificate_name_index, cert->data)
        == 0)
    {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0, ""X509_set...",420.0,538.0,1.0,1.0,119.0,40,7,90,19,1,19,12,15,5,9,,0,11,10,5,5,ngx_int_t
4737,85874,ngx_ssl_connection_certificate,1,ngx_ssl_connection_certificate,"ngx_int_t ngx_ssl_connection_certificate (ngx_connection_t*,ngx_pool_t*,ngx_str_t*,ngx_str_t*,ngx_array_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_connection_certificate(ngx_connection_t *c, ngx_pool_t *pool,
    ngx_str_t *cert, ngx_str_t *key, ngx_array_t *passwords)
{
    char            *err;
    X509            *x509;
    EVP_PKEY        *pkey;
    STACK_OF(X509)  *chain;

    x509 = ngx_ssl_load_certificate(pool, &err, cert, &chain);
    if (x509 == NULL) {
        if (err != NULL) {
            ngx_ssl_error(NGX_LOG_ERR, c->log, 0,
                          ""cannot load certificate \""%s\"": %s"",
                          cert->data, err);
        }

        return NGX_ERROR;
    }

    if (SSL_use_certificate(c->ssl->connection, x509) == 0) {
        ngx_ssl_error(NGX_LOG_ERR, c->log, 0,
                      ""SSL_use_certificate(\""%s\"") failed"", cert->data);
        X509_free(x509);
        sk_X509_pop_free(chain, X509_free);
        return NGX_ERROR;
    }

    X509_free(x509);

#ifdef SSL_set0_chain

    /*
     * SSL_set0_chain() is only available in OpenSSL 1.0.2+,
     * but this function is only ...",541.0,609.0,1.0,1.0,69.0,24,6,49,15,0,9,7,9,0,5,,0,5,10,5,5,ngx_int_t
4738,86338,ngx_ssl_ciphers,1,ngx_ssl_ciphers,"ngx_int_t ngx_ssl_ciphers (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*,ngx_uint_t)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_ciphers(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *ciphers,
    ngx_uint_t prefer_server_ciphers)
{
    if (SSL_CTX_set_cipher_list(ssl->ctx, (char *) ciphers->data) == 0) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""SSL_CTX_set_cipher_list(\""%V\"") failed"",
                      ciphers);
        return NGX_ERROR;
    }

    if (prefer_server_ciphers) {
        SSL_CTX_set_options(ssl->ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
    }

#if (OPENSSL_VERSION_NUMBER < 0x10100001L && !defined LIBRESSL_VERSION_NUMBER)
    /* a temporary 512-bit RSA key is required for export versions of MSIE */
    SSL_CTX_set_tmp_rsa_callback(ssl->ctx, ngx_ssl_rsa512_key_callback);
#endif

    return NGX_OK;
}",847.0,868.0,1.0,1.0,22.0,7,3,11,7,0,2,3,3,1,1,,0,1,8,4,4,ngx_int_t
4739,86384,ngx_ssl_client_certificate,1,ngx_ssl_client_certificate,"ngx_int_t ngx_ssl_client_certificate (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*,ngx_int_t)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_client_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *cert,
    ngx_int_t depth)
{
    STACK_OF(X509_NAME)  *list;

    SSL_CTX_set_verify(ssl->ctx, SSL_VERIFY_PEER, ngx_ssl_verify_callback);

    SSL_CTX_set_verify_depth(ssl->ctx, depth);

    if (cert->len == 0) {
        return NGX_OK;
    }

    if (ngx_conf_full_name(cf->cycle, cert, 1) != NGX_OK) {
        return NGX_ERROR;
    }

    if (SSL_CTX_load_verify_locations(ssl->ctx, (char *) cert->data, NULL)
        == 0)
    {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""SSL_CTX_load_verify_locations(\""%s\"") failed"",
                      cert->data);
        return NGX_ERROR;
    }

    /*
     * SSL_CTX_load_verify_locations() may leave errors in the error queue
     * while returning success
     */

    ERR_clear_error();

    list = SSL_load_client_CA_file((char *) cert->data);

    if (list == NULL) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                    ...",871.0,916.0,1.0,1.0,46.0,20,6,31,12,0,8,5,5,3,3,,0,6,8,4,4,ngx_int_t
4740,86487,ngx_ssl_trusted_certificate,1,ngx_ssl_trusted_certificate,"ngx_int_t ngx_ssl_trusted_certificate (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*,ngx_int_t)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_trusted_certificate(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *cert,
    ngx_int_t depth)
{
    SSL_CTX_set_verify(ssl->ctx, SSL_CTX_get_verify_mode(ssl->ctx),
                       ngx_ssl_verify_callback);

    SSL_CTX_set_verify_depth(ssl->ctx, depth);

    if (cert->len == 0) {
        return NGX_OK;
    }

    if (ngx_conf_full_name(cf->cycle, cert, 1) != NGX_OK) {
        return NGX_ERROR;
    }

    if (SSL_CTX_load_verify_locations(ssl->ctx, (char *) cert->data, NULL)
        == 0)
    {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""SSL_CTX_load_verify_locations(\""%s\"") failed"",
                      cert->data);
        return NGX_ERROR;
    }

    /*
     * SSL_CTX_load_verify_locations() may leave errors in the error queue
     * while returning success
     */

    ERR_clear_error();

    return NGX_OK;
}",919.0,953.0,1.0,1.0,35.0,13,4,19,9,0,5,4,4,3,2,,0,4,8,4,4,ngx_int_t
4741,86559,ngx_ssl_crl,1,ngx_ssl_crl,"ngx_int_t ngx_ssl_crl (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_crl(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *crl)
{
    X509_STORE   *store;
    X509_LOOKUP  *lookup;

    if (crl->len == 0) {
        return NGX_OK;
    }

    if (ngx_conf_full_name(cf->cycle, crl, 1) != NGX_OK) {
        return NGX_ERROR;
    }

    store = SSL_CTX_get_cert_store(ssl->ctx);

    if (store == NULL) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""SSL_CTX_get_cert_store() failed"");
        return NGX_ERROR;
    }

    lookup = X509_STORE_add_lookup(store, X509_LOOKUP_file());

    if (lookup == NULL) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""X509_STORE_add_lookup() failed"");
        return NGX_ERROR;
    }

    if (X509_LOOKUP_load_file(lookup, (char *) crl->data, X509_FILETYPE_PEM)
        == 0)
    {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""X509_LOOKUP_load_file(\""%s\"") failed"", crl->data);
        return NGX_ERROR;
    }

    X509_STORE_set_flags(stor...",956.0,998.0,1.0,1.0,43.0,17,6,31,12,0,7,6,6,3,4,,0,4,6,3,3,ngx_int_t
4742,86760,ngx_ssl_rsa512_key_callback,1,ngx_ssl_rsa512_key_callback,"RSA ngx_ssl_rsa512_key_callback (ngx_ssl_conn_t*,int,int)",event\ngx_event_openssl.c,"RSA *
ngx_ssl_rsa512_key_callback(ngx_ssl_conn_t *ssl_conn, int is_export,
    int key_length)
{
    static RSA  *key;

    if (key_length != 512) {
        return NULL;
    }

#if (OPENSSL_VERSION_NUMBER < 0x10100003L && !defined OPENSSL_NO_DEPRECATED)

    if (key == NULL) {
        key = RSA_generate_key(512, RSA_F4, NULL, NULL);
    }

#endif

    return key;
}",1119.0,1138.0,1.0,1.0,20.0,3,3,9,4,0,0,3,3,0,0,,0,0,6,3,3,RSA
4743,86789,ngx_ssl_read_password_file,1,ngx_ssl_read_password_file,"ngx_array_t ngx_ssl_read_password_file (ngx_conf_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_array_t *
ngx_ssl_read_password_file(ngx_conf_t *cf, ngx_str_t *file)
{
    u_char              *p, *last, *end;
    size_t               len;
    ssize_t              n;
    ngx_fd_t             fd;
    ngx_str_t           *pwd;
    ngx_array_t         *passwords;
    ngx_pool_cleanup_t  *cln;
    u_char               buf[NGX_SSL_PASSWORD_BUFFER_SIZE];

    if (ngx_conf_full_name(cf->cycle, file, 1) != NGX_OK) {
        return NULL;
    }

    passwords = ngx_array_create(cf->temp_pool, 4, sizeof(ngx_str_t));
    if (passwords == NULL) {
        return NULL;
    }

    cln = ngx_pool_cleanup_add(cf->temp_pool, 0);
    if (cln == NULL) {
        return NULL;
    }

    cln->handler = ngx_ssl_passwords_cleanup;
    cln->data = passwords;

    fd = ngx_open_file(file->data, NGX_FILE_RDONLY, NGX_FILE_OPEN, 0);

    if (fd == NGX_INVALID_FILE) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, ngx_errno,
                           ngx_open_file_n "" \""%s\"" failed"", file->data);
        ...",1141.0,1268.0,1.0,29.0,128.0,71,13,110,23,0,18,24,35,3,10,,0,16,4,2,2,ngx_array_t
4744,87086,ngx_ssl_preserve_passwords,1,ngx_ssl_preserve_passwords,"ngx_array_t ngx_ssl_preserve_passwords (ngx_conf_t*,ngx_array_t*)",event\ngx_event_openssl.c,"ngx_array_t *
ngx_ssl_preserve_passwords(ngx_conf_t *cf, ngx_array_t *passwords)
{
    ngx_str_t           *opwd, *pwd;
    ngx_uint_t           i;
    ngx_array_t         *pwds;
    ngx_pool_cleanup_t  *cln;
    static ngx_array_t   empty_passwords;

    if (passwords == NULL) {

        /*
         * If there are no passwords, an empty array is used
         * to make sure OpenSSL's default password callback
         * won't block on reading from stdin.
         */

        return &empty_passwords;
    }

    /*
     * Passwords are normally allocated from the temporary pool
     * and cleared after parsing configuration.  To be used at
     * runtime they have to be copied to the configuration pool.
     */

    pwds = ngx_array_create(cf->pool, passwords->nelts, sizeof(ngx_str_t));
    if (pwds == NULL) {
        return NULL;
    }

    cln = ngx_pool_cleanup_add(cf->pool, 0);
    if (cln == NULL) {
        return NULL;
    }

    cln->handler = ngx_ssl_passwords_cleanup;
    cl...",1271.0,1331.0,1.0,1.0,61.0,38,9,45,11,0,13,7,9,2,4,,0,13,4,2,2,ngx_array_t
4745,87266,ngx_ssl_dhparam,1,ngx_ssl_dhparam,"ngx_int_t ngx_ssl_dhparam (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_dhparam(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *file)
{
    DH   *dh;
    BIO  *bio;

    if (file->len == 0) {
        return NGX_OK;
    }

    if (ngx_conf_full_name(cf->cycle, file, 1) != NGX_OK) {
        return NGX_ERROR;
    }

    bio = BIO_new_file((char *) file->data, ""r"");
    if (bio == NULL) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""BIO_new_file(\""%s\"") failed"", file->data);
        return NGX_ERROR;
    }

    dh = PEM_read_bio_DHparams(bio, NULL, NULL, NULL);
    if (dh == NULL) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""PEM_read_bio_DHparams(\""%s\"") failed"", file->data);
        BIO_free(bio);
        return NGX_ERROR;
    }

    SSL_CTX_set_tmp_dh(ssl->ctx, dh);

    DH_free(dh);
    BIO_free(bio);

    return NGX_OK;
}",1350.0,1385.0,1.0,1.0,36.0,15,5,31,9,0,7,5,5,2,3,,0,5,6,3,3,ngx_int_t
4746,87359,ngx_ssl_ecdh_curve,1,ngx_ssl_ecdh_curve,"ngx_int_t ngx_ssl_ecdh_curve (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_ecdh_curve(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *name)
{
#ifndef OPENSSL_NO_ECDH

    /*
     * Elliptic-Curve Diffie-Hellman parameters are either ""named curves""
     * from RFC 4492 section 5.1.1, or explicitly described curves over
     * binary fields.  OpenSSL only supports the ""named curves"", which provide
     * maximum interoperability.
     */

#if (defined SSL_CTX_set1_curves_list || defined SSL_CTRL_SET_CURVES_LIST)

    /*
     * OpenSSL 1.0.2+ allows configuring a curve list instead of a single
     * curve previously supported.  By default an internal list is used,
     * with prime256v1 being preferred by server in OpenSSL 1.0.2b+
     * and X25519 in OpenSSL 1.1.0+.
     *
     * By default a curve preferred by the client will be used for
     * key exchange.  The SSL_OP_CIPHER_SERVER_PREFERENCE option can
     * be used to prefer server curves instead, similar to what it
     * does for ciphers.
     */

    SSL_CTX_set_options(ssl->ctx, SSL_O...",1388.0,1467.0,1.0,1.0,80.0,11,3,23,10,0,3,4,4,1,2,,0,1,6,3,3,ngx_int_t
4747,87442,ngx_ssl_early_data,1,ngx_ssl_early_data,"ngx_int_t ngx_ssl_early_data (ngx_conf_t*,ngx_ssl_t*,ngx_uint_t)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_early_data(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_uint_t enable)
{
    if (!enable) {
        return NGX_OK;
    }

#ifdef SSL_ERROR_EARLY_DATA_REJECTED

    /* BoringSSL */

    SSL_CTX_set_early_data_enabled(ssl->ctx, 1);

#elif defined SSL_READ_EARLY_DATA_SUCCESS

    /* OpenSSL */

    SSL_CTX_set_max_early_data(ssl->ctx, NGX_SSL_BUFSIZE);

#else
    ngx_log_error(NGX_LOG_WARN, ssl->log, 0,
                  ""\""ssl_early_data\"" is not supported on this platform, ""
                  ""ignored"");
#endif

    return NGX_OK;
}",1470.0,1496.0,1.0,1.0,27.0,2,2,5,4,0,1,2,2,0,1,,0,0,6,3,3,ngx_int_t
4748,87464,ngx_ssl_conf_commands,1,ngx_ssl_conf_commands,"ngx_int_t ngx_ssl_conf_commands (ngx_conf_t*,ngx_ssl_t*,ngx_array_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_conf_commands(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_array_t *commands)
{
    if (commands == NULL) {
        return NGX_OK;
    }

#ifdef SSL_CONF_FLAG_FILE
    {
    int            type;
    u_char        *key, *value;
    ngx_uint_t     i;
    ngx_keyval_t  *cmd;
    SSL_CONF_CTX  *cctx;

    cctx = SSL_CONF_CTX_new();
    if (cctx == NULL) {
        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,
                      ""SSL_CONF_CTX_new() failed"");
        return NGX_ERROR;
    }

    SSL_CONF_CTX_set_flags(cctx, SSL_CONF_FLAG_FILE);
    SSL_CONF_CTX_set_flags(cctx, SSL_CONF_FLAG_SERVER);
    SSL_CONF_CTX_set_flags(cctx, SSL_CONF_FLAG_CLIENT);
    SSL_CONF_CTX_set_flags(cctx, SSL_CONF_FLAG_CERTIFICATE);
    SSL_CONF_CTX_set_flags(cctx, SSL_CONF_FLAG_SHOW_ERRORS);

    SSL_CONF_CTX_set_ssl_ctx(cctx, ssl->ctx);

    cmd = commands->elts;
    for (i = 0; i < commands->nelts; i++) {

        key = cmd[i].key.data;
        type = SSL_CONF_cmd_value_type(cctx, (char *) key);

...",1499.0,1568.0,1.0,1.0,70.0,2,2,6,6,0,1,2,2,0,1,,0,0,6,3,3,ngx_int_t
4749,87487,ngx_ssl_client_session_cache,1,ngx_ssl_client_session_cache,"ngx_int_t ngx_ssl_client_session_cache (ngx_conf_t*,ngx_ssl_t*,ngx_uint_t)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_client_session_cache(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_uint_t enable)
{
    if (!enable) {
        return NGX_OK;
    }

    SSL_CTX_set_session_cache_mode(ssl->ctx,
                                   SSL_SESS_CACHE_CLIENT
                                   |SSL_SESS_CACHE_NO_INTERNAL);

    SSL_CTX_sess_set_new_cb(ssl->ctx, ngx_ssl_new_client_session);

    return NGX_OK;
}",1571.0,1585.0,1.0,1.0,15.0,4,3,8,6,0,0,2,2,0,0,,0,0,6,3,3,ngx_int_t
4750,87555,ngx_ssl_create_connection,1,ngx_ssl_create_connection,"ngx_int_t ngx_ssl_create_connection (ngx_ssl_t*,ngx_connection_t*,ngx_uint_t)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_create_connection(ngx_ssl_t *ssl, ngx_connection_t *c, ngx_uint_t flags)
{
    ngx_ssl_connection_t  *sc;

    sc = ngx_pcalloc(c->pool, sizeof(ngx_ssl_connection_t));
    if (sc == NULL) {
        return NGX_ERROR;
    }

    sc->buffer = ((flags & NGX_SSL_BUFFER) != 0);
    sc->buffer_size = ssl->buffer_size;

    sc->session_ctx = ssl->ctx;

#ifdef SSL_READ_EARLY_DATA_SUCCESS
    if (SSL_CTX_get_max_early_data(ssl->ctx)) {
        sc->try_early_data = 1;
    }
#endif

    sc->connection = SSL_new(ssl->ctx);

    if (sc->connection == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""SSL_new() failed"");
        return NGX_ERROR;
    }

    if (SSL_set_fd(sc->connection, c->fd) == 0) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""SSL_set_fd() failed"");
        return NGX_ERROR;
    }

    if (flags & NGX_SSL_CLIENT) {
        SSL_set_connect_state(sc->connection);

    } else {
        SSL_set_accept_state(sc->connection);

#ifdef SSL_OP_NO_RENEGOTIATIO...",1607.0,1659.0,1.0,1.0,53.0,31,6,37,12,0,5,6,6,1,4,,0,2,6,3,3,ngx_int_t
4751,87686,ngx_ssl_get_session,1,ngx_ssl_get_session,ngx_ssl_session_t ngx_ssl_get_session (ngx_connection_t*),event\ngx_event_openssl.c,"ngx_ssl_session_t *
ngx_ssl_get_session(ngx_connection_t *c)
{
#ifdef TLS1_3_VERSION
    if (c->ssl->session) {
        SSL_SESSION_up_ref(c->ssl->session);
        return c->ssl->session;
    }
#endif

    return SSL_get1_session(c->ssl->connection);
}",1662.0,1673.0,1.0,1.0,12.0,2,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,ngx_ssl_session_t
4752,87698,ngx_ssl_get0_session,1,ngx_ssl_get0_session,ngx_ssl_session_t ngx_ssl_get0_session (ngx_connection_t*),event\ngx_event_openssl.c,"ngx_ssl_session_t *
ngx_ssl_get0_session(ngx_connection_t *c)
{
    if (c->ssl->session) {
        return c->ssl->session;
    }

    return SSL_get0_session(c->ssl->connection);
}",1676.0,1684.0,1.0,1.0,9.0,6,1,3,1,0,0,2,2,0,0,,0,0,2,1,1,ngx_ssl_session_t
4753,87723,ngx_ssl_set_session,1,ngx_ssl_set_session,"ngx_int_t ngx_ssl_set_session (ngx_connection_t*,ngx_ssl_session_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_set_session(ngx_connection_t *c, ngx_ssl_session_t *session)
{
    if (session) {
        if (SSL_set_session(c->ssl->connection, session) == 0) {
            ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""SSL_set_session() failed"");
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",1687.0,1698.0,1.0,1.0,12.0,4,2,7,5,0,1,3,4,0,1,,0,0,4,2,2,ngx_int_t
4754,87754,ngx_ssl_handshake,1,ngx_ssl_handshake,ngx_int_t ngx_ssl_handshake (ngx_connection_t*),event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_handshake(ngx_connection_t *c)
{
    int        n, sslerr;
    ngx_err_t  err;
    ngx_int_t  rc;

#ifdef SSL_READ_EARLY_DATA_SUCCESS
    if (c->ssl->try_early_data) {
        return ngx_ssl_try_early_data(c);
    }
#endif

    if (c->ssl->in_ocsp) {
        return ngx_ssl_ocsp_validate(c);
    }

    ngx_ssl_clear_error(c->log);

    n = SSL_do_handshake(c->ssl->connection);

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, ""SSL_do_handshake: %d"", n);

    if (n == 1) {

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            return NGX_ERROR;
        }

        if (ngx_handle_write_event(c->write, 0) != NGX_OK) {
            return NGX_ERROR;
        }

#if (NGX_DEBUG)
        ngx_ssl_handshake_log(c);
#endif

        c->recv = ngx_ssl_recv;
        c->send = ngx_ssl_write;
        c->recv_chain = ngx_ssl_recv_chain;
        c->send_chain = ngx_ssl_send_chain;

#ifndef SSL_OP_NO_RENEGOTIATION
#if OPENSSL_VERSION_NUMBER < 0x10100000L
#ifdef SSL3_F...",1701.0,1834.0,1.0,1.0,134.0,84,6,88,15,0,12,15,23,6,12,,0,7,2,1,1,ngx_int_t
4755,88118,ngx_ssl_recv_chain,1,ngx_ssl_recv_chain,"ssize_t ngx_ssl_recv_chain (ngx_connection_t*,ngx_chain_t*,off_t)",event\ngx_event_openssl.c,"ssize_t
ngx_ssl_recv_chain(ngx_connection_t *c, ngx_chain_t *cl, off_t limit)
{
    u_char     *last;
    ssize_t     n, bytes, size;
    ngx_buf_t  *b;

    bytes = 0;

    b = cl->buf;
    last = b->last;

    for ( ;; ) {
        size = b->end - last;

        if (limit) {
            if (bytes >= limit) {
                return bytes;
            }

            if (bytes + size > limit) {
                size = (ssize_t) (limit - bytes);
            }
        }

        n = ngx_ssl_recv(c, last, size);

        if (n > 0) {
            last += n;
            bytes += n;

            if (!c->read->ready) {
                return bytes;
            }

            if (last == b->end) {
                cl = cl->next;

                if (cl == NULL) {
                    return bytes;
                }

                b = cl->buf;
                last = b->last;
            }

            continue;
        }

        if (bytes) {

            if (n == 0 || n == NGX_ERROR) {
       ...",2045.0,2105.0,1.0,1.0,61.0,35,10,47,10,0,1,12,27,0,1,,0,1,6,3,3,ssize_t
4756,88256,ngx_ssl_recv,1,ngx_ssl_recv,"ssize_t ngx_ssl_recv (ngx_connection_t*,u_char*,size_t)",event\ngx_event_openssl.c,"ssize_t
ngx_ssl_recv(ngx_connection_t *c, u_char *buf, size_t size)
{
    int  n, bytes;

#ifdef SSL_READ_EARLY_DATA_SUCCESS
    if (c->ssl->in_early) {
        return ngx_ssl_recv_early(c, buf, size);
    }
#endif

    if (c->ssl->last == NGX_ERROR) {
        c->read->error = 1;
        return NGX_ERROR;
    }

    if (c->ssl->last == NGX_DONE) {
        c->read->ready = 0;
        c->read->eof = 1;
        return 0;
    }

    bytes = 0;

    ngx_ssl_clear_error(c->log);

    /*
     * SSL_read() may return data in parts, so try to read
     * until SSL_read() would return no data
     */

    for ( ;; ) {

        n = SSL_read(c->ssl->connection, buf, size);

        ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, ""SSL_read: %d"", n);

        if (n > 0) {
            bytes += n;
        }

        c->ssl->last = ngx_ssl_handle_recv(c, n);

        if (c->ssl->last == NGX_OK) {

            size -= n;

            if (size == 0) {
                c->read->ready = 1;

              ...",2108.0,2230.0,1.0,1.0,123.0,77,10,58,11,1,2,14,33,0,2,,0,1,6,3,3,ssize_t
4757,88834,ngx_ssl_send_chain,1,ngx_ssl_send_chain,"ngx_chain_t ngx_ssl_send_chain (ngx_connection_t*,ngx_chain_t*,off_t)",event\ngx_event_openssl.c,"ngx_chain_t *
ngx_ssl_send_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    int          n;
    ngx_uint_t   flush;
    ssize_t      send, size;
    ngx_buf_t   *buf;

    if (!c->ssl->buffer) {

        while (in) {
            if (ngx_buf_special(in->buf)) {
                in = in->next;
                continue;
            }

            n = ngx_ssl_write(c, in->buf->pos, in->buf->last - in->buf->pos);

            if (n == NGX_ERROR) {
                return NGX_CHAIN_ERROR;
            }

            if (n == NGX_AGAIN) {
                return in;
            }

            in->buf->pos += n;

            if (in->buf->pos == in->buf->last) {
                in = in->next;
            }
        }

        return in;
    }


    /* the maximum limit size is the maximum int32_t value - the page size */

    if (limit == 0 || limit > (off_t) (NGX_MAX_INT32_VALUE - ngx_pagesize)) {
        limit = NGX_MAX_INT32_VALUE - ngx_pagesize;
    }

    buf = c->ssl->buf;

  ...",2488.0,2640.0,1.0,1.0,153.0,162,13,148,16,0,4,32,54,0,4,,0,4,6,3,3,ngx_chain_t
4758,89334,ngx_ssl_write,1,ngx_ssl_write,"ssize_t ngx_ssl_write (ngx_connection_t*,u_char*,size_t)",event\ngx_event_openssl.c,"ssize_t
ngx_ssl_write(ngx_connection_t *c, u_char *data, size_t size)
{
    int        n, sslerr;
    ngx_err_t  err;

#ifdef SSL_READ_EARLY_DATA_SUCCESS
    if (c->ssl->in_early) {
        return ngx_ssl_write_early(c, data, size);
    }
#endif

    ngx_ssl_clear_error(c->log);

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, ""SSL to write: %uz"", size);

    n = SSL_write(c->ssl->connection, data, size);

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, ""SSL_write: %d"", n);

    if (n > 0) {

        if (c->ssl->saved_read_handler) {

            c->read->handler = c->ssl->saved_read_handler;
            c->ssl->saved_read_handler = NULL;
            c->read->ready = 1;

            if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
                return NGX_ERROR;
            }

            ngx_post_event(c->read, &ngx_posted_events);
        }

        c->sent += n;

        return n;
    }

    sslerr = SSL_get_error(c->ssl->connection, n);

    if (sslerr == SSL_ERROR_ZER...",2643.0,2751.0,1.0,1.0,109.0,83,8,77,18,2,5,11,19,3,5,,0,3,6,3,3,ssize_t
4759,89645,ngx_ssl_free_buffer,1,ngx_ssl_free_buffer,void ngx_ssl_free_buffer (ngx_connection_t*),event\ngx_event_openssl.c,"void
ngx_ssl_free_buffer(ngx_connection_t *c)
{
    if (c->ssl->buf && c->ssl->buf->start) {
        if (ngx_pfree(c->pool, c->ssl->buf->start) == NGX_OK) {
            c->ssl->buf->start = NULL;
        }
    }
}",2884.0,2892.0,1.0,1.0,9.0,15,4,7,3,0,1,3,4,1,1,,0,1,2,1,1,void
4760,89689,ngx_ssl_shutdown,1,ngx_ssl_shutdown,ngx_int_t ngx_ssl_shutdown (ngx_connection_t*),event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_shutdown(ngx_connection_t *c)
{
    int         n, sslerr, mode;
    ngx_int_t   rc;
    ngx_err_t   err;
    ngx_uint_t  tries;

    rc = NGX_OK;

    ngx_ssl_ocsp_cleanup(c);

    if (SSL_in_init(c->ssl->connection)) {
        /*
         * OpenSSL 1.0.2f complains if SSL_shutdown() is called during
         * an SSL handshake, while previous versions always return 0.
         * Avoid calling SSL_shutdown() if handshake wasn't completed.
         */

        goto done;
    }

    if (c->timedout || c->error || c->buffered) {
        mode = SSL_RECEIVED_SHUTDOWN|SSL_SENT_SHUTDOWN;
        SSL_set_quiet_shutdown(c->ssl->connection, 1);

    } else {
        mode = SSL_get_shutdown(c->ssl->connection);

        if (c->ssl->no_wait_shutdown) {
            mode |= SSL_RECEIVED_SHUTDOWN;
        }

        if (c->ssl->no_send_shutdown) {
            mode |= SSL_SENT_SHUTDOWN;
        }

        if (c->ssl->no_wait_shutdown && c->ssl->no_send_shutdown) {
            SSL...",2895.0,3022.0,1.0,1.0,128.0,67,10,68,21,0,5,19,22,2,5,,0,2,2,1,1,ngx_int_t
4761,90252,ngx_ssl_error,1,ngx_ssl_error,"ANY ngx_ssl_error (ngx_uint_t,ngx_log_t*,ngx_err_t,char*...)",event\ngx_event_openssl.c,"ngx_ssl_error(ngx_uint_t level, ngx_log_t *log, ngx_err_t err, char *fmt, ...)
{
    int          flags;
    u_long       n;
    va_list      args;
    u_char      *p, *last;
    u_char       errstr[NGX_MAX_CONF_ERRSTR];
    const char  *data;

    last = errstr + NGX_MAX_CONF_ERRSTR;

    va_start(args, fmt);
    p = ngx_vslprintf(errstr, last - 1, fmt, args);
    va_end(args);

    if (ERR_peek_error()) {
        p = ngx_cpystrn(p, (u_char *) "" (SSL:"", last - p);

        for ( ;; ) {

            n = ERR_peek_error_line_data(NULL, NULL, &data, &flags);

            if (n == 0) {
                break;
            }

            /* ERR_error_string_n() requires at least one byte */

            if (p >= last - 1) {
                goto next;
            }

            *p++ = ' ';

            ERR_error_string_n(n, (char *) p, last - p);

            while (p < last && *p) {
                p++;
            }

            if (p < last && *data && (flags & ERR_TXT_STRING)) {
       ...",3217.0,3273.0,1.0,1.0,57.0,39,12,52,14,52,4,10,18,0,4,,0,3,8,4,4,ANY
4762,90398,ngx_ssl_session_cache,1,ngx_ssl_session_cache,"ngx_int_t ngx_ssl_session_cache (ngx_ssl_t*,ngx_str_t*,ngx_array_t*,ssize_t,ngx_shm_zone_t*,time_t)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_session_cache(ngx_ssl_t *ssl, ngx_str_t *sess_ctx,
    ngx_array_t *certificates, ssize_t builtin_session_cache,
    ngx_shm_zone_t *shm_zone, time_t timeout)
{
    long  cache_mode;

    SSL_CTX_set_timeout(ssl->ctx, (long) timeout);

    if (ngx_ssl_session_id_context(ssl, sess_ctx, certificates) != NGX_OK) {
        return NGX_ERROR;
    }

    if (builtin_session_cache == NGX_SSL_NO_SCACHE) {
        SSL_CTX_set_session_cache_mode(ssl->ctx, SSL_SESS_CACHE_OFF);
        return NGX_OK;
    }

    if (builtin_session_cache == NGX_SSL_NONE_SCACHE) {

        /*
         * If the server explicitly says that it does not support
         * session reuse (see SSL_SESS_CACHE_OFF above), then
         * Outlook Express fails to upload a sent email to
         * the Sent Items folder on the IMAP server via a separate IMAP
         * connection in the background.  Therefore we have a special
         * mode (SSL_SESS_CACHE_SERVER|SSL_SESS_CACHE_NO_INTERNAL_STORE)
         ...",3276.0,3347.0,1.0,1.0,72.0,23,7,49,23,0,3,9,11,2,2,,0,2,12,6,6,ngx_int_t
4763,90812,ngx_ssl_session_cache_init,1,ngx_ssl_session_cache_init,"ngx_int_t ngx_ssl_session_cache_init (ngx_shm_zone_t*,void*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_session_cache_init(ngx_shm_zone_t *shm_zone, void *data)
{
    size_t                    len;
    ngx_slab_pool_t          *shpool;
    ngx_ssl_session_cache_t  *cache;

    if (data) {
        shm_zone->data = data;
        return NGX_OK;
    }

    shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;

    if (shm_zone->shm.exists) {
        shm_zone->data = shpool->data;
        return NGX_OK;
    }

    cache = ngx_slab_alloc(shpool, sizeof(ngx_ssl_session_cache_t));
    if (cache == NULL) {
        return NGX_ERROR;
    }

    shpool->data = cache;
    shm_zone->data = cache;

    ngx_rbtree_init(&cache->session_rbtree, &cache->sentinel,
                    ngx_ssl_session_rbtree_insert_value);

    ngx_queue_init(&cache->expire_queue);

    len = sizeof("" in SSL session shared cache \""\"""") + shm_zone->shm.name.len;

    shpool->log_ctx = ngx_slab_alloc(shpool, len);
    if (shpool->log_ctx == NULL) {
        return NGX_ERROR;
    }

    ngx_sprintf(shpool->log_ctx...",3468.0,3513.0,1.0,1.0,46.0,40,8,35,9,0,12,5,5,1,3,,0,11,4,2,2,ngx_int_t
4764,91457,ngx_ssl_remove_cached_session,1,ngx_ssl_remove_cached_session,"void ngx_ssl_remove_cached_session (SSL_CTX*,ngx_ssl_session_t*)",event\ngx_event_openssl.c,"void
ngx_ssl_remove_cached_session(SSL_CTX *ssl, ngx_ssl_session_t *sess)
{
    SSL_CTX_remove_session(ssl, sess);

    ngx_ssl_remove_session(ssl, sess);
}",3775.0,3781.0,1.0,1.0,7.0,0,0,4,2,0,1,1,1,0,1,,0,0,4,2,2,void
4765,91845,ngx_ssl_session_ticket_keys,1,ngx_ssl_session_ticket_keys,"ngx_int_t ngx_ssl_session_ticket_keys (ngx_conf_t*,ngx_ssl_t*,ngx_array_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_session_ticket_keys(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_array_t *paths)
{
    if (paths) {
        ngx_log_error(NGX_LOG_WARN, ssl->log, 0,
                      ""\""ssl_session_ticket_key\"" ignored, not supported"");
    }

    return NGX_OK;
}",4218.0,4227.0,1.0,1.0,10.0,1,1,4,4,0,1,2,2,0,1,,0,0,6,3,3,ngx_int_t
4766,91864,ngx_ssl_cleanup_ctx,1,ngx_ssl_cleanup_ctx,void ngx_ssl_cleanup_ctx (void*),event\ngx_event_openssl.c,"void
ngx_ssl_cleanup_ctx(void *data)
{
    ngx_ssl_t  *ssl = data;

    X509  *cert, *next;

    cert = SSL_CTX_get_ex_data(ssl->ctx, ngx_ssl_certificate_index);

    while (cert) {
        next = X509_get_ex_data(cert, ngx_ssl_next_certificate_index);
        X509_free(cert);
        cert = next;
    }

    SSL_CTX_free(ssl->ctx);
}",4232.0,4248.0,1.0,1.0,17.0,6,2,13,6,0,2,2,2,0,0,,0,2,2,1,1,void
4767,91899,ngx_ssl_check_host,1,ngx_ssl_check_host,"ngx_int_t ngx_ssl_check_host (ngx_connection_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_check_host(ngx_connection_t *c, ngx_str_t *name)
{
    X509   *cert;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_ERROR;
    }

#ifdef X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT

    /* X509_check_host() is only available in OpenSSL 1.0.2+ */

    if (name->len == 0) {
        goto failed;
    }

    if (X509_check_host(cert, (char *) name->data, name->len, 0, NULL) != 1) {
        ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, 0,
                       ""X509_check_host(): no match"");
        goto failed;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""X509_check_host(): match"");

    goto found;

#else
    {
    int                      n, i;
    X509_NAME               *sname;
    ASN1_STRING             *str;
    X509_NAME_ENTRY         *entry;
    GENERAL_NAME            *altname;
    STACK_OF(GENERAL_NAME)  *altnames;

    /*
     * As per RFC6125 and RFC2818, we check subjectAltName ...",4251.0,4375.0,1.0,1.0,125.0,31,8,68,18,0,2,16,17,2,2,,0,2,4,2,2,ngx_int_t
4768,92201,ngx_ssl_get_protocol,1,ngx_ssl_get_protocol,"ngx_int_t ngx_ssl_get_protocol (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_protocol(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    s->data = (u_char *) SSL_get_version(c->ssl->connection);
    return NGX_OK;
}",4420.0,4425.0,1.0,1.0,6.0,5,3,3,3,0,1,1,1,0,0,,0,1,6,3,3,ngx_int_t
4769,92222,ngx_ssl_get_cipher_name,1,ngx_ssl_get_cipher_name,"ngx_int_t ngx_ssl_get_cipher_name (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_cipher_name(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    s->data = (u_char *) SSL_get_cipher_name(c->ssl->connection);
    return NGX_OK;
}",4428.0,4433.0,1.0,1.0,6.0,5,3,3,3,0,1,1,1,0,0,,0,1,6,3,3,ngx_int_t
4770,92243,ngx_ssl_get_ciphers,1,ngx_ssl_get_ciphers,"ngx_int_t ngx_ssl_get_ciphers (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_ciphers(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
#ifdef SSL_CTRL_GET_RAW_CIPHERLIST

    int                n, i, bytes;
    size_t             len;
    u_char            *ciphers, *p;
    const SSL_CIPHER  *cipher;

    bytes = SSL_get0_raw_cipherlist(c->ssl->connection, NULL);
    n = SSL_get0_raw_cipherlist(c->ssl->connection, &ciphers);

    if (n <= 0) {
        s->len = 0;
        return NGX_OK;
    }

    len = 0;
    n /= bytes;

    for (i = 0; i < n; i++) {
        cipher = SSL_CIPHER_find(c->ssl->connection, ciphers + i * bytes);

        if (cipher) {
            len += ngx_strlen(SSL_CIPHER_get_name(cipher));

        } else {
            len += sizeof(""0x"") - 1 + bytes * (sizeof(""00"") - 1);
        }

        len += sizeof("":"") - 1;
    }

    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        return NGX_ERROR;
    }

    p = s->data;

    for (i = 0; i < n; i++) {
        cipher = SSL_CIPHER_find(c->ssl->connection...",4436.0,4517.0,1.0,1.0,82.0,15,4,17,7,0,8,3,3,1,1,,0,8,6,3,3,ngx_int_t
4771,92306,ngx_ssl_get_curves,1,ngx_ssl_get_curves,"ngx_int_t ngx_ssl_get_curves (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_curves(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
#ifdef SSL_CTRL_GET_CURVES

    int         *curves, n, i, nid;
    u_char      *p;
    size_t       len;

    n = SSL_get1_curves(c->ssl->connection, NULL);

    if (n <= 0) {
        s->len = 0;
        return NGX_OK;
    }

    curves = ngx_palloc(pool, n * sizeof(int));

    n = SSL_get1_curves(c->ssl->connection, curves);
    len = 0;

    for (i = 0; i < n; i++) {
        nid = curves[i];

        if (nid & TLSEXT_nid_unknown) {
            len += sizeof(""0x0000"") - 1;

        } else {
            len += ngx_strlen(OBJ_nid2sn(nid));
        }

        len += sizeof("":"") - 1;
    }

    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        return NGX_ERROR;
    }

    p = s->data;

    for (i = 0; i < n; i++) {
        nid = curves[i];

        if (nid & TLSEXT_nid_unknown) {
            p = ngx_sprintf(p, ""0x%04xd"", nid & 0xffff);

        } else {
            p = ngx_sprintf(p,...",4520.0,4585.0,1.0,1.0,66.0,2,2,2,2,0,1,1,1,0,0,,0,1,6,3,3,ngx_int_t
4772,92320,ngx_ssl_get_session_id,1,ngx_ssl_get_session_id,"ngx_int_t ngx_ssl_get_session_id (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_session_id(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    u_char        *buf;
    SSL_SESSION   *sess;
    unsigned int   len;

    sess = SSL_get0_session(c->ssl->connection);
    if (sess == NULL) {
        s->len = 0;
        return NGX_OK;
    }

    buf = (u_char *) SSL_SESSION_get_id(sess, &len);

    s->len = 2 * len;
    s->data = ngx_pnalloc(pool, 2 * len);
    if (s->data == NULL) {
        return NGX_ERROR;
    }

    ngx_hex_dump(s->data, buf, len);

    return NGX_OK;
}",4588.0,4612.0,1.0,1.0,25.0,18,6,21,9,0,7,3,3,1,2,,0,6,6,3,3,ngx_int_t
4773,92391,ngx_ssl_get_session_reused,1,ngx_ssl_get_session_reused,"ngx_int_t ngx_ssl_get_session_reused (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_session_reused(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    if (SSL_session_reused(c->ssl->connection)) {
        ngx_str_set(s, ""r"");

    } else {
        ngx_str_set(s, ""."");
    }

    return NGX_OK;
}",4615.0,4626.0,1.0,1.0,12.0,2,1,3,3,0,0,2,2,0,0,,0,0,6,3,3,ngx_int_t
4774,92416,ngx_ssl_get_early_data,1,ngx_ssl_get_early_data,"ngx_int_t ngx_ssl_get_early_data (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_early_data(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    s->len = 0;

#ifdef SSL_ERROR_EARLY_DATA_REJECTED

    /* BoringSSL */

    if (SSL_in_early_data(c->ssl->connection)) {
        ngx_str_set(s, ""1"");
    }

#elif defined SSL_READ_EARLY_DATA_SUCCESS

    /* OpenSSL */

    if (!SSL_is_init_finished(c->ssl->connection)) {
        ngx_str_set(s, ""1"");
    }

#endif

    return NGX_OK;
}",4629.0,4653.0,1.0,1.0,25.0,2,2,2,2,0,1,1,1,0,0,,0,1,6,3,3,ngx_int_t
4775,92430,ngx_ssl_get_server_name,1,ngx_ssl_get_server_name,"ngx_int_t ngx_ssl_get_server_name (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_server_name(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
#ifdef SSL_CTRL_SET_TLSEXT_HOSTNAME

    size_t       len;
    const char  *name;

    name = SSL_get_servername(c->ssl->connection, TLSEXT_NAMETYPE_host_name);

    if (name) {
        len = ngx_strlen(name);

        s->len = len;
        s->data = ngx_pnalloc(pool, len);
        if (s->data == NULL) {
            return NGX_ERROR;
        }

        ngx_memcpy(s->data, name, len);

        return NGX_OK;
    }

#endif

    s->len = 0;
    return NGX_OK;
}",4656.0,4684.0,1.0,1.0,29.0,2,2,2,2,0,1,1,1,0,0,,0,1,6,3,3,ngx_int_t
4776,92444,ngx_ssl_get_raw_certificate,1,ngx_ssl_get_raw_certificate,"ngx_int_t ngx_ssl_get_raw_certificate (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_raw_certificate(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    size_t   len;
    BIO     *bio;
    X509    *cert;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    bio = BIO_new(BIO_s_mem());
    if (bio == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""BIO_new() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

    if (PEM_write_bio_X509(bio, cert) == 0) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""PEM_write_bio_X509() failed"");
        goto failed;
    }

    len = BIO_pending(bio);
    s->len = len;

    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        goto failed;
    }

    BIO_read(bio, s->data, len);

    BIO_free(bio);
    X509_free(cert);

    return NGX_OK;

failed:

    BIO_free(bio);
    X509_free(cert);

    return NGX_ERROR;
}",4687.0,4734.0,1.0,1.0,48.0,19,3,35,10,2,8,7,5,1,3,,0,6,6,3,3,ngx_int_t
4777,92552,ngx_ssl_get_certificate,1,ngx_ssl_get_certificate,"ngx_int_t ngx_ssl_get_certificate (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_certificate(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    u_char      *p;
    size_t       len;
    ngx_uint_t   i;
    ngx_str_t    cert;

    if (ngx_ssl_get_raw_certificate(c, pool, &cert) != NGX_OK) {
        return NGX_ERROR;
    }

    if (cert.len == 0) {
        s->len = 0;
        return NGX_OK;
    }

    len = cert.len - 1;

    for (i = 0; i < cert.len - 1; i++) {
        if (cert.data[i] == LF) {
            len++;
        }
    }

    s->len = len;
    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        return NGX_ERROR;
    }

    p = s->data;

    for (i = 0; i < cert.len - 1; i++) {
        *p++ = cert.data[i];
        if (cert.data[i] == LF) {
            *p++ = '\t';
        }
    }

    return NGX_OK;
}",4737.0,4778.0,1.0,1.0,42.0,40,11,38,11,0,14,8,10,7,2,,0,14,6,3,3,ngx_int_t
4778,92687,ngx_ssl_get_escaped_certificate,1,ngx_ssl_get_escaped_certificate,"ngx_int_t ngx_ssl_get_escaped_certificate (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_escaped_certificate(ngx_connection_t *c, ngx_pool_t *pool,
    ngx_str_t *s)
{
    ngx_str_t  cert;
    uintptr_t  n;

    if (ngx_ssl_get_raw_certificate(c, pool, &cert) != NGX_OK) {
        return NGX_ERROR;
    }

    if (cert.len == 0) {
        s->len = 0;
        return NGX_OK;
    }

    n = ngx_escape_uri(NULL, cert.data, cert.len, NGX_ESCAPE_URI_COMPONENT);

    s->len = cert.len + n * 2;
    s->data = ngx_pnalloc(pool, s->len);
    if (s->data == NULL) {
        return NGX_ERROR;
    }

    ngx_escape_uri(s->data, cert.data, cert.len, NGX_ESCAPE_URI_COMPONENT);

    return NGX_OK;
}",4781.0,4808.0,1.0,1.0,28.0,22,8,27,9,0,16,4,4,3,4,,0,15,6,3,3,ngx_int_t
4779,92774,ngx_ssl_get_subject_dn,1,ngx_ssl_get_subject_dn,"ngx_int_t ngx_ssl_get_subject_dn (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_subject_dn(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    BIO        *bio;
    X509       *cert;
    X509_NAME  *name;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    name = X509_get_subject_name(cert);
    if (name == NULL) {
        X509_free(cert);
        return NGX_ERROR;
    }

    bio = BIO_new(BIO_s_mem());
    if (bio == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""BIO_new() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

    if (X509_NAME_print_ex(bio, name, 0, XN_FLAG_RFC2253) < 0) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""X509_NAME_print_ex() failed"");
        goto failed;
    }

    s->len = BIO_pending(bio);
    s->data = ngx_pnalloc(pool, s->len);
    if (s->data == NULL) {
        goto failed;
    }

    BIO_read(bio, s->data, s->len);

    BIO_free(bio);
    X509_free(cert);

    return NGX_OK;

failed:

    ...",4811.0,4862.0,1.0,1.0,52.0,22,4,40,11,0,10,8,6,1,3,,0,8,6,3,3,ngx_int_t
4780,92898,ngx_ssl_get_issuer_dn,1,ngx_ssl_get_issuer_dn,"ngx_int_t ngx_ssl_get_issuer_dn (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_issuer_dn(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    BIO        *bio;
    X509       *cert;
    X509_NAME  *name;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    name = X509_get_issuer_name(cert);
    if (name == NULL) {
        X509_free(cert);
        return NGX_ERROR;
    }

    bio = BIO_new(BIO_s_mem());
    if (bio == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""BIO_new() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

    if (X509_NAME_print_ex(bio, name, 0, XN_FLAG_RFC2253) < 0) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""X509_NAME_print_ex() failed"");
        goto failed;
    }

    s->len = BIO_pending(bio);
    s->data = ngx_pnalloc(pool, s->len);
    if (s->data == NULL) {
        goto failed;
    }

    BIO_read(bio, s->data, s->len);

    BIO_free(bio);
    X509_free(cert);

    return NGX_OK;

failed:

    BI...",4865.0,4916.0,1.0,1.0,52.0,22,4,40,11,0,10,8,6,1,3,,0,8,6,3,3,ngx_int_t
4781,93022,ngx_ssl_get_subject_dn_legacy,1,ngx_ssl_get_subject_dn_legacy,"ngx_int_t ngx_ssl_get_subject_dn_legacy (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_subject_dn_legacy(ngx_connection_t *c, ngx_pool_t *pool,
    ngx_str_t *s)
{
    char       *p;
    size_t      len;
    X509       *cert;
    X509_NAME  *name;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    name = X509_get_subject_name(cert);
    if (name == NULL) {
        X509_free(cert);
        return NGX_ERROR;
    }

    p = X509_NAME_oneline(name, NULL, 0);
    if (p == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""X509_NAME_oneline() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

    for (len = 0; p[len]; len++) { /* void */ }

    s->len = len;
    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        OPENSSL_free(p);
        X509_free(cert);
        return NGX_ERROR;
    }

    ngx_memcpy(s->data, p, len);

    OPENSSL_free(p);
    X509_free(cert);

    return NGX_OK;
}",4919.0,4964.0,1.0,1.0,46.0,20,4,40,11,0,7,6,6,1,2,,0,6,6,3,3,ngx_int_t
4782,93136,ngx_ssl_get_issuer_dn_legacy,1,ngx_ssl_get_issuer_dn_legacy,"ngx_int_t ngx_ssl_get_issuer_dn_legacy (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_issuer_dn_legacy(ngx_connection_t *c, ngx_pool_t *pool,
    ngx_str_t *s)
{
    char       *p;
    size_t      len;
    X509       *cert;
    X509_NAME  *name;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    name = X509_get_issuer_name(cert);
    if (name == NULL) {
        X509_free(cert);
        return NGX_ERROR;
    }

    p = X509_NAME_oneline(name, NULL, 0);
    if (p == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""X509_NAME_oneline() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

    for (len = 0; p[len]; len++) { /* void */ }

    s->len = len;
    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        OPENSSL_free(p);
        X509_free(cert);
        return NGX_ERROR;
    }

    ngx_memcpy(s->data, p, len);

    OPENSSL_free(p);
    X509_free(cert);

    return NGX_OK;
}",4967.0,5012.0,1.0,1.0,46.0,20,4,40,11,0,7,6,6,1,2,,0,6,6,3,3,ngx_int_t
4783,93250,ngx_ssl_get_serial_number,1,ngx_ssl_get_serial_number,"ngx_int_t ngx_ssl_get_serial_number (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_serial_number(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    size_t   len;
    X509    *cert;
    BIO     *bio;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    bio = BIO_new(BIO_s_mem());
    if (bio == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""BIO_new() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

    i2a_ASN1_INTEGER(bio, X509_get_serialNumber(cert));
    len = BIO_pending(bio);

    s->len = len;
    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        BIO_free(bio);
        X509_free(cert);
        return NGX_ERROR;
    }

    BIO_read(bio, s->data, len);
    BIO_free(bio);
    X509_free(cert);

    return NGX_OK;
}",5015.0,5052.0,1.0,1.0,38.0,17,3,33,10,0,7,4,4,1,2,,0,6,6,3,3,ngx_int_t
4784,93345,ngx_ssl_get_fingerprint,1,ngx_ssl_get_fingerprint,"ngx_int_t ngx_ssl_get_fingerprint (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_fingerprint(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    X509          *cert;
    unsigned int   len;
    u_char         buf[EVP_MAX_MD_SIZE];

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    if (!X509_digest(cert, EVP_sha1(), buf, &len)) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""X509_digest() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

    s->len = 2 * len;
    s->data = ngx_pnalloc(pool, 2 * len);
    if (s->data == NULL) {
        X509_free(cert);
        return NGX_ERROR;
    }

    ngx_hex_dump(s->data, buf, len);

    X509_free(cert);

    return NGX_OK;
}",5055.0,5087.0,1.0,1.0,33.0,18,6,27,10,0,8,4,4,1,3,,0,6,6,3,3,ngx_int_t
4785,93432,ngx_ssl_get_client_verify,1,ngx_ssl_get_client_verify,"ngx_int_t ngx_ssl_get_client_verify (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_client_verify(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    X509        *cert;
    long         rc;
    const char  *str;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        ngx_str_set(s, ""NONE"");
        return NGX_OK;
    }

    X509_free(cert);

    rc = SSL_get_verify_result(c->ssl->connection);

    if (rc == X509_V_OK) {
        if (ngx_ssl_ocsp_get_status(c, &str) == NGX_OK) {
            ngx_str_set(s, ""SUCCESS"");
            return NGX_OK;
        }

    } else {
        str = X509_verify_cert_error_string(rc);
    }

    s->data = ngx_pnalloc(pool, sizeof(""FAILED:"") - 1 + ngx_strlen(str));
    if (s->data == NULL) {
        return NGX_ERROR;
    }

    s->len = ngx_sprintf(s->data, ""FAILED:%s"", str) - s->data;

    return NGX_OK;
}",5090.0,5125.0,1.0,1.0,36.0,22,7,27,10,0,8,5,6,2,3,,0,8,6,3,3,ngx_int_t
4786,93532,ngx_ssl_get_client_v_start,1,ngx_ssl_get_client_v_start,"ngx_int_t ngx_ssl_get_client_v_start (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_client_v_start(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    BIO     *bio;
    X509    *cert;
    size_t   len;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    bio = BIO_new(BIO_s_mem());
    if (bio == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""BIO_new() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

#if OPENSSL_VERSION_NUMBER > 0x10100000L
    ASN1_TIME_print(bio, X509_get0_notBefore(cert));
#else
    ASN1_TIME_print(bio, X509_get_notBefore(cert));
#endif

    len = BIO_pending(bio);

    s->len = len;
    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        BIO_free(bio);
        X509_free(cert);
        return NGX_ERROR;
    }

    BIO_read(bio, s->data, len);
    BIO_free(bio);
    X509_free(cert);

    return NGX_OK;
}",5128.0,5170.0,1.0,1.0,43.0,17,3,33,10,0,7,4,4,1,2,,0,6,6,3,3,ngx_int_t
4787,93627,ngx_ssl_get_client_v_end,1,ngx_ssl_get_client_v_end,"ngx_int_t ngx_ssl_get_client_v_end (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_client_v_end(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    BIO     *bio;
    X509    *cert;
    size_t   len;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

    bio = BIO_new(BIO_s_mem());
    if (bio == NULL) {
        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, ""BIO_new() failed"");
        X509_free(cert);
        return NGX_ERROR;
    }

#if OPENSSL_VERSION_NUMBER > 0x10100000L
    ASN1_TIME_print(bio, X509_get0_notAfter(cert));
#else
    ASN1_TIME_print(bio, X509_get_notAfter(cert));
#endif

    len = BIO_pending(bio);

    s->len = len;
    s->data = ngx_pnalloc(pool, len);
    if (s->data == NULL) {
        BIO_free(bio);
        X509_free(cert);
        return NGX_ERROR;
    }

    BIO_read(bio, s->data, len);
    BIO_free(bio);
    X509_free(cert);

    return NGX_OK;
}",5173.0,5215.0,1.0,1.0,43.0,17,3,33,10,0,7,4,4,1,2,,0,6,6,3,3,ngx_int_t
4788,93722,ngx_ssl_get_client_v_remain,1,ngx_ssl_get_client_v_remain,"ngx_int_t ngx_ssl_get_client_v_remain (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",event\ngx_event_openssl.c,"ngx_int_t
ngx_ssl_get_client_v_remain(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
{
    X509    *cert;
    time_t   now, end;

    s->len = 0;

    cert = SSL_get_peer_certificate(c->ssl->connection);
    if (cert == NULL) {
        return NGX_OK;
    }

#if OPENSSL_VERSION_NUMBER > 0x10100000L
    end = ngx_ssl_parse_time(X509_get0_notAfter(cert), c->log);
#else
    end = ngx_ssl_parse_time(X509_get_notAfter(cert), c->log);
#endif

    if (end == (time_t) NGX_ERROR) {
        X509_free(cert);
        return NGX_OK;
    }

    now = ngx_time();

    if (end < now + 86400) {
        ngx_str_set(s, ""0"");
        X509_free(cert);
        return NGX_OK;
    }

    s->data = ngx_pnalloc(pool, NGX_TIME_T_LEN);
    if (s->data == NULL) {
        X509_free(cert);
        return NGX_ERROR;
    }

    s->len = ngx_sprintf(s->data, ""%T"", (end - now) / 86400) - s->data;

    X509_free(cert);

    return NGX_OK;
}",5218.0,5261.0,1.0,1.0,44.0,24,8,33,10,0,9,5,5,1,3,,0,9,6,3,3,ngx_int_t
4789,94158,ngx_ssl_stapling,1,ngx_ssl_stapling,"ngx_int_t ngx_ssl_stapling (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*,ngx_str_t*,ngx_uint_t)",event\ngx_event_openssl_stapling.c,"ngx_int_t
ngx_ssl_stapling(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *file,
    ngx_str_t *responder, ngx_uint_t verify)
{
    ngx_log_error(NGX_LOG_WARN, ssl->log, 0,
                  ""\""ssl_stapling\"" ignored, not supported"");

    return NGX_OK;
}",2713.0,2721.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
4790,94167,ngx_ssl_stapling_resolver,1,ngx_ssl_stapling_resolver,"ngx_int_t ngx_ssl_stapling_resolver (ngx_conf_t*,ngx_ssl_t*,ngx_resolver_t*,ngx_msec_t)",event\ngx_event_openssl_stapling.c,"ngx_int_t
ngx_ssl_stapling_resolver(ngx_conf_t *cf, ngx_ssl_t *ssl,
    ngx_resolver_t *resolver, ngx_msec_t resolver_timeout)
{
    return NGX_OK;
}",2724.0,2729.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
4791,94175,ngx_ssl_ocsp,1,ngx_ssl_ocsp,"ngx_int_t ngx_ssl_ocsp (ngx_conf_t*,ngx_ssl_t*,ngx_str_t*,ngx_uint_t,ngx_shm_zone_t*)",event\ngx_event_openssl_stapling.c,"ngx_int_t
ngx_ssl_ocsp(ngx_conf_t *cf, ngx_ssl_t *ssl, ngx_str_t *responder,
    ngx_uint_t depth, ngx_shm_zone_t *shm_zone)
{
    ngx_log_error(NGX_LOG_EMERG, ssl->log, 0,
                  ""\""ssl_ocsp\"" is not supported on this platform"");

    return NGX_ERROR;
}",2732.0,2740.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
4792,94184,ngx_ssl_ocsp_resolver,1,ngx_ssl_ocsp_resolver,"ngx_int_t ngx_ssl_ocsp_resolver (ngx_conf_t*,ngx_ssl_t*,ngx_resolver_t*,ngx_msec_t)",event\ngx_event_openssl_stapling.c,"ngx_int_t
ngx_ssl_ocsp_resolver(ngx_conf_t *cf, ngx_ssl_t *ssl,
    ngx_resolver_t *resolver, ngx_msec_t resolver_timeout)
{
    return NGX_OK;
}",2743.0,2748.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
4793,94192,ngx_ssl_ocsp_validate,1,ngx_ssl_ocsp_validate,ngx_int_t ngx_ssl_ocsp_validate (ngx_connection_t*),event\ngx_event_openssl_stapling.c,"ngx_int_t
ngx_ssl_ocsp_validate(ngx_connection_t *c)
{
    return NGX_OK;
}",2751.0,2755.0,1.0,1.0,5.0,0,0,0,0,2,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4794,94197,ngx_ssl_ocsp_get_status,1,ngx_ssl_ocsp_get_status,"ngx_int_t ngx_ssl_ocsp_get_status (ngx_connection_t*,char**)",event\ngx_event_openssl_stapling.c,"ngx_int_t
ngx_ssl_ocsp_get_status(ngx_connection_t *c, const char **s)
{
    return NGX_OK;
}",2758.0,2762.0,1.0,1.0,5.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4795,94203,ngx_ssl_ocsp_cleanup,1,ngx_ssl_ocsp_cleanup,void ngx_ssl_ocsp_cleanup (ngx_connection_t*),event\ngx_event_openssl_stapling.c,"void
ngx_ssl_ocsp_cleanup(ngx_connection_t *c)
{
}",2765.0,2768.0,1.0,1.0,4.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
4796,94208,ngx_ssl_ocsp_cache_init,1,ngx_ssl_ocsp_cache_init,"ngx_int_t ngx_ssl_ocsp_cache_init (ngx_shm_zone_t*,void*)",event\ngx_event_openssl_stapling.c,"ngx_int_t
ngx_ssl_ocsp_cache_init(ngx_shm_zone_t *shm_zone, void *data)
{
    return NGX_OK;
}",2771.0,2775.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4797,94641,ngx_event_pipe_read_upstream,1,ngx_event_pipe_read_upstream,ngx_int_t ngx_event_pipe_read_upstream (ngx_event_pipe_t*),event\ngx_event_pipe.c,"static ngx_int_t
ngx_event_pipe_read_upstream(ngx_event_pipe_t *p)
{
    off_t         limit;
    ssize_t       n, size;
    ngx_int_t     rc;
    ngx_buf_t    *b;
    ngx_msec_t    delay;
    ngx_chain_t  *chain, *cl, *ln;

    if (p->upstream_eof || p->upstream_error || p->upstream_done) {
        return NGX_OK;
    }

#if (NGX_THREADS)

    if (p->aio) {
        ngx_log_debug0(NGX_LOG_DEBUG_EVENT, p->log, 0,
                       ""pipe read upstream: aio"");
        return NGX_AGAIN;
    }

    if (p->writing) {
        ngx_log_debug0(NGX_LOG_DEBUG_EVENT, p->log, 0,
                       ""pipe read upstream: writing"");

        rc = ngx_event_pipe_write_chain_to_temp_file(p);

        if (rc != NGX_OK) {
            return rc;
        }
    }

#endif

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, p->log, 0,
                   ""pipe read upstream: %d"", p->upstream->read->ready);

    for ( ;; ) {

        if (p->upstream_eof || p->upstream_error || p->upstream_done) {
            break...",101.0,498.0,1.0,1.0,398.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4798,94646,ngx_event_pipe_write_to_downstream,1,ngx_event_pipe_write_to_downstream,ngx_int_t ngx_event_pipe_write_to_downstream (ngx_event_pipe_t*),event\ngx_event_pipe.c,"static ngx_int_t
ngx_event_pipe_write_to_downstream(ngx_event_pipe_t *p)
{
    u_char            *prev;
    size_t             bsize;
    ngx_int_t          rc;
    ngx_uint_t         flush, flushed, prev_last_shadow;
    ngx_chain_t       *out, **ll, *cl;
    ngx_connection_t  *downstream;

    downstream = p->downstream;

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, p->log, 0,
                   ""pipe write downstream: %d"", downstream->write->ready);

#if (NGX_THREADS)

    if (p->writing) {
        rc = ngx_event_pipe_write_chain_to_temp_file(p);

        if (rc == NGX_ABORT) {
            return NGX_ABORT;
        }
    }

#endif

    flushed = 0;

    for ( ;; ) {
        if (p->downstream_error) {
            return ngx_event_pipe_drain_chains(p);
        }

        if (p->upstream_eof || p->upstream_error || p->upstream_done) {

            /* pass the p->out and p->in chains to the output filter */

            for (cl = p->busy; cl; cl = cl->next) {
                cl->buf->recy...",501.0,734.0,1.0,1.0,234.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4799,94651,ngx_event_pipe_write_chain_to_temp_file,1,ngx_event_pipe_write_chain_to_temp_file,ngx_int_t ngx_event_pipe_write_chain_to_temp_file (ngx_event_pipe_t*),event\ngx_event_pipe.c,"static ngx_int_t
ngx_event_pipe_write_chain_to_temp_file(ngx_event_pipe_t *p)
{
    ssize_t       size, bsize, n;
    ngx_buf_t    *b;
    ngx_uint_t    prev_last_shadow;
    ngx_chain_t  *cl, *tl, *next, *out, **ll, **last_out, **last_free;

#if (NGX_THREADS)

    if (p->writing) {

        if (p->aio) {
            return NGX_AGAIN;
        }

        out = p->writing;
        p->writing = NULL;

        n = ngx_write_chain_to_temp_file(p->temp_file, NULL);

        if (n == NGX_ERROR) {
            return NGX_ABORT;
        }

        goto done;
    }

#endif

    if (p->buf_to_file) {
        out = ngx_alloc_chain_link(p->pool);
        if (out == NULL) {
            return NGX_ABORT;
        }

        out->buf = p->buf_to_file;
        out->next = p->in;

    } else {
        out = p->in;
    }

    if (!p->cacheable) {

        size = 0;
        cl = out;
        ll = NULL;
        prev_last_shadow = 1;

        ngx_log_debug1(NGX_LOG_DEBUG_EVENT, p->log, 0,
                 ...",737.0,948.0,1.0,1.0,212.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4800,94657,ngx_event_pipe_drain_chains,1,ngx_event_pipe_drain_chains,ngx_int_t ngx_event_pipe_drain_chains (ngx_event_pipe_t*),event\ngx_event_pipe.c,"static ngx_int_t
ngx_event_pipe_drain_chains(ngx_event_pipe_t *p)
{
    ngx_chain_t  *cl, *tl;

    for ( ;; ) {
        if (p->busy) {
            cl = p->busy;
            p->busy = NULL;

        } else if (p->out) {
            cl = p->out;
            p->out = NULL;

        } else if (p->in) {
            cl = p->in;
            p->in = NULL;

        } else {
            return NGX_OK;
        }

        while (cl) {
            if (cl->buf->last_shadow) {
                if (ngx_event_pipe_add_free_buf(p, cl->buf->shadow) != NGX_OK) {
                    return NGX_ABORT;
                }

                cl->buf->last_shadow = 0;
            }

            cl->buf->shadow = NULL;
            tl = cl->next;
            cl->next = p->free;
            p->free = cl;
            cl = tl;
        }
    }
}",1104.0,1142.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4801,94662,ngx_event_pipe,1,ngx_event_pipe,"ngx_int_t ngx_event_pipe (ngx_event_pipe_t*,ngx_int_t)",event\ngx_event_pipe.c,"ngx_int_t
ngx_event_pipe(ngx_event_pipe_t *p, ngx_int_t do_write)
{
    ngx_int_t     rc;
    ngx_uint_t    flags;
    ngx_event_t  *rev, *wev;

    for ( ;; ) {
        if (do_write) {
            p->log->action = ""sending to client"";

            rc = ngx_event_pipe_write_to_downstream(p);

            if (rc == NGX_ABORT) {
                return NGX_ABORT;
            }

            if (rc == NGX_BUSY) {
                return NGX_OK;
            }
        }

        p->read = 0;
        p->upstream_blocked = 0;

        p->log->action = ""reading upstream"";

        if (ngx_event_pipe_read_upstream(p) == NGX_ABORT) {
            return NGX_ABORT;
        }

        if (!p->read && !p->upstream_blocked) {
            break;
        }

        do_write = 1;
    }

    if (p->upstream->fd != (ngx_socket_t) -1) {
        rev = p->upstream->read;

        flags = (rev->eof || rev->error) ? NGX_CLOSE_EVENT : 0;

        if (ngx_handle_read_event(rev, flags) != NGX_OK) {
            re...",22.0,98.0,1.0,1.0,77.0,61,9,52,11,0,4,16,30,3,4,,0,4,4,2,2,ngx_int_t
4802,96997,ngx_event_pipe_copy_input_filter,1,ngx_event_pipe_copy_input_filter,"ngx_int_t ngx_event_pipe_copy_input_filter (ngx_event_pipe_t*,ngx_buf_t*)",event\ngx_event_pipe.c,"ngx_int_t
ngx_event_pipe_copy_input_filter(ngx_event_pipe_t *p, ngx_buf_t *buf)
{
    ngx_buf_t    *b;
    ngx_chain_t  *cl;

    if (buf->pos == buf->last) {
        return NGX_OK;
    }

    if (p->upstream_done) {
        ngx_log_debug0(NGX_LOG_DEBUG_EVENT, p->log, 0,
                       ""input data after close"");
        return NGX_OK;
    }

    if (p->length == 0) {
        p->upstream_done = 1;

        ngx_log_error(NGX_LOG_WARN, p->log, 0,
                      ""upstream sent more data than specified in ""
                      ""\""Content-Length\"" header"");

        return NGX_OK;
    }

    cl = ngx_chain_get_free_buf(p->pool, &p->free);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    b = cl->buf;

    ngx_memcpy(b, buf, sizeof(ngx_buf_t));
    b->shadow = buf;
    b->tag = p->tag;
    b->last_shadow = 1;
    b->recycled = 1;
    buf->shadow = b;

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, p->log, 0, ""input buf #%d"", b->num);

    if (p->in) {
        *p->last_in...",953.0,1021.0,1.0,1.0,69.0,60,11,55,10,0,3,8,8,0,3,,0,1,4,2,2,ngx_int_t
4803,97203,ngx_event_pipe_add_free_buf,1,ngx_event_pipe_add_free_buf,"ngx_int_t ngx_event_pipe_add_free_buf (ngx_event_pipe_t*,ngx_buf_t*)",event\ngx_event_pipe.c,"ngx_int_t
ngx_event_pipe_add_free_buf(ngx_event_pipe_t *p, ngx_buf_t *b)
{
    ngx_chain_t  *cl;

    cl = ngx_alloc_chain_link(p->pool);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    if (p->buf_to_file && b->start == p->buf_to_file->start) {
        b->pos = p->buf_to_file->last;
        b->last = p->buf_to_file->last;

    } else {
        b->pos = b->start;
        b->last = b->start;
    }

    b->shadow = NULL;

    cl->buf = b;

    if (p->free_raw_bufs == NULL) {
        p->free_raw_bufs = cl;
        cl->next = NULL;

        return NGX_OK;
    }

    if (p->free_raw_bufs->buf->pos == p->free_raw_bufs->buf->last) {

        /* add the free buf to the list start */

        cl->next = p->free_raw_bufs;
        p->free_raw_bufs = cl;

        return NGX_OK;
    }

    /* the first free buf is partially filled, thus add the free buf after it */

    cl->next = p->free_raw_bufs->next;
    p->free_raw_bufs->next = cl;

    return NGX_OK;
}",1055.0,1101.0,1.0,1.0,47.0,46,4,35,6,0,1,5,5,0,1,,0,1,4,2,2,ngx_int_t
4804,97483,ngx_event_pipe_input_filter_pt,1,ngx_event_pipe_input_filter_pt,"ngx_int_t ngx_event_pipe_input_filter_pt (ngx_event_pipe_t*,ngx_buf_t*)",event\ngx_event_pipe.h,"typedef ngx_int_t (*ngx_event_pipe_input_filter_pt)(ngx_event_pipe_t *p,
                                                    ngx_buf_t *buf);",19.0,20.0,19.0,67.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4805,97489,ngx_event_pipe_output_filter_pt,1,ngx_event_pipe_output_filter_pt,"ngx_int_t ngx_event_pipe_output_filter_pt (void*,ngx_chain_t*)",event\ngx_event_pipe.h,"typedef ngx_int_t (*ngx_event_pipe_output_filter_pt)(void *data,
                                                     ngx_chain_t *chain);",21.0,22.0,19.0,72.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4806,97509,thread_handler,1,ngx_event_pipe_s.thread_handler,"ngx_int_t ngx_event_pipe_s.thread_handler (ngx_thread_task_t*,ngx_file_t*)",event\ngx_event_pipe.h,"ngx_int_t                       (*thread_handler)(ngx_thread_task_t *task,
                                                      ngx_file_t *file);",51.0,52.0,37.0,71.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4807,97581,ngx_event_process_posted,1,ngx_event_process_posted,"void ngx_event_process_posted (ngx_cycle_t*,ngx_queue_t*)",event\ngx_event_posted.c,"void
ngx_event_process_posted(ngx_cycle_t *cycle, ngx_queue_t *posted)
{
    ngx_queue_t  *q;
    ngx_event_t  *ev;

    while (!ngx_queue_empty(posted)) {

        q = ngx_queue_head(posted);
        ev = ngx_queue_data(q, ngx_event_t, queue);

        ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                      ""posted event %p"", ev);

        ngx_delete_posted_event(ev);

        ev->handler(ev);
    }
}",18.0,36.0,1.0,1.0,19.0,5,3,13,7,2,0,2,2,0,0,,0,0,4,2,2,void
4808,97619,ngx_event_move_posted_next,1,ngx_event_move_posted_next,void ngx_event_move_posted_next (ngx_cycle_t*),event\ngx_event_posted.c,"void
ngx_event_move_posted_next(ngx_cycle_t *cycle)
{
    ngx_queue_t  *q;
    ngx_event_t  *ev;

    for (q = ngx_queue_head(&ngx_posted_next_events);
         q != ngx_queue_sentinel(&ngx_posted_next_events);
         q = ngx_queue_next(q))
    {
        ev = ngx_queue_data(q, ngx_event_t, queue);

        ngx_log_debug1(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                      ""posted next event %p"", ev);

        ev->ready = 1;
        ev->available = -1;
    }

    ngx_queue_add(&ngx_posted_events, &ngx_posted_next_events);
    ngx_queue_init(&ngx_posted_next_events);
}",39.0,60.0,1.0,1.0,22.0,14,5,16,8,1,5,2,2,1,0,,0,5,2,1,1,void
4809,97714,ngx_event_timer_init,1,ngx_event_timer_init,ngx_int_t ngx_event_timer_init (ngx_log_t*),event\ngx_event_timer.c,"ngx_int_t
ngx_event_timer_init(ngx_log_t *log)
{
    ngx_rbtree_init(&ngx_event_timer_rbtree, &ngx_event_timer_sentinel,
                    ngx_rbtree_insert_timer_value);

    return NGX_OK;
}",22.0,29.0,1.0,1.0,8.0,2,1,4,4,0,2,1,1,0,0,,0,2,2,1,1,ngx_int_t
4810,97727,ngx_event_find_timer,1,ngx_event_find_timer,ngx_msec_t ngx_event_find_timer (void),event\ngx_event_timer.c,"ngx_msec_t
ngx_event_find_timer(void)
{
    ngx_msec_int_t      timer;
    ngx_rbtree_node_t  *node, *root, *sentinel;

    if (ngx_event_timer_rbtree.root == &ngx_event_timer_sentinel) {
        return NGX_TIMER_INFINITE;
    }

    root = ngx_event_timer_rbtree.root;
    sentinel = ngx_event_timer_rbtree.sentinel;

    node = ngx_rbtree_min(root, sentinel);

    timer = (ngx_msec_int_t) (node->key - ngx_current_msec);

    return (ngx_msec_t) (timer > 0 ? timer : 0);
}",32.0,50.0,1.0,1.0,19.0,13,8,15,8,0,4,2,2,2,0,,0,4,2,1,1,ngx_msec_t
4811,97777,ngx_event_expire_timers,1,ngx_event_expire_timers,void ngx_event_expire_timers (void),event\ngx_event_timer.c,"void
ngx_event_expire_timers(void)
{
    ngx_event_t        *ev;
    ngx_rbtree_node_t  *node, *root, *sentinel;

    sentinel = ngx_event_timer_rbtree.sentinel;

    for ( ;; ) {
        root = ngx_event_timer_rbtree.root;

        if (root == sentinel) {
            return;
        }

        node = ngx_rbtree_min(root, sentinel);

        /* node->key > ngx_current_msec */

        if ((ngx_msec_int_t) (node->key - ngx_current_msec) > 0) {
            return;
        }

        ev = ngx_rbtree_data(node, ngx_event_t, timer);

        ngx_log_debug2(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                       ""event timer del: %d: %M"",
                       ngx_event_ident(ev->data), ev->timer.key);

        ngx_rbtree_delete(&ngx_event_timer_rbtree, &ev->timer);

#if (NGX_DEBUG)
        ev->timer.left = NULL;
        ev->timer.right = NULL;
        ev->timer.parent = NULL;
#endif

        ev->timer_set = 0;

        ev->timedout = 1;

        ev->handler(ev);
    }
}",53.0,96.0,1.0,1.0,44.0,22,7,25,9,1,4,4,6,0,1,,0,3,2,1,1,void
4812,97865,ngx_event_no_timers_left,1,ngx_event_no_timers_left,ngx_int_t ngx_event_no_timers_left (void),event\ngx_event_timer.c,"ngx_int_t
ngx_event_no_timers_left(void)
{
    ngx_event_t        *ev;
    ngx_rbtree_node_t  *node, *root, *sentinel;

    sentinel = ngx_event_timer_rbtree.sentinel;
    root = ngx_event_timer_rbtree.root;

    if (root == sentinel) {
        return NGX_OK;
    }

    for (node = ngx_rbtree_min(root, sentinel);
         node;
         node = ngx_rbtree_next(&ngx_event_timer_rbtree, node))
    {
        ev = ngx_rbtree_data(node, ngx_event_t, timer);

        if (!ev->cancelable) {
            return NGX_AGAIN;
        }
    }

    /* only cancelable timers left */

    return NGX_OK;
}",99.0,126.0,1.0,1.0,28.0,9,5,18,9,0,2,4,5,0,0,,0,2,2,1,1,ngx_int_t
4813,97971,ngx_close_accepted_udp_connection,1,ngx_close_accepted_udp_connection,void ngx_close_accepted_udp_connection (ngx_connection_t*),event\ngx_event_udp.c,"static void
ngx_close_accepted_udp_connection(ngx_connection_t *c)
{
    ngx_free_connection(c);

    c->fd = (ngx_socket_t) -1;

    if (c->pool) {
        ngx_destroy_pool(c->pool);
    }

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
#endif
}",428.0,442.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4814,97976,ngx_udp_shared_recv,1,ngx_udp_shared_recv,"ssize_t ngx_udp_shared_recv (ngx_connection_t*,u_char*,size_t)",event\ngx_event_udp.c,"static ssize_t
ngx_udp_shared_recv(ngx_connection_t *c, u_char *buf, size_t size)
{
    ssize_t     n;
    ngx_buf_t  *b;

    if (c->udp == NULL || c->udp->buffer == NULL) {
        return NGX_AGAIN;
    }

    b = c->udp->buffer;

    n = ngx_min(b->last - b->pos, (ssize_t) size);

    ngx_memcpy(buf, b->pos, n);

    c->udp->buffer = NULL;

    c->read->ready = 0;
    c->read->active = 1;

    return n;
}",445.0,467.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
4815,97983,ngx_insert_udp_connection,1,ngx_insert_udp_connection,ngx_int_t ngx_insert_udp_connection (ngx_connection_t*),event\ngx_event_udp.c,"static ngx_int_t
ngx_insert_udp_connection(ngx_connection_t *c)
{
    uint32_t               hash;
    ngx_pool_cleanup_t    *cln;
    ngx_udp_connection_t  *udp;

    if (c->udp) {
        return NGX_OK;
    }

    udp = ngx_pcalloc(c->pool, sizeof(ngx_udp_connection_t));
    if (udp == NULL) {
        return NGX_ERROR;
    }

    udp->connection = c;

    ngx_crc32_init(hash);
    ngx_crc32_update(&hash, (u_char *) c->sockaddr, c->socklen);

    if (c->listening->wildcard) {
        ngx_crc32_update(&hash, (u_char *) c->local_sockaddr, c->local_socklen);
    }

    ngx_crc32_final(hash);

    udp->node.key = hash;

    cln = ngx_pool_cleanup_add(c->pool, 0);
    if (cln == NULL) {
        return NGX_ERROR;
    }

    cln->data = c;
    cln->handler = ngx_delete_udp_connection;

    ngx_rbtree_insert(&c->listening->rbtree, &udp->node);

    c->udp = udp;

    return NGX_OK;
}",523.0,565.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4816,97988,ngx_lookup_udp_connection,1,ngx_lookup_udp_connection,"ngx_connection_t* ngx_lookup_udp_connection (ngx_listening_t*,sockaddr*,socklen_t,sockaddr*,socklen_t)",event\ngx_event_udp.c,"static ngx_connection_t *
ngx_lookup_udp_connection(ngx_listening_t *ls, struct sockaddr *sockaddr,
    socklen_t socklen, struct sockaddr *local_sockaddr, socklen_t local_socklen)
{
    uint32_t               hash;
    ngx_int_t              rc;
    ngx_connection_t      *c;
    ngx_rbtree_node_t     *node, *sentinel;
    ngx_udp_connection_t  *udp;

#if (NGX_HAVE_UNIX_DOMAIN)

    if (sockaddr->sa_family == AF_UNIX) {
        struct sockaddr_un *saun = (struct sockaddr_un *) sockaddr;

        if (socklen <= (socklen_t) offsetof(struct sockaddr_un, sun_path)
            || saun->sun_path[0] == '\0')
        {
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, ngx_cycle->log, 0,
                           ""unbound unix socket"");
            return NULL;
        }
    }

#endif

    node = ls->rbtree.root;
    sentinel = ls->rbtree.sentinel;

    ngx_crc32_init(hash);
    ngx_crc32_update(&hash, (u_char *) sockaddr, socklen);

    if (ls->wildcard) {
        ngx_crc32_update(&hash, (u_...",583.0,655.0,1.0,1.0,73.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ngx_connection_t
4817,99243,ngx_http_access_handler,1,ngx_http_access_handler,ngx_int_t ngx_http_access_handler (ngx_http_request_t*),http\modules\ngx_http_access_module.c,"static ngx_int_t
ngx_http_access_handler(ngx_http_request_t *r)
{
    struct sockaddr_in          *sin;
    ngx_http_access_loc_conf_t  *alcf;
#if (NGX_HAVE_INET6)
    u_char                      *p;
    in_addr_t                    addr;
    struct sockaddr_in6         *sin6;
#endif

    alcf = ngx_http_get_module_loc_conf(r, ngx_http_access_module);

    switch (r->connection->sockaddr->sa_family) {

    case AF_INET:
        if (alcf->rules) {
            sin = (struct sockaddr_in *) r->connection->sockaddr;
            return ngx_http_access_inet(r, alcf, sin->sin_addr.s_addr);
        }
        break;

#if (NGX_HAVE_INET6)

    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) r->connection->sockaddr;
        p = sin6->sin6_addr.s6_addr;

        if (alcf->rules && IN6_IS_ADDR_V4MAPPED(&sin6->sin6_addr)) {
            addr = p[12] << 24;
            addr += p[13] << 16;
            addr += p[14] << 8;
            addr += p[15];
            return ngx_http_access_inet(r, alc...",122.0,179.0,1.0,1.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4818,99248,ngx_http_access_inet,1,ngx_http_access_inet,"ngx_int_t ngx_http_access_inet (ngx_http_request_t*,ngx_http_access_loc_conf_t*,in_addr_t)",http\modules\ngx_http_access_module.c,"static ngx_int_t
ngx_http_access_inet(ngx_http_request_t *r, ngx_http_access_loc_conf_t *alcf,
    in_addr_t addr)
{
    ngx_uint_t               i;
    ngx_http_access_rule_t  *rule;

    rule = alcf->rules->elts;
    for (i = 0; i < alcf->rules->nelts; i++) {

        ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""access: %08XD %08XD %08XD"",
                       addr, rule[i].mask, rule[i].addr);

        if ((addr & rule[i].mask) == rule[i].addr) {
            return ngx_http_access_found(r, rule[i].deny);
        }
    }

    return NGX_DECLINED;
}",182.0,202.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4819,99255,ngx_http_access_found,1,ngx_http_access_found,"ngx_int_t ngx_http_access_found (ngx_http_request_t*,ngx_uint_t)",http\modules\ngx_http_access_module.c,"static ngx_int_t
ngx_http_access_found(ngx_http_request_t *r, ngx_uint_t deny)
{
    ngx_http_core_loc_conf_t  *clcf;

    if (deny) {
        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

        if (clcf->satisfy == NGX_HTTP_SATISFY_ALL) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""access forbidden by rule"");
        }

        return NGX_HTTP_FORBIDDEN;
    }

    return NGX_OK;
}",275.0,292.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4820,99261,ngx_http_access_rule,1,ngx_http_access_rule,"char* ngx_http_access_rule (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_access_module.c,"static char *
ngx_http_access_rule(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_access_loc_conf_t *alcf = conf;

    ngx_int_t                   rc;
    ngx_uint_t                  all;
    ngx_str_t                  *value;
    ngx_cidr_t                  cidr;
    ngx_http_access_rule_t     *rule;
#if (NGX_HAVE_INET6)
    ngx_http_access_rule6_t    *rule6;
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
    ngx_http_access_rule_un_t  *rule_un;
#endif

    all = 0;
    ngx_memzero(&cidr, sizeof(ngx_cidr_t));

    value = cf->args->elts;

    if (value[1].len == 3 && ngx_strcmp(value[1].data, ""all"") == 0) {
        all = 1;

#if (NGX_HAVE_UNIX_DOMAIN)
    } else if (value[1].len == 5 && ngx_strcmp(value[1].data, ""unix:"") == 0) {
        cidr.family = AF_UNIX;
#endif

    } else {
        rc = ngx_ptocidr(&value[1], &cidr);

        if (rc == NGX_ERROR) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                         ""invalid parameter \""%V\"""", &value[1]);
        ...",295.0,403.0,1.0,1.0,109.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4821,99268,ngx_http_access_create_loc_conf,1,ngx_http_access_create_loc_conf,void* ngx_http_access_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_access_module.c,"static void *
ngx_http_access_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_access_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_access_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    return conf;
}",406.0,417.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4822,99273,ngx_http_access_merge_loc_conf,1,ngx_http_access_merge_loc_conf,"char* ngx_http_access_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_access_module.c,"static char *
ngx_http_access_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_access_loc_conf_t  *prev = parent;
    ngx_http_access_loc_conf_t  *conf = child;

    if (conf->rules == NULL
#if (NGX_HAVE_INET6)
        && conf->rules6 == NULL
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
        && conf->rules_un == NULL
#endif
    ) {
        conf->rules = prev->rules;
#if (NGX_HAVE_INET6)
        conf->rules6 = prev->rules6;
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
        conf->rules_un = prev->rules_un;
#endif
    }

    return NGX_CONF_OK;
}",420.0,444.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4823,99280,ngx_http_access_init,1,ngx_http_access_init,ngx_int_t ngx_http_access_init (ngx_conf_t*),http\modules\ngx_http_access_module.c,"static ngx_int_t
ngx_http_access_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_ACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_access_handler;

    return NGX_OK;
}",447.0,463.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4824,99804,ngx_http_addition_create_conf,1,ngx_http_addition_create_conf,void* ngx_http_addition_create_conf (ngx_conf_t*),http\modules\ngx_http_addition_filter_module.c,"static void *
ngx_http_addition_create_conf(ngx_conf_t *cf)
{
    ngx_http_addition_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_addition_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->before_body = { 0, NULL };
     *     conf->after_body = { 0, NULL };
     *     conf->types = { NULL };
     *     conf->types_keys = NULL;
     */

    return conf;
}",213.0,233.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4825,99809,ngx_http_addition_merge_conf,1,ngx_http_addition_merge_conf,"char* ngx_http_addition_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_addition_filter_module.c,"static char *
ngx_http_addition_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_addition_conf_t *prev = parent;
    ngx_http_addition_conf_t *conf = child;

    ngx_conf_merge_str_value(conf->before_body, prev->before_body, """");
    ngx_conf_merge_str_value(conf->after_body, prev->after_body, """");

    if (ngx_http_merge_types(cf, &conf->types_keys, &conf->types,
                             &prev->types_keys, &prev->types,
                             ngx_http_html_default_types)
        != NGX_OK)
    {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",236.0,254.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4826,99816,ngx_http_addition_filter_init,1,ngx_http_addition_filter_init,ngx_int_t ngx_http_addition_filter_init (ngx_conf_t*),http\modules\ngx_http_addition_filter_module.c,"static ngx_int_t
ngx_http_addition_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_addition_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_addition_body_filter;

    return NGX_OK;
}",200.0,210.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4827,99908,ngx_http_addition_header_filter,1,ngx_http_addition_header_filter,ngx_int_t ngx_http_addition_header_filter (ngx_http_request_t*),http\modules\ngx_http_addition_filter_module.c,"static ngx_int_t
ngx_http_addition_header_filter(ngx_http_request_t *r)
{
    ngx_http_addition_ctx_t   *ctx;
    ngx_http_addition_conf_t  *conf;

    if (r->headers_out.status != NGX_HTTP_OK || r != r->main) {
        return ngx_http_next_header_filter(r);
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_addition_filter_module);

    if (conf->before_body.len == 0 && conf->after_body.len == 0) {
        return ngx_http_next_header_filter(r);
    }

    if (ngx_http_test_content_type(r, &conf->types) == NULL) {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_addition_ctx_t));
    if (ctx == NULL) {
        return NGX_ERROR;
    }

    ngx_http_set_ctx(r, ctx, ngx_http_addition_filter_module);

    ngx_http_clear_content_length(r);
    ngx_http_clear_accept_ranges(r);
    ngx_http_weak_etag(r);

    r->preserve_body = 1;

    return ngx_http_next_header_filter(r);
}",95.0,129.0,1.0,1.0,35.0,23,9,29,8,0,9,5,5,4,3,,0,8,2,1,1,ngx_int_t
4828,100004,ngx_http_addition_body_filter,1,ngx_http_addition_body_filter,"ngx_int_t ngx_http_addition_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_addition_filter_module.c,"static ngx_int_t
ngx_http_addition_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t                  rc;
    ngx_uint_t                 last;
    ngx_chain_t               *cl;
    ngx_http_request_t        *sr;
    ngx_http_addition_ctx_t   *ctx;
    ngx_http_addition_conf_t  *conf;

    if (in == NULL || r->header_only) {
        return ngx_http_next_body_filter(r, in);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_addition_filter_module);

    if (ctx == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_addition_filter_module);

    if (!ctx->before_body_sent) {
        ctx->before_body_sent = 1;

        if (conf->before_body.len) {
            if (ngx_http_subrequest(r, &conf->before_body, NULL, &sr, NULL, 0)
                != NGX_OK)
            {
                return NGX_ERROR;
            }
        }
    }

    if (conf->after_body.len == 0) {
        ngx_http_set_ctx(r, NULL, ngx_...",132.0,197.0,1.0,1.0,66.0,45,8,60,13,0,14,11,15,8,3,,0,13,4,2,2,ngx_int_t
4829,100311,ngx_http_auth_basic_handler,1,ngx_http_auth_basic_handler,ngx_int_t ngx_http_auth_basic_handler (ngx_http_request_t*),http\modules\ngx_http_auth_basic_module.c,"static ngx_int_t
ngx_http_auth_basic_handler(ngx_http_request_t *r)
{
    off_t                            offset;
    ssize_t                          n;
    ngx_fd_t                         fd;
    ngx_int_t                        rc;
    ngx_err_t                        err;
    ngx_str_t                        pwd, realm, user_file;
    ngx_uint_t                       i, level, login, left, passwd;
    ngx_file_t                       file;
    ngx_http_auth_basic_loc_conf_t  *alcf;
    u_char                           buf[NGX_HTTP_AUTH_BUF_SIZE];
    enum {
        sw_login,
        sw_passwd,
        sw_skip
    } state;

    alcf = ngx_http_get_module_loc_conf(r, ngx_http_auth_basic_module);

    if (alcf->realm == NULL || alcf->user_file == NULL) {
        return NGX_DECLINED;
    }

    if (ngx_http_complex_value(r, alcf->realm, &realm) != NGX_OK) {
        return NGX_ERROR;
    }

    if (realm.len == 3 && ngx_strncmp(realm.data, ""off"", 3) == 0) {
        return NGX_DECLI...",89.0,281.0,1.0,41.0,193.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4830,100316,ngx_http_auth_basic_crypt_handler,1,ngx_http_auth_basic_crypt_handler,"ngx_int_t ngx_http_auth_basic_crypt_handler (ngx_http_request_t*,ngx_str_t*,ngx_str_t*)",http\modules\ngx_http_auth_basic_module.c,"static ngx_int_t
ngx_http_auth_basic_crypt_handler(ngx_http_request_t *r, ngx_str_t *passwd,
    ngx_str_t *realm)
{
    ngx_int_t   rc;
    u_char     *encrypted;

    rc = ngx_crypt(r->pool, r->headers_in.passwd.data, passwd->data,
                   &encrypted);

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""rc: %i user: \""%V\"" salt: \""%s\"""",
                   rc, &r->headers_in.user, passwd->data);

    if (rc != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    if (ngx_strcmp(encrypted, passwd->data) == 0) {
        return NGX_OK;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""encrypted: \""%s\"""", encrypted);

    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                  ""user \""%V\"": password mismatch"",
                  &r->headers_in.user);

    return ngx_http_auth_basic_set_realm(r, realm);
}",284.0,314.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4831,100323,ngx_http_auth_basic_set_realm,1,ngx_http_auth_basic_set_realm,"ngx_int_t ngx_http_auth_basic_set_realm (ngx_http_request_t*,ngx_str_t*)",http\modules\ngx_http_auth_basic_module.c,"static ngx_int_t
ngx_http_auth_basic_set_realm(ngx_http_request_t *r, ngx_str_t *realm)
{
    size_t   len;
    u_char  *basic, *p;

    r->headers_out.www_authenticate = ngx_list_push(&r->headers_out.headers);
    if (r->headers_out.www_authenticate == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    len = sizeof(""Basic realm=\""\"""") - 1 + realm->len;

    basic = ngx_pnalloc(r->pool, len);
    if (basic == NULL) {
        r->headers_out.www_authenticate->hash = 0;
        r->headers_out.www_authenticate = NULL;
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    p = ngx_cpymem(basic, ""Basic realm=\"""", sizeof(""Basic realm=\"""") - 1);
    p = ngx_cpymem(p, realm->data, realm->len);
    *p = '""';

    r->headers_out.www_authenticate->hash = 1;
    ngx_str_set(&r->headers_out.www_authenticate->key, ""WWW-Authenticate"");
    r->headers_out.www_authenticate->value.data = basic;
    r->headers_out.www_authenticate->value.len = len;

    return NGX_HTTP_UNAUTHORIZED;
}",317.0,347.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4832,100329,ngx_http_auth_basic_create_loc_conf,1,ngx_http_auth_basic_create_loc_conf,void* ngx_http_auth_basic_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_auth_basic_module.c,"static void *
ngx_http_auth_basic_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_auth_basic_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_auth_basic_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->realm = NGX_CONF_UNSET_PTR;
    conf->user_file = NGX_CONF_UNSET_PTR;

    return conf;
}",350.0,364.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4833,100334,ngx_http_auth_basic_merge_loc_conf,1,ngx_http_auth_basic_merge_loc_conf,"char* ngx_http_auth_basic_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_auth_basic_module.c,"static char *
ngx_http_auth_basic_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_auth_basic_loc_conf_t  *prev = parent;
    ngx_http_auth_basic_loc_conf_t  *conf = child;

    ngx_conf_merge_ptr_value(conf->realm, prev->realm, NULL);
    ngx_conf_merge_ptr_value(conf->user_file, prev->user_file, NULL);

    return NGX_CONF_OK;
}",367.0,377.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4834,100341,ngx_http_auth_basic_init,1,ngx_http_auth_basic_init,ngx_int_t ngx_http_auth_basic_init (ngx_conf_t*),http\modules\ngx_http_auth_basic_module.c,"static ngx_int_t
ngx_http_auth_basic_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_ACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_auth_basic_handler;

    return NGX_OK;
}",380.0,396.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4835,100346,ngx_http_auth_basic_user_file,1,ngx_http_auth_basic_user_file,"char* ngx_http_auth_basic_user_file (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_auth_basic_module.c,"static char *
ngx_http_auth_basic_user_file(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_auth_basic_loc_conf_t *alcf = conf;

    ngx_str_t                         *value;
    ngx_http_compile_complex_value_t   ccv;

    if (alcf->user_file != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    alcf->user_file = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
    if (alcf->user_file == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = alcf->user_file;
    ccv.zero = 1;
    ccv.conf_prefix = 1;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",399.0,431.0,1.0,1.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4836,101388,ngx_http_auth_request_handler,1,ngx_http_auth_request_handler,ngx_int_t ngx_http_auth_request_handler (ngx_http_request_t*),http\modules\ngx_http_auth_request_module.c,"static ngx_int_t
ngx_http_auth_request_handler(ngx_http_request_t *r)
{
    ngx_table_elt_t               *h, *ho;
    ngx_http_request_t            *sr;
    ngx_http_post_subrequest_t    *ps;
    ngx_http_auth_request_ctx_t   *ctx;
    ngx_http_auth_request_conf_t  *arcf;

    arcf = ngx_http_get_module_loc_conf(r, ngx_http_auth_request_module);

    if (arcf->uri.len == 0) {
        return NGX_DECLINED;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""auth request handler"");

    ctx = ngx_http_get_module_ctx(r, ngx_http_auth_request_module);

    if (ctx != NULL) {
        if (!ctx->done) {
            return NGX_AGAIN;
        }

        /*
         * as soon as we are done - explicitly set variables to make
         * sure they will be available after internal redirects
         */

        if (ngx_http_auth_request_set_variables(r, arcf, ctx) != NGX_OK) {
            return NGX_ERROR;
        }

        /* return appropriate status */

 ...",101.0,213.0,1.0,1.0,113.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4837,101393,ngx_http_auth_request_done,1,ngx_http_auth_request_done,"ngx_int_t ngx_http_auth_request_done (ngx_http_request_t*,void*,ngx_int_t)",http\modules\ngx_http_auth_request_module.c,"static ngx_int_t
ngx_http_auth_request_done(ngx_http_request_t *r, void *data, ngx_int_t rc)
{
    ngx_http_auth_request_ctx_t   *ctx = data;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""auth request done s:%ui"", r->headers_out.status);

    ctx->done = 1;
    ctx->status = r->headers_out.status;

    return rc;
}",216.0,228.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4838,101400,ngx_http_auth_request_set_variables,1,ngx_http_auth_request_set_variables,"ngx_int_t ngx_http_auth_request_set_variables (ngx_http_request_t*,ngx_http_auth_request_conf_t*,ngx_http_auth_request_ctx_t*)",http\modules\ngx_http_auth_request_module.c,"static ngx_int_t
ngx_http_auth_request_set_variables(ngx_http_request_t *r,
    ngx_http_auth_request_conf_t *arcf, ngx_http_auth_request_ctx_t *ctx)
{
    ngx_str_t                          val;
    ngx_http_variable_t               *v;
    ngx_http_variable_value_t         *vv;
    ngx_http_auth_request_variable_t  *av, *last;
    ngx_http_core_main_conf_t         *cmcf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""auth request set variables"");

    if (arcf->vars == NULL) {
        return NGX_OK;
    }

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
    v = cmcf->variables.elts;

    av = arcf->vars->elts;
    last = av + arcf->vars->nelts;

    while (av < last) {
        /*
         * explicitly set new value to make sure it will be available after
         * internal redirects
         */

        vv = &r->variables[av->index];

        if (ngx_http_complex_value(ctx->subrequest, &av->value, &val)
            != NGX_OK)...",231.0,286.0,1.0,1.0,56.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4839,101407,ngx_http_auth_request_variable,1,ngx_http_auth_request_variable,"ngx_int_t ngx_http_auth_request_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_auth_request_module.c,"static ngx_int_t
ngx_http_auth_request_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""auth request variable"");

    v->not_found = 1;

    return NGX_OK;
}",289.0,299.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4840,101414,ngx_http_auth_request_create_conf,1,ngx_http_auth_request_create_conf,void* ngx_http_auth_request_create_conf (ngx_conf_t*),http\modules\ngx_http_auth_request_module.c,"static void *
ngx_http_auth_request_create_conf(ngx_conf_t *cf)
{
    ngx_http_auth_request_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_auth_request_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->uri = { 0, NULL };
     */

    conf->vars = NGX_CONF_UNSET_PTR;

    return conf;
}",302.0,321.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4841,101419,ngx_http_auth_request_merge_conf,1,ngx_http_auth_request_merge_conf,"char* ngx_http_auth_request_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_auth_request_module.c,"static char *
ngx_http_auth_request_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_auth_request_conf_t *prev = parent;
    ngx_http_auth_request_conf_t *conf = child;

    ngx_conf_merge_str_value(conf->uri, prev->uri, """");
    ngx_conf_merge_ptr_value(conf->vars, prev->vars, NULL);

    return NGX_CONF_OK;
}",324.0,334.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4842,101426,ngx_http_auth_request_init,1,ngx_http_auth_request_init,ngx_int_t ngx_http_auth_request_init (ngx_conf_t*),http\modules\ngx_http_auth_request_module.c,"static ngx_int_t
ngx_http_auth_request_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_ACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_auth_request_handler;

    return NGX_OK;
}",337.0,353.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4843,101431,ngx_http_auth_request,1,ngx_http_auth_request,"char* ngx_http_auth_request (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_auth_request_module.c,"static char *
ngx_http_auth_request(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_auth_request_conf_t *arcf = conf;

    ngx_str_t        *value;

    if (arcf->uri.data != NULL) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        arcf->uri.len = 0;
        arcf->uri.data = (u_char *) """";

        return NGX_CONF_OK;
    }

    arcf->uri = value[1];

    return NGX_CONF_OK;
}",356.0,379.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4844,101438,ngx_http_auth_request_set,1,ngx_http_auth_request_set,"char* ngx_http_auth_request_set (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_auth_request_module.c,"static char *
ngx_http_auth_request_set(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_auth_request_conf_t *arcf = conf;

    ngx_str_t                         *value;
    ngx_http_variable_t               *v;
    ngx_http_auth_request_variable_t  *av;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    if (value[1].data[0] != '$') {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    value[1].len--;
    value[1].data++;

    if (arcf->vars == NGX_CONF_UNSET_PTR) {
        arcf->vars = ngx_array_create(cf->pool, 1,
                                      sizeof(ngx_http_auth_request_variable_t));
        if (arcf->vars == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    av = ngx_array_push(arcf->vars);
    if (av == NULL) {
        return NGX_CONF_ERROR;
    }

    v = ngx_http_add_variable(cf, &value[1], NGX_HTTP_VAR_CH...",382.0,444.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4845,102360,ngx_http_autoindex_html,1,ngx_http_autoindex_html,"ngx_buf_t* ngx_http_autoindex_html (ngx_http_request_t*,ngx_array_t*)",http\modules\ngx_http_autoindex_module.c,"static ngx_buf_t *
ngx_http_autoindex_html(ngx_http_request_t *r, ngx_array_t *entries)
{
    u_char                         *last, scale;
    off_t                           length;
    size_t                          len, entry_len, char_len, escape_html;
    ngx_tm_t                        tm;
    ngx_buf_t                      *b;
    ngx_int_t                       size;
    ngx_uint_t                      i, utf8;
    ngx_time_t                     *tp;
    ngx_http_autoindex_entry_t     *entry;
    ngx_http_autoindex_loc_conf_t  *alcf;

    static u_char  title[] =
        ""<html>"" CRLF
        ""<head><title>Index of ""
    ;

    static u_char  header[] =
        ""</title></head>"" CRLF
        ""<body>"" CRLF
        ""<h1>Index of ""
    ;

    static u_char  tail[] =
        ""</body>"" CRLF
        ""</html>"" CRLF
    ;

    static char  *months[] = { ""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"",
                               ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec"" };

    if (r->h...",432.0,699.0,1.0,20.0,268.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_buf_t
4846,102366,ngx_http_autoindex_json,1,ngx_http_autoindex_json,"ngx_buf_t* ngx_http_autoindex_json (ngx_http_request_t*,ngx_array_t*,ngx_str_t*)",http\modules\ngx_http_autoindex_module.c,"static ngx_buf_t *
ngx_http_autoindex_json(ngx_http_request_t *r, ngx_array_t *entries,
    ngx_str_t *callback)
{
    size_t                       len, entry_len;
    ngx_buf_t                   *b;
    ngx_uint_t                   i;
    ngx_http_autoindex_entry_t  *entry;

    len = sizeof(""["" CRLF CRLF ""]"") - 1;

    if (callback) {
        len += sizeof(""/* callback */"" CRLF ""();"") - 1 + callback->len;
    }

    entry = entries->elts;

    for (i = 0; i < entries->nelts; i++) {
        entry[i].escape = ngx_escape_json(NULL, entry[i].name.data,
                                          entry[i].name.len);

        entry_len = sizeof(""{  },"" CRLF) - 1
                  + sizeof(""\""name\"":\""\"""") - 1
                  + entry[i].name.len + entry[i].escape
                  + sizeof("", \""type\"":\""directory\"""") - 1
                  + sizeof("", \""mtime\"":\""Wed, 31 Dec 1986 10:00:00 GMT\"""") - 1;

        if (entry[i].file) {
            entry_len += sizeof("", \""size\"":"") - 1 + NGX_O...",702.0,809.0,1.0,1.0,108.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,ngx_buf_t
4847,102373,ngx_http_autoindex_jsonp_callback,1,ngx_http_autoindex_jsonp_callback,"ngx_int_t ngx_http_autoindex_jsonp_callback (ngx_http_request_t*,ngx_str_t*)",http\modules\ngx_http_autoindex_module.c,"static ngx_int_t
ngx_http_autoindex_jsonp_callback(ngx_http_request_t *r, ngx_str_t *callback)
{
    u_char      *p, c, ch;
    ngx_uint_t   i;

    if (ngx_http_arg(r, (u_char *) ""callback"", 8, callback) != NGX_OK) {
        callback->len = 0;
        return NGX_OK;
    }

    if (callback->len > 128) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent too long callback name: \""%V\"""", callback);
        return NGX_DECLINED;
    }

    p = callback->data;

    for (i = 0; i < callback->len; i++) {
        ch = p[i];

        c = (u_char) (ch | 0x20);
        if (c >= 'a' && c <= 'z') {
            continue;
        }

        if ((ch >= '0' && ch <= '9') || ch == '_' || ch == '.') {
            continue;
        }

        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent invalid callback name: \""%V\"""", callback);

        return NGX_DECLINED;
    }

    return NGX_OK;
}",812.0,850.0,1.0,1.0,39.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4848,102379,ngx_http_autoindex_xml,1,ngx_http_autoindex_xml,"ngx_buf_t* ngx_http_autoindex_xml (ngx_http_request_t*,ngx_array_t*)",http\modules\ngx_http_autoindex_module.c,"static ngx_buf_t *
ngx_http_autoindex_xml(ngx_http_request_t *r, ngx_array_t *entries)
{
    size_t                          len, entry_len;
    ngx_tm_t                        tm;
    ngx_buf_t                      *b;
    ngx_str_t                       type;
    ngx_uint_t                      i;
    ngx_http_autoindex_entry_t     *entry;

    static u_char  head[] = ""<?xml version=\""1.0\""?>"" CRLF ""<list>"" CRLF;
    static u_char  tail[] = ""</list>"" CRLF;

    len = sizeof(head) - 1 + sizeof(tail) - 1;

    entry = entries->elts;

    for (i = 0; i < entries->nelts; i++) {
        entry[i].escape = ngx_escape_html(NULL, entry[i].name.data,
                                          entry[i].name.len);

        entry_len = sizeof(""<directory></directory>"" CRLF) - 1
                  + entry[i].name.len + entry[i].escape
                  + sizeof("" mtime=\""1986-12-31T10:00:00Z\"""") - 1;

        if (entry[i].file) {
            entry_len += sizeof("" size=\""\"""") - 1 + NGX_OFF_T_LEN;
...",853.0,948.0,1.0,1.0,96.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_buf_t
4849,102386,ngx_http_autoindex_error,1,ngx_http_autoindex_error,"ngx_int_t ngx_http_autoindex_error (ngx_http_request_t*,ngx_dir_t*,ngx_str_t*)",http\modules\ngx_http_autoindex_module.c,"static ngx_int_t
ngx_http_autoindex_error(ngx_http_request_t *r, ngx_dir_t *dir, ngx_str_t *name)
{
    if (ngx_close_dir(dir) == NGX_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, ngx_errno,
                      ngx_close_dir_n "" \""%V\"" failed"", name);
    }

    return r->header_sent ? NGX_ERROR : NGX_HTTP_INTERNAL_SERVER_ERROR;
}",1009.0,1018.0,1.0,1.0,10.0,0,0,0,0,7,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4850,102393,ngx_http_autoindex_init,1,ngx_http_autoindex_init,ngx_int_t ngx_http_autoindex_init (ngx_conf_t*),http\modules\ngx_http_autoindex_module.c,"static ngx_int_t
ngx_http_autoindex_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_CONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_autoindex_handler;

    return NGX_OK;
}",1056.0,1072.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4851,102398,ngx_http_autoindex_create_loc_conf,1,ngx_http_autoindex_create_loc_conf,void* ngx_http_autoindex_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_autoindex_module.c,"static void *
ngx_http_autoindex_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_autoindex_loc_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_autoindex_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->enable = NGX_CONF_UNSET;
    conf->format = NGX_CONF_UNSET_UINT;
    conf->localtime = NGX_CONF_UNSET;
    conf->exact_size = NGX_CONF_UNSET;

    return conf;
}",1021.0,1037.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4852,102403,ngx_http_autoindex_merge_loc_conf,1,ngx_http_autoindex_merge_loc_conf,"char* ngx_http_autoindex_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_autoindex_module.c,"static char *
ngx_http_autoindex_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_autoindex_loc_conf_t *prev = parent;
    ngx_http_autoindex_loc_conf_t *conf = child;

    ngx_conf_merge_value(conf->enable, prev->enable, 0);
    ngx_conf_merge_uint_value(conf->format, prev->format,
                              NGX_HTTP_AUTOINDEX_HTML);
    ngx_conf_merge_value(conf->localtime, prev->localtime, 0);
    ngx_conf_merge_value(conf->exact_size, prev->exact_size, 1);

    return NGX_CONF_OK;
}",1040.0,1053.0,1.0,30.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4853,102540,ngx_http_autoindex_handler,1,ngx_http_autoindex_handler,ngx_int_t ngx_http_autoindex_handler (ngx_http_request_t*),http\modules\ngx_http_autoindex_module.c,"static ngx_int_t
ngx_http_autoindex_handler(ngx_http_request_t *r)
{
    u_char                         *last, *filename;
    size_t                          len, allocated, root;
    ngx_err_t                       err;
    ngx_buf_t                      *b;
    ngx_int_t                       rc;
    ngx_str_t                       path, callback;
    ngx_dir_t                       dir;
    ngx_uint_t                      level, format;
    ngx_pool_t                     *pool;
    ngx_chain_t                     out;
    ngx_array_t                     entries;
    ngx_http_autoindex_entry_t     *entry;
    ngx_http_autoindex_loc_conf_t  *alcf;

    if (r->uri.data[r->uri.len - 1] != '/') {
        return NGX_DECLINED;
    }

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
        return NGX_DECLINED;
    }

    alcf = ngx_http_get_module_loc_conf(r, ngx_http_autoindex_module);

    if (!alcf->enable) {
        return NGX_DECLINED;
    }

    rc = ngx_http_discard_request...",152.0,429.0,1.0,36.0,278.0,218,20,216,41,0,61,45,62,16,29,,0,51,2,1,1,ngx_int_t
4854,105382,ngx_http_autoindex_cmp_entries,1,ngx_http_autoindex_cmp_entries,"ANY ngx_http_autoindex_cmp_entries (void*,void*)",http\modules\ngx_http_autoindex_module.c,"ngx_http_autoindex_cmp_entries(const void *one, const void *two)
{
    ngx_http_autoindex_entry_t *first = (ngx_http_autoindex_entry_t *) one;
    ngx_http_autoindex_entry_t *second = (ngx_http_autoindex_entry_t *) two;

    if (first->dir && !second->dir) {
        /* move the directories to the start */
        return -1;
    }

    if (!first->dir && second->dir) {
        /* move the directories to the start */
        return 1;
    }

    return (int) ngx_strcmp(first->name.data, second->name.data);
}",952.0,968.0,1.0,1.0,17.0,18,7,10,4,0,6,3,3,4,0,,0,6,4,2,2,ANY
4855,105635,ngx_http_msie_variable,1,ngx_http_msie_variable,"ngx_int_t ngx_http_msie_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_browser_module.c,"static ngx_int_t
ngx_http_msie_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    if (r->headers_in.msie) {
        *v = ngx_http_variable_true_value;
        return NGX_OK;
    }

    *v = ngx_http_variable_null_value;
    return NGX_OK;
}",383.0,394.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4856,105642,ngx_http_browser_variable,1,ngx_http_browser_variable,"ngx_int_t ngx_http_browser_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_browser_module.c,"static ngx_int_t
ngx_http_browser_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_uint_t                rc;
    ngx_http_browser_conf_t  *cf;

    cf = ngx_http_get_module_loc_conf(r, ngx_http_browser_module);

    rc = ngx_http_browser(r, cf);

    if (data == NGX_HTTP_MODERN_BROWSER && rc == NGX_HTTP_MODERN_BROWSER) {
        *v = *cf->modern_browser_value;
        return NGX_OK;
    }

    if (data == NGX_HTTP_ANCIENT_BROWSER && rc == NGX_HTTP_ANCIENT_BROWSER) {
        *v = *cf->ancient_browser_value;
        return NGX_OK;
    }

    *v = ngx_http_variable_null_value;
    return NGX_OK;
}",229.0,252.0,1.0,16.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4857,105649,ngx_http_browser,1,ngx_http_browser,"ngx_uint_t ngx_http_browser (ngx_http_request_t*,ngx_http_browser_conf_t*)",http\modules\ngx_http_browser_module.c,"static ngx_uint_t
ngx_http_browser(ngx_http_request_t *r, ngx_http_browser_conf_t *cf)
{
    size_t                      len;
    u_char                     *name, *ua, *last, c;
    ngx_str_t                  *ancient;
    ngx_uint_t                  i, version, ver, scale;
    ngx_http_modern_browser_t  *modern;

    if (r->headers_in.user_agent == NULL) {
        if (cf->modern_unlisted_browsers) {
            return NGX_HTTP_MODERN_BROWSER;
        }

        return NGX_HTTP_ANCIENT_BROWSER;
    }

    ua = r->headers_in.user_agent->value.data;
    len = r->headers_in.user_agent->value.len;
    last = ua + len;

    if (cf->modern_browsers) {
        modern = cf->modern_browsers->elts;

        for (i = 0; i < cf->modern_browsers->nelts; i++) {
            name = ua + modern[i].skip;

            if (name >= last) {
                continue;
            }

            name = (u_char *) ngx_strstr(name, modern[i].name);

            if (name == NULL) {
                continue;
 ...",255.0,380.0,1.0,19.0,126.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
4858,105655,ngx_http_browser_add_variables,1,ngx_http_browser_add_variables,ngx_int_t ngx_http_browser_add_variables (ngx_conf_t*),http\modules\ngx_http_browser_module.c,"static ngx_int_t
ngx_http_browser_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_browser_vars; v->name.len; v++) {

        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",397.0,414.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4859,105660,ngx_http_browser_create_conf,1,ngx_http_browser_create_conf,void* ngx_http_browser_create_conf (ngx_conf_t*),http\modules\ngx_http_browser_module.c,"static void *
ngx_http_browser_create_conf(ngx_conf_t *cf)
{
    ngx_http_browser_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_browser_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->modern_browsers = NULL;
     *     conf->ancient_browsers = NULL;
     *     conf->modern_browser_value = NULL;
     *     conf->ancient_browser_value = NULL;
     *
     *     conf->modern_unlisted_browsers = 0;
     *     conf->netscape4 = 0;
     */

    return conf;
}",417.0,440.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4860,105665,ngx_http_browser_merge_conf,1,ngx_http_browser_merge_conf,"char* ngx_http_browser_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_browser_module.c,"static char *
ngx_http_browser_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_browser_conf_t *prev = parent;
    ngx_http_browser_conf_t *conf = child;

    ngx_uint_t                  i, n;
    ngx_http_modern_browser_t  *browsers, *opera;

    /*
     * At the merge the skip field is used to store the browser slot,
     * it will be used in sorting and then will overwritten
     * with a real skip value.  The zero value means Opera.
     */

    if (conf->modern_browsers == NULL && conf->modern_unlisted_browsers == 0) {
        conf->modern_browsers = prev->modern_browsers;
        conf->modern_unlisted_browsers = prev->modern_unlisted_browsers;

    } else if (conf->modern_browsers != NULL) {
        browsers = conf->modern_browsers->elts;

        for (i = 0; i < conf->modern_browsers->nelts; i++) {
            if (browsers[i].skip == 0) {
                goto found;
            }
        }

        /*
         * Opera may contain MSIE string, so if Opera w...",443.0,524.0,1.0,1.0,82.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4861,105673,ngx_http_modern_browser,1,ngx_http_modern_browser,"char* ngx_http_modern_browser (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_browser_module.c,"static char *
ngx_http_modern_browser(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_browser_conf_t *bcf = conf;

    u_char                           c;
    ngx_str_t                       *value;
    ngx_uint_t                       i, n, version, ver, scale;
    ngx_http_modern_browser_t       *browser;
    ngx_http_modern_browser_mask_t  *mask;

    value = cf->args->elts;

    if (cf->args->nelts == 2) {
        if (ngx_strcmp(value[1].data, ""unlisted"") == 0) {
            bcf->modern_unlisted_browsers = 1;
            return NGX_CONF_OK;
        }

        return NGX_CONF_ERROR;
    }

    if (bcf->modern_browsers == NULL) {
        bcf->modern_browsers = ngx_array_create(cf->pool, 5,
                                            sizeof(ngx_http_modern_browser_t));
        if (bcf->modern_browsers == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    browser = ngx_array_push(bcf->modern_browsers);
    if (browser == NULL) {
        return NGX_CONF_ER...",537.0,626.0,1.0,1.0,90.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4862,105680,ngx_http_ancient_browser,1,ngx_http_ancient_browser,"char* ngx_http_ancient_browser (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_browser_module.c,"static char *
ngx_http_ancient_browser(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_browser_conf_t *bcf = conf;

    ngx_str_t   *value, *browser;
    ngx_uint_t   i;

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {
        if (ngx_strcmp(value[i].data, ""netscape4"") == 0) {
            bcf->netscape4 = 1;
            continue;
        }

        if (bcf->ancient_browsers == NULL) {
            bcf->ancient_browsers = ngx_array_create(cf->pool, 4,
                                                     sizeof(ngx_str_t));
            if (bcf->ancient_browsers == NULL) {
                return NGX_CONF_ERROR;
            }
        }

        browser = ngx_array_push(bcf->ancient_browsers);
        if (browser == NULL) {
            return NGX_CONF_ERROR;
        }

        *browser = value[i];
    }

    return NGX_CONF_OK;
}",629.0,662.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4863,105687,ngx_http_modern_browser_value,1,ngx_http_modern_browser_value,"char* ngx_http_modern_browser_value (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_browser_module.c,"static char *
ngx_http_modern_browser_value(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_browser_conf_t *bcf = conf;

    ngx_str_t  *value;

    bcf->modern_browser_value = ngx_palloc(cf->pool,
                                           sizeof(ngx_http_variable_value_t));
    if (bcf->modern_browser_value == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    bcf->modern_browser_value->len = value[1].len;
    bcf->modern_browser_value->valid = 1;
    bcf->modern_browser_value->no_cacheable = 0;
    bcf->modern_browser_value->not_found = 0;
    bcf->modern_browser_value->data = value[1].data;

    return NGX_CONF_OK;
}",665.0,687.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4864,105694,ngx_http_ancient_browser_value,1,ngx_http_ancient_browser_value,"char* ngx_http_ancient_browser_value (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_browser_module.c,"static char *
ngx_http_ancient_browser_value(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_browser_conf_t *bcf = conf;

    ngx_str_t  *value;

    bcf->ancient_browser_value = ngx_palloc(cf->pool,
                                            sizeof(ngx_http_variable_value_t));
    if (bcf->ancient_browser_value == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    bcf->ancient_browser_value->len = value[1].len;
    bcf->ancient_browser_value->valid = 1;
    bcf->ancient_browser_value->no_cacheable = 0;
    bcf->ancient_browser_value->not_found = 0;
    bcf->ancient_browser_value->data = value[1].data;

    return NGX_CONF_OK;
}",690.0,712.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4865,106726,ngx_http_modern_browser_sort,1,ngx_http_modern_browser_sort,"ANY ngx_http_modern_browser_sort (void*,void*)",http\modules\ngx_http_browser_module.c,"ngx_http_modern_browser_sort(const void *one, const void *two)
{
    ngx_http_modern_browser_t *first = (ngx_http_modern_browser_t *) one;
    ngx_http_modern_browser_t *second = (ngx_http_modern_browser_t *) two;

    return (first->skip - second->skip);
}",528.0,534.0,1.0,1.0,7.0,7,4,6,4,0,2,1,1,0,0,,0,2,4,2,2,ANY
4866,107325,ngx_http_destination_charset,1,ngx_http_destination_charset,"ngx_int_t ngx_http_destination_charset (ngx_http_request_t*,ngx_str_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_destination_charset(ngx_http_request_t *r, ngx_str_t *name)
{
    ngx_int_t                      charset;
    ngx_http_charset_t            *charsets;
    ngx_http_variable_value_t     *vv;
    ngx_http_charset_loc_conf_t   *mlcf;
    ngx_http_charset_main_conf_t  *mcf;

    if (r->headers_out.content_type.len == 0) {
        return NGX_DECLINED;
    }

    if (r->headers_out.override_charset
        && r->headers_out.override_charset->len)
    {
        *name = *r->headers_out.override_charset;

        charset = ngx_http_get_charset(r, name);

        if (charset != NGX_HTTP_NO_CHARSET) {
            return charset;
        }

        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""unknown charset \""%V\"" to override"", name);

        return NGX_DECLINED;
    }

    mlcf = ngx_http_get_module_loc_conf(r, ngx_http_charset_filter_module);
    charset = mlcf->charset;

    if (charset == NGX_HTTP_CHARSET_OFF) {
        return NGX_DECL...",316.0,381.0,1.0,23.0,66.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4867,107331,ngx_http_main_request_charset,1,ngx_http_main_request_charset,"ngx_int_t ngx_http_main_request_charset (ngx_http_request_t*,ngx_str_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_main_request_charset(ngx_http_request_t *r, ngx_str_t *src)
{
    ngx_int_t                charset;
    ngx_str_t               *main_charset;
    ngx_http_charset_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r->main, ngx_http_charset_filter_module);

    if (ctx) {
        *src = ctx->charset_name;
        return ctx->charset;
    }

    main_charset = &r->main->headers_out.charset;

    if (main_charset->len == 0) {
        return NGX_DECLINED;
    }

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_charset_ctx_t));
    if (ctx == NULL) {
        return NGX_ERROR;
    }

    ngx_http_set_ctx(r->main, ctx, ngx_http_charset_filter_module);

    charset = ngx_http_get_charset(r, main_charset);

    ctx->charset = charset;
    ctx->charset_name = *main_charset;
    *src = *main_charset;

    return charset;
}",384.0,418.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4868,107337,ngx_http_source_charset,1,ngx_http_source_charset,"ngx_int_t ngx_http_source_charset (ngx_http_request_t*,ngx_str_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_source_charset(ngx_http_request_t *r, ngx_str_t *name)
{
    ngx_int_t                      charset;
    ngx_http_charset_t            *charsets;
    ngx_http_variable_value_t     *vv;
    ngx_http_charset_loc_conf_t   *lcf;
    ngx_http_charset_main_conf_t  *mcf;

    if (r->headers_out.charset.len) {
        *name = r->headers_out.charset;
        return ngx_http_get_charset(r, name);
    }

    lcf = ngx_http_get_module_loc_conf(r, ngx_http_charset_filter_module);

    charset = lcf->source_charset;

    if (charset == NGX_HTTP_CHARSET_OFF) {
        name->len = 0;
        return charset;
    }

    if (charset < NGX_HTTP_CHARSET_VAR) {
        mcf = ngx_http_get_module_main_conf(r, ngx_http_charset_filter_module);
        charsets = mcf->charsets.elts;
        *name = charsets[charset].name;
        return charset;
    }

    vv = ngx_http_get_indexed_variable(r, charset - NGX_HTTP_CHARSET_VAR);

    if (vv == NULL || vv->not_found) {
        return NGX...",421.0,461.0,1.0,19.0,41.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4869,107343,ngx_http_get_charset,1,ngx_http_get_charset,"ngx_int_t ngx_http_get_charset (ngx_http_request_t*,ngx_str_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_get_charset(ngx_http_request_t *r, ngx_str_t *name)
{
    ngx_uint_t                     i, n;
    ngx_http_charset_t            *charset;
    ngx_http_charset_main_conf_t  *mcf;

    mcf = ngx_http_get_module_main_conf(r, ngx_http_charset_filter_module);

    charset = mcf->charsets.elts;
    n = mcf->charsets.nelts;

    for (i = 0; i < n; i++) {
        if (charset[i].name.len != name->len) {
            continue;
        }

        if (ngx_strncasecmp(charset[i].name.data, name->data, name->len) == 0) {
            return i;
        }
    }

    return NGX_HTTP_NO_CHARSET;
}",464.0,487.0,1.0,11.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4870,107350,ngx_http_charset_ctx,1,ngx_http_charset_ctx,"ngx_int_t ngx_http_charset_ctx (ngx_http_request_t*,ngx_http_charset_t*,ngx_int_t,ngx_int_t)",http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_charset_ctx(ngx_http_request_t *r, ngx_http_charset_t *charsets,
    ngx_int_t charset, ngx_int_t source_charset)
{
    ngx_http_charset_ctx_t  *ctx;

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_charset_ctx_t));
    if (ctx == NULL) {
        return NGX_ERROR;
    }

    ngx_http_set_ctx(r, ctx, ngx_http_charset_filter_module);

    ctx->table = charsets[source_charset].tables[charset];
    ctx->charset = charset;
    ctx->charset_name = charsets[charset].name;
    ctx->length = charsets[charset].length;
    ctx->from_utf8 = charsets[source_charset].utf8;
    ctx->to_utf8 = charsets[charset].utf8;

    r->filter_need_in_memory = 1;

    if ((ctx->to_utf8 || ctx->from_utf8) && r == r->main) {
        ngx_http_clear_content_length(r);

    } else {
        r->filter_need_temporary = 1;
    }

    return ngx_http_next_header_filter(r);
}",513.0,543.0,1.0,1.0,31.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
4871,107358,ngx_http_charset_recode,1,ngx_http_charset_recode,"ngx_uint_t ngx_http_charset_recode (ngx_buf_t*,u_char*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_uint_t
ngx_http_charset_recode(ngx_buf_t *b, u_char *table)
{
    u_char  *p, *last;

    last = b->last;

    for (p = b->pos; p < last; p++) {

        if (*p != table[*p]) {
            goto recode;
        }
    }

    return 0;

recode:

    do {
        if (*p != table[*p]) {
            *p = table[*p];
        }

        p++;

    } while (p < last);

    b->in_file = 0;

    return 1;
}",651.0,681.0,1.0,1.0,31.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
4872,107364,ngx_http_charset_recode_from_utf8,1,ngx_http_charset_recode_from_utf8,"ngx_chain_t* ngx_http_charset_recode_from_utf8 (ngx_pool_t*,ngx_buf_t*,ngx_http_charset_ctx_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_chain_t *
ngx_http_charset_recode_from_utf8(ngx_pool_t *pool, ngx_buf_t *buf,
    ngx_http_charset_ctx_t *ctx)
{
    size_t        len, size;
    u_char        c, *p, *src, *dst, *saved, **table;
    uint32_t      n;
    ngx_buf_t    *b;
    ngx_uint_t    i;
    ngx_chain_t  *out, *cl, **ll;

    src = buf->pos;

    if (ctx->saved_len == 0) {

        for ( /* void */ ; src < buf->last; src++) {

            if (*src < 0x80) {
                continue;
            }

            len = src - buf->pos;

            if (len > 512) {
                out = ngx_http_charset_get_buf(pool, ctx);
                if (out == NULL) {
                    return NULL;
                }

                b = out->buf;

                b->temporary = buf->temporary;
                b->memory = buf->memory;
                b->mmap = buf->mmap;
                b->flush = buf->flush;

                b->pos = buf->pos;
                b->last = src;

                out->buf = b;
          ...",684.0,962.0,1.0,23.0,279.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
4873,107371,ngx_http_charset_recode_to_utf8,1,ngx_http_charset_recode_to_utf8,"ngx_chain_t* ngx_http_charset_recode_to_utf8 (ngx_pool_t*,ngx_buf_t*,ngx_http_charset_ctx_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_chain_t *
ngx_http_charset_recode_to_utf8(ngx_pool_t *pool, ngx_buf_t *buf,
    ngx_http_charset_ctx_t *ctx)
{
    size_t        len, size;
    u_char       *p, *src, *dst, *table;
    ngx_buf_t    *b;
    ngx_chain_t  *out, *cl, **ll;

    table = ctx->table;

    for (src = buf->pos; src < buf->last; src++) {
        if (table[*src * NGX_UTF_LEN] == '\1') {
            continue;
        }

        goto recode;
    }

    out = ngx_alloc_chain_link(pool);
    if (out == NULL) {
        return NULL;
    }

    out->buf = buf;
    out->next = NULL;

    return out;

recode:

    /*
     * we assume that there are about half of characters to be recoded,
     * so we preallocate ""size / 2 + size / 2 * ctx->length""
     */

    len = src - buf->pos;

    if (len > 512) {
        out = ngx_http_charset_get_buf(pool, ctx);
        if (out == NULL) {
            return NULL;
        }

        b = out->buf;

        b->temporary = buf->temporary;
        b->memory = buf->memory;...",965.0,1089.0,1.0,25.0,125.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
4874,107378,ngx_http_charset_get_buf,1,ngx_http_charset_get_buf,"ngx_chain_t* ngx_http_charset_get_buf (ngx_pool_t*,ngx_http_charset_ctx_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_chain_t *
ngx_http_charset_get_buf(ngx_pool_t *pool, ngx_http_charset_ctx_t *ctx)
{
    ngx_chain_t  *cl;

    cl = ctx->free_bufs;

    if (cl) {
        ctx->free_bufs = cl->next;

        cl->buf->shadow = NULL;
        cl->next = NULL;

        return cl;
    }

    cl = ngx_alloc_chain_link(pool);
    if (cl == NULL) {
        return NULL;
    }

    cl->buf = ngx_calloc_buf(pool);
    if (cl->buf == NULL) {
        return NULL;
    }

    cl->next = NULL;

    cl->buf->tag = (ngx_buf_tag_t) &ngx_http_charset_filter_module;

    return cl;
}",1092.0,1123.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_chain_t
4875,107384,ngx_http_charset_get_buffer,1,ngx_http_charset_get_buffer,"ngx_chain_t* ngx_http_charset_get_buffer (ngx_pool_t*,ngx_http_charset_ctx_t*,size_t)",http\modules\ngx_http_charset_filter_module.c,"static ngx_chain_t *
ngx_http_charset_get_buffer(ngx_pool_t *pool, ngx_http_charset_ctx_t *ctx,
    size_t size)
{
    ngx_buf_t    *b;
    ngx_chain_t  *cl, **ll;

    for (ll = &ctx->free_buffers, cl = ctx->free_buffers;
         cl;
         ll = &cl->next, cl = cl->next)
    {
        b = cl->buf;

        if ((size_t) (b->end - b->start) >= size) {
            *ll = cl->next;
            cl->next = NULL;

            b->pos = b->start;
            b->temporary = 1;
            b->shadow = NULL;

            return cl;
        }
    }

    cl = ngx_alloc_chain_link(pool);
    if (cl == NULL) {
        return NULL;
    }

    cl->buf = ngx_create_temp_buf(pool, size);
    if (cl->buf == NULL) {
        return NULL;
    }

    cl->next = NULL;

    cl->buf->temporary = 1;
    cl->buf->tag = (ngx_buf_tag_t) &ngx_http_charset_filter_module;

    return cl;
}",1126.0,1167.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
4876,107391,ngx_http_charset_map_block,1,ngx_http_charset_map_block,"char* ngx_http_charset_map_block (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_charset_filter_module.c,"static char *
ngx_http_charset_map_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_charset_main_conf_t  *mcf = conf;

    char                         *rv;
    u_char                       *p, *dst2src, **pp;
    ngx_int_t                     src, dst;
    ngx_uint_t                    i, n;
    ngx_str_t                    *value;
    ngx_conf_t                    pvcf;
    ngx_http_charset_t           *charset;
    ngx_http_charset_tables_t    *table;
    ngx_http_charset_conf_ctx_t   ctx;

    value = cf->args->elts;

    src = ngx_http_add_charset(&mcf->charsets, &value[1]);
    if (src == NGX_ERROR) {
        return NGX_CONF_ERROR;
    }

    dst = ngx_http_add_charset(&mcf->charsets, &value[2]);
    if (dst == NGX_ERROR) {
        return NGX_CONF_ERROR;
    }

    if (src == dst) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""\""charset_map\"" between the same charsets ""
                           ""\""%V\"" and \""%V\"""", &value[1...",1170.0,1303.0,1.0,53.0,134.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4877,107398,ngx_http_charset_map,1,ngx_http_charset_map,"char* ngx_http_charset_map (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_charset_filter_module.c,"static char *
ngx_http_charset_map(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
{
    u_char                       *p, *dst2src, **pp;
    uint32_t                      n;
    ngx_int_t                     src, dst;
    ngx_str_t                    *value;
    ngx_uint_t                    i;
    ngx_http_charset_tables_t    *table;
    ngx_http_charset_conf_ctx_t  *ctx;

    if (cf->args->nelts != 2) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, ""invalid parameters number"");
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    src = ngx_hextoi(value[0].data, value[0].len);
    if (src == NGX_ERROR || src > 255) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid value \""%V\"""", &value[0]);
        return NGX_CONF_ERROR;
    }

    ctx = cf->ctx;
    table = ctx->table;

    if (ctx->charset->utf8) {
        p = &table->src2dst[src * NGX_UTF_LEN];

        *p++ = (u_char) (value[1].len / 2);

        for (i = 0; i < value...",1306.0,1393.0,1.0,34.0,88.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4878,107405,ngx_http_set_charset_slot,1,ngx_http_set_charset_slot,"char* ngx_http_set_charset_slot (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_charset_filter_module.c,"static char *
ngx_http_set_charset_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_int_t                     *cp;
    ngx_str_t                     *value, var;
    ngx_http_charset_main_conf_t  *mcf;

    cp = (ngx_int_t *) (p + cmd->offset);

    if (*cp != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (cmd->offset == offsetof(ngx_http_charset_loc_conf_t, charset)
        && ngx_strcmp(value[1].data, ""off"") == 0)
    {
        *cp = NGX_HTTP_CHARSET_OFF;
        return NGX_CONF_OK;
    }


    if (value[1].data[0] == '$') {
        var.len = value[1].len - 1;
        var.data = value[1].data + 1;

        *cp = ngx_http_get_variable_index(cf, &var);

        if (*cp == NGX_ERROR) {
            return NGX_CONF_ERROR;
        }

        *cp += NGX_HTTP_CHARSET_VAR;

        return NGX_CONF_OK;
    }

    mcf = ngx_http_conf_get_module_main_conf(cf,
                                             ngx_http...",1396.0,1445.0,1.0,14.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4879,107412,ngx_http_add_charset,1,ngx_http_add_charset,"ngx_int_t ngx_http_add_charset (ngx_array_t*,ngx_str_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_add_charset(ngx_array_t *charsets, ngx_str_t *name)
{
    ngx_uint_t           i;
    ngx_http_charset_t  *c;

    c = charsets->elts;
    for (i = 0; i < charsets->nelts; i++) {
        if (name->len != c[i].name.len) {
            continue;
        }

        if (ngx_strcasecmp(name->data, c[i].name.data) == 0) {
            break;
        }
    }

    if (i < charsets->nelts) {
        return i;
    }

    c = ngx_array_push(charsets);
    if (c == NULL) {
        return NGX_ERROR;
    }

    c->tables = NULL;
    c->name = *name;
    c->length = 0;

    if (ngx_strcasecmp(name->data, (u_char *) ""utf-8"") == 0) {
        c->utf8 = 1;

    } else {
        c->utf8 = 0;
    }

    return i;
}",1448.0,1486.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4880,107418,ngx_http_charset_create_main_conf,1,ngx_http_charset_create_main_conf,void* ngx_http_charset_create_main_conf (ngx_conf_t*),http\modules\ngx_http_charset_filter_module.c,"static void *
ngx_http_charset_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_charset_main_conf_t  *mcf;

    mcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_charset_main_conf_t));
    if (mcf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&mcf->charsets, cf->pool, 2, sizeof(ngx_http_charset_t))
        != NGX_OK)
    {
        return NULL;
    }

    if (ngx_array_init(&mcf->tables, cf->pool, 1,
                       sizeof(ngx_http_charset_tables_t))
        != NGX_OK)
    {
        return NULL;
    }

    if (ngx_array_init(&mcf->recodes, cf->pool, 2,
                       sizeof(ngx_http_charset_recode_t))
        != NGX_OK)
    {
        return NULL;
    }

    return mcf;
}",1489.0,1520.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4881,107423,ngx_http_charset_create_loc_conf,1,ngx_http_charset_create_loc_conf,void* ngx_http_charset_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_charset_filter_module.c,"static void *
ngx_http_charset_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_charset_loc_conf_t  *lcf;

    lcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_charset_loc_conf_t));
    if (lcf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     lcf->types = { NULL };
     *     lcf->types_keys = NULL;
     */

    lcf->charset = NGX_CONF_UNSET;
    lcf->source_charset = NGX_CONF_UNSET;
    lcf->override_charset = NGX_CONF_UNSET;

    return lcf;
}",1523.0,1545.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4882,107428,ngx_http_charset_merge_loc_conf,1,ngx_http_charset_merge_loc_conf,"char* ngx_http_charset_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_charset_filter_module.c,"static char *
ngx_http_charset_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_charset_loc_conf_t *prev = parent;
    ngx_http_charset_loc_conf_t *conf = child;

    ngx_uint_t                     i;
    ngx_http_charset_recode_t     *recode;
    ngx_http_charset_main_conf_t  *mcf;

    if (ngx_http_merge_types(cf, &conf->types_keys, &conf->types,
                             &prev->types_keys, &prev->types,
                             ngx_http_charset_default_types)
        != NGX_OK)
    {
        return NGX_CONF_ERROR;
    }

    ngx_conf_merge_value(conf->override_charset, prev->override_charset, 0);
    ngx_conf_merge_value(conf->charset, prev->charset, NGX_HTTP_CHARSET_OFF);
    ngx_conf_merge_value(conf->source_charset, prev->source_charset,
                         NGX_HTTP_CHARSET_OFF);

    if (conf->charset == NGX_HTTP_CHARSET_OFF
        || conf->source_charset == NGX_HTTP_CHARSET_OFF
        || conf->charset == conf->source_charset)
    {
     ...",1548.0,1604.0,1.0,55.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4883,107435,ngx_http_charset_postconfiguration,1,ngx_http_charset_postconfiguration,ngx_int_t ngx_http_charset_postconfiguration (ngx_conf_t*),http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_charset_postconfiguration(ngx_conf_t *cf)
{
    u_char                       **src, **dst;
    ngx_int_t                      c;
    ngx_uint_t                     i, t;
    ngx_http_charset_t            *charset;
    ngx_http_charset_recode_t     *recode;
    ngx_http_charset_tables_t     *tables;
    ngx_http_charset_main_conf_t  *mcf;

    mcf = ngx_http_conf_get_module_main_conf(cf,
                                             ngx_http_charset_filter_module);

    recode = mcf->recodes.elts;
    tables = mcf->tables.elts;
    charset = mcf->charsets.elts;

    for (i = 0; i < mcf->recodes.nelts; i++) {

        c = recode[i].src;

        for (t = 0; t < mcf->tables.nelts; t++) {

            if (c == tables[t].src && recode[i].dst == tables[t].dst) {
                goto next;
            }

            if (c == tables[t].dst && recode[i].dst == tables[t].src) {
                goto next;
            }
        }

        ngx_log_error(NGX_LOG_EMERG, cf...",1607.0,1685.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4884,107578,ngx_http_charset_header_filter,1,ngx_http_charset_header_filter,ngx_int_t ngx_http_charset_header_filter (ngx_http_request_t*),http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_charset_header_filter(ngx_http_request_t *r)
{
    ngx_int_t                      charset, source_charset;
    ngx_str_t                      dst, src;
    ngx_http_charset_t            *charsets;
    ngx_http_charset_main_conf_t  *mcf;

    if (r == r->main) {
        charset = ngx_http_destination_charset(r, &dst);

    } else {
        charset = ngx_http_main_request_charset(r, &dst);
    }

    if (charset == NGX_ERROR) {
        return NGX_ERROR;
    }

    if (charset == NGX_DECLINED) {
        return ngx_http_next_header_filter(r);
    }

    /* charset: charset index or NGX_HTTP_NO_CHARSET */

    source_charset = ngx_http_source_charset(r, &src);

    if (source_charset == NGX_ERROR) {
        return NGX_ERROR;
    }

    /*
     * source_charset: charset index, NGX_HTTP_NO_CHARSET,
     *                 or NGX_HTTP_CHARSET_OFF
     */

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""charset: \""%V\"" > \""%V\"""", &sr...",216.0,313.0,1.0,26.0,98.0,66,10,70,13,0,10,13,12,4,5,,0,8,2,1,1,ngx_int_t
4885,108426,ngx_http_charset_body_filter,1,ngx_http_charset_body_filter,"ngx_int_t ngx_http_charset_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_charset_filter_module.c,"static ngx_int_t
ngx_http_charset_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t                rc;
    ngx_buf_t               *b;
    ngx_chain_t             *cl, *out, **ll;
    ngx_http_charset_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_charset_filter_module);

    if (ctx == NULL || ctx->table == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    if ((ctx->to_utf8 || ctx->from_utf8) || ctx->busy) {

        out = NULL;
        ll = &out;

        for (cl = in; cl; cl = cl->next) {
            b = cl->buf;

            if (ngx_buf_size(b) == 0) {

                *ll = ngx_alloc_chain_link(r->pool);
                if (*ll == NULL) {
                    return NGX_ERROR;
                }

                (*ll)->buf = b;
                (*ll)->next = NULL;

                ll = &(*ll)->next;

                continue;
            }

            if (ctx->to_utf8) {
                *ll = ngx_http_charset_recode_to_utf8(r->pool...",546.0,648.0,1.0,1.0,103.0,81,9,83,12,0,20,21,41,8,3,,0,19,4,2,2,ngx_int_t
4886,111942,ngx_http_chunked_filter_init,1,ngx_http_chunked_filter_init,ngx_int_t ngx_http_chunked_filter_init (ngx_conf_t*),http\modules\ngx_http_chunked_filter_module.c,"static ngx_int_t
ngx_http_chunked_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_chunked_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_chunked_body_filter;

    return NGX_OK;
}",331.0,341.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4887,111947,ngx_http_chunked_create_trailers,1,ngx_http_chunked_create_trailers,"ngx_chain_t* ngx_http_chunked_create_trailers (ngx_http_request_t*,ngx_http_chunked_filter_ctx_t*)",http\modules\ngx_http_chunked_filter_module.c,"static ngx_chain_t *
ngx_http_chunked_create_trailers(ngx_http_request_t *r,
    ngx_http_chunked_filter_ctx_t *ctx)
{
    size_t            len;
    ngx_buf_t        *b;
    ngx_uint_t        i;
    ngx_chain_t      *cl;
    ngx_list_part_t  *part;
    ngx_table_elt_t  *header;

    len = 0;

    part = &r->headers_out.trailers.part;
    header = part->elts;

    for (i = 0; /* void */; i++) {

        if (i >= part->nelts) {
            if (part->next == NULL) {
                break;
            }

            part = part->next;
            header = part->elts;
            i = 0;
        }

        if (header[i].hash == 0) {
            continue;
        }

        len += header[i].key.len + sizeof("": "") - 1
               + header[i].value.len + sizeof(CRLF) - 1;
    }

    cl = ngx_chain_get_free_buf(r->pool, &ctx->free);
    if (cl == NULL) {
        return NULL;
    }

    b = cl->buf;

    b->tag = (ngx_buf_tag_t) &ngx_http_chunked_filter_module;
    b->temporary = 0;
    b-...",228.0,328.0,1.0,1.0,101.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_chain_t
4888,111984,ngx_http_chunked_header_filter,1,ngx_http_chunked_header_filter,ngx_int_t ngx_http_chunked_header_filter (ngx_http_request_t*),http\modules\ngx_http_chunked_filter_module.c,"static ngx_int_t
ngx_http_chunked_header_filter(ngx_http_request_t *r)
{
    ngx_http_core_loc_conf_t       *clcf;
    ngx_http_chunked_filter_ctx_t  *ctx;

    if (r->headers_out.status == NGX_HTTP_NOT_MODIFIED
        || r->headers_out.status == NGX_HTTP_NO_CONTENT
        || r->headers_out.status < NGX_HTTP_OK
        || r != r->main
        || r->method == NGX_HTTP_HEAD)
    {
        return ngx_http_next_header_filter(r);
    }

    if (r->headers_out.content_length_n == -1
        || r->expect_trailers)
    {
        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

        if (r->http_version >= NGX_HTTP_VERSION_11
            && clcf->chunked_transfer_encoding)
        {
            if (r->expect_trailers) {
                ngx_http_clear_content_length(r);
            }

            r->chunked = 1;

            ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_chunked_filter_ctx_t));
            if (ctx == NULL) {
                return NGX_ERROR;
            }

     ...",59.0,101.0,1.0,1.0,43.0,35,11,32,13,0,3,6,11,0,1,,0,3,2,1,1,ngx_int_t
4889,112112,ngx_http_chunked_body_filter,1,ngx_http_chunked_body_filter,"ngx_int_t ngx_http_chunked_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_chunked_filter_module.c,"static ngx_int_t
ngx_http_chunked_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    u_char                         *chunk;
    off_t                           size;
    ngx_int_t                       rc;
    ngx_buf_t                      *b;
    ngx_chain_t                    *out, *cl, *tl, **ll;
    ngx_http_chunked_filter_ctx_t  *ctx;

    if (in == NULL || !r->chunked || r->header_only) {
        return ngx_http_next_body_filter(r, in);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_chunked_filter_module);

    out = NULL;
    ll = &out;

    size = 0;
    cl = in;

    for ( ;; ) {
        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http chunk: %O"", ngx_buf_size(cl->buf));

        size += ngx_buf_size(cl->buf);

        if (cl->buf->flush
            || cl->buf->sync
            || ngx_buf_in_memory(cl->buf)
            || cl->buf->in_file)
        {
            tl = ngx_alloc_chain_link(r->pool);
            if (tl == NULL...",104.0,225.0,1.0,1.0,122.0,88,9,91,16,0,10,14,23,0,4,,0,9,4,2,2,ngx_int_t
4890,112907,ngx_http_dav_handler,1,ngx_http_dav_handler,ngx_int_t ngx_http_dav_handler (ngx_http_request_t*),http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_handler(ngx_http_request_t *r)
{
    ngx_int_t                 rc;
    ngx_http_dav_loc_conf_t  *dlcf;

    dlcf = ngx_http_get_module_loc_conf(r, ngx_http_dav_module);

    if (!(r->method & dlcf->methods)) {
        return NGX_DECLINED;
    }

    switch (r->method) {

    case NGX_HTTP_PUT:

        if (r->uri.data[r->uri.len - 1] == '/') {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""cannot PUT to a collection"");
            return NGX_HTTP_CONFLICT;
        }

        if (r->headers_in.content_range) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""PUT with range is unsupported"");
            return NGX_HTTP_NOT_IMPLEMENTED;
        }

        r->request_body_in_file_only = 1;
        r->request_body_in_persistent_file = 1;
        r->request_body_in_clean_file = 1;
        r->request_body_file_group_access = 1;
        r->request_body_file_log_level = 0;

       ...",142.0,202.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4891,112912,ngx_http_dav_put_handler,1,ngx_http_dav_put_handler,void ngx_http_dav_put_handler (ngx_http_request_t*),http\modules\ngx_http_dav_module.c,"static void
ngx_http_dav_put_handler(ngx_http_request_t *r)
{
    size_t                    root;
    time_t                    date;
    ngx_str_t                *temp, path;
    ngx_uint_t                status;
    ngx_file_info_t           fi;
    ngx_ext_rename_file_t     ext;
    ngx_http_dav_loc_conf_t  *dlcf;

    if (r->request_body == NULL) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""PUT request body is unavailable"");
        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return;
    }

    if (r->request_body->temp_file == NULL) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""PUT request body must be in a file"");
        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return;
    }

    if (ngx_http_map_uri_to_path(r, &path, &root, 0) == NULL) {
        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return;
    }

    path.len--;

 ...",205.0,301.0,1.0,1.0,97.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4892,112917,ngx_http_dav_delete_handler,1,ngx_http_dav_delete_handler,ngx_int_t ngx_http_dav_delete_handler (ngx_http_request_t*),http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_delete_handler(ngx_http_request_t *r)
{
    size_t                    root;
    ngx_err_t                 err;
    ngx_int_t                 rc, depth;
    ngx_uint_t                i, d, dir;
    ngx_str_t                 path;
    ngx_file_info_t           fi;
    ngx_http_dav_loc_conf_t  *dlcf;

    if (r->headers_in.content_length_n > 0 || r->headers_in.chunked) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""DELETE with body is unsupported"");
        return NGX_HTTP_UNSUPPORTED_MEDIA_TYPE;
    }

    dlcf = ngx_http_get_module_loc_conf(r, ngx_http_dav_module);

    if (dlcf->min_delete_depth) {
        d = 0;

        for (i = 0; i < r->uri.len; /* void */) {
            if (r->uri.data[i++] == '/') {
                if (++d >= dlcf->min_delete_depth && i < r->uri.len) {
                    goto ok;
                }
            }
        }

        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
               ...",304.0,402.0,1.0,38.0,99.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4893,112922,ngx_http_dav_delete_path,1,ngx_http_dav_delete_path,"ngx_int_t ngx_http_dav_delete_path (ngx_http_request_t*,ngx_str_t*,ngx_uint_t)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_delete_path(ngx_http_request_t *r, ngx_str_t *path, ngx_uint_t dir)
{
    char            *failed;
    ngx_tree_ctx_t   tree;

    if (dir) {

        tree.init_handler = NULL;
        tree.file_handler = ngx_http_dav_delete_file;
        tree.pre_tree_handler = ngx_http_dav_noop;
        tree.post_tree_handler = ngx_http_dav_delete_dir;
        tree.spec_handler = ngx_http_dav_delete_file;
        tree.data = NULL;
        tree.alloc = 0;
        tree.log = r->connection->log;

        /* TODO: 207 */

        if (ngx_walk_tree(&tree, path) != NGX_OK) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }

        if (ngx_delete_dir(path->data) != NGX_FILE_ERROR) {
            return NGX_OK;
        }

        failed = ngx_delete_dir_n;

    } else {

        if (ngx_delete_file(path->data) != NGX_FILE_ERROR) {
            return NGX_OK;
        }

        failed = ngx_delete_file_n;
    }

    return ngx_http_dav_error(r->connection->log, ngx_...",405.0,445.0,1.0,1.0,41.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4894,112929,ngx_http_dav_delete_dir,1,ngx_http_dav_delete_dir,"ngx_int_t ngx_http_dav_delete_dir (ngx_tree_ctx_t*,ngx_str_t*)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_delete_dir(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http delete dir: \""%s\"""", path->data);

    if (ngx_delete_dir(path->data) == NGX_FILE_ERROR) {

        /* TODO: add to 207 */

        (void) ngx_http_dav_error(ctx->log, ngx_errno, 0, ngx_delete_dir_n,
                                  path->data);
    }

    return NGX_OK;
}",448.0,463.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4895,112935,ngx_http_dav_delete_file,1,ngx_http_dav_delete_file,"ngx_int_t ngx_http_dav_delete_file (ngx_tree_ctx_t*,ngx_str_t*)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_delete_file(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http delete file: \""%s\"""", path->data);

    if (ngx_delete_file(path->data) == NGX_FILE_ERROR) {

        /* TODO: add to 207 */

        (void) ngx_http_dav_error(ctx->log, ngx_errno, 0, ngx_delete_file_n,
                                  path->data);
    }

    return NGX_OK;
}",466.0,481.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4896,112941,ngx_http_dav_noop,1,ngx_http_dav_noop,"ngx_int_t ngx_http_dav_noop (ngx_tree_ctx_t*,ngx_str_t*)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_noop(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    return NGX_OK;
}",484.0,488.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4897,112947,ngx_http_dav_mkcol_handler,1,ngx_http_dav_mkcol_handler,"ngx_int_t ngx_http_dav_mkcol_handler (ngx_http_request_t*,ngx_http_dav_loc_conf_t*)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_mkcol_handler(ngx_http_request_t *r, ngx_http_dav_loc_conf_t *dlcf)
{
    u_char    *p;
    size_t     root;
    ngx_str_t  path;

    if (r->headers_in.content_length_n > 0 || r->headers_in.chunked) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""MKCOL with body is unsupported"");
        return NGX_HTTP_UNSUPPORTED_MEDIA_TYPE;
    }

    if (r->uri.data[r->uri.len - 1] != '/') {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""MKCOL can create a collection only"");
        return NGX_HTTP_CONFLICT;
    }

    p = ngx_http_map_uri_to_path(r, &path, &root, 0);
    if (p == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    *(p - 1) = '\0';

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http mkcol path: \""%s\"""", path.data);

    if (ngx_create_dir(path.data, ngx_dir_access(dlcf->access))
        != NGX_FILE_ERROR)
    {
        if (ngx_http...",491.0,532.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4898,112953,ngx_http_dav_copy_move_handler,1,ngx_http_dav_copy_move_handler,ngx_int_t ngx_http_dav_copy_move_handler (ngx_http_request_t*),http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_copy_move_handler(ngx_http_request_t *r)
{
    u_char                   *p, *host, *last, ch;
    size_t                    len, root;
    ngx_err_t                 err;
    ngx_int_t                 rc, depth;
    ngx_uint_t                overwrite, slash, dir, flags;
    ngx_str_t                 path, uri, duri, args;
    ngx_tree_ctx_t            tree;
    ngx_copy_file_t           cf;
    ngx_file_info_t           fi;
    ngx_table_elt_t          *dest, *over;
    ngx_ext_rename_file_t     ext;
    ngx_http_dav_copy_ctx_t   copy;
    ngx_http_dav_loc_conf_t  *dlcf;

    if (r->headers_in.content_length_n > 0 || r->headers_in.chunked) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""COPY and MOVE with body are unsupported"");
        return NGX_HTTP_UNSUPPORTED_MEDIA_TYPE;
    }

    dest = r->headers_in.destination;

    if (dest == NULL) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                 ...",535.0,857.0,1.0,34.0,323.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4899,112958,ngx_http_dav_copy_dir,1,ngx_http_dav_copy_dir,"ngx_int_t ngx_http_dav_copy_dir (ngx_tree_ctx_t*,ngx_str_t*)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_copy_dir(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    u_char                   *p, *dir;
    size_t                    len;
    ngx_http_dav_copy_ctx_t  *copy;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http copy dir: \""%s\"""", path->data);

    copy = ctx->data;

    len = copy->path.len + path->len;

    dir = ngx_alloc(len + 1, ctx->log);
    if (dir == NULL) {
        return NGX_ABORT;
    }

    p = ngx_cpymem(dir, copy->path.data, copy->path.len);
    (void) ngx_cpystrn(p, path->data + copy->len, path->len - copy->len + 1);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http copy dir to: \""%s\"""", dir);

    if (ngx_create_dir(dir, ngx_dir_access(ctx->access)) == NGX_FILE_ERROR) {
        (void) ngx_http_dav_error(ctx->log, ngx_errno, 0, ngx_create_dir_n,
                                  dir);
    }

    ngx_free(dir);

    return NGX_OK;
}",860.0,893.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4900,112964,ngx_http_dav_copy_dir_time,1,ngx_http_dav_copy_dir_time,"ngx_int_t ngx_http_dav_copy_dir_time (ngx_tree_ctx_t*,ngx_str_t*)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_copy_dir_time(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    u_char                   *p, *dir;
    size_t                    len;
    ngx_http_dav_copy_ctx_t  *copy;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http copy dir time: \""%s\"""", path->data);

    copy = ctx->data;

    len = copy->path.len + path->len;

    dir = ngx_alloc(len + 1, ctx->log);
    if (dir == NULL) {
        return NGX_ABORT;
    }

    p = ngx_cpymem(dir, copy->path.data, copy->path.len);
    (void) ngx_cpystrn(p, path->data + copy->len, path->len - copy->len + 1);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http copy dir time to: \""%s\"""", dir);

#if (NGX_WIN32)
    {
    ngx_fd_t  fd;

    fd = ngx_open_file(dir, NGX_FILE_RDWR, NGX_FILE_OPEN, 0);

    if (fd == NGX_INVALID_FILE) {
        (void) ngx_http_dav_error(ctx->log, ngx_errno, 0, ngx_open_file_n, dir);
        goto failed;
    }

    if (ngx_set_file_time(NULL, fd...",896.0,957.0,1.0,1.0,62.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4901,112970,ngx_http_dav_copy_tree_file,1,ngx_http_dav_copy_tree_file,"ngx_int_t ngx_http_dav_copy_tree_file (ngx_tree_ctx_t*,ngx_str_t*)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_copy_tree_file(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    u_char                   *p, *file;
    size_t                    len;
    ngx_copy_file_t           cf;
    ngx_http_dav_copy_ctx_t  *copy;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http copy file: \""%s\"""", path->data);

    copy = ctx->data;

    len = copy->path.len + path->len;

    file = ngx_alloc(len + 1, ctx->log);
    if (file == NULL) {
        return NGX_ABORT;
    }

    p = ngx_cpymem(file, copy->path.data, copy->path.len);
    (void) ngx_cpystrn(p, path->data + copy->len, path->len - copy->len + 1);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http copy file to: \""%s\"""", file);

    cf.size = ctx->size;
    cf.buf_size = 0;
    cf.access = ctx->access;
    cf.time = ctx->mtime;
    cf.log = ctx->log;

    (void) ngx_copy_file(path->data, file, &cf);

    ngx_free(file);

    return NGX_OK;
}",960.0,997.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4902,112976,ngx_http_dav_depth,1,ngx_http_dav_depth,"ngx_int_t ngx_http_dav_depth (ngx_http_request_t*,ngx_int_t)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_depth(ngx_http_request_t *r, ngx_int_t dflt)
{
    ngx_table_elt_t  *depth;

    depth = r->headers_in.depth;

    if (depth == NULL) {
        return dflt;
    }

    if (depth->value.len == 1) {

        if (depth->value.data[0] == '0') {
            return 0;
        }

        if (depth->value.data[0] == '1') {
            return 1;
        }

    } else {

        if (depth->value.len == sizeof(""infinity"") - 1
            && ngx_strcmp(depth->value.data, ""infinity"") == 0)
        {
            return NGX_HTTP_DAV_INFINITY_DEPTH;
        }
    }

    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                  ""client sent invalid \""Depth\"" header: \""%V\"""",
                  &depth->value);

    return NGX_HTTP_DAV_INVALID_DEPTH;
}",1000.0,1035.0,1.0,19.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4903,112982,ngx_http_dav_error,1,ngx_http_dav_error,"ngx_int_t ngx_http_dav_error (ngx_log_t*,ngx_err_t,ngx_int_t,char*,u_char*)",http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_error(ngx_log_t *log, ngx_err_t err, ngx_int_t not_found,
    char *failed, u_char *path)
{
    ngx_int_t   rc;
    ngx_uint_t  level;

    if (err == NGX_ENOENT || err == NGX_ENOTDIR || err == NGX_ENAMETOOLONG) {
        level = NGX_LOG_ERR;
        rc = not_found;

    } else if (err == NGX_EACCES || err == NGX_EPERM) {
        level = NGX_LOG_ERR;
        rc = NGX_HTTP_FORBIDDEN;

    } else if (err == NGX_EEXIST) {
        level = NGX_LOG_ERR;
        rc = NGX_HTTP_NOT_ALLOWED;

    } else if (err == NGX_ENOSPC) {
        level = NGX_LOG_CRIT;
        rc = NGX_HTTP_INSUFFICIENT_STORAGE;

    } else {
        level = NGX_LOG_CRIT;
        rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ngx_log_error(level, log, err, ""%s \""%s\"" failed"", failed, path);

    return rc;
}",1038.0,1069.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
4904,112991,ngx_http_dav_location,1,ngx_http_dav_location,ngx_int_t ngx_http_dav_location (ngx_http_request_t*),http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_location(ngx_http_request_t *r)
{
    u_char     *p;
    size_t      len;
    uintptr_t   escape;

    r->headers_out.location = ngx_list_push(&r->headers_out.headers);
    if (r->headers_out.location == NULL) {
        return NGX_ERROR;
    }

    r->headers_out.location->hash = 1;
    ngx_str_set(&r->headers_out.location->key, ""Location"");

    escape = 2 * ngx_escape_uri(NULL, r->uri.data, r->uri.len, NGX_ESCAPE_URI);

    if (escape) {
        len = r->uri.len + escape;

        p = ngx_pnalloc(r->pool, len);
        if (p == NULL) {
            ngx_http_clear_location(r);
            return NGX_ERROR;
        }

        r->headers_out.location->value.len = len;
        r->headers_out.location->value.data = p;

        ngx_escape_uri(p, r->uri.data, r->uri.len, NGX_ESCAPE_URI);

    } else {
        r->headers_out.location->value = r->uri;
    }

    return NGX_OK;
}",1072.0,1108.0,1.0,1.0,37.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4905,112996,ngx_http_dav_create_loc_conf,1,ngx_http_dav_create_loc_conf,void* ngx_http_dav_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_dav_module.c,"static void *
ngx_http_dav_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_dav_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_dav_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->methods = 0;
     */

    conf->min_delete_depth = NGX_CONF_UNSET_UINT;
    conf->access = NGX_CONF_UNSET_UINT;
    conf->create_full_put_path = NGX_CONF_UNSET;

    return conf;
}",1111.0,1132.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4906,113001,ngx_http_dav_merge_loc_conf,1,ngx_http_dav_merge_loc_conf,"char* ngx_http_dav_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_dav_module.c,"static char *
ngx_http_dav_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_dav_loc_conf_t  *prev = parent;
    ngx_http_dav_loc_conf_t  *conf = child;

    ngx_conf_merge_bitmask_value(conf->methods, prev->methods,
                         (NGX_CONF_BITMASK_SET|NGX_HTTP_DAV_OFF));

    ngx_conf_merge_uint_value(conf->min_delete_depth,
                         prev->min_delete_depth, 0);

    ngx_conf_merge_uint_value(conf->access, prev->access, 0600);

    ngx_conf_merge_value(conf->create_full_put_path,
                         prev->create_full_put_path, 0);

    return NGX_CONF_OK;
}",1135.0,1153.0,1.0,47.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4907,113008,ngx_http_dav_init,1,ngx_http_dav_init,ngx_int_t ngx_http_dav_init (ngx_conf_t*),http\modules\ngx_http_dav_module.c,"static ngx_int_t
ngx_http_dav_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_CONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_dav_handler;

    return NGX_OK;
}",1156.0,1172.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4908,116089,ngx_http_degradation_create_main_conf,1,ngx_http_degradation_create_main_conf,void* ngx_http_degradation_create_main_conf (ngx_conf_t*),http\modules\ngx_http_degradation_module.c,"static void *
ngx_http_degradation_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_degradation_main_conf_t  *dmcf;

    dmcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_degradation_main_conf_t));
    if (dmcf == NULL) {
        return NULL;
    }

    return dmcf;
}",154.0,165.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4909,116094,ngx_http_degradation_create_loc_conf,1,ngx_http_degradation_create_loc_conf,void* ngx_http_degradation_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_degradation_module.c,"static void *
ngx_http_degradation_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_degradation_loc_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_degradation_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->degrade = NGX_CONF_UNSET_UINT;

    return conf;
}",168.0,181.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4910,116099,ngx_http_degradation_merge_loc_conf,1,ngx_http_degradation_merge_loc_conf,"char* ngx_http_degradation_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_degradation_module.c,"static char *
ngx_http_degradation_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_degradation_loc_conf_t  *prev = parent;
    ngx_http_degradation_loc_conf_t  *conf = child;

    ngx_conf_merge_uint_value(conf->degrade, prev->degrade, 0);

    return NGX_CONF_OK;
}",184.0,193.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4911,116106,ngx_http_degradation,1,ngx_http_degradation,"char* ngx_http_degradation (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_degradation_module.c,"static char *
ngx_http_degradation(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_degradation_main_conf_t  *dmcf = conf;

    ngx_str_t  *value, s;

    value = cf->args->elts;

    if (ngx_strncmp(value[1].data, ""sbrk="", 5) == 0) {

        s.len = value[1].len - 5;
        s.data = value[1].data + 5;

        dmcf->sbrk_size = ngx_parse_size(&s);
        if (dmcf->sbrk_size == (size_t) NGX_ERROR) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid sbrk size \""%V\"""", &value[1]);
            return NGX_CONF_ERROR;
        }

        return NGX_CONF_OK;
    }

    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                       ""invalid parameter \""%V\"""", &value[1]);

    return NGX_CONF_ERROR;
}",196.0,224.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4912,116113,ngx_http_degradation_init,1,ngx_http_degradation_init,ngx_int_t ngx_http_degradation_init (ngx_conf_t*),http\modules\ngx_http_degradation_module.c,"static ngx_int_t
ngx_http_degradation_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_PREACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_degradation_handler;

    return NGX_OK;
}",227.0,243.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4913,116179,ngx_http_degradation_handler,1,ngx_http_degradation_handler,ngx_int_t ngx_http_degradation_handler (ngx_http_request_t*),http\modules\ngx_http_degradation_module.c,"static ngx_int_t
ngx_http_degradation_handler(ngx_http_request_t *r)
{
    ngx_http_degradation_loc_conf_t  *dlcf;

    dlcf = ngx_http_get_module_loc_conf(r, ngx_http_degradation_module);

    if (dlcf->degrade && ngx_http_degraded(r)) {
        return dlcf->degrade;
    }

    return NGX_DECLINED;
}",90.0,102.0,1.0,1.0,13.0,4,3,7,4,0,4,2,2,2,1,,0,4,2,1,1,ngx_int_t
4914,116204,ngx_http_degraded,1,ngx_http_degraded,ngx_uint_t ngx_http_degraded (ngx_http_request_t*),http\modules\ngx_http_degradation_module.c,"ngx_uint_t
ngx_http_degraded(ngx_http_request_t *r)
{
    time_t                             now;
    ngx_uint_t                         log;
    static size_t                      sbrk_size;
    static time_t                      sbrk_time;
    ngx_http_degradation_main_conf_t  *dmcf;

    dmcf = ngx_http_get_module_main_conf(r, ngx_http_degradation_module);

    if (dmcf->sbrk_size) {

        log = 0;
        now = ngx_time();

        /* lock mutex */

        if (now != sbrk_time) {

            /*
             * ELF/i386 is loaded at 0x08000000, 128M
             * ELF/amd64 is loaded at 0x00400000, 4M
             *
             * use a function address to subtract the loading address
             */

            sbrk_size = (size_t) sbrk(0) - ((uintptr_t) ngx_palloc & ~0x3FFFFF);
            sbrk_time = now;
            log = 1;
        }

        /* unlock mutex */

        if (sbrk_size >= dmcf->sbrk_size) {
            if (log) {
                ngx_log_error(NGX_LOG_NOTI...",105.0,151.0,1.0,1.0,47.0,19,10,19,9,1,4,5,9,2,1,,0,3,2,1,1,ngx_uint_t
4915,116499,ngx_http_empty_gif,1,ngx_http_empty_gif,"char* ngx_http_empty_gif (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_empty_gif_module.c,"static char *
ngx_http_empty_gif(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_empty_gif_handler;

    return NGX_CONF_OK;
}",131.0,140.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4916,116602,ngx_http_empty_gif_handler,1,ngx_http_empty_gif_handler,ngx_int_t ngx_http_empty_gif_handler (ngx_http_request_t*),http\modules\ngx_http_empty_gif_module.c,"static ngx_int_t
ngx_http_empty_gif_handler(ngx_http_request_t *r)
{
    ngx_http_complex_value_t  cv;

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
        return NGX_HTTP_NOT_ALLOWED;
    }

    ngx_memzero(&cv, sizeof(ngx_http_complex_value_t));

    cv.value.len = sizeof(ngx_empty_gif);
    cv.value.data = ngx_empty_gif;
    r->headers_out.last_modified_time = 23349600;

    return ngx_http_send_response(r, NGX_HTTP_OK, &ngx_http_gif_type, &cv);
}",112.0,128.0,1.0,1.0,17.0,18,8,15,9,0,6,2,2,0,1,,0,5,2,1,1,ngx_int_t
4917,116784,ngx_http_fastcgi_eval,1,ngx_http_fastcgi_eval,"ngx_int_t ngx_http_fastcgi_eval (ngx_http_request_t*,ngx_http_fastcgi_loc_conf_t*)",http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_eval(ngx_http_request_t *r, ngx_http_fastcgi_loc_conf_t *flcf)
{
    ngx_url_t             url;
    ngx_http_upstream_t  *u;

    ngx_memzero(&url, sizeof(ngx_url_t));

    if (ngx_http_script_run(r, &url.url, flcf->fastcgi_lengths->elts, 0,
                            flcf->fastcgi_values->elts)
        == NULL)
    {
        return NGX_ERROR;
    }

    url.no_resolve = 1;

    if (ngx_parse_url(r->pool, &url) != NGX_OK) {
        if (url.err) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""%s in upstream \""%V\"""", url.err, &url.url);
        }

        return NGX_ERROR;
    }

    u = r->upstream;

    u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
    if (u->resolved == NULL) {
        return NGX_ERROR;
    }

    if (url.addrs) {
        u->resolved->sockaddr = url.addrs[0].sockaddr;
        u->resolved->socklen = url.addrs[0].socklen;
        u->resolved->name = url.addrs[0]....",761.0,806.0,1.0,1.0,46.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4918,116790,ngx_http_fastcgi_create_request,1,ngx_http_fastcgi_create_request,ngx_int_t ngx_http_fastcgi_create_request (ngx_http_request_t*),http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_create_request(ngx_http_request_t *r)
{
    off_t                         file_pos;
    u_char                        ch, *pos, *lowcase_key;
    size_t                        size, len, key_len, val_len, padding,
                                  allocated;
    ngx_uint_t                    i, n, next, hash, skip_empty, header_params;
    ngx_buf_t                    *b;
    ngx_chain_t                  *cl, *body;
    ngx_list_part_t              *part;
    ngx_table_elt_t              *header, **ignored;
    ngx_http_upstream_t          *u;
    ngx_http_script_code_pt       code;
    ngx_http_script_engine_t      e, le;
    ngx_http_fastcgi_header_t    *h;
    ngx_http_fastcgi_params_t    *params;
    ngx_http_fastcgi_loc_conf_t  *flcf;
    ngx_http_script_len_code_pt   lcode;

    len = 0;
    header_params = 0;
    ignored = NULL;

    u = r->upstream;

    flcf = ngx_http_get_module_loc_conf(r, ngx_http_fastcgi_module);

#if (NGX_HTTP_CACHE)
 ...",834.0,1320.0,1.0,26.0,487.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4919,116795,ngx_http_fastcgi_reinit_request,1,ngx_http_fastcgi_reinit_request,ngx_int_t ngx_http_fastcgi_reinit_request (ngx_http_request_t*),http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_reinit_request(ngx_http_request_t *r)
{
    ngx_http_fastcgi_ctx_t  *f;

    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);

    if (f == NULL) {
        return NGX_OK;
    }

    f->state = ngx_http_fastcgi_st_version;
    f->fastcgi_stdout = 0;
    f->large_stderr = 0;

    if (f->split_parts) {
        f->split_parts->nelts = 0;
    }

    r->state = 0;

    return NGX_OK;
}",1323.0,1345.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4920,116800,ngx_http_fastcgi_body_output_filter,1,ngx_http_fastcgi_body_output_filter,"ngx_int_t ngx_http_fastcgi_body_output_filter (void*,ngx_chain_t*)",http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_body_output_filter(void *data, ngx_chain_t *in)
{
    ngx_http_request_t  *r = data;

    off_t                       file_pos;
    u_char                     *pos, *start;
    size_t                      len, padding;
    ngx_buf_t                  *b;
    ngx_int_t                   rc;
    ngx_uint_t                  next, last;
    ngx_chain_t                *cl, *tl, *out, **ll;
    ngx_http_fastcgi_ctx_t     *f;
    ngx_http_fastcgi_header_t  *h;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""fastcgi output filter"");

    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);

    if (in == NULL) {
        out = in;
        goto out;
    }

    out = NULL;
    ll = &out;

    if (!f->header_sent) {
        /* first buffer contains headers, pass it unmodified */

        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""fastcgi output header"");

        f->header_sent = 1;

 ...",1348.0,1633.0,1.0,22.0,286.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4921,116806,ngx_http_fastcgi_process_header,1,ngx_http_fastcgi_process_header,ngx_int_t ngx_http_fastcgi_process_header (ngx_http_request_t*),http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_process_header(ngx_http_request_t *r)
{
    u_char                         *p, *msg, *start, *last,
                                   *part_start, *part_end;
    size_t                          size;
    ngx_str_t                      *status_line, *pattern;
    ngx_int_t                       rc, status;
    ngx_buf_t                       buf;
    ngx_uint_t                      i;
    ngx_table_elt_t                *h;
    ngx_http_upstream_t            *u;
    ngx_http_fastcgi_ctx_t         *f;
    ngx_http_upstream_header_t     *hh;
    ngx_http_fastcgi_loc_conf_t    *flcf;
    ngx_http_fastcgi_split_part_t  *part;
    ngx_http_upstream_main_conf_t  *umcf;

    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);

    umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);

    u = r->upstream;

    for ( ;; ) {

        if (f->state < ngx_http_fastcgi_st_data) {

            f->pos = u->buffer.pos;
            f->last = u->buff...",1636.0,2077.0,1.0,27.0,442.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4922,116811,ngx_http_fastcgi_input_filter_init,1,ngx_http_fastcgi_input_filter_init,ngx_int_t ngx_http_fastcgi_input_filter_init (void*),http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_input_filter_init(void *data)
{
    ngx_http_request_t  *r = data;

    ngx_http_upstream_t          *u;
    ngx_http_fastcgi_ctx_t       *f;
    ngx_http_fastcgi_loc_conf_t  *flcf;

    u = r->upstream;

    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);
    flcf = ngx_http_get_module_loc_conf(r, ngx_http_fastcgi_module);

    u->pipe->length = flcf->keep_conn ?
                      (off_t) sizeof(ngx_http_fastcgi_header_t) : -1;

    if (u->headers_in.status_n == NGX_HTTP_NO_CONTENT
        || u->headers_in.status_n == NGX_HTTP_NOT_MODIFIED)
    {
        f->rest = 0;

    } else if (r->method == NGX_HTTP_HEAD) {
        f->rest = -2;

    } else {
        f->rest = u->headers_in.content_length_n;
    }

    return NGX_OK;
}",2080.0,2110.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4923,116816,ngx_http_fastcgi_input_filter,1,ngx_http_fastcgi_input_filter,"ngx_int_t ngx_http_fastcgi_input_filter (ngx_event_pipe_t*,ngx_buf_t*)",http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_input_filter(ngx_event_pipe_t *p, ngx_buf_t *buf)
{
    u_char                       *m, *msg;
    ngx_int_t                     rc;
    ngx_buf_t                    *b, **prev;
    ngx_chain_t                  *cl;
    ngx_http_request_t           *r;
    ngx_http_fastcgi_ctx_t       *f;
    ngx_http_fastcgi_loc_conf_t  *flcf;

    if (buf->pos == buf->last) {
        return NGX_OK;
    }

    r = p->input_ctx;
    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);
    flcf = ngx_http_get_module_loc_conf(r, ngx_http_fastcgi_module);

    if (p->upstream_done || f->closed) {
        r->upstream->keepalive = 0;

        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, p->log, 0,
                       ""http fastcgi data after close"");

        return NGX_OK;
    }

    b = NULL;
    prev = &buf->shadow;

    f->pos = buf->pos;
    f->last = buf->last;

    for ( ;; ) {
        if (f->state < ngx_http_fastcgi_st_data) {

            rc = ngx_http_fastcgi_proc...",2113.0,2417.0,1.0,27.0,305.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4924,116822,ngx_http_fastcgi_non_buffered_filter,1,ngx_http_fastcgi_non_buffered_filter,"ngx_int_t ngx_http_fastcgi_non_buffered_filter (void*,ssize_t)",http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_non_buffered_filter(void *data, ssize_t bytes)
{
    u_char                  *m, *msg;
    ngx_int_t                rc;
    ngx_buf_t               *b, *buf;
    ngx_chain_t             *cl, **ll;
    ngx_http_request_t      *r;
    ngx_http_upstream_t     *u;
    ngx_http_fastcgi_ctx_t  *f;

    r = data;
    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);

    u = r->upstream;
    buf = &u->buffer;

    buf->pos = buf->last;
    buf->last += bytes;

    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
        ll = &cl->next;
    }

    f->pos = buf->pos;
    f->last = buf->last;

    for ( ;; ) {
        if (f->state < ngx_http_fastcgi_st_data) {

            rc = ngx_http_fastcgi_process_record(r, f);

            if (rc == NGX_AGAIN) {
                break;
            }

            if (rc == NGX_ERROR) {
                return NGX_ERROR;
            }

            if (f->type == NGX_HTTP_FASTCGI_STDOUT && f->length == 0...",2420.0,2633.0,1.0,27.0,214.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4925,116828,ngx_http_fastcgi_process_record,1,ngx_http_fastcgi_process_record,"ngx_int_t ngx_http_fastcgi_process_record (ngx_http_request_t*,ngx_http_fastcgi_ctx_t*)",http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_process_record(ngx_http_request_t *r,
    ngx_http_fastcgi_ctx_t *f)
{
    u_char                     ch, *p;
    ngx_http_fastcgi_state_e   state;

    state = f->state;

    for (p = f->pos; p < f->last; p++) {

        ch = *p;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http fastcgi record byte: %02Xd"", ch);

        switch (state) {

        case ngx_http_fastcgi_st_version:
            if (ch != 1) {
                ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                              ""upstream sent unsupported FastCGI ""
                              ""protocol version: %d"", ch);
                return NGX_ERROR;
            }
            state = ngx_http_fastcgi_st_type;
            break;

        case ngx_http_fastcgi_st_type:
            switch (ch) {
            case NGX_HTTP_FASTCGI_STDOUT:
            case NGX_HTTP_FASTCGI_STDERR:
            case NGX_HTTP_FASTCGI_END_REQUEST:
    ...",2636.0,2740.0,1.0,17.0,105.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4926,116834,ngx_http_fastcgi_abort_request,1,ngx_http_fastcgi_abort_request,void ngx_http_fastcgi_abort_request (ngx_http_request_t*),http\modules\ngx_http_fastcgi_module.c,"static void
ngx_http_fastcgi_abort_request(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""abort http fastcgi request"");

    return;
}",2743.0,2750.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4927,116839,ngx_http_fastcgi_finalize_request,1,ngx_http_fastcgi_finalize_request,"void ngx_http_fastcgi_finalize_request (ngx_http_request_t*,ngx_int_t)",http\modules\ngx_http_fastcgi_module.c,"static void
ngx_http_fastcgi_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""finalize http fastcgi request"");

    return;
}",2753.0,2760.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
4928,116845,ngx_http_fastcgi_add_variables,1,ngx_http_fastcgi_add_variables,ngx_int_t ngx_http_fastcgi_add_variables (ngx_conf_t*),http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_fastcgi_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",2763.0,2779.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4929,116850,ngx_http_fastcgi_create_main_conf,1,ngx_http_fastcgi_create_main_conf,void* ngx_http_fastcgi_create_main_conf (ngx_conf_t*),http\modules\ngx_http_fastcgi_module.c,"static void *
ngx_http_fastcgi_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_fastcgi_main_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_fastcgi_main_conf_t));
    if (conf == NULL) {
        return NULL;
    }

#if (NGX_HTTP_CACHE)
    if (ngx_array_init(&conf->caches, cf->pool, 4,
                       sizeof(ngx_http_file_cache_t *))
        != NGX_OK)
    {
        return NULL;
    }
#endif

    return conf;
}",2782.0,2802.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4930,116855,ngx_http_fastcgi_create_loc_conf,1,ngx_http_fastcgi_create_loc_conf,void* ngx_http_fastcgi_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_fastcgi_module.c,"static void *
ngx_http_fastcgi_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_fastcgi_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_fastcgi_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->upstream.bufs.num = 0;
     *     conf->upstream.ignore_headers = 0;
     *     conf->upstream.next_upstream = 0;
     *     conf->upstream.cache_zone = NULL;
     *     conf->upstream.cache_use_stale = 0;
     *     conf->upstream.cache_methods = 0;
     *     conf->upstream.temp_path = NULL;
     *     conf->upstream.hide_headers_hash = { NULL, 0 };
     *     conf->upstream.store_lengths = NULL;
     *     conf->upstream.store_values = NULL;
     *
     *     conf->index.len = { 0, NULL };
     */

    conf->upstream.store = NGX_CONF_UNSET;
    conf->upstream.store_access = NGX_CONF_UNSET_UINT;
    conf->upstream.next_upstream_tries = NGX_CONF_UNSET_UINT;
    conf->upstream.buffering = NGX_CONF_U...",2805.0,2890.0,1.0,1.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4931,116860,ngx_http_fastcgi_merge_loc_conf,1,ngx_http_fastcgi_merge_loc_conf,"char* ngx_http_fastcgi_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_fastcgi_module.c,"static char *
ngx_http_fastcgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_fastcgi_loc_conf_t *prev = parent;
    ngx_http_fastcgi_loc_conf_t *conf = child;

    size_t                        size;
    ngx_int_t                     rc;
    ngx_hash_init_t               hash;
    ngx_http_core_loc_conf_t     *clcf;

#if (NGX_HTTP_CACHE)

    if (conf->upstream.store > 0) {
        conf->upstream.cache = 0;
    }

    if (conf->upstream.cache > 0) {
        conf->upstream.store = 0;
    }

#endif

    if (conf->upstream.store == NGX_CONF_UNSET) {
        ngx_conf_merge_value(conf->upstream.store,
                              prev->upstream.store, 0);

        conf->upstream.store_lengths = prev->upstream.store_lengths;
        conf->upstream.store_values = prev->upstream.store_values;
    }

    ngx_conf_merge_uint_value(conf->upstream.store_access,
                              prev->upstream.store_access, 0600);

    ngx_conf_merge_uint_value(conf->upst...",2893.0,3260.0,1.0,1.0,368.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4932,116867,ngx_http_fastcgi_init_params,1,ngx_http_fastcgi_init_params,"ngx_int_t ngx_http_fastcgi_init_params (ngx_conf_t*,ngx_http_fastcgi_loc_conf_t*,ngx_http_fastcgi_params_t*,ngx_keyval_t*)",http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_init_params(ngx_conf_t *cf, ngx_http_fastcgi_loc_conf_t *conf,
    ngx_http_fastcgi_params_t *params, ngx_keyval_t *default_params)
{
    u_char                       *p;
    size_t                        size;
    uintptr_t                    *code;
    ngx_uint_t                    i, nsrc;
    ngx_array_t                   headers_names, params_merged;
    ngx_keyval_t                 *h;
    ngx_hash_key_t               *hk;
    ngx_hash_init_t               hash;
    ngx_http_upstream_param_t    *src, *s;
    ngx_http_script_compile_t     sc;
    ngx_http_script_copy_code_t  *copy;

    if (params->hash.buckets) {
        return NGX_OK;
    }

    if (conf->params_source == NULL && default_params == NULL) {
        params->hash.buckets = (void *) 1;
        return NGX_OK;
    }

    params->lengths = ngx_array_create(cf->pool, 64, 1);
    if (params->lengths == NULL) {
        return NGX_ERROR;
    }

    params->values = ngx_array_create(cf->p...",3263.0,3465.0,1.0,1.0,203.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
4933,116875,ngx_http_fastcgi_script_name_variable,1,ngx_http_fastcgi_script_name_variable,"ngx_int_t ngx_http_fastcgi_script_name_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_script_name_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                       *p;
    ngx_http_fastcgi_ctx_t       *f;
    ngx_http_fastcgi_loc_conf_t  *flcf;

    flcf = ngx_http_get_module_loc_conf(r, ngx_http_fastcgi_module);

    f = ngx_http_fastcgi_split(r, flcf);

    if (f == NULL) {
        return NGX_ERROR;
    }

    if (f->script_name.len == 0
        || f->script_name.data[f->script_name.len - 1] != '/')
    {
        v->len = f->script_name.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = f->script_name.data;

        return NGX_OK;
    }

    v->len = f->script_name.len + flcf->index.len;

    v->data = ngx_pnalloc(r->pool, v->len);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    p = ngx_copy(v->data, f->script_name.data, f->script_name.len);
    ngx_memcpy(p, flcf->index.data, flcf->index.len);

    return NGX_OK;
}",3468.0,3507.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4934,116882,ngx_http_fastcgi_path_info_variable,1,ngx_http_fastcgi_path_info_variable,"ngx_int_t ngx_http_fastcgi_path_info_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_path_info_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_fastcgi_ctx_t       *f;
    ngx_http_fastcgi_loc_conf_t  *flcf;

    flcf = ngx_http_get_module_loc_conf(r, ngx_http_fastcgi_module);

    f = ngx_http_fastcgi_split(r, flcf);

    if (f == NULL) {
        return NGX_ERROR;
    }

    v->len = f->path_info.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = f->path_info.data;

    return NGX_OK;
}",3510.0,3532.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4935,116889,ngx_http_fastcgi_split,1,ngx_http_fastcgi_split,"ngx_http_fastcgi_ctx_t* ngx_http_fastcgi_split (ngx_http_request_t*,ngx_http_fastcgi_loc_conf_t*)",http\modules\ngx_http_fastcgi_module.c,"static ngx_http_fastcgi_ctx_t *
ngx_http_fastcgi_split(ngx_http_request_t *r, ngx_http_fastcgi_loc_conf_t *flcf)
{
    ngx_http_fastcgi_ctx_t       *f;
#if (NGX_PCRE)
    ngx_int_t                     n;
    int                           captures[(1 + 2) * 3];

    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);

    if (f == NULL) {
        f = ngx_pcalloc(r->pool, sizeof(ngx_http_fastcgi_ctx_t));
        if (f == NULL) {
            return NULL;
        }

        ngx_http_set_ctx(r, f, ngx_http_fastcgi_module);
    }

    if (f->script_name.len) {
        return f;
    }

    if (flcf->split_regex == NULL) {
        f->script_name = r->uri;
        return f;
    }

    n = ngx_regex_exec(flcf->split_regex, &r->uri, captures, (1 + 2) * 3);

    if (n >= 0) { /* match */
        f->script_name.len = captures[3] - captures[2];
        f->script_name.data = r->uri.data + captures[2];

        f->path_info.len = captures[5] - captures[4];
        f->path_info.data = r->uri.da...",3535.0,3603.0,1.0,1.0,69.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_http_fastcgi_ctx_t
4936,116895,ngx_http_fastcgi_pass,1,ngx_http_fastcgi_pass,"char* ngx_http_fastcgi_pass (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_fastcgi_module.c,"static char *
ngx_http_fastcgi_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_fastcgi_loc_conf_t *flcf = conf;

    ngx_url_t                   u;
    ngx_str_t                  *value, *url;
    ngx_uint_t                  n;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_script_compile_t   sc;

    if (flcf->upstream.upstream || flcf->fastcgi_lengths) {
        return ""is duplicate"";
    }

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);

    clcf->handler = ngx_http_fastcgi_handler;

    if (clcf->name.len && clcf->name.data[clcf->name.len - 1] == '/') {
        clcf->auto_redirect = 1;
    }

    value = cf->args->elts;

    url = &value[1];

    n = ngx_http_script_variables_count(url);

    if (n) {

        ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

        sc.cf = cf;
        sc.source = url;
        sc.lengths = &flcf->fastcgi_lengths;
        sc.values = &flcf->fastcgi_values;
        sc.variables = n;
        sc....",3606.0,3665.0,1.0,1.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4937,116902,ngx_http_fastcgi_split_path_info,1,ngx_http_fastcgi_split_path_info,"char* ngx_http_fastcgi_split_path_info (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_fastcgi_module.c,"static char *
ngx_http_fastcgi_split_path_info(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
#if (NGX_PCRE)
    ngx_http_fastcgi_loc_conf_t *flcf = conf;

    ngx_str_t            *value;
    ngx_regex_compile_t   rc;
    u_char                errstr[NGX_MAX_CONF_ERRSTR];

    value = cf->args->elts;

    flcf->split_name = value[1];

    ngx_memzero(&rc, sizeof(ngx_regex_compile_t));

    rc.pattern = value[1];
    rc.pool = cf->pool;
    rc.err.len = NGX_MAX_CONF_ERRSTR;
    rc.err.data = errstr;

    if (ngx_regex_compile(&rc) != NGX_OK) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, ""%V"", &rc.err);
        return NGX_CONF_ERROR;
    }

    if (rc.captures != 2) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""pattern \""%V\"" must have 2 captures"", &value[1]);
        return NGX_CONF_ERROR;
    }

    flcf->split_regex = rc.regex;

    return NGX_CONF_OK;

#else

    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                       ""\""%V\"" requi...",3668.0,3711.0,1.0,1.0,44.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4938,116909,ngx_http_fastcgi_store,1,ngx_http_fastcgi_store,"char* ngx_http_fastcgi_store (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_fastcgi_module.c,"static char *
ngx_http_fastcgi_store(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_fastcgi_loc_conf_t *flcf = conf;

    ngx_str_t                  *value;
    ngx_http_script_compile_t   sc;

    if (flcf->upstream.store != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        flcf->upstream.store = 0;
        return NGX_CONF_OK;
    }

#if (NGX_HTTP_CACHE)
    if (flcf->upstream.cache > 0) {
        return ""is incompatible with \""fastcgi_cache\"""";
    }
#endif

    flcf->upstream.store = 1;

    if (ngx_strcmp(value[1].data, ""on"") == 0) {
        return NGX_CONF_OK;
    }

    /* include the terminating '\0' into script */
    value[1].len++;

    ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

    sc.cf = cf;
    sc.source = &value[1];
    sc.lengths = &flcf->upstream.store_lengths;
    sc.values = &flcf->upstream.store_values;
    sc.variables = ngx_http_script_variable...",3714.0,3763.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4939,116916,ngx_http_fastcgi_lowat_check,1,ngx_http_fastcgi_lowat_check,"char* ngx_http_fastcgi_lowat_check (ngx_conf_t*,void*,void*)",http\modules\ngx_http_fastcgi_module.c,"static char *
ngx_http_fastcgi_lowat_check(ngx_conf_t *cf, void *post, void *data)
{
#if (NGX_FREEBSD)
    ssize_t *np = data;

    if ((u_long) *np >= ngx_freebsd_net_inet_tcp_sendspace) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""\""fastcgi_send_lowat\"" must be less than %d ""
                           ""(sysctl net.inet.tcp.sendspace)"",
                           ngx_freebsd_net_inet_tcp_sendspace);

        return NGX_CONF_ERROR;
    }

#elif !(NGX_HAVE_SO_SNDLOWAT)
    ssize_t *np = data;

    ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                       ""\""fastcgi_send_lowat\"" is not supported, ignored"");

    *np = 0;

#endif

    return NGX_CONF_OK;
}",3857.0,3883.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4940,117694,ngx_http_fastcgi_handler,1,ngx_http_fastcgi_handler,ngx_int_t ngx_http_fastcgi_handler (ngx_http_request_t*),http\modules\ngx_http_fastcgi_module.c,"static ngx_int_t
ngx_http_fastcgi_handler(ngx_http_request_t *r)
{
    ngx_int_t                      rc;
    ngx_http_upstream_t           *u;
    ngx_http_fastcgi_ctx_t        *f;
    ngx_http_fastcgi_loc_conf_t   *flcf;
#if (NGX_HTTP_CACHE)
    ngx_http_fastcgi_main_conf_t  *fmcf;
#endif

    if (ngx_http_upstream_create(r) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    f = ngx_pcalloc(r->pool, sizeof(ngx_http_fastcgi_ctx_t));
    if (f == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ngx_http_set_ctx(r, f, ngx_http_fastcgi_module);

    flcf = ngx_http_get_module_loc_conf(r, ngx_http_fastcgi_module);

    if (flcf->fastcgi_lengths) {
        if (ngx_http_fastcgi_eval(r, flcf) != NGX_OK) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }
    }

    u = r->upstream;

    ngx_str_set(&u->schema, ""fastcgi://"");
    u->output.tag = (ngx_buf_tag_t) &ngx_http_fastcgi_module;

    u->conf = &flcf->upstream;

#if (NGX_HTTP_CACHE)
  ...",680.0,758.0,1.0,1.0,79.0,64,11,67,23,0,14,8,9,5,5,,0,14,2,1,1,ngx_int_t
4941,126713,ngx_http_flv,1,ngx_http_flv,"char* ngx_http_flv (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_flv_module.c,"static char *
ngx_http_flv(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_flv_handler;

    return NGX_CONF_OK;
}",251.0,260.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4942,126768,ngx_http_flv_handler,1,ngx_http_flv_handler,ngx_int_t ngx_http_flv_handler (ngx_http_request_t*),http\modules\ngx_http_flv_module.c,"static ngx_int_t
ngx_http_flv_handler(ngx_http_request_t *r)
{
    u_char                    *last;
    off_t                      start, len;
    size_t                     root;
    ngx_int_t                  rc;
    ngx_uint_t                 level, i;
    ngx_str_t                  path, value;
    ngx_log_t                 *log;
    ngx_buf_t                 *b;
    ngx_chain_t                out[2];
    ngx_open_file_info_t       of;
    ngx_http_core_loc_conf_t  *clcf;

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
        return NGX_HTTP_NOT_ALLOWED;
    }

    if (r->uri.data[r->uri.len - 1] == '/') {
        return NGX_DECLINED;
    }

    rc = ngx_http_discard_request_body(r);

    if (rc != NGX_OK) {
        return rc;
    }

    last = ngx_http_map_uri_to_path(r, &path, &root, 0);
    if (last == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    log = r->connection->log;

    path.len = last - path.data;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, l...",61.0,248.0,1.0,1.0,188.0,185,18,182,37,0,36,24,29,7,12,,0,34,2,1,1,ngx_int_t
4943,127420,ngx_http_geo_addr,1,ngx_http_geo_addr,"ngx_int_t ngx_http_geo_addr (ngx_http_request_t*,ngx_http_geo_ctx_t*,ngx_addr_t*)",http\modules\ngx_http_geo_module.c,"static ngx_int_t
ngx_http_geo_addr(ngx_http_request_t *r, ngx_http_geo_ctx_t *ctx,
    ngx_addr_t *addr)
{
    ngx_array_t  *xfwd;

    if (ngx_http_geo_real_addr(r, ctx, addr) != NGX_OK) {
        return NGX_ERROR;
    }

    xfwd = &r->headers_in.x_forwarded_for;

    if (xfwd->nelts > 0 && ctx->proxies != NULL) {
        (void) ngx_http_get_forwarded_addr(r, addr, xfwd, NULL,
                                           ctx->proxies, ctx->proxy_recursive);
    }

    return NGX_OK;
}",326.0,344.0,1.0,1.0,19.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4944,127427,ngx_http_geo_real_addr,1,ngx_http_geo_real_addr,"ngx_int_t ngx_http_geo_real_addr (ngx_http_request_t*,ngx_http_geo_ctx_t*,ngx_addr_t*)",http\modules\ngx_http_geo_module.c,"static ngx_int_t
ngx_http_geo_real_addr(ngx_http_request_t *r, ngx_http_geo_ctx_t *ctx,
    ngx_addr_t *addr)
{
    ngx_http_variable_value_t  *v;

    if (ctx->index == -1) {
        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http geo started: %V"", &r->connection->addr_text);

        addr->sockaddr = r->connection->sockaddr;
        addr->socklen = r->connection->socklen;
        /* addr->name = r->connection->addr_text; */

        return NGX_OK;
    }

    v = ngx_http_get_flushed_variable(r, ctx->index);

    if (v == NULL || v->not_found) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http geo not found"");

        return NGX_ERROR;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http geo started: %v"", v);

    if (ngx_parse_addr(r->pool, addr, v->data, v->len) == NGX_OK) {
        return NGX_OK;
    }

    return NGX_ERROR;
}",347.0,381.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4945,127434,ngx_http_geo_block,1,ngx_http_geo_block,"char* ngx_http_geo_block (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_geo_module.c,"static char *
ngx_http_geo_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                     *rv;
    size_t                    len;
    ngx_str_t                *value, name;
    ngx_uint_t                i;
    ngx_conf_t                save;
    ngx_pool_t               *pool;
    ngx_array_t              *a;
    ngx_http_variable_t      *var;
    ngx_http_geo_ctx_t       *geo;
    ngx_http_geo_conf_ctx_t   ctx;
#if (NGX_HAVE_INET6)
    static struct in6_addr    zero;
#endif

    value = cf->args->elts;

    geo = ngx_palloc(cf->pool, sizeof(ngx_http_geo_ctx_t));
    if (geo == NULL) {
        return NGX_CONF_ERROR;
    }

    name = value[1];

    if (name.data[0] != '$') {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""%V\"""", &name);
        return NGX_CONF_ERROR;
    }

    name.len--;
    name.data++;

    if (cf->args->nelts == 3) {

        geo->index = ngx_http_get_variable_index(cf, &name);
        i...",384.0,583.0,1.0,1.0,200.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4946,127441,ngx_http_geo,1,ngx_http_geo,"char* ngx_http_geo (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_geo_module.c,"static char *
ngx_http_geo(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
{
    char                     *rv;
    ngx_str_t                *value;
    ngx_cidr_t                cidr;
    ngx_http_geo_conf_ctx_t  *ctx;

    ctx = cf->ctx;

    value = cf->args->elts;

    if (cf->args->nelts == 1) {

        if (ngx_strcmp(value[0].data, ""ranges"") == 0) {

            if (ctx->tree
#if (NGX_HAVE_INET6)
                || ctx->tree6
#endif
               )
            {
                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                   ""the \""ranges\"" directive must be ""
                                   ""the first directive inside \""geo\"" block"");
                goto failed;
            }

            ctx->ranges = 1;

            rv = NGX_CONF_OK;

            goto done;
        }

        else if (ngx_strcmp(value[0].data, ""proxy_recursive"") == 0) {
            ctx->proxy_recursive = 1;
            rv = NGX_CONF_OK;
            goto done;
        }
   ...",586.0,669.0,1.0,1.0,84.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4947,127448,ngx_http_geo_range,1,ngx_http_geo_range,"char* ngx_http_geo_range (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,ngx_str_t*)",http\modules\ngx_http_geo_module.c,"static char *
ngx_http_geo_range(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    ngx_str_t *value)
{
    u_char      *p, *last;
    in_addr_t    start, end;
    ngx_str_t   *net;
    ngx_uint_t   del;

    if (ngx_strcmp(value[0].data, ""default"") == 0) {

        if (ctx->high.default_value) {
            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                ""duplicate default geo range value: \""%V\"", old value: \""%v\"""",
                &value[1], ctx->high.default_value);
        }

        ctx->high.default_value = ngx_http_geo_value(cf, ctx, &value[1]);
        if (ctx->high.default_value == NULL) {
            return NGX_CONF_ERROR;
        }

        return NGX_CONF_OK;
    }

    if (ctx->binary_include) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
            ""binary geo range base \""%s\"" cannot be mixed with usual entries"",
            ctx->include_name.data);
        return NGX_CONF_ERROR;
    }

    if (ctx->high.low == NULL) {
        ctx->high.low = ngx_pcalloc...",672.0,778.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4948,127455,ngx_http_geo_add_range,1,ngx_http_geo_add_range,"char* ngx_http_geo_add_range (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,in_addr_t,in_addr_t)",http\modules\ngx_http_geo_module.c,"static char *
ngx_http_geo_add_range(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    in_addr_t start, in_addr_t end)
{
    in_addr_t              n;
    ngx_uint_t             h, i, s, e;
    ngx_array_t           *a;
    ngx_http_geo_range_t  *range;

    for (n = start; n <= end; n = (n + 0x10000) & 0xffff0000) {

        h = n >> 16;

        if (n == start) {
            s = n & 0xffff;
        } else {
            s = 0;
        }

        if ((n | 0xffff) > end) {
            e = end & 0xffff;

        } else {
            e = 0xffff;
        }

        a = (ngx_array_t *) ctx->high.low[h];

        if (a == NULL) {
            a = ngx_array_create(ctx->temp_pool, 64,
                                 sizeof(ngx_http_geo_range_t));
            if (a == NULL) {
                return NGX_CONF_ERROR;
            }

            ctx->high.low[h] = (ngx_http_geo_range_t *) a;
        }

        i = a->nelts;
        range = a->elts;

        while (i) {

            i--;

        ...",783.0,982.0,1.0,1.0,200.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,char*
4949,127463,ngx_http_geo_delete_range,1,ngx_http_geo_delete_range,"ngx_uint_t ngx_http_geo_delete_range (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,in_addr_t,in_addr_t)",http\modules\ngx_http_geo_module.c,"static ngx_uint_t
ngx_http_geo_delete_range(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    in_addr_t start, in_addr_t end)
{
    in_addr_t              n;
    ngx_uint_t             h, i, s, e, warn;
    ngx_array_t           *a;
    ngx_http_geo_range_t  *range;

    warn = 0;

    for (n = start; n <= end; n = (n + 0x10000) & 0xffff0000) {

        h = n >> 16;

        if (n == start) {
            s = n & 0xffff;
        } else {
            s = 0;
        }

        if ((n | 0xffff) > end) {
            e = end & 0xffff;

        } else {
            e = 0xffff;
        }

        a = (ngx_array_t *) ctx->high.low[h];

        if (a == NULL || a->nelts == 0) {
            warn = 1;
            goto next;
        }

        range = a->elts;
        for (i = 0; i < a->nelts; i++) {

            if (s == (ngx_uint_t) range[i].start
                && e == (ngx_uint_t) range[i].end)
            {
                ngx_memmove(&range[i], &range[i + 1],
                            (...",985.0,1047.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_uint_t
4950,127471,ngx_http_geo_cidr,1,ngx_http_geo_cidr,"char* ngx_http_geo_cidr (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,ngx_str_t*)",http\modules\ngx_http_geo_module.c,"static char *
ngx_http_geo_cidr(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    ngx_str_t *value)
{
    char        *rv;
    ngx_int_t    rc, del;
    ngx_str_t   *net;
    ngx_cidr_t   cidr;

    if (ctx->tree == NULL) {
        ctx->tree = ngx_radix_tree_create(ctx->pool, -1);
        if (ctx->tree == NULL) {
            return NGX_CONF_ERROR;
        }
    }

#if (NGX_HAVE_INET6)
    if (ctx->tree6 == NULL) {
        ctx->tree6 = ngx_radix_tree_create(ctx->pool, -1);
        if (ctx->tree6 == NULL) {
            return NGX_CONF_ERROR;
        }
    }
#endif

    if (ngx_strcmp(value[0].data, ""default"") == 0) {
        cidr.family = AF_INET;
        cidr.u.in.addr = 0;
        cidr.u.in.mask = 0;

        rv = ngx_http_geo_cidr_add(cf, ctx, &cidr, &value[1], &value[0]);

        if (rv != NGX_CONF_OK) {
            return rv;
        }

#if (NGX_HAVE_INET6)
        cidr.family = AF_INET6;
        ngx_memzero(&cidr.u.in6, sizeof(ngx_in6_cidr_t));

        rv = ngx_http_geo_cidr_a...",1050.0,1144.0,1.0,1.0,95.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4951,127478,ngx_http_geo_cidr_add,1,ngx_http_geo_cidr_add,"char* ngx_http_geo_cidr_add (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,ngx_cidr_t*,ngx_str_t*,ngx_str_t*)",http\modules\ngx_http_geo_module.c,"static char *
ngx_http_geo_cidr_add(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    ngx_cidr_t *cidr, ngx_str_t *value, ngx_str_t *net)
{
    ngx_int_t                   rc;
    ngx_http_variable_value_t  *val, *old;

    val = ngx_http_geo_value(cf, ctx, value);

    if (val == NULL) {
        return NGX_CONF_ERROR;
    }

    switch (cidr->family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        rc = ngx_radix128tree_insert(ctx->tree6, cidr->u.in6.addr.s6_addr,
                                     cidr->u.in6.mask.s6_addr,
                                     (uintptr_t) val);

        if (rc == NGX_OK) {
            return NGX_CONF_OK;
        }

        if (rc == NGX_ERROR) {
            return NGX_CONF_ERROR;
        }

        /* rc == NGX_BUSY */

        old = (ngx_http_variable_value_t *)
                   ngx_radix128tree_find(ctx->tree6,
                                         cidr->u.in6.addr.s6_addr);

        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
              ...",1147.0,1242.0,1.0,1.0,96.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,char*
4952,127487,ngx_http_geo_value,1,ngx_http_geo_value,"ngx_http_variable_value_t* ngx_http_geo_value (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,ngx_str_t*)",http\modules\ngx_http_geo_module.c,"static ngx_http_variable_value_t *
ngx_http_geo_value(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    ngx_str_t *value)
{
    uint32_t                             hash;
    ngx_http_variable_value_t           *val;
    ngx_http_geo_variable_value_node_t  *gvvn;

    hash = ngx_crc32_long(value->data, value->len);

    gvvn = (ngx_http_geo_variable_value_node_t *)
               ngx_str_rbtree_lookup(&ctx->rbtree, value, hash);

    if (gvvn) {
        return gvvn->value;
    }

    val = ngx_palloc(ctx->pool, sizeof(ngx_http_variable_value_t));
    if (val == NULL) {
        return NULL;
    }

    val->len = value->len;
    val->data = ngx_pstrdup(ctx->pool, value);
    if (val->data == NULL) {
        return NULL;
    }

    val->valid = 1;
    val->no_cacheable = 0;
    val->not_found = 0;

    gvvn = ngx_palloc(ctx->temp_pool,
                      sizeof(ngx_http_geo_variable_value_node_t));
    if (gvvn == NULL) {
        return NULL;
    }

    gvvn->sn.node.key = hash;
   ...",1245.0,1295.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_http_variable_value_t
4953,127494,ngx_http_geo_add_proxy,1,ngx_http_geo_add_proxy,"char* ngx_http_geo_add_proxy (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,ngx_cidr_t*)",http\modules\ngx_http_geo_module.c,"static char *
ngx_http_geo_add_proxy(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    ngx_cidr_t *cidr)
{
    ngx_cidr_t  *c;

    if (ctx->proxies == NULL) {
        ctx->proxies = ngx_array_create(ctx->pool, 4, sizeof(ngx_cidr_t));
        if (ctx->proxies == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    c = ngx_array_push(ctx->proxies);
    if (c == NULL) {
        return NGX_CONF_ERROR;
    }

    *c = *cidr;

    return NGX_CONF_OK;
}",1298.0,1319.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4954,127501,ngx_http_geo_cidr_value,1,ngx_http_geo_cidr_value,"ngx_int_t ngx_http_geo_cidr_value (ngx_conf_t*,ngx_str_t*,ngx_cidr_t*)",http\modules\ngx_http_geo_module.c,"static ngx_int_t
ngx_http_geo_cidr_value(ngx_conf_t *cf, ngx_str_t *net, ngx_cidr_t *cidr)
{
    ngx_int_t  rc;

    if (ngx_strcmp(net->data, ""255.255.255.255"") == 0) {
        cidr->family = AF_INET;
        cidr->u.in.addr = 0xffffffff;
        cidr->u.in.mask = 0xffffffff;

        return NGX_OK;
    }

    rc = ngx_ptocidr(net, cidr);

    if (rc == NGX_ERROR) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, ""invalid network \""%V\"""", net);
        return NGX_ERROR;
    }

    if (rc == NGX_DONE) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""low address bits of %V are meaningless"", net);
    }

    return NGX_OK;
}",1322.0,1348.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4955,127508,ngx_http_geo_include,1,ngx_http_geo_include,"char* ngx_http_geo_include (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,ngx_str_t*)",http\modules\ngx_http_geo_module.c,"static char *
ngx_http_geo_include(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    ngx_str_t *name)
{
    char       *rv;
    ngx_str_t   file;

    file.len = name->len + 4;
    file.data = ngx_pnalloc(ctx->temp_pool, name->len + 5);
    if (file.data == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_sprintf(file.data, ""%V.bin%Z"", name);

    if (ngx_conf_full_name(cf->cycle, &file, 1) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (ctx->ranges) {
        ngx_log_debug1(NGX_LOG_DEBUG_CORE, cf->log, 0, ""include %s"", file.data);

        switch (ngx_http_geo_include_binary_base(cf, ctx, &file)) {
        case NGX_OK:
            return NGX_CONF_OK;
        case NGX_ERROR:
            return NGX_CONF_ERROR;
        default:
            break;
        }
    }

    file.len -= 4;
    file.data[file.len] = '\0';

    ctx->include_name = file;

    if (ctx->outside_entries) {
        ctx->allow_binary_include = 0;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, cf->log, ...",1351.0,1400.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4956,127515,ngx_http_geo_include_binary_base,1,ngx_http_geo_include_binary_base,"ngx_int_t ngx_http_geo_include_binary_base (ngx_conf_t*,ngx_http_geo_conf_ctx_t*,ngx_str_t*)",http\modules\ngx_http_geo_module.c,"static ngx_int_t
ngx_http_geo_include_binary_base(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
    ngx_str_t *name)
{
    u_char                     *base, ch;
    time_t                      mtime;
    size_t                      size, len;
    ssize_t                     n;
    uint32_t                    crc32;
    ngx_err_t                   err;
    ngx_int_t                   rc;
    ngx_uint_t                  i;
    ngx_file_t                  file;
    ngx_file_info_t             fi;
    ngx_http_geo_range_t       *range, **ranges;
    ngx_http_geo_header_t      *header;
    ngx_http_variable_value_t  *vv;

    ngx_memzero(&file, sizeof(ngx_file_t));
    file.name = *name;
    file.log = cf->log;

    file.fd = ngx_open_file(name->data, NGX_FILE_RDONLY, NGX_FILE_OPEN, 0);

    if (file.fd == NGX_INVALID_FILE) {
        err = ngx_errno;
        if (err != NGX_ENOENT) {
            ngx_conf_log_error(NGX_LOG_CRIT, cf, err,
                               ngx_open_file_n "" \""%...",1403.0,1574.0,1.0,1.0,172.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4957,127522,ngx_http_geo_create_binary_base,1,ngx_http_geo_create_binary_base,void ngx_http_geo_create_binary_base (ngx_http_geo_conf_ctx_t*),http\modules\ngx_http_geo_module.c,"static void
ngx_http_geo_create_binary_base(ngx_http_geo_conf_ctx_t *ctx)
{
    u_char                              *p;
    uint32_t                             hash;
    ngx_str_t                            s;
    ngx_uint_t                           i;
    ngx_file_mapping_t                   fm;
    ngx_http_geo_range_t                *r, *range, **ranges;
    ngx_http_geo_header_t               *header;
    ngx_http_geo_variable_value_node_t  *gvvn;

    fm.name = ngx_pnalloc(ctx->temp_pool, ctx->include_name.len + 5);
    if (fm.name == NULL) {
        return;
    }

    ngx_sprintf(fm.name, ""%V.bin%Z"", &ctx->include_name);

    fm.size = ctx->data_size;
    fm.log = ctx->pool->log;

    ngx_log_error(NGX_LOG_NOTICE, fm.log, 0,
                  ""creating binary geo range base \""%s\"""", fm.name);

    if (ngx_create_file_mapping(&fm) != NGX_OK) {
        return;
    }

    p = ngx_cpymem(fm.addr, &ngx_http_geo_header,
                   sizeof(ngx_http_geo_header_t));

    p = n...",1577.0,1652.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4958,127527,ngx_http_geo_copy_values,1,ngx_http_geo_copy_values,"u_char* ngx_http_geo_copy_values (u_char*,u_char*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",http\modules\ngx_http_geo_module.c,"static u_char *
ngx_http_geo_copy_values(u_char *base, u_char *p, ngx_rbtree_node_t *node,
    ngx_rbtree_node_t *sentinel)
{
    ngx_http_variable_value_t           *vv;
    ngx_http_geo_variable_value_node_t  *gvvn;

    if (node == sentinel) {
        return p;
    }

    gvvn = (ngx_http_geo_variable_value_node_t *) node;
    gvvn->offset = p - base;

    vv = (ngx_http_variable_value_t *) p;
    *vv = *gvvn->value;
    p += sizeof(ngx_http_variable_value_t);
    vv->data = (u_char *) (p - base);

    p = ngx_cpymem(p, gvvn->sn.str.data, gvvn->sn.str.len);

    p = ngx_align_ptr(p, sizeof(void *));

    p = ngx_http_geo_copy_values(base, p, node->left, sentinel);

    return ngx_http_geo_copy_values(base, p, node->right, sentinel);
}",1655.0,1681.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,u_char
4959,127610,ngx_http_geo_cidr_variable,1,ngx_http_geo_cidr_variable,"ngx_int_t ngx_http_geo_cidr_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_geo_module.c,"static ngx_int_t
ngx_http_geo_cidr_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_http_geo_ctx_t *ctx = (ngx_http_geo_ctx_t *) data;

    in_addr_t                   inaddr;
    ngx_addr_t                  addr;
    struct sockaddr_in         *sin;
    ngx_http_variable_value_t  *vv;
#if (NGX_HAVE_INET6)
    u_char                     *p;
    struct in6_addr            *inaddr6;
#endif

    if (ngx_http_geo_addr(r, ctx, &addr) != NGX_OK) {
        vv = (ngx_http_variable_value_t *)
                  ngx_radix32tree_find(ctx->u.trees.tree, INADDR_NONE);
        goto done;
    }

    switch (addr.sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        inaddr6 = &((struct sockaddr_in6 *) addr.sockaddr)->sin6_addr;
        p = inaddr6->s6_addr;

        if (IN6_IS_ADDR_V4MAPPED(inaddr6)) {
            inaddr = p[12] << 24;
            inaddr += p[13] << 16;
            inaddr += p[14] << 8;
            inaddr += p[15];

      ...",173.0,243.0,1.0,1.0,71.0,27,7,23,11,0,3,5,3,1,3,,0,3,6,3,3,ngx_int_t
4960,127705,ngx_http_geo_range_variable,1,ngx_http_geo_range_variable,"ngx_int_t ngx_http_geo_range_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_geo_module.c,"static ngx_int_t
ngx_http_geo_range_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_http_geo_ctx_t *ctx = (ngx_http_geo_ctx_t *) data;

    in_addr_t              inaddr;
    ngx_addr_t             addr;
    ngx_uint_t             n;
    struct sockaddr_in    *sin;
    ngx_http_geo_range_t  *range;
#if (NGX_HAVE_INET6)
    u_char                *p;
    struct in6_addr       *inaddr6;
#endif

    *v = *ctx->u.high.default_value;

    if (ngx_http_geo_addr(r, ctx, &addr) == NGX_OK) {

        switch (addr.sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
        case AF_INET6:
            inaddr6 = &((struct sockaddr_in6 *) addr.sockaddr)->sin6_addr;

            if (IN6_IS_ADDR_V4MAPPED(inaddr6)) {
                p = inaddr6->s6_addr;

                inaddr = p[12] << 24;
                inaddr += p[13] << 16;
                inaddr += p[14] << 8;
                inaddr += p[15];

            } else {
                inaddr = INADDR_NONE;
    ...",246.0,323.0,1.0,1.0,78.0,44,14,31,11,0,4,9,14,3,1,,0,4,6,3,3,ngx_int_t
4961,131698,ngx_http_geoip_variable_handler_pt,1,ngx_http_geoip_variable_handler_pt,"char* ngx_http_geoip_variable_handler_pt (GeoIP*,u_long)",http\modules\ngx_http_geoip_module.c,"typedef const char *(*ngx_http_geoip_variable_handler_pt)(GeoIP *,
    u_long addr);",41.0,42.0,20.0,16.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4962,131711,ngx_http_geoip_country_variable,1,ngx_http_geoip_country_variable,"ngx_int_t ngx_http_geoip_country_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_geoip_module.c,"static ngx_int_t
ngx_http_geoip_country_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_geoip_variable_handler_pt     handler =
        ngx_http_geoip_country_functions[data];
#if (NGX_HAVE_GEOIP_V6)
    ngx_http_geoip_variable_handler_v6_pt  handler_v6 =
        ngx_http_geoip_country_v6_functions[data];
#endif

    const char             *val;
    ngx_http_geoip_conf_t  *gcf;

    gcf = ngx_http_get_module_main_conf(r, ngx_http_geoip_module);

    if (gcf->country == NULL) {
        goto not_found;
    }

#if (NGX_HAVE_GEOIP_V6)
    val = gcf->country_v6
              ? handler_v6(gcf->country, ngx_http_geoip_addr_v6(r, gcf))
              : handler(gcf->country, ngx_http_geoip_addr(r, gcf));
#else
    val = handler(gcf->country, ngx_http_geoip_addr(r, gcf));
#endif

    if (val == NULL) {
        goto not_found;
    }

    v->len = ngx_strlen(val);
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = (u_ch...",340.0,385.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4963,131718,ngx_http_geoip_org_variable,1,ngx_http_geoip_org_variable,"ngx_int_t ngx_http_geoip_org_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_geoip_module.c,"static ngx_int_t
ngx_http_geoip_org_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    size_t                  len;
    char                   *val;
    ngx_http_geoip_conf_t  *gcf;

    gcf = ngx_http_get_module_main_conf(r, ngx_http_geoip_module);

    if (gcf->org == NULL) {
        goto not_found;
    }

#if (NGX_HAVE_GEOIP_V6)
    val = gcf->org_v6
              ? GeoIP_name_by_ipnum_v6(gcf->org,
                                       ngx_http_geoip_addr_v6(r, gcf))
              : GeoIP_name_by_ipnum(gcf->org,
                                    ngx_http_geoip_addr(r, gcf));
#else
    val = GeoIP_name_by_ipnum(gcf->org, ngx_http_geoip_addr(r, gcf));
#endif

    if (val == NULL) {
        goto not_found;
    }

    len = ngx_strlen(val);
    v->data = ngx_pnalloc(r->pool, len);
    if (v->data == NULL) {
        ngx_free(val);
        return NGX_ERROR;
    }

    ngx_memcpy(v->data, val, len);

    v->len = len;
    v->valid = 1;
    v->no_c...",388.0,439.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4964,131725,ngx_http_geoip_city_variable,1,ngx_http_geoip_city_variable,"ngx_int_t ngx_http_geoip_city_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_geoip_module.c,"static ngx_int_t
ngx_http_geoip_city_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    char         *val;
    size_t        len;
    GeoIPRecord  *gr;

    gr = ngx_http_geoip_get_city_record(r);
    if (gr == NULL) {
        goto not_found;
    }

    val = *(char **) ((char *) gr + data);
    if (val == NULL) {
        goto no_value;
    }

    len = ngx_strlen(val);
    v->data = ngx_pnalloc(r->pool, len);
    if (v->data == NULL) {
        GeoIPRecord_delete(gr);
        return NGX_ERROR;
    }

    ngx_memcpy(v->data, val, len);

    v->len = len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    GeoIPRecord_delete(gr);

    return NGX_OK;

no_value:

    GeoIPRecord_delete(gr);

not_found:

    v->not_found = 1;

    return NGX_OK;
}",442.0,487.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4965,131732,ngx_http_geoip_region_name_variable,1,ngx_http_geoip_region_name_variable,"ngx_int_t ngx_http_geoip_region_name_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_geoip_module.c,"static ngx_int_t
ngx_http_geoip_region_name_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    size_t        len;
    const char   *val;
    GeoIPRecord  *gr;

    gr = ngx_http_geoip_get_city_record(r);
    if (gr == NULL) {
        goto not_found;
    }

    val = GeoIP_region_name_by_code(gr->country_code, gr->region);

    GeoIPRecord_delete(gr);

    if (val == NULL) {
        goto not_found;
    }

    len = ngx_strlen(val);
    v->data = ngx_pnalloc(r->pool, len);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(v->data, val, len);

    v->len = len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    return NGX_OK;

not_found:

    v->not_found = 1;

    return NGX_OK;
}",490.0,531.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4966,131739,ngx_http_geoip_city_float_variable,1,ngx_http_geoip_city_float_variable,"ngx_int_t ngx_http_geoip_city_float_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_geoip_module.c,"static ngx_int_t
ngx_http_geoip_city_float_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    float         val;
    GeoIPRecord  *gr;

    gr = ngx_http_geoip_get_city_record(r);
    if (gr == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->data = ngx_pnalloc(r->pool, NGX_INT64_LEN + 5);
    if (v->data == NULL) {
        GeoIPRecord_delete(gr);
        return NGX_ERROR;
    }

    val = *(float *) ((char *) gr + data);

    v->len = ngx_sprintf(v->data, ""%.4f"", val) - v->data;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    GeoIPRecord_delete(gr);

    return NGX_OK;
}",534.0,563.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4967,131746,ngx_http_geoip_city_int_variable,1,ngx_http_geoip_city_int_variable,"ngx_int_t ngx_http_geoip_city_int_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_geoip_module.c,"static ngx_int_t
ngx_http_geoip_city_int_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    int           val;
    GeoIPRecord  *gr;

    gr = ngx_http_geoip_get_city_record(r);
    if (gr == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->data = ngx_pnalloc(r->pool, NGX_INT64_LEN);
    if (v->data == NULL) {
        GeoIPRecord_delete(gr);
        return NGX_ERROR;
    }

    val = *(int *) ((char *) gr + data);

    v->len = ngx_sprintf(v->data, ""%d"", val) - v->data;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    GeoIPRecord_delete(gr);

    return NGX_OK;
}",566.0,595.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4968,131753,ngx_http_geoip_get_city_record,1,ngx_http_geoip_get_city_record,GeoIPRecord* ngx_http_geoip_get_city_record (ngx_http_request_t*),http\modules\ngx_http_geoip_module.c,"static GeoIPRecord *
ngx_http_geoip_get_city_record(ngx_http_request_t *r)
{
    ngx_http_geoip_conf_t  *gcf;

    gcf = ngx_http_get_module_main_conf(r, ngx_http_geoip_module);

    if (gcf->city) {
#if (NGX_HAVE_GEOIP_V6)
        return gcf->city_v6
                   ? GeoIP_record_by_ipnum_v6(gcf->city,
                                              ngx_http_geoip_addr_v6(r, gcf))
                   : GeoIP_record_by_ipnum(gcf->city,
                                           ngx_http_geoip_addr(r, gcf));
#else
        return GeoIP_record_by_ipnum(gcf->city, ngx_http_geoip_addr(r, gcf));
#endif
    }

    return NULL;
}",598.0,618.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,GeoIPRecord
4969,131758,ngx_http_geoip_add_variables,1,ngx_http_geoip_add_variables,ngx_int_t ngx_http_geoip_add_variables (ngx_conf_t*),http\modules\ngx_http_geoip_module.c,"static ngx_int_t
ngx_http_geoip_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_geoip_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",621.0,637.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4970,131763,ngx_http_geoip_create_conf,1,ngx_http_geoip_create_conf,void* ngx_http_geoip_create_conf (ngx_conf_t*),http\modules\ngx_http_geoip_module.c,"static void *
ngx_http_geoip_create_conf(ngx_conf_t *cf)
{
    ngx_pool_cleanup_t     *cln;
    ngx_http_geoip_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_geoip_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->proxy_recursive = NGX_CONF_UNSET;

    cln = ngx_pool_cleanup_add(cf->pool, 0);
    if (cln == NULL) {
        return NULL;
    }

    cln->handler = ngx_http_geoip_cleanup;
    cln->data = conf;

    return conf;
}",640.0,662.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
4971,131768,ngx_http_geoip_init_conf,1,ngx_http_geoip_init_conf,"char* ngx_http_geoip_init_conf (ngx_conf_t*,void*)",http\modules\ngx_http_geoip_module.c,"static char *
ngx_http_geoip_init_conf(ngx_conf_t *cf, void *conf)
{
    ngx_http_geoip_conf_t  *gcf = conf;

    ngx_conf_init_value(gcf->proxy_recursive, 0);

    return NGX_CONF_OK;
}",665.0,673.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
4972,131774,ngx_http_geoip_country,1,ngx_http_geoip_country,"char* ngx_http_geoip_country (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_geoip_module.c,"static char *
ngx_http_geoip_country(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_geoip_conf_t  *gcf = conf;

    ngx_str_t  *value;

    if (gcf->country) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    gcf->country = GeoIP_open((char *) value[1].data, GEOIP_MEMORY_CACHE);

    if (gcf->country == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""GeoIP_open(\""%V\"") failed"", &value[1]);

        return NGX_CONF_ERROR;
    }

    if (cf->args->nelts == 3) {
        if (ngx_strcmp(value[2].data, ""utf8"") == 0) {
            GeoIP_set_charset(gcf->country, GEOIP_CHARSET_UTF8);

        } else {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid parameter \""%V\"""", &value[2]);
            return NGX_CONF_ERROR;
        }
    }

    switch (gcf->country->databaseType) {

    case GEOIP_COUNTRY_EDITION:

        return NGX_CONF_OK;

#if (NGX_HAVE_GEOIP_V6)
    case GEOIP_C...",676.0,728.0,1.0,1.0,53.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4973,131781,ngx_http_geoip_org,1,ngx_http_geoip_org,"char* ngx_http_geoip_org (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_geoip_module.c,"static char *
ngx_http_geoip_org(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_geoip_conf_t  *gcf = conf;

    ngx_str_t  *value;

    if (gcf->org) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    gcf->org = GeoIP_open((char *) value[1].data, GEOIP_MEMORY_CACHE);

    if (gcf->org == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""GeoIP_open(\""%V\"") failed"", &value[1]);

        return NGX_CONF_ERROR;
    }

    if (cf->args->nelts == 3) {
        if (ngx_strcmp(value[2].data, ""utf8"") == 0) {
            GeoIP_set_charset(gcf->org, GEOIP_CHARSET_UTF8);

        } else {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid parameter \""%V\"""", &value[2]);
            return NGX_CONF_ERROR;
        }
    }

    switch (gcf->org->databaseType) {

    case GEOIP_ISP_EDITION:
    case GEOIP_ORG_EDITION:
    case GEOIP_DOMAIN_EDITION:
    case GEOIP_ASNUM_EDITION:

        ...",731.0,789.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4974,131788,ngx_http_geoip_city,1,ngx_http_geoip_city,"char* ngx_http_geoip_city (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_geoip_module.c,"static char *
ngx_http_geoip_city(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_geoip_conf_t  *gcf = conf;

    ngx_str_t  *value;

    if (gcf->city) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    gcf->city = GeoIP_open((char *) value[1].data, GEOIP_MEMORY_CACHE);

    if (gcf->city == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""GeoIP_open(\""%V\"") failed"", &value[1]);

        return NGX_CONF_ERROR;
    }

    if (cf->args->nelts == 3) {
        if (ngx_strcmp(value[2].data, ""utf8"") == 0) {
            GeoIP_set_charset(gcf->city, GEOIP_CHARSET_UTF8);

        } else {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid parameter \""%V\"""", &value[2]);
            return NGX_CONF_ERROR;
        }
    }

    switch (gcf->city->databaseType) {

    case GEOIP_CITY_EDITION_REV0:
    case GEOIP_CITY_EDITION_REV1:

        return NGX_CONF_OK;

#if (NGX_HAVE_GEOIP_V6...",792.0,846.0,1.0,1.0,55.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4975,131795,ngx_http_geoip_proxy,1,ngx_http_geoip_proxy,"char* ngx_http_geoip_proxy (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_geoip_module.c,"static char *
ngx_http_geoip_proxy(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_geoip_conf_t  *gcf = conf;

    ngx_str_t   *value;
    ngx_cidr_t  cidr, *c;

    value = cf->args->elts;

    if (ngx_http_geoip_cidr_value(cf, &value[1], &cidr) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (gcf->proxies == NULL) {
        gcf->proxies = ngx_array_create(cf->pool, 4, sizeof(ngx_cidr_t));
        if (gcf->proxies == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    c = ngx_array_push(gcf->proxies);
    if (c == NULL) {
        return NGX_CONF_ERROR;
    }

    *c = cidr;

    return NGX_CONF_OK;
}",849.0,878.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
4976,131802,ngx_http_geoip_cidr_value,1,ngx_http_geoip_cidr_value,"ngx_int_t ngx_http_geoip_cidr_value (ngx_conf_t*,ngx_str_t*,ngx_cidr_t*)",http\modules\ngx_http_geoip_module.c,"static ngx_int_t
ngx_http_geoip_cidr_value(ngx_conf_t *cf, ngx_str_t *net, ngx_cidr_t *cidr)
{
    ngx_int_t  rc;

    if (ngx_strcmp(net->data, ""255.255.255.255"") == 0) {
        cidr->family = AF_INET;
        cidr->u.in.addr = 0xffffffff;
        cidr->u.in.mask = 0xffffffff;

        return NGX_OK;
    }

    rc = ngx_ptocidr(net, cidr);

    if (rc == NGX_ERROR) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, ""invalid network \""%V\"""", net);
        return NGX_ERROR;
    }

    if (rc == NGX_DONE) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""low address bits of %V are meaningless"", net);
    }

    return NGX_OK;
}",880.0,906.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4977,131809,ngx_http_geoip_cleanup,1,ngx_http_geoip_cleanup,void ngx_http_geoip_cleanup (void*),http\modules\ngx_http_geoip_module.c,"static void
ngx_http_geoip_cleanup(void *data)
{
    ngx_http_geoip_conf_t  *gcf = data;

    if (gcf->country) {
        GeoIP_delete(gcf->country);
    }

    if (gcf->org) {
        GeoIP_delete(gcf->org);
    }

    if (gcf->city) {
        GeoIP_delete(gcf->city);
    }
}",909.0,925.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
4978,132061,ngx_http_geoip_addr,1,ngx_http_geoip_addr,"u_long ngx_http_geoip_addr (ngx_http_request_t*,ngx_http_geoip_conf_t*)",http\modules\ngx_http_geoip_module.c,"static u_long
ngx_http_geoip_addr(ngx_http_request_t *r, ngx_http_geoip_conf_t *gcf)
{
    ngx_addr_t           addr;
    ngx_array_t         *xfwd;
    struct sockaddr_in  *sin;

    addr.sockaddr = r->connection->sockaddr;
    addr.socklen = r->connection->socklen;
    /* addr.name = r->connection->addr_text; */

    xfwd = &r->headers_in.x_forwarded_for;

    if (xfwd->nelts > 0 && gcf->proxies != NULL) {
        (void) ngx_http_get_forwarded_addr(r, &addr, xfwd, NULL,
                                           gcf->proxies, gcf->proxy_recursive);
    }

#if (NGX_HAVE_INET6)

    if (addr.sockaddr->sa_family == AF_INET6) {
        u_char           *p;
        in_addr_t         inaddr;
        struct in6_addr  *inaddr6;

        inaddr6 = &((struct sockaddr_in6 *) addr.sockaddr)->sin6_addr;

        if (IN6_IS_ADDR_V4MAPPED(inaddr6)) {
            p = inaddr6->s6_addr;

            inaddr = p[12] << 24;
            inaddr += p[13] << 16;
            inaddr += p[14] << 8;
         ...",239.0,286.0,1.0,1.0,48.0,29,8,21,8,0,6,3,3,2,1,,0,5,4,2,2,u_long
4979,133542,ngx_http_grpc_eval,1,ngx_http_grpc_eval,"ngx_int_t ngx_http_grpc_eval (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_http_grpc_loc_conf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_eval(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx,
    ngx_http_grpc_loc_conf_t *glcf)
{
    size_t                add;
    ngx_url_t             url;
    ngx_http_upstream_t  *u;

    ngx_memzero(&url, sizeof(ngx_url_t));

    if (ngx_http_script_run(r, &url.url, glcf->grpc_lengths->elts, 0,
                            glcf->grpc_values->elts)
        == NULL)
    {
        return NGX_ERROR;
    }

    if (url.url.len > 7
        && ngx_strncasecmp(url.url.data, (u_char *) ""grpc://"", 7) == 0)
    {
        add = 7;

    } else if (url.url.len > 8
               && ngx_strncasecmp(url.url.data, (u_char *) ""grpcs://"", 8) == 0)
    {

#if (NGX_HTTP_SSL)
        add = 8;
        r->upstream->ssl = 1;
#else
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""grpcs protocol requires SSL support"");
        return NGX_ERROR;
#endif

    } else {
        add = 0;
    }

    u = r->upstream;

    if (add) {
        u->schema.len ...",609.0,703.0,1.0,1.0,95.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4980,133549,ngx_http_grpc_create_request,1,ngx_http_grpc_create_request,ngx_int_t ngx_http_grpc_create_request (ngx_http_request_t*),http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_create_request(ngx_http_request_t *r)
{
    u_char                       *p, *tmp, *key_tmp, *val_tmp, *headers_frame;
    size_t                        len, tmp_len, key_len, val_len, uri_len;
    uintptr_t                     escape;
    ngx_buf_t                    *b;
    ngx_uint_t                    i, next;
    ngx_chain_t                  *cl, *body;
    ngx_list_part_t              *part;
    ngx_table_elt_t              *header;
    ngx_http_grpc_ctx_t          *ctx;
    ngx_http_upstream_t          *u;
    ngx_http_grpc_frame_t        *f;
    ngx_http_script_code_pt       code;
    ngx_http_grpc_loc_conf_t     *glcf;
    ngx_http_script_engine_t      e, le;
    ngx_http_script_len_code_pt   lcode;

    u = r->upstream;

    glcf = ngx_http_get_module_loc_conf(r, ngx_http_grpc_module);

    ctx = ngx_http_get_module_ctx(r, ngx_http_grpc_module);

    len = sizeof(ngx_http_grpc_connection_start) - 1
          + sizeof(ngx_http_grpc_frame_t);  ...",706.0,1191.0,1.0,1.0,486.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4981,133554,ngx_http_grpc_reinit_request,1,ngx_http_grpc_reinit_request,ngx_int_t ngx_http_grpc_reinit_request (ngx_http_request_t*),http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_reinit_request(ngx_http_request_t *r)
{
    ngx_http_grpc_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_grpc_module);

    if (ctx == NULL) {
        return NGX_OK;
    }

    ctx->state = 0;
    ctx->header_sent = 0;
    ctx->output_closed = 0;
    ctx->output_blocked = 0;
    ctx->parsing_headers = 0;
    ctx->end_stream = 0;
    ctx->done = 0;
    ctx->status = 0;
    ctx->rst = 0;
    ctx->goaway = 0;
    ctx->connection = NULL;

    return NGX_OK;
}",1194.0,1218.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4982,133559,ngx_http_grpc_body_output_filter,1,ngx_http_grpc_body_output_filter,"ngx_int_t ngx_http_grpc_body_output_filter (void*,ngx_chain_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_body_output_filter(void *data, ngx_chain_t *in)
{
    ngx_http_request_t  *r = data;

    off_t                   file_pos;
    u_char                 *p, *pos, *start;
    size_t                  len, limit;
    ngx_buf_t              *b;
    ngx_int_t               rc;
    ngx_uint_t              next, last;
    ngx_chain_t            *cl, *out, **ll;
    ngx_http_upstream_t    *u;
    ngx_http_grpc_ctx_t    *ctx;
    ngx_http_grpc_frame_t  *f;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""grpc output filter"");

    ctx = ngx_http_grpc_get_ctx(r);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    if (in) {
        if (ngx_chain_add_copy(r->pool, &ctx->in, in) != NGX_OK) {
            return NGX_ERROR;
        }
    }

    out = NULL;
    ll = &out;

    if (!ctx->header_sent) {
        /* first buffer contains headers */

        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                ...",1221.0,1580.0,1.0,1.0,360.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4983,133565,ngx_http_grpc_process_header,1,ngx_http_grpc_process_header,ngx_int_t ngx_http_grpc_process_header (ngx_http_request_t*),http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_process_header(ngx_http_request_t *r)
{
    ngx_str_t                      *status_line;
    ngx_int_t                       rc, status;
    ngx_buf_t                      *b;
    ngx_table_elt_t                *h;
    ngx_http_upstream_t            *u;
    ngx_http_grpc_ctx_t            *ctx;
    ngx_http_upstream_header_t     *hh;
    ngx_http_upstream_main_conf_t  *umcf;

    u = r->upstream;
    b = &u->buffer;

    ngx_log_debug4(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""grpc response: %*xs%s, len: %uz"",
                   (size_t) ngx_min(b->last - b->pos, 256),
                   b->pos, b->last - b->pos > 256 ? ""..."" : """",
                   b->last - b->pos);

    ctx = ngx_http_grpc_get_ctx(r);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);

    for ( ;; ) {

        if (ctx->state < ngx_http_grpc_st_payload) {

            rc = ngx_http_grpc...",1583.0,1942.0,1.0,1.0,360.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4984,133570,ngx_http_grpc_filter_init,1,ngx_http_grpc_filter_init,ngx_int_t ngx_http_grpc_filter_init (void*),http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_filter_init(void *data)
{
    ngx_http_grpc_ctx_t  *ctx = data;

    ngx_http_request_t   *r;
    ngx_http_upstream_t  *u;

    r = ctx->request;
    u = r->upstream;

    if (u->headers_in.status_n == NGX_HTTP_NO_CONTENT
        || u->headers_in.status_n == NGX_HTTP_NOT_MODIFIED
        || r->method == NGX_HTTP_HEAD)
    {
        ctx->length = 0;

    } else {
        ctx->length = u->headers_in.content_length_n;
    }

    if (ctx->end_stream) {

        if (ctx->length > 0) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""upstream prematurely closed stream"");
            return NGX_ERROR;
        }

        u->length = 0;
        ctx->done = 1;

    } else {
        u->length = 1;
    }

    return NGX_OK;
}",1945.0,1982.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
4985,133575,ngx_http_grpc_filter,1,ngx_http_grpc_filter,"ngx_int_t ngx_http_grpc_filter (void*,ssize_t)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_filter(void *data, ssize_t bytes)
{
    ngx_http_grpc_ctx_t  *ctx = data;

    ngx_int_t             rc;
    ngx_buf_t            *b, *buf;
    ngx_chain_t          *cl, **ll;
    ngx_table_elt_t      *h;
    ngx_http_request_t   *r;
    ngx_http_upstream_t  *u;

    r = ctx->request;
    u = r->upstream;
    b = &u->buffer;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""grpc filter bytes:%z"", bytes);

    b->pos = b->last;
    b->last += bytes;

    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
        ll = &cl->next;
    }

    for ( ;; ) {

        if (ctx->state < ngx_http_grpc_st_payload) {

            rc = ngx_http_grpc_parse_frame(r, ctx, b);

            if (rc == NGX_AGAIN) {

                if (ctx->done) {

                    if (ctx->length > 0) {
                        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                                      ""upstream prematurely closed...",1985.0,2496.0,1.0,1.0,512.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4986,133581,ngx_http_grpc_parse_frame,1,ngx_http_grpc_parse_frame,"ngx_int_t ngx_http_grpc_parse_frame (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_parse_frame(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx,
    ngx_buf_t *b)
{
    u_char                 ch, *p;
    ngx_http_grpc_state_e  state;

    state = ctx->state;

    for (p = b->pos; p < b->last; p++) {
        ch = *p;

#if 0
        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""grpc frame byte: %02Xd, s:%d"", ch, state);
#endif

        switch (state) {

        case ngx_http_grpc_st_start:
            ctx->rest = ch << 16;
            state = ngx_http_grpc_st_length_2;
            break;

        case ngx_http_grpc_st_length_2:
            ctx->rest |= ch << 8;
            state = ngx_http_grpc_st_length_3;
            break;

        case ngx_http_grpc_st_length_3:
            ctx->rest |= ch;

            if (ctx->rest > NGX_HTTP_V2_DEFAULT_FRAME_SIZE) {
                ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                              ""upstream sent too large http2 frame: %uz"",
       ...",2499.0,2591.0,1.0,1.0,93.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4987,133588,ngx_http_grpc_parse_header,1,ngx_http_grpc_parse_header,"ngx_int_t ngx_http_grpc_parse_header (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_parse_header(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx,
    ngx_buf_t *b)
{
    u_char     ch, *p, *last;
    size_t     min;
    ngx_int_t  rc;
    enum {
        sw_start = 0,
        sw_padding_length,
        sw_dependency,
        sw_dependency_2,
        sw_dependency_3,
        sw_dependency_4,
        sw_weight,
        sw_fragment,
        sw_padding
    } state;

    state = ctx->frame_state;

    if (state == sw_start) {

        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""grpc parse header: start"");

        if (ctx->type == NGX_HTTP_V2_HEADERS_FRAME) {
            ctx->parsing_headers = 1;
            ctx->fragment_state = 0;

            min = (ctx->flags & NGX_HTTP_V2_PADDED_FLAG ? 1 : 0)
                  + (ctx->flags & NGX_HTTP_V2_PRIORITY_FLAG ? 5 : 0);

            if (ctx->rest < min) {
                ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                              ""upstre...",2594.0,2810.0,1.0,1.0,217.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4988,133595,ngx_http_grpc_parse_fragment,1,ngx_http_grpc_parse_fragment,"ngx_int_t ngx_http_grpc_parse_fragment (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_parse_fragment(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx,
    ngx_buf_t *b)
{
    u_char      ch, *p, *last;
    size_t      size;
    ngx_uint_t  index, size_update;
    enum {
        sw_start = 0,
        sw_index,
        sw_name_length,
        sw_name_length_2,
        sw_name_length_3,
        sw_name_length_4,
        sw_name,
        sw_name_bytes,
        sw_value_length,
        sw_value_length_2,
        sw_value_length_3,
        sw_value_length_4,
        sw_value,
        sw_value_bytes
    } state;

    /* header block fragment */

#if 0
    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""grpc header fragment %p:%p rest:%uz"",
                   b->pos, b->last, ctx->rest);
#endif

    if (b->last - b->pos < (ssize_t) ctx->rest - ctx->padding) {
        last = b->last;

    } else {
        last = b->pos + ctx->rest - ctx->padding;
    }

    state = ctx->fragment_state;

    for (p = b->pos; p < last;...",2813.0,3367.0,1.0,1.0,555.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4989,133602,ngx_http_grpc_validate_header_name,1,ngx_http_grpc_validate_header_name,"ngx_int_t ngx_http_grpc_validate_header_name (ngx_http_request_t*,ngx_str_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_validate_header_name(ngx_http_request_t *r, ngx_str_t *s)
{
    u_char      ch;
    ngx_uint_t  i;

    for (i = 0; i < s->len; i++) {
        ch = s->data[i];

        if (ch == ':' && i > 0) {
            return NGX_ERROR;
        }

        if (ch >= 'A' && ch <= 'Z') {
            return NGX_ERROR;
        }

        if (ch <= 0x20 || ch == 0x7f) {
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",3370.0,3393.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4990,133608,ngx_http_grpc_validate_header_value,1,ngx_http_grpc_validate_header_value,"ngx_int_t ngx_http_grpc_validate_header_value (ngx_http_request_t*,ngx_str_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_validate_header_value(ngx_http_request_t *r, ngx_str_t *s)
{
    u_char      ch;
    ngx_uint_t  i;

    for (i = 0; i < s->len; i++) {
        ch = s->data[i];

        if (ch == '\0' || ch == CR || ch == LF) {
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",3396.0,3411.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4991,133614,ngx_http_grpc_parse_rst_stream,1,ngx_http_grpc_parse_rst_stream,"ngx_int_t ngx_http_grpc_parse_rst_stream (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_parse_rst_stream(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx,
    ngx_buf_t *b)
{
    u_char  ch, *p, *last;
    enum {
        sw_start = 0,
        sw_error_2,
        sw_error_3,
        sw_error_4
    } state;

    if (b->last - b->pos < (ssize_t) ctx->rest) {
        last = b->last;

    } else {
        last = b->pos + ctx->rest;
    }

    state = ctx->frame_state;

    if (state == sw_start) {
        if (ctx->rest != 4) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""upstream sent rst stream frame ""
                          ""with invalid length: %uz"",
                          ctx->rest);
            return NGX_ERROR;
        }
    }

    for (p = b->pos; p < last; p++) {
        ch = *p;

#if 0
        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""grpc rst byte: %02Xd s:%d"", ch, state);
#endif

        switch (state) {

        case sw_start:
            ctx->...",3414.0,3492.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4992,133621,ngx_http_grpc_parse_goaway,1,ngx_http_grpc_parse_goaway,"ngx_int_t ngx_http_grpc_parse_goaway (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_parse_goaway(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx,
    ngx_buf_t *b)
{
    u_char  ch, *p, *last;
    enum {
        sw_start = 0,
        sw_last_stream_id_2,
        sw_last_stream_id_3,
        sw_last_stream_id_4,
        sw_error,
        sw_error_2,
        sw_error_3,
        sw_error_4,
        sw_debug
    } state;

    if (b->last - b->pos < (ssize_t) ctx->rest) {
        last = b->last;

    } else {
        last = b->pos + ctx->rest;
    }

    state = ctx->frame_state;

    if (state == sw_start) {

        if (ctx->stream_id) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""upstream sent goaway frame ""
                          ""with non-zero stream id: %ui"",
                          ctx->stream_id);
            return NGX_ERROR;
        }

        if (ctx->rest < 8) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""upstream sent goaway frame ""
...",3495.0,3610.0,1.0,1.0,116.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4993,133628,ngx_http_grpc_parse_window_update,1,ngx_http_grpc_parse_window_update,"ngx_int_t ngx_http_grpc_parse_window_update (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_parse_window_update(ngx_http_request_t *r,
    ngx_http_grpc_ctx_t *ctx, ngx_buf_t *b)
{
    u_char  ch, *p, *last;
    enum {
        sw_start = 0,
        sw_size_2,
        sw_size_3,
        sw_size_4
    } state;

    if (b->last - b->pos < (ssize_t) ctx->rest) {
        last = b->last;

    } else {
        last = b->pos + ctx->rest;
    }

    state = ctx->frame_state;

    if (state == sw_start) {
        if (ctx->rest != 4) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""upstream sent window update frame ""
                          ""with invalid length: %uz"",
                          ctx->rest);
            return NGX_ERROR;
        }
    }

    for (p = b->pos; p < last; p++) {
        ch = *p;

#if 0
        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""grpc window update byte: %02Xd s:%d"", ch, state);
#endif

        switch (state) {

        case sw_start:
    ...",3613.0,3715.0,1.0,1.0,103.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4994,133635,ngx_http_grpc_parse_settings,1,ngx_http_grpc_parse_settings,"ngx_int_t ngx_http_grpc_parse_settings (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_parse_settings(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx,
    ngx_buf_t *b)
{
    u_char   ch, *p, *last;
    ssize_t  window_update;
    enum {
        sw_start = 0,
        sw_id,
        sw_id_2,
        sw_value,
        sw_value_2,
        sw_value_3,
        sw_value_4
    } state;

    if (b->last - b->pos < (ssize_t) ctx->rest) {
        last = b->last;

    } else {
        last = b->pos + ctx->rest;
    }

    state = ctx->frame_state;

    if (state == sw_start) {

        if (ctx->stream_id) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""upstream sent settings frame ""
                          ""with non-zero stream id: %ui"",
                          ctx->stream_id);
            return NGX_ERROR;
        }

        if (ctx->flags & NGX_HTTP_V2_ACK_FLAG) {
            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           ""grpc settings ack"");

            if (ct...",3718.0,3884.0,1.0,1.0,167.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4995,133642,ngx_http_grpc_parse_ping,1,ngx_http_grpc_parse_ping,"ngx_int_t ngx_http_grpc_parse_ping (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_parse_ping(ngx_http_request_t *r,
    ngx_http_grpc_ctx_t *ctx, ngx_buf_t *b)
{
    u_char  ch, *p, *last;
    enum {
        sw_start = 0,
        sw_data_2,
        sw_data_3,
        sw_data_4,
        sw_data_5,
        sw_data_6,
        sw_data_7,
        sw_data_8
    } state;

    if (b->last - b->pos < (ssize_t) ctx->rest) {
        last = b->last;

    } else {
        last = b->pos + ctx->rest;
    }

    state = ctx->frame_state;

    if (state == sw_start) {

        if (ctx->stream_id) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""upstream sent ping frame ""
                          ""with non-zero stream id: %ui"",
                          ctx->stream_id);
            return NGX_ERROR;
        }

        if (ctx->rest != 8) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""upstream sent ping frame ""
                          ""with invalid length: %uz"",
 ...",3887.0,3975.0,1.0,1.0,89.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
4996,133649,ngx_http_grpc_send_settings_ack,1,ngx_http_grpc_send_settings_ack,"ngx_int_t ngx_http_grpc_send_settings_ack (ngx_http_request_t*,ngx_http_grpc_ctx_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_send_settings_ack(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx)
{
    ngx_chain_t            *cl, **ll;
    ngx_http_grpc_frame_t  *f;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""grpc send settings ack"");

    for (cl = ctx->out, ll = &ctx->out; cl; cl = cl->next) {
        ll = &cl->next;
    }

    cl = ngx_http_grpc_get_buf(r, ctx);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    f = (ngx_http_grpc_frame_t *) cl->buf->last;
    cl->buf->last += sizeof(ngx_http_grpc_frame_t);

    f->length_0 = 0;
    f->length_1 = 0;
    f->length_2 = 0;
    f->type = NGX_HTTP_V2_SETTINGS_FRAME;
    f->flags = NGX_HTTP_V2_ACK_FLAG;
    f->stream_id_0 = 0;
    f->stream_id_1 = 0;
    f->stream_id_2 = 0;
    f->stream_id_3 = 0;

    *ll = cl;

    return NGX_OK;
}",3978.0,4012.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4997,133655,ngx_http_grpc_send_ping_ack,1,ngx_http_grpc_send_ping_ack,"ngx_int_t ngx_http_grpc_send_ping_ack (ngx_http_request_t*,ngx_http_grpc_ctx_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_send_ping_ack(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx)
{
    ngx_chain_t            *cl, **ll;
    ngx_http_grpc_frame_t  *f;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""grpc send ping ack"");

    for (cl = ctx->out, ll = &ctx->out; cl; cl = cl->next) {
        ll = &cl->next;
    }

    cl = ngx_http_grpc_get_buf(r, ctx);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    f = (ngx_http_grpc_frame_t *) cl->buf->last;
    cl->buf->last += sizeof(ngx_http_grpc_frame_t);

    f->length_0 = 0;
    f->length_1 = 0;
    f->length_2 = 8;
    f->type = NGX_HTTP_V2_PING_FRAME;
    f->flags = NGX_HTTP_V2_ACK_FLAG;
    f->stream_id_0 = 0;
    f->stream_id_1 = 0;
    f->stream_id_2 = 0;
    f->stream_id_3 = 0;

    cl->buf->last = ngx_copy(cl->buf->last, ctx->ping_data, 8);

    *ll = cl;

    return NGX_OK;
}",4015.0,4051.0,1.0,1.0,37.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4998,133661,ngx_http_grpc_send_window_update,1,ngx_http_grpc_send_window_update,"ngx_int_t ngx_http_grpc_send_window_update (ngx_http_request_t*,ngx_http_grpc_ctx_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_send_window_update(ngx_http_request_t *r,
    ngx_http_grpc_ctx_t *ctx)
{
    size_t                  n;
    ngx_chain_t            *cl, **ll;
    ngx_http_grpc_frame_t  *f;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""grpc send window update: %uz %uz"",
                   ctx->connection->recv_window, ctx->recv_window);

    for (cl = ctx->out, ll = &ctx->out; cl; cl = cl->next) {
        ll = &cl->next;
    }

    cl = ngx_http_grpc_get_buf(r, ctx);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    f = (ngx_http_grpc_frame_t *) cl->buf->last;
    cl->buf->last += sizeof(ngx_http_grpc_frame_t);

    f->length_0 = 0;
    f->length_1 = 0;
    f->length_2 = 4;
    f->type = NGX_HTTP_V2_WINDOW_UPDATE_FRAME;
    f->flags = 0;
    f->stream_id_0 = 0;
    f->stream_id_1 = 0;
    f->stream_id_2 = 0;
    f->stream_id_3 = 0;

    n = NGX_HTTP_V2_MAX_WINDOW - ctx->connection->recv_window;
    ctx->connection->recv_wi...",4054.0,4120.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
4999,133667,ngx_http_grpc_get_buf,1,ngx_http_grpc_get_buf,"ngx_chain_t* ngx_http_grpc_get_buf (ngx_http_request_t*,ngx_http_grpc_ctx_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_chain_t *
ngx_http_grpc_get_buf(ngx_http_request_t *r, ngx_http_grpc_ctx_t *ctx)
{
    u_char       *start;
    ngx_buf_t    *b;
    ngx_chain_t  *cl;

    cl = ngx_chain_get_free_buf(r->pool, &ctx->free);
    if (cl == NULL) {
        return NULL;
    }

    b = cl->buf;
    start = b->start;

    if (start == NULL) {

        /*
         * each buffer is large enough to hold two window update
         * frames in a row
         */

        start = ngx_palloc(r->pool, 2 * sizeof(ngx_http_grpc_frame_t) + 8);
        if (start == NULL) {
            return NULL;
        }

    }

    ngx_memzero(b, sizeof(ngx_buf_t));

    b->start = start;
    b->pos = start;
    b->last = start;
    b->end = start + 2 * sizeof(ngx_http_grpc_frame_t) + 8;

    b->tag = (ngx_buf_tag_t) &ngx_http_grpc_body_output_filter;
    b->temporary = 1;
    b->flush = 1;

    return cl;
}",4123.0,4164.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_chain_t
5000,133673,ngx_http_grpc_get_ctx,1,ngx_http_grpc_get_ctx,ngx_http_grpc_ctx_t* ngx_http_grpc_get_ctx (ngx_http_request_t*),http\modules\ngx_http_grpc_module.c,"static ngx_http_grpc_ctx_t *
ngx_http_grpc_get_ctx(ngx_http_request_t *r)
{
    ngx_http_grpc_ctx_t  *ctx;
    ngx_http_upstream_t  *u;

    ctx = ngx_http_get_module_ctx(r, ngx_http_grpc_module);

    if (ctx->connection == NULL) {
        u = r->upstream;

        if (ngx_http_grpc_get_connection_data(r, ctx, &u->peer) != NGX_OK) {
            return NULL;
        }
    }

    return ctx;
}",4167.0,4184.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_http_grpc_ctx_t
5001,133678,ngx_http_grpc_get_connection_data,1,ngx_http_grpc_get_connection_data,"ngx_int_t ngx_http_grpc_get_connection_data (ngx_http_request_t*,ngx_http_grpc_ctx_t*,ngx_peer_connection_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_get_connection_data(ngx_http_request_t *r,
    ngx_http_grpc_ctx_t *ctx, ngx_peer_connection_t *pc)
{
    ngx_connection_t    *c;
    ngx_pool_cleanup_t  *cln;

    c = pc->connection;

    if (pc->cached) {

        /*
         * for cached connections, connection data can be found
         * in the cleanup handler
         */

        for (cln = c->pool->cleanup; cln; cln = cln->next) {
            if (cln->handler == ngx_http_grpc_cleanup) {
                ctx->connection = cln->data;
                break;
            }
        }

        if (ctx->connection == NULL) {
            ngx_log_error(NGX_LOG_ERR, c->log, 0,
                          ""no connection data found for ""
                          ""keepalive http2 connection"");
            return NGX_ERROR;
        }

        ctx->send_window = ctx->connection->init_window;
        ctx->recv_window = NGX_HTTP_V2_MAX_WINDOW;

        ctx->connection->last_stream_id += 2;
        ctx->id = ctx->c...",4187.0,4245.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5002,133685,ngx_http_grpc_cleanup,1,ngx_http_grpc_cleanup,void ngx_http_grpc_cleanup (void*),http\modules\ngx_http_grpc_module.c,"static void
ngx_http_grpc_cleanup(void *data)
{
#if 0
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""grpc cleanup"");
#endif
    return;
}",4248.0,4256.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5003,133690,ngx_http_grpc_abort_request,1,ngx_http_grpc_abort_request,void ngx_http_grpc_abort_request (ngx_http_request_t*),http\modules\ngx_http_grpc_module.c,"static void
ngx_http_grpc_abort_request(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""abort grpc request"");
    return;
}",4259.0,4265.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5004,133695,ngx_http_grpc_finalize_request,1,ngx_http_grpc_finalize_request,"void ngx_http_grpc_finalize_request (ngx_http_request_t*,ngx_int_t)",http\modules\ngx_http_grpc_module.c,"static void
ngx_http_grpc_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""finalize grpc request"");
    return;
}",4268.0,4274.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5005,133701,ngx_http_grpc_internal_trailers_variable,1,ngx_http_grpc_internal_trailers_variable,"ngx_int_t ngx_http_grpc_internal_trailers_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_internal_trailers_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_table_elt_t  *te;

    te = r->headers_in.te;

    if (te == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    if (ngx_strlcasestrn(te->value.data, te->value.data + te->value.len,
                         (u_char *) ""trailers"", 8 - 1)
        == NULL)
    {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = (u_char *) ""trailers"";
    v->len = sizeof(""trailers"") - 1;

    return NGX_OK;
}",4277.0,4306.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5006,133708,ngx_http_grpc_add_variables,1,ngx_http_grpc_add_variables,ngx_int_t ngx_http_grpc_add_variables (ngx_conf_t*),http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_grpc_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",4309.0,4325.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5007,133713,ngx_http_grpc_create_loc_conf,1,ngx_http_grpc_create_loc_conf,void* ngx_http_grpc_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_grpc_module.c,"static void *
ngx_http_grpc_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_grpc_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_grpc_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->upstream.ignore_headers = 0;
     *     conf->upstream.next_upstream = 0;
     *     conf->upstream.hide_headers_hash = { NULL, 0 };
     *
     *     conf->headers.lengths = NULL;
     *     conf->headers.values = NULL;
     *     conf->headers.hash = { NULL, 0 };
     *     conf->host = { 0, NULL };
     *     conf->host_set = 0;
     *     conf->ssl = 0;
     *     conf->ssl_protocols = 0;
     *     conf->ssl_ciphers = { 0, NULL };
     *     conf->ssl_trusted_certificate = { 0, NULL };
     *     conf->ssl_crl = { 0, NULL };
     */

    conf->upstream.local = NGX_CONF_UNSET_PTR;
    conf->upstream.socket_keepalive = NGX_CONF_UNSET;
    conf->upstream.next_upstream_tries = NGX_CONF_UNSET_UINT;
    conf-...",4328.0,4404.0,1.0,1.0,77.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5008,133718,ngx_http_grpc_merge_loc_conf,1,ngx_http_grpc_merge_loc_conf,"char* ngx_http_grpc_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_grpc_module.c,"static char *
ngx_http_grpc_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_grpc_loc_conf_t *prev = parent;
    ngx_http_grpc_loc_conf_t *conf = child;

    ngx_int_t                  rc;
    ngx_hash_init_t            hash;
    ngx_http_core_loc_conf_t  *clcf;

    ngx_conf_merge_ptr_value(conf->upstream.local,
                              prev->upstream.local, NULL);

    ngx_conf_merge_value(conf->upstream.socket_keepalive,
                              prev->upstream.socket_keepalive, 0);

    ngx_conf_merge_uint_value(conf->upstream.next_upstream_tries,
                              prev->upstream.next_upstream_tries, 0);

    ngx_conf_merge_msec_value(conf->upstream.connect_timeout,
                              prev->upstream.connect_timeout, 60000);

    ngx_conf_merge_msec_value(conf->upstream.send_timeout,
                              prev->upstream.send_timeout, 60000);

    ngx_conf_merge_msec_value(conf->upstream.read_timeout,
                ...",4407.0,4559.0,1.0,1.0,153.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5009,133725,ngx_http_grpc_init_headers,1,ngx_http_grpc_init_headers,"ngx_int_t ngx_http_grpc_init_headers (ngx_conf_t*,ngx_http_grpc_loc_conf_t*,ngx_http_grpc_headers_t*,ngx_keyval_t*)",http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_init_headers(ngx_conf_t *cf, ngx_http_grpc_loc_conf_t *conf,
    ngx_http_grpc_headers_t *headers, ngx_keyval_t *default_headers)
{
    u_char                       *p;
    size_t                        size;
    uintptr_t                    *code;
    ngx_uint_t                    i;
    ngx_array_t                   headers_names, headers_merged;
    ngx_keyval_t                 *src, *s, *h;
    ngx_hash_key_t               *hk;
    ngx_hash_init_t               hash;
    ngx_http_script_compile_t     sc;
    ngx_http_script_copy_code_t  *copy;

    if (headers->hash.buckets) {
        return NGX_OK;
    }

    if (ngx_array_init(&headers_names, cf->temp_pool, 4, sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&headers_merged, cf->temp_pool, 4, sizeof(ngx_keyval_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    headers->lengths = ngx_array_create(cf->pool, 64, 1);
    if (heade...",4562.0,4732.0,1.0,1.0,171.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5010,133733,ngx_http_grpc_pass,1,ngx_http_grpc_pass,"char* ngx_http_grpc_pass (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_grpc_module.c,"static char *
ngx_http_grpc_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_grpc_loc_conf_t *glcf = conf;

    size_t                      add;
    ngx_str_t                  *value, *url;
    ngx_url_t                   u;
    ngx_uint_t                  n;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_script_compile_t   sc;

    if (glcf->upstream.upstream || glcf->grpc_lengths) {
        return ""is duplicate"";
    }

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);

    clcf->handler = ngx_http_grpc_handler;

    if (clcf->name.len && clcf->name.data[clcf->name.len - 1] == '/') {
        clcf->auto_redirect = 1;
    }

    value = cf->args->elts;

    url = &value[1];

    n = ngx_http_script_variables_count(url);

    if (n) {

        ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

        sc.cf = cf;
        sc.source = url;
        sc.lengths = &glcf->grpc_lengths;
        sc.values = &glcf->grpc_values;
        sc.variabl...",4735.0,4833.0,1.0,1.0,99.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5011,134178,ngx_http_grpc_handler,1,ngx_http_grpc_handler,ngx_int_t ngx_http_grpc_handler (ngx_http_request_t*),http\modules\ngx_http_grpc_module.c,"static ngx_int_t
ngx_http_grpc_handler(ngx_http_request_t *r)
{
    ngx_int_t                  rc;
    ngx_http_upstream_t       *u;
    ngx_http_grpc_ctx_t       *ctx;
    ngx_http_grpc_loc_conf_t  *glcf;

    if (ngx_http_upstream_create(r) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_grpc_ctx_t));
    if (ctx == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ctx->request = r;

    ngx_http_set_ctx(r, ctx, ngx_http_grpc_module);

    glcf = ngx_http_get_module_loc_conf(r, ngx_http_grpc_module);

    u = r->upstream;

    if (glcf->grpc_lengths == NULL) {
        ctx->host = glcf->host;

#if (NGX_HTTP_SSL)
        u->ssl = (glcf->upstream.ssl != NULL);

        if (u->ssl) {
            ngx_str_set(&u->schema, ""grpcs://"");

        } else {
            ngx_str_set(&u->schema, ""grpc://"");
        }
#else
        ngx_str_set(&u->schema, ""grpc://"");
#endif

    } else {
        if (ngx_http_grpc_ev...",536.0,606.0,1.0,1.0,71.0,45,9,53,21,0,12,5,5,2,3,,0,12,2,1,1,ngx_int_t
5012,146106,ngx_http_gunzip_filter_inflate_start,1,ngx_http_gunzip_filter_inflate_start,"ngx_int_t ngx_http_gunzip_filter_inflate_start (ngx_http_request_t*,ngx_http_gunzip_ctx_t*)",http\modules\ngx_http_gunzip_filter_module.c,"static ngx_int_t
ngx_http_gunzip_filter_inflate_start(ngx_http_request_t *r,
    ngx_http_gunzip_ctx_t *ctx)
{
    int  rc;

    ctx->zstream.next_in = Z_NULL;
    ctx->zstream.avail_in = 0;

    ctx->zstream.zalloc = ngx_http_gunzip_filter_alloc;
    ctx->zstream.zfree = ngx_http_gunzip_filter_free;
    ctx->zstream.opaque = ctx;

    /* windowBits +16 to decode gzip, zlib 1.2.0.4+ */
    rc = inflateInit2(&ctx->zstream, MAX_WBITS + 16);

    if (rc != Z_OK) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                      ""inflateInit2() failed: %d"", rc);
        return NGX_ERROR;
    }

    ctx->started = 1;

    ctx->last_out = &ctx->out;
    ctx->flush = Z_NO_FLUSH;

    return NGX_OK;
}",301.0,329.0,1.0,1.0,29.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5013,146112,ngx_http_gunzip_filter_add_data,1,ngx_http_gunzip_filter_add_data,"ngx_int_t ngx_http_gunzip_filter_add_data (ngx_http_request_t*,ngx_http_gunzip_ctx_t*)",http\modules\ngx_http_gunzip_filter_module.c,"static ngx_int_t
ngx_http_gunzip_filter_add_data(ngx_http_request_t *r,
    ngx_http_gunzip_ctx_t *ctx)
{
    if (ctx->zstream.avail_in || ctx->flush != Z_NO_FLUSH || ctx->redo) {
        return NGX_OK;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""gunzip in: %p"", ctx->in);

    if (ctx->in == NULL) {
        return NGX_DECLINED;
    }

    ctx->in_buf = ctx->in->buf;
    ctx->in = ctx->in->next;

    ctx->zstream.next_in = ctx->in_buf->pos;
    ctx->zstream.avail_in = ctx->in_buf->last - ctx->in_buf->pos;

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""gunzip in_buf:%p ni:%p ai:%ud"",
                   ctx->in_buf,
                   ctx->zstream.next_in, ctx->zstream.avail_in);

    if (ctx->in_buf->last_buf || ctx->in_buf->last_in_chain) {
        ctx->flush = Z_FINISH;

    } else if (ctx->in_buf->flush) {
        ctx->flush = Z_SYNC_FLUSH;

    } else if (ctx->zstream.avail_in == 0) {
        /* ctx->...",332.0,370.0,1.0,1.0,39.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5014,146118,ngx_http_gunzip_filter_get_buf,1,ngx_http_gunzip_filter_get_buf,"ngx_int_t ngx_http_gunzip_filter_get_buf (ngx_http_request_t*,ngx_http_gunzip_ctx_t*)",http\modules\ngx_http_gunzip_filter_module.c,"static ngx_int_t
ngx_http_gunzip_filter_get_buf(ngx_http_request_t *r,
    ngx_http_gunzip_ctx_t *ctx)
{
    ngx_http_gunzip_conf_t  *conf;

    if (ctx->zstream.avail_out) {
        return NGX_OK;
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_gunzip_filter_module);

    if (ctx->free) {
        ctx->out_buf = ctx->free->buf;
        ctx->free = ctx->free->next;

        ctx->out_buf->flush = 0;

    } else if (ctx->bufs < conf->bufs.num) {

        ctx->out_buf = ngx_create_temp_buf(r->pool, conf->bufs.size);
        if (ctx->out_buf == NULL) {
            return NGX_ERROR;
        }

        ctx->out_buf->tag = (ngx_buf_tag_t) &ngx_http_gunzip_filter_module;
        ctx->out_buf->recycled = 1;
        ctx->bufs++;

    } else {
        ctx->nomem = 1;
        return NGX_DECLINED;
    }

    ctx->zstream.next_out = ctx->out_buf->pos;
    ctx->zstream.avail_out = conf->bufs.size;

    return NGX_OK;
}",373.0,411.0,1.0,1.0,39.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5015,146124,ngx_http_gunzip_filter_inflate,1,ngx_http_gunzip_filter_inflate,"ngx_int_t ngx_http_gunzip_filter_inflate (ngx_http_request_t*,ngx_http_gunzip_ctx_t*)",http\modules\ngx_http_gunzip_filter_module.c,"static ngx_int_t
ngx_http_gunzip_filter_inflate(ngx_http_request_t *r,
    ngx_http_gunzip_ctx_t *ctx)
{
    int           rc;
    ngx_buf_t    *b;
    ngx_chain_t  *cl;

    ngx_log_debug6(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""inflate in: ni:%p no:%p ai:%ud ao:%ud fl:%d redo:%d"",
                   ctx->zstream.next_in, ctx->zstream.next_out,
                   ctx->zstream.avail_in, ctx->zstream.avail_out,
                   ctx->flush, ctx->redo);

    rc = inflate(&ctx->zstream, ctx->flush);

    if (rc != Z_OK && rc != Z_STREAM_END && rc != Z_BUF_ERROR) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""inflate() failed: %d, %d"", ctx->flush, rc);
        return NGX_ERROR;
    }

    ngx_log_debug5(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""inflate out: ni:%p no:%p ai:%ud ao:%ud rc:%d"",
                   ctx->zstream.next_in, ctx->zstream.next_out,
                   ctx->zstream.avail_in, ctx->zstream...",414.0,563.0,1.0,1.0,150.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5016,146130,ngx_http_gunzip_filter_inflate_end,1,ngx_http_gunzip_filter_inflate_end,"ngx_int_t ngx_http_gunzip_filter_inflate_end (ngx_http_request_t*,ngx_http_gunzip_ctx_t*)",http\modules\ngx_http_gunzip_filter_module.c,"static ngx_int_t
ngx_http_gunzip_filter_inflate_end(ngx_http_request_t *r,
    ngx_http_gunzip_ctx_t *ctx)
{
    int           rc;
    ngx_buf_t    *b;
    ngx_chain_t  *cl;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""gunzip inflate end"");

    rc = inflateEnd(&ctx->zstream);

    if (rc != Z_OK) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                      ""inflateEnd() failed: %d"", rc);
        return NGX_ERROR;
    }

    b = ctx->out_buf;

    if (ngx_buf_size(b) == 0) {

        b = ngx_calloc_buf(ctx->request->pool);
        if (b == NULL) {
            return NGX_ERROR;
        }
    }

    cl = ngx_alloc_chain_link(r->pool);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    cl->buf = b;
    cl->next = NULL;
    *ctx->last_out = cl;
    ctx->last_out = &cl->next;

    b->last_buf = (r == r->main) ? 1 : 0;
    b->last_in_chain = 1;
    b->sync = 1;

    ctx->done = 1;

    return NGX_OK;
}",566.0,612.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5017,146136,ngx_http_gunzip_filter_alloc,1,ngx_http_gunzip_filter_alloc,"void* ngx_http_gunzip_filter_alloc (void*,u_int,u_int)",http\modules\ngx_http_gunzip_filter_module.c,"static void *
ngx_http_gunzip_filter_alloc(void *opaque, u_int items, u_int size)
{
    ngx_http_gunzip_ctx_t *ctx = opaque;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, ctx->request->connection->log, 0,
                   ""gunzip alloc: n:%ud s:%ud"",
                   items, size);

    return ngx_palloc(ctx->request->pool, items * size);
}",615.0,625.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void*
5018,146143,ngx_http_gunzip_filter_free,1,ngx_http_gunzip_filter_free,"void ngx_http_gunzip_filter_free (void*,void*)",http\modules\ngx_http_gunzip_filter_module.c,"static void
ngx_http_gunzip_filter_free(void *opaque, void *address)
{
#if 0
    ngx_http_gunzip_ctx_t *ctx = opaque;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->request->connection->log, 0,
                   ""gunzip free: %p"", address);
#endif
}",628.0,637.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5019,146149,ngx_http_gunzip_filter_init,1,ngx_http_gunzip_filter_init,ngx_int_t ngx_http_gunzip_filter_init (ngx_conf_t*),http\modules\ngx_http_gunzip_filter_module.c,"static ngx_int_t
ngx_http_gunzip_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_gunzip_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_gunzip_body_filter;

    return NGX_OK;
}",677.0,687.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5020,146154,ngx_http_gunzip_create_conf,1,ngx_http_gunzip_create_conf,void* ngx_http_gunzip_create_conf (ngx_conf_t*),http\modules\ngx_http_gunzip_filter_module.c,"static void *
ngx_http_gunzip_create_conf(ngx_conf_t *cf)
{
    ngx_http_gunzip_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_gunzip_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->bufs.num = 0;
     */

    conf->enable = NGX_CONF_UNSET;

    return conf;
}",640.0,659.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5021,146159,ngx_http_gunzip_merge_conf,1,ngx_http_gunzip_merge_conf,"char* ngx_http_gunzip_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_gunzip_filter_module.c,"static char *
ngx_http_gunzip_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_gunzip_conf_t *prev = parent;
    ngx_http_gunzip_conf_t *conf = child;

    ngx_conf_merge_value(conf->enable, prev->enable, 0);

    ngx_conf_merge_bufs_value(conf->bufs, prev->bufs,
                              (128 * 1024) / ngx_pagesize, ngx_pagesize);

    return NGX_CONF_OK;
}",662.0,674.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5022,146234,ngx_http_gunzip_header_filter,1,ngx_http_gunzip_header_filter,ngx_int_t ngx_http_gunzip_header_filter (ngx_http_request_t*),http\modules\ngx_http_gunzip_filter_module.c,"static ngx_int_t
ngx_http_gunzip_header_filter(ngx_http_request_t *r)
{
    ngx_http_gunzip_ctx_t   *ctx;
    ngx_http_gunzip_conf_t  *conf;

    conf = ngx_http_get_module_loc_conf(r, ngx_http_gunzip_filter_module);

    /* TODO support multiple content-codings */
    /* TODO always gunzip - due to configuration or module request */
    /* TODO ignore content encoding? */

    if (!conf->enable
        || r->headers_out.content_encoding == NULL
        || r->headers_out.content_encoding->value.len != 4
        || ngx_strncasecmp(r->headers_out.content_encoding->value.data,
                           (u_char *) ""gzip"", 4) != 0)
    {
        return ngx_http_next_header_filter(r);
    }

    r->gzip_vary = 1;

    if (!r->gzip_tested) {
        if (ngx_http_gzip_ok(r) == NGX_OK) {
            return ngx_http_next_header_filter(r);
        }

    } else if (r->gzip_ok) {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_gunzip_ctx_t))...",120.0,171.0,1.0,1.0,52.0,40,9,33,8,0,8,5,6,2,3,,0,7,2,1,1,ngx_int_t
5023,146376,ngx_http_gunzip_body_filter,1,ngx_http_gunzip_body_filter,"ngx_int_t ngx_http_gunzip_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_gunzip_filter_module.c,"static ngx_int_t
ngx_http_gunzip_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    int                     rc;
    ngx_uint_t              flush;
    ngx_chain_t            *cl;
    ngx_http_gunzip_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_gunzip_filter_module);

    if (ctx == NULL || ctx->done) {
        return ngx_http_next_body_filter(r, in);
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http gunzip filter"");

    if (!ctx->started) {
        if (ngx_http_gunzip_filter_inflate_start(r, ctx) != NGX_OK) {
            goto failed;
        }
    }

    if (in) {
        if (ngx_chain_add_copy(r->pool, &ctx->in, in) != NGX_OK) {
            goto failed;
        }
    }

    if (ctx->nomem) {

        /* flush busy buffers */

        if (ngx_http_next_body_filter(r, NULL) == NGX_ERROR) {
            goto failed;
        }

        cl = NULL;

        ngx_chain_update_chains(r->pool, &ctx->free, &ctx->busy, &cl,
    ...",174.0,298.0,1.0,1.0,125.0,65,10,82,14,0,29,29,38,8,7,,0,27,4,2,2,ngx_int_t
5024,147824,ngx_http_gzip_filter_memory,1,ngx_http_gzip_filter_memory,"void ngx_http_gzip_filter_memory (ngx_http_request_t*,ngx_http_gzip_ctx_t*)",http\modules\ngx_http_gzip_filter_module.c,"static void
ngx_http_gzip_filter_memory(ngx_http_request_t *r, ngx_http_gzip_ctx_t *ctx)
{
    int                    wbits, memlevel;
    ngx_http_gzip_conf_t  *conf;

    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);

    wbits = conf->wbits;
    memlevel = conf->memlevel;

    if (r->headers_out.content_length_n > 0) {

        /* the actual zlib window size is smaller by 262 bytes */

        while (r->headers_out.content_length_n < ((1 << (wbits - 1)) - 262)) {
            wbits--;
            memlevel--;
        }

        if (memlevel < 1) {
            memlevel = 1;
        }
    }

    ctx->wbits = wbits;
    ctx->memlevel = memlevel;

    /*
     * We preallocate a memory for zlib in one buffer (200K-400K), this
     * decreases a number of malloc() and free() calls and also probably
     * decreases a number of syscalls (sbrk()/mmap() and so on).
     * Besides we free the memory as soon as a gzipping will complete
     * and do not wait while a who...",466.0,529.0,1.0,1.0,64.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,void
5025,147830,ngx_http_gzip_filter_buffer,1,ngx_http_gzip_filter_buffer,"ngx_int_t ngx_http_gzip_filter_buffer (ngx_http_gzip_ctx_t*,ngx_chain_t*)",http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_filter_buffer(ngx_http_gzip_ctx_t *ctx, ngx_chain_t *in)
{
    size_t                 size, buffered;
    ngx_buf_t             *b, *buf;
    ngx_chain_t           *cl, **ll;
    ngx_http_request_t    *r;
    ngx_http_gzip_conf_t  *conf;

    r = ctx->request;

    r->connection->buffered |= NGX_HTTP_GZIP_BUFFERED;

    buffered = 0;
    ll = &ctx->in;

    for (cl = ctx->in; cl; cl = cl->next) {
        buffered += cl->buf->last - cl->buf->pos;
        ll = &cl->next;
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);

    while (in) {
        cl = ngx_alloc_chain_link(r->pool);
        if (cl == NULL) {
            return NGX_ERROR;
        }

        b = in->buf;

        size = b->last - b->pos;
        buffered += size;

        if (b->flush || b->last_buf || buffered > conf->postpone_gzipping) {
            ctx->buffering = 0;
        }

        if (ctx->buffering && size) {

            buf = ngx_create_temp_buf(r->p...",532.0,597.0,1.0,1.0,66.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5026,147836,ngx_http_gzip_filter_deflate_start,1,ngx_http_gzip_filter_deflate_start,"ngx_int_t ngx_http_gzip_filter_deflate_start (ngx_http_request_t*,ngx_http_gzip_ctx_t*)",http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_filter_deflate_start(ngx_http_request_t *r,
    ngx_http_gzip_ctx_t *ctx)
{
    int                    rc;
    ngx_http_gzip_conf_t  *conf;

    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);

    ctx->preallocated = ngx_palloc(r->pool, ctx->allocated);
    if (ctx->preallocated == NULL) {
        return NGX_ERROR;
    }

    ctx->free_mem = ctx->preallocated;

    ctx->zstream.zalloc = ngx_http_gzip_filter_alloc;
    ctx->zstream.zfree = ngx_http_gzip_filter_free;
    ctx->zstream.opaque = ctx;

    rc = deflateInit2(&ctx->zstream, (int) conf->level, Z_DEFLATED,
                      ctx->wbits + 16, ctx->memlevel, Z_DEFAULT_STRATEGY);

    if (rc != Z_OK) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                      ""deflateInit2() failed: %d"", rc);
        return NGX_ERROR;
    }

    ctx->last_out = &ctx->out;
    ctx->flush = Z_NO_FLUSH;

    return NGX_OK;
}",600.0,633.0,1.0,1.0,34.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5027,147842,ngx_http_gzip_filter_add_data,1,ngx_http_gzip_filter_add_data,"ngx_int_t ngx_http_gzip_filter_add_data (ngx_http_request_t*,ngx_http_gzip_ctx_t*)",http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_filter_add_data(ngx_http_request_t *r, ngx_http_gzip_ctx_t *ctx)
{
    ngx_chain_t  *cl;

    if (ctx->zstream.avail_in || ctx->flush != Z_NO_FLUSH || ctx->redo) {
        return NGX_OK;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""gzip in: %p"", ctx->in);

    if (ctx->in == NULL) {
        return NGX_DECLINED;
    }

    if (ctx->copy_buf) {

        /*
         * to avoid CPU cache trashing we do not free() just quit buf,
         * but postpone free()ing after zlib compressing and data output
         */

        ctx->copy_buf->next = ctx->copied;
        ctx->copied = ctx->copy_buf;
        ctx->copy_buf = NULL;
    }

    cl = ctx->in;
    ctx->in_buf = cl->buf;
    ctx->in = cl->next;

    if (ctx->in_buf->tag == (ngx_buf_tag_t) &ngx_http_gzip_filter_module) {
        ctx->copy_buf = cl;

    } else {
        ngx_free_chain(r->pool, cl);
    }

    ctx->zstream.next_in = ctx->in_buf->pos;
    ctx->zstre...",636.0,695.0,1.0,1.0,60.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5028,147848,ngx_http_gzip_filter_get_buf,1,ngx_http_gzip_filter_get_buf,"ngx_int_t ngx_http_gzip_filter_get_buf (ngx_http_request_t*,ngx_http_gzip_ctx_t*)",http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_filter_get_buf(ngx_http_request_t *r, ngx_http_gzip_ctx_t *ctx)
{
    ngx_chain_t           *cl;
    ngx_http_gzip_conf_t  *conf;

    if (ctx->zstream.avail_out) {
        return NGX_OK;
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);

    if (ctx->free) {

        cl = ctx->free;
        ctx->out_buf = cl->buf;
        ctx->free = cl->next;

        ngx_free_chain(r->pool, cl);

    } else if (ctx->bufs < conf->bufs.num) {

        ctx->out_buf = ngx_create_temp_buf(r->pool, conf->bufs.size);
        if (ctx->out_buf == NULL) {
            return NGX_ERROR;
        }

        ctx->out_buf->tag = (ngx_buf_tag_t) &ngx_http_gzip_filter_module;
        ctx->out_buf->recycled = 1;
        ctx->bufs++;

    } else {
        ctx->nomem = 1;
        return NGX_DECLINED;
    }

    ctx->zstream.next_out = ctx->out_buf->pos;
    ctx->zstream.avail_out = conf->bufs.size;

    return NGX_OK;
}",698.0,738.0,1.0,1.0,41.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5029,147854,ngx_http_gzip_filter_deflate,1,ngx_http_gzip_filter_deflate,"ngx_int_t ngx_http_gzip_filter_deflate (ngx_http_request_t*,ngx_http_gzip_ctx_t*)",http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_filter_deflate(ngx_http_request_t *r, ngx_http_gzip_ctx_t *ctx)
{
    int                    rc;
    ngx_buf_t             *b;
    ngx_chain_t           *cl;
    ngx_http_gzip_conf_t  *conf;

    ngx_log_debug6(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                 ""deflate in: ni:%p no:%p ai:%ud ao:%ud fl:%d redo:%d"",
                 ctx->zstream.next_in, ctx->zstream.next_out,
                 ctx->zstream.avail_in, ctx->zstream.avail_out,
                 ctx->flush, ctx->redo);

    rc = deflate(&ctx->zstream, ctx->flush);

    if (rc != Z_OK && rc != Z_STREAM_END && rc != Z_BUF_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                      ""deflate() failed: %d, %d"", ctx->flush, rc);
        return NGX_ERROR;
    }

    ngx_log_debug5(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""deflate out: ni:%p no:%p ai:%ud ao:%ud rc:%d"",
                   ctx->zstream.next_in, ctx->zstream.next_out,
        ...",741.0,865.0,1.0,1.0,125.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5030,147860,ngx_http_gzip_filter_deflate_end,1,ngx_http_gzip_filter_deflate_end,"ngx_int_t ngx_http_gzip_filter_deflate_end (ngx_http_request_t*,ngx_http_gzip_ctx_t*)",http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_filter_deflate_end(ngx_http_request_t *r,
    ngx_http_gzip_ctx_t *ctx)
{
    int           rc;
    ngx_buf_t    *b;
    ngx_chain_t  *cl;

    ctx->zin = ctx->zstream.total_in;
    ctx->zout = ctx->zstream.total_out;

    rc = deflateEnd(&ctx->zstream);

    if (rc != Z_OK) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                      ""deflateEnd() failed: %d"", rc);
        return NGX_ERROR;
    }

    ngx_pfree(r->pool, ctx->preallocated);

    cl = ngx_alloc_chain_link(r->pool);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    b = ctx->out_buf;

    if (ngx_buf_size(b) == 0) {
        b->temporary = 0;
    }

    b->last_buf = 1;

    cl->buf = b;
    cl->next = NULL;
    *ctx->last_out = cl;
    ctx->last_out = &cl->next;

    ctx->zstream.avail_in = 0;
    ctx->zstream.avail_out = 0;

    ctx->done = 1;

    r->connection->buffered &= ~NGX_HTTP_GZIP_BUFFERED;

    return NGX_OK;
}",868.0,915.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5031,147866,ngx_http_gzip_filter_alloc,1,ngx_http_gzip_filter_alloc,"void* ngx_http_gzip_filter_alloc (void*,u_int,u_int)",http\modules\ngx_http_gzip_filter_module.c,"static void *
ngx_http_gzip_filter_alloc(void *opaque, u_int items, u_int size)
{
    ngx_http_gzip_ctx_t *ctx = opaque;

    void        *p;
    ngx_uint_t   alloc;

    alloc = items * size;

    if (items == 1 && alloc % 512 != 0 && alloc < 8192) {

        /*
         * The zlib deflate_state allocation, it takes about 6K,
         * we allocate 8K.  Other allocations are divisible by 512.
         */

        alloc = 8192;
    }

    if (alloc <= ctx->allocated) {
        p = ctx->free_mem;
        ctx->free_mem += alloc;
        ctx->allocated -= alloc;

        ngx_log_debug4(NGX_LOG_DEBUG_HTTP, ctx->request->connection->log, 0,
                       ""gzip alloc: n:%ud s:%ud a:%ui p:%p"",
                       items, size, alloc, p);

        return p;
    }

    if (ctx->zlib_ng) {
        ngx_log_error(NGX_LOG_ALERT, ctx->request->connection->log, 0,
                      ""gzip filter failed to use preallocated memory: ""
                      ""%ud of %ui"", items * size, ct...",918.0,962.0,1.0,1.0,45.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void*
5032,147873,ngx_http_gzip_filter_free,1,ngx_http_gzip_filter_free,"void ngx_http_gzip_filter_free (void*,void*)",http\modules\ngx_http_gzip_filter_module.c,"static void
ngx_http_gzip_filter_free(void *opaque, void *address)
{
#if 0
    ngx_http_gzip_ctx_t *ctx = opaque;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->request->connection->log, 0,
                   ""gzip free: %p"", address);
#endif
}",965.0,974.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5033,147879,ngx_http_gzip_filter_free_copy_buf,1,ngx_http_gzip_filter_free_copy_buf,"void ngx_http_gzip_filter_free_copy_buf (ngx_http_request_t*,ngx_http_gzip_ctx_t*)",http\modules\ngx_http_gzip_filter_module.c,"static void
ngx_http_gzip_filter_free_copy_buf(ngx_http_request_t *r,
    ngx_http_gzip_ctx_t *ctx)
{
    ngx_chain_t  *cl;

    for (cl = ctx->copied; cl; cl = cl->next) {
        ngx_pfree(r->pool, cl->buf->start);
    }

    ctx->copied = NULL;
}",977.0,988.0,1.0,1.0,12.0,0,0,0,0,3,0,1,1,0,0,,0,0,4,2,2,void
5034,147885,ngx_http_gzip_add_variables,1,ngx_http_gzip_add_variables,ngx_int_t ngx_http_gzip_add_variables (ngx_conf_t*),http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var;

    var = ngx_http_add_variable(cf, &ngx_http_gzip_ratio, NGX_HTTP_VAR_NOHASH);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = ngx_http_gzip_ratio_variable;

    return NGX_OK;
}",991.0,1004.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5035,147890,ngx_http_gzip_ratio_variable,1,ngx_http_gzip_ratio_variable,"ngx_int_t ngx_http_gzip_ratio_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_ratio_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t            zint, zfrac;
    ngx_http_gzip_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_gzip_filter_module);

    if (ctx == NULL || ctx->zout == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = ngx_pnalloc(r->pool, NGX_INT32_LEN + 3);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    zint = (ngx_uint_t) (ctx->zin / ctx->zout);
    zfrac = (ngx_uint_t) ((ctx->zin * 100 / ctx->zout) % 100);

    if ((ctx->zin * 1000 / ctx->zout) % 10 > 4) {

        /* the rounding, e.g., 2.125 to 2.13 */

        zfrac++;

        if (zfrac > 99) {
            zint++;
            zfrac = 0;
        }
    }

    v->len = ngx_sprintf(v->data, ""%ui.%02ui"", zint, zfrac) - v->data;

    return NGX_OK;
}",1007.0,1048.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5036,147897,ngx_http_gzip_filter_init,1,ngx_http_gzip_filter_init,ngx_int_t ngx_http_gzip_filter_init (ngx_conf_t*),http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_gzip_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_gzip_body_filter;

    return NGX_OK;
}",1114.0,1124.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5037,147902,ngx_http_gzip_create_conf,1,ngx_http_gzip_create_conf,void* ngx_http_gzip_create_conf (ngx_conf_t*),http\modules\ngx_http_gzip_filter_module.c,"static void *
ngx_http_gzip_create_conf(ngx_conf_t *cf)
{
    ngx_http_gzip_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_gzip_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->bufs.num = 0;
     *     conf->types = { NULL };
     *     conf->types_keys = NULL;
     */

    conf->enable = NGX_CONF_UNSET;
    conf->no_buffer = NGX_CONF_UNSET;

    conf->postpone_gzipping = NGX_CONF_UNSET_SIZE;
    conf->level = NGX_CONF_UNSET;
    conf->wbits = NGX_CONF_UNSET_SIZE;
    conf->memlevel = NGX_CONF_UNSET_SIZE;
    conf->min_length = NGX_CONF_UNSET;

    return conf;
}",1051.0,1079.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5038,147907,ngx_http_gzip_merge_conf,1,ngx_http_gzip_merge_conf,"char* ngx_http_gzip_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_gzip_filter_module.c,"static char *
ngx_http_gzip_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_gzip_conf_t *prev = parent;
    ngx_http_gzip_conf_t *conf = child;

    ngx_conf_merge_value(conf->enable, prev->enable, 0);
    ngx_conf_merge_value(conf->no_buffer, prev->no_buffer, 0);

    ngx_conf_merge_bufs_value(conf->bufs, prev->bufs,
                              (128 * 1024) / ngx_pagesize, ngx_pagesize);

    ngx_conf_merge_size_value(conf->postpone_gzipping, prev->postpone_gzipping,
                              0);
    ngx_conf_merge_value(conf->level, prev->level, 1);
    ngx_conf_merge_size_value(conf->wbits, prev->wbits, MAX_WBITS);
    ngx_conf_merge_size_value(conf->memlevel, prev->memlevel,
                              MAX_MEM_LEVEL - 1);
    ngx_conf_merge_value(conf->min_length, prev->min_length, 20);

    if (ngx_http_merge_types(cf, &conf->types_keys, &conf->types,
                             &prev->types_keys, &prev->types,
                             ngx_http...",1082.0,1111.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5039,147914,ngx_http_gzip_window,1,ngx_http_gzip_window,"char* ngx_http_gzip_window (ngx_conf_t*,void*,void*)",http\modules\ngx_http_gzip_filter_module.c,"static char *
ngx_http_gzip_window(ngx_conf_t *cf, void *post, void *data)
{
    size_t *np = data;

    size_t  wbits, wsize;

    wbits = 15;

    for (wsize = 32 * 1024; wsize > 256; wsize >>= 1) {

        if (wsize == *np) {
            *np = wbits;

            return NGX_CONF_OK;
        }

        wbits--;
    }

    return ""must be 512, 1k, 2k, 4k, 8k, 16k, or 32k"";
}",1127.0,1148.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5040,147921,ngx_http_gzip_hash,1,ngx_http_gzip_hash,"char* ngx_http_gzip_hash (ngx_conf_t*,void*,void*)",http\modules\ngx_http_gzip_filter_module.c,"static char *
ngx_http_gzip_hash(ngx_conf_t *cf, void *post, void *data)
{
    size_t *np = data;

    size_t  memlevel, hsize;

    memlevel = 9;

    for (hsize = 128 * 1024; hsize > 256; hsize >>= 1) {

        if (hsize == *np) {
            *np = memlevel;

            return NGX_CONF_OK;
        }

        memlevel--;
    }

    return ""must be 512, 1k, 2k, 4k, 8k, 16k, 32k, 64k, or 128k"";
}",1151.0,1172.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5041,148137,ngx_http_gzip_header_filter,1,ngx_http_gzip_header_filter,ngx_int_t ngx_http_gzip_header_filter (ngx_http_request_t*),http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_header_filter(ngx_http_request_t *r)
{
    ngx_table_elt_t       *h;
    ngx_http_gzip_ctx_t   *ctx;
    ngx_http_gzip_conf_t  *conf;

    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);

    if (!conf->enable
        || (r->headers_out.status != NGX_HTTP_OK
            && r->headers_out.status != NGX_HTTP_FORBIDDEN
            && r->headers_out.status != NGX_HTTP_NOT_FOUND)
        || (r->headers_out.content_encoding
            && r->headers_out.content_encoding->value.len)
        || (r->headers_out.content_length_n != -1
            && r->headers_out.content_length_n < conf->min_length)
        || ngx_http_test_content_type(r, &conf->types) == NULL
        || r->header_only)
    {
        return ngx_http_next_header_filter(r);
    }

    r->gzip_vary = 1;

#if (NGX_HTTP_DEGRADATION)
    {
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->gzip_disable_degradati...",219.0,294.0,1.0,1.0,76.0,70,12,55,12,0,17,6,7,4,5,,0,15,2,1,1,ngx_int_t
5042,148352,ngx_http_gzip_body_filter,1,ngx_http_gzip_body_filter,"ngx_int_t ngx_http_gzip_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_gzip_filter_module.c,"static ngx_int_t
ngx_http_gzip_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    int                   rc;
    ngx_uint_t            flush;
    ngx_chain_t          *cl;
    ngx_http_gzip_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_gzip_filter_module);

    if (ctx == NULL || ctx->done || r->header_only) {
        return ngx_http_next_body_filter(r, in);
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http gzip filter"");

    if (ctx->buffering) {

        /*
         * With default memory settings zlib starts to output gzipped data
         * only after it has got about 90K, so it makes sense to allocate
         * zlib memory (200-400K) only after we have enough data to compress.
         * Although we copy buffers, nevertheless for not big responses
         * this allows to allocate zlib memory, to compress and to output
         * the response in one step using hot CPU cache.
         */

        if (in) {
       ...",297.0,463.0,1.0,1.0,167.0,73,10,102,16,0,37,35,45,11,12,,0,31,4,2,2,ngx_int_t
5043,150662,ngx_http_gzip_static_handler,1,ngx_http_gzip_static_handler,ngx_int_t ngx_http_gzip_static_handler (ngx_http_request_t*),http\modules\ngx_http_gzip_static_module.c,"static ngx_int_t
ngx_http_gzip_static_handler(ngx_http_request_t *r)
{
    u_char                       *p;
    size_t                        root;
    ngx_str_t                     path;
    ngx_int_t                     rc;
    ngx_uint_t                    level;
    ngx_log_t                    *log;
    ngx_buf_t                    *b;
    ngx_chain_t                   out;
    ngx_table_elt_t              *h;
    ngx_open_file_info_t          of;
    ngx_http_core_loc_conf_t     *clcf;
    ngx_http_gzip_static_conf_t  *gzcf;

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
        return NGX_DECLINED;
    }

    if (r->uri.data[r->uri.len - 1] == '/') {
        return NGX_DECLINED;
    }

    gzcf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_static_module);

    if (gzcf->enable == NGX_HTTP_GZIP_STATIC_OFF) {
        return NGX_DECLINED;
    }

    if (gzcf->enable == NGX_HTTP_GZIP_STATIC_ON) {
        rc = ngx_http_gzip_ok(r);

    } else {
        /* always */
    ...",82.0,283.0,1.0,24.0,202.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5044,150667,ngx_http_gzip_static_create_conf,1,ngx_http_gzip_static_create_conf,void* ngx_http_gzip_static_create_conf (ngx_conf_t*),http\modules\ngx_http_gzip_static_module.c,"static void *
ngx_http_gzip_static_create_conf(ngx_conf_t *cf)
{
    ngx_http_gzip_static_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_gzip_static_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->enable = NGX_CONF_UNSET_UINT;

    return conf;
}",286.0,299.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5045,150672,ngx_http_gzip_static_merge_conf,1,ngx_http_gzip_static_merge_conf,"char* ngx_http_gzip_static_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_gzip_static_module.c,"static char *
ngx_http_gzip_static_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_gzip_static_conf_t *prev = parent;
    ngx_http_gzip_static_conf_t *conf = child;

    ngx_conf_merge_uint_value(conf->enable, prev->enable,
                              NGX_HTTP_GZIP_STATIC_OFF);

    return NGX_CONF_OK;
}",302.0,312.0,1.0,30.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5046,150679,ngx_http_gzip_static_init,1,ngx_http_gzip_static_init,ngx_int_t ngx_http_gzip_static_init (ngx_conf_t*),http\modules\ngx_http_gzip_static_module.c,"static ngx_int_t
ngx_http_gzip_static_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_CONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_gzip_static_handler;

    return NGX_OK;
}",315.0,331.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5047,151442,ngx_http_set_header_pt,1,ngx_http_set_header_pt,"ngx_int_t ngx_http_set_header_pt (ngx_http_request_t*,ngx_http_header_val_t*,ngx_str_t*)",http\modules\ngx_http_headers_filter_module.c,"typedef ngx_int_t (*ngx_http_set_header_pt)(ngx_http_request_t *r,
    ngx_http_header_val_t *hv, ngx_str_t *value);",15.0,16.0,19.0,48.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5048,151476,ngx_http_set_expires,1,ngx_http_set_expires,"ngx_int_t ngx_http_set_expires (ngx_http_request_t*,ngx_http_headers_conf_t*)",http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_set_expires(ngx_http_request_t *r, ngx_http_headers_conf_t *conf)
{
    char                *err;
    size_t               len;
    time_t               now, expires_time, max_age;
    ngx_str_t            value;
    ngx_int_t            rc;
    ngx_uint_t           i;
    ngx_table_elt_t     *e, *cc, **ccp;
    ngx_http_expires_t   expires;

    expires = conf->expires;
    expires_time = conf->expires_time;

    if (conf->expires_value != NULL) {

        if (ngx_http_complex_value(r, conf->expires_value, &value) != NGX_OK) {
            return NGX_ERROR;
        }

        rc = ngx_http_parse_expires(&value, &expires, &expires_time, &err);

        if (rc != NGX_OK) {
            return NGX_OK;
        }

        if (expires == NGX_HTTP_EXPIRES_OFF) {
            return NGX_OK;
        }
    }

    e = r->headers_out.expires;

    if (e == NULL) {

        e = ngx_list_push(&r->headers_out.headers);
        if (e == NULL) {
            return NGX_ERROR;
...",324.0,467.0,1.0,1.0,144.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5049,151482,ngx_http_parse_expires,1,ngx_http_parse_expires,"ngx_int_t ngx_http_parse_expires (ngx_str_t*,ngx_http_expires_t*,time_t*,char**)",http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_parse_expires(ngx_str_t *value, ngx_http_expires_t *expires,
    time_t *expires_time, char **err)
{
    ngx_uint_t  minus;

    if (*expires != NGX_HTTP_EXPIRES_MODIFIED) {

        if (value->len == 5 && ngx_strncmp(value->data, ""epoch"", 5) == 0) {
            *expires = NGX_HTTP_EXPIRES_EPOCH;
            return NGX_OK;
        }

        if (value->len == 3 && ngx_strncmp(value->data, ""max"", 3) == 0) {
            *expires = NGX_HTTP_EXPIRES_MAX;
            return NGX_OK;
        }

        if (value->len == 3 && ngx_strncmp(value->data, ""off"", 3) == 0) {
            *expires = NGX_HTTP_EXPIRES_OFF;
            return NGX_OK;
        }
    }

    if (value->len && value->data[0] == '@') {
        value->data++;
        value->len--;
        minus = 0;

        if (*expires == NGX_HTTP_EXPIRES_MODIFIED) {
            *err = ""daily time cannot be used with \""modified\"" parameter"";
            return NGX_ERROR;
        }

        *expires = NGX_HTTP_EXPIR...",470.0,539.0,1.0,1.0,70.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5050,151490,ngx_http_add_multi_header_lines,1,ngx_http_add_multi_header_lines,"ngx_int_t ngx_http_add_multi_header_lines (ngx_http_request_t*,ngx_http_header_val_t*,ngx_str_t*)",http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_add_multi_header_lines(ngx_http_request_t *r,
    ngx_http_header_val_t *hv, ngx_str_t *value)
{
    ngx_array_t      *pa;
    ngx_table_elt_t  *h, **ph;

    if (value->len == 0) {
        return NGX_OK;
    }

    pa = (ngx_array_t *) ((char *) &r->headers_out + hv->offset);

    if (pa->elts == NULL) {
        if (ngx_array_init(pa, r->pool, 1, sizeof(ngx_table_elt_t *)) != NGX_OK)
        {
            return NGX_ERROR;
        }
    }

    h = ngx_list_push(&r->headers_out.headers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    h->hash = 1;
    h->key = hv->key;
    h->value = *value;

    ph = ngx_array_push(pa);
    if (ph == NULL) {
        return NGX_ERROR;
    }

    *ph = h;

    return NGX_OK;
}",563.0,600.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5051,151497,ngx_http_add_header,1,ngx_http_add_header,"ngx_int_t ngx_http_add_header (ngx_http_request_t*,ngx_http_header_val_t*,ngx_str_t*)",http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_add_header(ngx_http_request_t *r, ngx_http_header_val_t *hv,
    ngx_str_t *value)
{
    ngx_table_elt_t  *h;

    if (value->len) {
        h = ngx_list_push(&r->headers_out.headers);
        if (h == NULL) {
            return NGX_ERROR;
        }

        h->hash = 1;
        h->key = hv->key;
        h->value = *value;
    }

    return NGX_OK;
}",542.0,560.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5052,151504,ngx_http_set_last_modified,1,ngx_http_set_last_modified,"ngx_int_t ngx_http_set_last_modified (ngx_http_request_t*,ngx_http_header_val_t*,ngx_str_t*)",http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_set_last_modified(ngx_http_request_t *r, ngx_http_header_val_t *hv,
    ngx_str_t *value)
{
    if (ngx_http_set_response_header(r, hv, value) != NGX_OK) {
        return NGX_ERROR;
    }

    r->headers_out.last_modified_time =
        (value->len) ? ngx_parse_http_time(value->data, value->len) : -1;

    return NGX_OK;
}",603.0,615.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5053,151511,ngx_http_set_response_header,1,ngx_http_set_response_header,"ngx_int_t ngx_http_set_response_header (ngx_http_request_t*,ngx_http_header_val_t*,ngx_str_t*)",http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_set_response_header(ngx_http_request_t *r, ngx_http_header_val_t *hv,
    ngx_str_t *value)
{
    ngx_table_elt_t  *h, **old;

    old = (ngx_table_elt_t **) ((char *) &r->headers_out + hv->offset);

    if (value->len == 0) {
        if (*old) {
            (*old)->hash = 0;
            *old = NULL;
        }

        return NGX_OK;
    }

    if (*old) {
        h = *old;

    } else {
        h = ngx_list_push(&r->headers_out.headers);
        if (h == NULL) {
            return NGX_ERROR;
        }

        *old = h;
    }

    h->hash = 1;
    h->key = hv->key;
    h->value = *value;

    return NGX_OK;
}",618.0,652.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5054,151518,ngx_http_headers_create_conf,1,ngx_http_headers_create_conf,void* ngx_http_headers_create_conf (ngx_conf_t*),http\modules\ngx_http_headers_filter_module.c,"static void *
ngx_http_headers_create_conf(ngx_conf_t *cf)
{
    ngx_http_headers_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_headers_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->headers = NULL;
     *     conf->trailers = NULL;
     *     conf->expires_time = 0;
     *     conf->expires_value = NULL;
     */

    conf->expires = NGX_HTTP_EXPIRES_UNSET;

    return conf;
}",655.0,677.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5055,151523,ngx_http_headers_merge_conf,1,ngx_http_headers_merge_conf,"char* ngx_http_headers_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_headers_filter_module.c,"static char *
ngx_http_headers_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_headers_conf_t *prev = parent;
    ngx_http_headers_conf_t *conf = child;

    if (conf->expires == NGX_HTTP_EXPIRES_UNSET) {
        conf->expires = prev->expires;
        conf->expires_time = prev->expires_time;
        conf->expires_value = prev->expires_value;

        if (conf->expires == NGX_HTTP_EXPIRES_UNSET) {
            conf->expires = NGX_HTTP_EXPIRES_OFF;
        }
    }

    if (conf->headers == NULL) {
        conf->headers = prev->headers;
    }

    if (conf->trailers == NULL) {
        conf->trailers = prev->trailers;
    }

    return NGX_CONF_OK;
}",680.0,705.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5056,151530,ngx_http_headers_filter_init,1,ngx_http_headers_filter_init,ngx_int_t ngx_http_headers_filter_init (ngx_conf_t*),http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_headers_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_headers_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_trailers_filter;

    return NGX_OK;
}",708.0,718.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5057,151535,ngx_http_headers_expires,1,ngx_http_headers_expires,"char* ngx_http_headers_expires (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_headers_filter_module.c,"static char *
ngx_http_headers_expires(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_headers_conf_t *hcf = conf;

    char                              *err;
    ngx_str_t                         *value;
    ngx_int_t                          rc;
    ngx_uint_t                         n;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    if (hcf->expires != NGX_HTTP_EXPIRES_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (cf->args->nelts == 2) {

        hcf->expires = NGX_HTTP_EXPIRES_ACCESS;

        n = 1;

    } else { /* cf->args->nelts == 3 */

        if (ngx_strcmp(value[1].data, ""modified"") != 0) {
            return ""invalid value"";
        }

        hcf->expires = NGX_HTTP_EXPIRES_MODIFIED;

        n = 2;
    }

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[n];
    ccv.complex_value = &cv;

    if (ngx_http_compile_comp...",721.0,786.0,1.0,1.0,66.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5058,151542,ngx_http_headers_add,1,ngx_http_headers_add,"char* ngx_http_headers_add (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_headers_filter_module.c,"static char *
ngx_http_headers_add(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_headers_conf_t *hcf = conf;

    ngx_str_t                          *value;
    ngx_uint_t                          i;
    ngx_array_t                       **headers;
    ngx_http_header_val_t              *hv;
    ngx_http_set_header_t              *set;
    ngx_http_compile_complex_value_t    ccv;

    value = cf->args->elts;

    headers = (ngx_array_t **) ((char *) hcf + cmd->offset);

    if (*headers == NULL) {
        *headers = ngx_array_create(cf->pool, 1,
                                    sizeof(ngx_http_header_val_t));
        if (*headers == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    hv = ngx_array_push(*headers);
    if (hv == NULL) {
        return NGX_CONF_ERROR;
    }

    hv->key = value[1];
    hv->handler = NULL;
    hv->offset = 0;
    hv->always = 0;

    if (headers == &hcf->headers) {
        hv->handler = ngx_http_add_header;

        set ...",789.0,867.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5059,151673,ngx_http_headers_filter,1,ngx_http_headers_filter,ngx_int_t ngx_http_headers_filter (ngx_http_request_t*),http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_headers_filter(ngx_http_request_t *r)
{
    ngx_str_t                 value;
    ngx_uint_t                i, safe_status;
    ngx_http_header_val_t    *h;
    ngx_http_headers_conf_t  *conf;

    if (r != r->main) {
        return ngx_http_next_header_filter(r);
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_headers_filter_module);

    if (conf->expires == NGX_HTTP_EXPIRES_OFF
        && conf->headers == NULL
        && conf->trailers == NULL)
    {
        return ngx_http_next_header_filter(r);
    }

    switch (r->headers_out.status) {

    case NGX_HTTP_OK:
    case NGX_HTTP_CREATED:
    case NGX_HTTP_NO_CONTENT:
    case NGX_HTTP_PARTIAL_CONTENT:
    case NGX_HTTP_MOVED_PERMANENTLY:
    case NGX_HTTP_MOVED_TEMPORARILY:
    case NGX_HTTP_SEE_OTHER:
    case NGX_HTTP_NOT_MODIFIED:
    case NGX_HTTP_TEMPORARY_REDIRECT:
    case NGX_HTTP_PERMANENT_REDIRECT:
        safe_status = 1;
        break;

    default:
        safe_status = 0;
       ...",165.0,244.0,1.0,1.0,80.0,58,10,67,21,0,13,19,25,10,2,,0,13,2,1,1,ngx_int_t
5060,151896,ngx_http_trailers_filter,1,ngx_http_trailers_filter,"ngx_int_t ngx_http_trailers_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_headers_filter_module.c,"static ngx_int_t
ngx_http_trailers_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_str_t                 value;
    ngx_uint_t                i, safe_status;
    ngx_chain_t              *cl;
    ngx_table_elt_t          *t;
    ngx_http_header_val_t    *h;
    ngx_http_headers_conf_t  *conf;

    conf = ngx_http_get_module_loc_conf(r, ngx_http_headers_filter_module);

    if (in == NULL
        || conf->trailers == NULL
        || !r->expect_trailers
        || r->header_only)
    {
        return ngx_http_next_body_filter(r, in);
    }

    for (cl = in; cl; cl = cl->next) {
        if (cl->buf->last_buf) {
            break;
        }
    }

    if (cl == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    switch (r->headers_out.status) {

    case NGX_HTTP_OK:
    case NGX_HTTP_CREATED:
    case NGX_HTTP_NO_CONTENT:
    case NGX_HTTP_PARTIAL_CONTENT:
    case NGX_HTTP_MOVED_PERMANENTLY:
    case NGX_HTTP_MOVED_TEMPORARILY:
    case NGX_HTTP_SEE_OTHER:
  ...",247.0,321.0,1.0,1.0,75.0,49,11,60,23,0,10,15,17,4,2,,0,10,4,2,2,ngx_int_t
5061,153679,ngx_http_image_send,1,ngx_http_image_send,"ngx_int_t ngx_http_image_send (ngx_http_request_t*,ngx_http_image_filter_ctx_t*,ngx_chain_t*)",http\modules\ngx_http_image_filter_module.c,"static ngx_int_t
ngx_http_image_send(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx,
    ngx_chain_t *in)
{
    ngx_int_t  rc;

    rc = ngx_http_next_header_filter(r);

    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
        return NGX_ERROR;
    }

    rc = ngx_http_next_body_filter(r, in);

    if (ctx->phase == NGX_HTTP_IMAGE_DONE) {
        /* NGX_ERROR resets any pending data */
        return (rc == NGX_OK) ? NGX_ERROR : rc;
    }

    return rc;
}",400.0,420.0,1.0,22.0,21.0,0,0,0,0,3,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5062,153686,ngx_http_image_test,1,ngx_http_image_test,"ngx_uint_t ngx_http_image_test (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_image_filter_module.c,"static ngx_uint_t
ngx_http_image_test(ngx_http_request_t *r, ngx_chain_t *in)
{
    u_char  *p;

    p = in->buf->pos;

    if (in->buf->last - p < 16) {
        return NGX_HTTP_IMAGE_NONE;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""image filter: \""%c%c\"""", p[0], p[1]);

    if (p[0] == 0xff && p[1] == 0xd8) {

        /* JPEG */

        return NGX_HTTP_IMAGE_JPEG;

    } else if (p[0] == 'G' && p[1] == 'I' && p[2] == 'F' && p[3] == '8'
               && p[5] == 'a')
    {
        if (p[4] == '9' || p[4] == '7') {
            /* GIF */
            return NGX_HTTP_IMAGE_GIF;
        }

    } else if (p[0] == 0x89 && p[1] == 'P' && p[2] == 'N' && p[3] == 'G'
               && p[4] == 0x0d && p[5] == 0x0a && p[6] == 0x1a && p[7] == 0x0a)
    {
        /* PNG */

        return NGX_HTTP_IMAGE_PNG;

    } else if (p[0] == 'R' && p[1] == 'I' && p[2] == 'F' && p[3] == 'F'
               && p[8] == 'W' && p[9] == 'E' && p[10] == 'B' && p[11] ==...",423.0,467.0,1.0,15.0,45.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
5063,153692,ngx_http_image_read,1,ngx_http_image_read,"ngx_int_t ngx_http_image_read (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_image_filter_module.c,"static ngx_int_t
ngx_http_image_read(ngx_http_request_t *r, ngx_chain_t *in)
{
    u_char                       *p;
    size_t                        size, rest;
    ngx_buf_t                    *b;
    ngx_chain_t                  *cl;
    ngx_http_image_filter_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);

    if (ctx->image == NULL) {
        ctx->image = ngx_palloc(r->pool, ctx->length);
        if (ctx->image == NULL) {
            return NGX_ERROR;
        }

        ctx->last = ctx->image;
    }

    p = ctx->last;

    for (cl = in; cl; cl = cl->next) {

        b = cl->buf;
        size = b->last - b->pos;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""image buf: %uz"", size);

        rest = ctx->image + ctx->length - p;

        if (size > rest) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""image filter: too big response"");
            return NGX_ERR...",470.0,521.0,1.0,31.0,52.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5064,153698,ngx_http_image_process,1,ngx_http_image_process,ngx_buf_t* ngx_http_image_process (ngx_http_request_t*),http\modules\ngx_http_image_filter_module.c,"static ngx_buf_t *
ngx_http_image_process(ngx_http_request_t *r)
{
    ngx_int_t                      rc;
    ngx_http_image_filter_ctx_t   *ctx;
    ngx_http_image_filter_conf_t  *conf;

    r->connection->buffered &= ~NGX_HTTP_IMAGE_BUFFERED;

    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);

    rc = ngx_http_image_size(r, ctx);

    conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

    if (conf->filter == NGX_HTTP_IMAGE_SIZE) {
        return ngx_http_image_json(r, rc == NGX_OK ? ctx : NULL);
    }

    ctx->angle = ngx_http_image_filter_get_value(r, conf->acv, conf->angle);

    if (conf->filter == NGX_HTTP_IMAGE_ROTATE) {

        if (ctx->angle != 90 && ctx->angle != 180 && ctx->angle != 270) {
            return NULL;
        }

        return ngx_http_image_resize(r, ctx);
    }

    ctx->max_width = ngx_http_image_filter_get_value(r, conf->wcv, conf->width);
    if (ctx->max_width == 0) {
        return NULL;
    }

    ctx->max_heig...",524.0,575.0,1.0,32.0,52.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_buf_t
5065,153703,ngx_http_image_json,1,ngx_http_image_json,"ngx_buf_t* ngx_http_image_json (ngx_http_request_t*,ngx_http_image_filter_ctx_t*)",http\modules\ngx_http_image_filter_module.c,"static ngx_buf_t *
ngx_http_image_json(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    size_t      len;
    ngx_buf_t  *b;

    b = ngx_calloc_buf(r->pool);
    if (b == NULL) {
        return NULL;
    }

    b->memory = 1;
    b->last_buf = 1;

    ngx_http_clean_header(r);

    r->headers_out.status = NGX_HTTP_OK;
    r->headers_out.content_type_len = sizeof(""application/json"") - 1;
    ngx_str_set(&r->headers_out.content_type, ""application/json"");
    r->headers_out.content_type_lowcase = NULL;

    if (ctx == NULL) {
        b->pos = (u_char *) ""{}"" CRLF;
        b->last = b->pos + sizeof(""{}"" CRLF) - 1;

        ngx_http_image_length(r, b);

        return b;
    }

    len = sizeof(""{ \""img\"" : ""
                 ""{ \""width\"": , \""height\"": , \""type\"": \""jpeg\"" } }"" CRLF) - 1
          + 2 * NGX_SIZE_T_LEN;

    b->pos = ngx_pnalloc(r->pool, len);
    if (b->pos == NULL) {
        return NULL;
    }

    b->last = ngx_sprintf(b->pos,
                          ""...",578.0,628.0,1.0,1.0,51.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_buf_t
5066,153709,ngx_http_image_asis,1,ngx_http_image_asis,"ngx_buf_t* ngx_http_image_asis (ngx_http_request_t*,ngx_http_image_filter_ctx_t*)",http\modules\ngx_http_image_filter_module.c,"static ngx_buf_t *
ngx_http_image_asis(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    ngx_buf_t  *b;

    b = ngx_calloc_buf(r->pool);
    if (b == NULL) {
        return NULL;
    }

    b->pos = ctx->image;
    b->last = ctx->last;
    b->memory = 1;
    b->last_buf = 1;

    ngx_http_image_length(r, b);

    return b;
}",631.0,649.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_buf_t
5067,153715,ngx_http_image_length,1,ngx_http_image_length,"void ngx_http_image_length (ngx_http_request_t*,ngx_buf_t*)",http\modules\ngx_http_image_filter_module.c,"static void
ngx_http_image_length(ngx_http_request_t *r, ngx_buf_t *b)
{
    r->headers_out.content_length_n = b->last - b->pos;

    if (r->headers_out.content_length) {
        r->headers_out.content_length->hash = 0;
    }

    r->headers_out.content_length = NULL;
}",652.0,662.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5068,153721,ngx_http_image_size,1,ngx_http_image_size,"ngx_int_t ngx_http_image_size (ngx_http_request_t*,ngx_http_image_filter_ctx_t*)",http\modules\ngx_http_image_filter_module.c,"static ngx_int_t
ngx_http_image_size(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    u_char      *p, *last;
    size_t       len, app;
    ngx_uint_t   width, height;

    p = ctx->image;

    switch (ctx->type) {

    case NGX_HTTP_IMAGE_JPEG:

        p += 2;
        last = ctx->image + ctx->length - 10;
        width = 0;
        height = 0;
        app = 0;

        while (p < last) {

            if (p[0] == 0xff && p[1] != 0xff) {

                ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                               ""JPEG: %02xd %02xd"", p[0], p[1]);

                p++;

                if ((*p == 0xc0 || *p == 0xc1 || *p == 0xc2 || *p == 0xc3
                     || *p == 0xc9 || *p == 0xca || *p == 0xcb)
                    && (width == 0 || height == 0))
                {
                    width = p[6] * 256 + p[7];
                    height = p[4] * 256 + p[5];
                }

                ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->co...",665.0,816.0,1.0,9.0,152.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5069,153727,ngx_http_image_resize,1,ngx_http_image_resize,"ngx_buf_t* ngx_http_image_resize (ngx_http_request_t*,ngx_http_image_filter_ctx_t*)",http\modules\ngx_http_image_filter_module.c,"static ngx_buf_t *
ngx_http_image_resize(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    int                            sx, sy, dx, dy, ox, oy, ax, ay, size,
                                   colors, palette, transparent, sharpen,
                                   red, green, blue, t;
    u_char                        *out;
    ngx_buf_t                     *b;
    ngx_uint_t                     resize;
    gdImagePtr                     src, dst;
    ngx_pool_cleanup_t            *cln;
    ngx_http_image_filter_conf_t  *conf;

    src = ngx_http_image_source(r, ctx);

    if (src == NULL) {
        return NULL;
    }

    sx = gdImageSX(src);
    sy = gdImageSY(src);

    conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

    if (!ctx->force
        && ctx->angle == 0
        && (ngx_uint_t) sx <= ctx->max_width
        && (ngx_uint_t) sy <= ctx->max_height)
    {
        gdImageDestroy(src);
        return ngx_http_image_asis(r, ctx);
    }

  ...",819.0,1088.0,1.0,24.0,270.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_buf_t
5070,153733,ngx_http_image_source,1,ngx_http_image_source,"gdImagePtr ngx_http_image_source (ngx_http_request_t*,ngx_http_image_filter_ctx_t*)",http\modules\ngx_http_image_filter_module.c,"static gdImagePtr
ngx_http_image_source(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
{
    char        *failed;
    gdImagePtr   img;

    img = NULL;

    switch (ctx->type) {

    case NGX_HTTP_IMAGE_JPEG:
        img = gdImageCreateFromJpegPtr(ctx->length, ctx->image);
        failed = ""gdImageCreateFromJpegPtr() failed"";
        break;

    case NGX_HTTP_IMAGE_GIF:
        img = gdImageCreateFromGifPtr(ctx->length, ctx->image);
        failed = ""gdImageCreateFromGifPtr() failed"";
        break;

    case NGX_HTTP_IMAGE_PNG:
        img = gdImageCreateFromPngPtr(ctx->length, ctx->image);
        failed = ""gdImageCreateFromPngPtr() failed"";
        break;

    case NGX_HTTP_IMAGE_WEBP:
#if (NGX_HAVE_GD_WEBP)
        img = gdImageCreateFromWebpPtr(ctx->length, ctx->image);
        failed = ""gdImageCreateFromWebpPtr() failed"";
#else
        failed = ""nginx was built without GD WebP support"";
#endif
        break;

    default:
        failed = ""unknown image type"";
     ...",1091.0,1135.0,1.0,9.0,45.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,gdImagePtr
5071,153739,ngx_http_image_new,1,ngx_http_image_new,"gdImagePtr ngx_http_image_new (ngx_http_request_t*,int,int,int)",http\modules\ngx_http_image_filter_module.c,"static gdImagePtr
ngx_http_image_new(ngx_http_request_t *r, int w, int h, int colors)
{
    gdImagePtr  img;

    if (colors == 0) {
        img = gdImageCreateTrueColor(w, h);

        if (img == NULL) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""gdImageCreateTrueColor() failed"");
            return NULL;
        }

    } else {
        img = gdImageCreate(w, h);

        if (img == NULL) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""gdImageCreate() failed"");
            return NULL;
        }
    }

    return img;
}",1138.0,1163.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,gdImagePtr
5072,153747,ngx_http_image_out,1,ngx_http_image_out,"u_char* ngx_http_image_out (ngx_http_request_t*,ngx_uint_t,gdImagePtr,int*)",http\modules\ngx_http_image_filter_module.c,"static u_char *
ngx_http_image_out(ngx_http_request_t *r, ngx_uint_t type, gdImagePtr img,
    int *size)
{
    char                          *failed;
    u_char                        *out;
    ngx_int_t                      q;
    ngx_http_image_filter_conf_t  *conf;

    out = NULL;

    switch (type) {

    case NGX_HTTP_IMAGE_JPEG:
        conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

        q = ngx_http_image_filter_get_value(r, conf->jqcv, conf->jpeg_quality);
        if (q <= 0) {
            return NULL;
        }

        out = gdImageJpegPtr(img, size, q);
        failed = ""gdImageJpegPtr() failed"";
        break;

    case NGX_HTTP_IMAGE_GIF:
        out = gdImageGifPtr(img, size);
        failed = ""gdImageGifPtr() failed"";
        break;

    case NGX_HTTP_IMAGE_PNG:
        out = gdImagePngPtr(img, size);
        failed = ""gdImagePngPtr() failed"";
        break;

    case NGX_HTTP_IMAGE_WEBP:
#if (NGX_HAVE_GD_WEBP)
        conf = ngx_http_get_...",1166.0,1227.0,1.0,9.0,62.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,u_char
5073,153755,ngx_http_image_cleanup,1,ngx_http_image_cleanup,void ngx_http_image_cleanup (void*),http\modules\ngx_http_image_filter_module.c,"static void
ngx_http_image_cleanup(void *data)
{
    gdFree(data);
}",1230.0,1234.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5074,153760,ngx_http_image_filter_get_value,1,ngx_http_image_filter_get_value,"ngx_uint_t ngx_http_image_filter_get_value (ngx_http_request_t*,ngx_http_complex_value_t*,ngx_uint_t)",http\modules\ngx_http_image_filter_module.c,"static ngx_uint_t
ngx_http_image_filter_get_value(ngx_http_request_t *r,
    ngx_http_complex_value_t *cv, ngx_uint_t v)
{
    ngx_str_t  val;

    if (cv == NULL) {
        return v;
    }

    if (ngx_http_complex_value(r, cv, &val) != NGX_OK) {
        return 0;
    }

    return ngx_http_image_filter_value(&val);
}",1237.0,1252.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_uint_t
5075,153767,ngx_http_image_filter_value,1,ngx_http_image_filter_value,ngx_uint_t ngx_http_image_filter_value (ngx_str_t*),http\modules\ngx_http_image_filter_module.c,"static ngx_uint_t
ngx_http_image_filter_value(ngx_str_t *value)
{
    ngx_int_t  n;

    if (value->len == 1 && value->data[0] == '-') {
        return (ngx_uint_t) -1;
    }

    n = ngx_atoi(value->data, value->len);

    if (n > 0) {
        return (ngx_uint_t) n;
    }

    return 0;
}",1255.0,1271.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_uint_t
5076,153772,ngx_http_image_filter_create_conf,1,ngx_http_image_filter_create_conf,void* ngx_http_image_filter_create_conf (ngx_conf_t*),http\modules\ngx_http_image_filter_module.c,"static void *
ngx_http_image_filter_create_conf(ngx_conf_t *cf)
{
    ngx_http_image_filter_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_image_filter_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->width = 0;
     *     conf->height = 0;
     *     conf->angle = 0;
     *     conf->wcv = NULL;
     *     conf->hcv = NULL;
     *     conf->acv = NULL;
     *     conf->jqcv = NULL;
     *     conf->wqcv = NULL;
     *     conf->shcv = NULL;
     */

    conf->filter = NGX_CONF_UNSET_UINT;
    conf->jpeg_quality = NGX_CONF_UNSET_UINT;
    conf->webp_quality = NGX_CONF_UNSET_UINT;
    conf->sharpen = NGX_CONF_UNSET_UINT;
    conf->transparency = NGX_CONF_UNSET;
    conf->interlace = NGX_CONF_UNSET;
    conf->buffer_size = NGX_CONF_UNSET_SIZE;

    return conf;
}",1274.0,1307.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5077,153777,ngx_http_image_filter_merge_conf,1,ngx_http_image_filter_merge_conf,"char* ngx_http_image_filter_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_image_filter_module.c,"static char *
ngx_http_image_filter_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_image_filter_conf_t *prev = parent;
    ngx_http_image_filter_conf_t *conf = child;

    if (conf->filter == NGX_CONF_UNSET_UINT) {

        if (prev->filter == NGX_CONF_UNSET_UINT) {
            conf->filter = NGX_HTTP_IMAGE_OFF;

        } else {
            conf->filter = prev->filter;
            conf->width = prev->width;
            conf->height = prev->height;
            conf->angle = prev->angle;
            conf->wcv = prev->wcv;
            conf->hcv = prev->hcv;
            conf->acv = prev->acv;
        }
    }

    if (conf->jpeg_quality == NGX_CONF_UNSET_UINT) {

        /* 75 is libjpeg default quality */
        ngx_conf_merge_uint_value(conf->jpeg_quality, prev->jpeg_quality, 75);

        if (conf->jqcv == NULL) {
            conf->jqcv = prev->jqcv;
        }
    }

    if (conf->webp_quality == NGX_CONF_UNSET_UINT) {

        /* 80 is libwebp default quality ...",1310.0,1368.0,1.0,27.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5078,153784,ngx_http_image_filter,1,ngx_http_image_filter,"char* ngx_http_image_filter (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_image_filter_module.c,"static char *
ngx_http_image_filter(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_image_filter_conf_t *imcf = conf;

    ngx_str_t                         *value;
    ngx_int_t                          n;
    ngx_uint_t                         i;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    i = 1;

    if (cf->args->nelts == 2) {
        if (ngx_strcmp(value[i].data, ""off"") == 0) {
            imcf->filter = NGX_HTTP_IMAGE_OFF;

        } else if (ngx_strcmp(value[i].data, ""test"") == 0) {
            imcf->filter = NGX_HTTP_IMAGE_TEST;

        } else if (ngx_strcmp(value[i].data, ""size"") == 0) {
            imcf->filter = NGX_HTTP_IMAGE_SIZE;

        } else {
            goto failed;
        }

        return NGX_CONF_OK;

    } else if (cf->args->nelts == 3) {

        if (ngx_strcmp(value[i].data, ""rotate"") == 0) {
            if (imcf->filter != NGX_HTTP_IMAGE_RESIZE
                && ...",1371.0,1521.0,1.0,27.0,151.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5079,153791,ngx_http_image_filter_jpeg_quality,1,ngx_http_image_filter_jpeg_quality,"char* ngx_http_image_filter_jpeg_quality (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_image_filter_module.c,"static char *
ngx_http_image_filter_jpeg_quality(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    ngx_http_image_filter_conf_t *imcf = conf;

    ngx_str_t                         *value;
    ngx_int_t                          n;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &cv;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (cv.lengths == NULL) {
        n = ngx_http_image_filter_value(&value[1]);

        if (n <= 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid value \""%V\"""", &value[1]);
            return NGX_CONF_ERROR;
        }

        imcf->jpeg_quality = (ngx_uint_t) n;

    } else {
        imcf->jqcv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t))...",1524.0,1568.0,1.0,1.0,45.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5080,153798,ngx_http_image_filter_webp_quality,1,ngx_http_image_filter_webp_quality,"char* ngx_http_image_filter_webp_quality (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_image_filter_module.c,"static char *
ngx_http_image_filter_webp_quality(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    ngx_http_image_filter_conf_t *imcf = conf;

    ngx_str_t                         *value;
    ngx_int_t                          n;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &cv;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (cv.lengths == NULL) {
        n = ngx_http_image_filter_value(&value[1]);

        if (n <= 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid value \""%V\"""", &value[1]);
            return NGX_CONF_ERROR;
        }

        imcf->webp_quality = (ngx_uint_t) n;

    } else {
        imcf->wqcv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t))...",1571.0,1615.0,1.0,1.0,45.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5081,153805,ngx_http_image_filter_sharpen,1,ngx_http_image_filter_sharpen,"char* ngx_http_image_filter_sharpen (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_image_filter_module.c,"static char *
ngx_http_image_filter_sharpen(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    ngx_http_image_filter_conf_t *imcf = conf;

    ngx_str_t                         *value;
    ngx_int_t                          n;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &cv;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (cv.lengths == NULL) {
        n = ngx_http_image_filter_value(&value[1]);

        if (n < 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid value \""%V\"""", &value[1]);
            return NGX_CONF_ERROR;
        }

        imcf->sharpen = (ngx_uint_t) n;

    } else {
        imcf->shcv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
        i...",1618.0,1662.0,1.0,1.0,45.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5082,153812,ngx_http_image_filter_init,1,ngx_http_image_filter_init,ngx_int_t ngx_http_image_filter_init (ngx_conf_t*),http\modules\ngx_http_image_filter_module.c,"static ngx_int_t
ngx_http_image_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_image_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_image_body_filter;

    return NGX_OK;
}",1665.0,1675.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5083,153965,ngx_http_image_header_filter,1,ngx_http_image_header_filter,ngx_int_t ngx_http_image_header_filter (ngx_http_request_t*),http\modules\ngx_http_image_filter_module.c,"static ngx_int_t
ngx_http_image_header_filter(ngx_http_request_t *r)
{
    off_t                          len;
    ngx_http_image_filter_ctx_t   *ctx;
    ngx_http_image_filter_conf_t  *conf;

    if (r->headers_out.status == NGX_HTTP_NOT_MODIFIED) {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);

    if (ctx) {
        ngx_http_set_ctx(r, NULL, ngx_http_image_filter_module);
        return ngx_http_next_header_filter(r);
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

    if (conf->filter == NGX_HTTP_IMAGE_OFF) {
        return ngx_http_next_header_filter(r);
    }

    if (r->headers_out.content_type.len
            >= sizeof(""multipart/x-mixed-replace"") - 1
        && ngx_strncasecmp(r->headers_out.content_type.data,
                           (u_char *) ""multipart/x-mixed-replace"",
                           sizeof(""multipart/x-mixed-replace"") - 1)
           == 0)
    {
...",220.0,288.0,1.0,24.0,69.0,53,12,47,12,0,13,9,9,3,4,,0,11,2,1,1,ngx_int_t
5084,154162,ngx_http_image_body_filter,1,ngx_http_image_body_filter,"ngx_int_t ngx_http_image_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_image_filter_module.c,"static ngx_int_t
ngx_http_image_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t                      rc;
    ngx_str_t                     *ct;
    ngx_chain_t                    out;
    ngx_http_image_filter_ctx_t   *ctx;
    ngx_http_image_filter_conf_t  *conf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, ""image filter"");

    if (in == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);

    if (ctx == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    switch (ctx->phase) {

    case NGX_HTTP_IMAGE_START:

        ctx->type = ngx_http_image_test(r, in);

        conf = ngx_http_get_module_loc_conf(r, ngx_http_image_filter_module);

        if (ctx->type == NGX_HTTP_IMAGE_NONE) {

            if (conf->filter == NGX_HTTP_IMAGE_SIZE) {
                out.buf = ngx_http_image_json(r, NULL);

                if (out.buf) {
                    out.ne...",291.0,397.0,1.0,9.0,107.0,61,9,83,15,0,27,11,21,4,10,,0,21,4,2,2,ngx_int_t
5085,158085,ngx_http_index_test_dir,1,ngx_http_index_test_dir,"ngx_int_t ngx_http_index_test_dir (ngx_http_request_t*,ngx_http_core_loc_conf_t*,u_char*,u_char*)",http\modules\ngx_http_index_module.c,"static ngx_int_t
ngx_http_index_test_dir(ngx_http_request_t *r, ngx_http_core_loc_conf_t *clcf,
    u_char *path, u_char *last)
{
    u_char                c;
    ngx_str_t             dir;
    ngx_open_file_info_t  of;

    c = *last;
    if (c != '/' || path == last) {
        /* ""alias"" without trailing slash */
        c = *(++last);
    }
    *last = '\0';

    dir.len = last - path;
    dir.data = path;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http index check dir: \""%V\"""", &dir);

    ngx_memzero(&of, sizeof(ngx_open_file_info_t));

    of.test_dir = 1;
    of.test_only = 1;
    of.valid = clcf->open_file_cache_valid;
    of.errors = clcf->open_file_cache_errors;

    if (ngx_http_set_disable_symlinks(r, clcf, &dir, &of) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    if (ngx_open_cached_file(clcf->open_file_cache, &dir, &of, r->pool)
        != NGX_OK)
    {
        if (of.err) {

#if (NGX_HAVE_OPENAT)
        ...",284.0,364.0,1.0,1.0,81.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5086,158093,ngx_http_index_error,1,ngx_http_index_error,"ngx_int_t ngx_http_index_error (ngx_http_request_t*,ngx_http_core_loc_conf_t*,u_char*,ngx_err_t)",http\modules\ngx_http_index_module.c,"static ngx_int_t
ngx_http_index_error(ngx_http_request_t *r, ngx_http_core_loc_conf_t  *clcf,
    u_char *file, ngx_err_t err)
{
    if (err == NGX_EACCES) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, err,
                      ""\""%s\"" is forbidden"", file);

        return NGX_HTTP_FORBIDDEN;
    }

    if (clcf->log_not_found) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, err,
                      ""\""%s\"" is not found"", file);
    }

    return NGX_HTTP_NOT_FOUND;
}",367.0,384.0,1.0,1.0,18.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5087,158101,ngx_http_index_init,1,ngx_http_index_init,ngx_int_t ngx_http_index_init (ngx_conf_t*),http\modules\ngx_http_index_module.c,"static ngx_int_t
ngx_http_index_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_CONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_index_handler;

    return NGX_OK;
}",442.0,458.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5088,158106,ngx_http_index_create_loc_conf,1,ngx_http_index_create_loc_conf,void* ngx_http_index_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_index_module.c,"static void *
ngx_http_index_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_index_loc_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_index_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->indices = NULL;
    conf->max_index_len = 0;

    return conf;
}",387.0,401.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5089,158111,ngx_http_index_merge_loc_conf,1,ngx_http_index_merge_loc_conf,"char* ngx_http_index_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_index_module.c,"static char *
ngx_http_index_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_index_loc_conf_t  *prev = parent;
    ngx_http_index_loc_conf_t  *conf = child;

    ngx_http_index_t  *index;

    if (conf->indices == NULL) {
        conf->indices = prev->indices;
        conf->max_index_len = prev->max_index_len;
    }

    if (conf->indices == NULL) {
        conf->indices = ngx_array_create(cf->pool, 1, sizeof(ngx_http_index_t));
        if (conf->indices == NULL) {
            return NGX_CONF_ERROR;
        }

        index = ngx_array_push(conf->indices);
        if (index == NULL) {
            return NGX_CONF_ERROR;
        }

        index->name.len = sizeof(NGX_HTTP_DEFAULT_INDEX);
        index->name.data = (u_char *) NGX_HTTP_DEFAULT_INDEX;
        index->lengths = NULL;
        index->values = NULL;

        conf->max_index_len = sizeof(NGX_HTTP_DEFAULT_INDEX);

        return NGX_CONF_OK;
    }

    return NGX_CONF_OK;
}",404.0,439.0,1.0,33.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5090,158118,ngx_http_index_set_index,1,ngx_http_index_set_index,"char* ngx_http_index_set_index (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_index_module.c,"static char *
ngx_http_index_set_index(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_index_loc_conf_t *ilcf = conf;

    ngx_str_t                  *value;
    ngx_uint_t                  i, n;
    ngx_http_index_t           *index;
    ngx_http_script_compile_t   sc;

    if (ilcf->indices == NULL) {
        ilcf->indices = ngx_array_create(cf->pool, 2, sizeof(ngx_http_index_t));
        if (ilcf->indices == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {

        if (value[i].data[0] == '/' && i != cf->args->nelts - 1) {
            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                               ""only the last index in \""index\"" directive ""
                               ""should be absolute"");
        }

        if (value[i].len == 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""index \""%V\"" in \""index\"" directive is invalid"",
     ...",463.0,540.0,1.0,1.0,78.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5091,158173,ngx_http_index_handler,1,ngx_http_index_handler,ngx_int_t ngx_http_index_handler (ngx_http_request_t*),http\modules\ngx_http_index_module.c,"static ngx_int_t
ngx_http_index_handler(ngx_http_request_t *r)
{
    u_char                       *p, *name;
    size_t                        len, root, reserve, allocated;
    ngx_int_t                     rc;
    ngx_str_t                     path, uri;
    ngx_uint_t                    i, dir_tested;
    ngx_http_index_t             *index;
    ngx_open_file_info_t          of;
    ngx_http_script_code_pt       code;
    ngx_http_script_engine_t      e;
    ngx_http_core_loc_conf_t     *clcf;
    ngx_http_index_loc_conf_t    *ilcf;
    ngx_http_script_len_code_pt   lcode;

    if (r->uri.data[r->uri.len - 1] != '/') {
        return NGX_DECLINED;
    }

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD|NGX_HTTP_POST))) {
        return NGX_DECLINED;
    }

    ilcf = ngx_http_get_module_loc_conf(r, ngx_http_index_module);
    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    allocated = 0;
    root = 0;
    dir_tested = 0;
    name = NULL;
    /* suppress MSVC w...",96.0,281.0,1.0,1.0,186.0,152,16,142,31,0,41,18,38,8,8,,0,37,2,1,1,ngx_int_t
5092,159562,ngx_http_limit_conn_lookup,1,ngx_http_limit_conn_lookup,"ngx_rbtree_node_t* ngx_http_limit_conn_lookup (ngx_rbtree_t*,ngx_str_t*,uint32_t)",http\modules\ngx_http_limit_conn_module.c,"static ngx_rbtree_node_t *
ngx_http_limit_conn_lookup(ngx_rbtree_t *rbtree, ngx_str_t *key, uint32_t hash)
{
    ngx_int_t                    rc;
    ngx_rbtree_node_t           *node, *sentinel;
    ngx_http_limit_conn_node_t  *lcn;

    node = rbtree->root;
    sentinel = rbtree->sentinel;

    while (node != sentinel) {

        if (hash < node->key) {
            node = node->left;
            continue;
        }

        if (hash > node->key) {
            node = node->right;
            continue;
        }

        /* hash == node->key */

        lcn = (ngx_http_limit_conn_node_t *) &node->color;

        rc = ngx_memn2cmp(key->data, lcn->data, key->len, (size_t) lcn->len);

        if (rc == 0) {
            return node;
        }

        node = (rc < 0) ? node->left : node->right;
    }

    return NULL;
}",352.0,388.0,1.0,1.0,37.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_rbtree_node_t
5093,159569,ngx_http_limit_conn_cleanup,1,ngx_http_limit_conn_cleanup,void ngx_http_limit_conn_cleanup (void*),http\modules\ngx_http_limit_conn_module.c,"static void
ngx_http_limit_conn_cleanup(void *data)
{
    ngx_http_limit_conn_cleanup_t  *lccln = data;

    ngx_rbtree_node_t           *node;
    ngx_http_limit_conn_ctx_t   *ctx;
    ngx_http_limit_conn_node_t  *lc;

    ctx = lccln->shm_zone->data;
    node = lccln->node;
    lc = (ngx_http_limit_conn_node_t *) &node->color;

    ngx_shmtx_lock(&ctx->shpool->mutex);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, lccln->shm_zone->shm.log, 0,
                   ""limit conn cleanup: %08Xi %d"", node->key, lc->conn);

    lc->conn--;

    if (lc->conn == 0) {
        ngx_rbtree_delete(&ctx->sh->rbtree, node);
        ngx_slab_free_locked(ctx->shpool, node);
    }

    ngx_shmtx_unlock(&ctx->shpool->mutex);
}",391.0,417.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5094,159575,ngx_http_limit_conn_status_variable,1,ngx_http_limit_conn_status_variable,"ngx_int_t ngx_http_limit_conn_status_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_limit_conn_module.c,"static ngx_int_t
ngx_http_limit_conn_status_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->main->limit_conn_status == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->len = ngx_http_limit_conn_status[r->main->limit_conn_status - 1].len;
    v->data = ngx_http_limit_conn_status[r->main->limit_conn_status - 1].data;

    return NGX_OK;
}",498.0,514.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5095,159582,ngx_http_limit_conn_create_conf,1,ngx_http_limit_conn_create_conf,void* ngx_http_limit_conn_create_conf (ngx_conf_t*),http\modules\ngx_http_limit_conn_module.c,"static void *
ngx_http_limit_conn_create_conf(ngx_conf_t *cf)
{
    ngx_http_limit_conn_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_conn_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->limits.elts = NULL;
     */

    conf->log_level = NGX_CONF_UNSET_UINT;
    conf->status_code = NGX_CONF_UNSET_UINT;
    conf->dry_run = NGX_CONF_UNSET;

    return conf;
}",517.0,538.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5096,159587,ngx_http_limit_conn_merge_conf,1,ngx_http_limit_conn_merge_conf,"char* ngx_http_limit_conn_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_limit_conn_module.c,"static char *
ngx_http_limit_conn_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_limit_conn_conf_t *prev = parent;
    ngx_http_limit_conn_conf_t *conf = child;

    if (conf->limits.elts == NULL) {
        conf->limits = prev->limits;
    }

    ngx_conf_merge_uint_value(conf->log_level, prev->log_level, NGX_LOG_ERR);
    ngx_conf_merge_uint_value(conf->status_code, prev->status_code,
                              NGX_HTTP_SERVICE_UNAVAILABLE);

    ngx_conf_merge_value(conf->dry_run, prev->dry_run, 0);

    return NGX_CONF_OK;
}",541.0,558.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5097,159594,ngx_http_limit_conn_zone,1,ngx_http_limit_conn_zone,"char* ngx_http_limit_conn_zone (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_limit_conn_module.c,"static char *
ngx_http_limit_conn_zone(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    u_char                            *p;
    ssize_t                            size;
    ngx_str_t                         *value, name, s;
    ngx_uint_t                         i;
    ngx_shm_zone_t                    *shm_zone;
    ngx_http_limit_conn_ctx_t         *ctx;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_conn_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &ctx->key;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    size = 0;
    name.len = 0;

    for (i = 2; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""zone="", 5) == 0) {

            name.data = value[i].data + 5;

    ...",561.0,659.0,1.0,1.0,99.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5098,159601,ngx_http_limit_conn,1,ngx_http_limit_conn,"char* ngx_http_limit_conn (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_limit_conn_module.c,"static char *
ngx_http_limit_conn(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_shm_zone_t               *shm_zone;
    ngx_http_limit_conn_conf_t   *lccf = conf;
    ngx_http_limit_conn_limit_t  *limit, *limits;

    ngx_str_t  *value;
    ngx_int_t   n;
    ngx_uint_t  i;

    value = cf->args->elts;

    shm_zone = ngx_shared_memory_add(cf, &value[1], 0,
                                     &ngx_http_limit_conn_module);
    if (shm_zone == NULL) {
        return NGX_CONF_ERROR;
    }

    limits = lccf->limits.elts;

    if (limits == NULL) {
        if (ngx_array_init(&lccf->limits, cf->pool, 1,
                           sizeof(ngx_http_limit_conn_limit_t))
            != NGX_OK)
        {
            return NGX_CONF_ERROR;
        }
    }

    for (i = 0; i < lccf->limits.nelts; i++) {
        if (shm_zone == limits[i].shm_zone) {
            return ""is duplicate"";
        }
    }

    n = ngx_atoi(value[2].data, value[2].len);
    if (n <= 0) {
        ngx_conf_lo...",662.0,720.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5099,159608,ngx_http_limit_conn_add_variables,1,ngx_http_limit_conn_add_variables,ngx_int_t ngx_http_limit_conn_add_variables (ngx_conf_t*),http\modules\ngx_http_limit_conn_module.c,"static ngx_int_t
ngx_http_limit_conn_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_limit_conn_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",723.0,739.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5100,159613,ngx_http_limit_conn_init,1,ngx_http_limit_conn_init,ngx_int_t ngx_http_limit_conn_init (ngx_conf_t*),http\modules\ngx_http_limit_conn_module.c,"static ngx_int_t
ngx_http_limit_conn_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_PREACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_limit_conn_handler;

    return NGX_OK;
}",742.0,758.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5101,159779,ngx_http_limit_conn_handler,1,ngx_http_limit_conn_handler,ngx_int_t ngx_http_limit_conn_handler (ngx_http_request_t*),http\modules\ngx_http_limit_conn_module.c,"static ngx_int_t
ngx_http_limit_conn_handler(ngx_http_request_t *r)
{
    size_t                          n;
    uint32_t                        hash;
    ngx_str_t                       key;
    ngx_uint_t                      i;
    ngx_rbtree_node_t              *node;
    ngx_pool_cleanup_t             *cln;
    ngx_http_limit_conn_ctx_t      *ctx;
    ngx_http_limit_conn_node_t     *lc;
    ngx_http_limit_conn_conf_t     *lccf;
    ngx_http_limit_conn_limit_t    *limits;
    ngx_http_limit_conn_cleanup_t  *lccln;

    if (r->main->limit_conn_status) {
        return NGX_DECLINED;
    }

    lccf = ngx_http_get_module_loc_conf(r, ngx_http_limit_conn_module);
    limits = lccf->limits.elts;

    for (i = 0; i < lccf->limits.nelts; i++) {
        ctx = limits[i].shm_zone->data;

        if (ngx_http_complex_value(r, &ctx->key, &key) != NGX_OK) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }

        if (key.len == 0) {
            continue;
        }

        if (ke...",179.0,308.0,1.0,37.0,130.0,101,12,86,25,0,39,12,20,6,10,,0,34,2,1,1,ngx_int_t
5102,160196,ngx_http_limit_conn_rbtree_insert_value,1,ngx_http_limit_conn_rbtree_insert_value,"void ngx_http_limit_conn_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",http\modules\ngx_http_limit_conn_module.c,"static void
ngx_http_limit_conn_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t           **p;
    ngx_http_limit_conn_node_t   *lcn, *lcnt;

    for ( ;; ) {

        if (node->key < temp->key) {

            p = &temp->left;

        } else if (node->key > temp->key) {

            p = &temp->right;

        } else { /* node->key == temp->key */

            lcn = (ngx_http_limit_conn_node_t *) &node->color;
            lcnt = (ngx_http_limit_conn_node_t *) &temp->color;

            p = (ngx_memn2cmp(lcn->data, lcnt->data, lcn->len, lcnt->len) < 0)
                ? &temp->left : &temp->right;
        }

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",311.0,349.0,1.0,1.0,39.0,18,6,17,4,0,0,5,6,0,0,,0,0,6,3,3,void
5103,160503,ngx_http_limit_conn_init_zone,1,ngx_http_limit_conn_init_zone,"ngx_int_t ngx_http_limit_conn_init_zone (ngx_shm_zone_t*,void*)",http\modules\ngx_http_limit_conn_module.c,"static ngx_int_t
ngx_http_limit_conn_init_zone(ngx_shm_zone_t *shm_zone, void *data)
{
    ngx_http_limit_conn_ctx_t  *octx = data;

    size_t                      len;
    ngx_http_limit_conn_ctx_t  *ctx;

    ctx = shm_zone->data;

    if (octx) {
        if (ctx->key.value.len != octx->key.value.len
            || ngx_strncmp(ctx->key.value.data, octx->key.value.data,
                           ctx->key.value.len)
               != 0)
        {
            ngx_log_error(NGX_LOG_EMERG, shm_zone->shm.log, 0,
                          ""limit_conn_zone \""%V\"" uses the \""%V\"" key ""
                          ""while previously it used the \""%V\"" key"",
                          &shm_zone->shm.name, &ctx->key.value,
                          &octx->key.value);
            return NGX_ERROR;
        }

        ctx->sh = octx->sh;
        ctx->shpool = octx->shpool;

        return NGX_OK;
    }

    ctx->shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;

    if (shm_zone->shm.exists) {
    ...",436.0,495.0,1.0,1.0,60.0,83,10,48,10,0,30,6,7,7,4,,0,28,4,2,2,ngx_int_t
5104,161506,ngx_http_limit_req_delay,1,ngx_http_limit_req_delay,void ngx_http_limit_req_delay (ngx_http_request_t*),http\modules\ngx_http_limit_req_module.c,"static void
ngx_http_limit_req_delay(ngx_http_request_t *r)
{
    ngx_event_t  *wev;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""limit_req delay"");

    wev = r->connection->write;

    if (wev->delayed) {

        if (ngx_handle_write_event(wev, 0) != NGX_OK) {
            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        }

        return;
    }

    if (ngx_handle_read_event(r->connection->read, 0) != NGX_OK) {
        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return;
    }

    r->read_event_handler = ngx_http_block_reading;
    r->write_event_handler = ngx_http_core_run_phases;

    ngx_http_core_run_phases(r);
}",332.0,360.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5105,161511,ngx_http_limit_req_lookup,1,ngx_http_limit_req_lookup,"ngx_int_t ngx_http_limit_req_lookup (ngx_http_limit_req_limit_t*,ngx_uint_t,ngx_str_t*,ngx_uint_t*,ngx_uint_t)",http\modules\ngx_http_limit_req_module.c,"static ngx_int_t
ngx_http_limit_req_lookup(ngx_http_limit_req_limit_t *limit, ngx_uint_t hash,
    ngx_str_t *key, ngx_uint_t *ep, ngx_uint_t account)
{
    size_t                      size;
    ngx_int_t                   rc, excess;
    ngx_msec_t                  now;
    ngx_msec_int_t              ms;
    ngx_rbtree_node_t          *node, *sentinel;
    ngx_http_limit_req_ctx_t   *ctx;
    ngx_http_limit_req_node_t  *lr;

    now = ngx_current_msec;

    ctx = limit->shm_zone->data;

    node = ctx->sh->rbtree.root;
    sentinel = ctx->sh->rbtree.sentinel;

    while (node != sentinel) {

        if (hash < node->key) {
            node = node->left;
            continue;
        }

        if (hash > node->key) {
            node = node->right;
            continue;
        }

        /* hash == node->key */

        lr = (ngx_http_limit_req_node_t *) &node->color;

        rc = ngx_memn2cmp(key->data, lr->data, key->len, (size_t) lr->len);

        if (rc == 0) {
            ...",404.0,532.0,1.0,1.0,129.0,0,0,0,0,1,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
5106,161520,ngx_http_limit_req_account,1,ngx_http_limit_req_account,"ngx_msec_t ngx_http_limit_req_account (ngx_http_limit_req_limit_t*,ngx_uint_t,ngx_uint_t*,ngx_http_limit_req_limit_t**)",http\modules\ngx_http_limit_req_module.c,"static ngx_msec_t
ngx_http_limit_req_account(ngx_http_limit_req_limit_t *limits, ngx_uint_t n,
    ngx_uint_t *ep, ngx_http_limit_req_limit_t **limit)
{
    ngx_int_t                   excess;
    ngx_msec_t                  now, delay, max_delay;
    ngx_msec_int_t              ms;
    ngx_http_limit_req_ctx_t   *ctx;
    ngx_http_limit_req_node_t  *lr;

    excess = *ep;

    if ((ngx_uint_t) excess <= (*limit)->delay) {
        max_delay = 0;

    } else {
        ctx = (*limit)->shm_zone->data;
        max_delay = (excess - (*limit)->delay) * 1000 / ctx->rate;
    }

    while (n--) {
        ctx = limits[n].shm_zone->data;
        lr = ctx->node;

        if (lr == NULL) {
            continue;
        }

        ngx_shmtx_lock(&ctx->shpool->mutex);

        now = ngx_current_msec;
        ms = (ngx_msec_int_t) (now - lr->last);

        if (ms < -60000) {
            ms = 1;

        } else if (ms < 0) {
            ms = 0;
        }

        excess = lr->excess - ctx->rate * ...",535.0,606.0,1.0,1.0,72.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_msec_t
5107,161528,ngx_http_limit_req_unlock,1,ngx_http_limit_req_unlock,"void ngx_http_limit_req_unlock (ngx_http_limit_req_limit_t*,ngx_uint_t)",http\modules\ngx_http_limit_req_module.c,"static void
ngx_http_limit_req_unlock(ngx_http_limit_req_limit_t *limits, ngx_uint_t n)
{
    ngx_http_limit_req_ctx_t  *ctx;

    while (n--) {
        ctx = limits[n].shm_zone->data;

        if (ctx->node == NULL) {
            continue;
        }

        ngx_shmtx_lock(&ctx->shpool->mutex);

        ctx->node->count--;

        ngx_shmtx_unlock(&ctx->shpool->mutex);

        ctx->node = NULL;
    }
}",609.0,629.0,1.0,1.0,21.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,void
5108,161534,ngx_http_limit_req_expire,1,ngx_http_limit_req_expire,"void ngx_http_limit_req_expire (ngx_http_limit_req_ctx_t*,ngx_uint_t)",http\modules\ngx_http_limit_req_module.c,"static void
ngx_http_limit_req_expire(ngx_http_limit_req_ctx_t *ctx, ngx_uint_t n)
{
    ngx_int_t                   excess;
    ngx_msec_t                  now;
    ngx_queue_t                *q;
    ngx_msec_int_t              ms;
    ngx_rbtree_node_t          *node;
    ngx_http_limit_req_node_t  *lr;

    now = ngx_current_msec;

    /*
     * n == 1 deletes one or two zero rate entries
     * n == 0 deletes oldest entry by force
     *        and one or two zero rate entries
     */

    while (n < 3) {

        if (ngx_queue_empty(&ctx->sh->queue)) {
            return;
        }

        q = ngx_queue_last(&ctx->sh->queue);

        lr = ngx_queue_data(q, ngx_http_limit_req_node_t, queue);

        if (lr->count) {

            /*
             * There is not much sense in looking further,
             * because we bump nodes on the lookup stage.
             */

            return;
        }

        if (n++ != 0) {

            ms = (ngx_msec_int_t) (now - lr->last);
      ...",632.0,695.0,1.0,1.0,64.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5109,161540,ngx_http_limit_req_status_variable,1,ngx_http_limit_req_status_variable,"ngx_int_t ngx_http_limit_req_status_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_limit_req_module.c,"static ngx_int_t
ngx_http_limit_req_status_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->main->limit_req_status == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->len = ngx_http_limit_req_status[r->main->limit_req_status - 1].len;
    v->data = ngx_http_limit_req_status[r->main->limit_req_status - 1].data;

    return NGX_OK;
}",764.0,780.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5110,161547,ngx_http_limit_req_create_conf,1,ngx_http_limit_req_create_conf,void* ngx_http_limit_req_create_conf (ngx_conf_t*),http\modules\ngx_http_limit_req_module.c,"static void *
ngx_http_limit_req_create_conf(ngx_conf_t *cf)
{
    ngx_http_limit_req_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_req_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->limits.elts = NULL;
     */

    conf->limit_log_level = NGX_CONF_UNSET_UINT;
    conf->status_code = NGX_CONF_UNSET_UINT;
    conf->dry_run = NGX_CONF_UNSET;

    return conf;
}",783.0,804.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5111,161552,ngx_http_limit_req_merge_conf,1,ngx_http_limit_req_merge_conf,"char* ngx_http_limit_req_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_limit_req_module.c,"static char *
ngx_http_limit_req_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_limit_req_conf_t *prev = parent;
    ngx_http_limit_req_conf_t *conf = child;

    if (conf->limits.elts == NULL) {
        conf->limits = prev->limits;
    }

    ngx_conf_merge_uint_value(conf->limit_log_level, prev->limit_log_level,
                              NGX_LOG_ERR);

    conf->delay_log_level = (conf->limit_log_level == NGX_LOG_INFO) ?
                                NGX_LOG_INFO : conf->limit_log_level + 1;

    ngx_conf_merge_uint_value(conf->status_code, prev->status_code,
                              NGX_HTTP_SERVICE_UNAVAILABLE);

    ngx_conf_merge_value(conf->dry_run, prev->dry_run, 0);

    return NGX_CONF_OK;
}",807.0,829.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5112,161559,ngx_http_limit_req_zone,1,ngx_http_limit_req_zone,"char* ngx_http_limit_req_zone (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_limit_req_module.c,"static char *
ngx_http_limit_req_zone(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    u_char                            *p;
    size_t                             len;
    ssize_t                            size;
    ngx_str_t                         *value, name, s;
    ngx_int_t                          rate, scale;
    ngx_uint_t                         i;
    ngx_shm_zone_t                    *shm_zone;
    ngx_http_limit_req_ctx_t          *ctx;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_req_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &ctx->key;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    size = 0;
    rate = 1;
    scale = 1;
    name.len = 0;

    for (i = 2; i < cf->args->...",832.0,960.0,1.0,1.0,129.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5113,161566,ngx_http_limit_req,1,ngx_http_limit_req,"char* ngx_http_limit_req (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_limit_req_module.c,"static char *
ngx_http_limit_req(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_limit_req_conf_t  *lrcf = conf;

    ngx_int_t                    burst, delay;
    ngx_str_t                   *value, s;
    ngx_uint_t                   i;
    ngx_shm_zone_t              *shm_zone;
    ngx_http_limit_req_limit_t  *limit, *limits;

    value = cf->args->elts;

    shm_zone = NULL;
    burst = 0;
    delay = 0;

    for (i = 1; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""zone="", 5) == 0) {

            s.len = value[i].len - 5;
            s.data = value[i].data + 5;

            shm_zone = ngx_shared_memory_add(cf, &s, 0,
                                             &ngx_http_limit_req_module);
            if (shm_zone == NULL) {
                return NGX_CONF_ERROR;
            }

            continue;
        }

        if (ngx_strncmp(value[i].data, ""burst="", 6) == 0) {

            burst = ngx_atoi(value[i].data + 6, value[i].len - 6);
   ...",963.0,1064.0,1.0,1.0,102.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5114,161573,ngx_http_limit_req_add_variables,1,ngx_http_limit_req_add_variables,ngx_int_t ngx_http_limit_req_add_variables (ngx_conf_t*),http\modules\ngx_http_limit_req_module.c,"static ngx_int_t
ngx_http_limit_req_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_limit_req_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",1067.0,1083.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5115,161578,ngx_http_limit_req_init,1,ngx_http_limit_req_init,ngx_int_t ngx_http_limit_req_init (ngx_conf_t*),http\modules\ngx_http_limit_req_module.c,"static ngx_int_t
ngx_http_limit_req_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_PREACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_limit_req_handler;

    return NGX_OK;
}",1086.0,1102.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5116,161748,ngx_http_limit_req_handler,1,ngx_http_limit_req_handler,ngx_int_t ngx_http_limit_req_handler (ngx_http_request_t*),http\modules\ngx_http_limit_req_module.c,"static ngx_int_t
ngx_http_limit_req_handler(ngx_http_request_t *r)
{
    uint32_t                     hash;
    ngx_str_t                    key;
    ngx_int_t                    rc;
    ngx_uint_t                   n, excess;
    ngx_msec_t                   delay;
    ngx_http_limit_req_ctx_t    *ctx;
    ngx_http_limit_req_conf_t   *lrcf;
    ngx_http_limit_req_limit_t  *limit, *limits;

    if (r->main->limit_req_status) {
        return NGX_DECLINED;
    }

    lrcf = ngx_http_get_module_loc_conf(r, ngx_http_limit_req_module);
    limits = lrcf->limits.elts;

    excess = 0;

    rc = NGX_DECLINED;

#if (NGX_SUPPRESS_WARN)
    limit = NULL;
#endif

    for (n = 0; n < lrcf->limits.nelts; n++) {

        limit = &limits[n];

        ctx = limit->shm_zone->data;

        if (ngx_http_complex_value(r, &ctx->key, &key) != NGX_OK) {
            ngx_http_limit_req_unlock(limits, n);
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }

        if (key.len == 0) {
            ...",194.0,329.0,1.0,40.0,136.0,120,15,104,22,0,33,18,21,7,11,,0,26,2,1,1,ngx_int_t
5117,162229,ngx_http_limit_req_rbtree_insert_value,1,ngx_http_limit_req_rbtree_insert_value,"void ngx_http_limit_req_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",http\modules\ngx_http_limit_req_module.c,"static void
ngx_http_limit_req_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t          **p;
    ngx_http_limit_req_node_t   *lrn, *lrnt;

    for ( ;; ) {

        if (node->key < temp->key) {

            p = &temp->left;

        } else if (node->key > temp->key) {

            p = &temp->right;

        } else { /* node->key == temp->key */

            lrn = (ngx_http_limit_req_node_t *) &node->color;
            lrnt = (ngx_http_limit_req_node_t *) &temp->color;

            p = (ngx_memn2cmp(lrn->data, lrnt->data, lrn->len, lrnt->len) < 0)
                ? &temp->left : &temp->right;
        }

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",363.0,401.0,1.0,1.0,39.0,18,6,17,4,0,0,5,6,0,0,,0,0,6,3,3,void
5118,163118,ngx_http_limit_req_init_zone,1,ngx_http_limit_req_init_zone,"ngx_int_t ngx_http_limit_req_init_zone (ngx_shm_zone_t*,void*)",http\modules\ngx_http_limit_req_module.c,"static ngx_int_t
ngx_http_limit_req_init_zone(ngx_shm_zone_t *shm_zone, void *data)
{
    ngx_http_limit_req_ctx_t  *octx = data;

    size_t                     len;
    ngx_http_limit_req_ctx_t  *ctx;

    ctx = shm_zone->data;

    if (octx) {
        if (ctx->key.value.len != octx->key.value.len
            || ngx_strncmp(ctx->key.value.data, octx->key.value.data,
                           ctx->key.value.len)
               != 0)
        {
            ngx_log_error(NGX_LOG_EMERG, shm_zone->shm.log, 0,
                          ""limit_req \""%V\"" uses the \""%V\"" key ""
                          ""while previously it used the \""%V\"" key"",
                          &shm_zone->shm.name, &ctx->key.value,
                          &octx->key.value);
            return NGX_ERROR;
        }

        ctx->sh = octx->sh;
        ctx->shpool = octx->shpool;

        return NGX_OK;
    }

    ctx->shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;

    if (shm_zone->shm.exists) {
        ctx->s...",698.0,761.0,1.0,1.0,64.0,89,10,50,10,0,32,6,7,7,4,,0,30,4,2,2,ngx_int_t
5119,164386,ngx_http_log_op_run_pt,1,ngx_http_log_op_run_pt,"u_char* ngx_http_log_op_run_pt (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"typedef u_char *(*ngx_http_log_op_run_pt) (ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op);",19.0,20.0,16.0,26.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char*
5120,164393,ngx_http_log_op_getlen_pt,1,ngx_http_log_op_getlen_pt,"size_t ngx_http_log_op_getlen_pt (ngx_http_request_t*,uintptr_t)",http\modules\ngx_http_log_module.c,"typedef size_t (*ngx_http_log_op_getlen_pt) (ngx_http_request_t *r,
    uintptr_t data);",22.0,23.0,16.0,19.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,size_t
5121,164446,ngx_http_log_write,1,ngx_http_log_write,"void ngx_http_log_write (ngx_http_request_t*,ngx_http_log_t*,u_char*,size_t)",http\modules\ngx_http_log_module.c,"static void
ngx_http_log_write(ngx_http_request_t *r, ngx_http_log_t *log, u_char *buf,
    size_t len)
{
    u_char              *name;
    time_t               now;
    ssize_t              n;
    ngx_err_t            err;
#if (NGX_ZLIB)
    ngx_http_log_buf_t  *buffer;
#endif

    if (log->script == NULL) {
        name = log->file->name.data;

#if (NGX_ZLIB)
        buffer = log->file->data;

        if (buffer && buffer->gzip) {
            n = ngx_http_log_gzip(log->file->fd, buf, len, buffer->gzip,
                                  r->connection->log);
        } else {
            n = ngx_write_fd(log->file->fd, buf, len);
        }
#else
        n = ngx_write_fd(log->file->fd, buf, len);
#endif

    } else {
        name = NULL;
        n = ngx_http_log_script_write(r, log->script, &name, buf, len);
    }

    if (n == (ssize_t) len) {
        return;
    }

    now = ngx_time();

    if (n == -1) {
        err = ngx_errno;

        if (err == NGX_ENOSPC) {
            log->...",405.0,468.0,1.0,1.0,64.0,0,0,0,0,2,0,1,1,0,0,,0,0,8,4,4,void
5122,164454,ngx_http_log_script_write,1,ngx_http_log_script_write,"ssize_t ngx_http_log_script_write (ngx_http_request_t*,ngx_http_log_script_t*,u_char**,u_char*,size_t)",http\modules\ngx_http_log_module.c,"static ssize_t
ngx_http_log_script_write(ngx_http_request_t *r, ngx_http_log_script_t *script,
    u_char **name, u_char *buf, size_t len)
{
    size_t                     root;
    ssize_t                    n;
    ngx_str_t                  log, path;
    ngx_open_file_info_t       of;
    ngx_http_log_loc_conf_t   *llcf;
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (!r->root_tested) {

        /* test root directory existence */

        if (ngx_http_map_uri_to_path(r, &path, &root, 0) == NULL) {
            /* simulate successful logging */
            return len;
        }

        path.data[root] = '\0';

        ngx_memzero(&of, sizeof(ngx_open_file_info_t));

        of.valid = clcf->open_file_cache_valid;
        of.min_uses = clcf->open_file_cache_min_uses;
        of.test_dir = 1;
        of.test_only = 1;
        of.errors = clcf->open_file_cache_errors;
        of.events = clcf->open_file_cache_events;

...",471.0,581.0,1.0,1.0,111.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ssize_t
5123,164463,ngx_http_log_flush,1,ngx_http_log_flush,"void ngx_http_log_flush (ngx_open_file_t*,ngx_log_t*)",http\modules\ngx_http_log_module.c,"static void
ngx_http_log_flush(ngx_open_file_t *file, ngx_log_t *log)
{
    size_t               len;
    ssize_t              n;
    ngx_http_log_buf_t  *buffer;

    buffer = file->data;

    len = buffer->pos - buffer->start;

    if (len == 0) {
        return;
    }

#if (NGX_ZLIB)
    if (buffer->gzip) {
        n = ngx_http_log_gzip(file->fd, buffer->start, len, buffer->gzip, log);
    } else {
        n = ngx_write_fd(file->fd, buffer->start, len);
    }
#else
    n = ngx_write_fd(file->fd, buffer->start, len);
#endif

    if (n == -1) {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ngx_write_fd_n "" to \""%s\"" failed"",
                      file->name.data);

    } else if ((size_t) n != len) {
        ngx_log_error(NGX_LOG_ALERT, log, 0,
                      ngx_write_fd_n "" to \""%s\"" was incomplete: %z of %uz"",
                      file->name.data, n, len);
    }

    buffer->pos = buffer->start;

    if (buffer->event && buffer->event->timer_...",718.0,759.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5124,164469,ngx_http_log_flush_handler,1,ngx_http_log_flush_handler,void ngx_http_log_flush_handler (ngx_event_t*),http\modules\ngx_http_log_module.c,"static void
ngx_http_log_flush_handler(ngx_event_t *ev)
{
    ngx_log_debug0(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""http log buffer flush handler"");

    ngx_http_log_flush(ev->data, ev->log);
}",762.0,769.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5125,164474,ngx_http_log_pipe,1,ngx_http_log_pipe,"u_char* ngx_http_log_pipe (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_pipe(ngx_http_request_t *r, u_char *buf, ngx_http_log_op_t *op)
{
    if (r->pipeline) {
        *buf = 'p';
    } else {
        *buf = '.';
    }

    return buf + 1;
}",799.0,809.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5126,164481,ngx_http_log_time,1,ngx_http_log_time,"u_char* ngx_http_log_time (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_time(ngx_http_request_t *r, u_char *buf, ngx_http_log_op_t *op)
{
    return ngx_cpymem(buf, ngx_cached_http_log_time.data,
                      ngx_cached_http_log_time.len);
}",812.0,817.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5127,164488,ngx_http_log_iso8601,1,ngx_http_log_iso8601,"u_char* ngx_http_log_iso8601 (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_iso8601(ngx_http_request_t *r, u_char *buf, ngx_http_log_op_t *op)
{
    return ngx_cpymem(buf, ngx_cached_http_log_iso8601.data,
                      ngx_cached_http_log_iso8601.len);
}",819.0,824.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5128,164495,ngx_http_log_msec,1,ngx_http_log_msec,"u_char* ngx_http_log_msec (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_msec(ngx_http_request_t *r, u_char *buf, ngx_http_log_op_t *op)
{
    ngx_time_t  *tp;

    tp = ngx_timeofday();

    return ngx_sprintf(buf, ""%T.%03M"", tp->sec, tp->msec);
}",826.0,834.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5129,164502,ngx_http_log_request_time,1,ngx_http_log_request_time,"u_char* ngx_http_log_request_time (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_request_time(ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op)
{
    ngx_time_t      *tp;
    ngx_msec_int_t   ms;

    tp = ngx_timeofday();

    ms = (ngx_msec_int_t)
             ((tp->sec - r->start_sec) * 1000 + (tp->msec - r->start_msec));
    ms = ngx_max(ms, 0);

    return ngx_sprintf(buf, ""%T.%03M"", (time_t) ms / 1000, ms % 1000);
}",837.0,851.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5130,164509,ngx_http_log_status,1,ngx_http_log_status,"u_char* ngx_http_log_status (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_status(ngx_http_request_t *r, u_char *buf, ngx_http_log_op_t *op)
{
    ngx_uint_t  status;

    if (r->err_status) {
        status = r->err_status;

    } else if (r->headers_out.status) {
        status = r->headers_out.status;

    } else if (r->http_version == NGX_HTTP_VERSION_9) {
        status = 9;

    } else {
        status = 0;
    }

    return ngx_sprintf(buf, ""%03ui"", status);
}",854.0,873.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5131,164516,ngx_http_log_bytes_sent,1,ngx_http_log_bytes_sent,"u_char* ngx_http_log_bytes_sent (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_bytes_sent(ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op)
{
    return ngx_sprintf(buf, ""%O"", r->connection->sent);
}",876.0,881.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5132,164523,ngx_http_log_body_bytes_sent,1,ngx_http_log_body_bytes_sent,"u_char* ngx_http_log_body_bytes_sent (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_body_bytes_sent(ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op)
{
    off_t  length;

    length = r->connection->sent - r->header_size;

    if (length > 0) {
        return ngx_sprintf(buf, ""%O"", length);
    }

    *buf = '0';

    return buf + 1;
}",889.0,904.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5133,164530,ngx_http_log_request_length,1,ngx_http_log_request_length,"u_char* ngx_http_log_request_length (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_request_length(ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op)
{
    return ngx_sprintf(buf, ""%O"", r->request_length);
}",907.0,912.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5134,164537,ngx_http_log_variable_compile,1,ngx_http_log_variable_compile,"ngx_int_t ngx_http_log_variable_compile (ngx_conf_t*,ngx_http_log_op_t*,ngx_str_t*,ngx_uint_t)",http\modules\ngx_http_log_module.c,"static ngx_int_t
ngx_http_log_variable_compile(ngx_conf_t *cf, ngx_http_log_op_t *op,
    ngx_str_t *value, ngx_uint_t escape)
{
    ngx_int_t  index;

    index = ngx_http_get_variable_index(cf, value);
    if (index == NGX_ERROR) {
        return NGX_ERROR;
    }

    op->len = 0;

    switch (escape) {
    case NGX_HTTP_LOG_ESCAPE_JSON:
        op->getlen = ngx_http_log_json_variable_getlen;
        op->run = ngx_http_log_json_variable;
        break;

    case NGX_HTTP_LOG_ESCAPE_NONE:
        op->getlen = ngx_http_log_unescaped_variable_getlen;
        op->run = ngx_http_log_unescaped_variable;
        break;

    default: /* NGX_HTTP_LOG_ESCAPE_DEFAULT */
        op->getlen = ngx_http_log_variable_getlen;
        op->run = ngx_http_log_variable;
    }

    op->data = index;

    return NGX_OK;
}",915.0,947.0,1.0,9.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5135,164545,ngx_http_log_variable_getlen,1,ngx_http_log_variable_getlen,"size_t ngx_http_log_variable_getlen (ngx_http_request_t*,uintptr_t)",http\modules\ngx_http_log_module.c,"static size_t
ngx_http_log_variable_getlen(ngx_http_request_t *r, uintptr_t data)
{
    uintptr_t                   len;
    ngx_http_variable_value_t  *value;

    value = ngx_http_get_indexed_variable(r, data);

    if (value == NULL || value->not_found) {
        return 1;
    }

    len = ngx_http_log_escape(NULL, value->data, value->len);

    value->escape = len ? 1 : 0;

    return value->len + len * 3;
}",950.0,967.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,size_t
5136,164551,ngx_http_log_variable,1,ngx_http_log_variable,"u_char* ngx_http_log_variable (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_variable(ngx_http_request_t *r, u_char *buf, ngx_http_log_op_t *op)
{
    ngx_http_variable_value_t  *value;

    value = ngx_http_get_indexed_variable(r, op->data);

    if (value == NULL || value->not_found) {
        *buf = '-';
        return buf + 1;
    }

    if (value->escape == 0) {
        return ngx_cpymem(buf, value->data, value->len);

    } else {
        return (u_char *) ngx_http_log_escape(buf, value->data, value->len);
    }
}",970.0,988.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5137,164558,ngx_http_log_escape,1,ngx_http_log_escape,"uintptr_t ngx_http_log_escape (u_char*,u_char*,size_t)",http\modules\ngx_http_log_module.c,"static uintptr_t
ngx_http_log_escape(u_char *dst, u_char *src, size_t size)
{
    ngx_uint_t      n;
    static u_char   hex[] = ""0123456789ABCDEF"";

    static uint32_t   escape[] = {
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */

                    /* ?>=< ;:98 7654 3210  /.-, +*)( '&%$ #""!  */
        0x00000004, /* 0000 0000 0000 0000  0000 0000 0000 0100 */

                    /* _^]\ [ZYX WVUT SRQP  ONML KJIH GFED CBA@ */
        0x10000000, /* 0001 0000 0000 0000  0000 0000 0000 0000 */

                    /*  ~}| {zyx wvut srqp  onml kjih gfed cba` */
        0x80000000, /* 1000 0000 0000 0000  0000 0000 0000 0000 */

        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */
    };


    if (dst == NULL) {

        /* find the number of the char...",991.0,1048.0,1.0,1.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,uintptr_t
5138,164565,ngx_http_log_json_variable_getlen,1,ngx_http_log_json_variable_getlen,"size_t ngx_http_log_json_variable_getlen (ngx_http_request_t*,uintptr_t)",http\modules\ngx_http_log_module.c,"static size_t
ngx_http_log_json_variable_getlen(ngx_http_request_t *r, uintptr_t data)
{
    uintptr_t                   len;
    ngx_http_variable_value_t  *value;

    value = ngx_http_get_indexed_variable(r, data);

    if (value == NULL || value->not_found) {
        return 0;
    }

    len = ngx_escape_json(NULL, value->data, value->len);

    value->escape = len ? 1 : 0;

    return value->len + len;
}",1051.0,1068.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,size_t
5139,164571,ngx_http_log_json_variable,1,ngx_http_log_json_variable,"u_char* ngx_http_log_json_variable (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_json_variable(ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op)
{
    ngx_http_variable_value_t  *value;

    value = ngx_http_get_indexed_variable(r, op->data);

    if (value == NULL || value->not_found) {
        return buf;
    }

    if (value->escape == 0) {
        return ngx_cpymem(buf, value->data, value->len);

    } else {
        return (u_char *) ngx_escape_json(buf, value->data, value->len);
    }
}",1071.0,1089.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5140,164578,ngx_http_log_unescaped_variable_getlen,1,ngx_http_log_unescaped_variable_getlen,"size_t ngx_http_log_unescaped_variable_getlen (ngx_http_request_t*,uintptr_t)",http\modules\ngx_http_log_module.c,"static size_t
ngx_http_log_unescaped_variable_getlen(ngx_http_request_t *r, uintptr_t data)
{
    ngx_http_variable_value_t  *value;

    value = ngx_http_get_indexed_variable(r, data);

    if (value == NULL || value->not_found) {
        return 0;
    }

    value->escape = 0;

    return value->len;
}",1092.0,1106.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,size_t
5141,164584,ngx_http_log_unescaped_variable,1,ngx_http_log_unescaped_variable,"u_char* ngx_http_log_unescaped_variable (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_unescaped_variable(ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op)
{
    ngx_http_variable_value_t  *value;

    value = ngx_http_get_indexed_variable(r, op->data);

    if (value == NULL || value->not_found) {
        return buf;
    }

    return ngx_cpymem(buf, value->data, value->len);
}",1109.0,1122.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5142,164591,ngx_http_log_create_main_conf,1,ngx_http_log_create_main_conf,void* ngx_http_log_create_main_conf (ngx_conf_t*),http\modules\ngx_http_log_module.c,"static void *
ngx_http_log_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_log_main_conf_t  *conf;

    ngx_http_log_fmt_t  *fmt;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_main_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&conf->formats, cf->pool, 4, sizeof(ngx_http_log_fmt_t))
        != NGX_OK)
    {
        return NULL;
    }

    fmt = ngx_array_push(&conf->formats);
    if (fmt == NULL) {
        return NULL;
    }

    ngx_str_set(&fmt->name, ""combined"");

    fmt->flushes = NULL;

    fmt->ops = ngx_array_create(cf->pool, 16, sizeof(ngx_http_log_op_t));
    if (fmt->ops == NULL) {
        return NULL;
    }

    return conf;
}",1125.0,1158.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5143,164596,ngx_http_log_create_loc_conf,1,ngx_http_log_create_loc_conf,void* ngx_http_log_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_log_module.c,"static void *
ngx_http_log_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_log_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->open_file_cache = NGX_CONF_UNSET_PTR;

    return conf;
}",1161.0,1174.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5144,164601,ngx_http_log_merge_loc_conf,1,ngx_http_log_merge_loc_conf,"char* ngx_http_log_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_log_module.c,"static char *
ngx_http_log_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_log_loc_conf_t *prev = parent;
    ngx_http_log_loc_conf_t *conf = child;

    ngx_http_log_t            *log;
    ngx_http_log_fmt_t        *fmt;
    ngx_http_log_main_conf_t  *lmcf;

    if (conf->open_file_cache == NGX_CONF_UNSET_PTR) {

        conf->open_file_cache = prev->open_file_cache;
        conf->open_file_cache_valid = prev->open_file_cache_valid;
        conf->open_file_cache_min_uses = prev->open_file_cache_min_uses;

        if (conf->open_file_cache == NGX_CONF_UNSET_PTR) {
            conf->open_file_cache = NULL;
        }
    }

    if (conf->logs || conf->off) {
        return NGX_CONF_OK;
    }

    conf->logs = prev->logs;
    conf->off = prev->off;

    if (conf->logs || conf->off) {
        return NGX_CONF_OK;
    }

    conf->logs = ngx_array_create(cf->pool, 2, sizeof(ngx_http_log_t));
    if (conf->logs == NULL) {
        return NGX_CONF_ERROR;
    }

    l...",1177.0,1234.0,1.0,1.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5145,164608,ngx_http_log_set_log,1,ngx_http_log_set_log,"char* ngx_http_log_set_log (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_log_module.c,"static char *
ngx_http_log_set_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_log_loc_conf_t *llcf = conf;

    ssize_t                            size;
    ngx_int_t                          gzip;
    ngx_uint_t                         i, n;
    ngx_msec_t                         flush;
    ngx_str_t                         *value, name, s;
    ngx_http_log_t                    *log;
    ngx_syslog_peer_t                 *peer;
    ngx_http_log_buf_t                *buffer;
    ngx_http_log_fmt_t                *fmt;
    ngx_http_log_main_conf_t          *lmcf;
    ngx_http_script_compile_t          sc;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        llcf->off = 1;
        if (cf->args->nelts == 2) {
            return NGX_CONF_OK;
        }

        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid parameter \""%V\"""", &value[2]);
        return NGX_CONF_...",1237.0,1533.0,1.0,1.0,297.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5146,164615,ngx_http_log_set_format,1,ngx_http_log_set_format,"char* ngx_http_log_set_format (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_log_module.c,"static char *
ngx_http_log_set_format(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_log_main_conf_t *lmcf = conf;

    ngx_str_t           *value;
    ngx_uint_t           i;
    ngx_http_log_fmt_t  *fmt;

    value = cf->args->elts;

    fmt = lmcf->formats.elts;
    for (i = 0; i < lmcf->formats.nelts; i++) {
        if (fmt[i].name.len == value[1].len
            && ngx_strcmp(fmt[i].name.data, value[1].data) == 0)
        {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""duplicate \""log_format\"" name \""%V\"""",
                               &value[1]);
            return NGX_CONF_ERROR;
        }
    }

    fmt = ngx_array_push(&lmcf->formats);
    if (fmt == NULL) {
        return NGX_CONF_ERROR;
    }

    fmt->name = value[1];

    fmt->flushes = ngx_array_create(cf->pool, 4, sizeof(ngx_int_t));
    if (fmt->flushes == NULL) {
        return NGX_CONF_ERROR;
    }

    fmt->ops = ngx_array_create(cf->pool, 16, sizeof(ngx_htt...",1536.0,1577.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5147,164622,ngx_http_log_compile_format,1,ngx_http_log_compile_format,"char* ngx_http_log_compile_format (ngx_conf_t*,ngx_array_t*,ngx_array_t*,ngx_array_t*,ngx_uint_t)",http\modules\ngx_http_log_module.c,"static char *
ngx_http_log_compile_format(ngx_conf_t *cf, ngx_array_t *flushes,
    ngx_array_t *ops, ngx_array_t *args, ngx_uint_t s)
{
    u_char              *data, *p, ch;
    size_t               i, len;
    ngx_str_t           *value, var;
    ngx_int_t           *flush;
    ngx_uint_t           bracket, escape;
    ngx_http_log_op_t   *op;
    ngx_http_log_var_t  *v;

    escape = NGX_HTTP_LOG_ESCAPE_DEFAULT;
    value = args->elts;

    if (s < args->nelts && ngx_strncmp(value[s].data, ""escape="", 7) == 0) {
        data = value[s].data + 7;

        if (ngx_strcmp(data, ""json"") == 0) {
            escape = NGX_HTTP_LOG_ESCAPE_JSON;

        } else if (ngx_strcmp(data, ""none"") == 0) {
            escape = NGX_HTTP_LOG_ESCAPE_NONE;

        } else if (ngx_strcmp(data, ""default"") != 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""unknown log format escaping \""%s\"""", data);
            return NGX_CONF_ERROR;
        }

        s++;
    }...",1580.0,1756.0,1.0,13.0,177.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,char*
5148,164631,ngx_http_log_open_file_cache,1,ngx_http_log_open_file_cache,"char* ngx_http_log_open_file_cache (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_log_module.c,"static char *
ngx_http_log_open_file_cache(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_log_loc_conf_t *llcf = conf;

    time_t       inactive, valid;
    ngx_str_t   *value, s;
    ngx_int_t    max, min_uses;
    ngx_uint_t   i;

    if (llcf->open_file_cache != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    max = 0;
    inactive = 10;
    valid = 60;
    min_uses = 1;

    for (i = 1; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""max="", 4) == 0) {

            max = ngx_atoi(value[i].data + 4, value[i].len - 4);
            if (max == NGX_ERROR) {
                goto failed;
            }

            continue;
        }

        if (ngx_strncmp(value[i].data, ""inactive="", 9) == 0) {

            s.len = value[i].len - 9;
            s.data = value[i].data + 9;

            inactive = ngx_parse_time(&s, 1);
            if (inactive == (time_t) NGX_ERROR) {
                goto failed;
        ...",1759.0,1864.0,1.0,1.0,106.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5149,164638,ngx_http_log_init,1,ngx_http_log_init,ngx_int_t ngx_http_log_init (ngx_conf_t*),http\modules\ngx_http_log_module.c,"static ngx_int_t
ngx_http_log_init(ngx_conf_t *cf)
{
    ngx_str_t                  *value;
    ngx_array_t                 a;
    ngx_http_handler_pt        *h;
    ngx_http_log_fmt_t         *fmt;
    ngx_http_log_main_conf_t   *lmcf;
    ngx_http_core_main_conf_t  *cmcf;

    lmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_log_module);

    if (lmcf->combined_used) {
        if (ngx_array_init(&a, cf->pool, 1, sizeof(ngx_str_t)) != NGX_OK) {
            return NGX_ERROR;
        }

        value = ngx_array_push(&a);
        if (value == NULL) {
            return NGX_ERROR;
        }

        *value = ngx_http_combined_fmt;
        fmt = lmcf->formats.elts;

        if (ngx_http_log_compile_format(cf, NULL, fmt->ops, &a, 0)
            != NGX_CONF_OK)
        {
            return NGX_ERROR;
        }
    }

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_LOG_PHASE].handlers);
    if (h == NULL) {
    ...",1867.0,1909.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5150,164792,ngx_http_log_handler,1,ngx_http_log_handler,ngx_int_t ngx_http_log_handler (ngx_http_request_t*),http\modules\ngx_http_log_module.c,"static ngx_int_t
ngx_http_log_handler(ngx_http_request_t *r)
{
    u_char                   *line, *p;
    size_t                    len, size;
    ssize_t                   n;
    ngx_str_t                 val;
    ngx_uint_t                i, l;
    ngx_http_log_t           *log;
    ngx_http_log_op_t        *op;
    ngx_http_log_buf_t       *buffer;
    ngx_http_log_loc_conf_t  *lcf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http log handler"");

    lcf = ngx_http_get_module_loc_conf(r, ngx_http_log_module);

    if (lcf->off) {
        return NGX_OK;
    }

    log = lcf->logs->elts;
    for (l = 0; l < lcf->logs->nelts; l++) {

        if (log[l].filter) {
            if (ngx_http_complex_value(r, log[l].filter, &val) != NGX_OK) {
                return NGX_ERROR;
            }

            if (val.len == 0 || (val.len == 1 && val.data[0] == '0')) {
                continue;
            }
        }

        if (ngx_time() == log[l].disk_...",253.0,402.0,1.0,1.0,150.0,151,17,143,21,0,33,26,50,14,8,,0,29,2,1,1,ngx_int_t
5151,165835,ngx_http_log_copy_short,1,ngx_http_log_copy_short,"u_char ngx_http_log_copy_short (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_copy_short(ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op)
{
    size_t     len;
    uintptr_t  data;

    len = op->len;
    data = op->data;

    while (len--) {
        *buf++ = (u_char) (data & 0xff);
        data >>= 8;
    }

    return buf;
}",772.0,788.0,1.0,1.0,17.0,9,6,9,4,0,0,2,2,0,0,,0,0,6,3,3,u_char
5152,165871,ngx_http_log_copy_long,1,ngx_http_log_copy_long,"u_char ngx_http_log_copy_long (ngx_http_request_t*,u_char*,ngx_http_log_op_t*)",http\modules\ngx_http_log_module.c,"static u_char *
ngx_http_log_copy_long(ngx_http_request_t *r, u_char *buf,
    ngx_http_log_op_t *op)
{
    return ngx_cpymem(buf, (u_char *) op->data, op->len);
}",791.0,796.0,1.0,1.0,6.0,3,2,3,2,0,0,1,1,0,0,,0,0,6,3,3,u_char
5153,168966,ngx_http_map_create_conf,1,ngx_http_map_create_conf,void* ngx_http_map_create_conf (ngx_conf_t*),http\modules\ngx_http_map_module.c,"static void *
ngx_http_map_create_conf(ngx_conf_t *cf)
{
    ngx_http_map_conf_t  *mcf;

    mcf = ngx_palloc(cf->pool, sizeof(ngx_http_map_conf_t));
    if (mcf == NULL) {
        return NULL;
    }

    mcf->hash_max_size = NGX_CONF_UNSET_UINT;
    mcf->hash_bucket_size = NGX_CONF_UNSET_UINT;

    return mcf;
}",158.0,172.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5154,168971,ngx_http_map_block,1,ngx_http_map_block,"char* ngx_http_map_block (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_map_module.c,"static char *
ngx_http_map_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_map_conf_t  *mcf = conf;

    char                              *rv;
    ngx_str_t                         *value, name;
    ngx_conf_t                         save;
    ngx_pool_t                        *pool;
    ngx_hash_init_t                    hash;
    ngx_http_map_ctx_t                *map;
    ngx_http_variable_t               *var;
    ngx_http_map_conf_ctx_t            ctx;
    ngx_http_compile_complex_value_t   ccv;

    if (mcf->hash_max_size == NGX_CONF_UNSET_UINT) {
        mcf->hash_max_size = 2048;
    }

    if (mcf->hash_bucket_size == NGX_CONF_UNSET_UINT) {
        mcf->hash_bucket_size = ngx_cacheline_size;

    } else {
        mcf->hash_bucket_size = ngx_align(mcf->hash_bucket_size,
                                          ngx_cacheline_size);
    }

    map = ngx_pcalloc(cf->pool, sizeof(ngx_http_map_ctx_t));
    if (map == NULL) {
        return NGX_CONF_ERROR;
 ...",175.0,365.0,1.0,1.0,191.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5155,168978,ngx_http_map,1,ngx_http_map,"char* ngx_http_map (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_map_module.c,"static char *
ngx_http_map(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
{
    u_char                            *data;
    size_t                             len;
    ngx_int_t                          rv;
    ngx_str_t                         *value, v;
    ngx_uint_t                         i, key;
    ngx_http_map_conf_ctx_t           *ctx;
    ngx_http_complex_value_t           cv, *cvp;
    ngx_http_variable_value_t         *var, **vp;
    ngx_http_compile_complex_value_t   ccv;

    ctx = cf->ctx;

    value = cf->args->elts;

    if (cf->args->nelts == 1
        && ngx_strcmp(value[0].data, ""hostnames"") == 0)
    {
        ctx->hostnames = 1;
        return NGX_CONF_OK;
    }

    if (cf->args->nelts == 1
        && ngx_strcmp(value[0].data, ""volatile"") == 0)
    {
        ctx->no_cacheable = 1;
        return NGX_CONF_OK;
    }

    if (cf->args->nelts != 2) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid number of the map paramete...",380.0,589.0,1.0,1.0,210.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5156,169055,ngx_http_map_variable,1,ngx_http_map_variable,"ngx_int_t ngx_http_map_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_map_module.c,"static ngx_int_t
ngx_http_map_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_http_map_ctx_t  *map = (ngx_http_map_ctx_t *) data;

    ngx_str_t                   val, str;
    ngx_http_complex_value_t   *cv;
    ngx_http_variable_value_t  *value;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http map started"");

    if (ngx_http_complex_value(r, &map->value, &val) != NGX_OK) {
        return NGX_ERROR;
    }

    if (map->hostnames && val.len > 0 && val.data[val.len - 1] == '.') {
        val.len--;
    }

    value = ngx_http_map_find(r, &map->map, &val);

    if (value == NULL) {
        value = map->default_value;
    }

    if (!value->valid) {
        cv = (ngx_http_complex_value_t *) value->data;

        if (ngx_http_complex_value(r, cv, &str) != NGX_OK) {
            return NGX_ERROR;
        }

        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->len = str.le...",107.0,155.0,1.0,1.0,49.0,49,13,42,12,0,13,6,7,7,3,,0,13,6,3,3,ngx_int_t
5157,169824,ngx_http_map_cmp_dns_wildcards,1,ngx_http_map_cmp_dns_wildcards,"ANY ngx_http_map_cmp_dns_wildcards (void*,void*)",http\modules\ngx_http_map_module.c,"ngx_http_map_cmp_dns_wildcards(const void *one, const void *two)
{
    ngx_hash_key_t  *first, *second;

    first = (ngx_hash_key_t *) one;
    second = (ngx_hash_key_t *) two;

    return ngx_dns_strcmp(first->key.data, second->key.data);
}",369.0,377.0,1.0,1.0,9.0,8,4,6,4,0,3,1,1,0,1,,0,2,4,2,2,ANY
5158,170444,ngx_http_memcached_create_request,1,ngx_http_memcached_create_request,ngx_int_t ngx_http_memcached_create_request (ngx_http_request_t*),http\modules\ngx_http_memcached_module.c,"static ngx_int_t
ngx_http_memcached_create_request(ngx_http_request_t *r)
{
    size_t                          len;
    uintptr_t                       escape;
    ngx_buf_t                      *b;
    ngx_chain_t                    *cl;
    ngx_http_memcached_ctx_t       *ctx;
    ngx_http_variable_value_t      *vv;
    ngx_http_memcached_loc_conf_t  *mlcf;

    mlcf = ngx_http_get_module_loc_conf(r, ngx_http_memcached_module);

    vv = ngx_http_get_indexed_variable(r, mlcf->index);

    if (vv == NULL || vv->not_found || vv->len == 0) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""the \""$memcached_key\"" variable is not set"");
        return NGX_ERROR;
    }

    escape = 2 * ngx_escape_uri(NULL, vv->data, vv->len, NGX_ESCAPE_MEMCACHED);

    len = sizeof(""get "") - 1 + vv->len + escape + sizeof(CRLF) - 1;

    b = ngx_create_temp_buf(r->pool, len);
    if (b == NULL) {
        return NGX_ERROR;
    }

    cl = ngx_alloc_chain_link(r->pool);
  ...",237.0,299.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5159,170449,ngx_http_memcached_reinit_request,1,ngx_http_memcached_reinit_request,ngx_int_t ngx_http_memcached_reinit_request (ngx_http_request_t*),http\modules\ngx_http_memcached_module.c,"static ngx_int_t
ngx_http_memcached_reinit_request(ngx_http_request_t *r)
{
    return NGX_OK;
}",302.0,306.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5160,170454,ngx_http_memcached_process_header,1,ngx_http_memcached_process_header,ngx_int_t ngx_http_memcached_process_header (ngx_http_request_t*),http\modules\ngx_http_memcached_module.c,"static ngx_int_t
ngx_http_memcached_process_header(ngx_http_request_t *r)
{
    u_char                         *p, *start;
    ngx_str_t                       line;
    ngx_uint_t                      flags;
    ngx_table_elt_t                *h;
    ngx_http_upstream_t            *u;
    ngx_http_memcached_ctx_t       *ctx;
    ngx_http_memcached_loc_conf_t  *mlcf;

    u = r->upstream;

    for (p = u->buffer.pos; p < u->buffer.last; p++) {
        if (*p == LF) {
            goto found;
        }
    }

    return NGX_AGAIN;

found:

    line.data = u->buffer.pos;
    line.len = p - u->buffer.pos;

    if (line.len == 0 || *(p - 1) != CR) {
        goto no_valid;
    }

    *p = '\0';
    line.len--;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""memcached: \""%V\"""", &line);

    p = u->buffer.pos;

    ctx = ngx_http_get_module_ctx(r, ngx_http_memcached_module);
    mlcf = ngx_http_get_module_loc_conf(r, ngx_http_memcached_module);

    if (ngx...",309.0,449.0,1.0,1.0,141.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5161,170459,ngx_http_memcached_filter_init,1,ngx_http_memcached_filter_init,ngx_int_t ngx_http_memcached_filter_init (void*),http\modules\ngx_http_memcached_module.c,"static ngx_int_t
ngx_http_memcached_filter_init(void *data)
{
    ngx_http_memcached_ctx_t  *ctx = data;

    ngx_http_upstream_t  *u;

    u = ctx->request->upstream;

    if (u->headers_in.status_n != 404) {
        u->length = u->headers_in.content_length_n + NGX_HTTP_MEMCACHED_END;
        ctx->rest = NGX_HTTP_MEMCACHED_END;

    } else {
        u->length = 0;
    }

    return NGX_OK;
}",452.0,470.0,1.0,53.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5162,170464,ngx_http_memcached_filter,1,ngx_http_memcached_filter,"ngx_int_t ngx_http_memcached_filter (void*,ssize_t)",http\modules\ngx_http_memcached_module.c,"static ngx_int_t
ngx_http_memcached_filter(void *data, ssize_t bytes)
{
    ngx_http_memcached_ctx_t  *ctx = data;

    u_char               *last;
    ngx_buf_t            *b;
    ngx_chain_t          *cl, **ll;
    ngx_http_upstream_t  *u;

    u = ctx->request->upstream;
    b = &u->buffer;

    if (u->length == (ssize_t) ctx->rest) {

        if (bytes > u->length
            || ngx_strncmp(b->last,
                   ngx_http_memcached_end + NGX_HTTP_MEMCACHED_END - ctx->rest,
                   bytes)
               != 0)
        {
            ngx_log_error(NGX_LOG_ERR, ctx->request->connection->log, 0,
                          ""memcached sent invalid trailer"");

            u->length = 0;
            ctx->rest = 0;

            return NGX_OK;
        }

        u->length -= bytes;
        ctx->rest -= bytes;

        if (u->length == 0) {
            u->keepalive = 1;
        }

        return NGX_OK;
    }

    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
...",473.0,568.0,1.0,44.0,96.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5163,170470,ngx_http_memcached_abort_request,1,ngx_http_memcached_abort_request,void ngx_http_memcached_abort_request (ngx_http_request_t*),http\modules\ngx_http_memcached_module.c,"static void
ngx_http_memcached_abort_request(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""abort http memcached request"");
    return;
}",571.0,577.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5164,170475,ngx_http_memcached_finalize_request,1,ngx_http_memcached_finalize_request,"void ngx_http_memcached_finalize_request (ngx_http_request_t*,ngx_int_t)",http\modules\ngx_http_memcached_module.c,"static void
ngx_http_memcached_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""finalize http memcached request"");
    return;
}",580.0,586.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5165,170481,ngx_http_memcached_create_loc_conf,1,ngx_http_memcached_create_loc_conf,void* ngx_http_memcached_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_memcached_module.c,"static void *
ngx_http_memcached_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_memcached_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_memcached_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->upstream.bufs.num = 0;
     *     conf->upstream.next_upstream = 0;
     *     conf->upstream.temp_path = NULL;
     */

    conf->upstream.local = NGX_CONF_UNSET_PTR;
    conf->upstream.socket_keepalive = NGX_CONF_UNSET;
    conf->upstream.next_upstream_tries = NGX_CONF_UNSET_UINT;
    conf->upstream.connect_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.send_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.read_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.next_upstream_timeout = NGX_CONF_UNSET_MSEC;

    conf->upstream.buffer_size = NGX_CONF_UNSET_SIZE;

    /* the hardcoded values */
    conf->upstream.cyclic_temp_file = 0;
    conf->upstream.buffering = 0;
    conf->upstream.ignor...",589.0,636.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5166,170486,ngx_http_memcached_merge_loc_conf,1,ngx_http_memcached_merge_loc_conf,"char* ngx_http_memcached_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_memcached_module.c,"static char *
ngx_http_memcached_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_memcached_loc_conf_t *prev = parent;
    ngx_http_memcached_loc_conf_t *conf = child;

    ngx_conf_merge_ptr_value(conf->upstream.local,
                              prev->upstream.local, NULL);

    ngx_conf_merge_value(conf->upstream.socket_keepalive,
                              prev->upstream.socket_keepalive, 0);

    ngx_conf_merge_uint_value(conf->upstream.next_upstream_tries,
                              prev->upstream.next_upstream_tries, 0);

    ngx_conf_merge_msec_value(conf->upstream.connect_timeout,
                              prev->upstream.connect_timeout, 60000);

    ngx_conf_merge_msec_value(conf->upstream.send_timeout,
                              prev->upstream.send_timeout, 60000);

    ngx_conf_merge_msec_value(conf->upstream.read_timeout,
                              prev->upstream.read_timeout, 60000);

    ngx_conf_merge_msec_value(conf->upstrea...",639.0,692.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5167,170493,ngx_http_memcached_pass,1,ngx_http_memcached_pass,"char* ngx_http_memcached_pass (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_memcached_module.c,"static char *
ngx_http_memcached_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_memcached_loc_conf_t *mlcf = conf;

    ngx_str_t                 *value;
    ngx_url_t                  u;
    ngx_http_core_loc_conf_t  *clcf;

    if (mlcf->upstream.upstream) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    ngx_memzero(&u, sizeof(ngx_url_t));

    u.url = value[1];
    u.no_resolve = 1;

    mlcf->upstream.upstream = ngx_http_upstream_add(cf, &u, 0);
    if (mlcf->upstream.upstream == NULL) {
        return NGX_CONF_ERROR;
    }

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);

    clcf->handler = ngx_http_memcached_handler;

    if (clcf->name.len && clcf->name.data[clcf->name.len - 1] == '/') {
        clcf->auto_redirect = 1;
    }

    mlcf->index = ngx_http_get_variable_index(cf, &ngx_http_memcached_key);

    if (mlcf->index == NGX_ERROR) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",695.0,735.0,1.0,1.0,41.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5168,170758,ngx_http_memcached_handler,1,ngx_http_memcached_handler,ngx_int_t ngx_http_memcached_handler (ngx_http_request_t*),http\modules\ngx_http_memcached_module.c,"static ngx_int_t
ngx_http_memcached_handler(ngx_http_request_t *r)
{
    ngx_int_t                       rc;
    ngx_http_upstream_t            *u;
    ngx_http_memcached_ctx_t       *ctx;
    ngx_http_memcached_loc_conf_t  *mlcf;

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
        return NGX_HTTP_NOT_ALLOWED;
    }

    rc = ngx_http_discard_request_body(r);

    if (rc != NGX_OK) {
        return rc;
    }

    if (ngx_http_set_content_type(r) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    if (ngx_http_upstream_create(r) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    u = r->upstream;

    ngx_str_set(&u->schema, ""memcached://"");
    u->output.tag = (ngx_buf_tag_t) &ngx_http_memcached_module;

    mlcf = ngx_http_get_module_loc_conf(r, ngx_http_memcached_module);

    u->conf = &mlcf->upstream;

    u->create_request = ngx_http_memcached_create_request;
    u->reinit_request = ngx_http_memcached_reinit_request;
    u->proc...",175.0,234.0,1.0,1.0,60.0,46,11,56,22,0,11,6,6,2,5,,0,10,2,1,1,ngx_int_t
5169,172575,ngx_http_mirror_handler,1,ngx_http_mirror_handler,ngx_int_t ngx_http_mirror_handler (ngx_http_request_t*),http\modules\ngx_http_mirror_module.c,"static ngx_int_t
ngx_http_mirror_handler(ngx_http_request_t *r)
{
    ngx_int_t                    rc;
    ngx_http_mirror_ctx_t       *ctx;
    ngx_http_mirror_loc_conf_t  *mlcf;

    if (r != r->main) {
        return NGX_DECLINED;
    }

    mlcf = ngx_http_get_module_loc_conf(r, ngx_http_mirror_module);

    if (mlcf->mirror == NULL) {
        return NGX_DECLINED;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, ""mirror handler"");

    if (mlcf->request_body) {
        ctx = ngx_http_get_module_ctx(r, ngx_http_mirror_module);

        if (ctx) {
            return ctx->status;
        }

        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_mirror_ctx_t));
        if (ctx == NULL) {
            return NGX_ERROR;
        }

        ctx->status = NGX_DONE;

        ngx_http_set_ctx(r, ctx, ngx_http_mirror_module);

        rc = ngx_http_read_client_request_body(r, ngx_http_mirror_body_handler);
        if (rc >= NGX_HTTP_SPECIAL_RESPONSE) {
            return rc;
...",85.0,130.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5170,172580,ngx_http_mirror_body_handler,1,ngx_http_mirror_body_handler,void ngx_http_mirror_body_handler (ngx_http_request_t*),http\modules\ngx_http_mirror_module.c,"static void
ngx_http_mirror_body_handler(ngx_http_request_t *r)
{
    ngx_http_mirror_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_mirror_module);

    ctx->status = ngx_http_mirror_handler_internal(r);

    r->preserve_body = 1;

    r->write_event_handler = ngx_http_core_run_phases;
    ngx_http_core_run_phases(r);
}",133.0,146.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5171,172585,ngx_http_mirror_handler_internal,1,ngx_http_mirror_handler_internal,ngx_int_t ngx_http_mirror_handler_internal (ngx_http_request_t*),http\modules\ngx_http_mirror_module.c,"static ngx_int_t
ngx_http_mirror_handler_internal(ngx_http_request_t *r)
{
    ngx_str_t                   *name;
    ngx_uint_t                   i;
    ngx_http_request_t          *sr;
    ngx_http_mirror_loc_conf_t  *mlcf;

    mlcf = ngx_http_get_module_loc_conf(r, ngx_http_mirror_module);

    name = mlcf->mirror->elts;

    for (i = 0; i < mlcf->mirror->nelts; i++) {
        if (ngx_http_subrequest(r, &name[i], &r->args, &sr, NULL,
                                NGX_HTTP_SUBREQUEST_BACKGROUND)
            != NGX_OK)
        {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }

        sr->header_only = 1;
        sr->method = r->method;
        sr->method_name = r->method_name;
    }

    return NGX_DECLINED;
}",149.0,175.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5172,172590,ngx_http_mirror_create_loc_conf,1,ngx_http_mirror_create_loc_conf,void* ngx_http_mirror_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_mirror_module.c,"static void *
ngx_http_mirror_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_mirror_loc_conf_t  *mlcf;

    mlcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_mirror_loc_conf_t));
    if (mlcf == NULL) {
        return NULL;
    }

    mlcf->mirror = NGX_CONF_UNSET_PTR;
    mlcf->request_body = NGX_CONF_UNSET;

    return mlcf;
}",178.0,192.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5173,172595,ngx_http_mirror_merge_loc_conf,1,ngx_http_mirror_merge_loc_conf,"char* ngx_http_mirror_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_mirror_module.c,"static char *
ngx_http_mirror_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_mirror_loc_conf_t *prev = parent;
    ngx_http_mirror_loc_conf_t *conf = child;

    ngx_conf_merge_ptr_value(conf->mirror, prev->mirror, NULL);
    ngx_conf_merge_value(conf->request_body, prev->request_body, 1);

    return NGX_CONF_OK;
}",195.0,205.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5174,172602,ngx_http_mirror,1,ngx_http_mirror,"char* ngx_http_mirror (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_mirror_module.c,"static char *
ngx_http_mirror(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_mirror_loc_conf_t *mlcf = conf;

    ngx_str_t  *value, *s;

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        if (mlcf->mirror != NGX_CONF_UNSET_PTR) {
            return ""is duplicate"";
        }

        mlcf->mirror = NULL;
        return NGX_CONF_OK;
    }

    if (mlcf->mirror == NULL) {
        return ""is duplicate"";
    }

    if (mlcf->mirror == NGX_CONF_UNSET_PTR) {
        mlcf->mirror = ngx_array_create(cf->pool, 4, sizeof(ngx_str_t));
        if (mlcf->mirror == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    s = ngx_array_push(mlcf->mirror);
    if (s == NULL) {
        return NGX_CONF_ERROR;
    }

    *s = value[1];

    return NGX_CONF_OK;
}",208.0,245.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5175,172609,ngx_http_mirror_init,1,ngx_http_mirror_init,ngx_int_t ngx_http_mirror_init (ngx_conf_t*),http\modules\ngx_http_mirror_module.c,"static ngx_int_t
ngx_http_mirror_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_PRECONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_mirror_handler;

    return NGX_OK;
}",248.0,264.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5176,173231,handler,1,ngx_http_mp4_atom_handler_t.handler,"ngx_int_t ngx_http_mp4_atom_handler_t.handler (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"ngx_int_t           (*handler)(ngx_http_mp4_file_t *mp4,
                                   uint64_t atom_data_size);",161.0,162.0,25.0,59.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5177,173238,ngx_http_mp4_handler,1,ngx_http_mp4_handler,ngx_int_t ngx_http_mp4_handler (ngx_http_request_t*),http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_handler(ngx_http_request_t *r)
{
    u_char                    *last;
    size_t                     root;
    ngx_int_t                  rc, start, end;
    ngx_uint_t                 level, length;
    ngx_str_t                  path, value;
    ngx_log_t                 *log;
    ngx_buf_t                 *b;
    ngx_chain_t                out;
    ngx_http_mp4_file_t       *mp4;
    ngx_open_file_info_t       of;
    ngx_http_core_loc_conf_t  *clcf;

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
        return NGX_HTTP_NOT_ALLOWED;
    }

    if (r->uri.data[r->uri.len - 1] == '/') {
        return NGX_DECLINED;
    }

    rc = ngx_http_discard_request_body(r);

    if (rc != NGX_OK) {
        return rc;
    }

    last = ngx_http_map_uri_to_path(r, &path, &root, 0);
    if (last == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    log = r->connection->log;

    path.len = last - path.data;

    ngx_log_debug1(NGX_LOG_DEBUG_...",426.0,677.0,1.0,1.0,252.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5178,173243,ngx_http_mp4_atofp,1,ngx_http_mp4_atofp,"ngx_int_t ngx_http_mp4_atofp (u_char*,size_t,size_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_atofp(u_char *line, size_t n, size_t point)
{
    ngx_int_t   value, cutoff, cutlim;
    ngx_uint_t  dot;

    /* same as ngx_atofp(), but allows additional digits */

    if (n == 0) {
        return NGX_ERROR;
    }

    cutoff = NGX_MAX_INT_T_VALUE / 10;
    cutlim = NGX_MAX_INT_T_VALUE % 10;

    dot = 0;

    for (value = 0; n--; line++) {

        if (*line == '.') {
            if (dot) {
                return NGX_ERROR;
            }

            dot = 1;
            continue;
        }

        if (*line < '0' || *line > '9') {
            return NGX_ERROR;
        }

        if (point == 0) {
            continue;
        }

        if (value >= cutoff && (value > cutoff || *line - '0' > cutlim)) {
            return NGX_ERROR;
        }

        value = value * 10 + (*line - '0');
        point -= dot;
    }

    while (point--) {
        if (value > cutoff) {
            return NGX_ERROR;
        }

        value = value * 10;
    }

    re...",680.0,733.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5179,173250,ngx_http_mp4_process,1,ngx_http_mp4_process,ngx_int_t ngx_http_mp4_process (ngx_http_mp4_file_t*),http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_process(ngx_http_mp4_file_t *mp4)
{
    off_t                  start_offset, end_offset, adjustment;
    ngx_int_t              rc;
    ngx_uint_t             i, j;
    ngx_chain_t          **prev;
    ngx_http_mp4_trak_t   *trak;
    ngx_http_mp4_conf_t   *conf;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 start:%ui, length:%ui"", mp4->start, mp4->length);

    conf = ngx_http_get_module_loc_conf(mp4->request, ngx_http_mp4_module);

    mp4->buffer_size = conf->buffer_size;

    rc = ngx_http_mp4_read_atom(mp4, ngx_http_mp4_atoms, mp4->end);
    if (rc != NGX_OK) {
        return rc;
    }

    if (mp4->trak.nelts == 0) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""no mp4 trak atoms were found in \""%s\"""",
                      mp4->file.name.data);
        return NGX_ERROR;
    }

    if (mp4->mdat_atom.buf == NULL) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
               ...",736.0,887.0,1.0,24.0,152.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5180,173255,ngx_http_mp4_read_atom,1,ngx_http_mp4_read_atom,"ngx_int_t ngx_http_mp4_read_atom (ngx_http_mp4_file_t*,ngx_http_mp4_atom_handler_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_atom_handler_t *atom, uint64_t atom_data_size)
{
    off_t        end;
    size_t       atom_header_size;
    u_char      *atom_header, *atom_name;
    uint64_t     atom_size;
    ngx_int_t    rc;
    ngx_uint_t   n;

    end = mp4->offset + atom_data_size;

    while (mp4->offset < end) {

        if (ngx_http_mp4_read(mp4, sizeof(uint32_t)) != NGX_OK) {
            return NGX_ERROR;
        }

        atom_header = mp4->buffer_pos;
        atom_size = ngx_mp4_get_32value(atom_header);
        atom_header_size = sizeof(ngx_mp4_atom_header_t);

        if (atom_size == 0) {
            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                           ""mp4 atom end"");
            return NGX_OK;
        }

        if (atom_size < sizeof(ngx_mp4_atom_header_t)) {

            if (atom_size == 1) {

                if (ngx_http_mp4_read(mp4, sizeof(ngx_mp4_atom_header64_t))
                 ...",902.0,1003.0,1.0,20.0,102.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5181,173262,ngx_http_mp4_read,1,ngx_http_mp4_read,"ngx_int_t ngx_http_mp4_read (ngx_http_mp4_file_t*,size_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read(ngx_http_mp4_file_t *mp4, size_t size)
{
    ssize_t  n;

    if (mp4->buffer_pos + size <= mp4->buffer_end) {
        return NGX_OK;
    }

    if (mp4->offset + (off_t) mp4->buffer_size > mp4->end) {
        mp4->buffer_size = (size_t) (mp4->end - mp4->offset);
    }

    if (mp4->buffer_size < size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 file truncated"", mp4->file.name.data);
        return NGX_ERROR;
    }

    if (mp4->buffer == NULL) {
        mp4->buffer = ngx_palloc(mp4->request->pool, mp4->buffer_size);
        if (mp4->buffer == NULL) {
            return NGX_ERROR;
        }

        mp4->buffer_start = mp4->buffer;
    }

    n = ngx_read_file(&mp4->file, mp4->buffer_start, mp4->buffer_size,
                      mp4->offset);

    if (n == NGX_ERROR) {
        return NGX_ERROR;
    }

    if ((size_t) n != mp4->buffer_size) {
        ngx_log_error(NGX_LOG_CRIT, mp4->file.log, 0,
       ...",1006.0,1052.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5182,173268,ngx_http_mp4_read_ftyp_atom,1,ngx_http_mp4_read_ftyp_atom,"ngx_int_t ngx_http_mp4_read_ftyp_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_ftyp_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char     *ftyp_atom;
    size_t      atom_size;
    ngx_buf_t  *atom;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 ftyp atom"");

    if (atom_data_size > 1024
        || ngx_mp4_atom_data(mp4) + (size_t) atom_data_size > mp4->buffer_end)
    {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 ftyp atom is too large:%uL"",
                      mp4->file.name.data, atom_data_size);
        return NGX_ERROR;
    }

    atom_size = sizeof(ngx_mp4_atom_header_t) + (size_t) atom_data_size;

    ftyp_atom = ngx_palloc(mp4->request->pool, atom_size);
    if (ftyp_atom == NULL) {
        return NGX_ERROR;
    }

    ngx_mp4_set_32value(ftyp_atom, atom_size);
    ngx_mp4_set_atom_name(ftyp_atom, 'f', 't', 'y', 'p');

    /*
     * only moov atom content is guaranteed to be in mp4->buffer
     * during sending response, so ftyp atom cont...",1055.0,1102.0,1.0,11.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5183,173274,ngx_http_mp4_read_moov_atom,1,ngx_http_mp4_read_moov_atom,"ngx_int_t ngx_http_mp4_read_moov_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_moov_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    ngx_int_t             rc;
    ngx_uint_t            no_mdat;
    ngx_buf_t            *atom;
    ngx_http_mp4_conf_t  *conf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 moov atom"");

    no_mdat = (mp4->mdat_atom.buf == NULL);

    if (no_mdat && mp4->start == 0 && mp4->length == 0) {
        /*
         * send original file if moov atom resides before
         * mdat atom and client requests integral file
         */
        return NGX_DECLINED;
    }

    conf = ngx_http_get_module_loc_conf(mp4->request, ngx_http_mp4_module);

    if (atom_data_size > mp4->buffer_size) {

        if (atom_data_size > conf->max_buffer_size) {
            ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                          ""\""%s\"" mp4 moov atom is too large:%uL, ""
                          ""you may want to increase mp4_max_buffer_size"",
                          mp4->file.name.d...",1111.0,1188.0,1.0,27.0,78.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5184,173280,ngx_http_mp4_read_mdat_atom,1,ngx_http_mp4_read_mdat_atom,"ngx_int_t ngx_http_mp4_read_mdat_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_mdat_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    ngx_buf_t  *data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 mdat atom"");

    data = &mp4->mdat_data_buf;
    data->file = &mp4->file;
    data->in_file = 1;
    data->last_buf = (mp4->request == mp4->request->main) ? 1 : 0;
    data->last_in_chain = 1;
    data->file_last = mp4->offset + atom_data_size;

    mp4->mdat_atom.buf = &mp4->mdat_atom_buf;
    mp4->mdat_atom.next = &mp4->mdat_data;
    mp4->mdat_data.buf = data;

    if (mp4->trak.nelts) {
        /* skip atoms after mdat atom */
        mp4->offset = mp4->end;

    } else {
        ngx_mp4_atom_next(mp4, atom_data_size);
    }

    return NGX_OK;
}",1191.0,1218.0,1.0,8.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5185,173286,ngx_http_mp4_update_mdat_atom,1,ngx_http_mp4_update_mdat_atom,"size_t ngx_http_mp4_update_mdat_atom (ngx_http_mp4_file_t*,off_t,off_t)",http\modules\ngx_http_mp4_module.c,"static size_t
ngx_http_mp4_update_mdat_atom(ngx_http_mp4_file_t *mp4, off_t start_offset,
    off_t end_offset)
{
    off_t       atom_data_size;
    u_char     *atom_header;
    uint32_t    atom_header_size;
    uint64_t    atom_size;
    ngx_buf_t  *atom;

    atom_data_size = end_offset - start_offset;
    mp4->mdat_data.buf->file_pos = start_offset;
    mp4->mdat_data.buf->file_last = end_offset;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mdat new offset @%O:%O"", start_offset, atom_data_size);

    atom_header = mp4->mdat_atom_header;

    if ((uint64_t) atom_data_size
        > (uint64_t) 0xffffffff - sizeof(ngx_mp4_atom_header_t))
    {
        atom_size = 1;
        atom_header_size = sizeof(ngx_mp4_atom_header64_t);
        ngx_mp4_set_64value(atom_header + sizeof(ngx_mp4_atom_header_t),
                            sizeof(ngx_mp4_atom_header64_t) + atom_data_size);
    } else {
        atom_size = sizeof(ngx_mp4_atom_header_t) + atom_data_s...",1221.0,1263.0,1.0,8.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,size_t
5186,173293,ngx_http_mp4_read_mvhd_atom,1,ngx_http_mp4_read_mvhd_atom,"ngx_int_t ngx_http_mp4_read_mvhd_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_mvhd_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char                 *atom_header;
    size_t                  atom_size;
    uint32_t                timescale;
    uint64_t                duration, start_time, length_time;
    ngx_buf_t              *atom;
    ngx_mp4_mvhd_atom_t    *mvhd_atom;
    ngx_mp4_mvhd64_atom_t  *mvhd64_atom;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 mvhd atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    mvhd_atom = (ngx_mp4_mvhd_atom_t *) atom_header;
    mvhd64_atom = (ngx_mp4_mvhd64_atom_t *) atom_header;
    ngx_mp4_set_atom_name(atom_header, 'm', 'v', 'h', 'd');

    if (ngx_mp4_atom_data_size(ngx_mp4_mvhd_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 mvhd atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    if (mvhd_atom->version[0] == 0) {
        /* version 0: 32-bit duration...",1311.0,1403.0,1.0,18.0,93.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5187,173299,ngx_http_mp4_read_trak_atom,1,ngx_http_mp4_read_trak_atom,"ngx_int_t ngx_http_mp4_read_trak_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_trak_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header, *atom_end;
    off_t                 atom_file_end;
    ngx_int_t             rc;
    ngx_buf_t            *atom;
    ngx_http_mp4_trak_t  *trak;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 trak atom"");

    trak = ngx_array_push(&mp4->trak);
    if (trak == NULL) {
        return NGX_ERROR;
    }

    ngx_memzero(trak, sizeof(ngx_http_mp4_trak_t));

    atom_header = ngx_mp4_atom_header(mp4);
    ngx_mp4_set_atom_name(atom_header, 't', 'r', 'a', 'k');

    atom = &trak->trak_atom_buf;
    atom->temporary = 1;
    atom->pos = atom_header;
    atom->last = atom_header + sizeof(ngx_mp4_atom_header_t);

    trak->out[NGX_HTTP_MP4_TRAK_ATOM].buf = atom;

    atom_end = mp4->buffer_pos + (size_t) atom_data_size;
    atom_file_end = mp4->offset + atom_data_size;

    rc = ngx_http_mp4_read_atom(mp4, ngx_http_mp4_trak_atoms, atom_data_s...",1406.0,1452.0,1.0,18.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5188,173305,ngx_http_mp4_update_trak_atom,1,ngx_http_mp4_update_trak_atom,"void ngx_http_mp4_update_trak_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_update_trak_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    ngx_buf_t  *atom;

    trak->size += sizeof(ngx_mp4_atom_header_t);
    atom = &trak->trak_atom_buf;
    ngx_mp4_set_32value(atom->pos, trak->size);
}",1455.0,1464.0,1.0,4.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5189,173311,ngx_http_mp4_read_cmov_atom,1,ngx_http_mp4_read_cmov_atom,"ngx_int_t ngx_http_mp4_read_cmov_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_cmov_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                  ""\""%s\"" mp4 compressed moov atom (cmov) is not supported"",
                  mp4->file.name.data);

    return NGX_ERROR;
}",1467.0,1475.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5190,173317,ngx_http_mp4_read_tkhd_atom,1,ngx_http_mp4_read_tkhd_atom,"ngx_int_t ngx_http_mp4_read_tkhd_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_tkhd_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char                 *atom_header;
    size_t                  atom_size;
    uint64_t                duration, start_time, length_time;
    ngx_buf_t              *atom;
    ngx_http_mp4_trak_t    *trak;
    ngx_mp4_tkhd_atom_t    *tkhd_atom;
    ngx_mp4_tkhd64_atom_t  *tkhd64_atom;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 tkhd atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    tkhd_atom = (ngx_mp4_tkhd_atom_t *) atom_header;
    tkhd64_atom = (ngx_mp4_tkhd64_atom_t *) atom_header;
    ngx_mp4_set_atom_name(tkhd_atom, 't', 'k', 'h', 'd');

    if (ngx_mp4_atom_data_size(ngx_mp4_tkhd_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 tkhd atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    if (tkhd_atom->version[0] == 0) {
        /* version 0: 32-bit duration */
   ...",1519.0,1610.0,1.0,18.0,92.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5191,173323,ngx_http_mp4_read_mdia_atom,1,ngx_http_mp4_read_mdia_atom,"ngx_int_t ngx_http_mp4_read_mdia_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_mdia_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header;
    ngx_buf_t            *atom;
    ngx_http_mp4_trak_t  *trak;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""process mdia atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    ngx_mp4_set_atom_name(atom_header, 'm', 'd', 'i', 'a');

    trak = ngx_mp4_last_trak(mp4);

    atom = &trak->mdia_atom_buf;
    atom->temporary = 1;
    atom->pos = atom_header;
    atom->last = atom_header + sizeof(ngx_mp4_atom_header_t);

    trak->out[NGX_HTTP_MP4_MDIA_ATOM].buf = atom;

    return ngx_http_mp4_read_atom(mp4, ngx_http_mp4_mdia_atoms, atom_data_size);
}",1613.0,1635.0,1.0,18.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5192,173329,ngx_http_mp4_update_mdia_atom,1,ngx_http_mp4_update_mdia_atom,"void ngx_http_mp4_update_mdia_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_update_mdia_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    ngx_buf_t  *atom;

    trak->size += sizeof(ngx_mp4_atom_header_t);
    atom = &trak->mdia_atom_buf;
    ngx_mp4_set_32value(atom->pos, trak->size);
}",1638.0,1647.0,1.0,4.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5193,173335,ngx_http_mp4_read_mdhd_atom,1,ngx_http_mp4_read_mdhd_atom,"ngx_int_t ngx_http_mp4_read_mdhd_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_mdhd_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char                 *atom_header;
    size_t                  atom_size;
    uint32_t                timescale;
    uint64_t                duration, start_time, length_time;
    ngx_buf_t              *atom;
    ngx_http_mp4_trak_t    *trak;
    ngx_mp4_mdhd_atom_t    *mdhd_atom;
    ngx_mp4_mdhd64_atom_t  *mdhd64_atom;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 mdhd atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    mdhd_atom = (ngx_mp4_mdhd_atom_t *) atom_header;
    mdhd64_atom = (ngx_mp4_mdhd64_atom_t *) atom_header;
    ngx_mp4_set_atom_name(mdhd_atom, 'm', 'd', 'h', 'd');

    if (ngx_mp4_atom_data_size(ngx_mp4_mdhd_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 mdhd atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    if (mdhd_atom->version[0] == 0) {
     ...",1677.0,1772.0,1.0,18.0,96.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5194,173341,ngx_http_mp4_read_hdlr_atom,1,ngx_http_mp4_read_hdlr_atom,"ngx_int_t ngx_http_mp4_read_hdlr_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_hdlr_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char              *atom_header;
    size_t               atom_size;
    ngx_buf_t            *atom;
    ngx_http_mp4_trak_t  *trak;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 hdlr atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    atom_size = sizeof(ngx_mp4_atom_header_t) + (size_t) atom_data_size;
    ngx_mp4_set_32value(atom_header, atom_size);
    ngx_mp4_set_atom_name(atom_header, 'h', 'd', 'l', 'r');

    trak = ngx_mp4_last_trak(mp4);

    atom = &trak->hdlr_atom_buf;
    atom->temporary = 1;
    atom->pos = atom_header;
    atom->last = atom_header + atom_size;

    trak->hdlr_size = atom_size;
    trak->out[NGX_HTTP_MP4_HDLR_ATOM].buf = atom;

    ngx_mp4_atom_next(mp4, atom_data_size);

    return NGX_OK;
}",1775.0,1803.0,1.0,18.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5195,173347,ngx_http_mp4_read_minf_atom,1,ngx_http_mp4_read_minf_atom,"ngx_int_t ngx_http_mp4_read_minf_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_minf_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header;
    ngx_buf_t            *atom;
    ngx_http_mp4_trak_t  *trak;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""process minf atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    ngx_mp4_set_atom_name(atom_header, 'm', 'i', 'n', 'f');

    trak = ngx_mp4_last_trak(mp4);

    atom = &trak->minf_atom_buf;
    atom->temporary = 1;
    atom->pos = atom_header;
    atom->last = atom_header + sizeof(ngx_mp4_atom_header_t);

    trak->out[NGX_HTTP_MP4_MINF_ATOM].buf = atom;

    return ngx_http_mp4_read_atom(mp4, ngx_http_mp4_minf_atoms, atom_data_size);
}",1806.0,1828.0,1.0,18.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5196,173353,ngx_http_mp4_update_minf_atom,1,ngx_http_mp4_update_minf_atom,"void ngx_http_mp4_update_minf_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_update_minf_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    ngx_buf_t  *atom;

    trak->size += sizeof(ngx_mp4_atom_header_t)
               + trak->vmhd_size
               + trak->smhd_size
               + trak->dinf_size;
    atom = &trak->minf_atom_buf;
    ngx_mp4_set_32value(atom->pos, trak->size);
}",1831.0,1843.0,1.0,4.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5197,173359,ngx_http_mp4_read_dinf_atom,1,ngx_http_mp4_read_dinf_atom,"ngx_int_t ngx_http_mp4_read_dinf_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_dinf_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char              *atom_header;
    size_t               atom_size;
    ngx_buf_t            *atom;
    ngx_http_mp4_trak_t  *trak;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 dinf atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    atom_size = sizeof(ngx_mp4_atom_header_t) + (size_t) atom_data_size;
    ngx_mp4_set_32value(atom_header, atom_size);
    ngx_mp4_set_atom_name(atom_header, 'd', 'i', 'n', 'f');

    trak = ngx_mp4_last_trak(mp4);

    atom = &trak->dinf_atom_buf;
    atom->temporary = 1;
    atom->pos = atom_header;
    atom->last = atom_header + atom_size;

    trak->dinf_size += atom_size;
    trak->out[NGX_HTTP_MP4_DINF_ATOM].buf = atom;

    ngx_mp4_atom_next(mp4, atom_data_size);

    return NGX_OK;
}",1908.0,1936.0,1.0,18.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5198,173365,ngx_http_mp4_read_vmhd_atom,1,ngx_http_mp4_read_vmhd_atom,"ngx_int_t ngx_http_mp4_read_vmhd_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_vmhd_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char              *atom_header;
    size_t               atom_size;
    ngx_buf_t            *atom;
    ngx_http_mp4_trak_t  *trak;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 vmhd atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    atom_size = sizeof(ngx_mp4_atom_header_t) + (size_t) atom_data_size;
    ngx_mp4_set_32value(atom_header, atom_size);
    ngx_mp4_set_atom_name(atom_header, 'v', 'm', 'h', 'd');

    trak = ngx_mp4_last_trak(mp4);

    atom = &trak->vmhd_atom_buf;
    atom->temporary = 1;
    atom->pos = atom_header;
    atom->last = atom_header + atom_size;

    trak->vmhd_size += atom_size;
    trak->out[NGX_HTTP_MP4_VMHD_ATOM].buf = atom;

    ngx_mp4_atom_next(mp4, atom_data_size);

    return NGX_OK;
}",1846.0,1874.0,1.0,18.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5199,173371,ngx_http_mp4_read_smhd_atom,1,ngx_http_mp4_read_smhd_atom,"ngx_int_t ngx_http_mp4_read_smhd_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_smhd_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char              *atom_header;
    size_t               atom_size;
    ngx_buf_t            *atom;
    ngx_http_mp4_trak_t  *trak;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 smhd atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    atom_size = sizeof(ngx_mp4_atom_header_t) + (size_t) atom_data_size;
    ngx_mp4_set_32value(atom_header, atom_size);
    ngx_mp4_set_atom_name(atom_header, 's', 'm', 'h', 'd');

    trak = ngx_mp4_last_trak(mp4);

    atom = &trak->smhd_atom_buf;
    atom->temporary = 1;
    atom->pos = atom_header;
    atom->last = atom_header + atom_size;

    trak->smhd_size += atom_size;
    trak->out[NGX_HTTP_MP4_SMHD_ATOM].buf = atom;

    ngx_mp4_atom_next(mp4, atom_data_size);

    return NGX_OK;
}",1877.0,1905.0,1.0,18.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5200,173377,ngx_http_mp4_read_stbl_atom,1,ngx_http_mp4_read_stbl_atom,"ngx_int_t ngx_http_mp4_read_stbl_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_stbl_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header;
    ngx_buf_t            *atom;
    ngx_http_mp4_trak_t  *trak;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""process stbl atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    ngx_mp4_set_atom_name(atom_header, 's', 't', 'b', 'l');

    trak = ngx_mp4_last_trak(mp4);

    atom = &trak->stbl_atom_buf;
    atom->temporary = 1;
    atom->pos = atom_header;
    atom->last = atom_header + sizeof(ngx_mp4_atom_header_t);

    trak->out[NGX_HTTP_MP4_STBL_ATOM].buf = atom;

    return ngx_http_mp4_read_atom(mp4, ngx_http_mp4_stbl_atoms, atom_data_size);
}",1939.0,1961.0,1.0,18.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5201,173383,ngx_http_mp4_update_stbl_atom,1,ngx_http_mp4_update_stbl_atom,"void ngx_http_mp4_update_stbl_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_update_stbl_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    ngx_buf_t  *atom;

    trak->size += sizeof(ngx_mp4_atom_header_t);
    atom = &trak->stbl_atom_buf;
    ngx_mp4_set_32value(atom->pos, trak->size);
}",1964.0,1973.0,1.0,4.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5202,173389,ngx_http_mp4_read_stsd_atom,1,ngx_http_mp4_read_stsd_atom,"ngx_int_t ngx_http_mp4_read_stsd_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_stsd_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header, *atom_table;
    size_t                atom_size;
    ngx_buf_t            *atom;
    ngx_mp4_stsd_atom_t  *stsd_atom;
    ngx_http_mp4_trak_t  *trak;

    /* sample description atom */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 stsd atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    stsd_atom = (ngx_mp4_stsd_atom_t *) atom_header;
    atom_size = sizeof(ngx_mp4_atom_header_t) + (size_t) atom_data_size;
    atom_table = atom_header + atom_size;
    ngx_mp4_set_32value(stsd_atom->size, atom_size);
    ngx_mp4_set_atom_name(stsd_atom, 's', 't', 's', 'd');

    if (ngx_mp4_atom_data_size(ngx_mp4_stsd_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 stsd atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP...",1988.0,2032.0,1.0,18.0,45.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5203,173395,ngx_http_mp4_read_stts_atom,1,ngx_http_mp4_read_stts_atom,"ngx_int_t ngx_http_mp4_read_stts_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_stts_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header, *atom_table, *atom_end;
    uint32_t              entries;
    ngx_buf_t            *atom, *data;
    ngx_mp4_stts_atom_t  *stts_atom;
    ngx_http_mp4_trak_t  *trak;

    /* time-to-sample atom */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 stts atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    stts_atom = (ngx_mp4_stts_atom_t *) atom_header;
    ngx_mp4_set_atom_name(stts_atom, 's', 't', 't', 's');

    if (ngx_mp4_atom_data_size(ngx_mp4_stts_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 stts atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    entries = ngx_mp4_get_32value(stts_atom->entries);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 time-to-sample entries:%uD"", entries);

    if (ngx_mp4_...",2049.0,2107.0,1.0,18.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5204,173401,ngx_http_mp4_update_stts_atom,1,ngx_http_mp4_update_stts_atom,"ngx_int_t ngx_http_mp4_update_stts_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_update_stts_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    size_t                atom_size;
    ngx_buf_t            *atom, *data;
    ngx_mp4_stts_atom_t  *stts_atom;

    /*
     * mdia.minf.stbl.stts updating requires trak->timescale
     * from mdia.mdhd atom which may reside after mdia.minf
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 stts atom update"");

    data = trak->out[NGX_HTTP_MP4_STTS_DATA].buf;

    if (data == NULL) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""no mp4 stts atoms were found in \""%s\"""",
                      mp4->file.name.data);
        return NGX_ERROR;
    }

    if (ngx_http_mp4_crop_stts_data(mp4, trak, 1) != NGX_OK) {
        return NGX_ERROR;
    }

    if (ngx_http_mp4_crop_stts_data(mp4, trak, 0) != NGX_OK) {
        return NGX_ERROR;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""...",2110.0,2155.0,1.0,21.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5205,173407,ngx_http_mp4_crop_stts_data,1,ngx_http_mp4_crop_stts_data,"ngx_int_t ngx_http_mp4_crop_stts_data (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*,ngx_uint_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_crop_stts_data(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak, ngx_uint_t start)
{
    uint32_t               count, duration, rest;
    uint64_t               start_time;
    ngx_buf_t             *data;
    ngx_uint_t             start_sample, entries, start_sec;
    ngx_mp4_stts_entry_t  *entry, *end;

    if (start) {
        start_sec = mp4->start;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                       ""mp4 stts crop start_time:%ui"", start_sec);

    } else if (mp4->length) {
        start_sec = mp4->length;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                       ""mp4 stts crop end_time:%ui"", start_sec);

    } else {
        return NGX_OK;
    }

    data = trak->out[NGX_HTTP_MP4_STTS_DATA].buf;

    start_time = (uint64_t) start_sec * trak->timescale / 1000;

    entries = trak->time_to_sample_entries;
    start_sample = 0;
    entry = (ngx_mp4_stts_entry_t *) data->pos;
    end ...",2158.0,2253.0,1.0,21.0,96.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5206,173414,ngx_http_mp4_read_stss_atom,1,ngx_http_mp4_read_stss_atom,"ngx_int_t ngx_http_mp4_read_stss_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_stss_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char                    *atom_header, *atom_table, *atom_end;
    uint32_t                   entries;
    ngx_buf_t                 *atom, *data;
    ngx_http_mp4_trak_t       *trak;
    ngx_http_mp4_stss_atom_t  *stss_atom;

    /* sync samples atom */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 stss atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    stss_atom = (ngx_http_mp4_stss_atom_t *) atom_header;
    ngx_mp4_set_atom_name(stss_atom, 's', 't', 's', 's');

    if (ngx_mp4_atom_data_size(ngx_http_mp4_stss_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 stss atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    entries = ngx_mp4_get_32value(stss_atom->entries);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""sync sample entries:%uD"", e...",2265.0,2324.0,1.0,18.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5207,173420,ngx_http_mp4_update_stss_atom,1,ngx_http_mp4_update_stss_atom,"ngx_int_t ngx_http_mp4_update_stss_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_update_stss_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    size_t                     atom_size;
    uint32_t                   sample, start_sample, *entry, *end;
    ngx_buf_t                 *atom, *data;
    ngx_http_mp4_stss_atom_t  *stss_atom;

    /*
     * mdia.minf.stbl.stss updating requires trak->start_sample
     * from mdia.minf.stbl.stts which depends on value from mdia.mdhd
     * atom which may reside after mdia.minf
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 stss atom update"");

    data = trak->out[NGX_HTTP_MP4_STSS_DATA].buf;

    if (data == NULL) {
        return NGX_OK;
    }

    ngx_http_mp4_crop_stss_data(mp4, trak, 1);
    ngx_http_mp4_crop_stss_data(mp4, trak, 0);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""sync sample entries:%uD"", trak->sync_samples_entries);

    if (trak->sync_samples_entries) {
        entry = (uint32_t *...",2327.0,2384.0,1.0,21.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5208,173426,ngx_http_mp4_crop_stss_data,1,ngx_http_mp4_crop_stss_data,"void ngx_http_mp4_crop_stss_data (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*,ngx_uint_t)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_crop_stss_data(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak, ngx_uint_t start)
{
    uint32_t     sample, start_sample, *entry, *end;
    ngx_buf_t   *data;
    ngx_uint_t   entries;

    /* sync samples starts from 1 */

    if (start) {
        start_sample = trak->start_sample + 1;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                       ""mp4 stss crop start_sample:%uD"", start_sample);

    } else if (mp4->length) {
        start_sample = trak->end_sample + 1;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                       ""mp4 stss crop end_sample:%uD"", start_sample);

    } else {
        return;
    }

    data = trak->out[NGX_HTTP_MP4_STSS_DATA].buf;

    entries = trak->sync_samples_entries;
    entry = (uint32_t *) data->pos;
    end = (uint32_t *) data->last;

    while (entry < end) {
        sample = ngx_mp4_get_32value(entry);

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0...",2387.0,2446.0,1.0,21.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5209,173433,ngx_http_mp4_read_ctts_atom,1,ngx_http_mp4_read_ctts_atom,"ngx_int_t ngx_http_mp4_read_ctts_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_ctts_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header, *atom_table, *atom_end;
    uint32_t              entries;
    ngx_buf_t            *atom, *data;
    ngx_mp4_ctts_atom_t  *ctts_atom;
    ngx_http_mp4_trak_t  *trak;

    /* composition offsets atom */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 ctts atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    ctts_atom = (ngx_mp4_ctts_atom_t *) atom_header;
    ngx_mp4_set_atom_name(ctts_atom, 'c', 't', 't', 's');

    if (ngx_mp4_atom_data_size(ngx_mp4_ctts_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 ctts atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    entries = ngx_mp4_get_32value(ctts_atom->entries);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""composition offset entries:%uD"", entries);

    trak = ...",2463.0,2522.0,1.0,18.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5210,173439,ngx_http_mp4_update_ctts_atom,1,ngx_http_mp4_update_ctts_atom,"void ngx_http_mp4_update_ctts_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_update_ctts_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    size_t                atom_size;
    ngx_buf_t            *atom, *data;
    ngx_mp4_ctts_atom_t  *ctts_atom;

    /*
     * mdia.minf.stbl.ctts updating requires trak->start_sample
     * from mdia.minf.stbl.stts which depends on value from mdia.mdhd
     * atom which may reside after mdia.minf
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 ctts atom update"");

    data = trak->out[NGX_HTTP_MP4_CTTS_DATA].buf;

    if (data == NULL) {
        return;
    }

    ngx_http_mp4_crop_ctts_data(mp4, trak, 1);
    ngx_http_mp4_crop_ctts_data(mp4, trak, 0);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""composition offset entries:%uD"",
                   trak->composition_offset_entries);

    if (trak->composition_offset_entries == 0) {
        trak->out[NGX_HTTP_MP4_CTTS_ATOM].buf = NULL;
        trak->out[NGX_HT...",2525.0,2571.0,1.0,21.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5211,173445,ngx_http_mp4_crop_ctts_data,1,ngx_http_mp4_crop_ctts_data,"void ngx_http_mp4_crop_ctts_data (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*,ngx_uint_t)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_crop_ctts_data(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak, ngx_uint_t start)
{
    uint32_t               count, start_sample, rest;
    ngx_buf_t             *data;
    ngx_uint_t             entries;
    ngx_mp4_ctts_entry_t  *entry, *end;

    /* sync samples starts from 1 */

    if (start) {
        start_sample = trak->start_sample + 1;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                       ""mp4 ctts crop start_sample:%uD"", start_sample);

    } else if (mp4->length) {
        start_sample = trak->end_sample - trak->start_sample + 1;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                       ""mp4 ctts crop end_sample:%uD"", start_sample);

    } else {
        return;
    }

    data = trak->out[NGX_HTTP_MP4_CTTS_DATA].buf;

    entries = trak->composition_offset_entries;
    entry = (ngx_mp4_ctts_entry_t *) data->pos;
    end = (ngx_mp4_ctts_entry_t *) data->last;

    while (entry < ...",2574.0,2643.0,1.0,21.0,70.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5212,173452,ngx_http_mp4_read_stsc_atom,1,ngx_http_mp4_read_stsc_atom,"ngx_int_t ngx_http_mp4_read_stsc_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_stsc_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header, *atom_table, *atom_end;
    uint32_t              entries;
    ngx_buf_t            *atom, *data;
    ngx_mp4_stsc_atom_t  *stsc_atom;
    ngx_http_mp4_trak_t  *trak;

    /* sample-to-chunk atom */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 stsc atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    stsc_atom = (ngx_mp4_stsc_atom_t *) atom_header;
    ngx_mp4_set_atom_name(stsc_atom, 's', 't', 's', 'c');

    if (ngx_mp4_atom_data_size(ngx_mp4_stsc_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 stsc atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    entries = ngx_mp4_get_32value(stsc_atom->entries);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""sample-to-chunk entries:%uD"", entries);

    if (ngx_mp4_at...",2655.0,2713.0,1.0,18.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5213,173458,ngx_http_mp4_update_stsc_atom,1,ngx_http_mp4_update_stsc_atom,"ngx_int_t ngx_http_mp4_update_stsc_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_update_stsc_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    size_t                 atom_size;
    uint32_t               chunk;
    ngx_buf_t             *atom, *data;
    ngx_mp4_stsc_atom_t   *stsc_atom;
    ngx_mp4_stsc_entry_t  *entry, *end;

    /*
     * mdia.minf.stbl.stsc updating requires trak->start_sample
     * from mdia.minf.stbl.stts which depends on value from mdia.mdhd
     * atom which may reside after mdia.minf
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 stsc atom update"");

    data = trak->out[NGX_HTTP_MP4_STSC_DATA].buf;

    if (data == NULL) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""no mp4 stsc atoms were found in \""%s\"""",
                      mp4->file.name.data);
        return NGX_ERROR;
    }

    if (trak->sample_to_chunk_entries == 0) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""zero number ...",2716.0,2785.0,1.0,21.0,70.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5214,173464,ngx_http_mp4_crop_stsc_data,1,ngx_http_mp4_crop_stsc_data,"ngx_int_t ngx_http_mp4_crop_stsc_data (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*,ngx_uint_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_crop_stsc_data(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak, ngx_uint_t start)
{
    uint32_t               start_sample, chunk, samples, id, next_chunk, n,
                           prev_samples;
    ngx_buf_t             *data, *buf;
    ngx_uint_t             entries, target_chunk, chunk_samples;
    ngx_mp4_stsc_entry_t  *entry, *end, *first;

    entries = trak->sample_to_chunk_entries - 1;

    if (start) {
        start_sample = (uint32_t) trak->start_sample;

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                       ""mp4 stsc crop start_sample:%uD"", start_sample);

    } else if (mp4->length) {
        start_sample = (uint32_t) (trak->end_sample - trak->start_sample);
        samples = 0;

        data = trak->out[NGX_HTTP_MP4_STSC_START].buf;

        if (data) {
            entry = (ngx_mp4_stsc_entry_t *) data->pos;
            samples = ngx_mp4_get_32value(entry->samples);
            entries--;

       ...",2788.0,2983.0,1.0,25.0,196.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5215,173471,ngx_http_mp4_read_stsz_atom,1,ngx_http_mp4_read_stsz_atom,"ngx_int_t ngx_http_mp4_read_stsz_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_stsz_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header, *atom_table, *atom_end;
    size_t                atom_size;
    uint32_t              entries, size;
    ngx_buf_t            *atom, *data;
    ngx_mp4_stsz_atom_t  *stsz_atom;
    ngx_http_mp4_trak_t  *trak;

    /* sample sizes atom */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 stsz atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    stsz_atom = (ngx_mp4_stsz_atom_t *) atom_header;
    ngx_mp4_set_atom_name(stsz_atom, 's', 't', 's', 'z');

    if (ngx_mp4_atom_data_size(ngx_mp4_stsz_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 stsz atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    size = ngx_mp4_get_32value(stsz_atom->uniform_size);
    entries = ngx_mp4_get_32value(stsz_atom->entries);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, ...",2996.0,3068.0,1.0,18.0,73.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5216,173477,ngx_http_mp4_update_stsz_atom,1,ngx_http_mp4_update_stsz_atom,"ngx_int_t ngx_http_mp4_update_stsz_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_update_stsz_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    size_t                atom_size;
    uint32_t             *pos, *end, entries;
    ngx_buf_t            *atom, *data;
    ngx_mp4_stsz_atom_t  *stsz_atom;

    /*
     * mdia.minf.stbl.stsz updating requires trak->start_sample
     * from mdia.minf.stbl.stts which depends on value from mdia.mdhd
     * atom which may reside after mdia.minf
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 stsz atom update"");

    data = trak->out[NGX_HTTP_MP4_STSZ_DATA].buf;

    if (data) {
        entries = trak->sample_sizes_entries;

        if (trak->start_sample > entries) {
            ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                          ""start time is out mp4 stsz samples in \""%s\"""",
                          mp4->file.name.data);
            return NGX_ERROR;
        }

        entries -= trak->start_sample;
        data->pos...",3071.0,3159.0,1.0,21.0,89.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5217,173483,ngx_http_mp4_read_stco_atom,1,ngx_http_mp4_read_stco_atom,"ngx_int_t ngx_http_mp4_read_stco_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_stco_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header, *atom_table, *atom_end;
    uint32_t              entries;
    ngx_buf_t            *atom, *data;
    ngx_mp4_stco_atom_t  *stco_atom;
    ngx_http_mp4_trak_t  *trak;

    /* chunk offsets atom */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 stco atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    stco_atom = (ngx_mp4_stco_atom_t *) atom_header;
    ngx_mp4_set_atom_name(stco_atom, 's', 't', 'c', 'o');

    if (ngx_mp4_atom_data_size(ngx_mp4_stco_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 stco atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    entries = ngx_mp4_get_32value(stco_atom->entries);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""chunks:%uD"", entries);

    if (ngx_mp4_atom_data_size(ngx_mp4_stco_atom_t)
    ...",3171.0,3228.0,1.0,18.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5218,173489,ngx_http_mp4_update_stco_atom,1,ngx_http_mp4_update_stco_atom,"ngx_int_t ngx_http_mp4_update_stco_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_update_stco_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    size_t                atom_size;
    uint32_t              entries;
    uint64_t              chunk_offset, samples_size;
    ngx_buf_t            *atom, *data;
    ngx_mp4_stco_atom_t  *stco_atom;

    /*
     * mdia.minf.stbl.stco updating requires trak->start_chunk
     * from mdia.minf.stbl.stsc which depends on value from mdia.mdhd
     * atom which may reside after mdia.minf
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 stco atom update"");

    data = trak->out[NGX_HTTP_MP4_STCO_DATA].buf;

    if (data == NULL) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""no mp4 stco atoms were found in \""%s\"""",
                      mp4->file.name.data);
        return NGX_ERROR;
    }

    if (trak->start_chunk > trak->chunks) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""sta...",3231.0,3337.0,1.0,21.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5219,173495,ngx_http_mp4_adjust_stco_atom,1,ngx_http_mp4_adjust_stco_atom,"void ngx_http_mp4_adjust_stco_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*,int32_t)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_adjust_stco_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak, int32_t adjustment)
{
    uint32_t    offset, *entry, *end;
    ngx_buf_t  *data;

    /*
     * moov.trak.mdia.minf.stbl.stco adjustment requires
     * minimal start offset of all traks and new moov atom size
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 stco atom adjustment"");

    data = trak->out[NGX_HTTP_MP4_STCO_DATA].buf;
    entry = (uint32_t *) data->pos;
    end = (uint32_t *) data->last;

    while (entry < end) {
        offset = ngx_mp4_get_32value(entry);
        offset += adjustment;
        ngx_mp4_set_32value(entry, offset);
        entry++;
    }
}",3340.0,3365.0,1.0,21.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5220,173502,ngx_http_mp4_read_co64_atom,1,ngx_http_mp4_read_co64_atom,"ngx_int_t ngx_http_mp4_read_co64_atom (ngx_http_mp4_file_t*,uint64_t)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_read_co64_atom(ngx_http_mp4_file_t *mp4, uint64_t atom_data_size)
{
    u_char               *atom_header, *atom_table, *atom_end;
    uint32_t              entries;
    ngx_buf_t            *atom, *data;
    ngx_mp4_co64_atom_t  *co64_atom;
    ngx_http_mp4_trak_t  *trak;

    /* chunk offsets atom */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""mp4 co64 atom"");

    atom_header = ngx_mp4_atom_header(mp4);
    co64_atom = (ngx_mp4_co64_atom_t *) atom_header;
    ngx_mp4_set_atom_name(co64_atom, 'c', 'o', '6', '4');

    if (ngx_mp4_atom_data_size(ngx_mp4_co64_atom_t) > atom_data_size) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""\""%s\"" mp4 co64 atom too small"", mp4->file.name.data);
        return NGX_ERROR;
    }

    entries = ngx_mp4_get_32value(co64_atom->entries);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0, ""chunks:%uD"", entries);

    if (ngx_mp4_atom_data_size(ngx_mp4_co64_atom_t)
    ...",3377.0,3434.0,1.0,18.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5221,173508,ngx_http_mp4_update_co64_atom,1,ngx_http_mp4_update_co64_atom,"ngx_int_t ngx_http_mp4_update_co64_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*)",http\modules\ngx_http_mp4_module.c,"static ngx_int_t
ngx_http_mp4_update_co64_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak)
{
    size_t                atom_size;
    uint64_t              entries, chunk_offset, samples_size;
    ngx_buf_t            *atom, *data;
    ngx_mp4_co64_atom_t  *co64_atom;

    /*
     * mdia.minf.stbl.co64 updating requires trak->start_chunk
     * from mdia.minf.stbl.stsc which depends on value from mdia.mdhd
     * atom which may reside after mdia.minf
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 co64 atom update"");

    data = trak->out[NGX_HTTP_MP4_CO64_DATA].buf;

    if (data == NULL) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""no mp4 co64 atoms were found in \""%s\"""",
                      mp4->file.name.data);
        return NGX_ERROR;
    }

    if (trak->start_chunk > trak->chunks) {
        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
                      ""start time is out mp4 co64 ch...",3437.0,3538.0,1.0,21.0,102.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5222,173514,ngx_http_mp4_adjust_co64_atom,1,ngx_http_mp4_adjust_co64_atom,"void ngx_http_mp4_adjust_co64_atom (ngx_http_mp4_file_t*,ngx_http_mp4_trak_t*,off_t)",http\modules\ngx_http_mp4_module.c,"static void
ngx_http_mp4_adjust_co64_atom(ngx_http_mp4_file_t *mp4,
    ngx_http_mp4_trak_t *trak, off_t adjustment)
{
    uint64_t    offset, *entry, *end;
    ngx_buf_t  *data;

    /*
     * moov.trak.mdia.minf.stbl.co64 adjustment requires
     * minimal start offset of all traks and new moov atom size
     */

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, mp4->file.log, 0,
                   ""mp4 co64 atom adjustment"");

    data = trak->out[NGX_HTTP_MP4_CO64_DATA].buf;
    entry = (uint64_t *) data->pos;
    end = (uint64_t *) data->last;

    while (entry < end) {
        offset = ngx_mp4_get_64value(entry);
        offset += adjustment;
        ngx_mp4_set_64value(entry, offset);
        entry++;
    }
}",3541.0,3566.0,1.0,21.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5223,173521,ngx_http_mp4,1,ngx_http_mp4,"char* ngx_http_mp4 (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_mp4_module.c,"static char *
ngx_http_mp4(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_mp4_handler;

    return NGX_CONF_OK;
}",3569.0,3578.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5224,173528,ngx_http_mp4_create_conf,1,ngx_http_mp4_create_conf,void* ngx_http_mp4_create_conf (ngx_conf_t*),http\modules\ngx_http_mp4_module.c,"static void *
ngx_http_mp4_create_conf(ngx_conf_t *cf)
{
    ngx_http_mp4_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_mp4_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->buffer_size = NGX_CONF_UNSET_SIZE;
    conf->max_buffer_size = NGX_CONF_UNSET_SIZE;

    return conf;
}",3581.0,3595.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5225,173533,ngx_http_mp4_merge_conf,1,ngx_http_mp4_merge_conf,"char* ngx_http_mp4_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_mp4_module.c,"static char *
ngx_http_mp4_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_mp4_conf_t *prev = parent;
    ngx_http_mp4_conf_t *conf = child;

    ngx_conf_merge_size_value(conf->buffer_size, prev->buffer_size, 512 * 1024);
    ngx_conf_merge_size_value(conf->max_buffer_size, prev->max_buffer_size,
                              10 * 1024 * 1024);

    return NGX_CONF_OK;
}",3598.0,3609.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5226,190170,ngx_http_test_if_unmodified,1,ngx_http_test_if_unmodified,ngx_uint_t ngx_http_test_if_unmodified (ngx_http_request_t*),http\modules\ngx_http_not_modified_filter_module.c,"static ngx_uint_t
ngx_http_test_if_unmodified(ngx_http_request_t *r)
{
    time_t  iums;

    if (r->headers_out.last_modified_time == (time_t) -1) {
        return 0;
    }

    iums = ngx_parse_http_time(r->headers_in.if_unmodified_since->value.data,
                               r->headers_in.if_unmodified_since->value.len);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                 ""http iums:%T lm:%T"", iums, r->headers_out.last_modified_time);

    if (iums >= r->headers_out.last_modified_time) {
        return 1;
    }

    return 0;
}",112.0,132.0,1.0,1.0,21.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_uint_t
5227,190175,ngx_http_test_if_modified,1,ngx_http_test_if_modified,ngx_uint_t ngx_http_test_if_modified (ngx_http_request_t*),http\modules\ngx_http_not_modified_filter_module.c,"static ngx_uint_t
ngx_http_test_if_modified(ngx_http_request_t *r)
{
    time_t                     ims;
    ngx_http_core_loc_conf_t  *clcf;

    if (r->headers_out.last_modified_time == (time_t) -1) {
        return 1;
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->if_modified_since == NGX_HTTP_IMS_OFF) {
        return 1;
    }

    ims = ngx_parse_http_time(r->headers_in.if_modified_since->value.data,
                              r->headers_in.if_modified_since->value.len);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http ims:%T lm:%T"", ims, r->headers_out.last_modified_time);

    if (ims == r->headers_out.last_modified_time) {
        return 0;
    }

    if (clcf->if_modified_since == NGX_HTTP_IMS_EXACT
        || ims < r->headers_out.last_modified_time)
    {
        return 1;
    }

    return 0;
}",135.0,168.0,1.0,1.0,34.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_uint_t
5228,190180,ngx_http_test_if_match,1,ngx_http_test_if_match,"ngx_uint_t ngx_http_test_if_match (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\modules\ngx_http_not_modified_filter_module.c,"static ngx_uint_t
ngx_http_test_if_match(ngx_http_request_t *r, ngx_table_elt_t *header,
    ngx_uint_t weak)
{
    u_char     *start, *end, ch;
    ngx_str_t   etag, *list;

    list = &header->value;

    if (list->len == 1 && list->data[0] == '*') {
        return 1;
    }

    if (r->headers_out.etag == NULL) {
        return 0;
    }

    etag = r->headers_out.etag->value;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http im:\""%V\"" etag:%V"", list, &etag);

    if (weak
        && etag.len > 2
        && etag.data[0] == 'W'
        && etag.data[1] == '/')
    {
        etag.len -= 2;
        etag.data += 2;
    }

    start = list->data;
    end = list->data + list->len;

    while (start < end) {

        if (weak
            && end - start > 2
            && start[0] == 'W'
            && start[1] == '/')
        {
            start += 2;
        }

        if (etag.len > (size_t) (end - start)) {
            return 0;
        }

        i...",171.0,256.0,1.0,1.0,86.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,ngx_uint_t
5229,190187,ngx_http_not_modified_filter_init,1,ngx_http_not_modified_filter_init,ngx_int_t ngx_http_not_modified_filter_init (ngx_conf_t*),http\modules\ngx_http_not_modified_filter_module.c,"static ngx_int_t
ngx_http_not_modified_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_not_modified_header_filter;

    return NGX_OK;
}",259.0,266.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5230,190222,ngx_http_not_modified_header_filter,1,ngx_http_not_modified_header_filter,ngx_int_t ngx_http_not_modified_header_filter (ngx_http_request_t*),http\modules\ngx_http_not_modified_filter_module.c,"static ngx_int_t
ngx_http_not_modified_header_filter(ngx_http_request_t *r)
{
    if (r->headers_out.status != NGX_HTTP_OK
        || r != r->main
        || r->disable_not_modified)
    {
        return ngx_http_next_header_filter(r);
    }

    if (r->headers_in.if_unmodified_since
        && !ngx_http_test_if_unmodified(r))
    {
        return ngx_http_filter_finalize_request(r, NULL,
                                                NGX_HTTP_PRECONDITION_FAILED);
    }

    if (r->headers_in.if_match
        && !ngx_http_test_if_match(r, r->headers_in.if_match, 0))
    {
        return ngx_http_filter_finalize_request(r, NULL,
                                                NGX_HTTP_PRECONDITION_FAILED);
    }

    if (r->headers_in.if_modified_since || r->headers_in.if_none_match) {

        if (r->headers_in.if_modified_since
            && ngx_http_test_if_modified(r))
        {
            return ngx_http_next_header_filter(r);
        }

        if (r->headers_in.if_none_mat...",54.0,109.0,1.0,1.0,56.0,52,7,38,5,0,6,8,11,4,6,,0,4,2,1,1,ngx_int_t
5231,190838,ngx_http_proxy_rewrite_pt,1,ngx_http_proxy_rewrite_pt,"ngx_int_t ngx_http_proxy_rewrite_pt (ngx_http_request_t*,ngx_str_t*,size_t,size_t,ngx_http_proxy_rewrite_t*)",http\modules\ngx_http_proxy_module.c,"typedef ngx_int_t (*ngx_http_proxy_rewrite_pt)(ngx_http_request_t *r,
    ngx_str_t *value, size_t prefix, size_t len,
    ngx_http_proxy_rewrite_t *pr);",33.0,35.0,19.0,33.0,3.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
5232,190918,ngx_http_proxy_eval,1,ngx_http_proxy_eval,"ngx_int_t ngx_http_proxy_eval (ngx_http_request_t*,ngx_http_proxy_ctx_t*,ngx_http_proxy_loc_conf_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_eval(ngx_http_request_t *r, ngx_http_proxy_ctx_t *ctx,
    ngx_http_proxy_loc_conf_t *plcf)
{
    u_char               *p;
    size_t                add;
    u_short               port;
    ngx_str_t             proxy;
    ngx_url_t             url;
    ngx_http_upstream_t  *u;

    if (ngx_http_script_run(r, &proxy, plcf->proxy_lengths->elts, 0,
                            plcf->proxy_values->elts)
        == NULL)
    {
        return NGX_ERROR;
    }

    if (proxy.len > 7
        && ngx_strncasecmp(proxy.data, (u_char *) ""http://"", 7) == 0)
    {
        add = 7;
        port = 80;

#if (NGX_HTTP_SSL)

    } else if (proxy.len > 8
               && ngx_strncasecmp(proxy.data, (u_char *) ""https://"", 8) == 0)
    {
        add = 8;
        port = 443;
        r->upstream->ssl = 1;

#endif

    } else {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""invalid URL prefix in \""%V\"""", &proxy);
        return NGX_ERROR;
  ...",1031.0,1130.0,1.0,1.0,100.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5233,190925,ngx_http_proxy_create_request,1,ngx_http_proxy_create_request,ngx_int_t ngx_http_proxy_create_request (ngx_http_request_t*),http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_create_request(ngx_http_request_t *r)
{
    size_t                        len, uri_len, loc_len, body_len,
                                  key_len, val_len;
    uintptr_t                     escape;
    ngx_buf_t                    *b;
    ngx_str_t                     method;
    ngx_uint_t                    i, unparsed_uri;
    ngx_chain_t                  *cl, *body;
    ngx_list_part_t              *part;
    ngx_table_elt_t              *header;
    ngx_http_upstream_t          *u;
    ngx_http_proxy_ctx_t         *ctx;
    ngx_http_script_code_pt       code;
    ngx_http_proxy_headers_t     *headers;
    ngx_http_script_engine_t      e, le;
    ngx_http_proxy_loc_conf_t    *plcf;
    ngx_http_script_len_code_pt   lcode;

    u = r->upstream;

    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);

#if (NGX_HTTP_CACHE)
    headers = u->cacheable ? &plcf->headers_cache : &plcf->headers;
#else
    headers = &plcf->headers;
#endif

  ...",1233.0,1603.0,1.0,1.0,371.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5234,190930,ngx_http_proxy_reinit_request,1,ngx_http_proxy_reinit_request,ngx_int_t ngx_http_proxy_reinit_request (ngx_http_request_t*),http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_reinit_request(ngx_http_request_t *r)
{
    ngx_http_proxy_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL) {
        return NGX_OK;
    }

    ctx->status.code = 0;
    ctx->status.count = 0;
    ctx->status.start = NULL;
    ctx->status.end = NULL;
    ctx->chunked.state = 0;

    r->upstream->process_header = ngx_http_proxy_process_status_line;
    r->upstream->pipe->input_filter = ngx_http_proxy_copy_filter;
    r->upstream->input_filter = ngx_http_proxy_non_buffered_copy_filter;
    r->state = 0;

    return NGX_OK;
}",1606.0,1629.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5235,190935,ngx_http_proxy_body_output_filter,1,ngx_http_proxy_body_output_filter,"ngx_int_t ngx_http_proxy_body_output_filter (void*,ngx_chain_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_body_output_filter(void *data, ngx_chain_t *in)
{
    ngx_http_request_t  *r = data;

    off_t                  size;
    u_char                *chunk;
    ngx_int_t              rc;
    ngx_buf_t             *b;
    ngx_chain_t           *out, *cl, *tl, **ll, **fl;
    ngx_http_proxy_ctx_t  *ctx;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""proxy output filter"");

    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (in == NULL) {
        out = in;
        goto out;
    }

    out = NULL;
    ll = &out;

    if (!ctx->header_sent) {
        /* first buffer contains headers, pass it unmodified */

        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""proxy output header"");

        ctx->header_sent = 1;

        tl = ngx_alloc_chain_link(r->pool);
        if (tl == NULL) {
            return NGX_ERROR;
        }

        tl->buf = in->buf;
        *ll = tl;
    ...",1632.0,1796.0,1.0,1.0,165.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5236,190941,ngx_http_proxy_process_status_line,1,ngx_http_proxy_process_status_line,ngx_int_t ngx_http_proxy_process_status_line (ngx_http_request_t*),http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_process_status_line(ngx_http_request_t *r)
{
    size_t                 len;
    ngx_int_t              rc;
    ngx_http_upstream_t   *u;
    ngx_http_proxy_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    u = r->upstream;

    rc = ngx_http_parse_status_line(r, &u->buffer, &ctx->status);

    if (rc == NGX_AGAIN) {
        return rc;
    }

    if (rc == NGX_ERROR) {

#if (NGX_HTTP_CACHE)

        if (r->cache) {
            r->http_version = NGX_HTTP_VERSION_9;
            return NGX_OK;
        }

#endif

        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""upstream sent no valid HTTP/1.0 header"");

#if 0
        if (u->accel) {
            return NGX_HTTP_UPSTREAM_INVALID_HEADER;
        }
#endif

        r->http_version = NGX_HTTP_VERSION_9;
        u->state->status = NGX_HTTP_OK;
        u->headers_in.connection_close = 1;

        ...",1799.0,1875.0,1.0,1.0,77.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5237,190946,ngx_http_proxy_process_header,1,ngx_http_proxy_process_header,ngx_int_t ngx_http_proxy_process_header (ngx_http_request_t*),http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_process_header(ngx_http_request_t *r)
{
    ngx_int_t                       rc;
    ngx_table_elt_t                *h;
    ngx_http_upstream_t            *u;
    ngx_http_proxy_ctx_t           *ctx;
    ngx_http_upstream_header_t     *hh;
    ngx_http_upstream_main_conf_t  *umcf;

    umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);

    for ( ;; ) {

        rc = ngx_http_parse_header_line(r, &r->upstream->buffer, 1);

        if (rc == NGX_OK) {

            /* a header line has been parsed successfully */

            h = ngx_list_push(&r->upstream->headers_in.headers);
            if (h == NULL) {
                return NGX_ERROR;
            }

            h->hash = r->header_hash;

            h->key.len = r->header_name_end - r->header_name_start;
            h->value.len = r->header_end - r->header_start;

            h->key.data = ngx_pnalloc(r->pool,
                               h->key.len + 1 + h->value.len + 1 + h->key....",1878.0,2031.0,1.0,1.0,154.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5238,190951,ngx_http_proxy_input_filter_init,1,ngx_http_proxy_input_filter_init,ngx_int_t ngx_http_proxy_input_filter_init (void*),http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_input_filter_init(void *data)
{
    ngx_http_request_t    *r = data;
    ngx_http_upstream_t   *u;
    ngx_http_proxy_ctx_t  *ctx;

    u = r->upstream;
    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    ngx_log_debug4(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http proxy filter init s:%ui h:%d c:%d l:%O"",
                   u->headers_in.status_n, ctx->head, u->headers_in.chunked,
                   u->headers_in.content_length_n);

    /* as per RFC2616, 4.4 Message Length */

    if (u->headers_in.status_n == NGX_HTTP_NO_CONTENT
        || u->headers_in.status_n == NGX_HTTP_NOT_MODIFIED
        || ctx->head)
    {
        /* 1xx, 204, and 304 and replies to HEAD requests */
        /* no 1xx since we don't send Expect and Upgrade */

        u->pipe->length = 0;
        u->length = 0;
        u->keepalive = !u->headers_in.connection_close;

    } else if (u->...",2034.0,2090.0,1.0,1.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5239,190956,ngx_http_proxy_copy_filter,1,ngx_http_proxy_copy_filter,"ngx_int_t ngx_http_proxy_copy_filter (ngx_event_pipe_t*,ngx_buf_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_copy_filter(ngx_event_pipe_t *p, ngx_buf_t *buf)
{
    ngx_buf_t           *b;
    ngx_chain_t         *cl;
    ngx_http_request_t  *r;

    if (buf->pos == buf->last) {
        return NGX_OK;
    }

    if (p->upstream_done) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, p->log, 0,
                       ""http proxy data after close"");
        return NGX_OK;
    }

    if (p->length == 0) {

        ngx_log_error(NGX_LOG_WARN, p->log, 0,
                      ""upstream sent more data than specified in ""
                      ""\""Content-Length\"" header"");

        r = p->input_ctx;
        r->upstream->keepalive = 0;
        p->upstream_done = 1;

        return NGX_OK;
    }

    cl = ngx_chain_get_free_buf(p->pool, &p->free);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    b = cl->buf;

    ngx_memcpy(b, buf, sizeof(ngx_buf_t));
    b->shadow = buf;
    b->tag = p->tag;
    b->last_shadow = 1;
    b->recycled = 1;
    buf->shadow = b;

    ...",2093.0,2170.0,1.0,1.0,78.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5240,190962,ngx_http_proxy_chunked_filter,1,ngx_http_proxy_chunked_filter,"ngx_int_t ngx_http_proxy_chunked_filter (ngx_event_pipe_t*,ngx_buf_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_chunked_filter(ngx_event_pipe_t *p, ngx_buf_t *buf)
{
    ngx_int_t              rc;
    ngx_buf_t             *b, **prev;
    ngx_chain_t           *cl;
    ngx_http_request_t    *r;
    ngx_http_proxy_ctx_t  *ctx;

    if (buf->pos == buf->last) {
        return NGX_OK;
    }

    r = p->input_ctx;
    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    if (p->upstream_done) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, p->log, 0,
                       ""http proxy data after close"");
        return NGX_OK;
    }

    if (p->length == 0) {

        ngx_log_error(NGX_LOG_WARN, p->log, 0,
                      ""upstream sent data after final chunk"");

        r->upstream->keepalive = 0;
        p->upstream_done = 1;

        return NGX_OK;
    }

    b = NULL;
    prev = &buf->shadow;

    for ( ;; ) {

        rc = ngx_http_parse_chunked(r, buf, &ctx->chunked);

        if (rc == NGX_OK...",2173.0,2322.0,1.0,1.0,150.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5241,190968,ngx_http_proxy_non_buffered_copy_filter,1,ngx_http_proxy_non_buffered_copy_filter,"ngx_int_t ngx_http_proxy_non_buffered_copy_filter (void*,ssize_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_non_buffered_copy_filter(void *data, ssize_t bytes)
{
    ngx_http_request_t   *r = data;

    ngx_buf_t            *b;
    ngx_chain_t          *cl, **ll;
    ngx_http_upstream_t  *u;

    u = r->upstream;

    if (u->length == 0) {
        ngx_log_error(NGX_LOG_WARN, r->connection->log, 0,
                      ""upstream sent more data than specified in ""
                      ""\""Content-Length\"" header"");
        return NGX_OK;
    }

    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
        ll = &cl->next;
    }

    cl = ngx_chain_get_free_buf(r->pool, &u->free_bufs);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    *ll = cl;

    cl->buf->flush = 1;
    cl->buf->memory = 1;

    b = &u->buffer;

    cl->buf->pos = b->last;
    b->last += bytes;
    cl->buf->last = b->last;
    cl->buf->tag = u->output.tag;

    if (u->length == -1) {
        return NGX_OK;
    }

    if (bytes > u->length) {

        ngx_log_error(NGX_...",2325.0,2387.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5242,190974,ngx_http_proxy_non_buffered_chunked_filter,1,ngx_http_proxy_non_buffered_chunked_filter,"ngx_int_t ngx_http_proxy_non_buffered_chunked_filter (void*,ssize_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_non_buffered_chunked_filter(void *data, ssize_t bytes)
{
    ngx_http_request_t   *r = data;

    ngx_int_t              rc;
    ngx_buf_t             *b, *buf;
    ngx_chain_t           *cl, **ll;
    ngx_http_upstream_t   *u;
    ngx_http_proxy_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    u = r->upstream;
    buf = &u->buffer;

    buf->pos = buf->last;
    buf->last += bytes;

    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
        ll = &cl->next;
    }

    for ( ;; ) {

        rc = ngx_http_parse_chunked(r, buf, &ctx->chunked);

        if (rc == NGX_OK) {

            /* a chunk has been parsed successfully */

            cl = ngx_chain_get_free_buf(r->pool, &u->free_bufs);
            if (cl == NULL) {
                return NGX_ERROR;
            }

            *ll = cl;
            ll = &cl->next;

            b = cl->buf;

        ...",2390.0,2488.0,1.0,1.0,99.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5243,190980,ngx_http_proxy_abort_request,1,ngx_http_proxy_abort_request,void ngx_http_proxy_abort_request (ngx_http_request_t*),http\modules\ngx_http_proxy_module.c,"static void
ngx_http_proxy_abort_request(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""abort http proxy request"");

    return;
}",2491.0,2498.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5244,190985,ngx_http_proxy_finalize_request,1,ngx_http_proxy_finalize_request,"void ngx_http_proxy_finalize_request (ngx_http_request_t*,ngx_int_t)",http\modules\ngx_http_proxy_module.c,"static void
ngx_http_proxy_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""finalize http proxy request"");

    return;
}",2501.0,2508.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5245,190991,ngx_http_proxy_host_variable,1,ngx_http_proxy_host_variable,"ngx_int_t ngx_http_proxy_host_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_host_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_proxy_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->len = ctx->vars.host_header.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = ctx->vars.host_header.data;

    return NGX_OK;
}",2511.0,2531.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5246,190998,ngx_http_proxy_port_variable,1,ngx_http_proxy_port_variable,"ngx_int_t ngx_http_proxy_port_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_port_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_proxy_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->len = ctx->vars.port.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = ctx->vars.port.data;

    return NGX_OK;
}",2534.0,2554.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5247,191005,ngx_http_proxy_add_x_forwarded_for_variable,1,ngx_http_proxy_add_x_forwarded_for_variable,"ngx_int_t ngx_http_proxy_add_x_forwarded_for_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_add_x_forwarded_for_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    size_t             len;
    u_char            *p;
    ngx_uint_t         i, n;
    ngx_table_elt_t  **h;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    n = r->headers_in.x_forwarded_for.nelts;
    h = r->headers_in.x_forwarded_for.elts;

    len = 0;

    for (i = 0; i < n; i++) {
        len += h[i]->value.len + sizeof("", "") - 1;
    }

    if (len == 0) {
        v->len = r->connection->addr_text.len;
        v->data = r->connection->addr_text.data;
        return NGX_OK;
    }

    len += r->connection->addr_text.len;

    p = ngx_pnalloc(r->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = len;
    v->data = p;

    for (i = 0; i < n; i++) {
        p = ngx_copy(p, h[i]->value.data, h[i]->value.len);
        *p++ = ','; *p++ = ' ';
    }

    ngx_memcpy(p, r->connection->addr_text.data, r-...",2557.0,2603.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5248,191012,ngx_http_proxy_internal_body_length_variable,1,ngx_http_proxy_internal_body_length_variable,"ngx_int_t ngx_http_proxy_internal_body_length_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_internal_body_length_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_proxy_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL || ctx->internal_body_length < 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);

    if (v->data == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(v->data, ""%O"", ctx->internal_body_length) - v->data;

    return NGX_OK;
}",2606.0,2632.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5249,191019,ngx_http_proxy_internal_chunked_variable,1,ngx_http_proxy_internal_chunked_variable,"ngx_int_t ngx_http_proxy_internal_chunked_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_internal_chunked_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_proxy_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_proxy_module);

    if (ctx == NULL || !ctx->internal_chunked) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = (u_char *) ""chunked"";
    v->len = sizeof(""chunked"") - 1;

    return NGX_OK;
}",2635.0,2656.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5250,191026,ngx_http_proxy_rewrite_redirect,1,ngx_http_proxy_rewrite_redirect,"ngx_int_t ngx_http_proxy_rewrite_redirect (ngx_http_request_t*,ngx_table_elt_t*,size_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_rewrite_redirect(ngx_http_request_t *r, ngx_table_elt_t *h,
    size_t prefix)
{
    size_t                      len;
    ngx_int_t                   rc;
    ngx_uint_t                  i;
    ngx_http_proxy_rewrite_t   *pr;
    ngx_http_proxy_loc_conf_t  *plcf;

    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);

    pr = plcf->redirects->elts;

    if (pr == NULL) {
        return NGX_DECLINED;
    }

    len = h->value.len - prefix;

    for (i = 0; i < plcf->redirects->nelts; i++) {
        rc = pr[i].handler(r, &h->value, prefix, len, &pr[i]);

        if (rc != NGX_DECLINED) {
            return rc;
        }
    }

    return NGX_DECLINED;
}",2659.0,2688.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5251,191033,ngx_http_proxy_rewrite_cookie,1,ngx_http_proxy_rewrite_cookie,"ngx_int_t ngx_http_proxy_rewrite_cookie (ngx_http_request_t*,ngx_table_elt_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_rewrite_cookie(ngx_http_request_t *r, ngx_table_elt_t *h)
{
    u_char                     *p;
    size_t                      len;
    ngx_int_t                   rc, rv;
    ngx_str_t                  *key, *value;
    ngx_uint_t                  i;
    ngx_array_t                 attrs;
    ngx_keyval_t               *attr;
    ngx_http_proxy_loc_conf_t  *plcf;

    if (ngx_array_init(&attrs, r->pool, 2, sizeof(ngx_keyval_t)) != NGX_OK) {
        return NGX_ERROR;
    }

    if (ngx_http_proxy_parse_cookie(&h->value, &attrs) != NGX_OK) {
        return NGX_ERROR;
    }

    attr = attrs.elts;

    if (attr[0].value.data == NULL) {
        return NGX_DECLINED;
    }

    rv = NGX_DECLINED;

    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);

    for (i = 1; i < attrs.nelts; i++) {

        key = &attr[i].key;
        value = &attr[i].value;

        if (plcf->cookie_domains && key->len == 6
            && ngx_strncasecmp(key->data, (...",2691.0,2824.0,1.0,1.0,134.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5252,191039,ngx_http_proxy_parse_cookie,1,ngx_http_proxy_parse_cookie,"ngx_int_t ngx_http_proxy_parse_cookie (ngx_str_t*,ngx_array_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_parse_cookie(ngx_str_t *value, ngx_array_t *attrs)
{
    u_char        *start, *end, *p, *last;
    ngx_str_t      name, val;
    ngx_keyval_t  *attr;

    start = value->data;
    end = value->data + value->len;

    for ( ;; ) {

        last = (u_char *) ngx_strchr(start, ';');

        if (last == NULL) {
            last = end;
        }

        while (start < last && *start == ' ') { start++; }

        for (p = start; p < last && *p != '='; p++) { /* void */ }

        name.data = start;
        name.len = p - start;

        while (name.len && name.data[name.len - 1] == ' ') {
            name.len--;
        }

        if (p < last) {

            p++;

            while (p < last && *p == ' ') { p++; }

            val.data = p;
            val.len = last - val.data;

            while (val.len && val.data[val.len - 1] == ' ') {
                val.len--;
            }

        } else {
            ngx_str_null(&val);
        }

        attr...",2827.0,2889.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5253,191045,ngx_http_proxy_rewrite_cookie_value,1,ngx_http_proxy_rewrite_cookie_value,"ngx_int_t ngx_http_proxy_rewrite_cookie_value (ngx_http_request_t*,ngx_str_t*,ngx_array_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_rewrite_cookie_value(ngx_http_request_t *r, ngx_str_t *value,
    ngx_array_t *rewrites)
{
    ngx_int_t                  rc;
    ngx_uint_t                 i;
    ngx_http_proxy_rewrite_t  *pr;

    pr = rewrites->elts;

    for (i = 0; i < rewrites->nelts; i++) {
        rc = pr[i].handler(r, value, 0, value->len, &pr[i]);

        if (rc != NGX_DECLINED) {
            return rc;
        }
    }

    return NGX_DECLINED;
}",2892.0,2911.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5254,191052,ngx_http_proxy_rewrite_cookie_flags,1,ngx_http_proxy_rewrite_cookie_flags,"ngx_int_t ngx_http_proxy_rewrite_cookie_flags (ngx_http_request_t*,ngx_array_t*,ngx_array_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_rewrite_cookie_flags(ngx_http_request_t *r, ngx_array_t *attrs,
    ngx_array_t *flags)
{
    ngx_str_t                       pattern, value;
#if (NGX_PCRE)
    ngx_int_t                       rc;
#endif
    ngx_uint_t                      i, m, f, nelts;
    ngx_keyval_t                   *attr;
    ngx_conf_bitmask_t             *mask;
    ngx_http_complex_value_t       *flags_values;
    ngx_http_proxy_cookie_flags_t  *pcf;

    attr = attrs->elts;
    pcf = flags->elts;

    for (i = 0; i < flags->nelts; i++) {

#if (NGX_PCRE)
        if (pcf[i].regex) {
            rc = ngx_http_regex_exec(r, pcf[i].cookie.regex, &attr[0].key);

            if (rc == NGX_ERROR) {
                return NGX_ERROR;
            }

            if (rc == NGX_OK) {
                break;
            }

            /* NGX_DECLINED */

            continue;
        }
#endif

        if (ngx_http_complex_value(r, &pcf[i].cookie.complex, &pattern)
            != NGX_OK)
  ...",2914.0,3010.0,1.0,1.0,97.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5255,191059,ngx_http_proxy_edit_cookie_flags,1,ngx_http_proxy_edit_cookie_flags,"ngx_int_t ngx_http_proxy_edit_cookie_flags (ngx_http_request_t*,ngx_array_t*,ngx_uint_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_edit_cookie_flags(ngx_http_request_t *r, ngx_array_t *attrs,
    ngx_uint_t flags)
{
    ngx_str_t     *key, *value;
    ngx_uint_t     i;
    ngx_keyval_t  *attr;

    attr = attrs->elts;

    for (i = 1; i < attrs->nelts; i++) {
        key = &attr[i].key;

        if (key->len == 6
            && ngx_strncasecmp(key->data, (u_char *) ""secure"", 6) == 0)
        {
            if (flags & NGX_HTTP_PROXY_COOKIE_SECURE_ON) {
                flags &= ~NGX_HTTP_PROXY_COOKIE_SECURE_ON;

            } else if (flags & NGX_HTTP_PROXY_COOKIE_SECURE_OFF) {
                key->data = NULL;
            }

            continue;
        }

        if (key->len == 8
            && ngx_strncasecmp(key->data, (u_char *) ""httponly"", 8) == 0)
        {
            if (flags & NGX_HTTP_PROXY_COOKIE_HTTPONLY_ON) {
                flags &= ~NGX_HTTP_PROXY_COOKIE_HTTPONLY_ON;

            } else if (flags & NGX_HTTP_PROXY_COOKIE_HTTPONLY_OFF) {
                key->data =...",3013.0,3139.0,1.0,24.0,127.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5256,191066,ngx_http_proxy_rewrite,1,ngx_http_proxy_rewrite,"ngx_int_t ngx_http_proxy_rewrite (ngx_http_request_t*,ngx_str_t*,size_t,size_t,ngx_str_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_rewrite(ngx_http_request_t *r, ngx_str_t *value, size_t prefix,
    size_t len, ngx_str_t *replacement)
{
    u_char  *p, *data;
    size_t   new_len;

    if (len == value->len) {
        *value = *replacement;
        return NGX_OK;
    }

    new_len = replacement->len + value->len - len;

    if (replacement->len > len) {

        data = ngx_pnalloc(r->pool, new_len + 1);
        if (data == NULL) {
            return NGX_ERROR;
        }

        p = ngx_copy(data, value->data, prefix);
        p = ngx_copy(p, replacement->data, replacement->len);

        ngx_memcpy(p, value->data + prefix + len,
                   value->len - len - prefix + 1);

        value->data = data;

    } else {
        p = ngx_copy(value->data + prefix, replacement->data, replacement->len);

        ngx_memmove(p, value->data + prefix + len,
                    value->len - len - prefix + 1);
    }

    value->len = new_len;

    return NGX_OK;
}",3222.0,3261.0,1.0,1.0,40.0,0,0,0,0,2,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
5257,191075,ngx_http_proxy_add_variables,1,ngx_http_proxy_add_variables,ngx_int_t ngx_http_proxy_add_variables (ngx_conf_t*),http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_proxy_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",3264.0,3280.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5258,191080,ngx_http_proxy_create_main_conf,1,ngx_http_proxy_create_main_conf,void* ngx_http_proxy_create_main_conf (ngx_conf_t*),http\modules\ngx_http_proxy_module.c,"static void *
ngx_http_proxy_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_proxy_main_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_proxy_main_conf_t));
    if (conf == NULL) {
        return NULL;
    }

#if (NGX_HTTP_CACHE)
    if (ngx_array_init(&conf->caches, cf->pool, 4,
                       sizeof(ngx_http_file_cache_t *))
        != NGX_OK)
    {
        return NULL;
    }
#endif

    return conf;
}",3283.0,3303.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5259,191085,ngx_http_proxy_create_loc_conf,1,ngx_http_proxy_create_loc_conf,void* ngx_http_proxy_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_proxy_module.c,"static void *
ngx_http_proxy_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_proxy_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_proxy_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->upstream.bufs.num = 0;
     *     conf->upstream.ignore_headers = 0;
     *     conf->upstream.next_upstream = 0;
     *     conf->upstream.cache_zone = NULL;
     *     conf->upstream.cache_use_stale = 0;
     *     conf->upstream.cache_methods = 0;
     *     conf->upstream.temp_path = NULL;
     *     conf->upstream.hide_headers_hash = { NULL, 0 };
     *     conf->upstream.store_lengths = NULL;
     *     conf->upstream.store_values = NULL;
     *
     *     conf->location = NULL;
     *     conf->url = { 0, NULL };
     *     conf->headers.lengths = NULL;
     *     conf->headers.values = NULL;
     *     conf->headers.hash = { NULL, 0 };
     *     conf->headers_cache.lengths = NULL;
     *     conf...",3306.0,3431.0,1.0,1.0,126.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5260,191090,ngx_http_proxy_merge_loc_conf,1,ngx_http_proxy_merge_loc_conf,"char* ngx_http_proxy_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_proxy_module.c,"static char *
ngx_http_proxy_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_proxy_loc_conf_t *prev = parent;
    ngx_http_proxy_loc_conf_t *conf = child;

    u_char                     *p;
    size_t                      size;
    ngx_int_t                   rc;
    ngx_hash_init_t             hash;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_proxy_rewrite_t   *pr;
    ngx_http_script_compile_t   sc;

#if (NGX_HTTP_CACHE)

    if (conf->upstream.store > 0) {
        conf->upstream.cache = 0;
    }

    if (conf->upstream.cache > 0) {
        conf->upstream.store = 0;
    }

#endif

    if (conf->upstream.store == NGX_CONF_UNSET) {
        ngx_conf_merge_value(conf->upstream.store,
                              prev->upstream.store, 0);

        conf->upstream.store_lengths = prev->upstream.store_lengths;
        conf->upstream.store_values = prev->upstream.store_values;
    }

    ngx_conf_merge_uint_value(conf->upstream.store_access,
              ...",3434.0,3931.0,1.0,1.0,498.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5261,191097,ngx_http_proxy_init_headers,1,ngx_http_proxy_init_headers,"ngx_int_t ngx_http_proxy_init_headers (ngx_conf_t*,ngx_http_proxy_loc_conf_t*,ngx_http_proxy_headers_t*,ngx_keyval_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_init_headers(ngx_conf_t *cf, ngx_http_proxy_loc_conf_t *conf,
    ngx_http_proxy_headers_t *headers, ngx_keyval_t *default_headers)
{
    u_char                       *p;
    size_t                        size;
    uintptr_t                    *code;
    ngx_uint_t                    i;
    ngx_array_t                   headers_names, headers_merged;
    ngx_keyval_t                 *src, *s, *h;
    ngx_hash_key_t               *hk;
    ngx_hash_init_t               hash;
    ngx_http_script_compile_t     sc;
    ngx_http_script_copy_code_t  *copy;

    if (headers->hash.buckets) {
        return NGX_OK;
    }

    if (ngx_array_init(&headers_names, cf->temp_pool, 4, sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&headers_merged, cf->temp_pool, 4, sizeof(ngx_keyval_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    headers->lengths = ngx_array_create(cf->pool, 64, 1);
    if (he...",3934.0,4098.0,1.0,1.0,165.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5262,191105,ngx_http_proxy_pass,1,ngx_http_proxy_pass,"char* ngx_http_proxy_pass (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_proxy_module.c,"static char *
ngx_http_proxy_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_proxy_loc_conf_t *plcf = conf;

    size_t                      add;
    u_short                     port;
    ngx_str_t                  *value, *url;
    ngx_url_t                   u;
    ngx_uint_t                  n;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_script_compile_t   sc;

    if (plcf->upstream.upstream || plcf->proxy_lengths) {
        return ""is duplicate"";
    }

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);

    clcf->handler = ngx_http_proxy_handler;

    if (clcf->name.len && clcf->name.data[clcf->name.len - 1] == '/') {
        clcf->auto_redirect = 1;
    }

    value = cf->args->elts;

    url = &value[1];

    n = ngx_http_script_variables_count(url);

    if (n) {

        ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

        sc.cf = cf;
        sc.source = url;
        sc.lengths = &plcf->proxy_lengths;
        sc.valu...",4101.0,4220.0,1.0,1.0,120.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5263,191112,ngx_http_proxy_redirect,1,ngx_http_proxy_redirect,"char* ngx_http_proxy_redirect (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_proxy_module.c,"static char *
ngx_http_proxy_redirect(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_proxy_loc_conf_t *plcf = conf;

    u_char                            *p;
    ngx_str_t                         *value;
    ngx_http_proxy_rewrite_t          *pr;
    ngx_http_compile_complex_value_t   ccv;

    if (plcf->redirect == 0) {
        return ""is duplicate"";
    }

    plcf->redirect = 1;

    value = cf->args->elts;

    if (cf->args->nelts == 2) {
        if (ngx_strcmp(value[1].data, ""off"") == 0) {

            if (plcf->redirects) {
                return ""is duplicate"";
            }

            plcf->redirect = 0;
            return NGX_CONF_OK;
        }

        if (ngx_strcmp(value[1].data, ""default"") != 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid parameter \""%V\"""", &value[1]);
            return NGX_CONF_ERROR;
        }
    }

    if (plcf->redirects == NULL) {
        plcf->redirects = ngx_array_create(cf->...",4223.0,4364.0,1.0,1.0,142.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5264,191119,ngx_http_proxy_cookie_domain,1,ngx_http_proxy_cookie_domain,"char* ngx_http_proxy_cookie_domain (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_proxy_module.c,"static char *
ngx_http_proxy_cookie_domain(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_proxy_loc_conf_t *plcf = conf;

    ngx_str_t                         *value;
    ngx_http_proxy_rewrite_t          *pr;
    ngx_http_compile_complex_value_t   ccv;

    if (plcf->cookie_domains == NULL) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (cf->args->nelts == 2) {

        if (ngx_strcmp(value[1].data, ""off"") == 0) {

            if (plcf->cookie_domains != NGX_CONF_UNSET_PTR) {
                return ""is duplicate"";
            }

            plcf->cookie_domains = NULL;
            return NGX_CONF_OK;
        }

        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid parameter \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    if (plcf->cookie_domains == NGX_CONF_UNSET_PTR) {
        plcf->cookie_domains = ngx_array_create(cf->pool, 1,
                                     sizeof(ngx_http_proxy_rew...",4367.0,4456.0,1.0,1.0,90.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5265,191126,ngx_http_proxy_cookie_path,1,ngx_http_proxy_cookie_path,"char* ngx_http_proxy_cookie_path (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_proxy_module.c,"static char *
ngx_http_proxy_cookie_path(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_proxy_loc_conf_t *plcf = conf;

    ngx_str_t                         *value;
    ngx_http_proxy_rewrite_t          *pr;
    ngx_http_compile_complex_value_t   ccv;

    if (plcf->cookie_paths == NULL) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (cf->args->nelts == 2) {

        if (ngx_strcmp(value[1].data, ""off"") == 0) {

            if (plcf->cookie_paths != NGX_CONF_UNSET_PTR) {
                return ""is duplicate"";
            }

            plcf->cookie_paths = NULL;
            return NGX_CONF_OK;
        }

        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid parameter \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    if (plcf->cookie_paths == NGX_CONF_UNSET_PTR) {
        plcf->cookie_paths = ngx_array_create(cf->pool, 1,
                                     sizeof(ngx_http_proxy_rewrite_t));
  ...",4459.0,4548.0,1.0,1.0,90.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5266,191133,ngx_http_proxy_cookie_flags,1,ngx_http_proxy_cookie_flags,"char* ngx_http_proxy_cookie_flags (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_proxy_module.c,"static char *
ngx_http_proxy_cookie_flags(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_proxy_loc_conf_t *plcf = conf;

    ngx_str_t                         *value;
    ngx_uint_t                         i;
    ngx_http_complex_value_t          *cv;
    ngx_http_proxy_cookie_flags_t     *pcf;
    ngx_http_compile_complex_value_t   ccv;
#if (NGX_PCRE)
    ngx_regex_compile_t                rc;
    u_char                             errstr[NGX_MAX_CONF_ERRSTR];
#endif

    if (plcf->cookie_flags == NULL) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (cf->args->nelts == 2) {

        if (ngx_strcmp(value[1].data, ""off"") == 0) {

            if (plcf->cookie_flags != NGX_CONF_UNSET_PTR) {
                return ""is duplicate"";
            }

            plcf->cookie_flags = NULL;
            return NGX_CONF_OK;
        }

        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid parameter \""%V\"""", &value[1]);
   ...",4551.0,4668.0,1.0,1.0,118.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5267,191140,ngx_http_proxy_store,1,ngx_http_proxy_store,"char* ngx_http_proxy_store (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_proxy_module.c,"static char *
ngx_http_proxy_store(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_proxy_loc_conf_t *plcf = conf;

    ngx_str_t                  *value;
    ngx_http_script_compile_t   sc;

    if (plcf->upstream.store != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        plcf->upstream.store = 0;
        return NGX_CONF_OK;
    }

#if (NGX_HTTP_CACHE)
    if (plcf->upstream.cache > 0) {
        return ""is incompatible with \""proxy_cache\"""";
    }
#endif

    plcf->upstream.store = 1;

    if (ngx_strcmp(value[1].data, ""on"") == 0) {
        return NGX_CONF_OK;
    }

    /* include the terminating '\0' into script */
    value[1].len++;

    ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

    sc.cf = cf;
    sc.source = &value[1];
    sc.lengths = &plcf->upstream.store_lengths;
    sc.values = &plcf->upstream.store_values;
    sc.variables = ngx_http_script_variables_coun...",4708.0,4757.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5268,191147,ngx_http_proxy_lowat_check,1,ngx_http_proxy_lowat_check,"char* ngx_http_proxy_lowat_check (ngx_conf_t*,void*,void*)",http\modules\ngx_http_proxy_module.c,"static char *
ngx_http_proxy_lowat_check(ngx_conf_t *cf, void *post, void *data)
{
#if (NGX_FREEBSD)
    ssize_t *np = data;

    if ((u_long) *np >= ngx_freebsd_net_inet_tcp_sendspace) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""\""proxy_send_lowat\"" must be less than %d ""
                           ""(sysctl net.inet.tcp.sendspace)"",
                           ngx_freebsd_net_inet_tcp_sendspace);

        return NGX_CONF_ERROR;
    }

#elif !(NGX_HAVE_SO_SNDLOWAT)
    ssize_t *np = data;

    ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                       ""\""proxy_send_lowat\"" is not supported, ignored"");

    *np = 0;

#endif

    return NGX_CONF_OK;
}",4878.0,4904.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5269,191154,ngx_http_proxy_rewrite_regex,1,ngx_http_proxy_rewrite_regex,"ngx_int_t ngx_http_proxy_rewrite_regex (ngx_conf_t*,ngx_http_proxy_rewrite_t*,ngx_str_t*,ngx_uint_t)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_rewrite_regex(ngx_conf_t *cf, ngx_http_proxy_rewrite_t *pr,
    ngx_str_t *regex, ngx_uint_t caseless)
{
#if (NGX_PCRE)
    u_char               errstr[NGX_MAX_CONF_ERRSTR];
    ngx_regex_compile_t  rc;

    ngx_memzero(&rc, sizeof(ngx_regex_compile_t));

    rc.pattern = *regex;
    rc.err.len = NGX_MAX_CONF_ERRSTR;
    rc.err.data = errstr;

    if (caseless) {
        rc.options = NGX_REGEX_CASELESS;
    }

    pr->pattern.regex = ngx_http_regex_compile(cf, &rc);
    if (pr->pattern.regex == NULL) {
        return NGX_ERROR;
    }

    pr->handler = ngx_http_proxy_rewrite_regex_handler;

    return NGX_OK;

#else

    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                       ""using regex \""%V\"" requires PCRE library"", regex);
    return NGX_ERROR;

#endif
}",4671.0,4705.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5270,191162,ngx_http_proxy_set_vars,1,ngx_http_proxy_set_vars,"void ngx_http_proxy_set_vars (ngx_url_t*,ngx_http_proxy_vars_t*)",http\modules\ngx_http_proxy_module.c,"static void
ngx_http_proxy_set_vars(ngx_url_t *u, ngx_http_proxy_vars_t *v)
{
    if (u->family != AF_UNIX) {

        if (u->no_port || u->port == u->default_port) {

            v->host_header = u->host;

            if (u->default_port == 80) {
                ngx_str_set(&v->port, ""80"");

            } else {
                ngx_str_set(&v->port, ""443"");
            }

        } else {
            v->host_header.len = u->host.len + 1 + u->port_text.len;
            v->host_header.data = u->host.data;
            v->port = u->port_text;
        }

        v->key_start.len += v->host_header.len;

    } else {
        ngx_str_set(&v->host_header, ""localhost"");
        ngx_str_null(&v->port);
        v->key_start.len += sizeof(""unix:"") - 1 + u->host.len + 1;
    }

    v->uri = u->uri;
}",5023.0,5054.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5271,192176,ngx_http_proxy_handler,1,ngx_http_proxy_handler,ngx_int_t ngx_http_proxy_handler (ngx_http_request_t*),http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_handler(ngx_http_request_t *r)
{
    ngx_int_t                    rc;
    ngx_http_upstream_t         *u;
    ngx_http_proxy_ctx_t        *ctx;
    ngx_http_proxy_loc_conf_t   *plcf;
#if (NGX_HTTP_CACHE)
    ngx_http_proxy_main_conf_t  *pmcf;
#endif

    if (ngx_http_upstream_create(r) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_proxy_ctx_t));
    if (ctx == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ngx_http_set_ctx(r, ctx, ngx_http_proxy_module);

    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);

    u = r->upstream;

    if (plcf->proxy_lengths == NULL) {
        ctx->vars = plcf->vars;
        u->schema = plcf->vars.schema;
#if (NGX_HTTP_SSL)
        u->ssl = (plcf->upstream.ssl != NULL);
#endif

    } else {
        if (ngx_http_proxy_eval(r, ctx, plcf) != NGX_OK) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }
    }

    ...",932.0,1028.0,1.0,1.0,97.0,91,12,81,26,0,22,9,9,10,4,,0,22,2,1,1,ngx_int_t
5272,198972,ngx_http_proxy_rewrite_complex_handler,1,ngx_http_proxy_rewrite_complex_handler,"ngx_int_t ngx_http_proxy_rewrite_complex_handler (ngx_http_request_t*,ngx_str_t*,size_t,size_t,ngx_http_proxy_rewrite_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_rewrite_complex_handler(ngx_http_request_t *r, ngx_str_t *value,
    size_t prefix, size_t len, ngx_http_proxy_rewrite_t *pr)
{
    ngx_str_t  pattern, replacement;

    if (ngx_http_complex_value(r, &pr->pattern.complex, &pattern) != NGX_OK) {
        return NGX_ERROR;
    }

    if (pattern.len > len
        || ngx_rstrncmp(value->data + prefix, pattern.data, pattern.len) != 0)
    {
        return NGX_DECLINED;
    }

    if (ngx_http_complex_value(r, &pr->replacement, &replacement) != NGX_OK) {
        return NGX_ERROR;
    }

    return ngx_http_proxy_rewrite(r, value, prefix, pattern.len, &replacement);
}",3142.0,3163.0,1.0,1.0,22.0,19,7,22,10,0,9,4,4,7,4,,0,8,10,5,5,ngx_int_t
5273,199047,ngx_http_proxy_rewrite_domain_handler,1,ngx_http_proxy_rewrite_domain_handler,"ngx_int_t ngx_http_proxy_rewrite_domain_handler (ngx_http_request_t*,ngx_str_t*,size_t,size_t,ngx_http_proxy_rewrite_t*)",http\modules\ngx_http_proxy_module.c,"static ngx_int_t
ngx_http_proxy_rewrite_domain_handler(ngx_http_request_t *r, ngx_str_t *value,
    size_t prefix, size_t len, ngx_http_proxy_rewrite_t *pr)
{
    u_char     *p;
    ngx_str_t   pattern, replacement;

    if (ngx_http_complex_value(r, &pr->pattern.complex, &pattern) != NGX_OK) {
        return NGX_ERROR;
    }

    p = value->data + prefix;

    if (len && p[0] == '.') {
        p++;
        prefix++;
        len--;
    }

    if (pattern.len != len || ngx_rstrncasecmp(pattern.data, p, len) != 0) {
        return NGX_DECLINED;
    }

    if (ngx_http_complex_value(r, &pr->replacement, &replacement) != NGX_OK) {
        return NGX_ERROR;
    }

    return ngx_http_proxy_rewrite(r, value, prefix, len, &replacement);
}",3191.0,3219.0,1.0,1.0,29.0,24,12,29,11,0,7,5,5,5,4,,0,6,10,5,5,ngx_int_t
5274,203375,ngx_http_random_index_error,1,ngx_http_random_index_error,"ngx_int_t ngx_http_random_index_error (ngx_http_request_t*,ngx_dir_t*,ngx_str_t*)",http\modules\ngx_http_random_index_module.c,"static ngx_int_t
ngx_http_random_index_error(ngx_http_request_t *r, ngx_dir_t *dir,
    ngx_str_t *name)
{
    if (ngx_close_dir(dir) == NGX_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, ngx_errno,
                      ngx_close_dir_n "" \""%V\"" failed"", name);
    }

    return NGX_HTTP_INTERNAL_SERVER_ERROR;
}",260.0,270.0,1.0,1.0,11.0,0,0,0,0,7,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5275,203382,ngx_http_random_index_init,1,ngx_http_random_index_init,ngx_int_t ngx_http_random_index_init (ngx_conf_t*),http\modules\ngx_http_random_index_module.c,"static ngx_int_t
ngx_http_random_index_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_CONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_random_index_handler;

    return NGX_OK;
}",301.0,317.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5276,203387,ngx_http_random_index_create_loc_conf,1,ngx_http_random_index_create_loc_conf,void* ngx_http_random_index_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_random_index_module.c,"static void *
ngx_http_random_index_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_random_index_loc_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_random_index_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->enable = NGX_CONF_UNSET;

    return conf;
}",273.0,286.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5277,203392,ngx_http_random_index_merge_loc_conf,1,ngx_http_random_index_merge_loc_conf,"char* ngx_http_random_index_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_random_index_module.c,"static char *
ngx_http_random_index_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_random_index_loc_conf_t *prev = parent;
    ngx_http_random_index_loc_conf_t *conf = child;

    ngx_conf_merge_value(conf->enable, prev->enable, 0);

    return NGX_CONF_OK;
}",289.0,298.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5278,203445,ngx_http_random_index_handler,1,ngx_http_random_index_handler,ngx_int_t ngx_http_random_index_handler (ngx_http_request_t*),http\modules\ngx_http_random_index_module.c,"static ngx_int_t
ngx_http_random_index_handler(ngx_http_request_t *r)
{
    u_char                            *last, *filename;
    size_t                             len, allocated, root;
    ngx_err_t                          err;
    ngx_int_t                          rc;
    ngx_str_t                          path, uri, *name;
    ngx_dir_t                          dir;
    ngx_uint_t                         n, level;
    ngx_array_t                        names;
    ngx_http_random_index_loc_conf_t  *rlcf;

    if (r->uri.data[r->uri.len - 1] != '/') {
        return NGX_DECLINED;
    }

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD|NGX_HTTP_POST))) {
        return NGX_DECLINED;
    }

    rlcf = ngx_http_get_module_loc_conf(r, ngx_http_random_index_module);

    if (!rlcf->enable) {
        return NGX_DECLINED;
    }

#if (NGX_HAVE_D_TYPE)
    len = 0;
#else
    len = NGX_HTTP_RANDOM_INDEX_PREALLOCATE;
#endif

    last = ngx_http_map_uri_to_path(r, &path, &root, len);
   ...",73.0,257.0,1.0,10.0,185.0,164,20,167,35,0,47,27,46,11,21,,0,38,2,1,1,ngx_int_t
5279,204128,ngx_http_range_parse,1,ngx_http_range_parse,"ngx_int_t ngx_http_range_parse (ngx_http_request_t*,ngx_http_range_filter_ctx_t*,ngx_uint_t)",http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_parse(ngx_http_request_t *r, ngx_http_range_filter_ctx_t *ctx,
    ngx_uint_t ranges)
{
    u_char                       *p;
    off_t                         start, end, size, content_length, cutoff,
                                  cutlim;
    ngx_uint_t                    suffix;
    ngx_http_range_t             *range;
    ngx_http_range_filter_ctx_t  *mctx;

    if (r != r->main) {
        mctx = ngx_http_get_module_ctx(r->main,
                                       ngx_http_range_body_filter_module);
        if (mctx) {
            ctx->ranges = mctx->ranges;
            return NGX_OK;
        }
    }

    if (ngx_array_init(&ctx->ranges, r->pool, 1, sizeof(ngx_http_range_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    p = r->headers_in.range->value.data + 6;
    size = 0;
    content_length = r->headers_out.content_length_n;

    cutoff = NGX_MAX_OFF_T_VALUE / 10;
    cutlim = NGX_MAX_OFF_T_VALUE % 10;

    for ( ;; ) {
    ...",268.0,408.0,1.0,1.0,141.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5280,204135,ngx_http_range_singlepart_header,1,ngx_http_range_singlepart_header,"ngx_int_t ngx_http_range_singlepart_header (ngx_http_request_t*,ngx_http_range_filter_ctx_t*)",http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_singlepart_header(ngx_http_request_t *r,
    ngx_http_range_filter_ctx_t *ctx)
{
    ngx_table_elt_t   *content_range;
    ngx_http_range_t  *range;

    if (r != r->main) {
        return ngx_http_next_header_filter(r);
    }

    content_range = ngx_list_push(&r->headers_out.headers);
    if (content_range == NULL) {
        return NGX_ERROR;
    }

    r->headers_out.content_range = content_range;

    content_range->hash = 1;
    ngx_str_set(&content_range->key, ""Content-Range"");

    content_range->value.data = ngx_pnalloc(r->pool,
                                    sizeof(""bytes -/"") - 1 + 3 * NGX_OFF_T_LEN);
    if (content_range->value.data == NULL) {
        content_range->hash = 0;
        r->headers_out.content_range = NULL;
        return NGX_ERROR;
    }

    /* ""Content-Range: bytes SSSS-EEEE/TTTT"" header */

    range = ctx->ranges.elts;

    content_range->value.len = ngx_sprintf(content_range->value.data,
                            ...",411.0,459.0,1.0,1.0,49.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5281,204141,ngx_http_range_multipart_header,1,ngx_http_range_multipart_header,"ngx_int_t ngx_http_range_multipart_header (ngx_http_request_t*,ngx_http_range_filter_ctx_t*)",http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_multipart_header(ngx_http_request_t *r,
    ngx_http_range_filter_ctx_t *ctx)
{
    off_t               len;
    size_t              size;
    ngx_uint_t          i;
    ngx_http_range_t   *range;
    ngx_atomic_uint_t   boundary;

    size = sizeof(CRLF ""--"") - 1 + NGX_ATOMIC_T_LEN
           + sizeof(CRLF ""Content-Type: "") - 1
           + r->headers_out.content_type.len
           + sizeof(CRLF ""Content-Range: bytes "") - 1;

    if (r->headers_out.content_type_len == r->headers_out.content_type.len
        && r->headers_out.charset.len)
    {
        size += sizeof(""; charset="") - 1 + r->headers_out.charset.len;
    }

    ctx->boundary_header.data = ngx_pnalloc(r->pool, size);
    if (ctx->boundary_header.data == NULL) {
        return NGX_ERROR;
    }

    boundary = ngx_next_temp_number(0);

    /*
     * The boundary header of the range:
     * CRLF
     * ""--0123456789"" CRLF
     * ""Content-Type: image/jpeg"" CRLF
     * ""Content-Range: bytes ""...",462.0,584.0,1.0,1.0,123.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5282,204147,ngx_http_range_not_satisfiable,1,ngx_http_range_not_satisfiable,ngx_int_t ngx_http_range_not_satisfiable (ngx_http_request_t*),http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_not_satisfiable(ngx_http_request_t *r)
{
    ngx_table_elt_t  *content_range;

    r->headers_out.status = NGX_HTTP_RANGE_NOT_SATISFIABLE;

    content_range = ngx_list_push(&r->headers_out.headers);
    if (content_range == NULL) {
        return NGX_ERROR;
    }

    r->headers_out.content_range = content_range;

    content_range->hash = 1;
    ngx_str_set(&content_range->key, ""Content-Range"");

    content_range->value.data = ngx_pnalloc(r->pool,
                                       sizeof(""bytes */"") - 1 + NGX_OFF_T_LEN);
    if (content_range->value.data == NULL) {
        content_range->hash = 0;
        r->headers_out.content_range = NULL;
        return NGX_ERROR;
    }

    content_range->value.len = ngx_sprintf(content_range->value.data,
                                           ""bytes */%O"",
                                           r->headers_out.content_length_n)
                               - content_range->value.data;

    ngx_ht...",587.0,620.0,1.0,1.0,34.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5283,204152,ngx_http_range_test_overlapped,1,ngx_http_range_test_overlapped,"ngx_int_t ngx_http_range_test_overlapped (ngx_http_request_t*,ngx_http_range_filter_ctx_t*,ngx_chain_t*)",http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_test_overlapped(ngx_http_request_t *r,
    ngx_http_range_filter_ctx_t *ctx, ngx_chain_t *in)
{
    off_t              start, last;
    ngx_buf_t         *buf;
    ngx_uint_t         i;
    ngx_http_range_t  *range;

    if (ctx->offset) {
        goto overlapped;
    }

    buf = in->buf;

    if (!buf->last_buf) {
        start = ctx->offset;
        last = ctx->offset + ngx_buf_size(buf);

        range = ctx->ranges.elts;
        for (i = 0; i < ctx->ranges.nelts; i++) {
            if (start > range[i].start || last < range[i].end) {
                goto overlapped;
            }
        }
    }

    ctx->offset = ngx_buf_size(buf);

    return NGX_OK;

overlapped:

    ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                  ""range in overlapped buffers"");

    return NGX_ERROR;
}",658.0,695.0,1.0,1.0,38.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5284,204159,ngx_http_range_singlepart_body,1,ngx_http_range_singlepart_body,"ngx_int_t ngx_http_range_singlepart_body (ngx_http_request_t*,ngx_http_range_filter_ctx_t*,ngx_chain_t*)",http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_singlepart_body(ngx_http_request_t *r,
    ngx_http_range_filter_ctx_t *ctx, ngx_chain_t *in)
{
    off_t              start, last;
    ngx_int_t          rc;
    ngx_buf_t         *buf;
    ngx_chain_t       *out, *cl, *tl, **ll;
    ngx_http_range_t  *range;

    out = NULL;
    ll = &out;
    range = ctx->ranges.elts;

    for (cl = in; cl; cl = cl->next) {

        buf = cl->buf;

        start = ctx->offset;
        last = ctx->offset + ngx_buf_size(buf);

        ctx->offset = last;

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http range body buf: %O-%O"", start, last);

        if (ngx_buf_special(buf)) {

            if (range->end <= start) {
                continue;
            }

            tl = ngx_alloc_chain_link(r->pool);
            if (tl == NULL) {
                return NGX_ERROR;
            }

            tl->buf = buf;
            tl->next = NULL;

            *ll = tl;
            l...",698.0,818.0,1.0,1.0,121.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5285,204166,ngx_http_range_multipart_body,1,ngx_http_range_multipart_body,"ngx_int_t ngx_http_range_multipart_body (ngx_http_request_t*,ngx_http_range_filter_ctx_t*,ngx_chain_t*)",http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_multipart_body(ngx_http_request_t *r,
    ngx_http_range_filter_ctx_t *ctx, ngx_chain_t *in)
{
    ngx_buf_t         *b, *buf;
    ngx_uint_t         i;
    ngx_chain_t       *out, *hcl, *rcl, *dcl, **ll;
    ngx_http_range_t  *range;

    ll = &out;
    buf = in->buf;
    range = ctx->ranges.elts;

    for (i = 0; i < ctx->ranges.nelts; i++) {

        /*
         * The boundary header of the range:
         * CRLF
         * ""--0123456789"" CRLF
         * ""Content-Type: image/jpeg"" CRLF
         * ""Content-Range: bytes ""
         */

        b = ngx_calloc_buf(r->pool);
        if (b == NULL) {
            return NGX_ERROR;
        }

        b->memory = 1;
        b->pos = ctx->boundary_header.data;
        b->last = ctx->boundary_header.data + ctx->boundary_header.len;

        hcl = ngx_alloc_chain_link(r->pool);
        if (hcl == NULL) {
            return NGX_ERROR;
        }

        hcl->buf = b;


        /* ""SSSS-EEEE/TTTT"" CRLF CRLF */

 ...",821.0,948.0,1.0,1.0,128.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5286,204173,ngx_http_range_header_filter_init,1,ngx_http_range_header_filter_init,ngx_int_t ngx_http_range_header_filter_init (ngx_conf_t*),http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_header_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_range_header_filter;

    return NGX_OK;
}",951.0,958.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5287,204178,ngx_http_range_body_filter_init,1,ngx_http_range_body_filter_init,ngx_int_t ngx_http_range_body_filter_init (ngx_conf_t*),http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_body_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_range_body_filter;

    return NGX_OK;
}",961.0,968.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5288,204243,ngx_http_range_header_filter,1,ngx_http_range_header_filter,ngx_int_t ngx_http_range_header_filter (ngx_http_request_t*),http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_header_filter(ngx_http_request_t *r)
{
    time_t                        if_range_time;
    ngx_str_t                    *if_range, *etag;
    ngx_uint_t                    ranges;
    ngx_http_core_loc_conf_t     *clcf;
    ngx_http_range_filter_ctx_t  *ctx;

    if (r->http_version < NGX_HTTP_VERSION_10
        || r->headers_out.status != NGX_HTTP_OK
        || (r != r->main && !r->subrequest_ranges)
        || r->headers_out.content_length_n == -1
        || !r->allow_ranges)
    {
        return ngx_http_next_header_filter(r);
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->max_ranges == 0) {
        return ngx_http_next_header_filter(r);
    }

    if (r->headers_in.range == NULL
        || r->headers_in.range->value.len < 7
        || ngx_strncasecmp(r->headers_in.range->value.data,
                           (u_char *) ""bytes="", 6)
           != 0)
    {
        goto next_filter;
    }

    if (r->headers...",146.0,265.0,1.0,1.0,120.0,129,17,88,19,0,22,21,22,11,8,,0,19,2,1,1,ngx_int_t
5289,205660,ngx_http_range_body_filter,1,ngx_http_range_body_filter,"ngx_int_t ngx_http_range_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_range_filter_module.c,"static ngx_int_t
ngx_http_range_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_http_range_filter_ctx_t  *ctx;

    if (in == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_range_body_filter_module);

    if (ctx == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    if (ctx->ranges.nelts == 1) {
        return ngx_http_range_singlepart_body(r, ctx, in);
    }

    /*
     * multipart ranges are supported only if whole body is in a single buffer
     */

    if (ngx_buf_special(in->buf)) {
        return ngx_http_next_body_filter(r, in);
    }

    if (ngx_http_range_test_overlapped(r, ctx, in) != NGX_OK) {
        return NGX_ERROR;
    }

    return ngx_http_range_multipart_body(r, ctx, in);
}",623.0,655.0,1.0,1.0,33.0,8,5,26,7,0,5,6,6,2,3,,0,3,4,2,2,ngx_int_t
5290,206645,ngx_http_realip_handler,1,ngx_http_realip_handler,ngx_int_t ngx_http_realip_handler (ngx_http_request_t*),http\modules\ngx_http_realip_module.c,"static ngx_int_t
ngx_http_realip_handler(ngx_http_request_t *r)
{
    u_char                      *p;
    size_t                       len;
    ngx_str_t                   *value;
    ngx_uint_t                   i, hash;
    ngx_addr_t                   addr;
    ngx_array_t                 *xfwd;
    ngx_list_part_t             *part;
    ngx_table_elt_t             *header;
    ngx_connection_t            *c;
    ngx_http_realip_ctx_t       *ctx;
    ngx_http_realip_loc_conf_t  *rlcf;

    rlcf = ngx_http_get_module_loc_conf(r, ngx_http_realip_module);

    if (rlcf->from == NULL) {
        return NGX_DECLINED;
    }

    ctx = ngx_http_realip_get_module_ctx(r);

    if (ctx) {
        return NGX_DECLINED;
    }

    switch (rlcf->type) {

    case NGX_HTTP_REALIP_XREALIP:

        if (r->headers_in.x_real_ip == NULL) {
            return NGX_DECLINED;
        }

        value = &r->headers_in.x_real_ip->value;
        xfwd = NULL;

        break;

    case NGX_HTTP_REALIP_XFWD:
...",129.0,247.0,1.0,9.0,119.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5291,206650,ngx_http_realip_set_addr,1,ngx_http_realip_set_addr,"ngx_int_t ngx_http_realip_set_addr (ngx_http_request_t*,ngx_addr_t*)",http\modules\ngx_http_realip_module.c,"static ngx_int_t
ngx_http_realip_set_addr(ngx_http_request_t *r, ngx_addr_t *addr)
{
    size_t                  len;
    u_char                 *p;
    u_char                  text[NGX_SOCKADDR_STRLEN];
    ngx_connection_t       *c;
    ngx_pool_cleanup_t     *cln;
    ngx_http_realip_ctx_t  *ctx;

    cln = ngx_pool_cleanup_add(r->pool, sizeof(ngx_http_realip_ctx_t));
    if (cln == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ctx = cln->data;

    c = r->connection;

    len = ngx_sock_ntop(addr->sockaddr, addr->socklen, text,
                        NGX_SOCKADDR_STRLEN, 0);
    if (len == 0) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    p = ngx_pnalloc(c->pool, len);
    if (p == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ngx_memcpy(p, text, len);

    cln->handler = ngx_http_realip_cleanup;
    ngx_http_set_ctx(r, ctx, ngx_http_realip_module);

    ctx->connection = c;
    ctx->sockaddr = c->sockaddr;
    ctx->socklen =...",250.0,296.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5292,206656,ngx_http_realip_cleanup,1,ngx_http_realip_cleanup,void ngx_http_realip_cleanup (void*),http\modules\ngx_http_realip_module.c,"static void
ngx_http_realip_cleanup(void *data)
{
    ngx_http_realip_ctx_t *ctx = data;

    ngx_connection_t  *c;

    c = ctx->connection;

    c->sockaddr = ctx->sockaddr;
    c->socklen = ctx->socklen;
    c->addr_text = ctx->addr_text;
}",299.0,311.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5293,206661,ngx_http_realip_from,1,ngx_http_realip_from,"char* ngx_http_realip_from (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_realip_module.c,"static char *
ngx_http_realip_from(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_realip_loc_conf_t *rlcf = conf;

    ngx_int_t             rc;
    ngx_str_t            *value;
    ngx_url_t             u;
    ngx_cidr_t            c, *cidr;
    ngx_uint_t            i;
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    value = cf->args->elts;

    if (rlcf->from == NULL) {
        rlcf->from = ngx_array_create(cf->pool, 2,
                                      sizeof(ngx_cidr_t));
        if (rlcf->from == NULL) {
            return NGX_CONF_ERROR;
        }
    }

#if (NGX_HAVE_UNIX_DOMAIN)

    if (ngx_strcmp(value[1].data, ""unix:"") == 0) {
        cidr = ngx_array_push(rlcf->from);
        if (cidr == NULL) {
            return NGX_CONF_ERROR;
        }

        cidr->family = AF_UNIX;
        return NGX_CONF_OK;
    }

#endif

    rc = ngx_ptocidr(&value[1], &c);

    if (rc != NGX_ERROR) {
        if (rc == NGX_DONE...",314.0,414.0,1.0,1.0,101.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5294,206668,ngx_http_realip,1,ngx_http_realip,"char* ngx_http_realip (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_realip_module.c,"static char *
ngx_http_realip(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_realip_loc_conf_t *rlcf = conf;

    ngx_str_t  *value;

    if (rlcf->type != NGX_CONF_UNSET_UINT) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""X-Real-IP"") == 0) {
        rlcf->type = NGX_HTTP_REALIP_XREALIP;
        return NGX_CONF_OK;
    }

    if (ngx_strcmp(value[1].data, ""X-Forwarded-For"") == 0) {
        rlcf->type = NGX_HTTP_REALIP_XFWD;
        return NGX_CONF_OK;
    }

    if (ngx_strcmp(value[1].data, ""proxy_protocol"") == 0) {
        rlcf->type = NGX_HTTP_REALIP_PROXY;
        return NGX_CONF_OK;
    }

    rlcf->type = NGX_HTTP_REALIP_HEADER;
    rlcf->hash = ngx_hash_strlow(value[1].data, value[1].data, value[1].len);
    rlcf->header = value[1];

    return NGX_CONF_OK;
}",417.0,450.0,1.0,21.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5295,206675,ngx_http_realip_create_loc_conf,1,ngx_http_realip_create_loc_conf,void* ngx_http_realip_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_realip_module.c,"static void *
ngx_http_realip_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_realip_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_realip_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->from = NULL;
     *     conf->hash = 0;
     *     conf->header = { 0, NULL };
     */

    conf->type = NGX_CONF_UNSET_UINT;
    conf->recursive = NGX_CONF_UNSET;

    return conf;
}",453.0,475.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5296,206680,ngx_http_realip_merge_loc_conf,1,ngx_http_realip_merge_loc_conf,"char* ngx_http_realip_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_realip_module.c,"static char *
ngx_http_realip_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_realip_loc_conf_t  *prev = parent;
    ngx_http_realip_loc_conf_t  *conf = child;

    if (conf->from == NULL) {
        conf->from = prev->from;
    }

    ngx_conf_merge_uint_value(conf->type, prev->type, NGX_HTTP_REALIP_XREALIP);
    ngx_conf_merge_value(conf->recursive, prev->recursive, 0);

    if (conf->header.len == 0) {
        conf->hash = prev->hash;
        conf->header = prev->header;
    }

    return NGX_CONF_OK;
}",478.0,497.0,1.0,54.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5297,206687,ngx_http_realip_add_variables,1,ngx_http_realip_add_variables,ngx_int_t ngx_http_realip_add_variables (ngx_conf_t*),http\modules\ngx_http_realip_module.c,"static ngx_int_t
ngx_http_realip_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_realip_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",500.0,516.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5298,206692,ngx_http_realip_init,1,ngx_http_realip_init,ngx_int_t ngx_http_realip_init (ngx_conf_t*),http\modules\ngx_http_realip_module.c,"static ngx_int_t
ngx_http_realip_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_POST_READ_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_realip_handler;

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_PREACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_realip_handler;

    return NGX_OK;
}",519.0,542.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5299,206697,ngx_http_realip_get_module_ctx,1,ngx_http_realip_get_module_ctx,ngx_http_realip_ctx_t* ngx_http_realip_get_module_ctx (ngx_http_request_t*),http\modules\ngx_http_realip_module.c,"static ngx_http_realip_ctx_t *
ngx_http_realip_get_module_ctx(ngx_http_request_t *r)
{
    ngx_pool_cleanup_t     *cln;
    ngx_http_realip_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_realip_module);

    if (ctx == NULL && (r->internal || r->filter_finalize)) {

        /*
         * if module context was reset, the original address
         * can still be found in the cleanup handler
         */

        for (cln = r->pool->cleanup; cln; cln = cln->next) {
            if (cln->handler == ngx_http_realip_cleanup) {
                ctx = cln->data;
                break;
            }
        }
    }

    return ctx;
}",545.0,569.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_http_realip_ctx_t
5300,206702,ngx_http_realip_remote_addr_variable,1,ngx_http_realip_remote_addr_variable,"ngx_int_t ngx_http_realip_remote_addr_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_realip_module.c,"static ngx_int_t
ngx_http_realip_remote_addr_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_str_t              *addr_text;
    ngx_http_realip_ctx_t  *ctx;

    ctx = ngx_http_realip_get_module_ctx(r);

    addr_text = ctx ? &ctx->addr_text : &r->connection->addr_text;

    v->len = addr_text->len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = addr_text->data;

    return NGX_OK;
}",572.0,590.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5301,206709,ngx_http_realip_remote_port_variable,1,ngx_http_realip_remote_port_variable,"ngx_int_t ngx_http_realip_remote_port_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_realip_module.c,"static ngx_int_t
ngx_http_realip_remote_port_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t              port;
    struct sockaddr        *sa;
    ngx_http_realip_ctx_t  *ctx;

    ctx = ngx_http_realip_get_module_ctx(r);

    sa = ctx ? ctx->sockaddr : r->connection->sockaddr;

    v->len = 0;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = ngx_pnalloc(r->pool, sizeof(""65535"") - 1);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    port = ngx_inet_get_port(sa);

    if (port > 0 && port < 65536) {
        v->len = ngx_sprintf(v->data, ""%ui"", port) - v->data;
    }

    return NGX_OK;
}",593.0,622.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5302,208107,ngx_http_referer_add_variables,1,ngx_http_referer_add_variables,ngx_int_t ngx_http_referer_add_variables (ngx_conf_t*),http\modules\ngx_http_referer_module.c,"static ngx_int_t
ngx_http_referer_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var;

    var = ngx_http_add_variable(cf, &ngx_http_invalid_referer_name,
                                NGX_HTTP_VAR_CHANGEABLE);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = ngx_http_referer_variable;

    return NGX_OK;
}",270.0,284.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5303,208112,ngx_http_referer_create_conf,1,ngx_http_referer_create_conf,void* ngx_http_referer_create_conf (ngx_conf_t*),http\modules\ngx_http_referer_module.c,"static void *
ngx_http_referer_create_conf(ngx_conf_t *cf)
{
    ngx_http_referer_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_referer_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->hash = { NULL };
     *     conf->server_names = 0;
     *     conf->keys = NULL;
     */

#if (NGX_PCRE)
    conf->regex = NGX_CONF_UNSET_PTR;
    conf->server_name_regex = NGX_CONF_UNSET_PTR;
#endif

    conf->no_referer = NGX_CONF_UNSET;
    conf->blocked_referer = NGX_CONF_UNSET;
    conf->referer_hash_max_size = NGX_CONF_UNSET_UINT;
    conf->referer_hash_bucket_size = NGX_CONF_UNSET_UINT;

    return conf;
}",287.0,316.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5304,208117,ngx_http_referer_merge_conf,1,ngx_http_referer_merge_conf,"char* ngx_http_referer_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_referer_module.c,"static char *
ngx_http_referer_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_referer_conf_t *prev = parent;
    ngx_http_referer_conf_t *conf = child;

    ngx_uint_t                 n;
    ngx_hash_init_t            hash;
    ngx_http_server_name_t    *sn;
    ngx_http_core_srv_conf_t  *cscf;

    if (conf->keys == NULL) {
        conf->hash = prev->hash;

#if (NGX_PCRE)
        ngx_conf_merge_ptr_value(conf->regex, prev->regex, NULL);
        ngx_conf_merge_ptr_value(conf->server_name_regex,
                                 prev->server_name_regex, NULL);
#endif
        ngx_conf_merge_value(conf->no_referer, prev->no_referer, 0);
        ngx_conf_merge_value(conf->blocked_referer, prev->blocked_referer, 0);
        ngx_conf_merge_uint_value(conf->referer_hash_max_size,
                                  prev->referer_hash_max_size, 2048);
        ngx_conf_merge_uint_value(conf->referer_hash_bucket_size,
                                  prev->referer_hash_buc...",319.0,468.0,1.0,1.0,150.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5305,208124,ngx_http_valid_referers,1,ngx_http_valid_referers,"char* ngx_http_valid_referers (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_referer_module.c,"static char *
ngx_http_valid_referers(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_referer_conf_t  *rlcf = conf;

    u_char      *p;
    ngx_str_t   *value, uri;
    ngx_uint_t   i;

    if (rlcf->keys == NULL) {
        rlcf->keys = ngx_pcalloc(cf->temp_pool, sizeof(ngx_hash_keys_arrays_t));
        if (rlcf->keys == NULL) {
            return NGX_CONF_ERROR;
        }

        rlcf->keys->pool = cf->pool;
        rlcf->keys->temp_pool = cf->pool;

        if (ngx_hash_keys_array_init(rlcf->keys, NGX_HASH_SMALL) != NGX_OK) {
            return NGX_CONF_ERROR;
        }
    }

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {
        if (value[i].len == 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid referer \""%V\"""", &value[i]);
            return NGX_CONF_ERROR;
        }

        if (ngx_strcmp(value[i].data, ""none"") == 0) {
            rlcf->no_referer = 1;
            continue;
        }
...",471.0,542.0,1.0,1.0,72.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5306,208131,ngx_http_add_referer,1,ngx_http_add_referer,"ngx_int_t ngx_http_add_referer (ngx_conf_t*,ngx_hash_keys_arrays_t*,ngx_str_t*,ngx_str_t*)",http\modules\ngx_http_referer_module.c,"static ngx_int_t
ngx_http_add_referer(ngx_conf_t *cf, ngx_hash_keys_arrays_t *keys,
    ngx_str_t *value, ngx_str_t *uri)
{
    ngx_int_t   rc;
    ngx_str_t  *u;

    if (uri == NULL || uri->len == 0) {
        u = NGX_HTTP_REFERER_NO_URI_PART;

    } else {
        u = ngx_palloc(cf->pool, sizeof(ngx_str_t));
        if (u == NULL) {
            return NGX_ERROR;
        }

        *u = *uri;
    }

    rc = ngx_hash_add_key(keys, value, u, NGX_HASH_WILDCARD_KEY);

    if (rc == NGX_OK) {
        return NGX_OK;
    }

    if (rc == NGX_DECLINED) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid hostname or wildcard \""%V\"""", value);
    }

    if (rc == NGX_BUSY) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""conflicting parameter \""%V\"""", value);
    }

    return NGX_ERROR;
}",545.0,581.0,1.0,12.0,37.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5307,208139,ngx_http_add_regex_referer,1,ngx_http_add_regex_referer,"ngx_int_t ngx_http_add_regex_referer (ngx_conf_t*,ngx_http_referer_conf_t*,ngx_str_t*)",http\modules\ngx_http_referer_module.c,"static ngx_int_t
ngx_http_add_regex_referer(ngx_conf_t *cf, ngx_http_referer_conf_t *rlcf,
    ngx_str_t *name)
{
#if (NGX_PCRE)
    ngx_regex_elt_t      *re;
    ngx_regex_compile_t   rc;
    u_char                errstr[NGX_MAX_CONF_ERRSTR];

    if (name->len == 1) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, ""empty regex in \""%V\"""", name);
        return NGX_ERROR;
    }

    if (rlcf->regex == NGX_CONF_UNSET_PTR) {
        rlcf->regex = ngx_array_create(cf->pool, 2, sizeof(ngx_regex_elt_t));
        if (rlcf->regex == NULL) {
            return NGX_ERROR;
        }
    }

    re = ngx_array_push(rlcf->regex);
    if (re == NULL) {
        return NGX_ERROR;
    }

    name->len--;
    name->data++;

    ngx_memzero(&rc, sizeof(ngx_regex_compile_t));

    rc.pattern = *name;
    rc.pool = cf->pool;
    rc.options = NGX_REGEX_CASELESS;
    rc.err.len = NGX_MAX_CONF_ERRSTR;
    rc.err.data = errstr;

    if (ngx_regex_compile(&rc) != NGX_OK) {
        ngx_conf_log_error(NGX_L...",584.0,640.0,1.0,1.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5308,208226,ngx_http_referer_variable,1,ngx_http_referer_variable,"ngx_int_t ngx_http_referer_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_referer_module.c,"static ngx_int_t
ngx_http_referer_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    u_char                    *p, *ref, *last;
    size_t                     len;
    ngx_str_t                 *uri;
    ngx_uint_t                 i, key;
    ngx_http_referer_conf_t   *rlcf;
    u_char                     buf[256];
#if (NGX_PCRE)
    ngx_int_t                  rc;
    ngx_str_t                  referer;
#endif

    rlcf = ngx_http_get_module_loc_conf(r, ngx_http_referer_module);

    if (rlcf->hash.hash.buckets == NULL
        && rlcf->hash.wc_head == NULL
        && rlcf->hash.wc_tail == NULL
#if (NGX_PCRE)
        && rlcf->regex == NULL
        && rlcf->server_name_regex == NULL
#endif
       )
    {
        goto valid;
    }

    if (r->headers_in.referer == NULL) {
        if (rlcf->no_referer) {
            goto valid;
        }

        goto invalid;
    }

    len = r->headers_in.referer->value.len;
    ref = r->headers_in.referer->value.d...",114.0,267.0,1.0,15.0,154.0,74,19,65,16,0,12,27,20,9,2,,0,12,6,3,3,ngx_int_t
5309,209389,ngx_http_cmp_referer_wildcards,1,ngx_http_cmp_referer_wildcards,"ANY ngx_http_cmp_referer_wildcards (void*,void*)",http\modules\ngx_http_referer_module.c,"ngx_http_cmp_referer_wildcards(const void *one, const void *two)
{
    ngx_hash_key_t  *first, *second;

    first = (ngx_hash_key_t *) one;
    second = (ngx_hash_key_t *) two;

    return ngx_dns_strcmp(first->key.data, second->key.data);
}",674.0,682.0,1.0,1.0,9.0,8,4,6,4,0,3,1,1,0,1,,0,2,4,2,2,ANY
5310,209436,ngx_http_rewrite_create_loc_conf,1,ngx_http_rewrite_create_loc_conf,void* ngx_http_rewrite_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_rewrite_module.c,"static void *
ngx_http_rewrite_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_rewrite_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_rewrite_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->stack_size = NGX_CONF_UNSET_UINT;
    conf->log = NGX_CONF_UNSET;
    conf->uninitialized_variable_warn = NGX_CONF_UNSET;

    return conf;
}",221.0,236.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5311,209441,ngx_http_rewrite_merge_loc_conf,1,ngx_http_rewrite_merge_loc_conf,"char* ngx_http_rewrite_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_rewrite_loc_conf_t *prev = parent;
    ngx_http_rewrite_loc_conf_t *conf = child;

    uintptr_t  *code;

    ngx_conf_merge_value(conf->log, prev->log, 0);
    ngx_conf_merge_value(conf->uninitialized_variable_warn,
                         prev->uninitialized_variable_warn, 1);
    ngx_conf_merge_uint_value(conf->stack_size, prev->stack_size, 10);

    if (conf->codes == NULL) {
        return NGX_CONF_OK;
    }

    if (conf->codes == prev->codes) {
        return NGX_CONF_OK;
    }

    code = ngx_array_push_n(conf->codes, sizeof(uintptr_t));
    if (code == NULL) {
        return NGX_CONF_ERROR;
    }

    *code = (uintptr_t) NULL;

    return NGX_CONF_OK;
}",239.0,268.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5312,209448,ngx_http_rewrite_init,1,ngx_http_rewrite_init,ngx_int_t ngx_http_rewrite_init (ngx_conf_t*),http\modules\ngx_http_rewrite_module.c,"static ngx_int_t
ngx_http_rewrite_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_SERVER_REWRITE_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_rewrite_handler;

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_REWRITE_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_rewrite_handler;

    return NGX_OK;
}",271.0,294.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5313,209453,ngx_http_rewrite,1,ngx_http_rewrite,"char* ngx_http_rewrite (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_rewrite_loc_conf_t  *lcf = conf;

    ngx_str_t                         *value;
    ngx_uint_t                         last;
    ngx_regex_compile_t                rc;
    ngx_http_script_code_pt           *code;
    ngx_http_script_compile_t          sc;
    ngx_http_script_regex_code_t      *regex;
    ngx_http_script_regex_end_code_t  *regex_end;
    u_char                             errstr[NGX_MAX_CONF_ERRSTR];

    regex = ngx_http_script_start_code(cf->pool, &lcf->codes,
                                       sizeof(ngx_http_script_regex_code_t));
    if (regex == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_memzero(regex, sizeof(ngx_http_script_regex_code_t));

    value = cf->args->elts;

    if (value[2].len == 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, ""empty replacement"");
        return NGX_CONF_ERROR;
    }

    ngx_memzero(&rc, sizeof(ngx_regex_compile_t))...",297.0,438.0,1.0,1.0,142.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5314,209460,ngx_http_rewrite_return,1,ngx_http_rewrite_return,"char* ngx_http_rewrite_return (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite_return(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_rewrite_loc_conf_t  *lcf = conf;

    u_char                            *p;
    ngx_str_t                         *value, *v;
    ngx_http_script_return_code_t     *ret;
    ngx_http_compile_complex_value_t   ccv;

    ret = ngx_http_script_start_code(cf->pool, &lcf->codes,
                                     sizeof(ngx_http_script_return_code_t));
    if (ret == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    ngx_memzero(ret, sizeof(ngx_http_script_return_code_t));

    ret->code = ngx_http_script_return_code;

    p = value[1].data;

    ret->status = ngx_atoi(p, value[1].len);

    if (ret->status == (uintptr_t) NGX_ERROR) {

        if (cf->args->nelts == 2
            && (ngx_strncmp(p, ""http://"", sizeof(""http://"") - 1) == 0
                || ngx_strncmp(p, ""https://"", sizeof(""https://"") - 1) == 0
                || ngx_strncmp(p, ""$scheme"", size...",441.0,509.0,1.0,1.0,69.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5315,209467,ngx_http_rewrite_break,1,ngx_http_rewrite_break,"char* ngx_http_rewrite_break (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite_break(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_rewrite_loc_conf_t *lcf = conf;

    ngx_http_script_code_pt  *code;

    code = ngx_http_script_start_code(cf->pool, &lcf->codes, sizeof(uintptr_t));
    if (code == NULL) {
        return NGX_CONF_ERROR;
    }

    *code = ngx_http_script_break_code;

    return NGX_CONF_OK;
}",512.0,527.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5316,209474,ngx_http_rewrite_if,1,ngx_http_rewrite_if,"char* ngx_http_rewrite_if (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite_if(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_rewrite_loc_conf_t  *lcf = conf;

    void                         *mconf;
    char                         *rv;
    u_char                       *elts;
    ngx_uint_t                    i;
    ngx_conf_t                    save;
    ngx_http_module_t            *module;
    ngx_http_conf_ctx_t          *ctx, *pctx;
    ngx_http_core_loc_conf_t     *clcf, *pclcf;
    ngx_http_script_if_code_t    *if_code;
    ngx_http_rewrite_loc_conf_t  *nlcf;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    pctx = cf->ctx;
    ctx->main_conf = pctx->main_conf;
    ctx->srv_conf = pctx->srv_conf;

    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
    if (ctx->loc_conf == NULL) {
        return NGX_CONF_ERROR;
    }

    for (i = 0; cf->cycle->modules[i]; i++) {
        if (cf->cycle->modules[i]-...",530.0,643.0,1.0,1.0,114.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5317,209481,ngx_http_rewrite_if_condition,1,ngx_http_rewrite_if_condition,"char* ngx_http_rewrite_if_condition (ngx_conf_t*,ngx_http_rewrite_loc_conf_t*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite_if_condition(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf)
{
    u_char                        *p;
    size_t                         len;
    ngx_str_t                     *value;
    ngx_uint_t                     cur, last;
    ngx_regex_compile_t            rc;
    ngx_http_script_code_pt       *code;
    ngx_http_script_file_code_t   *fop;
    ngx_http_script_regex_code_t  *regex;
    u_char                         errstr[NGX_MAX_CONF_ERRSTR];

    value = cf->args->elts;
    last = cf->args->nelts - 1;

    if (value[1].len < 1 || value[1].data[0] != '(') {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid condition \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    if (value[1].len == 1) {
        cur = 2;

    } else {
        cur = 1;
        value[1].len--;
        value[1].data++;
    }

    if (value[last].len < 1 || value[last].data[value[last].len - 1] != ')') {
        ngx_conf_log_error...",646.0,863.0,1.0,1.0,218.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
5318,209487,ngx_http_rewrite_variable,1,ngx_http_rewrite_variable,"char* ngx_http_rewrite_variable (ngx_conf_t*,ngx_http_rewrite_loc_conf_t*,ngx_str_t*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite_variable(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf,
    ngx_str_t *value)
{
    ngx_int_t                    index;
    ngx_http_script_var_code_t  *var_code;

    value->len--;
    value->data++;

    index = ngx_http_get_variable_index(cf, value);

    if (index == NGX_ERROR) {
        return NGX_CONF_ERROR;
    }

    var_code = ngx_http_script_start_code(cf->pool, &lcf->codes,
                                          sizeof(ngx_http_script_var_code_t));
    if (var_code == NULL) {
        return NGX_CONF_ERROR;
    }

    var_code->code = ngx_http_script_var_code;
    var_code->index = index;

    return NGX_CONF_OK;
}",866.0,892.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5319,209494,ngx_http_rewrite_set,1,ngx_http_rewrite_set,"char* ngx_http_rewrite_set (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite_set(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_rewrite_loc_conf_t  *lcf = conf;

    ngx_int_t                            index;
    ngx_str_t                           *value;
    ngx_http_variable_t                 *v;
    ngx_http_script_var_code_t          *vcode;
    ngx_http_script_var_handler_code_t  *vhcode;

    value = cf->args->elts;

    if (value[1].data[0] != '$') {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    value[1].len--;
    value[1].data++;

    v = ngx_http_add_variable(cf, &value[1],
                              NGX_HTTP_VAR_CHANGEABLE|NGX_HTTP_VAR_WEAK);
    if (v == NULL) {
        return NGX_CONF_ERROR;
    }

    index = ngx_http_get_variable_index(cf, &value[1]);
    if (index == NGX_ERROR) {
        return NGX_CONF_ERROR;
    }

    if (v->get_handler == NULL) {
        v->get_handler = ng...",895.0,961.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5320,209501,ngx_http_rewrite_value,1,ngx_http_rewrite_value,"char* ngx_http_rewrite_value (ngx_conf_t*,ngx_http_rewrite_loc_conf_t*,ngx_str_t*)",http\modules\ngx_http_rewrite_module.c,"static char *
ngx_http_rewrite_value(ngx_conf_t *cf, ngx_http_rewrite_loc_conf_t *lcf,
    ngx_str_t *value)
{
    ngx_int_t                              n;
    ngx_http_script_compile_t              sc;
    ngx_http_script_value_code_t          *val;
    ngx_http_script_complex_value_code_t  *complex;

    n = ngx_http_script_variables_count(value);

    if (n == 0) {
        val = ngx_http_script_start_code(cf->pool, &lcf->codes,
                                         sizeof(ngx_http_script_value_code_t));
        if (val == NULL) {
            return NGX_CONF_ERROR;
        }

        n = ngx_atoi(value->data, value->len);

        if (n == NGX_ERROR) {
            n = 0;
        }

        val->code = ngx_http_script_value_code;
        val->value = (uintptr_t) n;
        val->text_len = (uintptr_t) value->len;
        val->text_data = (uintptr_t) value->data;

        return NGX_CONF_OK;
    }

    complex = ngx_http_script_start_code(cf->pool, &lcf->codes,
                  ...",964.0,1019.0,1.0,1.0,56.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5321,209660,ngx_http_rewrite_handler,1,ngx_http_rewrite_handler,ngx_int_t ngx_http_rewrite_handler (ngx_http_request_t*),http\modules\ngx_http_rewrite_module.c,"static ngx_int_t
ngx_http_rewrite_handler(ngx_http_request_t *r)
{
    ngx_int_t                     index;
    ngx_http_script_code_pt       code;
    ngx_http_script_engine_t     *e;
    ngx_http_core_srv_conf_t     *cscf;
    ngx_http_core_main_conf_t    *cmcf;
    ngx_http_rewrite_loc_conf_t  *rlcf;

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
    index = cmcf->phase_engine.location_rewrite_index;

    if (r->phase_handler == index && r->loc_conf == cscf->ctx->loc_conf) {
        /* skipping location rewrite phase for server null location */
        return NGX_DECLINED;
    }

    rlcf = ngx_http_get_module_loc_conf(r, ngx_http_rewrite_module);

    if (rlcf->codes == NULL) {
        return NGX_DECLINED;
    }

    e = ngx_pcalloc(r->pool, sizeof(ngx_http_script_engine_t));
    if (e == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    e->sp = ngx_pcalloc(r->pool,
           ...",136.0,184.0,1.0,1.0,49.0,48,9,46,14,0,19,6,6,4,2,,0,19,2,1,1,ngx_int_t
5322,209812,ngx_http_rewrite_var,1,ngx_http_rewrite_var,"ngx_int_t ngx_http_rewrite_var (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_rewrite_module.c,"static ngx_int_t
ngx_http_rewrite_var(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_http_variable_t          *var;
    ngx_http_core_main_conf_t    *cmcf;
    ngx_http_rewrite_loc_conf_t  *rlcf;

    rlcf = ngx_http_get_module_loc_conf(r, ngx_http_rewrite_module);

    if (rlcf->uninitialized_variable_warn == 0) {
        *v = ngx_http_variable_null_value;
        return NGX_OK;
    }

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    var = cmcf->variables.elts;

    /*
     * the ngx_http_rewrite_module sets variables directly in r->variables,
     * and they should be handled by ngx_http_get_indexed_variable(),
     * so the handler is called only if the variable is not initialized
     */

    ngx_log_error(NGX_LOG_WARN, r->connection->log, 0,
                  ""using uninitialized \""%V\"" variable"", &var[data].name);

    *v = ngx_http_variable_null_value;

    return NGX_OK;
}",187.0,218.0,1.0,1.0,32.0,16,7,19,11,0,4,2,2,1,1,,0,3,6,3,3,ngx_int_t
5323,212431,ngx_http_scgi_eval,1,ngx_http_scgi_eval,"ngx_int_t ngx_http_scgi_eval (ngx_http_request_t*,ngx_http_scgi_loc_conf_t*)",http\modules\ngx_http_scgi_module.c,"static ngx_int_t
ngx_http_scgi_eval(ngx_http_request_t *r, ngx_http_scgi_loc_conf_t * scf)
{
    ngx_url_t             url;
    ngx_http_upstream_t  *u;

    ngx_memzero(&url, sizeof(ngx_url_t));

    if (ngx_http_script_run(r, &url.url, scf->scgi_lengths->elts, 0,
                            scf->scgi_values->elts)
        == NULL)
    {
        return NGX_ERROR;
    }

    url.no_resolve = 1;

    if (ngx_parse_url(r->pool, &url) != NGX_OK) {
        if (url.err) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""%s in upstream \""%V\"""", url.err, &url.url);
        }

        return NGX_ERROR;
    }

    u = r->upstream;

    u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
    if (u->resolved == NULL) {
        return NGX_ERROR;
    }

    if (url.addrs) {
        u->resolved->sockaddr = url.addrs[0].sockaddr;
        u->resolved->socklen = url.addrs[0].socklen;
        u->resolved->name = url.addrs[0].name;
        ...",559.0,604.0,1.0,1.0,46.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5324,212437,ngx_http_scgi_create_request,1,ngx_http_scgi_create_request,ngx_int_t ngx_http_scgi_create_request (ngx_http_request_t*),http\modules\ngx_http_scgi_module.c,"static ngx_int_t
ngx_http_scgi_create_request(ngx_http_request_t *r)
{
    off_t                         content_length_n;
    u_char                        ch, *key, *val, *lowcase_key;
    size_t                        len, key_len, val_len, allocated;
    ngx_buf_t                    *b;
    ngx_str_t                     content_length;
    ngx_uint_t                    i, n, hash, skip_empty, header_params;
    ngx_chain_t                  *cl, *body;
    ngx_list_part_t              *part;
    ngx_table_elt_t              *header, **ignored;
    ngx_http_scgi_params_t       *params;
    ngx_http_script_code_pt       code;
    ngx_http_script_engine_t      e, le;
    ngx_http_scgi_loc_conf_t     *scf;
    ngx_http_script_len_code_pt   lcode;
    u_char                        buffer[NGX_OFF_T_LEN];

    content_length_n = 0;
    body = r->upstream->request_bufs;

    while (body) {
        content_length_n += ngx_buf_size(body->buf);
        body = body->next;
    }

    content_...",632.0,942.0,1.0,1.0,311.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5325,212442,ngx_http_scgi_reinit_request,1,ngx_http_scgi_reinit_request,ngx_int_t ngx_http_scgi_reinit_request (ngx_http_request_t*),http\modules\ngx_http_scgi_module.c,"static ngx_int_t
ngx_http_scgi_reinit_request(ngx_http_request_t *r)
{
    ngx_http_status_t  *status;

    status = ngx_http_get_module_ctx(r, ngx_http_scgi_module);

    if (status == NULL) {
        return NGX_OK;
    }

    status->code = 0;
    status->count = 0;
    status->start = NULL;
    status->end = NULL;

    r->upstream->process_header = ngx_http_scgi_process_status_line;
    r->state = 0;

    return NGX_OK;
}",945.0,965.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5326,212447,ngx_http_scgi_process_status_line,1,ngx_http_scgi_process_status_line,ngx_int_t ngx_http_scgi_process_status_line (ngx_http_request_t*),http\modules\ngx_http_scgi_module.c,"static ngx_int_t
ngx_http_scgi_process_status_line(ngx_http_request_t *r)
{
    size_t                len;
    ngx_int_t             rc;
    ngx_http_status_t    *status;
    ngx_http_upstream_t  *u;

    status = ngx_http_get_module_ctx(r, ngx_http_scgi_module);

    if (status == NULL) {
        return NGX_ERROR;
    }

    u = r->upstream;

    rc = ngx_http_parse_status_line(r, &u->buffer, status);

    if (rc == NGX_AGAIN) {
        return rc;
    }

    if (rc == NGX_ERROR) {
        u->process_header = ngx_http_scgi_process_header;
        return ngx_http_scgi_process_header(r);
    }

    if (u->state && u->state->status == 0) {
        u->state->status = status->code;
    }

    u->headers_in.status_n = status->code;

    len = status->end - status->start;
    u->headers_in.status_line.len = len;

    u->headers_in.status_line.data = ngx_pnalloc(r->pool, len);
    if (u->headers_in.status_line.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(u->headers_in.sta...",968.0,1018.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5327,212452,ngx_http_scgi_process_header,1,ngx_http_scgi_process_header,ngx_int_t ngx_http_scgi_process_header (ngx_http_request_t*),http\modules\ngx_http_scgi_module.c,"static ngx_int_t
ngx_http_scgi_process_header(ngx_http_request_t *r)
{
    ngx_str_t                      *status_line;
    ngx_int_t                       rc, status;
    ngx_table_elt_t                *h;
    ngx_http_upstream_t            *u;
    ngx_http_upstream_header_t     *hh;
    ngx_http_upstream_main_conf_t  *umcf;

    umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);

    for ( ;; ) {

        rc = ngx_http_parse_header_line(r, &r->upstream->buffer, 1);

        if (rc == NGX_OK) {

            /* a header line has been parsed successfully */

            h = ngx_list_push(&r->upstream->headers_in.headers);
            if (h == NULL) {
                return NGX_ERROR;
            }

            h->hash = r->header_hash;

            h->key.len = r->header_name_end - r->header_name_start;
            h->value.len = r->header_end - r->header_start;

            h->key.data = ngx_pnalloc(r->pool,
                                      h->key.len + 1 + h->v...",1021.0,1152.0,1.0,1.0,132.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5328,212457,ngx_http_scgi_input_filter_init,1,ngx_http_scgi_input_filter_init,ngx_int_t ngx_http_scgi_input_filter_init (void*),http\modules\ngx_http_scgi_module.c,"static ngx_int_t
ngx_http_scgi_input_filter_init(void *data)
{
    ngx_http_request_t   *r = data;
    ngx_http_upstream_t  *u;

    u = r->upstream;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http scgi filter init s:%ui l:%O"",
                   u->headers_in.status_n, u->headers_in.content_length_n);

    if (u->headers_in.status_n == NGX_HTTP_NO_CONTENT
        || u->headers_in.status_n == NGX_HTTP_NOT_MODIFIED)
    {
        u->pipe->length = 0;
        u->length = 0;

    } else if (r->method == NGX_HTTP_HEAD) {
        u->pipe->length = -1;
        u->length = -1;

    } else {
        u->pipe->length = u->headers_in.content_length_n;
        u->length = u->headers_in.content_length_n;
    }

    return NGX_OK;
}",1155.0,1183.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5329,212462,ngx_http_scgi_abort_request,1,ngx_http_scgi_abort_request,void ngx_http_scgi_abort_request (ngx_http_request_t*),http\modules\ngx_http_scgi_module.c,"static void
ngx_http_scgi_abort_request(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""abort http scgi request"");

    return;
}",1186.0,1193.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5330,212467,ngx_http_scgi_finalize_request,1,ngx_http_scgi_finalize_request,"void ngx_http_scgi_finalize_request (ngx_http_request_t*,ngx_int_t)",http\modules\ngx_http_scgi_module.c,"static void
ngx_http_scgi_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""finalize http scgi request"");

    return;
}",1196.0,1203.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5331,212473,ngx_http_scgi_create_main_conf,1,ngx_http_scgi_create_main_conf,void* ngx_http_scgi_create_main_conf (ngx_conf_t*),http\modules\ngx_http_scgi_module.c,"static void *
ngx_http_scgi_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_scgi_main_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_scgi_main_conf_t));
    if (conf == NULL) {
        return NULL;
    }

#if (NGX_HTTP_CACHE)
    if (ngx_array_init(&conf->caches, cf->pool, 4,
                       sizeof(ngx_http_file_cache_t *))
        != NGX_OK)
    {
        return NULL;
    }
#endif

    return conf;
}",1206.0,1226.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5332,212478,ngx_http_scgi_create_loc_conf,1,ngx_http_scgi_create_loc_conf,void* ngx_http_scgi_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_scgi_module.c,"static void *
ngx_http_scgi_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_scgi_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_scgi_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->upstream.store = NGX_CONF_UNSET;
    conf->upstream.store_access = NGX_CONF_UNSET_UINT;
    conf->upstream.next_upstream_tries = NGX_CONF_UNSET_UINT;
    conf->upstream.buffering = NGX_CONF_UNSET;
    conf->upstream.request_buffering = NGX_CONF_UNSET;
    conf->upstream.ignore_client_abort = NGX_CONF_UNSET;
    conf->upstream.force_ranges = NGX_CONF_UNSET;

    conf->upstream.local = NGX_CONF_UNSET_PTR;
    conf->upstream.socket_keepalive = NGX_CONF_UNSET;

    conf->upstream.connect_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.send_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.read_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.next_upstream_timeout = NGX_CONF_UNSET_MSEC;

    conf->upstream.send_lowat = NGX_CONF_UNSET_SIZE;
    conf->upstream....",1229.0,1293.0,1.0,1.0,65.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5333,212483,ngx_http_scgi_merge_loc_conf,1,ngx_http_scgi_merge_loc_conf,"char* ngx_http_scgi_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_scgi_module.c,"static char *
ngx_http_scgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_scgi_loc_conf_t *prev = parent;
    ngx_http_scgi_loc_conf_t *conf = child;

    size_t                        size;
    ngx_int_t                     rc;
    ngx_hash_init_t               hash;
    ngx_http_core_loc_conf_t     *clcf;

#if (NGX_HTTP_CACHE)

    if (conf->upstream.store > 0) {
        conf->upstream.cache = 0;
    }

    if (conf->upstream.cache > 0) {
        conf->upstream.store = 0;
    }

#endif

    if (conf->upstream.store == NGX_CONF_UNSET) {
        ngx_conf_merge_value(conf->upstream.store, prev->upstream.store, 0);

        conf->upstream.store_lengths = prev->upstream.store_lengths;
        conf->upstream.store_values = prev->upstream.store_values;
    }

    ngx_conf_merge_uint_value(conf->upstream.store_access,
                              prev->upstream.store_access, 0600);

    ngx_conf_merge_uint_value(conf->upstream.next_upstream_tries,
             ...",1296.0,1648.0,1.0,1.0,353.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5334,212490,ngx_http_scgi_init_params,1,ngx_http_scgi_init_params,"ngx_int_t ngx_http_scgi_init_params (ngx_conf_t*,ngx_http_scgi_loc_conf_t*,ngx_http_scgi_params_t*,ngx_keyval_t*)",http\modules\ngx_http_scgi_module.c,"static ngx_int_t
ngx_http_scgi_init_params(ngx_conf_t *cf, ngx_http_scgi_loc_conf_t *conf,
    ngx_http_scgi_params_t *params, ngx_keyval_t *default_params)
{
    u_char                       *p;
    size_t                        size;
    uintptr_t                    *code;
    ngx_uint_t                    i, nsrc;
    ngx_array_t                   headers_names, params_merged;
    ngx_keyval_t                 *h;
    ngx_hash_key_t               *hk;
    ngx_hash_init_t               hash;
    ngx_http_upstream_param_t    *src, *s;
    ngx_http_script_compile_t     sc;
    ngx_http_script_copy_code_t  *copy;

    if (params->hash.buckets) {
        return NGX_OK;
    }

    if (conf->params_source == NULL && default_params == NULL) {
        params->hash.buckets = (void *) 1;
        return NGX_OK;
    }

    params->lengths = ngx_array_create(cf->pool, 64, 1);
    if (params->lengths == NULL) {
        return NGX_ERROR;
    }

    params->values = ngx_array_create(cf->pool, 512,...",1651.0,1853.0,1.0,1.0,203.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5335,212498,ngx_http_scgi_pass,1,ngx_http_scgi_pass,"char* ngx_http_scgi_pass (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_scgi_module.c,"static char *
ngx_http_scgi_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_scgi_loc_conf_t *scf = conf;

    ngx_url_t                   u;
    ngx_str_t                  *value, *url;
    ngx_uint_t                  n;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_script_compile_t   sc;

    if (scf->upstream.upstream || scf->scgi_lengths) {
        return ""is duplicate"";
    }

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_scgi_handler;

    value = cf->args->elts;

    url = &value[1];

    n = ngx_http_script_variables_count(url);

    if (n) {

        ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

        sc.cf = cf;
        sc.source = url;
        sc.lengths = &scf->scgi_lengths;
        sc.values = &scf->scgi_values;
        sc.variables = n;
        sc.complete_lengths = 1;
        sc.complete_values = 1;

        if (ngx_http_script_compile(&sc) != NGX_OK) {
            return NGX_CONF...",1856.0,1914.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5336,212505,ngx_http_scgi_store,1,ngx_http_scgi_store,"char* ngx_http_scgi_store (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_scgi_module.c,"static char *
ngx_http_scgi_store(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_scgi_loc_conf_t *scf = conf;

    ngx_str_t                  *value;
    ngx_http_script_compile_t   sc;

    if (scf->upstream.store != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        scf->upstream.store = 0;
        return NGX_CONF_OK;
    }

#if (NGX_HTTP_CACHE)
    if (scf->upstream.cache > 0) {
        return ""is incompatible with \""scgi_cache\"""";
    }
#endif

    scf->upstream.store = 1;

    if (ngx_strcmp(value[1].data, ""on"") == 0) {
        return NGX_CONF_OK;
    }

    /* include the terminating '\0' into script */
    value[1].len++;

    ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

    sc.cf = cf;
    sc.source = &value[1];
    sc.lengths = &scf->upstream.store_lengths;
    sc.values = &scf->upstream.store_values;
    sc.variables = ngx_http_script_variables_count(&value[1...",1917.0,1966.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5337,213137,ngx_http_scgi_handler,1,ngx_http_scgi_handler,ngx_int_t ngx_http_scgi_handler (ngx_http_request_t*),http\modules\ngx_http_scgi_module.c,"static ngx_int_t
ngx_http_scgi_handler(ngx_http_request_t *r)
{
    ngx_int_t                   rc;
    ngx_http_status_t          *status;
    ngx_http_upstream_t        *u;
    ngx_http_scgi_loc_conf_t   *scf;
#if (NGX_HTTP_CACHE)
    ngx_http_scgi_main_conf_t  *smcf;
#endif

    if (ngx_http_upstream_create(r) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    status = ngx_pcalloc(r->pool, sizeof(ngx_http_status_t));
    if (status == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ngx_http_set_ctx(r, status, ngx_http_scgi_module);

    scf = ngx_http_get_module_loc_conf(r, ngx_http_scgi_module);

    if (scf->scgi_lengths) {
        if (ngx_http_scgi_eval(r, scf) != NGX_OK) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }
    }

    u = r->upstream;

    ngx_str_set(&u->schema, ""scgi://"");
    u->output.tag = (ngx_buf_tag_t) &ngx_http_scgi_module;

    u->conf = &scf->upstream;

#if (NGX_HTTP_CACHE)
    smcf = ngx_http_get_modu...",477.0,556.0,1.0,1.0,80.0,68,11,68,23,0,13,8,9,5,5,,0,13,2,1,1,ngx_int_t
5338,217590,ngx_http_secure_link_old_variable,1,ngx_http_secure_link_old_variable,"ngx_int_t ngx_http_secure_link_old_variable (ngx_http_request_t*,ngx_http_secure_link_conf_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_secure_link_module.c,"static ngx_int_t
ngx_http_secure_link_old_variable(ngx_http_request_t *r,
    ngx_http_secure_link_conf_t *conf, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    u_char      *p, *start, *end, *last;
    size_t       len;
    ngx_int_t    n;
    ngx_uint_t   i;
    ngx_md5_t    md5;
    u_char       hash[16];

    p = &r->unparsed_uri.data[1];
    last = r->unparsed_uri.data + r->unparsed_uri.len;

    while (p < last) {
        if (*p++ == '/') {
            start = p;
            goto md5_start;
        }
    }

    goto not_found;

md5_start:

    while (p < last) {
        if (*p++ == '/') {
            end = p - 1;
            goto url_start;
        }
    }

    goto not_found;

url_start:

    len = last - p;

    if (end - start != 32 || len == 0) {
        goto not_found;
    }

    ngx_md5_init(&md5);
    ngx_md5_update(&md5, p, len);
    ngx_md5_update(&md5, conf->secret.data, conf->secret.len);
    ngx_md5_final(hash, &md5);

    for (i = 0; i < 16; i++) {
        ...",198.0,266.0,1.0,1.0,69.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5339,217598,ngx_http_secure_link_expires_variable,1,ngx_http_secure_link_expires_variable,"ngx_int_t ngx_http_secure_link_expires_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_secure_link_module.c,"static ngx_int_t
ngx_http_secure_link_expires_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_secure_link_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_secure_link_module);

    if (ctx) {
        v->len = ctx->expires.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = ctx->expires.data;

    } else {
        v->not_found = 1;
    }

    return NGX_OK;
}",269.0,289.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5340,217605,ngx_http_secure_link_create_conf,1,ngx_http_secure_link_create_conf,void* ngx_http_secure_link_create_conf (ngx_conf_t*),http\modules\ngx_http_secure_link_module.c,"static void *
ngx_http_secure_link_create_conf(ngx_conf_t *cf)
{
    ngx_http_secure_link_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_secure_link_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->secret = { 0, NULL };
     */

    conf->variable = NGX_CONF_UNSET_PTR;
    conf->md5 = NGX_CONF_UNSET_PTR;

    return conf;
}",292.0,312.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5341,217610,ngx_http_secure_link_merge_conf,1,ngx_http_secure_link_merge_conf,"char* ngx_http_secure_link_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_secure_link_module.c,"static char *
ngx_http_secure_link_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_secure_link_conf_t *prev = parent;
    ngx_http_secure_link_conf_t *conf = child;

    if (conf->secret.data) {
        ngx_conf_init_ptr_value(conf->variable, NULL);
        ngx_conf_init_ptr_value(conf->md5, NULL);

        if (conf->variable || conf->md5) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""\""secure_link_secret\"" cannot be mixed with ""
                               ""\""secure_link\"" and \""secure_link_md5\"""");
            return NGX_CONF_ERROR;
        }

        return NGX_CONF_OK;
    }

    ngx_conf_merge_ptr_value(conf->variable, prev->variable, NULL);
    ngx_conf_merge_ptr_value(conf->md5, prev->md5, NULL);

    if (conf->variable == NULL && conf->md5 == NULL) {
        conf->secret = prev->secret;
    }

    return NGX_CONF_OK;
}",315.0,343.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5342,217617,ngx_http_secure_link_add_variables,1,ngx_http_secure_link_add_variables,ngx_int_t ngx_http_secure_link_add_variables (ngx_conf_t*),http\modules\ngx_http_secure_link_module.c,"static ngx_int_t
ngx_http_secure_link_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var;

    var = ngx_http_add_variable(cf, &ngx_http_secure_link_name, 0);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = ngx_http_secure_link_variable;

    var = ngx_http_add_variable(cf, &ngx_http_secure_link_expires_name, 0);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = ngx_http_secure_link_expires_variable;

    return NGX_OK;
}",346.0,366.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5343,217714,ngx_http_secure_link_variable,1,ngx_http_secure_link_variable,"ngx_int_t ngx_http_secure_link_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_secure_link_module.c,"static ngx_int_t
ngx_http_secure_link_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                       *p, *last;
    ngx_str_t                     val, hash;
    time_t                        expires;
    ngx_md5_t                     md5;
    ngx_http_secure_link_ctx_t   *ctx;
    ngx_http_secure_link_conf_t  *conf;
    u_char                        hash_buf[18], md5_buf[16];

    conf = ngx_http_get_module_loc_conf(r, ngx_http_secure_link_module);

    if (conf->secret.data) {
        return ngx_http_secure_link_old_variable(r, conf, v, data);
    }

    if (conf->variable == NULL || conf->md5 == NULL) {
        goto not_found;
    }

    if (ngx_http_complex_value(r, conf->variable, &val) != NGX_OK) {
        return NGX_ERROR;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""secure link: \""%V\"""", &val);

    last = val.data + val.len;

    p = ngx_strlchr(val.data, last, ',');
    expires...",100.0,195.0,1.0,1.0,96.0,77,17,83,19,0,29,18,14,10,9,,0,25,6,3,3,ngx_int_t
5344,218433,ngx_http_slice_header_filter,1,ngx_http_slice_header_filter,ngx_int_t ngx_http_slice_header_filter (ngx_http_request_t*),http\modules\ngx_http_slice_filter_module.c,"static ngx_int_t
ngx_http_slice_header_filter(ngx_http_request_t *r)
{
    off_t                            end;
    ngx_int_t                        rc;
    ngx_table_elt_t                 *h;
    ngx_http_slice_ctx_t            *ctx;
    ngx_http_slice_loc_conf_t       *slcf;
    ngx_http_slice_content_range_t   cr;

    ctx = ngx_http_get_module_ctx(r, ngx_http_slice_filter_module);
    if (ctx == NULL) {
        return ngx_http_next_header_filter(r);
    }

    if (r->headers_out.status != NGX_HTTP_PARTIAL_CONTENT) {
        if (r == r->main) {
            ngx_http_set_ctx(r, NULL, ngx_http_slice_filter_module);
            return ngx_http_next_header_filter(r);
        }

        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""unexpected status code %ui in slice response"",
                      r->headers_out.status);
        return NGX_ERROR;
    }

    h = r->headers_out.etag;

    if (ctx->etag.len) {
        if (h == NULL
            || h->value.len...",101.0,214.0,1.0,1.0,114.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5345,218438,ngx_http_slice_body_filter,1,ngx_http_slice_body_filter,"ngx_int_t ngx_http_slice_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_slice_filter_module.c,"static ngx_int_t
ngx_http_slice_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t                   rc;
    ngx_chain_t                *cl;
    ngx_http_slice_ctx_t       *ctx;
    ngx_http_slice_loc_conf_t  *slcf;

    ctx = ngx_http_get_module_ctx(r, ngx_http_slice_filter_module);

    if (ctx == NULL || r != r->main) {
        return ngx_http_next_body_filter(r, in);
    }

    for (cl = in; cl; cl = cl->next) {
        if (cl->buf->last_buf) {
            cl->buf->last_buf = 0;
            cl->buf->last_in_chain = 1;
            cl->buf->sync = 1;
            ctx->last = 1;
        }
    }

    rc = ngx_http_next_body_filter(r, in);

    if (rc == NGX_ERROR || !ctx->last) {
        return rc;
    }

    if (ctx->sr && !ctx->sr->done) {
        return rc;
    }

    if (!ctx->active) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""missing slice response"");
        return NGX_ERROR;
    }

    if (ctx->start >= ctx->end) {
     ...",217.0,287.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5346,218444,ngx_http_slice_parse_content_range,1,ngx_http_slice_parse_content_range,"ngx_int_t ngx_http_slice_parse_content_range (ngx_http_request_t*,ngx_http_slice_content_range_t*)",http\modules\ngx_http_slice_filter_module.c,"static ngx_int_t
ngx_http_slice_parse_content_range(ngx_http_request_t *r,
    ngx_http_slice_content_range_t *cr)
{
    off_t             start, end, complete_length, cutoff, cutlim;
    u_char           *p;
    ngx_table_elt_t  *h;

    h = r->headers_out.content_range;

    if (h == NULL
        || h->value.len < 7
        || ngx_strncmp(h->value.data, ""bytes "", 6) != 0)
    {
        return NGX_ERROR;
    }

    p = h->value.data + 6;

    cutoff = NGX_MAX_OFF_T_VALUE / 10;
    cutlim = NGX_MAX_OFF_T_VALUE % 10;

    start = 0;
    end = 0;
    complete_length = 0;

    while (*p == ' ') { p++; }

    if (*p < '0' || *p > '9') {
        return NGX_ERROR;
    }

    while (*p >= '0' && *p <= '9') {
        if (start >= cutoff && (start > cutoff || *p - '0' > cutlim)) {
            return NGX_ERROR;
        }

        start = start * 10 + (*p++ - '0');
    }

    while (*p == ' ') { p++; }

    if (*p++ != '-') {
        return NGX_ERROR;
    }

    while (*p == ' ') { p++; }

   ...",290.0,391.0,1.0,1.0,102.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5347,218450,ngx_http_slice_range_variable,1,ngx_http_slice_range_variable,"ngx_int_t ngx_http_slice_range_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_slice_filter_module.c,"static ngx_int_t
ngx_http_slice_range_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                     *p;
    ngx_http_slice_ctx_t       *ctx;
    ngx_http_slice_loc_conf_t  *slcf;

    ctx = ngx_http_get_module_ctx(r, ngx_http_slice_filter_module);

    if (ctx == NULL) {
        if (r != r->main || r->headers_out.status) {
            v->not_found = 1;
            return NGX_OK;
        }

        slcf = ngx_http_get_module_loc_conf(r, ngx_http_slice_filter_module);

        if (slcf->size == 0) {
            v->not_found = 1;
            return NGX_OK;
        }

        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_slice_ctx_t));
        if (ctx == NULL) {
            return NGX_ERROR;
        }

        ngx_http_set_ctx(r, ctx, ngx_http_slice_filter_module);

        p = ngx_pnalloc(r->pool, sizeof(""bytes=-"") - 1 + 2 * NGX_OFF_T_LEN);
        if (p == NULL) {
            return NGX_ERROR;
        }

        ctx->start = slcf->size...",394.0,444.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5348,218457,ngx_http_slice_get_start,1,ngx_http_slice_get_start,off_t ngx_http_slice_get_start (ngx_http_request_t*),http\modules\ngx_http_slice_filter_module.c,"static off_t
ngx_http_slice_get_start(ngx_http_request_t *r)
{
    off_t             start, cutoff, cutlim;
    u_char           *p;
    ngx_table_elt_t  *h;

    if (r->headers_in.if_range) {
        return 0;
    }

    h = r->headers_in.range;

    if (h == NULL
        || h->value.len < 7
        || ngx_strncasecmp(h->value.data, (u_char *) ""bytes="", 6) != 0)
    {
        return 0;
    }

    p = h->value.data + 6;

    if (ngx_strchr(p, ',')) {
        return 0;
    }

    while (*p == ' ') { p++; }

    if (*p == '-') {
        return 0;
    }

    cutoff = NGX_MAX_OFF_T_VALUE / 10;
    cutlim = NGX_MAX_OFF_T_VALUE % 10;

    start = 0;

    while (*p >= '0' && *p <= '9') {
        if (start >= cutoff && (start > cutoff || *p - '0' > cutlim)) {
            return 0;
        }

        start = start * 10 + (*p++ - '0');
    }

    return start;
}",447.0,493.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,off_t
5349,218462,ngx_http_slice_create_loc_conf,1,ngx_http_slice_create_loc_conf,void* ngx_http_slice_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_slice_filter_module.c,"static void *
ngx_http_slice_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_slice_loc_conf_t  *slcf;

    slcf = ngx_palloc(cf->pool, sizeof(ngx_http_slice_loc_conf_t));
    if (slcf == NULL) {
        return NULL;
    }

    slcf->size = NGX_CONF_UNSET_SIZE;

    return slcf;
}",496.0,509.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5350,218467,ngx_http_slice_merge_loc_conf,1,ngx_http_slice_merge_loc_conf,"char* ngx_http_slice_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_slice_filter_module.c,"static char *
ngx_http_slice_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_slice_loc_conf_t *prev = parent;
    ngx_http_slice_loc_conf_t *conf = child;

    ngx_conf_merge_size_value(conf->size, prev->size, 0);

    return NGX_CONF_OK;
}",512.0,521.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5351,218474,ngx_http_slice_add_variables,1,ngx_http_slice_add_variables,ngx_int_t ngx_http_slice_add_variables (ngx_conf_t*),http\modules\ngx_http_slice_filter_module.c,"static ngx_int_t
ngx_http_slice_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var;

    var = ngx_http_add_variable(cf, &ngx_http_slice_range_name, 0);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = ngx_http_slice_range_variable;

    return NGX_OK;
}",524.0,537.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5352,218479,ngx_http_slice_init,1,ngx_http_slice_init,ngx_int_t ngx_http_slice_init (ngx_conf_t*),http\modules\ngx_http_slice_filter_module.c,"static ngx_int_t
ngx_http_slice_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_slice_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_slice_body_filter;

    return NGX_OK;
}",540.0,550.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5353,219981,ngx_conf_split_clients_block,1,ngx_conf_split_clients_block,"char* ngx_conf_split_clients_block (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_split_clients_module.c,"static char *
ngx_conf_split_clients_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                                *rv;
    uint32_t                             sum, last;
    ngx_str_t                           *value, name;
    ngx_uint_t                           i;
    ngx_conf_t                           save;
    ngx_stream_variable_t               *var;
    ngx_stream_split_clients_ctx_t      *ctx;
    ngx_stream_split_clients_part_t     *part;
    ngx_stream_compile_complex_value_t   ccv;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_stream_split_clients_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_stream_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &ctx->value;

    if (ngx_stream_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    name = value[2];

    if (name.data[0] != '$') {
        ngx_...",108.0,196.0,1.0,1.0,89.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5354,219988,ngx_http_split_clients,1,ngx_http_split_clients,"char* ngx_http_split_clients (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_split_clients_module.c,"static char *
ngx_http_split_clients(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
{
    ngx_int_t                       n;
    ngx_str_t                      *value;
    ngx_http_split_clients_ctx_t   *ctx;
    ngx_http_split_clients_part_t  *part;

    ctx = cf->ctx;
    value = cf->args->elts;

    part = ngx_array_push(&ctx->parts);
    if (part == NULL) {
        return NGX_CONF_ERROR;
    }

    if (value[0].len == 1 && value[0].data[0] == '*') {
        part->percent = 0;

    } else {
        if (value[0].len == 0 || value[0].data[value[0].len - 1] != '%') {
            goto invalid;
        }

        n = ngx_atofp(value[0].data, value[0].len - 1, 2);
        if (n == NGX_ERROR || n == 0) {
            goto invalid;
        }

        part->percent = (uint32_t) n;
    }

    part->value.len = value[1].len;
    part->value.valid = 1;
    part->value.no_cacheable = 0;
    part->value.not_found = 0;
    part->value.data = value[1].data;

    return NGX_CONF_OK;

invalid:

...",201.0,246.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5355,220041,ngx_http_split_clients_variable,1,ngx_http_split_clients_variable,"ngx_int_t ngx_http_split_clients_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_split_clients_module.c,"static ngx_int_t
ngx_http_split_clients_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_split_clients_ctx_t *ctx = (ngx_http_split_clients_ctx_t *) data;

    uint32_t                        hash;
    ngx_str_t                       val;
    ngx_uint_t                      i;
    ngx_http_split_clients_part_t  *part;

    *v = ngx_http_variable_null_value;

    if (ngx_http_complex_value(r, &ctx->value, &val) != NGX_OK) {
        return NGX_OK;
    }

    hash = ngx_murmur_hash2(val.data, val.len);

    part = ctx->parts.elts;

    for (i = 0; i < ctx->parts.nelts; i++) {

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http split: %uD %uD"", hash, part[i].percent);

        if (hash < part[i].percent || part[i].percent == 0) {
            *v = part[i].value;
            return NGX_OK;
        }
    }

    return NGX_OK;
}",74.0,107.0,1.0,1.0,34.0,33,11,32,11,0,7,4,5,3,2,,0,7,6,3,3,ngx_int_t
5356,220659,ngx_http_ssi_output,1,ngx_http_ssi_output,"ngx_int_t ngx_http_ssi_output (ngx_http_request_t*,ngx_http_ssi_ctx_t*)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_output(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx)
{
    ngx_int_t     rc;
    ngx_buf_t    *b;
    ngx_chain_t  *cl;

#if 1
    b = NULL;
    for (cl = ctx->out; cl; cl = cl->next) {
        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""ssi out: %p %p"", cl->buf, cl->buf->pos);
        if (cl->buf == b) {
            ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                          ""the same buf was used in ssi"");
            ngx_debug_point();
            return NGX_ERROR;
        }
        b = cl->buf;
    }
#endif

    rc = ngx_http_next_body_filter(r, ctx->out);

    if (ctx->busy == NULL) {
        ctx->busy = ctx->out;

    } else {
        for (cl = ctx->busy; cl->next; cl = cl->next) { /* void */ }
        cl->next = ctx->out;
    }

    ctx->out = NULL;
    ctx->last_out = &ctx->out;

    while (ctx->busy) {

        cl = ctx->busy;
        b = cl->buf;

        if (ngx_buf_size(b) != 0) {
   ...",914.0,975.0,1.0,1.0,62.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5357,220665,ngx_http_ssi_buffered,1,ngx_http_ssi_buffered,"void ngx_http_ssi_buffered (ngx_http_request_t*,ngx_http_ssi_ctx_t*)",http\modules\ngx_http_ssi_filter_module.c,"static void
ngx_http_ssi_buffered(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx)
{
    if (ctx->in || ctx->buf) {
        r->buffered |= NGX_HTTP_SSI_BUFFERED;

    } else {
        r->buffered &= ~NGX_HTTP_SSI_BUFFERED;
    }
}",978.0,987.0,1.0,1.0,10.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,void
5358,220671,ngx_http_ssi_parse,1,ngx_http_ssi_parse,"ngx_int_t ngx_http_ssi_parse (ngx_http_request_t*,ngx_http_ssi_ctx_t*)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_parse(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx)
{
    u_char                *p, *value, *last, *copy_end, ch;
    size_t                 looked;
    ngx_http_ssi_state_e   state;

    state = ctx->state;
    looked = ctx->looked;
    last = ctx->buf->last;
    copy_end = ctx->copy_end;

    for (p = ctx->pos; p < last; p++) {

        ch = *p;

        if (state == ssi_start_state) {

            /* the tight loop */

            for ( ;; ) {
                if (ch == '<') {
                    copy_end = p;
                    looked = 1;
                    state = ssi_tag_state;

                    goto tag_started;
                }

                if (++p == last) {
                    break;
                }

                ch = *p;
            }

            ctx->state = state;
            ctx->pos = p;
            ctx->looked = looked;
            ctx->copy_end = p;

            if (ctx->copy_start == NULL) {
                ctx->copy_...",990.0,1552.0,1.0,23.0,563.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5359,220677,ngx_http_ssi_get_variable,1,ngx_http_ssi_get_variable,"ngx_str_t* ngx_http_ssi_get_variable (ngx_http_request_t*,ngx_str_t*,ngx_uint_t)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_str_t *
ngx_http_ssi_get_variable(ngx_http_request_t *r, ngx_str_t *name,
    ngx_uint_t key)
{
    ngx_uint_t           i;
    ngx_list_part_t     *part;
    ngx_http_ssi_var_t  *var;
    ngx_http_ssi_ctx_t  *ctx;

    ctx = ngx_http_get_module_ctx(r->main, ngx_http_ssi_filter_module);

#if (NGX_PCRE)
    {
    ngx_str_t  *value;

    if (key >= '0' && key <= '9') {
        i = key - '0';

        if (i < ctx->ncaptures) {
            value = ngx_palloc(r->pool, sizeof(ngx_str_t));
            if (value == NULL) {
                return NULL;
            }

            i *= 2;

            value->data = ctx->captures_data + ctx->captures[i];
            value->len = ctx->captures[i + 1] - ctx->captures[i];

            return value;
        }
    }
    }
#endif

    if (ctx->variables == NULL) {
        return NULL;
    }

    part = &ctx->variables->part;
    var = part->elts;

    for (i = 0; /* void */ ; i++) {

        if (i >= part->nelts) {
            if (part->ne...",1555.0,1623.0,1.0,1.0,69.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_str_t
5360,220684,ngx_http_ssi_evaluate_string,1,ngx_http_ssi_evaluate_string,"ngx_int_t ngx_http_ssi_evaluate_string (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t*,ngx_uint_t)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_evaluate_string(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t *text, ngx_uint_t flags)
{
    u_char                      ch, *p, **value, *data, *part_data;
    size_t                     *size, len, prefix, part_len;
    ngx_str_t                   var, *val;
    ngx_uint_t                  i, n, bracket, quoted, key;
    ngx_array_t                 lengths, values;
    ngx_http_variable_value_t  *vv;

    n = ngx_http_script_variables_count(text);

    if (n == 0) {

        data = text->data;
        p = data;

        if ((flags & NGX_HTTP_SSI_ADD_PREFIX) && text->data[0] != '/') {

            for (prefix = r->uri.len; prefix; prefix--) {
                if (r->uri.data[prefix - 1] == '/') {
                    break;
                }
            }

            if (prefix) {
                len = prefix + text->len;

                data = ngx_pnalloc(r->pool, len);
                if (data == NULL) {
                    return NGX...",1626.0,1874.0,1.0,21.0,249.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5361,220692,ngx_http_ssi_regex_match,1,ngx_http_ssi_regex_match,"ngx_int_t ngx_http_ssi_regex_match (ngx_http_request_t*,ngx_str_t*,ngx_str_t*)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_regex_match(ngx_http_request_t *r, ngx_str_t *pattern,
    ngx_str_t *str)
{
#if (NGX_PCRE)
    int                   rc, *captures;
    u_char               *p, errstr[NGX_MAX_CONF_ERRSTR];
    size_t                size;
    ngx_str_t            *vv, name, value;
    ngx_uint_t            i, n, key;
    ngx_http_ssi_ctx_t   *ctx;
    ngx_http_ssi_var_t   *var;
    ngx_regex_compile_t   rgc;

    ngx_memzero(&rgc, sizeof(ngx_regex_compile_t));

    rgc.pattern = *pattern;
    rgc.pool = r->pool;
    rgc.err.len = NGX_MAX_CONF_ERRSTR;
    rgc.err.data = errstr;

    if (ngx_regex_compile(&rgc) != NGX_OK) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, ""%V"", &rgc.err);
        return NGX_HTTP_SSI_ERROR;
    }

    n = (rgc.captures + 1) * 3;

    captures = ngx_palloc(r->pool, n * sizeof(int));
    if (captures == NULL) {
        return NGX_ERROR;
    }

    rc = ngx_regex_exec(rgc.regex, str, captures, n);

    if (rc < NGX_REGEX_NO_MATCHED)...",1877.0,1982.0,1.0,11.0,106.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5362,220699,ngx_http_ssi_include,1,ngx_http_ssi_include,"ngx_int_t ngx_http_ssi_include (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_include(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    ngx_int_t                    rc;
    ngx_str_t                   *uri, *file, *wait, *set, *stub, args;
    ngx_buf_t                   *b;
    ngx_uint_t                   flags, i, key;
    ngx_chain_t                 *cl, *tl, **ll, *out;
    ngx_http_request_t          *sr;
    ngx_http_ssi_var_t          *var;
    ngx_http_ssi_ctx_t          *mctx;
    ngx_http_ssi_block_t        *bl;
    ngx_http_post_subrequest_t  *psr;

    uri = params[NGX_HTTP_SSI_INCLUDE_VIRTUAL];
    file = params[NGX_HTTP_SSI_INCLUDE_FILE];
    wait = params[NGX_HTTP_SSI_INCLUDE_WAIT];
    set = params[NGX_HTTP_SSI_INCLUDE_SET];
    stub = params[NGX_HTTP_SSI_INCLUDE_STUB];

    if (uri && file) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""inclusion may be either virtual=\""%V\"" or file=\""%V\"""",
                      uri, file);
        return NGX_HTTP_...",1985.0,2198.0,1.0,17.0,214.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5363,220706,ngx_http_ssi_stub_output,1,ngx_http_ssi_stub_output,"ngx_int_t ngx_http_ssi_stub_output (ngx_http_request_t*,void*,ngx_int_t)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_stub_output(ngx_http_request_t *r, void *data, ngx_int_t rc)
{
    ngx_chain_t  *out;

    if (rc == NGX_ERROR || r->connection->error || r->request_output) {
        return rc;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""ssi stub output: \""%V?%V\"""", &r->uri, &r->args);

    out = data;

    if (!r->header_sent) {
        r->headers_out.content_type_len =
                                      r->parent->headers_out.content_type_len;
        r->headers_out.content_type = r->parent->headers_out.content_type;

        if (ngx_http_send_header(r) == NGX_ERROR) {
            return NGX_ERROR;
        }
    }

    return ngx_http_output_filter(r, out);
}",2201.0,2226.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5364,220713,ngx_http_ssi_set_variable,1,ngx_http_ssi_set_variable,"ngx_int_t ngx_http_ssi_set_variable (ngx_http_request_t*,void*,ngx_int_t)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_set_variable(ngx_http_request_t *r, void *data, ngx_int_t rc)
{
    ngx_str_t  *value = data;

    if (r->headers_out.status < NGX_HTTP_SPECIAL_RESPONSE
        && r->out && r->out->buf)
    {
        value->len = r->out->buf->last - r->out->buf->pos;
        value->data = r->out->buf->pos;
    }

    return rc;
}",2229.0,2242.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5365,220720,ngx_http_ssi_echo,1,ngx_http_ssi_echo,"ngx_int_t ngx_http_ssi_echo (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_echo(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    u_char                     *p;
    uintptr_t                   len;
    ngx_buf_t                  *b;
    ngx_str_t                  *var, *value, *enc, text;
    ngx_uint_t                  key;
    ngx_chain_t                *cl;
    ngx_http_variable_value_t  *vv;

    var = params[NGX_HTTP_SSI_ECHO_VAR];

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""ssi echo \""%V\"""", var);

    key = ngx_hash_strlow(var->data, var->data, var->len);

    value = ngx_http_ssi_get_variable(r, var, key);

    if (value == NULL) {
        vv = ngx_http_get_variable(r, var, key);

        if (vv == NULL) {
            return NGX_HTTP_SSI_ERROR;
        }

        if (!vv->not_found) {
            text.data = vv->data;
            text.len = vv->len;
            value = &text;
        }
    }

    if (value == NULL) {
        value = params[NGX_HTTP_SSI_...",2245.0,2378.0,1.0,17.0,134.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5366,220727,ngx_http_ssi_config,1,ngx_http_ssi_config,"ngx_int_t ngx_http_ssi_config (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_config(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    ngx_str_t  *value;

    value = params[NGX_HTTP_SSI_CONFIG_TIMEFMT];

    if (value) {
        ctx->timefmt.len = value->len;
        ctx->timefmt.data = ngx_pnalloc(r->pool, value->len + 1);
        if (ctx->timefmt.data == NULL) {
            return NGX_ERROR;
        }

        ngx_cpystrn(ctx->timefmt.data, value->data, value->len + 1);
    }

    value = params[NGX_HTTP_SSI_CONFIG_ERRMSG];

    if (value) {
        ctx->errmsg = *value;
    }

    return NGX_OK;
}",2381.0,2406.0,1.0,19.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5367,220734,ngx_http_ssi_set,1,ngx_http_ssi_set,"ngx_int_t ngx_http_ssi_set (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_set(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    ngx_int_t            rc;
    ngx_str_t           *name, *value, *vv;
    ngx_uint_t           key;
    ngx_http_ssi_var_t  *var;
    ngx_http_ssi_ctx_t  *mctx;

    mctx = ngx_http_get_module_ctx(r->main, ngx_http_ssi_filter_module);

    if (mctx->variables == NULL) {
        mctx->variables = ngx_list_create(r->pool, 4,
                                          sizeof(ngx_http_ssi_var_t));
        if (mctx->variables == NULL) {
            return NGX_ERROR;
        }
    }

    name = params[NGX_HTTP_SSI_SET_VAR];
    value = params[NGX_HTTP_SSI_SET_VALUE];

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""ssi set \""%V\"" \""%V\"""", name, value);

    rc = ngx_http_ssi_evaluate_string(r, ctx, value, 0);

    if (rc != NGX_OK) {
        return rc;
    }

    key = ngx_hash_strlow(name->data, name->data, name->len);

    vv = ngx_http_ssi_get_...",2409.0,2463.0,1.0,18.0,55.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5368,220741,ngx_http_ssi_if,1,ngx_http_ssi_if,"ngx_int_t ngx_http_ssi_if (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_if(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    u_char       *p, *last;
    ngx_str_t    *expr, left, right;
    ngx_int_t     rc;
    ngx_uint_t    negative, noregex, flags;

    if (ctx->command.len == 2) {
        if (ctx->conditional) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""the \""if\"" command inside the \""if\"" command"");
            return NGX_HTTP_SSI_ERROR;
        }
    }

    if (ctx->output_chosen) {
        ctx->output = 0;
        return NGX_OK;
    }

    expr = params[NGX_HTTP_SSI_IF_EXPR];

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""ssi if expr=\""%V\"""", expr);

    left.data = expr->data;
    last = expr->data + expr->len;

    for (p = left.data; p < last; p++) {
        if (*p >= 'A' && *p <= 'Z') {
            *p |= 0x20;
            continue;
        }

        if ((*p >= 'a' && *p <= 'z')
             || (*p >= '0...",2466.0,2637.0,1.0,19.0,172.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5369,220748,ngx_http_ssi_else,1,ngx_http_ssi_else,"ngx_int_t ngx_http_ssi_else (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_else(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""ssi else"");

    if (ctx->output_chosen) {
        ctx->output = 0;
    } else {
        ctx->output = 1;
    }

    ctx->conditional = NGX_HTTP_SSI_COND_ELSE;

    return NGX_OK;
}",2640.0,2656.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5370,220755,ngx_http_ssi_endif,1,ngx_http_ssi_endif,"ngx_int_t ngx_http_ssi_endif (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_endif(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""ssi endif"");

    ctx->output = 1;
    ctx->output_chosen = 0;
    ctx->conditional = 0;

    return NGX_OK;
}",2659.0,2671.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5371,220762,ngx_http_ssi_block,1,ngx_http_ssi_block,"ngx_int_t ngx_http_ssi_block (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_block(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    ngx_http_ssi_ctx_t    *mctx;
    ngx_http_ssi_block_t  *bl;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""ssi block"");

    mctx = ngx_http_get_module_ctx(r->main, ngx_http_ssi_filter_module);

    if (mctx->blocks == NULL) {
        mctx->blocks = ngx_array_create(r->pool, 4,
                                        sizeof(ngx_http_ssi_block_t));
        if (mctx->blocks == NULL) {
            return NGX_HTTP_SSI_ERROR;
        }
    }

    bl = ngx_array_push(mctx->blocks);
    if (bl == NULL) {
        return NGX_HTTP_SSI_ERROR;
    }

    bl->name = *params[NGX_HTTP_SSI_BLOCK_NAME];
    bl->bufs = NULL;
    bl->count = 0;

    ctx->output = 0;
    ctx->block = 1;

    return NGX_OK;
}",2674.0,2707.0,1.0,19.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5372,220769,ngx_http_ssi_endblock,1,ngx_http_ssi_endblock,"ngx_int_t ngx_http_ssi_endblock (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_endblock(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
    ngx_str_t **params)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""ssi endblock"");

    ctx->output = 1;
    ctx->block = 0;

    return NGX_OK;
}",2710.0,2721.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5373,220776,ngx_http_ssi_date_gmt_local_variable,1,ngx_http_ssi_date_gmt_local_variable,"ngx_int_t ngx_http_ssi_date_gmt_local_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_date_gmt_local_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t gmt)
{
    time_t               now;
    ngx_http_ssi_ctx_t  *ctx;
    ngx_str_t           *timefmt;
    struct tm            tm;
    char                 buf[NGX_HTTP_SSI_DATE_LEN];

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    now = ngx_time();

    ctx = ngx_http_get_module_ctx(r, ngx_http_ssi_filter_module);

    timefmt = ctx ? &ctx->timefmt : &ngx_http_ssi_timefmt;

    if (timefmt->len == sizeof(""%s"") - 1
        && timefmt->data[0] == '%' && timefmt->data[1] == 's')
    {
        v->data = ngx_pnalloc(r->pool, NGX_TIME_T_LEN);
        if (v->data == NULL) {
            return NGX_ERROR;
        }

        v->len = ngx_sprintf(v->data, ""%T"", now) - v->data;

        return NGX_OK;
    }

    if (gmt) {
        ngx_libc_gmtime(now, &tm);
    } else {
        ngx_libc_localtime(now, &tm);
    }

    v->len = strftime(buf, NGX_HTTP_SSI...",2724.0,2777.0,1.0,29.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5374,220783,ngx_http_ssi_preconfiguration,1,ngx_http_ssi_preconfiguration,ngx_int_t ngx_http_ssi_preconfiguration (ngx_conf_t*),http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_preconfiguration(ngx_conf_t *cf)
{
    ngx_int_t                  rc;
    ngx_http_variable_t       *var, *v;
    ngx_http_ssi_command_t    *cmd;
    ngx_http_ssi_main_conf_t  *smcf;

    for (v = ngx_http_ssi_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    smcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_ssi_filter_module);

    for (cmd = ngx_http_ssi_commands; cmd->name.len; cmd++) {
        rc = ngx_hash_add_key(&smcf->commands, &cmd->name, cmd,
                              NGX_HASH_READONLY_KEY);

        if (rc == NGX_OK) {
            continue;
        }

        if (rc == NGX_BUSY) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""conflicting SSI command \""%V\"""", &cmd->name);
        }

        return NGX_ERROR;
   ...",2780.0,2817.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5375,220788,ngx_http_ssi_create_main_conf,1,ngx_http_ssi_create_main_conf,void* ngx_http_ssi_create_main_conf (ngx_conf_t*),http\modules\ngx_http_ssi_filter_module.c,"static void *
ngx_http_ssi_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_ssi_main_conf_t  *smcf;

    smcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_ssi_main_conf_t));
    if (smcf == NULL) {
        return NULL;
    }

    smcf->commands.pool = cf->pool;
    smcf->commands.temp_pool = cf->temp_pool;

    if (ngx_hash_keys_array_init(&smcf->commands, NGX_HASH_SMALL) != NGX_OK) {
        return NULL;
    }

    return smcf;
}",2820.0,2838.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5376,220793,ngx_http_ssi_init_main_conf,1,ngx_http_ssi_init_main_conf,"char* ngx_http_ssi_init_main_conf (ngx_conf_t*,void*)",http\modules\ngx_http_ssi_filter_module.c,"static char *
ngx_http_ssi_init_main_conf(ngx_conf_t *cf, void *conf)
{
    ngx_http_ssi_main_conf_t *smcf = conf;

    ngx_hash_init_t  hash;

    hash.hash = &smcf->hash;
    hash.key = ngx_hash_key;
    hash.max_size = 1024;
    hash.bucket_size = ngx_cacheline_size;
    hash.name = ""ssi_command_hash"";
    hash.pool = cf->pool;
    hash.temp_pool = NULL;

    if (ngx_hash_init(&hash, smcf->commands.keys.elts,
                      smcf->commands.keys.nelts)
        != NGX_OK)
    {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",2841.0,2864.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
5377,220799,ngx_http_ssi_create_loc_conf,1,ngx_http_ssi_create_loc_conf,void* ngx_http_ssi_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_ssi_filter_module.c,"static void *
ngx_http_ssi_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_ssi_loc_conf_t  *slcf;

    slcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_ssi_loc_conf_t));
    if (slcf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->types = { NULL };
     *     conf->types_keys = NULL;
     */

    slcf->enable = NGX_CONF_UNSET;
    slcf->silent_errors = NGX_CONF_UNSET;
    slcf->ignore_recycled_buffers = NGX_CONF_UNSET;
    slcf->last_modified = NGX_CONF_UNSET;

    slcf->min_file_chunk = NGX_CONF_UNSET_SIZE;
    slcf->value_len = NGX_CONF_UNSET_SIZE;

    return slcf;
}",2867.0,2893.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5378,220804,ngx_http_ssi_merge_loc_conf,1,ngx_http_ssi_merge_loc_conf,"char* ngx_http_ssi_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_ssi_filter_module.c,"static char *
ngx_http_ssi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_ssi_loc_conf_t *prev = parent;
    ngx_http_ssi_loc_conf_t *conf = child;

    ngx_conf_merge_value(conf->enable, prev->enable, 0);
    ngx_conf_merge_value(conf->silent_errors, prev->silent_errors, 0);
    ngx_conf_merge_value(conf->ignore_recycled_buffers,
                         prev->ignore_recycled_buffers, 0);
    ngx_conf_merge_value(conf->last_modified, prev->last_modified, 0);

    ngx_conf_merge_size_value(conf->min_file_chunk, prev->min_file_chunk, 1024);
    ngx_conf_merge_size_value(conf->value_len, prev->value_len, 255);

    if (ngx_http_merge_types(cf, &conf->types_keys, &conf->types,
                             &prev->types_keys, &prev->types,
                             ngx_http_html_default_types)
        != NGX_OK)
    {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",2896.0,2920.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5379,220811,ngx_http_ssi_filter_init,1,ngx_http_ssi_filter_init,ngx_int_t ngx_http_ssi_filter_init (ngx_conf_t*),http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_ssi_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_ssi_body_filter;

    return NGX_OK;
}",2923.0,2933.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5380,221274,ngx_http_ssi_header_filter,1,ngx_http_ssi_header_filter,ngx_int_t ngx_http_ssi_header_filter (ngx_http_request_t*),http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_header_filter(ngx_http_request_t *r)
{
    ngx_http_ssi_ctx_t       *ctx;
    ngx_http_ssi_loc_conf_t  *slcf;

    slcf = ngx_http_get_module_loc_conf(r, ngx_http_ssi_filter_module);

    if (!slcf->enable
        || r->headers_out.content_length_n == 0
        || ngx_http_test_content_type(r, &slcf->types) == NULL)
    {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_ssi_ctx_t));
    if (ctx == NULL) {
        return NGX_ERROR;
    }

    ngx_http_set_ctx(r, ctx, ngx_http_ssi_filter_module);


    ctx->value_len = slcf->value_len;
    ctx->last_out = &ctx->out;

    ctx->encoding = NGX_HTTP_SSI_ENTITY_ENCODING;
    ctx->output = 1;

    ctx->params.elts = ctx->params_array;
    ctx->params.size = sizeof(ngx_table_elt_t);
    ctx->params.nalloc = NGX_HTTP_SSI_PARAMS_N;
    ctx->params.pool = r->pool;

    ctx->timefmt = ngx_http_ssi_timefmt;
    ngx_str_set(&ctx->errmsg,
                ""[an error oc...",329.0,385.0,1.0,1.0,57.0,53,8,46,11,0,21,5,6,4,2,,0,21,2,1,1,ngx_int_t
5381,221438,ngx_http_ssi_body_filter,1,ngx_http_ssi_body_filter,"ngx_int_t ngx_http_ssi_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_ssi_filter_module.c,"static ngx_int_t
ngx_http_ssi_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    size_t                     len;
    ngx_int_t                  rc;
    ngx_buf_t                 *b;
    ngx_uint_t                 i, index;
    ngx_chain_t               *cl, **ll;
    ngx_table_elt_t           *param;
    ngx_http_ssi_ctx_t        *ctx, *mctx;
    ngx_http_ssi_block_t      *bl;
    ngx_http_ssi_param_t      *prm;
    ngx_http_ssi_command_t    *cmd;
    ngx_http_ssi_loc_conf_t   *slcf;
    ngx_http_ssi_main_conf_t  *smcf;
    ngx_str_t                 *params[NGX_HTTP_SSI_MAX_PARAMS + 1];

    ctx = ngx_http_get_module_ctx(r, ngx_http_ssi_filter_module);

    if (ctx == NULL
        || (in == NULL
            && ctx->buf == NULL
            && ctx->in == NULL
            && ctx->busy == NULL))
    {
        return ngx_http_next_body_filter(r, in);
    }

    /* add the incoming chain to the chain ctx->in */

    if (in) {
        if (ngx_chain_add_copy(r->pool, &ctx->in, in) !=...",388.0,911.0,1.0,1.0,524.0,534,19,393,31,0,157,70,208,55,14,,0,149,4,2,2,ngx_int_t
5382,228707,ngx_http_ssi_command_pt,1,ngx_http_ssi_command_pt,"ngx_int_t ngx_http_ssi_command_pt (ngx_http_request_t*,ngx_http_ssi_ctx_t*,ngx_str_t**)",http\modules\ngx_http_ssi_filter_module.h,"typedef ngx_int_t (*ngx_http_ssi_command_pt) (ngx_http_request_t *r,
    ngx_http_ssi_ctx_t *ctx, ngx_str_t **);",87.0,88.0,19.0,42.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5383,228740,ngx_ssl_variable_handler_pt,1,ngx_ssl_variable_handler_pt,"ngx_int_t ngx_ssl_variable_handler_pt (ngx_connection_t*,ngx_pool_t*,ngx_str_t*)",http\modules\ngx_http_ssl_module.c,"typedef ngx_int_t (*ngx_ssl_variable_handler_pt)(ngx_connection_t *c,
    ngx_pool_t *pool, ngx_str_t *s);",13.0,14.0,19.0,35.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5384,228747,ngx_http_ssl_static_variable,1,ngx_http_ssl_static_variable,"ngx_int_t ngx_http_ssl_static_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_ssl_module.c,"static ngx_int_t
ngx_http_ssl_static_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_ssl_variable_handler_pt  handler = (ngx_ssl_variable_handler_pt) data;

    size_t     len;
    ngx_str_t  s;

    if (r->connection->ssl) {

        (void) handler(r->connection, NULL, &s);

        v->data = s.data;

        for (len = 0; v->data[len]; len++) { /* void */ }

        v->len = len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;

        return NGX_OK;
    }

    v->not_found = 1;

    return NGX_OK;
}",512.0,540.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5385,228754,ngx_http_ssl_variable,1,ngx_http_ssl_variable,"ngx_int_t ngx_http_ssl_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_ssl_module.c,"static ngx_int_t
ngx_http_ssl_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_ssl_variable_handler_pt  handler = (ngx_ssl_variable_handler_pt) data;

    ngx_str_t  s;

    if (r->connection->ssl) {

        if (handler(r->connection, r->pool, &s) != NGX_OK) {
            return NGX_ERROR;
        }

        v->len = s.len;
        v->data = s.data;

        if (v->len) {
            v->valid = 1;
            v->no_cacheable = 0;
            v->not_found = 0;

            return NGX_OK;
        }
    }

    v->not_found = 1;

    return NGX_OK;
}",543.0,572.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5386,228761,ngx_http_ssl_add_variables,1,ngx_http_ssl_add_variables,ngx_int_t ngx_http_ssl_add_variables (ngx_conf_t*),http\modules\ngx_http_ssl_module.c,"static ngx_int_t
ngx_http_ssl_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_ssl_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",575.0,591.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5387,228766,ngx_http_ssl_create_srv_conf,1,ngx_http_ssl_create_srv_conf,void* ngx_http_ssl_create_srv_conf (ngx_conf_t*),http\modules\ngx_http_ssl_module.c,"static void *
ngx_http_ssl_create_srv_conf(ngx_conf_t *cf)
{
    ngx_http_ssl_srv_conf_t  *sscf;

    sscf = ngx_pcalloc(cf->pool, sizeof(ngx_http_ssl_srv_conf_t));
    if (sscf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     sscf->protocols = 0;
     *     sscf->certificate_values = NULL;
     *     sscf->dhparam = { 0, NULL };
     *     sscf->ecdh_curve = { 0, NULL };
     *     sscf->client_certificate = { 0, NULL };
     *     sscf->trusted_certificate = { 0, NULL };
     *     sscf->crl = { 0, NULL };
     *     sscf->ciphers = { 0, NULL };
     *     sscf->shm_zone = NULL;
     *     sscf->ocsp_responder = { 0, NULL };
     *     sscf->stapling_file = { 0, NULL };
     *     sscf->stapling_responder = { 0, NULL };
     */

    sscf->enable = NGX_CONF_UNSET;
    sscf->prefer_server_ciphers = NGX_CONF_UNSET;
    sscf->early_data = NGX_CONF_UNSET;
    sscf->reject_handshake = NGX_CONF_UNSET;
    sscf->buffer_size = NGX_CONF_UNSET_SIZE...",594.0,642.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5388,228771,ngx_http_ssl_merge_srv_conf,1,ngx_http_ssl_merge_srv_conf,"char* ngx_http_ssl_merge_srv_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_ssl_module.c,"static char *
ngx_http_ssl_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_ssl_srv_conf_t *prev = parent;
    ngx_http_ssl_srv_conf_t *conf = child;

    ngx_pool_cleanup_t  *cln;

    if (conf->enable == NGX_CONF_UNSET) {
        if (prev->enable == NGX_CONF_UNSET) {
            conf->enable = 0;

        } else {
            conf->enable = prev->enable;
            conf->file = prev->file;
            conf->line = prev->line;
        }
    }

    ngx_conf_merge_value(conf->session_timeout,
                         prev->session_timeout, 300);

    ngx_conf_merge_value(conf->prefer_server_ciphers,
                         prev->prefer_server_ciphers, 0);

    ngx_conf_merge_value(conf->early_data, prev->early_data, 0);
    ngx_conf_merge_value(conf->reject_handshake, prev->reject_handshake, 0);

    ngx_conf_merge_bitmask_value(conf->protocols, prev->protocols,
                         (NGX_CONF_BITMASK_SET|NGX_SSL_TLSv1
                          |NGX_SSL_T...",645.0,947.0,1.0,25.0,303.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5389,228778,ngx_http_ssl_compile_certificates,1,ngx_http_ssl_compile_certificates,"ngx_int_t ngx_http_ssl_compile_certificates (ngx_conf_t*,ngx_http_ssl_srv_conf_t*)",http\modules\ngx_http_ssl_module.c,"static ngx_int_t
ngx_http_ssl_compile_certificates(ngx_conf_t *cf,
    ngx_http_ssl_srv_conf_t *conf)
{
    ngx_str_t                         *cert, *key;
    ngx_uint_t                         i, nelts;
    ngx_http_complex_value_t          *cv;
    ngx_http_compile_complex_value_t   ccv;

    if (conf->certificates == NULL) {
        return NGX_OK;
    }

    cert = conf->certificates->elts;
    key = conf->certificate_keys->elts;
    nelts = conf->certificates->nelts;

    for (i = 0; i < nelts; i++) {

        if (ngx_http_script_variables_count(&cert[i])) {
            goto found;
        }

        if (ngx_http_script_variables_count(&key[i])) {
            goto found;
        }
    }

    return NGX_OK;

found:

    conf->certificate_values = ngx_array_create(cf->pool, nelts,
                                             sizeof(ngx_http_complex_value_t));
    if (conf->certificate_values == NULL) {
        return NGX_ERROR;
    }

    conf->certificate_key_values = ngx_array_c...",950.0,1035.0,1.0,1.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5390,228784,ngx_http_ssl_enable,1,ngx_http_ssl_enable,"char* ngx_http_ssl_enable (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_ssl_module.c,"static char *
ngx_http_ssl_enable(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_ssl_srv_conf_t *sscf = conf;

    char  *rv;

    rv = ngx_conf_set_flag_slot(cf, cmd, conf);

    if (rv != NGX_CONF_OK) {
        return rv;
    }

    sscf->file = cf->conf_file->file.name.data;
    sscf->line = cf->conf_file->line;

    return NGX_CONF_OK;
}",1038.0,1055.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5391,228791,ngx_http_ssl_password_file,1,ngx_http_ssl_password_file,"char* ngx_http_ssl_password_file (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_ssl_module.c,"static char *
ngx_http_ssl_password_file(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_ssl_srv_conf_t *sscf = conf;

    ngx_str_t  *value;

    if (sscf->passwords != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    sscf->passwords = ngx_ssl_read_password_file(cf, &value[1]);

    if (sscf->passwords == NULL) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",1058.0,1078.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5392,228798,ngx_http_ssl_session_cache,1,ngx_http_ssl_session_cache,"char* ngx_http_ssl_session_cache (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_ssl_module.c,"static char *
ngx_http_ssl_session_cache(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_ssl_srv_conf_t *sscf = conf;

    size_t       len;
    ngx_str_t   *value, name, size;
    ngx_int_t    n;
    ngx_uint_t   i, j;

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {

        if (ngx_strcmp(value[i].data, ""off"") == 0) {
            sscf->builtin_session_cache = NGX_SSL_NO_SCACHE;
            continue;
        }

        if (ngx_strcmp(value[i].data, ""none"") == 0) {
            sscf->builtin_session_cache = NGX_SSL_NONE_SCACHE;
            continue;
        }

        if (ngx_strcmp(value[i].data, ""builtin"") == 0) {
            sscf->builtin_session_cache = NGX_SSL_DFLT_BUILTIN_SCACHE;
            continue;
        }

        if (value[i].len > sizeof(""builtin:"") - 1
            && ngx_strncmp(value[i].data, ""builtin:"", sizeof(""builtin:"") - 1)
               == 0)
        {
            n = ngx_atoi(value[i].data + sizeof(""builtin:"") - 1,
     ...",1081.0,1190.0,1.0,1.0,110.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5393,228805,ngx_http_ssl_ocsp_cache,1,ngx_http_ssl_ocsp_cache,"char* ngx_http_ssl_ocsp_cache (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_ssl_module.c,"static char *
ngx_http_ssl_ocsp_cache(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_ssl_srv_conf_t *sscf = conf;

    size_t       len;
    ngx_int_t    n;
    ngx_str_t   *value, name, size;
    ngx_uint_t   j;

    if (sscf->ocsp_cache_zone != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        sscf->ocsp_cache_zone = NULL;
        return NGX_CONF_OK;
    }

    if (value[1].len <= sizeof(""shared:"") - 1
        || ngx_strncmp(value[1].data, ""shared:"", sizeof(""shared:"") - 1) != 0)
    {
        goto invalid;
    }

    len = 0;

    for (j = sizeof(""shared:"") - 1; j < value[1].len; j++) {
        if (value[1].data[j] == ':') {
            break;
        }

        len++;
    }

    if (len == 0) {
        goto invalid;
    }

    name.len = len;
    name.data = value[1].data + sizeof(""shared:"") - 1;

    size.len = value[1].len - j - 1;
    size.data = name.data + len + 1;...",1193.0,1269.0,1.0,1.0,77.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5394,228812,ngx_http_ssl_conf_command_check,1,ngx_http_ssl_conf_command_check,"char* ngx_http_ssl_conf_command_check (ngx_conf_t*,void*,void*)",http\modules\ngx_http_ssl_module.c,"static char *
ngx_http_ssl_conf_command_check(ngx_conf_t *cf, void *post, void *data)
{
#ifndef SSL_CONF_FLAG_FILE
    return ""is not supported on this platform"";
#else
    return NGX_CONF_OK;
#endif
}",1272.0,1280.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5395,228819,ngx_http_ssl_init,1,ngx_http_ssl_init,ngx_int_t ngx_http_ssl_init (ngx_conf_t*),http\modules\ngx_http_ssl_module.c,"static ngx_int_t
ngx_http_ssl_init(ngx_conf_t *cf)
{
    ngx_uint_t                   a, p, s;
    ngx_http_conf_addr_t        *addr;
    ngx_http_conf_port_t        *port;
    ngx_http_ssl_srv_conf_t     *sscf;
    ngx_http_core_loc_conf_t    *clcf;
    ngx_http_core_srv_conf_t   **cscfp, *cscf;
    ngx_http_core_main_conf_t   *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
    cscfp = cmcf->servers.elts;

    for (s = 0; s < cmcf->servers.nelts; s++) {

        sscf = cscfp[s]->ctx->srv_conf[ngx_http_ssl_module.ctx_index];

        if (sscf->ssl.ctx == NULL) {
            continue;
        }

        clcf = cscfp[s]->ctx->loc_conf[ngx_http_core_module.ctx_index];

        if (sscf->stapling) {
            if (ngx_ssl_stapling_resolver(cf, &sscf->ssl, clcf->resolver,
                                          clcf->resolver_timeout)
                != NGX_OK)
            {
                return NGX_ERROR;
            }
        }

        if (sscf->o...",1283.0,1380.0,1.0,1.0,98.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5396,232058,ngx_http_static_handler,1,ngx_http_static_handler,ngx_int_t ngx_http_static_handler (ngx_http_request_t*),http\modules\ngx_http_static_module.c,"static ngx_int_t
ngx_http_static_handler(ngx_http_request_t *r)
{
    u_char                    *last, *location;
    size_t                     root, len;
    uintptr_t                  escape;
    ngx_str_t                  path;
    ngx_int_t                  rc;
    ngx_uint_t                 level;
    ngx_log_t                 *log;
    ngx_buf_t                 *b;
    ngx_chain_t                out;
    ngx_open_file_info_t       of;
    ngx_http_core_loc_conf_t  *clcf;

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD|NGX_HTTP_POST))) {
        return NGX_HTTP_NOT_ALLOWED;
    }

    if (r->uri.data[r->uri.len - 1] == '/') {
        return NGX_DECLINED;
    }

    log = r->connection->log;

    /*
     * ngx_http_map_uri_to_path() allocates memory for terminating '\0'
     * so we do not need to reserve memory for '/' for possible redirect
     */

    last = ngx_http_map_uri_to_path(r, &path, &root, 0);
    if (last == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR...",48.0,280.0,1.0,1.0,233.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5397,232063,ngx_http_static_init,1,ngx_http_static_init,ngx_int_t ngx_http_static_init (ngx_conf_t*),http\modules\ngx_http_static_module.c,"static ngx_int_t
ngx_http_static_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_CONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_static_handler;

    return NGX_OK;
}",283.0,299.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5398,232878,ngx_http_stub_status_handler,1,ngx_http_stub_status_handler,ngx_int_t ngx_http_stub_status_handler (ngx_http_request_t*),http\modules\ngx_http_stub_status_module.c,"static ngx_int_t
ngx_http_stub_status_handler(ngx_http_request_t *r)
{
    size_t             size;
    ngx_int_t          rc;
    ngx_buf_t         *b;
    ngx_chain_t        out;
    ngx_atomic_int_t   ap, hn, ac, rq, rd, wr, wa;

    if (!(r->method & (NGX_HTTP_GET|NGX_HTTP_HEAD))) {
        return NGX_HTTP_NOT_ALLOWED;
    }

    rc = ngx_http_discard_request_body(r);

    if (rc != NGX_OK) {
        return rc;
    }

    r->headers_out.content_type_len = sizeof(""text/plain"") - 1;
    ngx_str_set(&r->headers_out.content_type, ""text/plain"");
    r->headers_out.content_type_lowcase = NULL;

    size = sizeof(""Active connections:  \n"") + NGX_ATOMIC_T_LEN
           + sizeof(""server accepts handled requests\n"") - 1
           + 6 + 3 * NGX_ATOMIC_T_LEN
           + sizeof(""Reading:  Writing:  Waiting:  \n"") + 3 * NGX_ATOMIC_T_LEN;

    b = ngx_create_temp_buf(r->pool, size);
    if (b == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    out.buf = b;
    out.next = NU...",83.0,150.0,1.0,1.0,68.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5399,232883,ngx_http_stub_status_variable,1,ngx_http_stub_status_variable,"ngx_int_t ngx_http_stub_status_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_stub_status_module.c,"static ngx_int_t
ngx_http_stub_status_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char            *p;
    ngx_atomic_int_t   value;

    p = ngx_pnalloc(r->pool, NGX_ATOMIC_T_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    switch (data) {
    case 0:
        value = *ngx_stat_active;
        break;

    case 1:
        value = *ngx_stat_reading;
        break;

    case 2:
        value = *ngx_stat_writing;
        break;

    case 3:
        value = *ngx_stat_waiting;
        break;

    /* suppress warning */
    default:
        value = 0;
        break;
    }

    v->len = ngx_sprintf(p, ""%uA"", value) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",153.0,195.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5400,232890,ngx_http_stub_status_add_variables,1,ngx_http_stub_status_add_variables,ngx_int_t ngx_http_stub_status_add_variables (ngx_conf_t*),http\modules\ngx_http_stub_status_module.c,"static ngx_int_t
ngx_http_stub_status_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_stub_status_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",198.0,214.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5401,232895,ngx_http_set_stub_status,1,ngx_http_set_stub_status,"char* ngx_http_set_stub_status (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_stub_status_module.c,"static char *
ngx_http_set_stub_status(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_stub_status_handler;

    return NGX_CONF_OK;
}",217.0,226.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5402,233464,ngx_http_sub_output,1,ngx_http_sub_output,"ngx_int_t ngx_http_sub_output (ngx_http_request_t*,ngx_http_sub_ctx_t*)",http\modules\ngx_http_sub_filter_module.c,"static ngx_int_t
ngx_http_sub_output(ngx_http_request_t *r, ngx_http_sub_ctx_t *ctx)
{
    ngx_int_t     rc;
    ngx_buf_t    *b;
    ngx_chain_t  *cl;

#if 1
    b = NULL;
    for (cl = ctx->out; cl; cl = cl->next) {
        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""sub out: %p %p"", cl->buf, cl->buf->pos);
        if (cl->buf == b) {
            ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                          ""the same buf was used in sub"");
            ngx_debug_point();
            return NGX_ERROR;
        }
        b = cl->buf;
    }
#endif

    rc = ngx_http_next_body_filter(r, ctx->out);

    if (ctx->busy == NULL) {
        ctx->busy = ctx->out;

    } else {
        for (cl = ctx->busy; cl->next; cl = cl->next) { /* void */ }
        cl->next = ctx->out;
    }

    ctx->out = NULL;
    ctx->last_out = &ctx->out;

    while (ctx->busy) {

        cl = ctx->busy;
        b = cl->buf;

        if (ngx_buf_size(b) != 0) {
   ...",537.0,603.0,1.0,1.0,67.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5403,233470,ngx_http_sub_parse,1,ngx_http_sub_parse,"ngx_int_t ngx_http_sub_parse (ngx_http_request_t*,ngx_http_sub_ctx_t*,ngx_uint_t)",http\modules\ngx_http_sub_filter_module.c,"static ngx_int_t
ngx_http_sub_parse(ngx_http_request_t *r, ngx_http_sub_ctx_t *ctx,
    ngx_uint_t flush)
{
    u_char                   *p, c;
    ngx_str_t                *m;
    ngx_int_t                 offset, start, next, end, len, rc;
    ngx_uint_t                shift, i, j;
    ngx_http_sub_match_t     *match;
    ngx_http_sub_tables_t    *tables;
    ngx_http_sub_loc_conf_t  *slcf;

    slcf = ngx_http_get_module_loc_conf(r, ngx_http_sub_filter_module);
    tables = ctx->tables;
    match = ctx->matches->elts;

    offset = ctx->offset;
    end = ctx->buf->last - ctx->pos;

    if (ctx->once) {
        /* sets start and next to end */
        offset = end + (ngx_int_t) tables->min_match_len - 1;
        goto again;
    }

    while (offset < end) {

        c = offset < 0 ? ctx->looked.data[ctx->looked.len + offset]
                       : ctx->pos[offset];

        c = ngx_tolower(c);

        shift = tables->shift[c];
        if (shift > 0) {
            offset += shif...",606.0,740.0,1.0,1.0,135.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5404,233477,ngx_http_sub_match,1,ngx_http_sub_match,"ngx_int_t ngx_http_sub_match (ngx_http_sub_ctx_t*,ngx_int_t,ngx_str_t*)",http\modules\ngx_http_sub_filter_module.c,"static ngx_int_t
ngx_http_sub_match(ngx_http_sub_ctx_t *ctx, ngx_int_t start, ngx_str_t *m)
{
    u_char  *p, *last, *pat, *pat_end;

    pat = m->data;
    pat_end = m->data + m->len;

    if (start >= 0) {
        p = ctx->pos + start;

    } else {
        last = ctx->looked.data + ctx->looked.len;
        p = last + start;

        while (p < last && pat < pat_end) {
            if (ngx_tolower(*p) != *pat) {
                return NGX_DECLINED;
            }

            p++;
            pat++;
        }

        p = ctx->pos;
    }

    while (p < ctx->buf->last && pat < pat_end) {
        if (ngx_tolower(*p) != *pat) {
            return NGX_DECLINED;
        }

        p++;
        pat++;
    }

    if (pat != pat_end) {
        /* partial match */
        return NGX_AGAIN;
    }

    return NGX_OK;
}",743.0,785.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5405,233484,ngx_http_sub_filter,1,ngx_http_sub_filter,"char* ngx_http_sub_filter (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_sub_filter_module.c,"static char *
ngx_http_sub_filter(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_sub_loc_conf_t *slcf = conf;

    ngx_str_t                         *value;
    ngx_http_sub_pair_t               *pair;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    if (value[1].len == 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, ""empty search pattern"");
        return NGX_CONF_ERROR;
    }

    if (slcf->pairs == NULL) {
        slcf->pairs = ngx_array_create(cf->pool, 1,
                                       sizeof(ngx_http_sub_pair_t));
        if (slcf->pairs == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    if (slcf->pairs->nelts == 255) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""number of search patterns exceeds 255"");
        return NGX_CONF_ERROR;
    }

    ngx_strlow(value[1].data, value[1].data, value[1].len);

    pair = ngx_array_push(slcf->pairs);
    if (pair == NULL) {
       ...",788.0,854.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5406,233491,ngx_http_sub_create_conf,1,ngx_http_sub_create_conf,void* ngx_http_sub_create_conf (ngx_conf_t*),http\modules\ngx_http_sub_filter_module.c,"static void *
ngx_http_sub_create_conf(ngx_conf_t *cf)
{
    ngx_http_sub_loc_conf_t  *slcf;

    slcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_sub_loc_conf_t));
    if (slcf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->dynamic = 0;
     *     conf->pairs = NULL;
     *     conf->tables = NULL;
     *     conf->types = { NULL };
     *     conf->types_keys = NULL;
     *     conf->matches = NULL;
     */

    slcf->once = NGX_CONF_UNSET;
    slcf->last_modified = NGX_CONF_UNSET;

    return slcf;
}",857.0,882.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5407,233496,ngx_http_sub_merge_conf,1,ngx_http_sub_merge_conf,"char* ngx_http_sub_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_sub_filter_module.c,"static char *
ngx_http_sub_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_uint_t                i, n;
    ngx_http_sub_pair_t      *pairs;
    ngx_http_sub_match_t     *matches;
    ngx_http_sub_loc_conf_t  *prev = parent;
    ngx_http_sub_loc_conf_t  *conf = child;

    ngx_conf_merge_value(conf->once, prev->once, 1);
    ngx_conf_merge_value(conf->last_modified, prev->last_modified, 0);

    if (ngx_http_merge_types(cf, &conf->types_keys, &conf->types,
                             &prev->types_keys, &prev->types,
                             ngx_http_html_default_types)
        != NGX_OK)
    {
        return NGX_CONF_ERROR;
    }

    if (conf->pairs == NULL) {
        conf->dynamic = prev->dynamic;
        conf->pairs = prev->pairs;
        conf->matches = prev->matches;
        conf->tables = prev->tables;
    }

    if (conf->pairs && conf->dynamic == 0 && conf->tables == NULL) {
        pairs = conf->pairs->elts;
        n = conf->pairs->nelts;

        match...",885.0,944.0,1.0,1.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5408,233503,ngx_http_sub_init_tables,1,ngx_http_sub_init_tables,"void ngx_http_sub_init_tables (ngx_http_sub_tables_t*,ngx_http_sub_match_t*,ngx_uint_t)",http\modules\ngx_http_sub_filter_module.c,"static void
ngx_http_sub_init_tables(ngx_http_sub_tables_t *tables,
    ngx_http_sub_match_t *match, ngx_uint_t n)
{
    u_char      c;
    ngx_uint_t  i, j, min, max, ch;

    min = match[0].match.len;
    max = match[0].match.len;

    for (i = 1; i < n; i++) {
        min = ngx_min(min, match[i].match.len);
        max = ngx_max(max, match[i].match.len);
    }

    tables->min_match_len = min;
    tables->max_match_len = max;

    ngx_http_sub_cmp_index = tables->min_match_len - 1;
    ngx_sort(match, n, sizeof(ngx_http_sub_match_t), ngx_http_sub_cmp_matches);

    min = ngx_min(min, 255);
    ngx_memset(tables->shift, min, 256);

    ch = 0;

    for (i = 0; i < n; i++) {

        for (j = 0; j < min; j++) {
            c = match[i].match.data[tables->min_match_len - 1 - j];
            tables->shift[c] = ngx_min(tables->shift[c], (u_char) j);
        }

        c = match[i].match.data[tables->min_match_len - 1];
        while (ch <= (ngx_uint_t) c) {
            tables->index[c...",947.0,989.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5409,233510,ngx_http_sub_cmp_matches,1,ngx_http_sub_cmp_matches,"ngx_int_t ngx_http_sub_cmp_matches (void*,void*)",http\modules\ngx_http_sub_filter_module.c,"static ngx_int_t
ngx_http_sub_cmp_matches(const void *one, const void *two)
{
    ngx_int_t              c1, c2;
    ngx_http_sub_match_t  *first, *second;

    first = (ngx_http_sub_match_t *) one;
    second = (ngx_http_sub_match_t *) two;

    c1 = first->match.data[ngx_http_sub_cmp_index];
    c2 = second->match.data[ngx_http_sub_cmp_index];

    return c1 - c2;
}",992.0,1005.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5410,233516,ngx_http_sub_filter_init,1,ngx_http_sub_filter_init,ngx_int_t ngx_http_sub_filter_init (ngx_conf_t*),http\modules\ngx_http_sub_filter_module.c,"static ngx_int_t
ngx_http_sub_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_sub_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_sub_body_filter;

    return NGX_OK;
}",1008.0,1018.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5411,233622,ngx_http_sub_header_filter,1,ngx_http_sub_header_filter,ngx_int_t ngx_http_sub_header_filter (ngx_http_request_t*),http\modules\ngx_http_sub_filter_module.c,"static ngx_int_t
ngx_http_sub_header_filter(ngx_http_request_t *r)
{
    ngx_str_t                *m;
    ngx_uint_t                i, j, n;
    ngx_http_sub_ctx_t       *ctx;
    ngx_http_sub_pair_t      *pairs;
    ngx_http_sub_match_t     *matches;
    ngx_http_sub_loc_conf_t  *slcf;

    slcf = ngx_http_get_module_loc_conf(r, ngx_http_sub_filter_module);

    if (slcf->pairs == NULL
        || r->headers_out.content_length_n == 0
        || ngx_http_test_content_type(r, &slcf->types) == NULL)
    {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_sub_ctx_t));
    if (ctx == NULL) {
        return NGX_ERROR;
    }

    if (slcf->dynamic == 0) {
        ctx->tables = slcf->tables;
        ctx->matches = slcf->matches;

    } else {
        pairs = slcf->pairs->elts;
        n = slcf->pairs->nelts;

        matches = ngx_pcalloc(r->pool, sizeof(ngx_http_sub_match_t) * n);
        if (matches == NULL) {
            return NGX_ERROR...",170.0,281.0,1.0,1.0,112.0,58,9,48,7,0,25,8,9,7,4,,0,25,2,1,1,ngx_int_t
5412,234016,ngx_http_sub_body_filter,1,ngx_http_sub_body_filter,"ngx_int_t ngx_http_sub_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_sub_filter_module.c,"static ngx_int_t
ngx_http_sub_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t                  rc;
    ngx_buf_t                 *b;
    ngx_str_t                 *sub;
    ngx_uint_t                 flush, last;
    ngx_chain_t               *cl;
    ngx_http_sub_ctx_t        *ctx;
    ngx_http_sub_match_t      *match;
    ngx_http_sub_loc_conf_t   *slcf;

    ctx = ngx_http_get_module_ctx(r, ngx_http_sub_filter_module);

    if (ctx == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    if ((in == NULL
         && ctx->buf == NULL
         && ctx->in == NULL
         && ctx->busy == NULL))
    {
        return ngx_http_next_body_filter(r, in);
    }

    if (ctx->once && (ctx->buf == NULL || ctx->in == NULL)) {

        if (ctx->busy) {
            if (ngx_http_sub_output(r, ctx) == NGX_ERROR) {
                return NGX_ERROR;
            }
        }

        return ngx_http_next_body_filter(r, in);
    }

    /* add the incoming chain to the ...",284.0,534.0,1.0,1.0,251.0,318,17,257,19,0,104,35,84,36,12,,0,103,4,2,2,ngx_int_t
5413,236483,ngx_http_try_files_handler,1,ngx_http_try_files_handler,ngx_int_t ngx_http_try_files_handler (ngx_http_request_t*),http\modules\ngx_http_try_files_module.c,"static ngx_int_t
ngx_http_try_files_handler(ngx_http_request_t *r)
{
    size_t                          len, root, alias, reserve, allocated;
    u_char                         *p, *name;
    ngx_str_t                       path, args;
    ngx_uint_t                      test_dir;
    ngx_http_try_file_t            *tf;
    ngx_open_file_info_t            of;
    ngx_http_script_code_pt         code;
    ngx_http_script_engine_t        e;
    ngx_http_core_loc_conf_t       *clcf;
    ngx_http_script_len_code_pt     lcode;
    ngx_http_try_files_loc_conf_t  *tlcf;

    tlcf = ngx_http_get_module_loc_conf(r, ngx_http_try_files_module);

    if (tlcf->try_files == NULL) {
        return NGX_DECLINED;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""try files handler"");

    allocated = 0;
    root = 0;
    name = NULL;
    /* suppress MSVC warning */
    path.data = NULL;

    tf = tlcf->try_files;

    clcf = ngx_http_get_module_loc_conf(r, ngx...",78.0,287.0,1.0,1.0,210.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5414,236488,ngx_http_try_files,1,ngx_http_try_files,"char* ngx_http_try_files (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_try_files_module.c,"static char *
ngx_http_try_files(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_try_files_loc_conf_t *tlcf = conf;

    ngx_str_t                  *value;
    ngx_int_t                   code;
    ngx_uint_t                  i, n;
    ngx_http_try_file_t        *tf;
    ngx_http_script_compile_t   sc;

    if (tlcf->try_files) {
        return ""is duplicate"";
    }

    tf = ngx_pcalloc(cf->pool, cf->args->nelts * sizeof(ngx_http_try_file_t));
    if (tf == NULL) {
        return NGX_CONF_ERROR;
    }

    tlcf->try_files = tf;

    value = cf->args->elts;

    for (i = 0; i < cf->args->nelts - 1; i++) {

        tf[i].name = value[i + 1];

        if (tf[i].name.len > 0
            && tf[i].name.data[tf[i].name.len - 1] == '/'
            && i + 2 < cf->args->nelts)
        {
            tf[i].test_dir = 1;
            tf[i].name.len--;
            tf[i].name.data[tf[i].name.len] = '\0';
        }

        n = ngx_http_script_variables_count(&tf[i].name);

        i...",290.0,365.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5415,236495,ngx_http_try_files_create_loc_conf,1,ngx_http_try_files_create_loc_conf,void* ngx_http_try_files_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_try_files_module.c,"static void *
ngx_http_try_files_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_try_files_loc_conf_t  *tlcf;

    tlcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_try_files_loc_conf_t));
    if (tlcf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     tlcf->try_files = NULL;
     */

    return tlcf;
}",368.0,385.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5416,236500,ngx_http_try_files_init,1,ngx_http_try_files_init,ngx_int_t ngx_http_try_files_init (ngx_conf_t*),http\modules\ngx_http_try_files_module.c,"static ngx_int_t
ngx_http_try_files_init(ngx_conf_t *cf)
{
    ngx_http_handler_pt        *h;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_HTTP_PRECONTENT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_http_try_files_handler;

    return NGX_OK;
}",388.0,404.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5417,237682,ngx_http_upstream_init_hash,1,ngx_http_upstream_init_hash,"ngx_int_t ngx_http_upstream_init_hash (ngx_conf_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_hash_module.c,"static ngx_int_t
ngx_http_upstream_init_hash(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
{
    if (ngx_http_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_http_upstream_init_hash_peer;

    return NGX_OK;
}",110.0,120.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5418,237688,ngx_http_upstream_init_hash_peer,1,ngx_http_upstream_init_hash_peer,"ngx_int_t ngx_http_upstream_init_hash_peer (ngx_http_request_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_hash_module.c,"static ngx_int_t
ngx_http_upstream_init_hash_peer(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us)
{
    ngx_http_upstream_hash_srv_conf_t   *hcf;
    ngx_http_upstream_hash_peer_data_t  *hp;

    hp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_hash_peer_data_t));
    if (hp == NULL) {
        return NGX_ERROR;
    }

    r->upstream->peer.data = &hp->rrp;

    if (ngx_http_upstream_init_round_robin_peer(r, us) != NGX_OK) {
        return NGX_ERROR;
    }

    r->upstream->peer.get = ngx_http_upstream_get_hash_peer;

    hcf = ngx_http_conf_upstream_srv_conf(us, ngx_http_upstream_hash_module);

    if (ngx_http_complex_value(r, &hcf->key, &hp->key) != NGX_OK) {
        return NGX_ERROR;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""upstream hash key:\""%V\"""", &hp->key);

    hp->conf = hcf;
    hp->tries = 0;
    hp->rehash = 0;
    hp->hash = 0;
    hp->get_rr_peer = ngx_http_upstream_get_round_robin_peer;

    return NGX_OK;
}",123.0,159.0,1.0,1.0,37.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5419,237694,ngx_http_upstream_get_hash_peer,1,ngx_http_upstream_get_hash_peer,"ngx_int_t ngx_http_upstream_get_hash_peer (ngx_peer_connection_t*,void*)",http\modules\ngx_http_upstream_hash_module.c,"static ngx_int_t
ngx_http_upstream_get_hash_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_http_upstream_hash_peer_data_t  *hp = data;

    time_t                        now;
    u_char                        buf[NGX_INT_T_LEN];
    size_t                        size;
    uint32_t                      hash;
    ngx_int_t                     w;
    uintptr_t                     m;
    ngx_uint_t                    n, p;
    ngx_http_upstream_rr_peer_t  *peer;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""get hash peer, try: %ui"", pc->tries);

    ngx_http_upstream_rr_peers_rlock(hp->rrp.peers);

    if (hp->tries > 20 || hp->rrp.peers->single || hp->key.len == 0) {
        ngx_http_upstream_rr_peers_unlock(hp->rrp.peers);
        return hp->get_rr_peer(pc, &hp->rrp);
    }

    now = ngx_time();

    pc->cached = 0;
    pc->connection = NULL;

    for ( ;; ) {

        /*
         * Hash expression is compatible with Cache::Memcached:
         * ((crc...",162.0,282.0,1.0,1.0,121.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5420,237700,ngx_http_upstream_init_chash,1,ngx_http_upstream_init_chash,"ngx_int_t ngx_http_upstream_init_chash (ngx_conf_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_hash_module.c,"static ngx_int_t
ngx_http_upstream_init_chash(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
{
    u_char                             *host, *port, c;
    size_t                              host_len, port_len, size;
    uint32_t                            hash, base_hash;
    ngx_str_t                          *server;
    ngx_uint_t                          npoints, i, j;
    ngx_http_upstream_rr_peer_t        *peer;
    ngx_http_upstream_rr_peers_t       *peers;
    ngx_http_upstream_chash_points_t   *points;
    ngx_http_upstream_hash_srv_conf_t  *hcf;
    union {
        uint32_t                        value;
        u_char                          byte[4];
    } prev_hash;

    if (ngx_http_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_http_upstream_init_chash_peer;

    peers = us->peer.data;
    npoints = peers->total_weight * 160;

    size = sizeof(ngx_http_upstream_chash_points_t)
           + sizeof(ngx_http_up...",285.0,408.0,1.0,1.0,124.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5421,237708,ngx_http_upstream_chash_cmp_points,1,ngx_http_upstream_chash_cmp_points,"ANY ngx_http_upstream_chash_cmp_points (void*,void*)",http\modules\ngx_http_upstream_hash_module.c,"ngx_http_upstream_chash_cmp_points(const void *one, const void *two)
{
    ngx_http_upstream_chash_point_t *first =
                                       (ngx_http_upstream_chash_point_t *) one;
    ngx_http_upstream_chash_point_t *second =
                                       (ngx_http_upstream_chash_point_t *) two;

    if (first->hash < second->hash) {
        return -1;

    } else if (first->hash > second->hash) {
        return 1;

    } else {
        return 0;
    }
}",412.0,428.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
5422,237714,ngx_http_upstream_find_chash_point,1,ngx_http_upstream_find_chash_point,"ngx_uint_t ngx_http_upstream_find_chash_point (ngx_http_upstream_chash_points_t*,uint32_t)",http\modules\ngx_http_upstream_hash_module.c,"static ngx_uint_t
ngx_http_upstream_find_chash_point(ngx_http_upstream_chash_points_t *points,
    uint32_t hash)
{
    ngx_uint_t                        i, j, k;
    ngx_http_upstream_chash_point_t  *point;

    /* find first point >= hash */

    point = &points->point[0];

    i = 0;
    j = points->number;

    while (i < j) {
        k = (i + j) / 2;

        if (hash > point[k].hash) {
            i = k + 1;

        } else if (hash < point[k].hash) {
            j = k;

        } else {
            return k;
        }
    }

    return i;
}",431.0,460.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
5423,237720,ngx_http_upstream_init_chash_peer,1,ngx_http_upstream_init_chash_peer,"ngx_int_t ngx_http_upstream_init_chash_peer (ngx_http_request_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_hash_module.c,"static ngx_int_t
ngx_http_upstream_init_chash_peer(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us)
{
    uint32_t                             hash;
    ngx_http_upstream_hash_srv_conf_t   *hcf;
    ngx_http_upstream_hash_peer_data_t  *hp;

    if (ngx_http_upstream_init_hash_peer(r, us) != NGX_OK) {
        return NGX_ERROR;
    }

    r->upstream->peer.get = ngx_http_upstream_get_chash_peer;

    hp = r->upstream->peer.data;
    hcf = ngx_http_conf_upstream_srv_conf(us, ngx_http_upstream_hash_module);

    hash = ngx_crc32_long(hp->key.data, hp->key.len);

    ngx_http_upstream_rr_peers_rlock(hp->rrp.peers);

    hp->hash = ngx_http_upstream_find_chash_point(hcf->points, hash);

    ngx_http_upstream_rr_peers_unlock(hp->rrp.peers);

    return NGX_OK;
}",463.0,489.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5424,237726,ngx_http_upstream_get_chash_peer,1,ngx_http_upstream_get_chash_peer,"ngx_int_t ngx_http_upstream_get_chash_peer (ngx_peer_connection_t*,void*)",http\modules\ngx_http_upstream_hash_module.c,"static ngx_int_t
ngx_http_upstream_get_chash_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_http_upstream_hash_peer_data_t  *hp = data;

    time_t                              now;
    intptr_t                            m;
    ngx_str_t                          *server;
    ngx_int_t                           total;
    ngx_uint_t                          i, n, best_i;
    ngx_http_upstream_rr_peer_t        *peer, *best;
    ngx_http_upstream_chash_point_t    *point;
    ngx_http_upstream_chash_points_t   *points;
    ngx_http_upstream_hash_srv_conf_t  *hcf;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""get consistent hash peer, try: %ui"", pc->tries);

    ngx_http_upstream_rr_peers_wlock(hp->rrp.peers);

    if (hp->tries > 20 || hp->rrp.peers->single || hp->key.len == 0) {
        ngx_http_upstream_rr_peers_unlock(hp->rrp.peers);
        return hp->get_rr_peer(pc, &hp->rrp);
    }

    pc->cached = 0;
    pc->connection = NULL;

    now = ngx_tim...",492.0,619.0,1.0,1.0,128.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5425,237732,ngx_http_upstream_hash_create_conf,1,ngx_http_upstream_hash_create_conf,void* ngx_http_upstream_hash_create_conf (ngx_conf_t*),http\modules\ngx_http_upstream_hash_module.c,"static void *
ngx_http_upstream_hash_create_conf(ngx_conf_t *cf)
{
    ngx_http_upstream_hash_srv_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_upstream_hash_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->points = NULL;

    return conf;
}",622.0,635.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5426,237737,ngx_http_upstream_hash,1,ngx_http_upstream_hash,"char* ngx_http_upstream_hash (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_upstream_hash_module.c,"static char *
ngx_http_upstream_hash(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_upstream_hash_srv_conf_t  *hcf = conf;

    ngx_str_t                         *value;
    ngx_http_upstream_srv_conf_t      *uscf;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &hcf->key;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    uscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_upstream_module);

    if (uscf->peer.init_upstream) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""load balancing method redefined"");
    }

    uscf->flags = NGX_HTTP_UPSTREAM_CREATE
                  |NGX_HTTP_UPSTREAM_WEIGHT
                  |NGX_HTTP_UPSTREAM_MAX_CONNS
                  |NGX_HTTP_UPSTREAM_MAX_FAILS
                  |NGX_HTTP_UPSTREAM_F...",638.0,686.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5427,239586,ngx_http_upstream_init_ip_hash_peer,1,ngx_http_upstream_init_ip_hash_peer,"ngx_int_t ngx_http_upstream_init_ip_hash_peer (ngx_http_request_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_ip_hash_module.c,"static ngx_int_t
ngx_http_upstream_init_ip_hash_peer(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us)
{
    struct sockaddr_in                     *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6                    *sin6;
#endif
    ngx_http_upstream_ip_hash_peer_data_t  *iphp;

    iphp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_ip_hash_peer_data_t));
    if (iphp == NULL) {
        return NGX_ERROR;
    }

    r->upstream->peer.data = &iphp->rrp;

    if (ngx_http_upstream_init_round_robin_peer(r, us) != NGX_OK) {
        return NGX_ERROR;
    }

    r->upstream->peer.get = ngx_http_upstream_get_ip_hash_peer;

    switch (r->connection->sockaddr->sa_family) {

    case AF_INET:
        sin = (struct sockaddr_in *) r->connection->sockaddr;
        iphp->addr = (u_char *) &sin->sin_addr.s_addr;
        iphp->addrlen = 3;
        break;

#if (NGX_HAVE_INET6)
    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) r->connection->sockaddr;
        iphp->addr = (u_ch...",96.0,145.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5428,239592,ngx_http_upstream_get_ip_hash_peer,1,ngx_http_upstream_get_ip_hash_peer,"ngx_int_t ngx_http_upstream_get_ip_hash_peer (ngx_peer_connection_t*,void*)",http\modules\ngx_http_upstream_ip_hash_module.c,"static ngx_int_t
ngx_http_upstream_get_ip_hash_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_http_upstream_ip_hash_peer_data_t  *iphp = data;

    time_t                        now;
    ngx_int_t                     w;
    uintptr_t                     m;
    ngx_uint_t                    i, n, p, hash;
    ngx_http_upstream_rr_peer_t  *peer;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""get ip hash peer, try: %ui"", pc->tries);

    /* TODO: cached */

    ngx_http_upstream_rr_peers_rlock(iphp->rrp.peers);

    if (iphp->tries > 20 || iphp->rrp.peers->single) {
        ngx_http_upstream_rr_peers_unlock(iphp->rrp.peers);
        return iphp->get_rr_peer(pc, &iphp->rrp);
    }

    now = ngx_time();

    pc->cached = 0;
    pc->connection = NULL;

    hash = iphp->hash;

    for ( ;; ) {

        for (i = 0; i < (ngx_uint_t) iphp->addrlen; i++) {
            hash = (hash * 113 + iphp->addr[i]) % 6271;
        }

        w = hash % iphp->rrp.peers->tot...",148.0,253.0,1.0,1.0,106.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5429,239598,ngx_http_upstream_ip_hash,1,ngx_http_upstream_ip_hash,"char* ngx_http_upstream_ip_hash (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_upstream_ip_hash_module.c,"static char *
ngx_http_upstream_ip_hash(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_upstream_srv_conf_t  *uscf;

    uscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_upstream_module);

    if (uscf->peer.init_upstream) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""load balancing method redefined"");
    }

    uscf->peer.init_upstream = ngx_http_upstream_init_ip_hash;

    uscf->flags = NGX_HTTP_UPSTREAM_CREATE
                  |NGX_HTTP_UPSTREAM_WEIGHT
                  |NGX_HTTP_UPSTREAM_MAX_CONNS
                  |NGX_HTTP_UPSTREAM_MAX_FAILS
                  |NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
                  |NGX_HTTP_UPSTREAM_DOWN;

    return NGX_CONF_OK;
}",256.0,278.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5430,239652,ngx_http_upstream_init_ip_hash,1,ngx_http_upstream_init_ip_hash,"ngx_int_t ngx_http_upstream_init_ip_hash (ngx_conf_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_ip_hash_module.c,"static ngx_int_t
ngx_http_upstream_init_ip_hash(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
{
    if (ngx_http_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_http_upstream_init_ip_hash_peer;

    return NGX_OK;
}",83.0,93.0,1.0,1.0,11.0,4,4,7,5,0,1,2,2,1,1,,0,1,4,2,2,ngx_int_t
5431,240256,ngx_http_upstream_init_keepalive_peer,1,ngx_http_upstream_init_keepalive_peer,"ngx_int_t ngx_http_upstream_init_keepalive_peer (ngx_http_request_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_keepalive_module.c,"static ngx_int_t
ngx_http_upstream_init_keepalive_peer(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us)
{
    ngx_http_upstream_keepalive_peer_data_t  *kp;
    ngx_http_upstream_keepalive_srv_conf_t   *kcf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""init keepalive peer"");

    kcf = ngx_http_conf_upstream_srv_conf(us,
                                          ngx_http_upstream_keepalive_module);

    kp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_keepalive_peer_data_t));
    if (kp == NULL) {
        return NGX_ERROR;
    }

    if (kcf->original_init_peer(r, us) != NGX_OK) {
        return NGX_ERROR;
    }

    kp->conf = kcf;
    kp->upstream = r->upstream;
    kp->data = r->upstream->peer.data;
    kp->original_get_peer = r->upstream->peer.get;
    kp->original_free_peer = r->upstream->peer.free;

    r->upstream->peer.data = kp;
    r->upstream->peer.get = ngx_http_upstream_get_keepalive_peer;
    r->upstream->peer.free = ng...",192.0,232.0,1.0,1.0,41.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5432,240262,ngx_http_upstream_get_keepalive_peer,1,ngx_http_upstream_get_keepalive_peer,"ngx_int_t ngx_http_upstream_get_keepalive_peer (ngx_peer_connection_t*,void*)",http\modules\ngx_http_upstream_keepalive_module.c,"static ngx_int_t
ngx_http_upstream_get_keepalive_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_http_upstream_keepalive_peer_data_t  *kp = data;
    ngx_http_upstream_keepalive_cache_t      *item;

    ngx_int_t          rc;
    ngx_queue_t       *q, *cache;
    ngx_connection_t  *c;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""get keepalive peer"");

    /* ask balancer */

    rc = kp->original_get_peer(pc, kp->data);

    if (rc != NGX_OK) {
        return rc;
    }

    /* search cache for suitable connection */

    cache = &kp->conf->cache;

    for (q = ngx_queue_head(cache);
         q != ngx_queue_sentinel(cache);
         q = ngx_queue_next(q))
    {
        item = ngx_queue_data(q, ngx_http_upstream_keepalive_cache_t, queue);
        c = item->connection;

        if (ngx_memn2cmp((u_char *) &item->sockaddr, (u_char *) pc->sockaddr,
                         item->socklen, pc->socklen)
            == 0)
        {
            ngx_queue_remov...",235.0,301.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5433,240268,ngx_http_upstream_free_keepalive_peer,1,ngx_http_upstream_free_keepalive_peer,"void ngx_http_upstream_free_keepalive_peer (ngx_peer_connection_t*,void*,ngx_uint_t)",http\modules\ngx_http_upstream_keepalive_module.c,"static void
ngx_http_upstream_free_keepalive_peer(ngx_peer_connection_t *pc, void *data,
    ngx_uint_t state)
{
    ngx_http_upstream_keepalive_peer_data_t  *kp = data;
    ngx_http_upstream_keepalive_cache_t      *item;

    ngx_queue_t          *q;
    ngx_connection_t     *c;
    ngx_http_upstream_t  *u;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""free keepalive peer"");

    /* cache valid connections */

    u = kp->upstream;
    c = pc->connection;

    if (state & NGX_PEER_FAILED
        || c == NULL
        || c->read->eof
        || c->read->error
        || c->read->timedout
        || c->write->error
        || c->write->timedout)
    {
        goto invalid;
    }

    if (c->requests >= kp->conf->requests) {
        goto invalid;
    }

    if (ngx_current_msec - c->start_time > kp->conf->time) {
        goto invalid;
    }

    if (!u->keepalive) {
        goto invalid;
    }

    if (!u->request_body_sent) {
        goto invalid;
    }

    ...",304.0,410.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5434,240275,ngx_http_upstream_keepalive_dummy_handler,1,ngx_http_upstream_keepalive_dummy_handler,void ngx_http_upstream_keepalive_dummy_handler (ngx_event_t*),http\modules\ngx_http_upstream_keepalive_module.c,"static void
ngx_http_upstream_keepalive_dummy_handler(ngx_event_t *ev)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, ev->log, 0,
                   ""keepalive dummy handler"");
}",413.0,418.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5435,240280,ngx_http_upstream_keepalive_close_handler,1,ngx_http_upstream_keepalive_close_handler,void ngx_http_upstream_keepalive_close_handler (ngx_event_t*),http\modules\ngx_http_upstream_keepalive_module.c,"static void
ngx_http_upstream_keepalive_close_handler(ngx_event_t *ev)
{
    ngx_http_upstream_keepalive_srv_conf_t  *conf;
    ngx_http_upstream_keepalive_cache_t     *item;

    int                n;
    char               buf[1];
    ngx_connection_t  *c;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, ev->log, 0,
                   ""keepalive close handler"");

    c = ev->data;

    if (c->close || c->read->timedout) {
        goto close;
    }

    n = recv(c->fd, buf, 1, MSG_PEEK);

    if (n == -1 && ngx_socket_errno == NGX_EAGAIN) {
        ev->ready = 0;

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            goto close;
        }

        return;
    }

close:

    item = c->data;
    conf = item->conf;

    ngx_http_upstream_keepalive_close(c);

    ngx_queue_remove(&item->queue);
    ngx_queue_insert_head(&conf->free, &item->queue);
}",421.0,461.0,1.0,1.0,41.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5436,240285,ngx_http_upstream_keepalive_close,1,ngx_http_upstream_keepalive_close,void ngx_http_upstream_keepalive_close (ngx_connection_t*),http\modules\ngx_http_upstream_keepalive_module.c,"static void
ngx_http_upstream_keepalive_close(ngx_connection_t *c)
{

#if (NGX_HTTP_SSL)

    if (c->ssl) {
        c->ssl->no_wait_shutdown = 1;
        c->ssl->no_send_shutdown = 1;

        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
            c->ssl->handler = ngx_http_upstream_keepalive_close;
            return;
        }
    }

#endif

    ngx_destroy_pool(c->pool);
    ngx_close_connection(c);
}",464.0,484.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5437,240290,ngx_http_upstream_keepalive_create_conf,1,ngx_http_upstream_keepalive_create_conf,void* ngx_http_upstream_keepalive_create_conf (ngx_conf_t*),http\modules\ngx_http_upstream_keepalive_module.c,"static void *
ngx_http_upstream_keepalive_create_conf(ngx_conf_t *cf)
{
    ngx_http_upstream_keepalive_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool,
                       sizeof(ngx_http_upstream_keepalive_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->original_init_upstream = NULL;
     *     conf->original_init_peer = NULL;
     *     conf->max_cached = 0;
     */

    conf->time = NGX_CONF_UNSET_MSEC;
    conf->timeout = NGX_CONF_UNSET_MSEC;
    conf->requests = NGX_CONF_UNSET_UINT;

    return conf;
}",510.0,534.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5438,240295,ngx_http_upstream_keepalive,1,ngx_http_upstream_keepalive,"char* ngx_http_upstream_keepalive (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_upstream_keepalive_module.c,"static char *
ngx_http_upstream_keepalive(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_upstream_srv_conf_t            *uscf;
    ngx_http_upstream_keepalive_srv_conf_t  *kcf = conf;

    ngx_int_t    n;
    ngx_str_t   *value;

    if (kcf->max_cached) {
        return ""is duplicate"";
    }

    /* read options */

    value = cf->args->elts;

    n = ngx_atoi(value[1].data, value[1].len);

    if (n == NGX_ERROR || n == 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid value \""%V\"" in \""%V\"" directive"",
                           &value[1], &cmd->name);
        return NGX_CONF_ERROR;
    }

    kcf->max_cached = n;

    /* init upstream handler */

    uscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_upstream_module);

    kcf->original_init_upstream = uscf->peer.init_upstream
                                  ? uscf->peer.init_upstream
                                  : ngx_http_upstream_init_round_robin;

    uscf->p...",537.0,576.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5439,240382,ngx_http_upstream_init_keepalive,1,ngx_http_upstream_init_keepalive,"ngx_int_t ngx_http_upstream_init_keepalive (ngx_conf_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_keepalive_module.c,"static ngx_int_t
ngx_http_upstream_init_keepalive(ngx_conf_t *cf,
    ngx_http_upstream_srv_conf_t *us)
{
    ngx_uint_t                               i;
    ngx_http_upstream_keepalive_srv_conf_t  *kcf;
    ngx_http_upstream_keepalive_cache_t     *cached;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cf->log, 0,
                   ""init keepalive"");

    kcf = ngx_http_conf_upstream_srv_conf(us,
                                          ngx_http_upstream_keepalive_module);

    ngx_conf_init_msec_value(kcf->time, 3600000);
    ngx_conf_init_msec_value(kcf->timeout, 60000);
    ngx_conf_init_uint_value(kcf->requests, 1000);

    if (kcf->original_init_upstream(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    kcf->original_init_peer = us->peer.init;

    us->peer.init = ngx_http_upstream_init_keepalive_peer;

    /* allocate cache items and add to free queue */

    cached = ngx_pcalloc(cf->pool,
                sizeof(ngx_http_upstream_keepalive_cache_t) * kcf->max_cached);
    i...",146.0,189.0,1.0,1.0,44.0,35,10,36,12,0,13,4,4,2,1,,0,13,4,2,2,ngx_int_t
5440,241415,ngx_http_upstream_init_least_conn_peer,1,ngx_http_upstream_init_least_conn_peer,"ngx_int_t ngx_http_upstream_init_least_conn_peer (ngx_http_request_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_least_conn_module.c,"static ngx_int_t
ngx_http_upstream_init_least_conn_peer(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""init least conn peer"");

    if (ngx_http_upstream_init_round_robin_peer(r, us) != NGX_OK) {
        return NGX_ERROR;
    }

    r->upstream->peer.get = ngx_http_upstream_get_least_conn_peer;

    return NGX_OK;
}",82.0,96.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5441,241421,ngx_http_upstream_get_least_conn_peer,1,ngx_http_upstream_get_least_conn_peer,"ngx_int_t ngx_http_upstream_get_least_conn_peer (ngx_peer_connection_t*,void*)",http\modules\ngx_http_upstream_least_conn_module.c,"static ngx_int_t
ngx_http_upstream_get_least_conn_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_http_upstream_rr_peer_data_t  *rrp = data;

    time_t                         now;
    uintptr_t                      m;
    ngx_int_t                      rc, total;
    ngx_uint_t                     i, n, p, many;
    ngx_http_upstream_rr_peer_t   *peer, *best;
    ngx_http_upstream_rr_peers_t  *peers;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""get least conn peer, try: %ui"", pc->tries);

    if (rrp->peers->single) {
        return ngx_http_upstream_get_round_robin_peer(pc, rrp);
    }

    pc->cached = 0;
    pc->connection = NULL;

    now = ngx_time();

    peers = rrp->peers;

    ngx_http_upstream_rr_peers_wlock(peers);

    best = NULL;
    total = 0;

#if (NGX_SUPPRESS_WARN)
    many = 0;
    p = 0;
#endif

    for (peer = peers->peer, i = 0;
         peer;
         peer = peer->next, i++)
    {
        n = i / (8 * sizeof(uintptr_t));
    ...",99.0,288.0,1.0,1.0,190.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5442,241427,ngx_http_upstream_least_conn,1,ngx_http_upstream_least_conn,"char* ngx_http_upstream_least_conn (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_upstream_least_conn_module.c,"static char *
ngx_http_upstream_least_conn(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_upstream_srv_conf_t  *uscf;

    uscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_upstream_module);

    if (uscf->peer.init_upstream) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""load balancing method redefined"");
    }

    uscf->peer.init_upstream = ngx_http_upstream_init_least_conn;

    uscf->flags = NGX_HTTP_UPSTREAM_CREATE
                  |NGX_HTTP_UPSTREAM_WEIGHT
                  |NGX_HTTP_UPSTREAM_MAX_CONNS
                  |NGX_HTTP_UPSTREAM_MAX_FAILS
                  |NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
                  |NGX_HTTP_UPSTREAM_DOWN
                  |NGX_HTTP_UPSTREAM_BACKUP;

    return NGX_CONF_OK;
}",291.0,314.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5443,241478,ngx_http_upstream_init_least_conn,1,ngx_http_upstream_init_least_conn,"ngx_int_t ngx_http_upstream_init_least_conn (ngx_conf_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_least_conn_module.c,"static ngx_int_t
ngx_http_upstream_init_least_conn(ngx_conf_t *cf,
    ngx_http_upstream_srv_conf_t *us)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cf->log, 0,
                   ""init least conn"");

    if (ngx_http_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_http_upstream_init_least_conn_peer;

    return NGX_OK;
}",65.0,79.0,1.0,1.0,15.0,5,4,9,6,0,1,2,2,1,1,,0,1,4,2,2,ngx_int_t
5444,242175,ngx_http_upstream_init_random,1,ngx_http_upstream_init_random,"ngx_int_t ngx_http_upstream_init_random (ngx_conf_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_random_module.c,"static ngx_int_t
ngx_http_upstream_init_random(ngx_conf_t *cf, ngx_http_upstream_srv_conf_t *us)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cf->log, 0, ""init random"");

    if (ngx_http_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_http_upstream_init_random_peer;

#if (NGX_HTTP_UPSTREAM_ZONE)
    if (us->shm_zone) {
        return NGX_OK;
    }
#endif

    return ngx_http_upstream_update_random(cf->pool, us);
}",96.0,114.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5445,242181,ngx_http_upstream_update_random,1,ngx_http_upstream_update_random,"ngx_int_t ngx_http_upstream_update_random (ngx_pool_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_random_module.c,"static ngx_int_t
ngx_http_upstream_update_random(ngx_pool_t *pool,
    ngx_http_upstream_srv_conf_t *us)
{
    size_t                                size;
    ngx_uint_t                            i, total_weight;
    ngx_http_upstream_rr_peer_t          *peer;
    ngx_http_upstream_rr_peers_t         *peers;
    ngx_http_upstream_random_range_t     *ranges;
    ngx_http_upstream_random_srv_conf_t  *rcf;

    rcf = ngx_http_conf_upstream_srv_conf(us, ngx_http_upstream_random_module);

    peers = us->peer.data;

    size = peers->number * sizeof(ngx_http_upstream_random_range_t);

    ranges = pool ? ngx_palloc(pool, size) : ngx_alloc(size, ngx_cycle->log);
    if (ranges == NULL) {
        return NGX_ERROR;
    }

    total_weight = 0;

    for (peer = peers->peer, i = 0; peer; peer = peer->next, i++) {
        ranges[i].peer = peer;
        ranges[i].range = total_weight;
        total_weight += peer->weight;
    }

    rcf->ranges = ranges;

    return NGX_OK;
}",117.0,150.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5446,242187,ngx_http_upstream_init_random_peer,1,ngx_http_upstream_init_random_peer,"ngx_int_t ngx_http_upstream_init_random_peer (ngx_http_request_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_random_module.c,"static ngx_int_t
ngx_http_upstream_init_random_peer(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us)
{
    ngx_http_upstream_random_srv_conf_t   *rcf;
    ngx_http_upstream_random_peer_data_t  *rp;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""init random peer"");

    rcf = ngx_http_conf_upstream_srv_conf(us, ngx_http_upstream_random_module);

    rp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_random_peer_data_t));
    if (rp == NULL) {
        return NGX_ERROR;
    }

    r->upstream->peer.data = &rp->rrp;

    if (ngx_http_upstream_init_round_robin_peer(r, us) != NGX_OK) {
        return NGX_ERROR;
    }

    if (rcf->two) {
        r->upstream->peer.get = ngx_http_upstream_get_random2_peer;

    } else {
        r->upstream->peer.get = ngx_http_upstream_get_random_peer;
    }

    rp->conf = rcf;
    rp->tries = 0;

    ngx_http_upstream_rr_peers_rlock(rp->rrp.peers);

#if (NGX_HTTP_UPSTREAM_ZONE)
    if (rp->rrp.peers->shpool &...",153.0,200.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5447,242193,ngx_http_upstream_get_random_peer,1,ngx_http_upstream_get_random_peer,"ngx_int_t ngx_http_upstream_get_random_peer (ngx_peer_connection_t*,void*)",http\modules\ngx_http_upstream_random_module.c,"static ngx_int_t
ngx_http_upstream_get_random_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_http_upstream_random_peer_data_t  *rp = data;

    time_t                             now;
    uintptr_t                          m;
    ngx_uint_t                         i, n;
    ngx_http_upstream_rr_peer_t       *peer;
    ngx_http_upstream_rr_peers_t      *peers;
    ngx_http_upstream_rr_peer_data_t  *rrp;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""get random peer, try: %ui"", pc->tries);

    rrp = &rp->rrp;
    peers = rrp->peers;

    ngx_http_upstream_rr_peers_rlock(peers);

    if (rp->tries > 20 || peers->single) {
        ngx_http_upstream_rr_peers_unlock(peers);
        return ngx_http_upstream_get_round_robin_peer(pc, rrp);
    }

    pc->cached = 0;
    pc->connection = NULL;

    now = ngx_time();

    for ( ;; ) {

        i = ngx_http_upstream_peek_random_peer(peers, rp);

        peer = rp->conf->ranges[i].peer;

        n = i / (8 * size...",203.0,294.0,1.0,1.0,92.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5448,242199,ngx_http_upstream_get_random2_peer,1,ngx_http_upstream_get_random2_peer,"ngx_int_t ngx_http_upstream_get_random2_peer (ngx_peer_connection_t*,void*)",http\modules\ngx_http_upstream_random_module.c,"static ngx_int_t
ngx_http_upstream_get_random2_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_http_upstream_random_peer_data_t  *rp = data;

    time_t                             now;
    uintptr_t                          m;
    ngx_uint_t                         i, n, p;
    ngx_http_upstream_rr_peer_t       *peer, *prev;
    ngx_http_upstream_rr_peers_t      *peers;
    ngx_http_upstream_rr_peer_data_t  *rrp;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""get random2 peer, try: %ui"", pc->tries);

    rrp = &rp->rrp;
    peers = rrp->peers;

    ngx_http_upstream_rr_peers_wlock(peers);

    if (rp->tries > 20 || peers->single) {
        ngx_http_upstream_rr_peers_unlock(peers);
        return ngx_http_upstream_get_round_robin_peer(pc, rrp);
    }

    pc->cached = 0;
    pc->connection = NULL;

    now = ngx_time();

    prev = NULL;

#if (NGX_SUPPRESS_WARN)
    p = 0;
#endif

    for ( ;; ) {

        i = ngx_http_upstream_peek_random_peer(peers, ...",297.0,403.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5449,242205,ngx_http_upstream_peek_random_peer,1,ngx_http_upstream_peek_random_peer,"ngx_uint_t ngx_http_upstream_peek_random_peer (ngx_http_upstream_rr_peers_t*,ngx_http_upstream_random_peer_data_t*)",http\modules\ngx_http_upstream_random_module.c,"static ngx_uint_t
ngx_http_upstream_peek_random_peer(ngx_http_upstream_rr_peers_t *peers,
    ngx_http_upstream_random_peer_data_t *rp)
{
    ngx_uint_t  i, j, k, x;

    x = ngx_random() % peers->total_weight;

    i = 0;
    j = peers->number;

    while (j - i > 1) {
        k = (i + j) / 2;

        if (x < rp->conf->ranges[k].range) {
            j = k;

        } else {
            i = k;
        }
    }

    return i;
}",406.0,429.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
5450,242211,ngx_http_upstream_random_create_conf,1,ngx_http_upstream_random_create_conf,void* ngx_http_upstream_random_create_conf (ngx_conf_t*),http\modules\ngx_http_upstream_random_module.c,"static void *
ngx_http_upstream_random_create_conf(ngx_conf_t *cf)
{
    ngx_http_upstream_random_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_random_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->two = 0;
     */

    return conf;
}",432.0,449.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5451,242216,ngx_http_upstream_random,1,ngx_http_upstream_random,"char* ngx_http_upstream_random (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_upstream_random_module.c,"static char *
ngx_http_upstream_random(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_upstream_random_srv_conf_t  *rcf = conf;

    ngx_str_t                     *value;
    ngx_http_upstream_srv_conf_t  *uscf;

    uscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_upstream_module);

    if (uscf->peer.init_upstream) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""load balancing method redefined"");
    }

    uscf->peer.init_upstream = ngx_http_upstream_init_random;

    uscf->flags = NGX_HTTP_UPSTREAM_CREATE
                  |NGX_HTTP_UPSTREAM_WEIGHT
                  |NGX_HTTP_UPSTREAM_MAX_CONNS
                  |NGX_HTTP_UPSTREAM_MAX_FAILS
                  |NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
                  |NGX_HTTP_UPSTREAM_DOWN;

    if (cf->args->nelts == 1) {
        return NGX_CONF_OK;
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""two"") == 0) {
        rcf->two = 1;

    } else {
        ngx_conf_lo...",452.0,502.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5452,243292,ngx_http_upstream_zone,1,ngx_http_upstream_zone,"char* ngx_http_upstream_zone (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_upstream_zone_module.c,"static char *
ngx_http_upstream_zone(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ssize_t                         size;
    ngx_str_t                      *value;
    ngx_http_upstream_srv_conf_t   *uscf;
    ngx_http_upstream_main_conf_t  *umcf;

    uscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_upstream_module);
    umcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_upstream_module);

    value = cf->args->elts;

    if (!value[1].len) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid zone name \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    if (cf->args->nelts == 3) {
        size = ngx_parse_size(&value[2]);

        if (size == NGX_ERROR) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid zone size \""%V\"""", &value[2]);
            return NGX_CONF_ERROR;
        }

        if (size < (ssize_t) (8 * ngx_pagesize)) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf,...",67.0,117.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5453,243299,ngx_http_upstream_init_zone,1,ngx_http_upstream_init_zone,"ngx_int_t ngx_http_upstream_init_zone (ngx_shm_zone_t*,void*)",http\modules\ngx_http_upstream_zone_module.c,"static ngx_int_t
ngx_http_upstream_init_zone(ngx_shm_zone_t *shm_zone, void *data)
{
    size_t                          len;
    ngx_uint_t                      i;
    ngx_slab_pool_t                *shpool;
    ngx_http_upstream_rr_peers_t   *peers, **peersp;
    ngx_http_upstream_srv_conf_t   *uscf, **uscfp;
    ngx_http_upstream_main_conf_t  *umcf;

    shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;
    umcf = shm_zone->data;
    uscfp = umcf->upstreams.elts;

    if (shm_zone->shm.exists) {
        peers = shpool->data;

        for (i = 0; i < umcf->upstreams.nelts; i++) {
            uscf = uscfp[i];

            if (uscf->shm_zone != shm_zone) {
                continue;
            }

            uscf->peer.data = peers;
            peers = peers->zone_next;
        }

        return NGX_OK;
    }

    len = sizeof("" in upstream zone \""\"""") + shm_zone->shm.name.len;

    shpool->log_ctx = ngx_slab_alloc(shpool, len);
    if (shpool->log_ctx == NULL) {
        return NGX_E...",120.0,183.0,1.0,1.0,64.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5454,243305,ngx_http_upstream_zone_copy_peers,1,ngx_http_upstream_zone_copy_peers,"ngx_http_upstream_rr_peers_t* ngx_http_upstream_zone_copy_peers (ngx_slab_pool_t*,ngx_http_upstream_srv_conf_t*)",http\modules\ngx_http_upstream_zone_module.c,"static ngx_http_upstream_rr_peers_t *
ngx_http_upstream_zone_copy_peers(ngx_slab_pool_t *shpool,
    ngx_http_upstream_srv_conf_t *uscf)
{
    ngx_str_t                     *name;
    ngx_http_upstream_rr_peer_t   *peer, **peerp;
    ngx_http_upstream_rr_peers_t  *peers, *backup;

    peers = ngx_slab_alloc(shpool, sizeof(ngx_http_upstream_rr_peers_t));
    if (peers == NULL) {
        return NULL;
    }

    ngx_memcpy(peers, uscf->peer.data, sizeof(ngx_http_upstream_rr_peers_t));

    name = ngx_slab_alloc(shpool, sizeof(ngx_str_t));
    if (name == NULL) {
        return NULL;
    }

    name->data = ngx_slab_alloc(shpool, peers->name->len);
    if (name->data == NULL) {
        return NULL;
    }

    ngx_memcpy(name->data, peers->name->data, peers->name->len);
    name->len = peers->name->len;

    peers->name = name;

    peers->shpool = shpool;

    for (peerp = &peers->peer; *peerp; peerp = &peer->next) {
        /* pool is unlocked */
        peer = ngx_http_upstream_zone_c...",186.0,260.0,1.0,1.0,75.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_http_upstream_rr_peers_t
5455,243311,ngx_http_upstream_zone_copy_peer,1,ngx_http_upstream_zone_copy_peer,"ngx_http_upstream_rr_peer_t* ngx_http_upstream_zone_copy_peer (ngx_http_upstream_rr_peers_t*,ngx_http_upstream_rr_peer_t*)",http\modules\ngx_http_upstream_zone_module.c,"static ngx_http_upstream_rr_peer_t *
ngx_http_upstream_zone_copy_peer(ngx_http_upstream_rr_peers_t *peers,
    ngx_http_upstream_rr_peer_t *src)
{
    ngx_slab_pool_t              *pool;
    ngx_http_upstream_rr_peer_t  *dst;

    pool = peers->shpool;

    dst = ngx_slab_calloc_locked(pool, sizeof(ngx_http_upstream_rr_peer_t));
    if (dst == NULL) {
        return NULL;
    }

    if (src) {
        ngx_memcpy(dst, src, sizeof(ngx_http_upstream_rr_peer_t));
        dst->sockaddr = NULL;
        dst->name.data = NULL;
        dst->server.data = NULL;
    }

    dst->sockaddr = ngx_slab_calloc_locked(pool, sizeof(ngx_sockaddr_t));
    if (dst->sockaddr == NULL) {
        goto failed;
    }

    dst->name.data = ngx_slab_calloc_locked(pool, NGX_SOCKADDR_STRLEN);
    if (dst->name.data == NULL) {
        goto failed;
    }

    if (src) {
        ngx_memcpy(dst->sockaddr, src->sockaddr, src->socklen);
        ngx_memcpy(dst->name.data, src->name.data, src->name.len);

        dst->ser...",263.0,325.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_http_upstream_rr_peer_t
5456,244157,ngx_http_userid_get_uid,1,ngx_http_userid_get_uid,"ngx_http_userid_ctx_t* ngx_http_userid_get_uid (ngx_http_request_t*,ngx_http_userid_conf_t*)",http\modules\ngx_http_userid_filter_module.c,"static ngx_http_userid_ctx_t *
ngx_http_userid_get_uid(ngx_http_request_t *r, ngx_http_userid_conf_t *conf)
{
    ngx_int_t                n;
    ngx_str_t                src, dst;
    ngx_table_elt_t        **cookies;
    ngx_http_userid_ctx_t   *ctx;

    ctx = ngx_http_get_module_ctx(r, ngx_http_userid_filter_module);

    if (ctx) {
        return ctx;
    }

    if (ctx == NULL) {
        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_userid_ctx_t));
        if (ctx == NULL) {
            return NULL;
        }

        ngx_http_set_ctx(r, ctx, ngx_http_userid_filter_module);
    }

    n = ngx_http_parse_multi_header_lines(&r->headers_in.cookies, &conf->name,
                                          &ctx->cookie);
    if (n == NGX_DECLINED) {
        return ctx;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""uid cookie: \""%V\"""", &ctx->cookie);

    if (ctx->cookie.len < 22) {
        cookies = r->headers_in.cookies.elts;
        ngx_log_e...",319.0,386.0,1.0,1.0,68.0,0,0,0,0,3,0,1,1,0,0,,0,0,4,2,2,ngx_http_userid_ctx_t
5457,244163,ngx_http_userid_variable,1,ngx_http_userid_variable,"ngx_int_t ngx_http_userid_variable (ngx_http_request_t*,ngx_http_variable_value_t*,ngx_str_t*,uint32_t*)",http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    ngx_str_t *name, uint32_t *uid)
{
    v->len = name->len + sizeof(""=00001111222233334444555566667777"") - 1;
    v->data = ngx_pnalloc(r->pool, v->len);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    ngx_sprintf(v->data, ""%V=%08XD%08XD%08XD%08XD"",
                name, uid[0], uid[1], uid[2], uid[3]);

    return NGX_OK;
}",648.0,666.0,1.0,1.0,19.0,0,0,0,0,2,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5458,244171,ngx_http_userid_set_uid,1,ngx_http_userid_set_uid,"ngx_int_t ngx_http_userid_set_uid (ngx_http_request_t*,ngx_http_userid_ctx_t*,ngx_http_userid_conf_t*)",http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_set_uid(ngx_http_request_t *r, ngx_http_userid_ctx_t *ctx,
    ngx_http_userid_conf_t *conf)
{
    u_char           *cookie, *p;
    size_t            len;
    ngx_str_t         src, dst;
    ngx_table_elt_t  *set_cookie, *p3p;

    if (ngx_http_userid_create_uid(r, ctx, conf) != NGX_OK) {
        return NGX_ERROR;
    }

    if (ctx->uid_set[3] == 0) {
        return NGX_OK;
    }

    len = conf->name.len + 1 + ngx_base64_encoded_length(16) + conf->path.len;

    if (conf->expires) {
        len += sizeof(expires) - 1 + 2;
    }

    if (conf->domain.len) {
        len += conf->domain.len;
    }

    if (conf->flags & NGX_HTTP_USERID_COOKIE_SECURE) {
        len += sizeof(""; secure"") - 1;
    }

    if (conf->flags & NGX_HTTP_USERID_COOKIE_HTTPONLY) {
        len += sizeof(""; httponly"") - 1;
    }

    if (conf->flags & NGX_HTTP_USERID_COOKIE_SAMESITE_STRICT) {
        len += sizeof(""; samesite=strict"") - 1;
    }

    if (conf->flags & NGX_HTTP_US...",389.0,522.0,1.0,22.0,134.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5459,244178,ngx_http_userid_create_uid,1,ngx_http_userid_create_uid,"ngx_int_t ngx_http_userid_create_uid (ngx_http_request_t*,ngx_http_userid_ctx_t*,ngx_http_userid_conf_t*)",http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_create_uid(ngx_http_request_t *r, ngx_http_userid_ctx_t *ctx,
    ngx_http_userid_conf_t *conf)
{
    ngx_connection_t           *c;
    struct sockaddr_in         *sin;
    ngx_http_variable_value_t  *vv;
#if (NGX_HAVE_INET6)
    u_char                     *p;
    struct sockaddr_in6        *sin6;
#endif

    if (ctx->uid_set[3] != 0) {
        return NGX_OK;
    }

    if (ctx->uid_got[3] != 0) {

        vv = ngx_http_get_indexed_variable(r, ngx_http_userid_reset_index);

        if (vv == NULL || vv->not_found) {
            return NGX_ERROR;
        }

        if (vv->len == 0 || (vv->len == 1 && vv->data[0] == '0')) {

            if (conf->mark == '\0'
                || (ctx->cookie.len > 23
                    && ctx->cookie.data[22] == conf->mark
                    && ctx->cookie.data[23] == '='))
            {
                return NGX_OK;
            }

            ctx->uid_set[0] = ctx->uid_got[0];
            ctx->uid_set[1] = ctx->ui...",525.0,645.0,1.0,24.0,121.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5460,244185,ngx_http_userid_add_variables,1,ngx_http_userid_add_variables,ngx_int_t ngx_http_userid_add_variables (ngx_conf_t*),http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_add_variables(ngx_conf_t *cf)
{
    ngx_int_t             n;
    ngx_http_variable_t  *var;

    var = ngx_http_add_variable(cf, &ngx_http_userid_got, 0);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = ngx_http_userid_got_variable;

    var = ngx_http_add_variable(cf, &ngx_http_userid_set, 0);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = ngx_http_userid_set_variable;

    var = ngx_http_add_variable(cf, &ngx_http_userid_reset,
                                NGX_HTTP_VAR_CHANGEABLE);
    if (var == NULL) {
        return NGX_ERROR;
    }

    var->get_handler = ngx_http_userid_reset_variable;

    n = ngx_http_get_variable_index(cf, &ngx_http_userid_reset);
    if (n == NGX_ERROR) {
        return NGX_ERROR;
    }

    ngx_http_userid_reset_index = n;

    return NGX_OK;
}",679.0,715.0,1.0,1.0,37.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5461,244190,ngx_http_userid_init,1,ngx_http_userid_init,ngx_int_t ngx_http_userid_init (ngx_conf_t*),http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_userid_filter;

    return NGX_OK;
}",779.0,786.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5462,244195,ngx_http_userid_create_conf,1,ngx_http_userid_create_conf,void* ngx_http_userid_create_conf (ngx_conf_t*),http\modules\ngx_http_userid_filter_module.c,"static void *
ngx_http_userid_create_conf(ngx_conf_t *cf)
{
    ngx_http_userid_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_userid_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->flags = 0;
     *     conf->name = { 0, NULL };
     *     conf->domain = { 0, NULL };
     *     conf->path = { 0, NULL };
     *     conf->p3p = { 0, NULL };
     */

    conf->enable = NGX_CONF_UNSET_UINT;
    conf->service = NGX_CONF_UNSET;
    conf->expires = NGX_CONF_UNSET;
    conf->mark = (u_char) '\xFF';

    return conf;
}",718.0,744.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5463,244200,ngx_http_userid_merge_conf,1,ngx_http_userid_merge_conf,"char* ngx_http_userid_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_userid_filter_module.c,"static char *
ngx_http_userid_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_userid_conf_t *prev = parent;
    ngx_http_userid_conf_t *conf = child;

    ngx_conf_merge_uint_value(conf->enable, prev->enable,
                              NGX_HTTP_USERID_OFF);

    ngx_conf_merge_bitmask_value(conf->flags, prev->flags,
                            (NGX_CONF_BITMASK_SET|NGX_HTTP_USERID_COOKIE_OFF));

    ngx_conf_merge_str_value(conf->name, prev->name, ""uid"");
    ngx_conf_merge_str_value(conf->domain, prev->domain, """");
    ngx_conf_merge_str_value(conf->path, prev->path, ""; path=/"");
    ngx_conf_merge_str_value(conf->p3p, prev->p3p, """");

    ngx_conf_merge_value(conf->service, prev->service, NGX_CONF_UNSET);
    ngx_conf_merge_sec_value(conf->expires, prev->expires, 0);

    if (conf->mark == (u_char) '\xFF') {
        if (prev->mark == (u_char) '\xFF') {
            conf->mark = '\0';
        } else {
            conf->mark = prev->mark;
        }
    }

    ...",747.0,776.0,1.0,30.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5464,244207,ngx_http_userid_domain,1,ngx_http_userid_domain,"char* ngx_http_userid_domain (ngx_conf_t*,void*,void*)",http\modules\ngx_http_userid_filter_module.c,"static char *
ngx_http_userid_domain(ngx_conf_t *cf, void *post, void *data)
{
    ngx_str_t  *domain = data;

    u_char  *p, *new;

    if (ngx_strcmp(domain->data, ""none"") == 0) {
        ngx_str_set(domain, """");
        return NGX_CONF_OK;
    }

    new = ngx_pnalloc(cf->pool, sizeof(""; domain="") - 1 + domain->len);
    if (new == NULL) {
        return NGX_CONF_ERROR;
    }

    p = ngx_cpymem(new, ""; domain="", sizeof(""; domain="") - 1);
    ngx_memcpy(p, domain->data, domain->len);

    domain->len += sizeof(""; domain="") - 1;
    domain->data = new;

    return NGX_CONF_OK;
}",789.0,813.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5465,244214,ngx_http_userid_path,1,ngx_http_userid_path,"char* ngx_http_userid_path (ngx_conf_t*,void*,void*)",http\modules\ngx_http_userid_filter_module.c,"static char *
ngx_http_userid_path(ngx_conf_t *cf, void *post, void *data)
{
    ngx_str_t  *path = data;

    u_char  *p, *new;

    new = ngx_pnalloc(cf->pool, sizeof(""; path="") - 1 + path->len);
    if (new == NULL) {
        return NGX_CONF_ERROR;
    }

    p = ngx_cpymem(new, ""; path="", sizeof(""; path="") - 1);
    ngx_memcpy(p, path->data, path->len);

    path->len += sizeof(""; path="") - 1;
    path->data = new;

    return NGX_CONF_OK;
}",816.0,835.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5466,244221,ngx_http_userid_expires,1,ngx_http_userid_expires,"char* ngx_http_userid_expires (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_userid_filter_module.c,"static char *
ngx_http_userid_expires(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_userid_conf_t *ucf = conf;

    ngx_str_t  *value;

    if (ucf->expires != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""max"") == 0) {
        ucf->expires = NGX_HTTP_USERID_MAX_EXPIRES;
        return NGX_CONF_OK;
    }

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        ucf->expires = 0;
        return NGX_CONF_OK;
    }

    ucf->expires = ngx_parse_time(&value[1], 1);
    if (ucf->expires == (time_t) NGX_ERROR) {
        return ""invalid value"";
    }

    return NGX_CONF_OK;
}",838.0,867.0,1.0,23.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5467,244228,ngx_http_userid_p3p,1,ngx_http_userid_p3p,"char* ngx_http_userid_p3p (ngx_conf_t*,void*,void*)",http\modules\ngx_http_userid_filter_module.c,"static char *
ngx_http_userid_p3p(ngx_conf_t *cf, void *post, void *data)
{
    ngx_str_t  *p3p = data;

    if (ngx_strcmp(p3p->data, ""none"") == 0) {
        ngx_str_set(p3p, """");
    }

    return NGX_CONF_OK;
}",870.0,880.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5468,244235,ngx_http_userid_mark,1,ngx_http_userid_mark,"char* ngx_http_userid_mark (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_userid_filter_module.c,"static char *
ngx_http_userid_mark(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_userid_conf_t *ucf = conf;

    ngx_str_t  *value;

    if (ucf->mark != (u_char) '\xFF') {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        ucf->mark = '\0';
        return NGX_CONF_OK;
    }

    if (value[1].len != 1
        || !((value[1].data[0] >= '0' && value[1].data[0] <= '9')
              || (value[1].data[0] >= 'A' && value[1].data[0] <= 'Z')
              || (value[1].data[0] >= 'a' && value[1].data[0] <= 'z')
              || value[1].data[0] == '='))
    {
        return ""value must be \""off\"" or a single letter, digit or \""=\"""";
    }

    ucf->mark = value[1].data[0];

    return NGX_CONF_OK;
}",883.0,913.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5469,244242,ngx_http_userid_init_worker,1,ngx_http_userid_init_worker,ngx_int_t ngx_http_userid_init_worker (ngx_cycle_t*),http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_init_worker(ngx_cycle_t *cycle)
{
    struct timeval  tp;

    ngx_gettimeofday(&tp);

    /* use the most significant usec part that fits to 16 bits */
    start_value = (((uint32_t) tp.tv_usec / 20) << 16) | ngx_pid;

    return NGX_OK;
}",916.0,927.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5470,244553,ngx_http_userid_filter,1,ngx_http_userid_filter,ngx_int_t ngx_http_userid_filter (ngx_http_request_t*),http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_filter(ngx_http_request_t *r)
{
    ngx_http_userid_ctx_t   *ctx;
    ngx_http_userid_conf_t  *conf;

    if (r != r->main) {
        return ngx_http_next_header_filter(r);
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_userid_filter_module);

    if (conf->enable < NGX_HTTP_USERID_V1) {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_http_userid_get_uid(r, conf);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    if (ngx_http_userid_set_uid(r, ctx, conf) == NGX_OK) {
        return ngx_http_next_header_filter(r);
    }

    return NGX_ERROR;
}",226.0,253.0,1.0,23.0,28.0,8,5,20,7,0,4,5,5,2,2,,0,4,2,1,1,ngx_int_t
5471,244612,ngx_http_userid_got_variable,1,ngx_http_userid_got_variable,"ngx_int_t ngx_http_userid_got_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_got_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_userid_ctx_t   *ctx;
    ngx_http_userid_conf_t  *conf;

    conf = ngx_http_get_module_loc_conf(r->main, ngx_http_userid_filter_module);

    if (conf->enable == NGX_HTTP_USERID_OFF) {
        v->not_found = 1;
        return NGX_OK;
    }

    ctx = ngx_http_userid_get_uid(r->main, conf);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    if (ctx->uid_got[3] != 0) {
        return ngx_http_userid_variable(r->main, v, &conf->name, ctx->uid_got);
    }

    v->not_found = 1;

    return NGX_OK;
}",256.0,283.0,1.0,24.0,28.0,18,6,19,8,0,7,4,4,2,2,,0,6,6,3,3,ngx_int_t
5472,244687,ngx_http_userid_set_variable,1,ngx_http_userid_set_variable,"ngx_int_t ngx_http_userid_set_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_set_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_userid_ctx_t   *ctx;
    ngx_http_userid_conf_t  *conf;

    conf = ngx_http_get_module_loc_conf(r->main, ngx_http_userid_filter_module);

    if (conf->enable < NGX_HTTP_USERID_V1) {
        v->not_found = 1;
        return NGX_OK;
    }

    ctx = ngx_http_userid_get_uid(r->main, conf);

    if (ctx == NULL) {
        return NGX_ERROR;
    }

    if (ngx_http_userid_create_uid(r->main, ctx, conf) != NGX_OK) {
        return NGX_ERROR;
    }

    if (ctx->uid_set[3] == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    return ngx_http_userid_variable(r->main, v, &conf->name, ctx->uid_set);
}",286.0,316.0,1.0,23.0,31.0,20,7,24,8,0,8,5,5,3,3,,0,7,6,3,3,ngx_int_t
5473,245952,ngx_http_userid_reset_variable,1,ngx_http_userid_reset_variable,"ngx_int_t ngx_http_userid_reset_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\ngx_http_userid_filter_module.c,"static ngx_int_t
ngx_http_userid_reset_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    *v = ngx_http_variable_null_value;

    return NGX_OK;
}",669.0,676.0,1.0,1.0,8.0,2,2,3,3,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5474,246691,ngx_http_uwsgi_eval,1,ngx_http_uwsgi_eval,"ngx_int_t ngx_http_uwsgi_eval (ngx_http_request_t*,ngx_http_uwsgi_loc_conf_t*)",http\modules\ngx_http_uwsgi_module.c,"static ngx_int_t
ngx_http_uwsgi_eval(ngx_http_request_t *r, ngx_http_uwsgi_loc_conf_t * uwcf)
{
    size_t                add;
    ngx_url_t             url;
    ngx_http_upstream_t  *u;

    ngx_memzero(&url, sizeof(ngx_url_t));

    if (ngx_http_script_run(r, &url.url, uwcf->uwsgi_lengths->elts, 0,
                            uwcf->uwsgi_values->elts)
        == NULL)
    {
        return NGX_ERROR;
    }

    if (url.url.len > 8
        && ngx_strncasecmp(url.url.data, (u_char *) ""uwsgi://"", 8) == 0)
    {
        add = 8;

    } else if (url.url.len > 9
               && ngx_strncasecmp(url.url.data, (u_char *) ""suwsgi://"", 9) == 0)
    {

#if (NGX_HTTP_SSL)
        add = 9;
        r->upstream->ssl = 1;
#else
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""suwsgi protocol requires SSL support"");
        return NGX_ERROR;
#endif

    } else {
        add = 0;
    }

    u = r->upstream;

    if (add) {
        u->schema.len = add;
        u->sche...",738.0,817.0,1.0,1.0,80.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5475,246697,ngx_http_uwsgi_create_request,1,ngx_http_uwsgi_create_request,ngx_int_t ngx_http_uwsgi_create_request (ngx_http_request_t*),http\modules\ngx_http_uwsgi_module.c,"static ngx_int_t
ngx_http_uwsgi_create_request(ngx_http_request_t *r)
{
    u_char                        ch, *lowcase_key;
    size_t                        key_len, val_len, len, allocated;
    ngx_uint_t                    i, n, hash, skip_empty, header_params;
    ngx_buf_t                    *b;
    ngx_chain_t                  *cl, *body;
    ngx_list_part_t              *part;
    ngx_table_elt_t              *header, **ignored;
    ngx_http_uwsgi_params_t      *params;
    ngx_http_script_code_pt       code;
    ngx_http_script_engine_t      e, le;
    ngx_http_uwsgi_loc_conf_t    *uwcf;
    ngx_http_script_len_code_pt   lcode;

    len = 0;
    header_params = 0;
    ignored = NULL;

    uwcf = ngx_http_get_module_loc_conf(r, ngx_http_uwsgi_module);

#if (NGX_HTTP_CACHE)
    params = r->upstream->cacheable ? &uwcf->params_cache : &uwcf->params;
#else
    params = &uwcf->params;
#endif

    if (params->lengths) {
        ngx_memzero(&le, sizeof(ngx_http_script_engine_t));

 ...",845.0,1163.0,1.0,1.0,319.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5476,246702,ngx_http_uwsgi_reinit_request,1,ngx_http_uwsgi_reinit_request,ngx_int_t ngx_http_uwsgi_reinit_request (ngx_http_request_t*),http\modules\ngx_http_uwsgi_module.c,"static ngx_int_t
ngx_http_uwsgi_reinit_request(ngx_http_request_t *r)
{
    ngx_http_status_t  *status;

    status = ngx_http_get_module_ctx(r, ngx_http_uwsgi_module);

    if (status == NULL) {
        return NGX_OK;
    }

    status->code = 0;
    status->count = 0;
    status->start = NULL;
    status->end = NULL;

    r->upstream->process_header = ngx_http_uwsgi_process_status_line;
    r->state = 0;

    return NGX_OK;
}",1166.0,1186.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5477,246707,ngx_http_uwsgi_process_status_line,1,ngx_http_uwsgi_process_status_line,ngx_int_t ngx_http_uwsgi_process_status_line (ngx_http_request_t*),http\modules\ngx_http_uwsgi_module.c,"static ngx_int_t
ngx_http_uwsgi_process_status_line(ngx_http_request_t *r)
{
    size_t                 len;
    ngx_int_t              rc;
    ngx_http_status_t     *status;
    ngx_http_upstream_t   *u;

    status = ngx_http_get_module_ctx(r, ngx_http_uwsgi_module);

    if (status == NULL) {
        return NGX_ERROR;
    }

    u = r->upstream;

    rc = ngx_http_parse_status_line(r, &u->buffer, status);

    if (rc == NGX_AGAIN) {
        return rc;
    }

    if (rc == NGX_ERROR) {
        u->process_header = ngx_http_uwsgi_process_header;
        return ngx_http_uwsgi_process_header(r);
    }

    if (u->state && u->state->status == 0) {
        u->state->status = status->code;
    }

    u->headers_in.status_n = status->code;

    len = status->end - status->start;
    u->headers_in.status_line.len = len;

    u->headers_in.status_line.data = ngx_pnalloc(r->pool, len);
    if (u->headers_in.status_line.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(u->header...",1189.0,1239.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5478,246712,ngx_http_uwsgi_process_header,1,ngx_http_uwsgi_process_header,ngx_int_t ngx_http_uwsgi_process_header (ngx_http_request_t*),http\modules\ngx_http_uwsgi_module.c,"static ngx_int_t
ngx_http_uwsgi_process_header(ngx_http_request_t *r)
{
    ngx_str_t                      *status_line;
    ngx_int_t                       rc, status;
    ngx_table_elt_t                *h;
    ngx_http_upstream_t            *u;
    ngx_http_upstream_header_t     *hh;
    ngx_http_upstream_main_conf_t  *umcf;

    umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);

    for ( ;; ) {

        rc = ngx_http_parse_header_line(r, &r->upstream->buffer, 1);

        if (rc == NGX_OK) {

            /* a header line has been parsed successfully */

            h = ngx_list_push(&r->upstream->headers_in.headers);
            if (h == NULL) {
                return NGX_ERROR;
            }

            h->hash = r->header_hash;

            h->key.len = r->header_name_end - r->header_name_start;
            h->value.len = r->header_end - r->header_start;

            h->key.data = ngx_pnalloc(r->pool,
                                      h->key.len + 1 + h->...",1242.0,1373.0,1.0,1.0,132.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5479,246717,ngx_http_uwsgi_input_filter_init,1,ngx_http_uwsgi_input_filter_init,ngx_int_t ngx_http_uwsgi_input_filter_init (void*),http\modules\ngx_http_uwsgi_module.c,"static ngx_int_t
ngx_http_uwsgi_input_filter_init(void *data)
{
    ngx_http_request_t   *r = data;
    ngx_http_upstream_t  *u;

    u = r->upstream;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http uwsgi filter init s:%ui l:%O"",
                   u->headers_in.status_n, u->headers_in.content_length_n);

    if (u->headers_in.status_n == NGX_HTTP_NO_CONTENT
        || u->headers_in.status_n == NGX_HTTP_NOT_MODIFIED)
    {
        u->pipe->length = 0;
        u->length = 0;

    } else if (r->method == NGX_HTTP_HEAD) {
        u->pipe->length = -1;
        u->length = -1;

    } else {
        u->pipe->length = u->headers_in.content_length_n;
        u->length = u->headers_in.content_length_n;
    }

    return NGX_OK;
}",1376.0,1404.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5480,246722,ngx_http_uwsgi_abort_request,1,ngx_http_uwsgi_abort_request,void ngx_http_uwsgi_abort_request (ngx_http_request_t*),http\modules\ngx_http_uwsgi_module.c,"static void
ngx_http_uwsgi_abort_request(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""abort http uwsgi request"");

    return;
}",1407.0,1414.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5481,246727,ngx_http_uwsgi_finalize_request,1,ngx_http_uwsgi_finalize_request,"void ngx_http_uwsgi_finalize_request (ngx_http_request_t*,ngx_int_t)",http\modules\ngx_http_uwsgi_module.c,"static void
ngx_http_uwsgi_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""finalize http uwsgi request"");

    return;
}",1417.0,1424.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5482,246733,ngx_http_uwsgi_create_main_conf,1,ngx_http_uwsgi_create_main_conf,void* ngx_http_uwsgi_create_main_conf (ngx_conf_t*),http\modules\ngx_http_uwsgi_module.c,"static void *
ngx_http_uwsgi_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_uwsgi_main_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_uwsgi_main_conf_t));
    if (conf == NULL) {
        return NULL;
    }

#if (NGX_HTTP_CACHE)
    if (ngx_array_init(&conf->caches, cf->pool, 4,
                       sizeof(ngx_http_file_cache_t *))
        != NGX_OK)
    {
        return NULL;
    }
#endif

    return conf;
}",1427.0,1447.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5483,246738,ngx_http_uwsgi_create_loc_conf,1,ngx_http_uwsgi_create_loc_conf,void* ngx_http_uwsgi_create_loc_conf (ngx_conf_t*),http\modules\ngx_http_uwsgi_module.c,"static void *
ngx_http_uwsgi_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_uwsgi_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_uwsgi_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->modifier1 = NGX_CONF_UNSET_UINT;
    conf->modifier2 = NGX_CONF_UNSET_UINT;

    conf->upstream.store = NGX_CONF_UNSET;
    conf->upstream.store_access = NGX_CONF_UNSET_UINT;
    conf->upstream.next_upstream_tries = NGX_CONF_UNSET_UINT;
    conf->upstream.buffering = NGX_CONF_UNSET;
    conf->upstream.request_buffering = NGX_CONF_UNSET;
    conf->upstream.ignore_client_abort = NGX_CONF_UNSET;
    conf->upstream.force_ranges = NGX_CONF_UNSET;

    conf->upstream.local = NGX_CONF_UNSET_PTR;
    conf->upstream.socket_keepalive = NGX_CONF_UNSET;

    conf->upstream.connect_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.send_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.read_timeout = NGX_CONF_UNSET_MSEC;
    conf->upstream.next_upstream_timeout = NGX_...",1450.0,1529.0,1.0,1.0,80.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5484,246743,ngx_http_uwsgi_merge_loc_conf,1,ngx_http_uwsgi_merge_loc_conf,"char* ngx_http_uwsgi_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_uwsgi_module.c,"static char *
ngx_http_uwsgi_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_uwsgi_loc_conf_t *prev = parent;
    ngx_http_uwsgi_loc_conf_t *conf = child;

    size_t                        size;
    ngx_int_t                     rc;
    ngx_hash_init_t               hash;
    ngx_http_core_loc_conf_t     *clcf;

#if (NGX_HTTP_CACHE)

    if (conf->upstream.store > 0) {
        conf->upstream.cache = 0;
    }

    if (conf->upstream.cache > 0) {
        conf->upstream.store = 0;
    }

#endif

    if (conf->upstream.store == NGX_CONF_UNSET) {
        ngx_conf_merge_value(conf->upstream.store, prev->upstream.store, 0);

        conf->upstream.store_lengths = prev->upstream.store_lengths;
        conf->upstream.store_values = prev->upstream.store_values;
    }

    ngx_conf_merge_uint_value(conf->upstream.store_access,
                              prev->upstream.store_access, 0600);

    ngx_conf_merge_uint_value(conf->upstream.next_upstream_tries,
          ...",1532.0,1934.0,1.0,1.0,403.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5485,246750,ngx_http_uwsgi_init_params,1,ngx_http_uwsgi_init_params,"ngx_int_t ngx_http_uwsgi_init_params (ngx_conf_t*,ngx_http_uwsgi_loc_conf_t*,ngx_http_uwsgi_params_t*,ngx_keyval_t*)",http\modules\ngx_http_uwsgi_module.c,"static ngx_int_t
ngx_http_uwsgi_init_params(ngx_conf_t *cf, ngx_http_uwsgi_loc_conf_t *conf,
    ngx_http_uwsgi_params_t *params, ngx_keyval_t *default_params)
{
    u_char                       *p;
    size_t                        size;
    uintptr_t                    *code;
    ngx_uint_t                    i, nsrc;
    ngx_array_t                   headers_names, params_merged;
    ngx_keyval_t                 *h;
    ngx_hash_key_t               *hk;
    ngx_hash_init_t               hash;
    ngx_http_upstream_param_t    *src, *s;
    ngx_http_script_compile_t     sc;
    ngx_http_script_copy_code_t  *copy;

    if (params->hash.buckets) {
        return NGX_OK;
    }

    if (conf->params_source == NULL && default_params == NULL) {
        params->hash.buckets = (void *) 1;
        return NGX_OK;
    }

    params->lengths = ngx_array_create(cf->pool, 64, 1);
    if (params->lengths == NULL) {
        return NGX_ERROR;
    }

    params->values = ngx_array_create(cf->pool, 5...",1937.0,2139.0,1.0,1.0,203.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5486,246758,ngx_http_uwsgi_pass,1,ngx_http_uwsgi_pass,"char* ngx_http_uwsgi_pass (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_uwsgi_module.c,"static char *
ngx_http_uwsgi_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_uwsgi_loc_conf_t *uwcf = conf;

    size_t                      add;
    ngx_url_t                   u;
    ngx_str_t                  *value, *url;
    ngx_uint_t                  n;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_script_compile_t   sc;

    if (uwcf->upstream.upstream || uwcf->uwsgi_lengths) {
        return ""is duplicate"";
    }

    clcf = ngx_http_conf_get_module_loc_conf(cf, ngx_http_core_module);
    clcf->handler = ngx_http_uwsgi_handler;

    value = cf->args->elts;

    url = &value[1];

    n = ngx_http_script_variables_count(url);

    if (n) {

        ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

        sc.cf = cf;
        sc.source = url;
        sc.lengths = &uwcf->uwsgi_lengths;
        sc.values = &uwcf->uwsgi_values;
        sc.variables = n;
        sc.complete_lengths = 1;
        sc.complete_values = 1;

        if (ngx_http_script_compi...",2142.0,2224.0,1.0,1.0,83.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5487,246765,ngx_http_uwsgi_store,1,ngx_http_uwsgi_store,"char* ngx_http_uwsgi_store (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_uwsgi_module.c,"static char *
ngx_http_uwsgi_store(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_uwsgi_loc_conf_t *uwcf = conf;

    ngx_str_t                  *value;
    ngx_http_script_compile_t   sc;

    if (uwcf->upstream.store != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        uwcf->upstream.store = 0;
        return NGX_CONF_OK;
    }

#if (NGX_HTTP_CACHE)

    if (uwcf->upstream.cache > 0) {
        return ""is incompatible with \""uwsgi_cache\"""";
    }

#endif

    uwcf->upstream.store = 1;

    if (ngx_strcmp(value[1].data, ""on"") == 0) {
        return NGX_CONF_OK;
    }

    /* include the terminating '\0' into script */
    value[1].len++;

    ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));

    sc.cf = cf;
    sc.source = &value[1];
    sc.lengths = &uwcf->upstream.store_lengths;
    sc.values = &uwcf->upstream.store_values;
    sc.variables = ngx_http_script_variables_co...",2227.0,2278.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5488,247452,ngx_http_uwsgi_handler,1,ngx_http_uwsgi_handler,ngx_int_t ngx_http_uwsgi_handler (ngx_http_request_t*),http\modules\ngx_http_uwsgi_module.c,"static ngx_int_t
ngx_http_uwsgi_handler(ngx_http_request_t *r)
{
    ngx_int_t                    rc;
    ngx_http_status_t           *status;
    ngx_http_upstream_t         *u;
    ngx_http_uwsgi_loc_conf_t   *uwcf;
#if (NGX_HTTP_CACHE)
    ngx_http_uwsgi_main_conf_t  *uwmcf;
#endif

    if (ngx_http_upstream_create(r) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    status = ngx_pcalloc(r->pool, sizeof(ngx_http_status_t));
    if (status == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    ngx_http_set_ctx(r, status, ngx_http_uwsgi_module);

    uwcf = ngx_http_get_module_loc_conf(r, ngx_http_uwsgi_module);

    u = r->upstream;

    if (uwcf->uwsgi_lengths == NULL) {

#if (NGX_HTTP_SSL)
        u->ssl = (uwcf->upstream.ssl != NULL);

        if (u->ssl) {
            ngx_str_set(&u->schema, ""suwsgi://"");

        } else {
            ngx_str_set(&u->schema, ""uwsgi://"");
        }
#else
        ngx_str_set(&u->schema, ""uwsgi://"");
#endif

   ...",642.0,735.0,1.0,1.0,94.0,68,11,65,23,0,12,7,7,4,4,,0,12,2,1,1,ngx_int_t
5489,252261,ngx_http_xslt_send,1,ngx_http_xslt_send,"ngx_int_t ngx_http_xslt_send (ngx_http_request_t*,ngx_http_xslt_filter_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_xslt_filter_module.c,"static ngx_int_t
ngx_http_xslt_send(ngx_http_request_t *r, ngx_http_xslt_filter_ctx_t *ctx,
    ngx_buf_t *b)
{
    ngx_int_t                         rc;
    ngx_chain_t                       out;
    ngx_pool_cleanup_t               *cln;
    ngx_http_xslt_filter_loc_conf_t  *conf;

    ctx->done = 1;

    if (b == NULL) {
        return ngx_http_filter_finalize_request(r, &ngx_http_xslt_filter_module,
                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
    }

    cln = ngx_pool_cleanup_add(r->pool, 0);

    if (cln == NULL) {
        ngx_free(b->pos);
        return ngx_http_filter_finalize_request(r, &ngx_http_xslt_filter_module,
                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
    }

    if (r == r->main) {
        r->headers_out.content_length_n = b->last - b->pos;

        if (r->headers_out.content_length) {
            r->headers_out.content_length->hash = 0;
            r->headers_out.content_length = NULL;
        ...",309.0,366.0,1.0,1.0,58.0,0,0,0,0,3,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5490,252268,ngx_http_xslt_add_chunk,1,ngx_http_xslt_add_chunk,"ngx_int_t ngx_http_xslt_add_chunk (ngx_http_request_t*,ngx_http_xslt_filter_ctx_t*,ngx_buf_t*)",http\modules\ngx_http_xslt_filter_module.c,"static ngx_int_t
ngx_http_xslt_add_chunk(ngx_http_request_t *r, ngx_http_xslt_filter_ctx_t *ctx,
    ngx_buf_t *b)
{
    int               err;
    xmlParserCtxtPtr  ctxt;

    if (ctx->ctxt == NULL) {

        ctxt = xmlCreatePushParserCtxt(NULL, NULL, NULL, 0, NULL);
        if (ctxt == NULL) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""xmlCreatePushParserCtxt() failed"");
            return NGX_ERROR;
        }
        xmlCtxtUseOptions(ctxt, XML_PARSE_NOENT|XML_PARSE_DTDLOAD
                                               |XML_PARSE_NOWARNING);

        ctxt->sax->externalSubset = ngx_http_xslt_sax_external_subset;
        ctxt->sax->setDocumentLocator = NULL;
        ctxt->sax->error = ngx_http_xslt_sax_error;
        ctxt->sax->fatalError = ngx_http_xslt_sax_error;
        ctxt->sax->_private = ctx;

        ctx->ctxt = ctxt;
        ctx->request = r;
    }

    err = xmlParseChunk(ctx->ctxt, (char *) b->pos, (int) (b->last - b->pos)...",369.0,409.0,1.0,1.0,41.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5491,252275,ngx_http_xslt_sax_external_subset,1,ngx_http_xslt_sax_external_subset,"void ngx_http_xslt_sax_external_subset (void*,xmlChar*,xmlChar*,xmlChar*)",http\modules\ngx_http_xslt_filter_module.c,"static void
ngx_http_xslt_sax_external_subset(void *data, const xmlChar *name,
    const xmlChar *externalId, const xmlChar *systemId)
{
    xmlParserCtxtPtr ctxt = data;

    xmlDocPtr                         doc;
    xmlDtdPtr                         dtd;
    ngx_http_request_t               *r;
    ngx_http_xslt_filter_ctx_t       *ctx;
    ngx_http_xslt_filter_loc_conf_t  *conf;

    ctx = ctxt->sax->_private;
    r = ctx->request;

    conf = ngx_http_get_module_loc_conf(r, ngx_http_xslt_filter_module);

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""xslt filter extSubset: \""%s\"" \""%s\"" \""%s\"""",
                   name ? name : (xmlChar *) """",
                   externalId ? externalId : (xmlChar *) """",
                   systemId ? systemId : (xmlChar *) """");

    doc = ctxt->myDoc;

#if (NGX_HTTP_XSLT_REUSE_DTD)

    dtd = conf->dtd;

#else

    dtd = xmlCopyDtd(conf->dtd);
    if (dtd == NULL) {
        ngx_log_error(NGX_LOG_ERR, r->connect...",412.0,460.0,1.0,5.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,void
5492,252284,ngx_http_xslt_apply_stylesheet,1,ngx_http_xslt_apply_stylesheet,"ngx_buf_t* ngx_http_xslt_apply_stylesheet (ngx_http_request_t*,ngx_http_xslt_filter_ctx_t*)",http\modules\ngx_http_xslt_filter_module.c,"static ngx_buf_t *
ngx_http_xslt_apply_stylesheet(ngx_http_request_t *r,
    ngx_http_xslt_filter_ctx_t *ctx)
{
    int                               len, rc, doc_type;
    u_char                           *type, *encoding;
    ngx_buf_t                        *b;
    ngx_uint_t                        i;
    xmlChar                          *buf;
    xmlDocPtr                         doc, res;
    ngx_http_xslt_sheet_t            *sheet;
    ngx_http_xslt_filter_loc_conf_t  *conf;

    conf = ngx_http_get_module_loc_conf(r, ngx_http_xslt_filter_module);
    sheet = conf->sheets.elts;
    doc = ctx->doc;

    /* preallocate array for 4 params */

    if (ngx_array_init(&ctx->params, r->pool, 4 * 2 + 1, sizeof(char *))
        != NGX_OK)
    {
        xmlFreeDoc(doc);
        return NULL;
    }

    for (i = 0; i < conf->sheets.nelts; i++) {

        ctx->transform = xsltNewTransformContext(sheet[i].stylesheet, doc);
        if (ctx->transform == NULL) {
            xmlFreeDoc(doc);
 ...",488.0,625.0,1.0,1.0,138.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_buf_t
5493,252290,ngx_http_xslt_params,1,ngx_http_xslt_params,"ngx_int_t ngx_http_xslt_params (ngx_http_request_t*,ngx_http_xslt_filter_ctx_t*,ngx_array_t*,ngx_uint_t)",http\modules\ngx_http_xslt_filter_module.c,"static ngx_int_t
ngx_http_xslt_params(ngx_http_request_t *r, ngx_http_xslt_filter_ctx_t *ctx,
    ngx_array_t *params, ngx_uint_t final)
{
    u_char                 *p, *value, *dst, *src, **s;
    size_t                  len;
    ngx_uint_t              i;
    ngx_str_t               string;
    ngx_http_xslt_param_t  *param;

    param = params->elts;

    for (i = 0; i < params->nelts; i++) {

        if (ngx_http_complex_value(r, &param[i].value, &string) != NGX_OK) {
            return NGX_ERROR;
        }

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""xslt filter param: \""%s\"""", string.data);

        if (param[i].name) {

            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           ""xslt filter param name: \""%s\"""", param[i].name);

            if (param[i].quote) {
                if (xsltQuoteOneUserParam(ctx->transform, param[i].name,
                                          string.data)
     ...",628.0,766.0,1.0,1.0,139.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5494,252298,ngx_http_xslt_content_type,1,ngx_http_xslt_content_type,u_char* ngx_http_xslt_content_type (xsltStylesheetPtr),http\modules\ngx_http_xslt_filter_module.c,"static u_char *
ngx_http_xslt_content_type(xsltStylesheetPtr s)
{
    u_char  *type;

    if (s->mediaType) {
        return s->mediaType;
    }

    for (s = s->imports; s; s = s->next) {

        type = ngx_http_xslt_content_type(s);

        if (type) {
            return type;
        }
    }

    return NULL;
}",769.0,788.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,u_char
5495,252303,ngx_http_xslt_encoding,1,ngx_http_xslt_encoding,u_char* ngx_http_xslt_encoding (xsltStylesheetPtr),http\modules\ngx_http_xslt_filter_module.c,"static u_char *
ngx_http_xslt_encoding(xsltStylesheetPtr s)
{
    u_char  *encoding;

    if (s->encoding) {
        return s->encoding;
    }

    for (s = s->imports; s; s = s->next) {

        encoding = ngx_http_xslt_encoding(s);

        if (encoding) {
            return encoding;
        }
    }

    return NULL;
}",791.0,810.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,u_char
5496,252308,ngx_http_xslt_cleanup,1,ngx_http_xslt_cleanup,void ngx_http_xslt_cleanup (void*),http\modules\ngx_http_xslt_filter_module.c,"static void
ngx_http_xslt_cleanup(void *data)
{
    ngx_free(data);
}",813.0,817.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5497,252313,ngx_http_xslt_entities,1,ngx_http_xslt_entities,"char* ngx_http_xslt_entities (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_xslt_filter_module.c,"static char *
ngx_http_xslt_entities(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_xslt_filter_loc_conf_t *xlcf = conf;

    ngx_str_t                         *value;
    ngx_uint_t                         i;
    ngx_pool_cleanup_t                *cln;
    ngx_http_xslt_file_t              *file;
    ngx_http_xslt_filter_main_conf_t  *xmcf;

    if (xlcf->dtd) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    xmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_xslt_filter_module);

    file = xmcf->dtd_files.elts;
    for (i = 0; i < xmcf->dtd_files.nelts; i++) {
        if (ngx_strcmp(file[i].name, value[1].data) == 0) {
            xlcf->dtd = file[i].data;
            return NGX_CONF_OK;
        }
    }

    cln = ngx_pool_cleanup_add(cf->pool, 0);
    if (cln == NULL) {
        return NGX_CONF_ERROR;
    }

    xlcf->dtd = xmlParseDTD(NULL, (xmlChar *) value[1].data);

    if (xlcf->dtd == NULL) {
        ngx_conf_log_error(NGX_LOG_ERR,...",820.0,871.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5498,252320,ngx_http_xslt_stylesheet,1,ngx_http_xslt_stylesheet,"char* ngx_http_xslt_stylesheet (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_xslt_filter_module.c,"static char *
ngx_http_xslt_stylesheet(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_xslt_filter_loc_conf_t *xlcf = conf;

    ngx_str_t                         *value;
    ngx_uint_t                         i, n;
    ngx_pool_cleanup_t                *cln;
    ngx_http_xslt_file_t              *file;
    ngx_http_xslt_sheet_t             *sheet;
    ngx_http_xslt_param_t             *param;
    ngx_http_compile_complex_value_t   ccv;
    ngx_http_xslt_filter_main_conf_t  *xmcf;

    value = cf->args->elts;

    if (xlcf->sheets.elts == NULL) {
        if (ngx_array_init(&xlcf->sheets, cf->pool, 1,
                           sizeof(ngx_http_xslt_sheet_t))
            != NGX_OK)
        {
            return NGX_CONF_ERROR;
        }
    }

    sheet = ngx_array_push(&xlcf->sheets);
    if (sheet == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_memzero(sheet, sizeof(ngx_http_xslt_sheet_t));

    if (ngx_conf_full_name(cf->cycle, &value[1], 0) != NGX_OK) {
    ...",875.0,981.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5499,252327,ngx_http_xslt_param,1,ngx_http_xslt_param,"char* ngx_http_xslt_param (ngx_conf_t*,ngx_command_t*,void*)",http\modules\ngx_http_xslt_filter_module.c,"static char *
ngx_http_xslt_param(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_xslt_filter_loc_conf_t  *xlcf = conf;

    ngx_http_xslt_param_t            *param;
    ngx_http_compile_complex_value_t  ccv;
    ngx_str_t                        *value;

    value = cf->args->elts;

    if (xlcf->params == NULL) {
        xlcf->params = ngx_array_create(cf->pool, 2,
                                        sizeof(ngx_http_xslt_param_t));
        if (xlcf->params == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    param = ngx_array_push(xlcf->params);
    if (param == NULL) {
        return NGX_CONF_ERROR;
    }

    param->name = value[1].data;
    param->quote = (cmd->post == NULL) ? 0 : 1;

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[2];
    ccv.complex_value = &param->value;
    ccv.zero = 1;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

  ...",984.0,1023.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5500,252334,ngx_http_xslt_cleanup_dtd,1,ngx_http_xslt_cleanup_dtd,void ngx_http_xslt_cleanup_dtd (void*),http\modules\ngx_http_xslt_filter_module.c,"static void
ngx_http_xslt_cleanup_dtd(void *data)
{
    xmlFreeDtd(data);
}",1026.0,1030.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5501,252339,ngx_http_xslt_cleanup_stylesheet,1,ngx_http_xslt_cleanup_stylesheet,void ngx_http_xslt_cleanup_stylesheet (void*),http\modules\ngx_http_xslt_filter_module.c,"static void
ngx_http_xslt_cleanup_stylesheet(void *data)
{
    xsltFreeStylesheet(data);
}",1033.0,1037.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5502,252344,ngx_http_xslt_filter_create_main_conf,1,ngx_http_xslt_filter_create_main_conf,void* ngx_http_xslt_filter_create_main_conf (ngx_conf_t*),http\modules\ngx_http_xslt_filter_module.c,"static void *
ngx_http_xslt_filter_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_xslt_filter_main_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_xslt_filter_main_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&conf->dtd_files, cf->pool, 1,
                       sizeof(ngx_http_xslt_file_t))
        != NGX_OK)
    {
        return NULL;
    }

    if (ngx_array_init(&conf->sheet_files, cf->pool, 1,
                       sizeof(ngx_http_xslt_file_t))
        != NGX_OK)
    {
        return NULL;
    }

    return conf;
}",1040.0,1065.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5503,252349,ngx_http_xslt_filter_create_conf,1,ngx_http_xslt_filter_create_conf,void* ngx_http_xslt_filter_create_conf (ngx_conf_t*),http\modules\ngx_http_xslt_filter_module.c,"static void *
ngx_http_xslt_filter_create_conf(ngx_conf_t *cf)
{
    ngx_http_xslt_filter_loc_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_xslt_filter_loc_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->dtd = NULL;
     *     conf->sheets = { NULL };
     *     conf->types = { NULL };
     *     conf->types_keys = NULL;
     *     conf->params = NULL;
     */

    conf->last_modified = NGX_CONF_UNSET;

    return conf;
}",1068.0,1091.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5504,252354,ngx_http_xslt_filter_merge_conf,1,ngx_http_xslt_filter_merge_conf,"char* ngx_http_xslt_filter_merge_conf (ngx_conf_t*,void*,void*)",http\modules\ngx_http_xslt_filter_module.c,"static char *
ngx_http_xslt_filter_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_xslt_filter_loc_conf_t *prev = parent;
    ngx_http_xslt_filter_loc_conf_t *conf = child;

    if (conf->dtd == NULL) {
        conf->dtd = prev->dtd;
    }

    if (conf->sheets.nelts == 0) {
        conf->sheets = prev->sheets;
    }

    if (conf->params == NULL) {
        conf->params = prev->params;
    }

    if (ngx_http_merge_types(cf, &conf->types_keys, &conf->types,
                             &prev->types_keys, &prev->types,
                             ngx_http_xslt_default_types)
        != NGX_OK)
    {
        return NGX_CONF_ERROR;
    }

    ngx_conf_merge_value(conf->last_modified, prev->last_modified, 0);

    return NGX_CONF_OK;
}",1094.0,1123.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5505,252361,ngx_http_xslt_filter_preconfiguration,1,ngx_http_xslt_filter_preconfiguration,ngx_int_t ngx_http_xslt_filter_preconfiguration (ngx_conf_t*),http\modules\ngx_http_xslt_filter_module.c,"static ngx_int_t
ngx_http_xslt_filter_preconfiguration(ngx_conf_t *cf)
{
    xmlInitParser();

#if (NGX_HAVE_EXSLT)
    exsltRegisterAll();
#endif

    return NGX_OK;
}",1126.0,1136.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5506,252366,ngx_http_xslt_filter_init,1,ngx_http_xslt_filter_init,ngx_int_t ngx_http_xslt_filter_init (ngx_conf_t*),http\modules\ngx_http_xslt_filter_module.c,"static ngx_int_t
ngx_http_xslt_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_xslt_header_filter;

    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_xslt_body_filter;

    return NGX_OK;
}",1139.0,1149.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5507,252371,ngx_http_xslt_filter_exit,1,ngx_http_xslt_filter_exit,void ngx_http_xslt_filter_exit (ngx_cycle_t*),http\modules\ngx_http_xslt_filter_module.c,"static void
ngx_http_xslt_filter_exit(ngx_cycle_t *cycle)
{
    xsltCleanupGlobals();
    xmlCleanupParser();
}",1152.0,1157.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5508,252508,ngx_http_xslt_header_filter,1,ngx_http_xslt_header_filter,ngx_int_t ngx_http_xslt_header_filter (ngx_http_request_t*),http\modules\ngx_http_xslt_filter_module.c,"static ngx_int_t
ngx_http_xslt_header_filter(ngx_http_request_t *r)
{
    ngx_http_xslt_filter_ctx_t       *ctx;
    ngx_http_xslt_filter_loc_conf_t  *conf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""xslt filter header"");

    if (r->headers_out.status == NGX_HTTP_NOT_MODIFIED) {
        return ngx_http_next_header_filter(r);
    }

    conf = ngx_http_get_module_loc_conf(r, ngx_http_xslt_filter_module);

    if (conf->sheets.nelts == 0
        || ngx_http_test_content_type(r, &conf->types) == NULL)
    {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_xslt_filter_module);

    if (ctx) {
        return ngx_http_next_header_filter(r);
    }

    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_xslt_filter_ctx_t));
    if (ctx == NULL) {
        return NGX_ERROR;
    }

    ngx_http_set_ctx(r, ctx, ngx_http_xslt_filter_module);

    r->main_filter_need_in_memory = 1;
    r->allow_ranges = 0;

    re...",201.0,239.0,1.0,1.0,39.0,22,7,30,10,0,8,5,5,3,2,,0,8,2,1,1,ngx_int_t
5509,252604,ngx_http_xslt_body_filter,1,ngx_http_xslt_body_filter,"ngx_int_t ngx_http_xslt_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\modules\ngx_http_xslt_filter_module.c,"static ngx_int_t
ngx_http_xslt_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    int                          wellFormed;
    ngx_chain_t                 *cl;
    ngx_http_xslt_filter_ctx_t  *ctx;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""xslt filter body"");

    if (in == NULL) {
        return ngx_http_next_body_filter(r, in);
    }

    ctx = ngx_http_get_module_ctx(r, ngx_http_xslt_filter_module);

    if (ctx == NULL || ctx->done) {
        return ngx_http_next_body_filter(r, in);
    }

    for (cl = in; cl; cl = cl->next) {

        if (ngx_http_xslt_add_chunk(r, ctx, cl->buf) != NGX_OK) {

            if (ctx->ctxt->myDoc) {

#if (NGX_HTTP_XSLT_REUSE_DTD)
                ctx->ctxt->myDoc->extSubset = NULL;
#endif
                xmlFreeDoc(ctx->ctxt->myDoc);
            }

            xmlFreeParserCtxt(ctx->ctxt);

            return ngx_http_xslt_send(r, ctx, NULL);
        }

        if (cl->buf->last_buf || cl->buf->last_in...",242.0,306.0,1.0,5.0,65.0,38,5,50,10,0,18,8,14,3,6,,0,14,4,2,2,ngx_int_t
5510,253156,ngx_http_xslt_sax_error,1,ngx_http_xslt_sax_error,"ANY ngx_http_xslt_sax_error (void*,char*...)",http\modules\ngx_http_xslt_filter_module.c,"ngx_http_xslt_sax_error(void *data, const char *msg, ...)
{
    xmlParserCtxtPtr ctxt = data;

    size_t                       n;
    va_list                      args;
    ngx_http_xslt_filter_ctx_t  *ctx;
    u_char                       buf[NGX_MAX_ERROR_STR];

    ctx = ctxt->sax->_private;

    buf[0] = '\0';

    va_start(args, msg);
    n = (size_t) vsnprintf((char *) buf, NGX_MAX_ERROR_STR, msg, args);
    va_end(args);

    while (--n && (buf[n] == CR || buf[n] == LF)) { /* void */ }

    ngx_log_error(NGX_LOG_ERR, ctx->request->connection->log, 0,
                  ""libxml2 error: \""%*s\"""", n + 1, buf);
}",464.0,485.0,1.0,1.0,22.0,20,9,24,11,0,2,2,2,0,1,,0,1,4,2,2,ANY
5511,255010,ngx_http_perl_init_interpreter,1,ngx_http_perl_init_interpreter,"char* ngx_http_perl_init_interpreter (ngx_conf_t*,ngx_http_perl_main_conf_t*)",http\modules\perl\ngx_http_perl_module.c,"static char *
ngx_http_perl_init_interpreter(ngx_conf_t *cf, ngx_http_perl_main_conf_t *pmcf)
{
    ngx_str_t           *m;
    ngx_uint_t           i;
#if (NGX_HAVE_PERL_MULTIPLICITY)
    ngx_pool_cleanup_t  *cln;

    cln = ngx_pool_cleanup_add(cf->pool, 0);
    if (cln == NULL) {
        return NGX_CONF_ERROR;
    }

#endif

#ifdef NGX_PERL_MODULES
    if (pmcf->modules == NGX_CONF_UNSET_PTR) {

        pmcf->modules = ngx_array_create(cf->pool, 1, sizeof(ngx_str_t));
        if (pmcf->modules == NULL) {
            return NGX_CONF_ERROR;
        }

        m = ngx_array_push(pmcf->modules);
        if (m == NULL) {
            return NGX_CONF_ERROR;
        }

        ngx_str_set(m, NGX_PERL_MODULES);
    }
#endif

    if (pmcf->modules != NGX_CONF_UNSET_PTR) {
        m = pmcf->modules->elts;
        for (i = 0; i < pmcf->modules->nelts; i++) {
            if (ngx_conf_full_name(cf->cycle, &m[i], 0) != NGX_OK) {
                return NGX_CONF_ERROR;
            }
        }
   ...",484.0,571.0,1.0,1.0,88.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
5512,255016,ngx_http_perl_create_interpreter,1,ngx_http_perl_create_interpreter,"PerlInterpreter* ngx_http_perl_create_interpreter (ngx_conf_t*,ngx_http_perl_main_conf_t*)",http\modules\perl\ngx_http_perl_module.c,"static PerlInterpreter *
ngx_http_perl_create_interpreter(ngx_conf_t *cf,
    ngx_http_perl_main_conf_t *pmcf)
{
    int                n;
    STRLEN             len;
    SV                *sv;
    char              *ver, **embedding;
    ngx_str_t         *m;
    ngx_uint_t         i;
    PerlInterpreter   *perl;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cf->log, 0, ""create perl interpreter"");

    if (ngx_set_environment(cf->cycle, NULL) == NULL) {
        return NULL;
    }

    perl = perl_alloc();
    if (perl == NULL) {
        ngx_log_error(NGX_LOG_ALERT, cf->log, 0, ""perl_alloc() failed"");
        return NULL;
    }

    {

    dTHXa(perl);
    PERL_SET_CONTEXT(perl);
    PERL_SET_INTERP(perl);

    perl_construct(perl);

#ifdef PERL_EXIT_DESTRUCT_END
    PL_exit_flags |= PERL_EXIT_DESTRUCT_END;
#endif

    n = (pmcf->modules != NGX_CONF_UNSET_PTR) ? pmcf->modules->nelts * 2 : 0;

    embedding = ngx_palloc(cf->pool, (5 + n) * sizeof(char *));
    if (embedding == NULL) {
    ...",574.0,664.0,1.0,1.0,91.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,PerlInterpreter
5513,255025,ngx_http_perl_preconfiguration,1,ngx_http_perl_preconfiguration,ngx_int_t ngx_http_perl_preconfiguration (ngx_conf_t*),http\modules\perl\ngx_http_perl_module.c,"static ngx_int_t
ngx_http_perl_preconfiguration(ngx_conf_t *cf)
{
#if (NGX_HTTP_SSI)
    ngx_int_t                  rc;
    ngx_http_ssi_main_conf_t  *smcf;

    smcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_ssi_filter_module);

    rc = ngx_hash_add_key(&smcf->commands, &ngx_http_perl_ssi_command.name,
                          &ngx_http_perl_ssi_command, NGX_HASH_READONLY_KEY);

    if (rc != NGX_OK) {
        if (rc == NGX_BUSY) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""conflicting SSI command \""%V\"""",
                               &ngx_http_perl_ssi_command.name);
        }

        return NGX_ERROR;
    }
#endif

    return NGX_OK;
}",901.0,925.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5514,255030,ngx_http_perl_create_main_conf,1,ngx_http_perl_create_main_conf,void* ngx_http_perl_create_main_conf (ngx_conf_t*),http\modules\perl\ngx_http_perl_module.c,"static void *
ngx_http_perl_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_perl_main_conf_t  *pmcf;

    pmcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_perl_main_conf_t));
    if (pmcf == NULL) {
        return NULL;
    }

    pmcf->modules = NGX_CONF_UNSET_PTR;
    pmcf->requires = NGX_CONF_UNSET_PTR;

    return pmcf;
}",845.0,859.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5515,255035,ngx_http_perl_init_main_conf,1,ngx_http_perl_init_main_conf,"char* ngx_http_perl_init_main_conf (ngx_conf_t*,void*)",http\modules\perl\ngx_http_perl_module.c,"static char *
ngx_http_perl_init_main_conf(ngx_conf_t *cf, void *conf)
{
    ngx_http_perl_main_conf_t *pmcf = conf;

    if (pmcf->perl == NULL) {
        if (ngx_http_perl_init_interpreter(cf, pmcf) != NGX_CONF_OK) {
            return NGX_CONF_ERROR;
        }
    }

    return NGX_CONF_OK;
}",862.0,874.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
5516,255041,ngx_http_perl_create_loc_conf,1,ngx_http_perl_create_loc_conf,void* ngx_http_perl_create_loc_conf (ngx_conf_t*),http\modules\perl\ngx_http_perl_module.c,"static void *
ngx_http_perl_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_perl_loc_conf_t *plcf;

    plcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_perl_loc_conf_t));
    if (plcf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     plcf->handler = { 0, NULL };
     */

    return plcf;
}",928.0,945.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5517,255046,ngx_http_perl_merge_loc_conf,1,ngx_http_perl_merge_loc_conf,"char* ngx_http_perl_merge_loc_conf (ngx_conf_t*,void*,void*)",http\modules\perl\ngx_http_perl_module.c,"static char *
ngx_http_perl_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_perl_loc_conf_t *prev = parent;
    ngx_http_perl_loc_conf_t *conf = child;

    if (conf->sub == NULL) {
        conf->sub = prev->sub;
        conf->handler = prev->handler;
    }

    return NGX_CONF_OK;
}",948.0,960.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5518,255053,ngx_http_perl,1,ngx_http_perl,"char* ngx_http_perl (ngx_conf_t*,ngx_command_t*,void*)",http\modules\perl\ngx_http_perl_module.c,"static char *
ngx_http_perl(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_perl_loc_conf_t *plcf = conf;

    ngx_str_t                  *value;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_perl_main_conf_t  *pmcf;

    value = cf->args->elts;

    if (plcf->handler.data) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""duplicate perl handler \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    pmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_perl_module);

    if (pmcf->perl == NULL) {
        if (ngx_http_perl_init_interpreter(cf, pmcf) != NGX_CONF_OK) {
            return NGX_CONF_ERROR;
        }
    }

    plcf->handler = value[1];

    {

    dTHXa(pmcf->perl);
    PERL_SET_CONTEXT(pmcf->perl);
    PERL_SET_INTERP(pmcf->perl);

    ngx_http_perl_eval_anon_sub(aTHX_ &value[1], &plcf->sub);

    if (plcf->sub == &PL_sv_undef) {
        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
                           ""eval_pv(\""...",963.0,1014.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5519,255060,ngx_http_perl_set,1,ngx_http_perl_set,"char* ngx_http_perl_set (ngx_conf_t*,ngx_command_t*,void*)",http\modules\perl\ngx_http_perl_module.c,"static char *
ngx_http_perl_set(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_int_t                   index;
    ngx_str_t                  *value;
    ngx_http_variable_t        *v;
    ngx_http_perl_variable_t   *pv;
    ngx_http_perl_main_conf_t  *pmcf;

    value = cf->args->elts;

    if (value[1].data[0] != '$') {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    value[1].len--;
    value[1].data++;

    v = ngx_http_add_variable(cf, &value[1], NGX_HTTP_VAR_CHANGEABLE);
    if (v == NULL) {
        return NGX_CONF_ERROR;
    }

    pv = ngx_palloc(cf->pool, sizeof(ngx_http_perl_variable_t));
    if (pv == NULL) {
        return NGX_CONF_ERROR;
    }

    index = ngx_http_get_variable_index(cf, &value[1]);
    if (index == NGX_ERROR) {
        return NGX_CONF_ERROR;
    }

    pmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_perl_module);

    if (pm...",1017.0,1086.0,1.0,1.0,70.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5520,255067,ngx_http_perl_init_worker,1,ngx_http_perl_init_worker,ngx_int_t ngx_http_perl_init_worker (ngx_cycle_t*),http\modules\perl\ngx_http_perl_module.c,"static ngx_int_t
ngx_http_perl_init_worker(ngx_cycle_t *cycle)
{
    ngx_http_perl_main_conf_t  *pmcf;

    pmcf = ngx_http_cycle_get_module_main_conf(cycle, ngx_http_perl_module);

    if (pmcf) {
        dTHXa(pmcf->perl);
        PERL_SET_CONTEXT(pmcf->perl);
        PERL_SET_INTERP(pmcf->perl);

        /* set worker's $$ */

        sv_setiv(GvSV(gv_fetchpv(""$"", TRUE, SVt_PV)), (I32) ngx_pid);
    }

    return NGX_OK;
}",1089.0,1107.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5521,255072,ngx_http_perl_exit,1,ngx_http_perl_exit,void ngx_http_perl_exit (ngx_cycle_t*),http\modules\perl\ngx_http_perl_module.c,"static void
ngx_http_perl_exit(ngx_cycle_t *cycle)
{
#if (NGX_HAVE_PERL_MULTIPLICITY)

    /*
     * the master exit hook is run before global pool cleanup,
     * therefore just set flag here
     */

    ngx_perl_term = 1;

#else

    if (nginx_stash) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cycle->log, 0, ""perl term"");

        (void) perl_destruct(perl);

        perl_free(perl);

        PERL_SYS_TERM();
    }

#endif
}",1110.0,1135.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5522,255163,ngx_http_perl_xs_init,1,ngx_http_perl_xs_init,void ngx_http_perl_xs_init (ANY),http\modules\perl\ngx_http_perl_module.c,"static void
ngx_http_perl_xs_init(pTHX)
{
    newXS(""DynaLoader::boot_DynaLoader"", boot_DynaLoader, __FILE__);

    nginx_stash = gv_stashpv(""nginx"", TRUE);
}",161.0,167.0,1.0,58.0,7.0,1,1,3,3,0,1,1,1,0,0,,0,1,2,1,1,void
5523,255179,ngx_http_perl_handler,1,ngx_http_perl_handler,ngx_int_t ngx_http_perl_handler (ngx_http_request_t*),http\modules\perl\ngx_http_perl_module.c,"static ngx_int_t
ngx_http_perl_handler(ngx_http_request_t *r)
{
    r->main->count++;

    ngx_http_perl_handle_request(r);

    return NGX_DONE;
}",170.0,178.0,1.0,1.0,9.0,3,2,3,2,0,1,1,1,0,1,,0,0,2,1,1,ngx_int_t
5524,255194,ngx_http_perl_handle_request,1,ngx_http_perl_handle_request,void ngx_http_perl_handle_request (ngx_http_request_t*),http\modules\perl\ngx_http_perl_module.c,"void
ngx_http_perl_handle_request(ngx_http_request_t *r)
{
    SV                         *sub;
    ngx_int_t                   rc;
    ngx_str_t                   uri, args, *handler;
    ngx_uint_t                  flags;
    ngx_http_perl_ctx_t        *ctx;
    ngx_http_perl_loc_conf_t   *plcf;
    ngx_http_perl_main_conf_t  *pmcf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, ""perl handler"");

    ctx = ngx_http_get_module_ctx(r, ngx_http_perl_module);

    if (ctx == NULL) {
        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_perl_ctx_t));
        if (ctx == NULL) {
            ngx_http_finalize_request(r, NGX_ERROR);
            return;
        }

        ngx_http_set_ctx(r, ctx, ngx_http_perl_module);

        ctx->request = r;
    }

    pmcf = ngx_http_get_module_main_conf(r, ngx_http_perl_module);

    {

    dTHXa(pmcf->perl);
    PERL_SET_CONTEXT(pmcf->perl);
    PERL_SET_INTERP(pmcf->perl);

    if (ctx->next == NULL) {
        plcf = ngx_http_get_module...",181.0,285.0,1.0,1.0,105.0,50,9,69,17,2,28,11,13,6,8,,0,21,2,1,1,void
5525,255456,ngx_http_perl_sleep_handler,1,ngx_http_perl_sleep_handler,void ngx_http_perl_sleep_handler (ngx_http_request_t*),http\modules\perl\ngx_http_perl_module.c,"void
ngx_http_perl_sleep_handler(ngx_http_request_t *r)
{
    ngx_event_t  *wev;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""perl sleep handler"");

    wev = r->connection->write;

    if (wev->delayed) {

        if (ngx_handle_write_event(wev, 0) != NGX_OK) {
            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        }

        return;
    }

    ngx_http_perl_handle_request(r);
}",288.0,308.0,1.0,1.0,21.0,7,3,10,5,0,3,3,4,1,3,,0,1,2,1,1,void
5526,255496,ngx_http_perl_variable,1,ngx_http_perl_variable,"ngx_int_t ngx_http_perl_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\modules\perl\ngx_http_perl_module.c,"static ngx_int_t
ngx_http_perl_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_http_perl_variable_t *pv = (ngx_http_perl_variable_t *) data;

    ngx_int_t                   rc;
    ngx_str_t                   value;
    ngx_uint_t                  saved;
    ngx_http_perl_ctx_t        *ctx;
    ngx_http_perl_main_conf_t  *pmcf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""perl variable handler"");

    ctx = ngx_http_get_module_ctx(r, ngx_http_perl_module);

    if (ctx == NULL) {
        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_perl_ctx_t));
        if (ctx == NULL) {
            return NGX_ERROR;
        }

        ngx_http_set_ctx(r, ctx, ngx_http_perl_module);

        ctx->request = r;
    }

    saved = ctx->variable;
    ctx->variable = 1;

    pmcf = ngx_http_get_module_main_conf(r, ngx_http_perl_module);

    value.data = NULL;

    {

    dTHXa(pmcf->perl);
    PERL_SET_CONTEXT(pmcf->perl);...",311.0,376.0,1.0,1.0,66.0,45,6,47,14,0,17,4,5,1,1,,0,17,6,3,3,ngx_int_t
5527,256617,ngx_http_block,1,ngx_http_block,"char* ngx_http_block (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http.c,"static char *
ngx_http_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                        *rv;
    ngx_uint_t                   mi, m, s;
    ngx_conf_t                   pcf;
    ngx_http_module_t           *module;
    ngx_http_conf_ctx_t         *ctx;
    ngx_http_core_loc_conf_t    *clcf;
    ngx_http_core_srv_conf_t   **cscfp;
    ngx_http_core_main_conf_t   *cmcf;

    if (*(ngx_http_conf_ctx_t **) conf) {
        return ""is duplicate"";
    }

    /* the main http context */

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    *(ngx_http_conf_ctx_t **) conf = ctx;


    /* count the number of the http modules and set up their indices */

    ngx_http_max_module = ngx_count_modules(cf->cycle, NGX_HTTP_MODULE);


    /* the http main_conf context, it is the same in the all http contexts */

    ctx->main_conf = ngx_pcalloc(cf->pool,
                                 sizeof(void *) * ng...",121.0,346.0,1.0,1.0,226.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5528,256624,ngx_http_init_phases,1,ngx_http_init_phases,"ngx_int_t ngx_http_init_phases (ngx_conf_t*,ngx_http_core_main_conf_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_init_phases(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf)
{
    if (ngx_array_init(&cmcf->phases[NGX_HTTP_POST_READ_PHASE].handlers,
                       cf->pool, 1, sizeof(ngx_http_handler_pt))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->phases[NGX_HTTP_SERVER_REWRITE_PHASE].handlers,
                       cf->pool, 1, sizeof(ngx_http_handler_pt))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->phases[NGX_HTTP_REWRITE_PHASE].handlers,
                       cf->pool, 1, sizeof(ngx_http_handler_pt))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->phases[NGX_HTTP_PREACCESS_PHASE].handlers,
                       cf->pool, 1, sizeof(ngx_http_handler_pt))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->phases[NGX_HTTP_ACCESS_PHASE].handlers,
                       cf->pool, 2, sizeof(ngx_http...",349.0,409.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5529,256630,ngx_http_init_headers_in_hash,1,ngx_http_init_headers_in_hash,"ngx_int_t ngx_http_init_headers_in_hash (ngx_conf_t*,ngx_http_core_main_conf_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_init_headers_in_hash(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf)
{
    ngx_array_t         headers_in;
    ngx_hash_key_t     *hk;
    ngx_hash_init_t     hash;
    ngx_http_header_t  *header;

    if (ngx_array_init(&headers_in, cf->temp_pool, 32, sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    for (header = ngx_http_headers_in; header->name.len; header++) {
        hk = ngx_array_push(&headers_in);
        if (hk == NULL) {
            return NGX_ERROR;
        }

        hk->key = header->name;
        hk->key_hash = ngx_hash_key_lc(header->name.data, header->name.len);
        hk->value = header;
    }

    hash.hash = &cmcf->headers_in_hash;
    hash.key = ngx_hash_key_lc;
    hash.max_size = 512;
    hash.bucket_size = ngx_align(64, ngx_cacheline_size);
    hash.name = ""headers_in_hash"";
    hash.pool = cf->pool;
    hash.temp_pool = NULL;

    if (ngx_hash_init(&hash, headers_in.elts, headers_in.nelts) != NG...",412.0,450.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5530,256636,ngx_http_init_phase_handlers,1,ngx_http_init_phase_handlers,"ngx_int_t ngx_http_init_phase_handlers (ngx_conf_t*,ngx_http_core_main_conf_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_init_phase_handlers(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf)
{
    ngx_int_t                   j;
    ngx_uint_t                  i, n;
    ngx_uint_t                  find_config_index, use_rewrite, use_access;
    ngx_http_handler_pt        *h;
    ngx_http_phase_handler_t   *ph;
    ngx_http_phase_handler_pt   checker;

    cmcf->phase_engine.server_rewrite_index = (ngx_uint_t) -1;
    cmcf->phase_engine.location_rewrite_index = (ngx_uint_t) -1;
    find_config_index = 0;
    use_rewrite = cmcf->phases[NGX_HTTP_REWRITE_PHASE].handlers.nelts ? 1 : 0;
    use_access = cmcf->phases[NGX_HTTP_ACCESS_PHASE].handlers.nelts ? 1 : 0;

    n = 1                  /* find config phase */
        + use_rewrite      /* post rewrite phase */
        + use_access;      /* post access phase */

    for (i = 0; i < NGX_HTTP_LOG_PHASE; i++) {
        n += cmcf->phases[i].handlers.nelts;
    }

    ph = ngx_pcalloc(cf->pool,
                     n * sizeof(ngx_http_...",453.0,559.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5531,256642,ngx_http_add_addresses,1,ngx_http_add_addresses,"ngx_int_t ngx_http_add_addresses (ngx_conf_t*,ngx_http_core_srv_conf_t*,ngx_http_conf_port_t*,ngx_http_listen_opt_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_add_addresses(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
    ngx_http_conf_port_t *port, ngx_http_listen_opt_t *lsopt)
{
    ngx_uint_t             i, default_server, proxy_protocol;
    ngx_http_conf_addr_t  *addr;
#if (NGX_HTTP_SSL)
    ngx_uint_t             ssl;
#endif
#if (NGX_HTTP_V2)
    ngx_uint_t             http2;
#endif

    /*
     * we cannot compare whole sockaddr struct's as kernel
     * may fill some fields in inherited sockaddr struct's
     */

    addr = port->addrs.elts;

    for (i = 0; i < port->addrs.nelts; i++) {

        if (ngx_cmp_sockaddr(lsopt->sockaddr, lsopt->socklen,
                             addr[i].opt.sockaddr,
                             addr[i].opt.socklen, 0)
            != NGX_OK)
        {
            continue;
        }

        /* the address is already in the address list */

        if (ngx_http_add_server(cf, cscf, &addr[i]) != NGX_OK) {
            return NGX_ERROR;
        }

        /* preserve defau...",1227.0,1317.0,1.0,1.0,91.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5532,256650,ngx_http_add_address,1,ngx_http_add_address,"ngx_int_t ngx_http_add_address (ngx_conf_t*,ngx_http_core_srv_conf_t*,ngx_http_conf_port_t*,ngx_http_listen_opt_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_add_address(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
    ngx_http_conf_port_t *port, ngx_http_listen_opt_t *lsopt)
{
    ngx_http_conf_addr_t  *addr;

    if (port->addrs.elts == NULL) {
        if (ngx_array_init(&port->addrs, cf->temp_pool, 4,
                           sizeof(ngx_http_conf_addr_t))
            != NGX_OK)
        {
            return NGX_ERROR;
        }
    }

#if (NGX_HTTP_V2 && NGX_HTTP_SSL                                              \
     && !defined TLSEXT_TYPE_application_layer_protocol_negotiation           \
     && !defined TLSEXT_TYPE_next_proto_neg)

    if (lsopt->http2 && lsopt->ssl) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""nginx was built with OpenSSL that lacks ALPN ""
                           ""and NPN support, HTTP/2 is not enabled for %V"",
                           &lsopt->addr_text);
    }

#endif

    addr = ngx_array_push(&port->addrs);
    if (addr == NULL) {
        ret...",1325.0,1371.0,1.0,1.0,47.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5533,256658,ngx_http_add_server,1,ngx_http_add_server,"ngx_int_t ngx_http_add_server (ngx_conf_t*,ngx_http_core_srv_conf_t*,ngx_http_conf_addr_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_add_server(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
    ngx_http_conf_addr_t *addr)
{
    ngx_uint_t                  i;
    ngx_http_core_srv_conf_t  **server;

    if (addr->servers.elts == NULL) {
        if (ngx_array_init(&addr->servers, cf->temp_pool, 4,
                           sizeof(ngx_http_core_srv_conf_t *))
            != NGX_OK)
        {
            return NGX_ERROR;
        }

    } else {
        server = addr->servers.elts;
        for (i = 0; i < addr->servers.nelts; i++) {
            if (server[i] == cscf) {
                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                   ""a duplicate listen %V"",
                                   &addr->opt.addr_text);
                return NGX_ERROR;
            }
        }
    }

    server = ngx_array_push(&addr->servers);
    if (server == NULL) {
        return NGX_ERROR;
    }

    *server = cscf;

    return NGX_OK;
}",1376.0,1411.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5534,256665,ngx_http_merge_servers,1,ngx_http_merge_servers,"char* ngx_http_merge_servers (ngx_conf_t*,ngx_http_core_main_conf_t*,ngx_http_module_t*,ngx_uint_t)",http\ngx_http.c,"static char *
ngx_http_merge_servers(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf,
    ngx_http_module_t *module, ngx_uint_t ctx_index)
{
    char                        *rv;
    ngx_uint_t                   s;
    ngx_http_conf_ctx_t         *ctx, saved;
    ngx_http_core_loc_conf_t    *clcf;
    ngx_http_core_srv_conf_t   **cscfp;

    cscfp = cmcf->servers.elts;
    ctx = (ngx_http_conf_ctx_t *) cf->ctx;
    saved = *ctx;
    rv = NGX_CONF_OK;

    for (s = 0; s < cmcf->servers.nelts; s++) {

        /* merge the server{}s' srv_conf's */

        ctx->srv_conf = cscfp[s]->ctx->srv_conf;

        if (module->merge_srv_conf) {
            rv = module->merge_srv_conf(cf, saved.srv_conf[ctx_index],
                                        cscfp[s]->ctx->srv_conf[ctx_index]);
            if (rv != NGX_CONF_OK) {
                goto failed;
            }
        }

        if (module->merge_loc_conf) {

            /* merge the server{}'s loc_conf */

            ctx->loc_conf = csc...",562.0,621.0,1.0,1.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,char*
5535,256673,ngx_http_merge_locations,1,ngx_http_merge_locations,"char* ngx_http_merge_locations (ngx_conf_t*,ngx_queue_t*,void**,ngx_http_module_t*,ngx_uint_t)",http\ngx_http.c,"static char *
ngx_http_merge_locations(ngx_conf_t *cf, ngx_queue_t *locations,
    void **loc_conf, ngx_http_module_t *module, ngx_uint_t ctx_index)
{
    char                       *rv;
    ngx_queue_t                *q;
    ngx_http_conf_ctx_t        *ctx, saved;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_location_queue_t  *lq;

    if (locations == NULL) {
        return NGX_CONF_OK;
    }

    ctx = (ngx_http_conf_ctx_t *) cf->ctx;
    saved = *ctx;

    for (q = ngx_queue_head(locations);
         q != ngx_queue_sentinel(locations);
         q = ngx_queue_next(q))
    {
        lq = (ngx_http_location_queue_t *) q;

        clcf = lq->exact ? lq->exact : lq->inclusive;
        ctx->loc_conf = clcf->loc_conf;

        rv = module->merge_loc_conf(cf, loc_conf[ctx_index],
                                    clcf->loc_conf[ctx_index]);
        if (rv != NGX_CONF_OK) {
            return rv;
        }

        rv = ngx_http_merge_locations(cf, clcf->locations, clcf->loc_conf...",624.0,666.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,char*
5536,256682,ngx_http_init_locations,1,ngx_http_init_locations,"ngx_int_t ngx_http_init_locations (ngx_conf_t*,ngx_http_core_srv_conf_t*,ngx_http_core_loc_conf_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_init_locations(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
    ngx_http_core_loc_conf_t *pclcf)
{
    ngx_uint_t                   n;
    ngx_queue_t                 *q, *locations, *named, tail;
    ngx_http_core_loc_conf_t    *clcf;
    ngx_http_location_queue_t   *lq;
    ngx_http_core_loc_conf_t   **clcfp;
#if (NGX_PCRE)
    ngx_uint_t                   r;
    ngx_queue_t                 *regex;
#endif

    locations = pclcf->locations;

    if (locations == NULL) {
        return NGX_OK;
    }

    ngx_queue_sort(locations, ngx_http_cmp_locations);

    named = NULL;
    n = 0;
#if (NGX_PCRE)
    regex = NULL;
    r = 0;
#endif

    for (q = ngx_queue_head(locations);
         q != ngx_queue_sentinel(locations);
         q = ngx_queue_next(q))
    {
        lq = (ngx_http_location_queue_t *) q;

        clcf = lq->exact ? lq->exact : lq->inclusive;

        if (ngx_http_init_locations(cf, NULL, clcf) != NGX_OK) {
            return NGX_ERROR;
     ...",669.0,795.0,1.0,1.0,127.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5537,256689,ngx_http_init_static_location_trees,1,ngx_http_init_static_location_trees,"ngx_int_t ngx_http_init_static_location_trees (ngx_conf_t*,ngx_http_core_loc_conf_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_init_static_location_trees(ngx_conf_t *cf,
    ngx_http_core_loc_conf_t *pclcf)
{
    ngx_queue_t                *q, *locations;
    ngx_http_core_loc_conf_t   *clcf;
    ngx_http_location_queue_t  *lq;

    locations = pclcf->locations;

    if (locations == NULL) {
        return NGX_OK;
    }

    if (ngx_queue_empty(locations)) {
        return NGX_OK;
    }

    for (q = ngx_queue_head(locations);
         q != ngx_queue_sentinel(locations);
         q = ngx_queue_next(q))
    {
        lq = (ngx_http_location_queue_t *) q;

        clcf = lq->exact ? lq->exact : lq->inclusive;

        if (ngx_http_init_static_location_trees(cf, clcf) != NGX_OK) {
            return NGX_ERROR;
        }
    }

    if (ngx_http_join_exact_locations(cf, locations) != NGX_OK) {
        return NGX_ERROR;
    }

    ngx_http_create_locations_list(locations, ngx_queue_head(locations));

    pclcf->static_locations = ngx_http_create_locations_tree(cf, locations, 0);
    if (...",798.0,841.0,1.0,1.0,44.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5538,256695,ngx_http_escape_location_name,1,ngx_http_escape_location_name,"ngx_int_t ngx_http_escape_location_name (ngx_conf_t*,ngx_http_core_loc_conf_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_escape_location_name(ngx_conf_t *cf, ngx_http_core_loc_conf_t *clcf)
{
    u_char     *p;
    size_t      len;
    uintptr_t   escape;

    escape = 2 * ngx_escape_uri(NULL, clcf->name.data, clcf->name.len,
                                NGX_ESCAPE_URI);

    if (escape) {
        len = clcf->name.len + escape;

        p = ngx_pnalloc(cf->pool, len);
        if (p == NULL) {
            return NGX_ERROR;
        }

        clcf->escaped_name.len = len;
        clcf->escaped_name.data = p;

        ngx_escape_uri(p, clcf->name.data, clcf->name.len, NGX_ESCAPE_URI);

    } else {
        clcf->escaped_name = clcf->name;
    }

    return NGX_OK;
}",895.0,923.0,1.0,1.0,29.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5539,256701,ngx_http_cmp_locations,1,ngx_http_cmp_locations,"ngx_int_t ngx_http_cmp_locations (ngx_queue_t*,ngx_queue_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_cmp_locations(const ngx_queue_t *one, const ngx_queue_t *two)
{
    ngx_int_t                   rc;
    ngx_http_core_loc_conf_t   *first, *second;
    ngx_http_location_queue_t  *lq1, *lq2;

    lq1 = (ngx_http_location_queue_t *) one;
    lq2 = (ngx_http_location_queue_t *) two;

    first = lq1->exact ? lq1->exact : lq1->inclusive;
    second = lq2->exact ? lq2->exact : lq2->inclusive;

    if (first->noname && !second->noname) {
        /* shift no named locations to the end */
        return 1;
    }

    if (!first->noname && second->noname) {
        /* shift no named locations to the end */
        return -1;
    }

    if (first->noname || second->noname) {
        /* do not sort no named locations */
        return 0;
    }

    if (first->named && !second->named) {
        /* shift named locations to the end */
        return 1;
    }

    if (!first->named && second->named) {
        /* shift named locations to the end */
        return -1;
    ...",926.0,996.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5540,256707,ngx_http_join_exact_locations,1,ngx_http_join_exact_locations,"ngx_int_t ngx_http_join_exact_locations (ngx_conf_t*,ngx_queue_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_join_exact_locations(ngx_conf_t *cf, ngx_queue_t *locations)
{
    ngx_queue_t                *q, *x;
    ngx_http_location_queue_t  *lq, *lx;

    q = ngx_queue_head(locations);

    while (q != ngx_queue_last(locations)) {

        x = ngx_queue_next(q);

        lq = (ngx_http_location_queue_t *) q;
        lx = (ngx_http_location_queue_t *) x;

        if (lq->name->len == lx->name->len
            && ngx_filename_cmp(lq->name->data, lx->name->data, lx->name->len)
               == 0)
        {
            if ((lq->exact && lx->exact) || (lq->inclusive && lx->inclusive)) {
                ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
                              ""duplicate location \""%V\"" in %s:%ui"",
                              lx->name, lx->file_name, lx->line);

                return NGX_ERROR;
            }

            lq->inclusive = lx->inclusive;

            ngx_queue_remove(x);

            continue;
        }

        q = ngx_queue_next(q);
   ...",999.0,1037.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5541,256713,ngx_http_create_locations_list,1,ngx_http_create_locations_list,"void ngx_http_create_locations_list (ngx_queue_t*,ngx_queue_t*)",http\ngx_http.c,"static void
ngx_http_create_locations_list(ngx_queue_t *locations, ngx_queue_t *q)
{
    u_char                     *name;
    size_t                      len;
    ngx_queue_t                *x, tail;
    ngx_http_location_queue_t  *lq, *lx;

    if (q == ngx_queue_last(locations)) {
        return;
    }

    lq = (ngx_http_location_queue_t *) q;

    if (lq->inclusive == NULL) {
        ngx_http_create_locations_list(locations, ngx_queue_next(q));
        return;
    }

    len = lq->name->len;
    name = lq->name->data;

    for (x = ngx_queue_next(q);
         x != ngx_queue_sentinel(locations);
         x = ngx_queue_next(x))
    {
        lx = (ngx_http_location_queue_t *) x;

        if (len > lx->name->len
            || ngx_filename_cmp(name, lx->name->data, len) != 0)
        {
            break;
        }
    }

    q = ngx_queue_next(q);

    if (q == x) {
        ngx_http_create_locations_list(locations, x);
        return;
    }

    ngx_queue_split(locations, q, &tail...",1040.0,1096.0,1.0,1.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5542,256719,ngx_http_create_locations_tree,1,ngx_http_create_locations_tree,"ngx_http_location_tree_node_t* ngx_http_create_locations_tree (ngx_conf_t*,ngx_queue_t*,size_t)",http\ngx_http.c,"static ngx_http_location_tree_node_t *
ngx_http_create_locations_tree(ngx_conf_t *cf, ngx_queue_t *locations,
    size_t prefix)
{
    size_t                          len;
    ngx_queue_t                    *q, tail;
    ngx_http_location_queue_t      *lq;
    ngx_http_location_tree_node_t  *node;

    q = ngx_queue_middle(locations);

    lq = (ngx_http_location_queue_t *) q;
    len = lq->name->len - prefix;

    node = ngx_palloc(cf->pool,
                      offsetof(ngx_http_location_tree_node_t, name) + len);
    if (node == NULL) {
        return NULL;
    }

    node->left = NULL;
    node->right = NULL;
    node->tree = NULL;
    node->exact = lq->exact;
    node->inclusive = lq->inclusive;

    node->auto_redirect = (u_char) ((lq->exact && lq->exact->auto_redirect)
                           || (lq->inclusive && lq->inclusive->auto_redirect));

    node->len = (u_char) len;
    ngx_memcpy(node->name, &lq->name->data[prefix], len);

    ngx_queue_split(locations, q, &tail...",1104.0,1174.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_http_location_tree_node_t
5543,256726,ngx_http_optimize_servers,1,ngx_http_optimize_servers,"ngx_int_t ngx_http_optimize_servers (ngx_conf_t*,ngx_http_core_main_conf_t*,ngx_array_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_optimize_servers(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf,
    ngx_array_t *ports)
{
    ngx_uint_t             p, a;
    ngx_http_conf_port_t  *port;
    ngx_http_conf_addr_t  *addr;

    if (ports == NULL) {
        return NGX_OK;
    }

    port = ports->elts;
    for (p = 0; p < ports->nelts; p++) {

        ngx_sort(port[p].addrs.elts, (size_t) port[p].addrs.nelts,
                 sizeof(ngx_http_conf_addr_t), ngx_http_cmp_conf_addrs);

        /*
         * check whether all name-based servers have the same
         * configuration as a default server for given address:port
         */

        addr = port[p].addrs.elts;
        for (a = 0; a < port[p].addrs.nelts; a++) {

            if (addr[a].servers.nelts > 1
#if (NGX_PCRE)
                || addr[a].default_server->captures
#endif
               )
            {
                if (ngx_http_server_names(cf, cmcf, &addr[a]) != NGX_OK) {
                    return NGX_ERROR;
               ...",1414.0,1458.0,1.0,1.0,45.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5544,256733,ngx_http_server_names,1,ngx_http_server_names,"ngx_int_t ngx_http_server_names (ngx_conf_t*,ngx_http_core_main_conf_t*,ngx_http_conf_addr_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_server_names(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf,
    ngx_http_conf_addr_t *addr)
{
    ngx_int_t                   rc;
    ngx_uint_t                  n, s;
    ngx_hash_init_t             hash;
    ngx_hash_keys_arrays_t      ha;
    ngx_http_server_name_t     *name;
    ngx_http_core_srv_conf_t  **cscfp;
#if (NGX_PCRE)
    ngx_uint_t                  regex, i;

    regex = 0;
#endif

    ngx_memzero(&ha, sizeof(ngx_hash_keys_arrays_t));

    ha.temp_pool = ngx_create_pool(NGX_DEFAULT_POOL_SIZE, cf->log);
    if (ha.temp_pool == NULL) {
        return NGX_ERROR;
    }

    ha.pool = cf->pool;

    if (ngx_hash_keys_array_init(&ha, NGX_HASH_LARGE) != NGX_OK) {
        goto failed;
    }

    cscfp = addr->servers.elts;

    for (s = 0; s < addr->servers.nelts; s++) {

        name = cscfp[s]->server_names.elts;

        for (n = 0; n < cscfp[s]->server_names.nelts; n++) {

#if (NGX_PCRE)
            if (name[n].regex) {
                regex++;...",1461.0,1614.0,1.0,1.0,154.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5545,256740,ngx_http_cmp_conf_addrs,1,ngx_http_cmp_conf_addrs,"ngx_int_t ngx_http_cmp_conf_addrs (void*,void*)",http\ngx_http.c,"static ngx_int_t
ngx_http_cmp_conf_addrs(const void *one, const void *two)
{
    ngx_http_conf_addr_t  *first, *second;

    first = (ngx_http_conf_addr_t *) one;
    second = (ngx_http_conf_addr_t *) two;

    if (first->opt.wildcard) {
        /* a wildcard address must be the last resort, shift it to the end */
        return 1;
    }

    if (second->opt.wildcard) {
        /* a wildcard address must be the last resort, shift it to the end */
        return -1;
    }

    if (first->opt.bind && !second->opt.bind) {
        /* shift explicit bind()ed addresses to the start */
        return -1;
    }

    if (!first->opt.bind && second->opt.bind) {
        /* shift explicit bind()ed addresses to the start */
        return 1;
    }

    /* do not sort by default */

    return 0;
}",1617.0,1648.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5546,256747,ngx_http_init_listening,1,ngx_http_init_listening,"ngx_int_t ngx_http_init_listening (ngx_conf_t*,ngx_http_conf_port_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_init_listening(ngx_conf_t *cf, ngx_http_conf_port_t *port)
{
    ngx_uint_t                 i, last, bind_wildcard;
    ngx_listening_t           *ls;
    ngx_http_port_t           *hport;
    ngx_http_conf_addr_t      *addr;

    addr = port->addrs.elts;
    last = port->addrs.nelts;

    /*
     * If there is a binding to an ""*:port"" then we need to bind() to
     * the ""*:port"" only and ignore other implicit bindings.  The bindings
     * have been already sorted: explicit bindings are on the start, then
     * implicit bindings go, and wildcard binding is in the end.
     */

    if (addr[last - 1].opt.wildcard) {
        addr[last - 1].opt.bind = 1;
        bind_wildcard = 1;

    } else {
        bind_wildcard = 0;
    }

    i = 0;

    while (i < last) {

        if (bind_wildcard && !addr[i].opt.bind) {
            i++;
            continue;
        }

        ls = ngx_http_add_listening(cf, &addr[i]);
        if (ls == NULL) {
            return N...",1663.0,1733.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5547,256753,ngx_http_add_listening,1,ngx_http_add_listening,"ngx_listening_t* ngx_http_add_listening (ngx_conf_t*,ngx_http_conf_addr_t*)",http\ngx_http.c,"static ngx_listening_t *
ngx_http_add_listening(ngx_conf_t *cf, ngx_http_conf_addr_t *addr)
{
    ngx_listening_t           *ls;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_core_srv_conf_t  *cscf;

    ls = ngx_create_listening(cf, addr->opt.sockaddr, addr->opt.socklen);
    if (ls == NULL) {
        return NULL;
    }

    ls->addr_ntop = 1;

    ls->handler = ngx_http_init_connection;

    cscf = addr->default_server;
    ls->pool_size = cscf->connection_pool_size;

    clcf = cscf->ctx->loc_conf[ngx_http_core_module.ctx_index];

    ls->logp = clcf->error_log;
    ls->log.data = &ls->addr_text;
    ls->log.handler = ngx_accept_log_error;

#if (NGX_WIN32)
    {
    ngx_iocp_conf_t  *iocpcf = NULL;

    if (ngx_get_conf(cf->cycle->conf_ctx, ngx_events_module)) {
        iocpcf = ngx_event_get_conf(cf->cycle->conf_ctx, ngx_iocp_module);
    }
    if (iocpcf && iocpcf->acceptex_read) {
        ls->post_accept_buffer_size = cscf->client_header_buffer_size;
    }
    }
#endif

  ...",1736.0,1810.0,1.0,1.0,75.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_listening_t
5548,256759,ngx_http_add_addrs,1,ngx_http_add_addrs,"ngx_int_t ngx_http_add_addrs (ngx_conf_t*,ngx_http_port_t*,ngx_http_conf_addr_t*)",http\ngx_http.c,"static ngx_int_t
ngx_http_add_addrs(ngx_conf_t *cf, ngx_http_port_t *hport,
    ngx_http_conf_addr_t *addr)
{
    ngx_uint_t                 i;
    ngx_http_in_addr_t        *addrs;
    struct sockaddr_in        *sin;
    ngx_http_virtual_names_t  *vn;

    hport->addrs = ngx_pcalloc(cf->pool,
                               hport->naddrs * sizeof(ngx_http_in_addr_t));
    if (hport->addrs == NULL) {
        return NGX_ERROR;
    }

    addrs = hport->addrs;

    for (i = 0; i < hport->naddrs; i++) {

        sin = (struct sockaddr_in *) addr[i].opt.sockaddr;
        addrs[i].addr = sin->sin_addr.s_addr;
        addrs[i].conf.default_server = addr[i].default_server;
#if (NGX_HTTP_SSL)
        addrs[i].conf.ssl = addr[i].opt.ssl;
#endif
#if (NGX_HTTP_V2)
        addrs[i].conf.http2 = addr[i].opt.http2;
#endif
        addrs[i].conf.proxy_protocol = addr[i].opt.proxy_protocol;

        if (addr[i].hash.buckets == NULL
            && (addr[i].wc_head == NULL
                || addr[i].wc...",1813.0,1873.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5549,258626,ngx_http_add_location,1,ngx_http_add_location,"ngx_int_t ngx_http_add_location (ngx_conf_t*,ngx_queue_t**,ngx_http_core_loc_conf_t*)",http\ngx_http.c,"ngx_int_t
ngx_http_add_location(ngx_conf_t *cf, ngx_queue_t **locations,
    ngx_http_core_loc_conf_t *clcf)
{
    ngx_http_location_queue_t  *lq;

    if (*locations == NULL) {
        *locations = ngx_palloc(cf->temp_pool,
                                sizeof(ngx_http_location_queue_t));
        if (*locations == NULL) {
            return NGX_ERROR;
        }

        ngx_queue_init(*locations);
    }

    lq = ngx_palloc(cf->temp_pool, sizeof(ngx_http_location_queue_t));
    if (lq == NULL) {
        return NGX_ERROR;
    }

    if (clcf->exact_match
#if (NGX_PCRE)
        || clcf->regex
#endif
        || clcf->named || clcf->noname)
    {
        lq->exact = clcf;
        lq->inclusive = NULL;

    } else {
        lq->exact = NULL;
        lq->inclusive = clcf;
    }

    lq->name = &clcf->name;
    lq->file_name = cf->conf_file->file.name.data;
    lq->line = cf->conf_file->line;

    ngx_queue_init(&lq->list);

    ngx_queue_insert_tail(*locations, &lq->queue);

    if (ng...",844.0,892.0,1.0,1.0,49.0,42,9,36,8,0,10,6,7,1,3,,0,10,6,3,3,ngx_int_t
5550,259507,ngx_http_add_listen,1,ngx_http_add_listen,"ngx_int_t ngx_http_add_listen (ngx_conf_t*,ngx_http_core_srv_conf_t*,ngx_http_listen_opt_t*)",http\ngx_http.c,"ngx_int_t
ngx_http_add_listen(ngx_conf_t *cf, ngx_http_core_srv_conf_t *cscf,
    ngx_http_listen_opt_t *lsopt)
{
    in_port_t                   p;
    ngx_uint_t                  i;
    struct sockaddr            *sa;
    ngx_http_conf_port_t       *port;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    if (cmcf->ports == NULL) {
        cmcf->ports = ngx_array_create(cf->temp_pool, 2,
                                       sizeof(ngx_http_conf_port_t));
        if (cmcf->ports == NULL) {
            return NGX_ERROR;
        }
    }

    sa = lsopt->sockaddr;
    p = ngx_inet_get_port(sa);

    port = cmcf->ports->elts;
    for (i = 0; i < cmcf->ports->nelts; i++) {

        if (p != port[i].port || sa->sa_family != port[i].family) {
            continue;
        }

        /* a port is already in the port list */

        return ngx_http_add_addresses(cf, cscf, &port[i], lsopt);
    }

    /* add a port to the p...",1177.0,1224.0,1.0,1.0,48.0,40,10,46,12,0,14,7,8,3,5,,0,12,6,3,3,ngx_int_t
5551,260609,ngx_http_cmp_dns_wildcards,1,ngx_http_cmp_dns_wildcards,"ANY ngx_http_cmp_dns_wildcards (void*,void*)",http\ngx_http.c,"ngx_http_cmp_dns_wildcards(const void *one, const void *two)
{
    ngx_hash_key_t  *first, *second;

    first = (ngx_hash_key_t *) one;
    second = (ngx_hash_key_t *) two;

    return ngx_dns_strcmp(first->key.data, second->key.data);
}",1652.0,1660.0,1.0,1.0,9.0,8,4,6,4,0,3,1,1,0,1,,0,2,4,2,2,ANY
5552,261123,ngx_http_types_slot,1,ngx_http_types_slot,"char* ngx_http_types_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http.c,"char *
ngx_http_types_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_array_t     **types;
    ngx_str_t        *value, *default_type;
    ngx_uint_t        i, n, hash;
    ngx_hash_key_t   *type;

    types = (ngx_array_t **) (p + cmd->offset);

    if (*types == (void *) -1) {
        return NGX_CONF_OK;
    }

    default_type = cmd->post;

    if (*types == NULL) {
        *types = ngx_array_create(cf->temp_pool, 1, sizeof(ngx_hash_key_t));
        if (*types == NULL) {
            return NGX_CONF_ERROR;
        }

        if (default_type) {
            type = ngx_array_push(*types);
            if (type == NULL) {
                return NGX_CONF_ERROR;
            }

            type->key = *default_type;
            type->key_hash = ngx_hash_key(default_type->data,
                                          default_type->len);
            type->value = (void *) 4;
        }
    }

    value = cf->args->elts;

    for (i = 1; i < cf->args->n...",1943.0,2017.0,1.0,1.0,75.0,90,13,76,16,0,14,13,20,0,6,,0,13,6,3,3,char*
5553,261392,ngx_http_merge_types,1,ngx_http_merge_types,"char* ngx_http_merge_types (ngx_conf_t*,ngx_array_t**,ngx_hash_t*,ngx_array_t**,ngx_hash_t*,ngx_str_t*)",http\ngx_http.c,"char *
ngx_http_merge_types(ngx_conf_t *cf, ngx_array_t **keys, ngx_hash_t *types_hash,
    ngx_array_t **prev_keys, ngx_hash_t *prev_types_hash,
    ngx_str_t *default_types)
{
    ngx_hash_init_t  hash;

    if (*keys) {

        if (*keys == (void *) -1) {
            return NGX_CONF_OK;
        }

        hash.hash = types_hash;
        hash.key = NULL;
        hash.max_size = 2048;
        hash.bucket_size = 64;
        hash.name = ""test_types_hash"";
        hash.pool = cf->pool;
        hash.temp_pool = NULL;

        if (ngx_hash_init(&hash, (*keys)->elts, (*keys)->nelts) != NGX_OK) {
            return NGX_CONF_ERROR;
        }

        return NGX_CONF_OK;
    }

    if (prev_types_hash->buckets == NULL) {

        if (*prev_keys == NULL) {

            if (ngx_http_set_default_types(cf, prev_keys, default_types)
                != NGX_OK)
            {
                return NGX_CONF_ERROR;
            }

        } else if (*prev_keys == (void *) -1) {
            *keys = *...",2020.0,2082.0,1.0,1.0,63.0,55,9,48,11,0,18,8,14,4,3,,0,18,12,6,6,char*
5554,261576,ngx_http_set_default_types,1,ngx_http_set_default_types,"ngx_int_t ngx_http_set_default_types (ngx_conf_t*,ngx_array_t**,ngx_str_t*)",http\ngx_http.c,"ngx_int_t
ngx_http_set_default_types(ngx_conf_t *cf, ngx_array_t **types,
    ngx_str_t *default_type)
{
    ngx_hash_key_t  *type;

    *types = ngx_array_create(cf->temp_pool, 1, sizeof(ngx_hash_key_t));
    if (*types == NULL) {
        return NGX_ERROR;
    }

    while (default_type->len) {

        type = ngx_array_push(*types);
        if (type == NULL) {
            return NGX_ERROR;
        }

        type->key = *default_type;
        type->key_hash = ngx_hash_key(default_type->data,
                                      default_type->len);
        type->value = (void *) 4;

        default_type++;
    }

    return NGX_OK;
}",2085.0,2112.0,1.0,1.0,28.0,21,7,20,8,1,9,4,5,1,3,,0,9,6,3,3,ngx_int_t
5555,261692,ngx_http_header_handler_pt,1,ngx_http_header_handler_pt,"ngx_int_t ngx_http_header_handler_pt (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http.h,"typedef ngx_int_t (*ngx_http_header_handler_pt)(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset);",24.0,25.0,19.0,42.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5556,261699,ngx_http_log_handler_pt,1,ngx_http_log_handler_pt,"u_char* ngx_http_log_handler_pt (ngx_http_request_t*,ngx_http_request_t*,u_char*,size_t)",http\ngx_http.h,"typedef u_char *(*ngx_http_log_handler_pt)(ngx_http_request_t *r,
    ngx_http_request_t *sr, u_char *buf, size_t len);",26.0,27.0,16.0,52.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,u_char*
5557,261736,ngx_http_init_connection,1,ngx_http_init_connection,void ngx_http_init_connection (ngx_connection_t*),http\ngx_http_request.c,"void
ngx_http_init_connection(ngx_connection_t *c)
{
    ngx_uint_t                 i;
    ngx_event_t               *rev;
    struct sockaddr_in        *sin;
    ngx_http_port_t           *port;
    ngx_http_in_addr_t        *addr;
    ngx_http_log_ctx_t        *ctx;
    ngx_http_connection_t     *hc;
    ngx_http_core_srv_conf_t  *cscf;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6       *sin6;
    ngx_http_in6_addr_t       *addr6;
#endif

    hc = ngx_pcalloc(c->pool, sizeof(ngx_http_connection_t));
    if (hc == NULL) {
        ngx_http_close_connection(c);
        return;
    }

    c->data = hc;

    /* find the server configuration for the address:port */

    port = c->listening->servers;

    if (port->naddrs > 1) {

        /*
         * there are several addresses on this port and one of them
         * is an ""*:port"" wildcard so getsockname() in ngx_http_server_addr()
         * is required to determine a server address
         */

        if (ngx_connection_local_sockad...",206.0,374.0,1.0,1.0,169.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5558,261741,ngx_http_close_connection,1,ngx_http_close_connection,void ngx_http_close_connection (ngx_connection_t*),http\ngx_http_request.c,"void
ngx_http_close_connection(ngx_connection_t *c)
{
    ngx_pool_t  *pool;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""close http connection: %d"", c->fd);

#if (NGX_HTTP_SSL)

    if (c->ssl) {
        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
            c->ssl->handler = ngx_http_close_connection;
            return;
        }
    }

#endif

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
#endif

    c->destroyed = 1;

    pool = c->pool;

    ngx_close_connection(c);

    ngx_destroy_pool(pool);
}",3762.0,3792.0,1.0,1.0,31.0,0,0,0,0,7,0,1,1,0,0,,0,0,2,1,1,void
5559,261746,ngx_http_parse_request_line,1,ngx_http_parse_request_line,"ngx_int_t ngx_http_parse_request_line (ngx_http_request_t*,ngx_buf_t*)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_request_line(ngx_http_request_t *r, ngx_buf_t *b)
{
    u_char  c, ch, *p, *m;
    enum {
        sw_start = 0,
        sw_method,
        sw_spaces_before_uri,
        sw_schema,
        sw_schema_slash,
        sw_schema_slash_slash,
        sw_host_start,
        sw_host,
        sw_host_end,
        sw_host_ip_literal,
        sw_port,
        sw_after_slash_in_uri,
        sw_check_uri,
        sw_uri,
        sw_http_09,
        sw_http_H,
        sw_http_HT,
        sw_http_HTT,
        sw_http_HTTP,
        sw_first_major_digit,
        sw_major_digit,
        sw_first_minor_digit,
        sw_minor_digit,
        sw_spaces_after_digit,
        sw_almost_done
    } state;

    state = r->state;

    for (p = b->pos; p < b->last; p++) {
        ch = *p;

        switch (state) {

        /* HTTP methods: GET, HEAD, POST */
        case sw_start:
            r->request_start = p;

            if (ch == CR || ch == LF) {
                break;
          ...",103.0,815.0,1.0,24.0,713.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5560,261752,ngx_http_parse_uri,1,ngx_http_parse_uri,ngx_int_t ngx_http_parse_uri (ngx_http_request_t*),http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_uri(ngx_http_request_t *r)
{
    u_char  *p, ch;
    enum {
        sw_start = 0,
        sw_after_slash_in_uri,
        sw_check_uri,
        sw_uri
    } state;

    state = sw_start;

    for (p = r->uri_start; p != r->uri_end; p++) {

        ch = *p;

        switch (state) {

        case sw_start:

            if (ch != '/') {
                return NGX_ERROR;
            }

            state = sw_after_slash_in_uri;
            break;

        /* check ""/."", ""//"", ""%"", and ""\"" (Win32) in URI */
        case sw_after_slash_in_uri:

            if (usual[ch >> 5] & (1U << (ch & 0x1f))) {
                state = sw_check_uri;
                break;
            }

            switch (ch) {
            case '.':
                r->complex_uri = 1;
                state = sw_uri;
                break;
            case '%':
                r->quoted_uri = 1;
                state = sw_uri;
                break;
            case '/':
                r->com...",1096.0,1244.0,1.0,1.0,149.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5561,261757,ngx_http_parse_complex_uri,1,ngx_http_parse_complex_uri,"ngx_int_t ngx_http_parse_complex_uri (ngx_http_request_t*,ngx_uint_t)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_complex_uri(ngx_http_request_t *r, ngx_uint_t merge_slashes)
{
    u_char  c, ch, decoded, *p, *u;
    enum {
        sw_usual = 0,
        sw_slash,
        sw_dot,
        sw_dot_dot,
        sw_quoted,
        sw_quoted_second
    } state, quoted_state;

#if (NGX_SUPPRESS_WARN)
    decoded = '\0';
    quoted_state = sw_usual;
#endif

    state = sw_usual;
    p = r->uri_start;
    u = r->uri.data;
    r->uri_ext = NULL;
    r->args_start = NULL;

    if (r->empty_path_in_uri) {
        *u++ = '/';
    }

    ch = *p++;

    while (p <= r->uri_end) {

        /*
         * we use ""ch = *p++"" inside the cycle, but this operation is safe,
         * because after the URI there is always at least one character:
         * the line feed
         */

        ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""s:%d in:'%Xd:%c'"", state, ch, ch);

        switch (state) {

        case sw_usual:

            if (usual[ch >> 5] & (1U <...",1247.0,1620.0,1.0,1.0,374.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5562,261763,ngx_http_parse_status_line,1,ngx_http_parse_status_line,"ngx_int_t ngx_http_parse_status_line (ngx_http_request_t*,ngx_buf_t*,ngx_http_status_t*)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_status_line(ngx_http_request_t *r, ngx_buf_t *b,
    ngx_http_status_t *status)
{
    u_char   ch;
    u_char  *p;
    enum {
        sw_start = 0,
        sw_H,
        sw_HT,
        sw_HTT,
        sw_HTTP,
        sw_first_major_digit,
        sw_major_digit,
        sw_first_minor_digit,
        sw_minor_digit,
        sw_status,
        sw_space_after_status,
        sw_status_text,
        sw_almost_done
    } state;

    state = r->state;

    for (p = b->pos; p < b->last; p++) {
        ch = *p;

        switch (state) {

        /* ""HTTP/"" */
        case sw_start:
            switch (ch) {
            case 'H':
                state = sw_H;
                break;
            default:
                return NGX_ERROR;
            }
            break;

        case sw_H:
            switch (ch) {
            case 'T':
                state = sw_HT;
                break;
            default:
                return NGX_ERROR;
            }
          ...",1623.0,1838.0,1.0,1.0,216.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5563,261770,ngx_http_parse_unsafe_uri,1,ngx_http_parse_unsafe_uri,"ngx_int_t ngx_http_parse_unsafe_uri (ngx_http_request_t*,ngx_str_t*,ngx_str_t*,ngx_uint_t*)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_unsafe_uri(ngx_http_request_t *r, ngx_str_t *uri,
    ngx_str_t *args, ngx_uint_t *flags)
{
    u_char      ch, *p, *src, *dst;
    size_t      len;
    ngx_uint_t  quoted;

    len = uri->len;
    p = uri->data;
    quoted = 0;

    if (len == 0 || p[0] == '?') {
        goto unsafe;
    }

    if (p[0] == '.' && len > 1 && p[1] == '.'
        && (len == 2 || ngx_path_separator(p[2])))
    {
        goto unsafe;
    }

    for ( /* void */ ; len; len--) {

        ch = *p++;

        if (ch == '%') {
            quoted = 1;
            continue;
        }

        if (usual[ch >> 5] & (1U << (ch & 0x1f))) {
            continue;
        }

        if (ch == '?') {
            args->len = len - 1;
            args->data = p;
            uri->len -= len;

            break;
        }

        if (ch == '\0') {
            goto unsafe;
        }

        if (ngx_path_separator(ch) && len > 2) {

            /* detect ""/../"" and ""/.."" */

            if (p[0] =...",1841.0,1960.0,1.0,1.0,120.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5564,261778,ngx_http_parse_header_line,1,ngx_http_parse_header_line,"ngx_int_t ngx_http_parse_header_line (ngx_http_request_t*,ngx_buf_t*,ngx_uint_t)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_header_line(ngx_http_request_t *r, ngx_buf_t *b,
    ngx_uint_t allow_underscores)
{
    u_char      c, ch, *p;
    ngx_uint_t  hash, i;
    enum {
        sw_start = 0,
        sw_name,
        sw_space_before_value,
        sw_value,
        sw_space_after_value,
        sw_ignore_line,
        sw_almost_done,
        sw_header_almost_done
    } state;

    /* the last '\0' is not needed because string is zero terminated */

    static u_char  lowcase[] =
        ""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""
        ""\0\0\0\0\0\0\0\0\0\0\0\0\0-\0\0"" ""0123456789\0\0\0\0\0\0""
        ""\0abcdefghijklmnopqrstuvwxyz\0\0\0\0\0""
        ""\0abcdefghijklmnopqrstuvwxyz\0\0\0\0\0""
        ""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""
        ""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""
        ""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0""
        ""\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0...",818.0,1093.0,1.0,1.0,276.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5565,261785,ngx_http_parse_multi_header_lines,1,ngx_http_parse_multi_header_lines,"ngx_int_t ngx_http_parse_multi_header_lines (ngx_array_t*,ngx_str_t*,ngx_str_t*)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_multi_header_lines(ngx_array_t *headers, ngx_str_t *name,
    ngx_str_t *value)
{
    ngx_uint_t         i;
    u_char            *start, *last, *end, ch;
    ngx_table_elt_t  **h;

    h = headers->elts;

    for (i = 0; i < headers->nelts; i++) {

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, headers->pool->log, 0,
                       ""parse header: \""%V: %V\"""", &h[i]->key, &h[i]->value);

        if (name->len > h[i]->value.len) {
            continue;
        }

        start = h[i]->value.data;
        end = h[i]->value.data + h[i]->value.len;

        while (start < end) {

            if (ngx_strncasecmp(start, name->data, name->len) != 0) {
                goto skip;
            }

            for (start += name->len; start < end && *start == ' '; start++) {
                /* void */
            }

            if (value == NULL) {
                if (start == end || *start == ',') {
                    return i;
                }

                go...",1963.0,2033.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5566,261792,ngx_http_parse_set_cookie_lines,1,ngx_http_parse_set_cookie_lines,"ngx_int_t ngx_http_parse_set_cookie_lines (ngx_array_t*,ngx_str_t*,ngx_str_t*)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_set_cookie_lines(ngx_array_t *headers, ngx_str_t *name,
    ngx_str_t *value)
{
    ngx_uint_t         i;
    u_char            *start, *last, *end;
    ngx_table_elt_t  **h;

    h = headers->elts;

    for (i = 0; i < headers->nelts; i++) {

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, headers->pool->log, 0,
                       ""parse header: \""%V: %V\"""", &h[i]->key, &h[i]->value);

        if (name->len >= h[i]->value.len) {
            continue;
        }

        start = h[i]->value.data;
        end = h[i]->value.data + h[i]->value.len;

        if (ngx_strncasecmp(start, name->data, name->len) != 0) {
            continue;
        }

        for (start += name->len; start < end && *start == ' '; start++) {
            /* void */
        }

        if (start == end || *start++ != '=') {
            /* the invalid header value */
            continue;
        }

        while (start < end && *start == ' ') { start++; }

        for (last = start; last ...",2036.0,2084.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5567,261799,ngx_http_arg,1,ngx_http_arg,"ngx_int_t ngx_http_arg (ngx_http_request_t*,u_char*,size_t,ngx_str_t*)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_arg(ngx_http_request_t *r, u_char *name, size_t len, ngx_str_t *value)
{
    u_char  *p, *last;

    if (r->args.len == 0) {
        return NGX_DECLINED;
    }

    p = r->args.data;
    last = p + r->args.len;

    for ( /* void */ ; p < last; p++) {

        /* we need '=' after name, so drop one char from last */

        p = ngx_strlcasestrn(p, last - 1, name, len - 1);

        if (p == NULL) {
            return NGX_DECLINED;
        }

        if ((p == r->args.data || *(p - 1) == '&') && *(p + len) == '=') {

            value->data = p + len + 1;

            p = ngx_strlchr(p, last, '&');

            if (p == NULL) {
                p = r->args.data + r->args.len;
            }

            value->len = p - value->data;

            return NGX_OK;
        }
    }

    return NGX_DECLINED;
}",2087.0,2126.0,1.0,1.0,40.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5568,261807,ngx_http_split_args,1,ngx_http_split_args,"void ngx_http_split_args (ngx_http_request_t*,ngx_str_t*,ngx_str_t*)",http\ngx_http_parse.c,"void
ngx_http_split_args(ngx_http_request_t *r, ngx_str_t *uri, ngx_str_t *args)
{
    u_char  *p, *last;

    last = uri->data + uri->len;

    p = ngx_strlchr(uri->data, last, '?');

    if (p) {
        uri->len = p - uri->data;
        p++;
        args->len = last - p;
        args->data = p;

    } else {
        args->len = 0;
    }
}",2129.0,2147.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5569,261814,ngx_http_parse_chunked,1,ngx_http_parse_chunked,"ngx_int_t ngx_http_parse_chunked (ngx_http_request_t*,ngx_buf_t*,ngx_http_chunked_t*)",http\ngx_http_parse.c,"ngx_int_t
ngx_http_parse_chunked(ngx_http_request_t *r, ngx_buf_t *b,
    ngx_http_chunked_t *ctx)
{
    u_char     *pos, ch, c;
    ngx_int_t   rc;
    enum {
        sw_chunk_start = 0,
        sw_chunk_size,
        sw_chunk_extension,
        sw_chunk_extension_almost_done,
        sw_chunk_data,
        sw_after_data,
        sw_after_data_almost_done,
        sw_last_chunk_extension,
        sw_last_chunk_extension_almost_done,
        sw_trailer,
        sw_trailer_almost_done,
        sw_trailer_header,
        sw_trailer_header_almost_done
    } state;

    state = ctx->state;

    if (state == sw_chunk_data && ctx->size == 0) {
        state = sw_after_data;
    }

    rc = NGX_AGAIN;

    for (pos = b->pos; pos < b->last; pos++) {

        ch = *pos;

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http chunked byte: %02Xd s:%d"", ch, state);

        switch (state) {

        case sw_chunk_start:
            if (ch >= '0' && ch <=...",2150.0,2415.0,1.0,1.0,266.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5570,261821,ngx_http_create_request,1,ngx_http_create_request,ngx_http_request_t* ngx_http_create_request (ngx_connection_t*),http\ngx_http_request.c,"ngx_http_request_t *
ngx_http_create_request(ngx_connection_t *c)
{
    ngx_http_request_t        *r;
    ngx_http_log_ctx_t        *ctx;
    ngx_http_core_loc_conf_t  *clcf;

    r = ngx_http_alloc_request(c);
    if (r == NULL) {
        return NULL;
    }

    c->requests++;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    ngx_set_connection_log(c, clcf->error_log);

    ctx = c->log->data;
    ctx->request = r;
    ctx->current_request = r;

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
    r->stat_reading = 1;
    (void) ngx_atomic_fetch_add(ngx_stat_requests, 1);
#endif

    return r;
}",507.0,536.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_http_request_t
5571,261826,ngx_http_process_request_uri,1,ngx_http_process_request_uri,ngx_int_t ngx_http_process_request_uri (ngx_http_request_t*),http\ngx_http_request.c,"ngx_int_t
ngx_http_process_request_uri(ngx_http_request_t *r)
{
    ngx_http_core_srv_conf_t  *cscf;

    if (r->args_start) {
        r->uri.len = r->args_start - 1 - r->uri_start;
    } else {
        r->uri.len = r->uri_end - r->uri_start;
    }

    if (r->complex_uri || r->quoted_uri || r->empty_path_in_uri) {

        if (r->empty_path_in_uri) {
            r->uri.len++;
        }

        r->uri.data = ngx_pnalloc(r->pool, r->uri.len);
        if (r->uri.data == NULL) {
            ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
            return NGX_ERROR;
        }

        cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

        if (ngx_http_parse_complex_uri(r, cscf->merge_slashes) != NGX_OK) {
            r->uri.len = 0;

            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          ""client sent invalid request"");
            ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
            return NGX_ERROR;
        }

 ...",1226.0,1344.0,1.0,1.0,119.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5572,261831,ngx_http_process_request_header,1,ngx_http_process_request_header,ngx_int_t ngx_http_process_request_header (ngx_http_request_t*),http\ngx_http_request.c,"ngx_int_t
ngx_http_process_request_header(ngx_http_request_t *r)
{
    if (r->headers_in.server.len == 0
        && ngx_http_set_virtual_server(r, &r->headers_in.server)
           == NGX_ERROR)
    {
        return NGX_ERROR;
    }

    if (r->headers_in.host == NULL && r->http_version > NGX_HTTP_VERSION_10) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                   ""client sent HTTP/1.1 request without \""Host\"" header"");
        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        return NGX_ERROR;
    }

    if (r->headers_in.content_length) {
        r->headers_in.content_length_n =
                            ngx_atoof(r->headers_in.content_length->value.data,
                                      r->headers_in.content_length->value.len);

        if (r->headers_in.content_length_n == NGX_ERROR) {
            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          ""client sent invalid \""Content-Length\"" header"");
            ngx_...",1955.0,2033.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5573,261836,ngx_http_process_request,1,ngx_http_process_request,void ngx_http_process_request (ngx_http_request_t*),http\ngx_http_request.c,"void
ngx_http_process_request(ngx_http_request_t *r)
{
    ngx_connection_t  *c;

    c = r->connection;

#if (NGX_HTTP_SSL)

    if (r->http_connection->ssl) {
        long                      rc;
        X509                     *cert;
        const char               *s;
        ngx_http_ssl_srv_conf_t  *sscf;

        if (c->ssl == NULL) {
            ngx_log_error(NGX_LOG_INFO, c->log, 0,
                          ""client sent plain HTTP request to HTTPS port"");
            ngx_http_finalize_request(r, NGX_HTTP_TO_HTTPS);
            return;
        }

        sscf = ngx_http_get_module_srv_conf(r, ngx_http_ssl_module);

        if (sscf->verify) {
            rc = SSL_get_verify_result(c->ssl->connection);

            if (rc != X509_V_OK
                && (sscf->verify != 3 || !ngx_ssl_verify_error_optional(rc)))
            {
                ngx_log_error(NGX_LOG_INFO, c->log, 0,
                              ""client SSL certificate verify error: (%l:%s)"",
                ...",2036.0,2125.0,1.0,1.0,90.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5574,261841,ngx_http_update_location_config,1,ngx_http_update_location_config,void ngx_http_update_location_config (ngx_http_request_t*),http\ngx_http_core_module.c,"void
ngx_http_update_location_config(ngx_http_request_t *r)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (r->method & clcf->limit_except) {
        r->loc_conf = clcf->limit_except_loc_conf;
        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
    }

    if (r == r->main) {
        ngx_set_connection_log(r->connection, clcf->error_log);
    }

    if ((ngx_io.flags & NGX_IO_SENDFILE) && clcf->sendfile) {
        r->connection->sendfile = 1;

    } else {
        r->connection->sendfile = 0;
    }

    if (clcf->client_body_in_file_only) {
        r->request_body_in_file_only = 1;
        r->request_body_in_persistent_file = 1;
        r->request_body_in_clean_file =
            clcf->client_body_in_file_only == NGX_HTTP_REQUEST_BODY_FILE_CLEAN;
        r->request_body_file_log_level = NGX_LOG_NOTICE;

    } else {
        r->request_body_file_log_level = NGX_LOG_WARN;
    }

    r->request_body_in_...",1302.0,1382.0,1.0,46.0,81.0,0,0,0,0,5,0,1,1,0,0,,0,0,2,1,1,void
5575,261846,ngx_http_handler,1,ngx_http_handler,void ngx_http_handler (ngx_http_request_t*),http\ngx_http_core_module.c,"void
ngx_http_handler(ngx_http_request_t *r)
{
    ngx_http_core_main_conf_t  *cmcf;

    r->connection->log->action = NULL;

    if (!r->internal) {
        switch (r->headers_in.connection_type) {
        case 0:
            r->keepalive = (r->http_version > NGX_HTTP_VERSION_10);
            break;

        case NGX_HTTP_CONNECTION_CLOSE:
            r->keepalive = 0;
            break;

        case NGX_HTTP_CONNECTION_KEEP_ALIVE:
            r->keepalive = 1;
            break;
        }

        r->lingering_close = (r->headers_in.content_length_n > 0
                              || r->headers_in.chunked);
        r->phase_handler = 0;

    } else {
        cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
        r->phase_handler = cmcf->phase_engine.server_rewrite_index;
    }

    r->valid_location = 1;
#if (NGX_HTTP_GZIP)
    r->gzip_tested = 0;
    r->gzip_ok = 0;
    r->gzip_vary = 0;
#endif

    r->write_event_handler = ngx_http_core_run_phases;
    ngx_htt...",819.0,859.0,1.0,1.0,41.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
5576,261851,ngx_http_run_posted_requests,1,ngx_http_run_posted_requests,void ngx_http_run_posted_requests (ngx_connection_t*),http\ngx_http_request.c,"void
ngx_http_run_posted_requests(ngx_connection_t *c)
{
    ngx_http_request_t         *r;
    ngx_http_posted_request_t  *pr;

    for ( ;; ) {

        if (c->destroyed) {
            return;
        }

        r = c->data;
        pr = r->main->posted_requests;

        if (pr == NULL) {
            return;
        }

        r->main->posted_requests = pr->next;

        r = pr->request;

        ngx_http_set_log_request(c->log, r);

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                       ""http posted request: \""%V?%V\"""", &r->uri, &r->args);

        r->write_event_handler(r);
    }
}",2426.0,2456.0,1.0,1.0,31.0,0,0,0,0,3,0,1,1,0,0,,0,0,2,1,1,void
5577,261856,ngx_http_post_request,1,ngx_http_post_request,"ngx_int_t ngx_http_post_request (ngx_http_request_t*,ngx_http_posted_request_t*)",http\ngx_http_request.c,"ngx_int_t
ngx_http_post_request(ngx_http_request_t *r, ngx_http_posted_request_t *pr)
{
    ngx_http_posted_request_t  **p;

    if (pr == NULL) {
        pr = ngx_palloc(r->pool, sizeof(ngx_http_posted_request_t));
        if (pr == NULL) {
            return NGX_ERROR;
        }
    }

    pr->request = r;
    pr->next = NULL;

    for (p = &r->main->posted_requests; *p; p = &(*p)->next) { /* void */ }

    *p = pr;

    return NGX_OK;
}",2459.0,2479.0,1.0,1.0,21.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5578,261862,ngx_http_finalize_request,1,ngx_http_finalize_request,"void ngx_http_finalize_request (ngx_http_request_t*,ngx_int_t)",http\ngx_http_request.c,"void
ngx_http_finalize_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_connection_t          *c;
    ngx_http_request_t        *pr;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;

    ngx_log_debug5(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http finalize request: %i, \""%V?%V\"" a:%d, c:%d"",
                   rc, &r->uri, &r->args, r == c->data, r->main->count);

    if (rc == NGX_DONE) {
        ngx_http_finalize_connection(r);
        return;
    }

    if (rc == NGX_OK && r->filter_finalize) {
        c->error = 1;
    }

    if (rc == NGX_DECLINED) {
        r->content_handler = NULL;
        r->write_event_handler = ngx_http_core_run_phases;
        ngx_http_core_run_phases(r);
        return;
    }

    if (r != r->main && r->post_subrequest) {
        rc = r->post_subrequest->handler(r, r->post_subrequest->data, rc);
    }

    if (rc == NGX_ERROR
        || rc == NGX_HTTP_REQUEST_TIME_OUT
        || rc == NGX_HTTP_CLIENT_CLOSED_REQUEST
        ||...",2482.0,2666.0,1.0,1.0,185.0,0,0,0,0,26,0,1,1,0,0,,0,0,4,2,2,void
5579,261868,ngx_http_free_request,1,ngx_http_free_request,"void ngx_http_free_request (ngx_http_request_t*,ngx_int_t)",http\ngx_http_request.c,"void
ngx_http_free_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_log_t                 *log;
    ngx_pool_t                *pool;
    struct linger              linger;
    ngx_http_cleanup_t        *cln;
    ngx_http_log_ctx_t        *ctx;
    ngx_http_core_loc_conf_t  *clcf;

    log = r->connection->log;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, ""http close request"");

    if (r->pool == NULL) {
        ngx_log_error(NGX_LOG_ALERT, log, 0, ""http request already closed"");
        return;
    }

    cln = r->cleanup;
    r->cleanup = NULL;

    while (cln) {
        if (cln->handler) {
            cln->handler(cln->data);
        }

        cln = cln->next;
    }

#if (NGX_STAT_STUB)

    if (r->stat_reading) {
        (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
    }

    if (r->stat_writing) {
        (void) ngx_atomic_fetch_add(ngx_stat_writing, -1);
    }

#endif

    if (rc > 0 && (r->headers_out.status == 0 || r->connection->sent == 0)) {
        r->head...",3654.0,3741.0,1.0,1.0,88.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,void
5580,261874,ngx_http_empty_handler,1,ngx_http_empty_handler,void ngx_http_empty_handler (ngx_event_t*),http\ngx_http_request.c,"void
ngx_http_empty_handler(ngx_event_t *wev)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, wev->log, 0, ""http empty handler"");

    return;
}",3532.0,3538.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5581,261879,ngx_http_request_empty_handler,1,ngx_http_request_empty_handler,void ngx_http_request_empty_handler (ngx_http_request_t*),http\ngx_http_request.c,"void
ngx_http_request_empty_handler(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http request empty handler"");

    return;
}",3541.0,3548.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5582,261884,ngx_http_send_special,1,ngx_http_send_special,"ngx_int_t ngx_http_send_special (ngx_http_request_t*,ngx_uint_t)",http\ngx_http_request.c,"ngx_int_t
ngx_http_send_special(ngx_http_request_t *r, ngx_uint_t flags)
{
    ngx_buf_t    *b;
    ngx_chain_t   out;

    b = ngx_calloc_buf(r->pool);
    if (b == NULL) {
        return NGX_ERROR;
    }

    if (flags & NGX_HTTP_LAST) {

        if (r == r->main && !r->post_action) {
            b->last_buf = 1;

        } else {
            b->sync = 1;
            b->last_in_chain = 1;
        }
    }

    if (flags & NGX_HTTP_FLUSH) {
        b->flush = 1;
    }

    out.buf = b;
    out.next = NULL;

    return ngx_http_output_filter(r, &out);
}",3551.0,3581.0,1.0,1.0,31.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5583,261890,ngx_http_read_client_request_body,1,ngx_http_read_client_request_body,"ngx_int_t ngx_http_read_client_request_body (ngx_http_request_t*,ngx_http_client_body_handler_pt)",http\ngx_http_request_body.c,"ngx_int_t
ngx_http_read_client_request_body(ngx_http_request_t *r,
    ngx_http_client_body_handler_pt post_handler)
{
    size_t                     preread;
    ssize_t                    size;
    ngx_int_t                  rc;
    ngx_buf_t                 *b;
    ngx_chain_t                out;
    ngx_http_request_body_t   *rb;
    ngx_http_core_loc_conf_t  *clcf;

    r->main->count++;

    if (r != r->main || r->request_body || r->discard_body) {
        r->request_body_no_buffering = 0;
        post_handler(r);
        return NGX_OK;
    }

    if (ngx_http_test_expect(r) != NGX_OK) {
        rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
        goto done;
    }

    rb = ngx_pcalloc(r->pool, sizeof(ngx_http_request_body_t));
    if (rb == NULL) {
        rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
        goto done;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     rb->bufs = NULL;
     *     rb->buf = NULL;
     *     rb->free = NULL;
     *     rb->busy = NULL;
     *     rb-...",31.0,212.0,1.0,1.0,182.0,0,0,0,0,5,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5584,261896,ngx_http_read_unbuffered_request_body,1,ngx_http_read_unbuffered_request_body,ngx_int_t ngx_http_read_unbuffered_request_body (ngx_http_request_t*),http\ngx_http_request_body.c,"ngx_int_t
ngx_http_read_unbuffered_request_body(ngx_http_request_t *r)
{
    ngx_int_t  rc;

#if (NGX_HTTP_V2)
    if (r->stream) {
        rc = ngx_http_v2_read_unbuffered_request_body(r);

        if (rc == NGX_OK) {
            r->reading_body = 0;
        }

        return rc;
    }
#endif

    if (r->connection->read->timedout) {
        r->connection->timedout = 1;
        return NGX_HTTP_REQUEST_TIME_OUT;
    }

    rc = ngx_http_do_read_client_request_body(r);

    if (rc == NGX_OK) {
        r->reading_body = 0;
    }

    return rc;
}",215.0,244.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5585,261901,ngx_http_send_header,1,ngx_http_send_header,ngx_int_t ngx_http_send_header (ngx_http_request_t*),http\ngx_http_core_module.c,"ngx_int_t
ngx_http_send_header(ngx_http_request_t *r)
{
    if (r->post_action) {
        return NGX_OK;
    }

    if (r->header_sent) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                      ""header already sent"");
        return NGX_ERROR;
    }

    if (r->err_status) {
        r->headers_out.status = r->err_status;
        r->headers_out.status_line.len = 0;
    }

    return ngx_http_top_header_filter(r);
}",1830.0,1849.0,1.0,1.0,20.0,0,0,0,0,4,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5586,261906,ngx_http_special_response_handler,1,ngx_http_special_response_handler,"ngx_int_t ngx_http_special_response_handler (ngx_http_request_t*,ngx_int_t)",http\ngx_http_special_response.c,"ngx_int_t
ngx_http_special_response_handler(ngx_http_request_t *r, ngx_int_t error)
{
    ngx_uint_t                 i, err;
    ngx_http_err_page_t       *err_page;
    ngx_http_core_loc_conf_t  *clcf;

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http special response: %i, \""%V?%V\"""",
                   error, &r->uri, &r->args);

    r->err_status = error;

    if (r->keepalive) {
        switch (error) {
            case NGX_HTTP_BAD_REQUEST:
            case NGX_HTTP_REQUEST_ENTITY_TOO_LARGE:
            case NGX_HTTP_REQUEST_URI_TOO_LARGE:
            case NGX_HTTP_TO_HTTPS:
            case NGX_HTTPS_CERT_ERROR:
            case NGX_HTTPS_NO_CERT:
            case NGX_HTTP_INTERNAL_SERVER_ERROR:
            case NGX_HTTP_NOT_IMPLEMENTED:
                r->keepalive = 0;
        }
    }

    if (r->lingering_close) {
        switch (error) {
            case NGX_HTTP_BAD_REQUEST:
            case NGX_HTTP_TO_HTTPS:
            case NGX_HTT...",415.0,524.0,1.0,26.0,110.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5587,261912,ngx_http_filter_finalize_request,1,ngx_http_filter_finalize_request,"ngx_int_t ngx_http_filter_finalize_request (ngx_http_request_t*,ngx_module_t*,ngx_int_t)",http\ngx_http_special_response.c,"ngx_int_t
ngx_http_filter_finalize_request(ngx_http_request_t *r, ngx_module_t *m,
    ngx_int_t error)
{
    void       *ctx;
    ngx_int_t   rc;

    ngx_http_clean_header(r);

    ctx = NULL;

    if (m) {
        ctx = r->ctx[m->ctx_index];
    }

    /* clear the modules contexts */
    ngx_memzero(r->ctx, sizeof(void *) * ngx_http_max_module);

    if (m) {
        r->ctx[m->ctx_index] = ctx;
    }

    r->filter_finalize = 1;

    rc = ngx_http_special_response_handler(r, error);

    /* NGX_ERROR resets any pending data */

    switch (rc) {

    case NGX_OK:
    case NGX_DONE:
        return NGX_ERROR;

    default:
        return rc;
    }
}",527.0,564.0,1.0,1.0,38.0,0,0,0,0,5,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5588,261919,ngx_http_clean_header,1,ngx_http_clean_header,void ngx_http_clean_header (ngx_http_request_t*),http\ngx_http_special_response.c,"void
ngx_http_clean_header(ngx_http_request_t *r)
{
    ngx_memzero(&r->headers_out.status,
                sizeof(ngx_http_headers_out_t)
                    - offsetof(ngx_http_headers_out_t, status));

    r->headers_out.headers.part.nelts = 0;
    r->headers_out.headers.part.next = NULL;
    r->headers_out.headers.last = &r->headers_out.headers.part;

    r->headers_out.trailers.part.nelts = 0;
    r->headers_out.trailers.part.next = NULL;
    r->headers_out.trailers.last = &r->headers_out.trailers.part;

    r->headers_out.content_length_n = -1;
    r->headers_out.last_modified_time = -1;
}",567.0,584.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5589,261924,ngx_http_discard_request_body,1,ngx_http_discard_request_body,ngx_int_t ngx_http_discard_request_body (ngx_http_request_t*),http\ngx_http_request_body.c,"ngx_int_t
ngx_http_discard_request_body(ngx_http_request_t *r)
{
    ssize_t       size;
    ngx_int_t     rc;
    ngx_event_t  *rev;

    if (r != r->main || r->discard_body || r->request_body) {
        return NGX_OK;
    }

#if (NGX_HTTP_V2)
    if (r->stream) {
        r->stream->skip_data = 1;
        return NGX_OK;
    }
#endif

    if (ngx_http_test_expect(r) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    rev = r->connection->read;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, rev->log, 0, ""http set discard body"");

    if (rev->timer_set) {
        ngx_del_timer(rev);
    }

    if (r->headers_in.content_length_n <= 0 && !r->headers_in.chunked) {
        return NGX_OK;
    }

    size = r->header_in->last - r->header_in->pos;

    if (size || r->headers_in.chunked) {
        rc = ngx_http_discard_request_body_filter(r, r->header_in);

        if (rc != NGX_OK) {
            return rc;
        }

        if (r->headers_in.content_length_n == 0) {
           ...",569.0,640.0,1.0,1.0,72.0,0,0,0,0,5,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5590,261929,ngx_http_discarded_request_body_handler,1,ngx_http_discarded_request_body_handler,void ngx_http_discarded_request_body_handler (ngx_http_request_t*),http\ngx_http_request_body.c,"void
ngx_http_discarded_request_body_handler(ngx_http_request_t *r)
{
    ngx_int_t                  rc;
    ngx_msec_t                 timer;
    ngx_event_t               *rev;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;
    rev = c->read;

    if (rev->timedout) {
        c->timedout = 1;
        c->error = 1;
        ngx_http_finalize_request(r, NGX_ERROR);
        return;
    }

    if (r->lingering_time) {
        timer = (ngx_msec_t) r->lingering_time - (ngx_msec_t) ngx_time();

        if ((ngx_msec_int_t) timer <= 0) {
            r->discard_body = 0;
            r->lingering_close = 0;
            ngx_http_finalize_request(r, NGX_ERROR);
            return;
        }

    } else {
        timer = 0;
    }

    rc = ngx_http_read_discarded_request_body(r);

    if (rc == NGX_OK) {
        r->discard_body = 0;
        r->lingering_close = 0;
        r->lingering_time = 0;
        ngx_http_finalize_request(r, NGX_DONE);
     ...",643.0,712.0,1.0,1.0,70.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5591,261934,ngx_http_block_reading,1,ngx_http_block_reading,void ngx_http_block_reading (ngx_http_request_t*),http\ngx_http_request.c,"void
ngx_http_block_reading(ngx_http_request_t *r)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http reading blocked"");

    /* aio does not call this handler */

    if ((ngx_event_flags & NGX_USE_LEVEL_EVENT)
        && r->connection->read->active)
    {
        if (ngx_del_event(r->connection->read, NGX_READ_EVENT, 0) != NGX_OK) {
            ngx_http_close_request(r, 0);
        }
    }
}",2912.0,2927.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5592,261939,ngx_http_test_reading,1,ngx_http_test_reading,void ngx_http_test_reading (ngx_http_request_t*),http\ngx_http_request.c,"void
ngx_http_test_reading(ngx_http_request_t *r)
{
    int                n;
    char               buf[1];
    ngx_err_t          err;
    ngx_event_t       *rev;
    ngx_connection_t  *c;

    c = r->connection;
    rev = c->read;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, ""http test reading"");

#if (NGX_HTTP_V2)

    if (r->stream) {
        if (c->error) {
            err = 0;
            goto closed;
        }

        return;
    }

#endif

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {

        if (!rev->pending_eof) {
            return;
        }

        rev->eof = 1;
        c->error = 1;
        err = rev->kq_errno;

        goto closed;
    }

#endif

#if (NGX_HAVE_EPOLLRDHUP)

    if ((ngx_event_flags & NGX_USE_EPOLL_EVENT) && ngx_use_epoll_rdhup) {
        socklen_t  len;

        if (!rev->pending_eof) {
            return;
        }

        rev->eof = 1;
        c->error = 1;

        err = 0;
        len = sizeof(ngx_err_t);

   ...",2930.0,3052.0,1.0,1.0,123.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5593,262143,ngx_http_file_cache_new,1,ngx_http_file_cache_new,ngx_int_t ngx_http_file_cache_new (ngx_http_request_t*),http\ngx_http_file_cache.c,"ngx_int_t
ngx_http_file_cache_new(ngx_http_request_t *r)
{
    ngx_http_cache_t  *c;

    c = ngx_pcalloc(r->pool, sizeof(ngx_http_cache_t));
    if (c == NULL) {
        return NGX_ERROR;
    }

    if (ngx_array_init(&c->keys, r->pool, 4, sizeof(ngx_str_t)) != NGX_OK) {
        return NGX_ERROR;
    }

    r->cache = c;
    c->file.log = r->connection->log;
    c->file.fd = NGX_INVALID_FILE;

    return NGX_OK;
}",175.0,194.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5594,262148,ngx_http_file_cache_create,1,ngx_http_file_cache_create,ngx_int_t ngx_http_file_cache_create (ngx_http_request_t*),http\ngx_http_file_cache.c,"ngx_int_t
ngx_http_file_cache_create(ngx_http_request_t *r)
{
    ngx_http_cache_t       *c;
    ngx_pool_cleanup_t     *cln;
    ngx_http_file_cache_t  *cache;

    c = r->cache;
    cache = c->file_cache;

    cln = ngx_pool_cleanup_add(r->pool, 0);
    if (cln == NULL) {
        return NGX_ERROR;
    }

    cln->handler = ngx_http_file_cache_cleanup;
    cln->data = c;

    if (ngx_http_file_cache_exists(cache, c) == NGX_ERROR) {
        return NGX_ERROR;
    }

    if (ngx_http_file_cache_name(r, cache->path) != NGX_OK) {
        return NGX_ERROR;
    }

    return NGX_OK;
}",197.0,224.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5595,262153,ngx_http_file_cache_create_key,1,ngx_http_file_cache_create_key,void ngx_http_file_cache_create_key (ngx_http_request_t*),http\ngx_http_file_cache.c,"void
ngx_http_file_cache_create_key(ngx_http_request_t *r)
{
    size_t             len;
    ngx_str_t         *key;
    ngx_uint_t         i;
    ngx_md5_t          md5;
    ngx_http_cache_t  *c;

    c = r->cache;

    len = 0;

    ngx_crc32_init(c->crc32);
    ngx_md5_init(&md5);

    key = c->keys.elts;
    for (i = 0; i < c->keys.nelts; i++) {
        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http cache key: \""%V\"""", &key[i]);

        len += key[i].len;

        ngx_crc32_update(&c->crc32, key[i].data, key[i].len);
        ngx_md5_update(&md5, key[i].data, key[i].len);
    }

    c->header_start = sizeof(ngx_http_file_cache_header_t)
                      + sizeof(ngx_http_file_cache_key) + len + 1;

    ngx_crc32_final(c->crc32);
    ngx_md5_final(c->key, &md5);

    ngx_memcpy(c->main, c->key, NGX_HTTP_CACHE_KEY_LEN);
}",227.0,261.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5596,262158,ngx_http_file_cache_open,1,ngx_http_file_cache_open,ngx_int_t ngx_http_file_cache_open (ngx_http_request_t*),http\ngx_http_file_cache.c,"ngx_int_t
ngx_http_file_cache_open(ngx_http_request_t *r)
{
    ngx_int_t                  rc, rv;
    ngx_uint_t                 test;
    ngx_http_cache_t          *c;
    ngx_pool_cleanup_t        *cln;
    ngx_open_file_info_t       of;
    ngx_http_file_cache_t     *cache;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->cache;

    if (c->waiting) {
        return NGX_AGAIN;
    }

    if (c->reading) {
        return ngx_http_file_cache_read(r, c);
    }

    cache = c->file_cache;

    if (c->node == NULL) {
        cln = ngx_pool_cleanup_add(r->pool, 0);
        if (cln == NULL) {
            return NGX_ERROR;
        }

        cln->handler = ngx_http_file_cache_cleanup;
        cln->data = c;
    }

    c->buffer_size = c->body_start;

    rc = ngx_http_file_cache_exists(cache, c);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache exists: %i e:%d"", rc, c->exists);

    if (rc == NGX_ERROR) {
        return rc;
    }

    if...",264.0,401.0,1.0,1.0,138.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5597,262163,ngx_http_file_cache_set_header,1,ngx_http_file_cache_set_header,"ngx_int_t ngx_http_file_cache_set_header (ngx_http_request_t*,u_char*)",http\ngx_http_file_cache.c,"ngx_int_t
ngx_http_file_cache_set_header(ngx_http_request_t *r, u_char *buf)
{
    ngx_http_file_cache_header_t  *h = (ngx_http_file_cache_header_t *) buf;

    u_char            *p;
    ngx_str_t         *key;
    ngx_uint_t         i;
    ngx_http_cache_t  *c;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache set header"");

    c = r->cache;

    ngx_memzero(h, sizeof(ngx_http_file_cache_header_t));

    h->version = NGX_HTTP_CACHE_VERSION;
    h->valid_sec = c->valid_sec;
    h->updating_sec = c->updating_sec;
    h->error_sec = c->error_sec;
    h->last_modified = c->last_modified;
    h->date = c->date;
    h->crc32 = c->crc32;
    h->valid_msec = (u_short) c->valid_msec;
    h->header_start = (u_short) c->header_start;
    h->body_start = (u_short) c->body_start;

    if (c->etag.len <= NGX_HTTP_CACHE_ETAG_LEN) {
        h->etag_len = (u_char) c->etag.len;
        ngx_memcpy(h->etag, c->etag.data, c->etag.len);
    }

    if (c-...",1243.0,1305.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5598,262169,ngx_http_file_cache_update,1,ngx_http_file_cache_update,"void ngx_http_file_cache_update (ngx_http_request_t*,ngx_temp_file_t*)",http\ngx_http_file_cache.c,"void
ngx_http_file_cache_update(ngx_http_request_t *r, ngx_temp_file_t *tf)
{
    off_t                   fs_size;
    ngx_int_t               rc;
    ngx_file_uniq_t         uniq;
    ngx_file_info_t         fi;
    ngx_http_cache_t        *c;
    ngx_ext_rename_file_t   ext;
    ngx_http_file_cache_t  *cache;

    c = r->cache;

    if (c->updated) {
        return;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache update"");

    cache = c->file_cache;

    c->updated = 1;
    c->updating = 0;

    uniq = 0;
    fs_size = 0;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache rename: \""%s\"" to \""%s\"""",
                   tf->file.name.data, c->file.name.data);

    ext.access = NGX_FILE_OWNER_ACCESS;
    ext.path_access = NGX_FILE_OWNER_ACCESS;
    ext.time = -1;
    ext.create_path = 1;
    ext.delete_file = 1;
    ext.log = r->connection->log;

    rc = ngx_ext_rename_file(&tf->...",1358.0,1430.0,1.0,1.0,73.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5599,262175,ngx_http_file_cache_update_header,1,ngx_http_file_cache_update_header,void ngx_http_file_cache_update_header (ngx_http_request_t*),http\ngx_http_file_cache.c,"void
ngx_http_file_cache_update_header(ngx_http_request_t *r)
{
    ssize_t                        n;
    ngx_err_t                      err;
    ngx_file_t                     file;
    ngx_file_info_t                fi;
    ngx_http_cache_t              *c;
    ngx_http_file_cache_header_t   h;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache update header"");

    c = r->cache;

    ngx_memzero(&file, sizeof(ngx_file_t));

    file.name = c->file.name;
    file.log = r->connection->log;
    file.fd = ngx_open_file(file.name.data, NGX_FILE_RDWR, NGX_FILE_OPEN, 0);

    if (file.fd == NGX_INVALID_FILE) {
        err = ngx_errno;

        /* cache file may have been deleted */

        if (err == NGX_ENOENT) {
            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           ""http file cache \""%s\"" not found"",
                           file.name.data);
            return;
        }

        ngx_log_erro...",1433.0,1562.0,1.0,1.0,130.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5600,262180,ngx_http_cache_send,1,ngx_http_cache_send,ngx_int_t ngx_http_cache_send (ngx_http_request_t*),http\ngx_http_file_cache.c,"ngx_int_t
ngx_http_cache_send(ngx_http_request_t *r)
{
    ngx_int_t          rc;
    ngx_buf_t         *b;
    ngx_chain_t        out;
    ngx_http_cache_t  *c;

    c = r->cache;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache send: %s"", c->file.name.data);

    if (r != r->main && c->length - c->body_start == 0) {
        return ngx_http_send_header(r);
    }

    /* we need to allocate all before the header would be sent */

    b = ngx_calloc_buf(r->pool);
    if (b == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
    if (b->file == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    rc = ngx_http_send_header(r);

    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
        return rc;
    }

    b->file_pos = c->body_start;
    b->file_last = c->length;

    b->in_file = (c->length - c->body_start) ? 1: 0;
    b->last_buf = (r == r->mai...",1565.0,1615.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5601,262185,ngx_http_file_cache_free,1,ngx_http_file_cache_free,"void ngx_http_file_cache_free (ngx_http_cache_t*,ngx_temp_file_t*)",http\ngx_http_file_cache.c,"void
ngx_http_file_cache_free(ngx_http_cache_t *c, ngx_temp_file_t *tf)
{
    ngx_http_file_cache_t       *cache;
    ngx_http_file_cache_node_t  *fcn;

    if (c->updated || c->node == NULL) {
        return;
    }

    cache = c->file_cache;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->file.log, 0,
                   ""http file cache free, fd: %d"", c->file.fd);

    ngx_shmtx_lock(&cache->shpool->mutex);

    fcn = c->node;
    fcn->count--;

    if (c->updating && fcn->lock_time == c->lock_time) {
        fcn->updating = 0;
    }

    if (c->error) {
        fcn->error = c->error;

        if (c->valid_sec) {
            fcn->valid_sec = c->valid_sec;
            fcn->valid_msec = c->valid_msec;
        }

    } else if (!fcn->exists && fcn->count == 0 && c->min_uses == 1) {
        ngx_queue_remove(&fcn->queue);
        ngx_rbtree_delete(&cache->sh->rbtree, &fcn->node);
        ngx_slab_free_locked(cache->shpool, fcn);
        cache->sh->count--;
        c->node = NULL;
    }

   ...",1618.0,1680.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5602,262191,ngx_http_file_cache_valid,1,ngx_http_file_cache_valid,"time_t ngx_http_file_cache_valid (ngx_array_t*,ngx_uint_t)",http\ngx_http_file_cache.c,"time_t
ngx_http_file_cache_valid(ngx_array_t *cache_valid, ngx_uint_t status)
{
    ngx_uint_t               i;
    ngx_http_cache_valid_t  *valid;

    if (cache_valid == NULL) {
        return 0;
    }

    valid = cache_valid->elts;
    for (i = 0; i < cache_valid->nelts; i++) {

        if (valid[i].status == 0) {
            return valid[i].valid;
        }

        if (valid[i].status == status) {
            return valid[i].valid;
        }
    }

    return 0;
}",2291.0,2314.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,time_t
5603,262197,ngx_http_file_cache_set_slot,1,ngx_http_file_cache_set_slot,"char* ngx_http_file_cache_set_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_file_cache.c,"char *
ngx_http_file_cache_set_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *confp = conf;

    off_t                   max_size, min_free;
    u_char                 *last, *p;
    time_t                  inactive;
    ssize_t                 size;
    ngx_str_t               s, name, *value;
    ngx_int_t               loader_files, manager_files;
    ngx_msec_t              loader_sleep, manager_sleep, loader_threshold,
                            manager_threshold;
    ngx_uint_t              i, n, use_temp_path;
    ngx_array_t            *caches;
    ngx_http_file_cache_t  *cache, **ce;

    cache = ngx_pcalloc(cf->pool, sizeof(ngx_http_file_cache_t));
    if (cache == NULL) {
        return NGX_CONF_ERROR;
    }

    cache->path = ngx_pcalloc(cf->pool, sizeof(ngx_path_t));
    if (cache->path == NULL) {
        return NGX_CONF_ERROR;
    }

    use_temp_path = 1;

    inactive = 600;

    loader_files = 100;
    loader_sleep = 50;
    loader_threshold = 20...",2317.0,2661.0,1.0,1.0,345.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5604,262204,ngx_http_file_cache_valid_set_slot,1,ngx_http_file_cache_valid_set_slot,"char* ngx_http_file_cache_valid_set_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_file_cache.c,"char *
ngx_http_file_cache_valid_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    char  *p = conf;

    time_t                    valid;
    ngx_str_t                *value;
    ngx_int_t                 status;
    ngx_uint_t                i, n;
    ngx_array_t             **a;
    ngx_http_cache_valid_t   *v;
    static ngx_uint_t         statuses[] = { 200, 301, 302 };

    a = (ngx_array_t **) (p + cmd->offset);

    if (*a == NGX_CONF_UNSET_PTR) {
        *a = ngx_array_create(cf->pool, 1, sizeof(ngx_http_cache_valid_t));
        if (*a == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    value = cf->args->elts;
    n = cf->args->nelts - 1;

    valid = ngx_parse_time(&value[n], 1);
    if (valid == (time_t) NGX_ERROR) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid time value \""%V\"""", &value[n]);
        return NGX_CONF_ERROR;
    }

    if (n == 1) {

        for (i = 0; i < 3; i++) {
            v = ngx_...",2664.0,2738.0,1.0,1.0,75.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5605,262230,preconfiguration,1,ngx_http_module_t.preconfiguration,ngx_int_t ngx_http_module_t.preconfiguration (ngx_conf_t*),http\ngx_http_config.h,ngx_int_t   (*preconfiguration)(ngx_conf_t *cf);,25.0,25.0,17.0,51.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5606,262235,postconfiguration,1,ngx_http_module_t.postconfiguration,ngx_int_t ngx_http_module_t.postconfiguration (ngx_conf_t*),http\ngx_http_config.h,ngx_int_t   (*postconfiguration)(ngx_conf_t *cf);,26.0,26.0,17.0,52.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5607,262240,create_main_conf,1,ngx_http_module_t.create_main_conf,void* ngx_http_module_t.create_main_conf (ngx_conf_t*),http\ngx_http_config.h,void       *(*create_main_conf)(ngx_conf_t *cf);,28.0,28.0,16.0,51.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5608,262245,init_main_conf,1,ngx_http_module_t.init_main_conf,"char* ngx_http_module_t.init_main_conf (ngx_conf_t*,void*)",http\ngx_http_config.h,"char       *(*init_main_conf)(ngx_conf_t *cf, void *conf);",29.0,29.0,16.0,61.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
5609,262251,create_srv_conf,1,ngx_http_module_t.create_srv_conf,void* ngx_http_module_t.create_srv_conf (ngx_conf_t*),http\ngx_http_config.h,void       *(*create_srv_conf)(ngx_conf_t *cf);,31.0,31.0,16.0,50.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5610,262256,merge_srv_conf,1,ngx_http_module_t.merge_srv_conf,"char* ngx_http_module_t.merge_srv_conf (ngx_conf_t*,void*,void*)",http\ngx_http_config.h,"char       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);",32.0,32.0,16.0,73.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5611,262263,create_loc_conf,1,ngx_http_module_t.create_loc_conf,void* ngx_http_module_t.create_loc_conf (ngx_conf_t*),http\ngx_http_config.h,void       *(*create_loc_conf)(ngx_conf_t *cf);,34.0,34.0,16.0,50.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5612,262268,merge_loc_conf,1,ngx_http_module_t.merge_loc_conf,"char* ngx_http_module_t.merge_loc_conf (ngx_conf_t*,void*,void*)",http\ngx_http_config.h,"char       *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);",35.0,35.0,16.0,73.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5613,262290,ngx_http_copy_filter_create_conf,1,ngx_http_copy_filter_create_conf,void* ngx_http_copy_filter_create_conf (ngx_conf_t*),http\ngx_http_copy_filter_module.c,"static void *
ngx_http_copy_filter_create_conf(ngx_conf_t *cf)
{
    ngx_http_copy_filter_conf_t *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_http_copy_filter_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->bufs.num = 0;

    return conf;
}",344.0,357.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5614,262295,ngx_http_copy_filter_merge_conf,1,ngx_http_copy_filter_merge_conf,"char* ngx_http_copy_filter_merge_conf (ngx_conf_t*,void*,void*)",http\ngx_http_copy_filter_module.c,"static char *
ngx_http_copy_filter_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_copy_filter_conf_t *prev = parent;
    ngx_http_copy_filter_conf_t *conf = child;

    ngx_conf_merge_bufs_value(conf->bufs, prev->bufs, 2, 32768);

    return NULL;
}",360.0,369.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5615,262302,ngx_http_copy_filter_init,1,ngx_http_copy_filter_init,ngx_int_t ngx_http_copy_filter_init (ngx_conf_t*),http\ngx_http_copy_filter_module.c,"static ngx_int_t
ngx_http_copy_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_copy_filter;

    return NGX_OK;
}",372.0,379.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5616,262358,ngx_http_copy_filter,1,ngx_http_copy_filter,"ngx_int_t ngx_http_copy_filter (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_copy_filter_module.c,"static ngx_int_t
ngx_http_copy_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t                     rc;
    ngx_connection_t             *c;
    ngx_output_chain_ctx_t       *ctx;
    ngx_http_core_loc_conf_t     *clcf;
    ngx_http_copy_filter_conf_t  *conf;

    c = r->connection;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http copy filter: \""%V?%V\"""", &r->uri, &r->args);

    ctx = ngx_http_get_module_ctx(r, ngx_http_copy_filter_module);

    if (ctx == NULL) {
        ctx = ngx_pcalloc(r->pool, sizeof(ngx_output_chain_ctx_t));
        if (ctx == NULL) {
            return NGX_ERROR;
        }

        ngx_http_set_ctx(r, ctx, ngx_http_copy_filter_module);

        conf = ngx_http_get_module_loc_conf(r, ngx_http_copy_filter_module);
        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

        ctx->sendfile = c->sendfile;
        ctx->need_in_memory = r->main_filter_need_in_memory
                              || r->filte...",86.0,165.0,1.0,1.0,80.0,59,10,63,16,0,8,5,7,0,2,,0,8,4,2,2,ngx_int_t
5617,262637,ngx_http_core_auth_delay,1,ngx_http_core_auth_delay,ngx_int_t ngx_http_core_auth_delay (ngx_http_request_t*),http\ngx_http_core_module.c,"static ngx_int_t
ngx_http_core_auth_delay(ngx_http_request_t *r)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->auth_delay == 0) {
        ngx_http_finalize_request(r, NGX_HTTP_UNAUTHORIZED);
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                  ""delaying unauthorized request"");

    if (r->connection->read->ready) {
        ngx_post_event(r->connection->read, &ngx_posted_events);

    } else {
        if (ngx_handle_read_event(r->connection->read, 0) != NGX_OK) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }
    }

    r->read_event_handler = ngx_http_test_reading;
    r->write_event_handler = ngx_http_core_auth_delay_handler;

    r->connection->write->delayed = 1;
    ngx_add_timer(r->connection->write, clcf->auth_delay);

    /*
     * trigger an additional event loop iteration
     * to ensure constant-time processing
     */

    ngx_post_ev...",1185.0,1223.0,1.0,1.0,39.0,0,0,0,0,2,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5618,262642,ngx_http_core_auth_delay_handler,1,ngx_http_core_auth_delay_handler,void ngx_http_core_auth_delay_handler (ngx_http_request_t*),http\ngx_http_core_module.c,"static void
ngx_http_core_auth_delay_handler(ngx_http_request_t *r)
{
    ngx_event_t  *wev;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""auth delay handler"");

    wev = r->connection->write;

    if (wev->delayed) {

        if (ngx_handle_write_event(wev, 0) != NGX_OK) {
            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        }

        return;
    }

    ngx_http_finalize_request(r, NGX_HTTP_UNAUTHORIZED);
}",1226.0,1246.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5619,262647,ngx_http_core_find_location,1,ngx_http_core_find_location,ngx_int_t ngx_http_core_find_location (ngx_http_request_t*),http\ngx_http_core_module.c,"static ngx_int_t
ngx_http_core_find_location(ngx_http_request_t *r)
{
    ngx_int_t                  rc;
    ngx_http_core_loc_conf_t  *pclcf;
#if (NGX_PCRE)
    ngx_int_t                  n;
    ngx_uint_t                 noregex;
    ngx_http_core_loc_conf_t  *clcf, **clcfp;

    noregex = 0;
#endif

    pclcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    rc = ngx_http_core_find_static_location(r, pclcf->static_locations);

    if (rc == NGX_AGAIN) {

#if (NGX_PCRE)
        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

        noregex = clcf->noregex;
#endif

        /* look up nested locations */

        rc = ngx_http_core_find_location(r);
    }

    if (rc == NGX_OK || rc == NGX_DONE) {
        return rc;
    }

    /* rc == NGX_DECLINED or rc == NGX_AGAIN in nested location */

#if (NGX_PCRE)

    if (noregex == 0 && pclcf->regex_locations) {

        for (clcfp = pclcf->regex_locations; *clcfp; clcfp++) {

            ngx_log_debug1(NGX_LOG_D...",1393.0,1460.0,1.0,1.0,68.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5620,262652,ngx_http_core_find_static_location,1,ngx_http_core_find_static_location,"ngx_int_t ngx_http_core_find_static_location (ngx_http_request_t*,ngx_http_location_tree_node_t*)",http\ngx_http_core_module.c,"static ngx_int_t
ngx_http_core_find_static_location(ngx_http_request_t *r,
    ngx_http_location_tree_node_t *node)
{
    u_char     *uri;
    size_t      len, n;
    ngx_int_t   rc, rv;

    len = r->uri.len;
    uri = r->uri.data;

    rv = NGX_DECLINED;

    for ( ;; ) {

        if (node == NULL) {
            return rv;
        }

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""test location: \""%*s\"""",
                       (size_t) node->len, node->name);

        n = (len <= (size_t) node->len) ? len : node->len;

        rc = ngx_filename_cmp(uri, node->name, n);

        if (rc != 0) {
            node = (rc < 0) ? node->left : node->right;

            continue;
        }

        if (len > (size_t) node->len) {

            if (node->inclusive) {

                r->loc_conf = node->inclusive->loc_conf;
                rv = NGX_AGAIN;

                node = node->tree;
                uri += n;
                len -= n;

       ...",1470.0,1547.0,1.0,1.0,78.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5621,262658,ngx_http_core_preconfiguration,1,ngx_http_core_preconfiguration,ngx_int_t ngx_http_core_preconfiguration (ngx_conf_t*),http\ngx_http_core_module.c,"static ngx_int_t
ngx_http_core_preconfiguration(ngx_conf_t *cf)
{
    return ngx_http_variables_add_core_vars(cf);
}",3276.0,3280.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5622,262663,ngx_http_core_postconfiguration,1,ngx_http_core_postconfiguration,ngx_int_t ngx_http_core_postconfiguration (ngx_conf_t*),http\ngx_http_core_module.c,"static ngx_int_t
ngx_http_core_postconfiguration(ngx_conf_t *cf)
{
    ngx_http_top_request_body_filter = ngx_http_request_body_save_filter;

    return NGX_OK;
}",3283.0,3289.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5623,262668,ngx_http_core_create_main_conf,1,ngx_http_core_create_main_conf,void* ngx_http_core_create_main_conf (ngx_conf_t*),http\ngx_http_core_module.c,"static void *
ngx_http_core_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_core_main_conf_t));
    if (cmcf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&cmcf->servers, cf->pool, 4,
                       sizeof(ngx_http_core_srv_conf_t *))
        != NGX_OK)
    {
        return NULL;
    }

    cmcf->server_names_hash_max_size = NGX_CONF_UNSET_UINT;
    cmcf->server_names_hash_bucket_size = NGX_CONF_UNSET_UINT;

    cmcf->variables_hash_max_size = NGX_CONF_UNSET_UINT;
    cmcf->variables_hash_bucket_size = NGX_CONF_UNSET_UINT;

    return cmcf;
}",3292.0,3316.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5624,262673,ngx_http_core_init_main_conf,1,ngx_http_core_init_main_conf,"char* ngx_http_core_init_main_conf (ngx_conf_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_init_main_conf(ngx_conf_t *cf, void *conf)
{
    ngx_http_core_main_conf_t *cmcf = conf;

    ngx_conf_init_uint_value(cmcf->server_names_hash_max_size, 512);
    ngx_conf_init_uint_value(cmcf->server_names_hash_bucket_size,
                             ngx_cacheline_size);

    cmcf->server_names_hash_bucket_size =
            ngx_align(cmcf->server_names_hash_bucket_size, ngx_cacheline_size);


    ngx_conf_init_uint_value(cmcf->variables_hash_max_size, 1024);
    ngx_conf_init_uint_value(cmcf->variables_hash_bucket_size, 64);

    cmcf->variables_hash_bucket_size =
               ngx_align(cmcf->variables_hash_bucket_size, ngx_cacheline_size);

    if (cmcf->ncaptures) {
        cmcf->ncaptures = (cmcf->ncaptures + 1) * 3;
    }

    return NGX_CONF_OK;
}",3319.0,3343.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
5625,262679,ngx_http_core_create_srv_conf,1,ngx_http_core_create_srv_conf,void* ngx_http_core_create_srv_conf (ngx_conf_t*),http\ngx_http_core_module.c,"static void *
ngx_http_core_create_srv_conf(ngx_conf_t *cf)
{
    ngx_http_core_srv_conf_t  *cscf;

    cscf = ngx_pcalloc(cf->pool, sizeof(ngx_http_core_srv_conf_t));
    if (cscf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->client_large_buffers.num = 0;
     */

    if (ngx_array_init(&cscf->server_names, cf->temp_pool, 4,
                       sizeof(ngx_http_server_name_t))
        != NGX_OK)
    {
        return NULL;
    }

    cscf->connection_pool_size = NGX_CONF_UNSET_SIZE;
    cscf->request_pool_size = NGX_CONF_UNSET_SIZE;
    cscf->client_header_timeout = NGX_CONF_UNSET_MSEC;
    cscf->client_header_buffer_size = NGX_CONF_UNSET_SIZE;
    cscf->ignore_invalid_headers = NGX_CONF_UNSET;
    cscf->merge_slashes = NGX_CONF_UNSET;
    cscf->underscores_in_headers = NGX_CONF_UNSET;

    cscf->file_name = cf->conf_file->file.name.data;
    cscf->line = cf->conf_file->line;

    return cscf;
}",3346.0,3381.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5626,262684,ngx_http_core_merge_srv_conf,1,ngx_http_core_merge_srv_conf,"char* ngx_http_core_merge_srv_conf (ngx_conf_t*,void*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_core_srv_conf_t *prev = parent;
    ngx_http_core_srv_conf_t *conf = child;

    ngx_str_t                name;
    ngx_http_server_name_t  *sn;

    /* TODO: it does not merge, it inits only */

    ngx_conf_merge_size_value(conf->connection_pool_size,
                              prev->connection_pool_size, 64 * sizeof(void *));
    ngx_conf_merge_size_value(conf->request_pool_size,
                              prev->request_pool_size, 4096);
    ngx_conf_merge_msec_value(conf->client_header_timeout,
                              prev->client_header_timeout, 60000);
    ngx_conf_merge_size_value(conf->client_header_buffer_size,
                              prev->client_header_buffer_size, 1024);
    ngx_conf_merge_bufs_value(conf->large_client_header_buffers,
                              prev->large_client_header_buffers,
                              4, 8192);

    if (conf->l...",3384.0,3454.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5627,262691,ngx_http_core_create_loc_conf,1,ngx_http_core_create_loc_conf,void* ngx_http_core_create_loc_conf (ngx_conf_t*),http\ngx_http_core_module.c,"static void *
ngx_http_core_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_core_loc_conf_t));
    if (clcf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     clcf->escaped_name = { 0, NULL };
     *     clcf->root = { 0, NULL };
     *     clcf->limit_except = 0;
     *     clcf->post_action = { 0, NULL };
     *     clcf->types = NULL;
     *     clcf->default_type = { 0, NULL };
     *     clcf->error_log = NULL;
     *     clcf->error_pages = NULL;
     *     clcf->client_body_path = NULL;
     *     clcf->regex = NULL;
     *     clcf->exact_match = 0;
     *     clcf->auto_redirect = 0;
     *     clcf->alias = 0;
     *     clcf->gzip_proxied = 0;
     *     clcf->keepalive_disable = 0;
     */

    clcf->client_max_body_size = NGX_CONF_UNSET;
    clcf->client_body_buffer_size = NGX_CONF_UNSET_SIZE;
    clcf->client_body_timeout = NGX_CONF_UNSET_MSEC;
    clcf->s...",3457.0,3563.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5628,262696,ngx_http_core_merge_loc_conf,1,ngx_http_core_merge_loc_conf,"char* ngx_http_core_merge_loc_conf (ngx_conf_t*,void*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_core_loc_conf_t *prev = parent;
    ngx_http_core_loc_conf_t *conf = child;

    ngx_uint_t        i;
    ngx_hash_key_t   *type;
    ngx_hash_init_t   types_hash;

    if (conf->root.data == NULL) {

        conf->alias = prev->alias;
        conf->root = prev->root;
        conf->root_lengths = prev->root_lengths;
        conf->root_values = prev->root_values;

        if (prev->root.data == NULL) {
            ngx_str_set(&conf->root, ""html"");

            if (ngx_conf_full_name(cf->cycle, &conf->root, 0) != NGX_OK) {
                return NGX_CONF_ERROR;
            }
        }
    }

    if (conf->post_action.data == NULL) {
        conf->post_action = prev->post_action;
    }

    ngx_conf_merge_uint_value(conf->types_hash_max_size,
                              prev->types_hash_max_size, 1024);

    ngx_conf_merge_uint_value(conf->types_hash_bucket_size,
                     ...",3578.0,3864.0,1.0,30.0,287.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5629,262703,ngx_http_core_server,1,ngx_http_core_server,"char* ngx_http_core_server (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_server(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy)
{
    char                        *rv;
    void                        *mconf;
    size_t                       len;
    u_char                      *p;
    ngx_uint_t                   i;
    ngx_conf_t                   pcf;
    ngx_http_module_t           *module;
    struct sockaddr_in          *sin;
    ngx_http_conf_ctx_t         *ctx, *http_ctx;
    ngx_http_listen_opt_t        lsopt;
    ngx_http_core_srv_conf_t    *cscf, **cscfp;
    ngx_http_core_main_conf_t   *cmcf;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    http_ctx = cf->ctx;
    ctx->main_conf = http_ctx->main_conf;

    /* the server{}'s srv_conf */

    ctx->srv_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
    if (ctx->srv_conf == NULL) {
        return NGX_CONF_ERROR;
    }

    /* the server{}'s loc_conf */

    ctx->loc_conf ...",2805.0,2946.0,1.0,1.0,142.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5630,262710,ngx_http_core_location,1,ngx_http_core_location,"char* ngx_http_core_location (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_location(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy)
{
    char                      *rv;
    u_char                    *mod;
    size_t                     len;
    ngx_str_t                 *value, *name;
    ngx_uint_t                 i;
    ngx_conf_t                 save;
    ngx_http_module_t         *module;
    ngx_http_conf_ctx_t       *ctx, *pctx;
    ngx_http_core_loc_conf_t  *clcf, *pclcf;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    pctx = cf->ctx;
    ctx->main_conf = pctx->main_conf;
    ctx->srv_conf = pctx->srv_conf;

    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
    if (ctx->loc_conf == NULL) {
        return NGX_CONF_ERROR;
    }

    for (i = 0; cf->cycle->modules[i]; i++) {
        if (cf->cycle->modules[i]->type != NGX_HTTP_MODULE) {
            continue;
        }

        module = cf->cycle->modules[i]->ctx;

 ...",2949.0,3140.0,1.0,1.0,192.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5631,262717,ngx_http_core_regex_location,1,ngx_http_core_regex_location,"ngx_int_t ngx_http_core_regex_location (ngx_conf_t*,ngx_http_core_loc_conf_t*,ngx_str_t*,ngx_uint_t)",http\ngx_http_core_module.c,"static ngx_int_t
ngx_http_core_regex_location(ngx_conf_t *cf, ngx_http_core_loc_conf_t *clcf,
    ngx_str_t *regex, ngx_uint_t caseless)
{
#if (NGX_PCRE)
    ngx_regex_compile_t  rc;
    u_char               errstr[NGX_MAX_CONF_ERRSTR];

    ngx_memzero(&rc, sizeof(ngx_regex_compile_t));

    rc.pattern = *regex;
    rc.err.len = NGX_MAX_CONF_ERRSTR;
    rc.err.data = errstr;

#if (NGX_HAVE_CASELESS_FILESYSTEM)
    rc.options = NGX_REGEX_CASELESS;
#else
    rc.options = caseless ? NGX_REGEX_CASELESS : 0;
#endif

    clcf->regex = ngx_http_regex_compile(cf, &rc);
    if (clcf->regex == NULL) {
        return NGX_ERROR;
    }

    clcf->name = *regex;

    return NGX_OK;

#else

    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                       ""using regex \""%V\"" requires PCRE library"",
                       regex);
    return NGX_ERROR;

#endif
}",3143.0,3180.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5632,262725,ngx_http_core_types,1,ngx_http_core_types,"char* ngx_http_core_types (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_types(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    char        *rv;
    ngx_conf_t   save;

    if (clcf->types == NULL) {
        clcf->types = ngx_array_create(cf->pool, 64, sizeof(ngx_hash_key_t));
        if (clcf->types == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    save = *cf;
    cf->handler = ngx_http_core_type;
    cf->handler_conf = conf;

    rv = ngx_conf_parse(cf, NULL);

    *cf = save;

    return rv;
}",3183.0,3207.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5633,262732,ngx_http_core_type,1,ngx_http_core_type,"char* ngx_http_core_type (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_type(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    ngx_str_t       *value, *content_type, *old;
    ngx_uint_t       i, n, hash;
    ngx_hash_key_t  *type;

    value = cf->args->elts;

    if (ngx_strcmp(value[0].data, ""include"") == 0) {
        if (cf->args->nelts != 2) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid number of arguments""
                               "" in \""include\"" directive"");
            return NGX_CONF_ERROR;
        }

        return ngx_conf_include(cf, dummy, conf);
    }

    content_type = ngx_palloc(cf->pool, sizeof(ngx_str_t));
    if (content_type == NULL) {
        return NGX_CONF_ERROR;
    }

    *content_type = value[0];

    for (i = 1; i < cf->args->nelts; i++) {

        hash = ngx_hash_strlow(value[i].data, value[i].data, value[i].len);

        type = clcf->types->elts;
        for (n = 0; n < clcf->types->nelts; n...",3210.0,3273.0,1.0,1.0,64.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5634,262739,ngx_http_core_listen,1,ngx_http_core_listen,"char* ngx_http_core_listen (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_listen(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_srv_conf_t *cscf = conf;

    ngx_str_t              *value, size;
    ngx_url_t               u;
    ngx_uint_t              n;
    ngx_http_listen_opt_t   lsopt;

    cscf->listen = 1;

    value = cf->args->elts;

    ngx_memzero(&u, sizeof(ngx_url_t));

    u.url = value[1];
    u.listen = 1;
    u.default_port = 80;

    if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
        if (u.err) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""%s in \""%V\"" of the \""listen\"" directive"",
                               u.err, &u.url);
        }

        return NGX_CONF_ERROR;
    }

    ngx_memzero(&lsopt, sizeof(ngx_http_listen_opt_t));

    lsopt.backlog = NGX_LISTEN_BACKLOG;
    lsopt.rcvbuf = -1;
    lsopt.sndbuf = -1;
#if (NGX_HAVE_SETFIB)
    lsopt.setfib = -1;
#endif
#if (NGX_HAVE_TCP_FASTOPEN)
    lsopt.fastopen = -1;
#endif
#if (NGX_HAVE_INET6)
...",3867.0,4211.0,1.0,1.0,345.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5635,262746,ngx_http_core_server_name,1,ngx_http_core_server_name,"char* ngx_http_core_server_name (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_server_name(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_srv_conf_t *cscf = conf;

    u_char                   ch;
    ngx_str_t               *value;
    ngx_uint_t               i;
    ngx_http_server_name_t  *sn;

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {

        ch = value[i].data[0];

        if ((ch == '*' && (value[i].len < 3 || value[i].data[1] != '.'))
            || (ch == '.' && value[i].len < 2))
        {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""server name \""%V\"" is invalid"", &value[i]);
            return NGX_CONF_ERROR;
        }

        if (ngx_strchr(value[i].data, '/')) {
            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                               ""server name \""%V\"" has suspicious symbols"",
                               &value[i]);
        }

        sn = ngx_array_push(&cscf->server_names);
        if (sn == NULL) {
            ...",4214.0,4312.0,1.0,1.0,99.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5636,262753,ngx_http_core_root,1,ngx_http_core_root,"char* ngx_http_core_root (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_root(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    ngx_str_t                  *value;
    ngx_int_t                   alias;
    ngx_uint_t                  n;
    ngx_http_script_compile_t   sc;

    alias = (cmd->name.len == sizeof(""alias"") - 1) ? 1 : 0;

    if (clcf->root.data) {

        if ((clcf->alias != 0) == alias) {
            return ""is duplicate"";
        }

        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""\""%V\"" directive is duplicate, ""
                           ""\""%s\"" directive was specified earlier"",
                           &cmd->name, clcf->alias ? ""alias"" : ""root"");

        return NGX_CONF_ERROR;
    }

    if (clcf->named && alias) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""the \""alias\"" directive cannot be used ""
                           ""inside the named location"");

        return NGX_CONF_ERROR;
    }

    va...",4315.0,4414.0,1.0,1.0,100.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5637,262760,ngx_http_core_limit_except,1,ngx_http_core_limit_except,"char* ngx_http_core_limit_except (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_limit_except(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *pclcf = conf;

    char                      *rv;
    void                      *mconf;
    ngx_str_t                 *value;
    ngx_uint_t                 i;
    ngx_conf_t                 save;
    ngx_http_module_t         *module;
    ngx_http_conf_ctx_t       *ctx, *pctx;
    ngx_http_method_name_t    *name;
    ngx_http_core_loc_conf_t  *clcf;

    if (pclcf->limit_except) {
        return ""is duplicate"";
    }

    pclcf->limit_except = 0xffffffff;

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {
        for (name = ngx_methods_names; name->name; name++) {

            if (ngx_strcasecmp(value[i].data, name->name) == 0) {
                pclcf->limit_except &= name->method;
                goto next;
            }
        }

        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid method \""%V\"""", &value[...",4436.0,4533.0,1.0,1.0,98.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5638,262767,ngx_http_core_set_aio,1,ngx_http_core_set_aio,"char* ngx_http_core_set_aio (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_set_aio(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    ngx_str_t  *value;

    if (clcf->aio != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

#if (NGX_THREADS)
    clcf->thread_pool = NULL;
    clcf->thread_pool_value = NULL;
#endif

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        clcf->aio = NGX_HTTP_AIO_OFF;
        return NGX_CONF_OK;
    }

    if (ngx_strcmp(value[1].data, ""on"") == 0) {
#if (NGX_HAVE_FILE_AIO)
        clcf->aio = NGX_HTTP_AIO_ON;
        return NGX_CONF_OK;
#else
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""\""aio on\"" ""
                           ""is unsupported on this platform"");
        return NGX_CONF_ERROR;
#endif
    }

#if (NGX_HAVE_AIO_SENDFILE)

    if (ngx_strcmp(value[1].data, ""sendfile"") == 0) {
        clcf->aio = NGX_HTTP_AIO_ON;

        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
             ...",4536.0,4643.0,1.0,1.0,108.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5639,262774,ngx_http_core_directio,1,ngx_http_core_directio,"char* ngx_http_core_directio (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_directio(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    ngx_str_t  *value;

    if (clcf->directio != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        clcf->directio = NGX_OPEN_FILE_DIRECTIO_OFF;
        return NGX_CONF_OK;
    }

    clcf->directio = ngx_parse_offset(&value[1]);
    if (clcf->directio == (off_t) NGX_ERROR) {
        return ""invalid value"";
    }

    return NGX_CONF_OK;
}",4646.0,4670.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5640,262781,ngx_http_core_error_page,1,ngx_http_core_error_page,"char* ngx_http_core_error_page (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_error_page(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    u_char                            *p;
    ngx_int_t                          overwrite;
    ngx_str_t                         *value, uri, args;
    ngx_uint_t                         i, n;
    ngx_http_err_page_t               *err;
    ngx_http_complex_value_t           cv;
    ngx_http_compile_complex_value_t   ccv;

    if (clcf->error_pages == NULL) {
        clcf->error_pages = ngx_array_create(cf->pool, 4,
                                             sizeof(ngx_http_err_page_t));
        if (clcf->error_pages == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    value = cf->args->elts;

    i = cf->args->nelts - 2;

    if (value[i].data[0] == '=') {
        if (i == 1) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid value \""%V\"""", &value[i]);
            return NGX_CONF_ERROR;
    ...",4673.0,4789.0,1.0,1.0,117.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5641,262788,ngx_http_core_open_file_cache,1,ngx_http_core_open_file_cache,"char* ngx_http_core_open_file_cache (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_open_file_cache(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    time_t       inactive;
    ngx_str_t   *value, s;
    ngx_int_t    max;
    ngx_uint_t   i;

    if (clcf->open_file_cache != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    max = 0;
    inactive = 60;

    for (i = 1; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""max="", 4) == 0) {

            max = ngx_atoi(value[i].data + 4, value[i].len - 4);
            if (max <= 0) {
                goto failed;
            }

            continue;
        }

        if (ngx_strncmp(value[i].data, ""inactive="", 9) == 0) {

            s.len = value[i].len - 9;
            s.data = value[i].data + 9;

            inactive = ngx_parse_time(&s, 1);
            if (inactive == (time_t) NGX_ERROR) {
                goto failed;
            }

            continue;
        }

        if (ngx_s...",4792.0,4867.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5642,262795,ngx_http_core_error_log,1,ngx_http_core_error_log,"char* ngx_http_core_error_log (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_error_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    return ngx_log_set_log(cf, &clcf->error_log);
}",4870.0,4876.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5643,262802,ngx_http_core_keepalive,1,ngx_http_core_keepalive,"char* ngx_http_core_keepalive (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_keepalive(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    ngx_str_t  *value;

    if (clcf->keepalive_timeout != NGX_CONF_UNSET_MSEC) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    clcf->keepalive_timeout = ngx_parse_time(&value[1], 0);

    if (clcf->keepalive_timeout == (ngx_msec_t) NGX_ERROR) {
        return ""invalid value"";
    }

    if (cf->args->nelts == 2) {
        return NGX_CONF_OK;
    }

    clcf->keepalive_header = ngx_parse_time(&value[2], 1);

    if (clcf->keepalive_header == (time_t) NGX_ERROR) {
        return ""invalid value"";
    }

    return NGX_CONF_OK;
}",4879.0,4909.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5644,262809,ngx_http_core_internal,1,ngx_http_core_internal,"char* ngx_http_core_internal (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_internal(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t *clcf = conf;

    if (clcf->internal != NGX_CONF_UNSET) {
        return ""is duplicate"";
    }

    clcf->internal = 1;

    return NGX_CONF_OK;
}",4912.0,4924.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5645,262816,ngx_http_core_resolver,1,ngx_http_core_resolver,"char* ngx_http_core_resolver (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_resolver(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_core_loc_conf_t  *clcf = conf;

    ngx_str_t  *value;

    if (clcf->resolver) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    clcf->resolver = ngx_resolver_create(cf, &value[1], cf->args->nelts - 1);
    if (clcf->resolver == NULL) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",4927.0,4946.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5646,262823,ngx_http_get_forwarded_addr_internal,1,ngx_http_get_forwarded_addr_internal,"ngx_int_t ngx_http_get_forwarded_addr_internal (ngx_http_request_t*,ngx_addr_t*,u_char*,size_t,ngx_array_t*,int)",http\ngx_http_core_module.c,"static ngx_int_t
ngx_http_get_forwarded_addr_internal(ngx_http_request_t *r, ngx_addr_t *addr,
    u_char *xff, size_t xfflen, ngx_array_t *proxies, int recursive)
{
    u_char      *p;
    ngx_addr_t   paddr;
    ngx_uint_t   found;

    found = 0;

    do {

        if (ngx_cidr_match(addr->sockaddr, proxies) != NGX_OK) {
            return found ? NGX_DONE : NGX_DECLINED;
        }

        for (p = xff + xfflen - 1; p > xff; p--, xfflen--) {
            if (*p != ' ' && *p != ',') {
                break;
            }
        }

        for ( /* void */ ; p > xff; p--) {
            if (*p == ' ' || *p == ',') {
                p++;
                break;
            }
        }

        if (ngx_parse_addr_port(r->pool, &paddr, p, xfflen - (p - xff))
            != NGX_OK)
        {
            return found ? NGX_DONE : NGX_DECLINED;
        }

        *addr = paddr;
        found = 1;
        xfflen = p - 1 - xff;

    } while (recursive && p > xff);

    return NGX_OK;
}",2760.0,2802.0,1.0,1.0,43.0,0,0,0,0,2,0,1,1,0,0,,0,0,12,6,6,ngx_int_t
5647,262833,ngx_http_core_lowat_check,1,ngx_http_core_lowat_check,"char* ngx_http_core_lowat_check (ngx_conf_t*,void*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_lowat_check(ngx_conf_t *cf, void *post, void *data)
{
#if (NGX_FREEBSD)
    ssize_t *np = data;

    if ((u_long) *np >= ngx_freebsd_net_inet_tcp_sendspace) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""\""send_lowat\"" must be less than %d ""
                           ""(sysctl net.inet.tcp.sendspace)"",
                           ngx_freebsd_net_inet_tcp_sendspace);

        return NGX_CONF_ERROR;
    }

#elif !(NGX_HAVE_SO_SNDLOWAT)
    ssize_t *np = data;

    ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                       ""\""send_lowat\"" is not supported, ignored"");

    *np = 0;

#endif

    return NGX_CONF_OK;
}",5145.0,5171.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5648,262840,ngx_http_core_pool_size,1,ngx_http_core_pool_size,"char* ngx_http_core_pool_size (ngx_conf_t*,void*,void*)",http\ngx_http_core_module.c,"static char *
ngx_http_core_pool_size(ngx_conf_t *cf, void *post, void *data)
{
    size_t *sp = data;

    if (*sp < NGX_MIN_POOL_SIZE) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""the pool size must be no less than %uz"",
                           NGX_MIN_POOL_SIZE);
        return NGX_CONF_ERROR;
    }

    if (*sp % NGX_POOL_ALIGNMENT) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""the pool size must be a multiple of %uz"",
                           NGX_POOL_ALIGNMENT);
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",5174.0,5194.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5649,264319,ngx_http_core_run_phases,1,ngx_http_core_run_phases,void ngx_http_core_run_phases (ngx_http_request_t*),http\ngx_http_core_module.c,"void
ngx_http_core_run_phases(ngx_http_request_t *r)
{
    ngx_int_t                   rc;
    ngx_http_phase_handler_t   *ph;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    ph = cmcf->phase_engine.handlers;

    while (ph[r->phase_handler].checker) {

        rc = ph[r->phase_handler].checker(r, &ph[r->phase_handler]);

        if (rc == NGX_OK) {
            return;
        }
    }
}",862.0,881.0,1.0,1.0,20.0,15,6,15,6,1,2,3,4,0,0,,0,2,2,1,1,void
5650,264371,ngx_http_core_generic_phase,1,ngx_http_core_generic_phase,"ngx_int_t ngx_http_core_generic_phase (ngx_http_request_t*,ngx_http_phase_handler_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_core_generic_phase(ngx_http_request_t *r, ngx_http_phase_handler_t *ph)
{
    ngx_int_t  rc;

    /*
     * generic phase checker,
     * used by the post read and pre-access phases
     */

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""generic phase: %ui"", r->phase_handler);

    rc = ph->handler(r);

    if (rc == NGX_OK) {
        r->phase_handler = ph->next;
        return NGX_AGAIN;
    }

    if (rc == NGX_DECLINED) {
        r->phase_handler++;
        return NGX_AGAIN;
    }

    if (rc == NGX_AGAIN || rc == NGX_DONE) {
        return NGX_OK;
    }

    /* rc == NGX_ERROR || rc == NGX_HTTP_...  */

    ngx_http_finalize_request(r, rc);

    return NGX_OK;
}",884.0,918.0,1.0,1.0,35.0,15,5,23,8,0,1,4,4,0,1,,0,0,4,2,2,ngx_int_t
5651,264438,ngx_http_core_rewrite_phase,1,ngx_http_core_rewrite_phase,"ngx_int_t ngx_http_core_rewrite_phase (ngx_http_request_t*,ngx_http_phase_handler_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_core_rewrite_phase(ngx_http_request_t *r, ngx_http_phase_handler_t *ph)
{
    ngx_int_t  rc;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""rewrite phase: %ui"", r->phase_handler);

    rc = ph->handler(r);

    if (rc == NGX_DECLINED) {
        r->phase_handler++;
        return NGX_AGAIN;
    }

    if (rc == NGX_DONE) {
        return NGX_OK;
    }

    /* NGX_OK, NGX_AGAIN, NGX_ERROR, NGX_HTTP_...  */

    ngx_http_finalize_request(r, rc);

    return NGX_OK;
}",921.0,945.0,1.0,1.0,25.0,9,4,16,8,0,1,3,3,0,1,,0,0,4,2,2,ngx_int_t
5652,264487,ngx_http_core_find_config_phase,1,ngx_http_core_find_config_phase,"ngx_int_t ngx_http_core_find_config_phase (ngx_http_request_t*,ngx_http_phase_handler_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_core_find_config_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph)
{
    u_char                    *p;
    size_t                     len;
    ngx_int_t                  rc;
    ngx_http_core_loc_conf_t  *clcf;

    r->content_handler = NULL;
    r->uri_changed = 0;

    rc = ngx_http_core_find_location(r);

    if (rc == NGX_ERROR) {
        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_OK;
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (!r->internal && clcf->internal) {
        ngx_http_finalize_request(r, NGX_HTTP_NOT_FOUND);
        return NGX_OK;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""using configuration \""%s%V\"""",
                   (clcf->noname ? ""*"" : (clcf->exact_match ? ""="" : """")),
                   &clcf->name);

    ngx_http_update_location_config(r);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
       ...",948.0,1039.0,1.0,1.0,92.0,73,13,61,15,0,11,7,9,0,10,,0,3,4,2,2,ngx_int_t
5653,264814,ngx_http_core_post_rewrite_phase,1,ngx_http_core_post_rewrite_phase,"ngx_int_t ngx_http_core_post_rewrite_phase (ngx_http_request_t*,ngx_http_phase_handler_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_core_post_rewrite_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph)
{
    ngx_http_core_srv_conf_t  *cscf;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""post rewrite phase: %ui"", r->phase_handler);

    if (!r->uri_changed) {
        r->phase_handler++;
        return NGX_AGAIN;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""uri changes: %d"", r->uri_changes);

    /*
     * gcc before 3.3 compiles the broken code for
     *     if (r->uri_changes-- == 0)
     * if the r->uri_changes is defined as
     *     unsigned  uri_changes:4
     */

    r->uri_changes--;

    if (r->uri_changes == 0) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""rewrite or internal redirection cycle ""
                      ""while processing \""%V\"""", &r->uri);

        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_OK;
    }

    r...",1042.0,1083.0,1.0,1.0,42.0,26,7,25,9,0,4,3,3,0,2,,0,2,4,2,2,ngx_int_t
5654,264909,ngx_http_core_access_phase,1,ngx_http_core_access_phase,"ngx_int_t ngx_http_core_access_phase (ngx_http_request_t*,ngx_http_phase_handler_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_core_access_phase(ngx_http_request_t *r, ngx_http_phase_handler_t *ph)
{
    ngx_int_t                  rc;
    ngx_http_core_loc_conf_t  *clcf;

    if (r != r->main) {
        r->phase_handler = ph->next;
        return NGX_AGAIN;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""access phase: %ui"", r->phase_handler);

    rc = ph->handler(r);

    if (rc == NGX_DECLINED) {
        r->phase_handler++;
        return NGX_AGAIN;
    }

    if (rc == NGX_AGAIN || rc == NGX_DONE) {
        return NGX_OK;
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->satisfy == NGX_HTTP_SATISFY_ALL) {

        if (rc == NGX_OK) {
            r->phase_handler++;
            return NGX_AGAIN;
        }

    } else {
        if (rc == NGX_OK) {
            r->access_code = 0;

            if (r->headers_out.www_authenticate) {
                r->headers_out.www_authenticate->hash = 0;
            }

       ...",1086.0,1150.0,1.0,1.0,65.0,23,6,35,12,0,3,7,8,0,2,,0,1,4,2,2,ngx_int_t
5655,265074,ngx_http_core_post_access_phase,1,ngx_http_core_post_access_phase,"ngx_int_t ngx_http_core_post_access_phase (ngx_http_request_t*,ngx_http_phase_handler_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_core_post_access_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph)
{
    ngx_int_t  access_code;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""post access phase: %ui"", r->phase_handler);

    access_code = r->access_code;

    if (access_code) {
        r->access_code = 0;

        if (access_code == NGX_HTTP_FORBIDDEN) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""access forbidden by rule"");
        }

        if (access_code == NGX_HTTP_UNAUTHORIZED) {
            return ngx_http_core_auth_delay(r);
        }

        ngx_http_finalize_request(r, access_code);
        return NGX_OK;
    }

    r->phase_handler++;
    return NGX_AGAIN;
}",1153.0,1182.0,1.0,1.0,30.0,13,4,19,8,0,3,4,6,0,3,,0,0,4,2,2,ngx_int_t
5656,265282,ngx_http_core_content_phase,1,ngx_http_core_content_phase,"ngx_int_t ngx_http_core_content_phase (ngx_http_request_t*,ngx_http_phase_handler_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_core_content_phase(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph)
{
    size_t     root;
    ngx_int_t  rc;
    ngx_str_t  path;

    if (r->content_handler) {
        r->write_event_handler = ngx_http_request_empty_handler;
        ngx_http_finalize_request(r, r->content_handler(r));
        return NGX_OK;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""content phase: %ui"", r->phase_handler);

    rc = ph->handler(r);

    if (rc != NGX_DECLINED) {
        ngx_http_finalize_request(r, rc);
        return NGX_OK;
    }

    /* rc == NGX_DECLINED */

    ph++;

    if (ph->checker) {
        r->phase_handler++;
        return NGX_AGAIN;
    }

    /* no content handler was found */

    if (r->uri.data[r->uri.len - 1] == '/') {

        if (ngx_http_map_uri_to_path(r, &path, &root, 0) != NULL) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""directory index of \""%s\"" is for...",1249.0,1299.0,1.0,1.0,51.0,29,9,39,14,0,8,6,7,1,7,,0,2,4,2,2,ngx_int_t
5657,265914,ngx_http_test_content_type,1,ngx_http_test_content_type,"void* ngx_http_test_content_type (ngx_http_request_t*,ngx_hash_t*)",http\ngx_http_core_module.c,"void *
ngx_http_test_content_type(ngx_http_request_t *r, ngx_hash_t *types_hash)
{
    u_char      c, *lowcase;
    size_t      len;
    ngx_uint_t  i, hash;

    if (types_hash->size == 0) {
        return (void *) 4;
    }

    if (r->headers_out.content_type.len == 0) {
        return NULL;
    }

    len = r->headers_out.content_type_len;

    if (r->headers_out.content_type_lowcase == NULL) {

        lowcase = ngx_pnalloc(r->pool, len);
        if (lowcase == NULL) {
            return NULL;
        }

        r->headers_out.content_type_lowcase = lowcase;

        hash = 0;

        for (i = 0; i < len; i++) {
            c = ngx_tolower(r->headers_out.content_type.data[i]);
            hash = ngx_hash(hash, c);
            lowcase[i] = c;
        }

        r->headers_out.content_type_hash = hash;
    }

    return ngx_hash_find(types_hash, r->headers_out.content_type_hash,
                         r->headers_out.content_type_lowcase, len);
}",1550.0,1589.0,1.0,1.0,40.0,37,7,34,8,5,3,6,8,1,2,,0,2,4,2,2,void*
5658,266043,ngx_http_set_content_type,1,ngx_http_set_content_type,ngx_int_t ngx_http_set_content_type (ngx_http_request_t*),http\ngx_http_core_module.c,"ngx_int_t
ngx_http_set_content_type(ngx_http_request_t *r)
{
    u_char                     c, *exten;
    ngx_str_t                 *type;
    ngx_uint_t                 i, hash;
    ngx_http_core_loc_conf_t  *clcf;

    if (r->headers_out.content_type.len) {
        return NGX_OK;
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (r->exten.len) {

        hash = 0;

        for (i = 0; i < r->exten.len; i++) {
            c = r->exten.data[i];

            if (c >= 'A' && c <= 'Z') {

                exten = ngx_pnalloc(r->pool, r->exten.len);
                if (exten == NULL) {
                    return NGX_ERROR;
                }

                hash = ngx_hash_strlow(exten, r->exten.data, r->exten.len);

                r->exten.data = exten;

                break;
            }

            hash = ngx_hash(hash, c);
        }

        type = ngx_hash_find(&clcf->types_hash, hash,
                             r->exten.data, r->exten.len);

  ...",1592.0,1645.0,1.0,1.0,54.0,56,11,46,11,2,5,8,14,0,3,,0,5,2,1,1,ngx_int_t
5659,266220,ngx_http_set_exten,1,ngx_http_set_exten,void ngx_http_set_exten (ngx_http_request_t*),http\ngx_http_core_module.c,"void
ngx_http_set_exten(ngx_http_request_t *r)
{
    ngx_int_t  i;

    ngx_str_null(&r->exten);

    for (i = r->uri.len - 1; i > 1; i--) {
        if (r->uri.data[i] == '.' && r->uri.data[i - 1] != '/') {

            r->exten.len = r->uri.len - i - 1;
            r->exten.data = &r->uri.data[i + 1];

            return;

        } else if (r->uri.data[i] == '/') {
            return;
        }
    }

    return;
}",1648.0,1669.0,1.0,1.0,22.0,32,11,14,2,2,0,3,4,0,0,,0,0,2,1,1,void
5660,266318,ngx_http_set_etag,1,ngx_http_set_etag,ngx_int_t ngx_http_set_etag (ngx_http_request_t*),http\ngx_http_core_module.c,"ngx_int_t
ngx_http_set_etag(ngx_http_request_t *r)
{
    ngx_table_elt_t           *etag;
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (!clcf->etag) {
        return NGX_OK;
    }

    etag = ngx_list_push(&r->headers_out.headers);
    if (etag == NULL) {
        return NGX_ERROR;
    }

    etag->hash = 1;
    ngx_str_set(&etag->key, ""ETag"");

    etag->value.data = ngx_pnalloc(r->pool, NGX_OFF_T_LEN + NGX_TIME_T_LEN + 3);
    if (etag->value.data == NULL) {
        etag->hash = 0;
        return NGX_ERROR;
    }

    etag->value.len = ngx_sprintf(etag->value.data, ""\""%xT-%xO\"""",
                                  r->headers_out.last_modified_time,
                                  r->headers_out.content_length_n)
                      - etag->value.data;

    r->headers_out.etag = etag;

    return NGX_OK;
}",1672.0,1706.0,1.0,1.0,35.0,38,8,28,9,1,12,4,4,1,3,,0,12,2,1,1,ngx_int_t
5661,266434,ngx_http_weak_etag,1,ngx_http_weak_etag,void ngx_http_weak_etag (ngx_http_request_t*),http\ngx_http_core_module.c,"void
ngx_http_weak_etag(ngx_http_request_t *r)
{
    size_t            len;
    u_char           *p;
    ngx_table_elt_t  *etag;

    etag = r->headers_out.etag;

    if (etag == NULL) {
        return;
    }

    if (etag->value.len > 2
        && etag->value.data[0] == 'W'
        && etag->value.data[1] == '/')
    {
        return;
    }

    if (etag->value.len < 1 || etag->value.data[0] != '""') {
        r->headers_out.etag->hash = 0;
        r->headers_out.etag = NULL;
        return;
    }

    p = ngx_pnalloc(r->pool, etag->value.len + 2);
    if (p == NULL) {
        r->headers_out.etag->hash = 0;
        r->headers_out.etag = NULL;
        return;
    }

    len = ngx_sprintf(p, ""W/%V"", &etag->value) - p;

    etag->value.data = p;
    etag->value.len = len;
}",1709.0,1746.0,1.0,1.0,38.0,55,13,28,5,3,11,5,5,5,2,,0,11,2,1,1,void
5662,266581,ngx_http_send_response,1,ngx_http_send_response,"ngx_int_t ngx_http_send_response (ngx_http_request_t*,ngx_uint_t,ngx_str_t*,ngx_http_complex_value_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_send_response(ngx_http_request_t *r, ngx_uint_t status,
    ngx_str_t *ct, ngx_http_complex_value_t *cv)
{
    ngx_int_t     rc;
    ngx_str_t     val;
    ngx_buf_t    *b;
    ngx_chain_t   out;

    rc = ngx_http_discard_request_body(r);

    if (rc != NGX_OK) {
        return rc;
    }

    r->headers_out.status = status;

    if (ngx_http_complex_value(r, cv, &val) != NGX_OK) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    if (status == NGX_HTTP_MOVED_PERMANENTLY
        || status == NGX_HTTP_MOVED_TEMPORARILY
        || status == NGX_HTTP_SEE_OTHER
        || status == NGX_HTTP_TEMPORARY_REDIRECT
        || status == NGX_HTTP_PERMANENT_REDIRECT)
    {
        ngx_http_clear_location(r);

        r->headers_out.location = ngx_list_push(&r->headers_out.headers);
        if (r->headers_out.location == NULL) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }

        r->headers_out.location->hash = 1;
        ngx_str_set(&r->headers_out.lo...",1749.0,1827.0,1.0,1.0,79.0,87,12,74,17,2,13,9,10,2,6,,0,11,8,4,4,ngx_int_t
5663,266900,ngx_http_output_filter,1,ngx_http_output_filter,"ngx_int_t ngx_http_output_filter (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_output_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_int_t          rc;
    ngx_connection_t  *c;

    c = r->connection;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http output filter \""%V?%V\"""", &r->uri, &r->args);

    rc = ngx_http_top_body_filter(r, in);

    if (rc == NGX_ERROR) {
        /* NGX_ERROR may be returned by any filter */
        c->error = 1;
    }

    return rc;
}",1852.0,1871.0,1.0,1.0,20.0,11,4,13,6,3,0,2,2,0,0,,0,0,4,2,2,ngx_int_t
5664,266945,ngx_http_map_uri_to_path,1,ngx_http_map_uri_to_path,"u_char ngx_http_map_uri_to_path (ngx_http_request_t*,ngx_str_t*,size_t*,size_t)",http\ngx_http_core_module.c,"u_char *
ngx_http_map_uri_to_path(ngx_http_request_t *r, ngx_str_t *path,
    size_t *root_length, size_t reserved)
{
    u_char                    *last;
    size_t                     alias;
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    alias = clcf->alias;

    if (alias && !r->valid_location) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                      ""\""alias\"" cannot be used in location \""%V\"" ""
                      ""where URI was rewritten"", &clcf->name);
        return NULL;
    }

    if (clcf->root_lengths == NULL) {

        *root_length = clcf->root.len;

        path->len = clcf->root.len + reserved + r->uri.len - alias + 1;

        path->data = ngx_pnalloc(r->pool, path->len);
        if (path->data == NULL) {
            return NULL;
        }

        last = ngx_copy(path->data, clcf->root.data, clcf->root.len);

    } else {

        if (alias == NGX_MAX_SIZE_T_VALUE) {
        ...",1874.0,1945.0,1.0,1.0,72.0,47,10,38,10,5,8,4,5,1,2,,0,7,8,4,4,u_char
5665,267192,ngx_http_auth_basic_user,1,ngx_http_auth_basic_user,ngx_int_t ngx_http_auth_basic_user (ngx_http_request_t*),http\ngx_http_core_module.c,"ngx_int_t
ngx_http_auth_basic_user(ngx_http_request_t *r)
{
    ngx_str_t   auth, encoded;
    ngx_uint_t  len;

    if (r->headers_in.user.len == 0 && r->headers_in.user.data != NULL) {
        return NGX_DECLINED;
    }

    if (r->headers_in.authorization == NULL) {
        r->headers_in.user.data = (u_char *) """";
        return NGX_DECLINED;
    }

    encoded = r->headers_in.authorization->value;

    if (encoded.len < sizeof(""Basic "") - 1
        || ngx_strncasecmp(encoded.data, (u_char *) ""Basic "",
                           sizeof(""Basic "") - 1)
           != 0)
    {
        r->headers_in.user.data = (u_char *) """";
        return NGX_DECLINED;
    }

    encoded.len -= sizeof(""Basic "") - 1;
    encoded.data += sizeof(""Basic "") - 1;

    while (encoded.len && encoded.data[0] == ' ') {
        encoded.len--;
        encoded.data++;
    }

    if (encoded.len == 0) {
        r->headers_in.user.data = (u_char *) """";
        return NGX_DECLINED;
    }

    auth.len = ngx_base64_...",1948.0,2017.0,1.0,1.0,70.0,121,18,59,8,0,25,12,12,11,3,,0,25,2,1,1,ngx_int_t
5666,267509,ngx_http_subrequest,1,ngx_http_subrequest,"ngx_int_t ngx_http_subrequest (ngx_http_request_t*,ngx_str_t*,ngx_str_t*,ngx_http_request_t**,ngx_http_post_subrequest_t*,ngx_uint_t)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_subrequest(ngx_http_request_t *r,
    ngx_str_t *uri, ngx_str_t *args, ngx_http_request_t **psr,
    ngx_http_post_subrequest_t *ps, ngx_uint_t flags)
{
    ngx_time_t                    *tp;
    ngx_connection_t              *c;
    ngx_http_request_t            *sr;
    ngx_http_core_srv_conf_t      *cscf;
    ngx_http_postponed_request_t  *pr, *p;

    if (r->subrequests == 0) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""subrequests cycle while processing \""%V\"""", uri);
        return NGX_ERROR;
    }

    /*
     * 1000 is reserved for other purposes.
     */
    if (r->main->count >= 65535 - 1000) {
        ngx_log_error(NGX_LOG_CRIT, r->connection->log, 0,
                      ""request reference counter overflow ""
                      ""while processing \""%V\"""", uri);
        return NGX_ERROR;
    }

    if (r->subrequest_in_memory) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""neste...",2314.0,2495.0,1.0,1.0,182.0,202,16,173,33,2,18,16,21,2,11,,0,12,12,6,6,ngx_int_t
5667,268103,ngx_http_internal_redirect,1,ngx_http_internal_redirect,"ngx_int_t ngx_http_internal_redirect (ngx_http_request_t*,ngx_str_t*,ngx_str_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_internal_redirect(ngx_http_request_t *r,
    ngx_str_t *uri, ngx_str_t *args)
{
    ngx_http_core_srv_conf_t  *cscf;

    r->uri_changes--;

    if (r->uri_changes == 0) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""rewrite or internal redirection cycle ""
                      ""while internally redirecting to \""%V\"""", uri);

        r->main->count++;
        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_DONE;
    }

    r->uri = *uri;

    if (args) {
        r->args = *args;

    } else {
        ngx_str_null(&r->args);
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""internal redirect: \""%V?%V\"""", uri, &r->args);

    ngx_http_set_exten(r);

    /* clear the modules contexts */
    ngx_memzero(r->ctx, sizeof(void *) * ngx_http_max_module);

    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
    r->loc_conf = cscf->ctx->loc_conf;

    ngx...",2498.0,2550.0,1.0,1.0,53.0,36,9,34,11,3,7,3,3,0,5,,0,2,6,3,3,ngx_int_t
5668,268230,ngx_http_named_location,1,ngx_http_named_location,"ngx_int_t ngx_http_named_location (ngx_http_request_t*,ngx_str_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_named_location(ngx_http_request_t *r, ngx_str_t *name)
{
    ngx_http_core_srv_conf_t    *cscf;
    ngx_http_core_loc_conf_t   **clcfp;
    ngx_http_core_main_conf_t   *cmcf;

    r->main->count++;
    r->uri_changes--;

    if (r->uri_changes == 0) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""rewrite or internal redirection cycle ""
                      ""while redirect to named location \""%V\"""", name);

        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_DONE;
    }

    if (r->uri.len == 0) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""empty URI in redirect to named location \""%V\"""", name);

        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_DONE;
    }

    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

    if (cscf->named_locations) {

        for (clcfp = cscf->named_locations; *clcfp; clcfp++) {...",2553.0,2626.0,1.0,1.0,74.0,64,12,60,13,1,16,7,9,4,8,,0,8,4,2,2,ngx_int_t
5669,268449,ngx_http_cleanup_add,1,ngx_http_cleanup_add,"ngx_http_cleanup_t ngx_http_cleanup_add (ngx_http_request_t*,size_t)",http\ngx_http_core_module.c,"ngx_http_cleanup_t *
ngx_http_cleanup_add(ngx_http_request_t *r, size_t size)
{
    ngx_http_cleanup_t  *cln;

    r = r->main;

    cln = ngx_palloc(r->pool, sizeof(ngx_http_cleanup_t));
    if (cln == NULL) {
        return NULL;
    }

    if (size) {
        cln->data = ngx_palloc(r->pool, size);
        if (cln->data == NULL) {
            return NULL;
        }

    } else {
        cln->data = NULL;
    }

    cln->handler = NULL;
    cln->next = r->cleanup;

    r->cleanup = cln;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http cleanup add: %p"", cln);

    return cln;
}",2629.0,2660.0,1.0,1.0,32.0,20,4,25,6,1,2,4,5,0,2,,0,2,4,2,2,ngx_http_cleanup_t
5670,268533,ngx_http_set_disable_symlinks,1,ngx_http_set_disable_symlinks,"ngx_int_t ngx_http_set_disable_symlinks (ngx_http_request_t*,ngx_http_core_loc_conf_t*,ngx_str_t*,ngx_open_file_info_t*)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_set_disable_symlinks(ngx_http_request_t *r,
    ngx_http_core_loc_conf_t *clcf, ngx_str_t *path, ngx_open_file_info_t *of)
{
#if (NGX_HAVE_OPENAT)
    u_char     *p;
    ngx_str_t   from;

    of->disable_symlinks = clcf->disable_symlinks;

    if (clcf->disable_symlinks_from == NULL) {
        return NGX_OK;
    }

    if (ngx_http_complex_value(r, clcf->disable_symlinks_from, &from)
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (from.len == 0
        || from.len > path->len
        || ngx_memcmp(path->data, from.data, from.len) != 0)
    {
        return NGX_OK;
    }

    if (from.len == path->len) {
        of->disable_symlinks = NGX_DISABLE_SYMLINKS_OFF;
        return NGX_OK;
    }

    p = path->data + from.len;

    if (*p == '/') {
        of->disable_symlinks_from = from.len;
        return NGX_OK;
    }

    p--;

    if (*p == '/') {
        of->disable_symlinks_from = from.len - 1;
    }
#endif

    return NGX_OK;
}",2663.0,2710.0,1.0,1.0,48.0,0,0,1,1,3,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5671,268543,ngx_http_get_forwarded_addr,1,ngx_http_get_forwarded_addr,"ngx_int_t ngx_http_get_forwarded_addr (ngx_http_request_t*,ngx_addr_t*,ngx_array_t*,ngx_str_t*,ngx_array_t*,int)",http\ngx_http_core_module.c,"ngx_int_t
ngx_http_get_forwarded_addr(ngx_http_request_t *r, ngx_addr_t *addr,
    ngx_array_t *headers, ngx_str_t *value, ngx_array_t *proxies,
    int recursive)
{
    ngx_int_t          rc;
    ngx_uint_t         i, found;
    ngx_table_elt_t  **h;

    if (headers == NULL) {
        return ngx_http_get_forwarded_addr_internal(r, addr, value->data,
                                                    value->len, proxies,
                                                    recursive);
    }

    i = headers->nelts;
    h = headers->elts;

    rc = NGX_DECLINED;

    found = 0;

    while (i-- > 0) {
        rc = ngx_http_get_forwarded_addr_internal(r, addr, h[i]->value.data,
                                                  h[i]->value.len, proxies,
                                                  recursive);

        if (!recursive) {
            break;
        }

        if (rc == NGX_DECLINED && found) {
            rc = NGX_DONE;
            break;
        }

        if (rc !=...",2713.0,2757.0,1.0,1.0,45.0,24,10,35,14,1,6,9,9,0,2,,0,5,12,6,6,ngx_int_t
5672,274477,ngx_http_phase_handler_pt,1,ngx_http_phase_handler_pt,"ngx_int_t ngx_http_phase_handler_pt (ngx_http_request_t*,ngx_http_phase_handler_t*)",http\ngx_http_core_module.h,"typedef ngx_int_t (*ngx_http_phase_handler_pt)(ngx_http_request_t *r,
    ngx_http_phase_handler_t *ph);",130.0,131.0,19.0,33.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5673,274822,ngx_http_output_header_filter_pt,1,ngx_http_output_header_filter_pt,ngx_int_t ngx_http_output_header_filter_pt (ngx_http_request_t*),http\ngx_http_core_module.h,typedef ngx_int_t (*ngx_http_output_header_filter_pt)(ngx_http_request_t *r);,515.0,515.0,19.0,76.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5674,274827,ngx_http_output_body_filter_pt,1,ngx_http_output_body_filter_pt,"ngx_int_t ngx_http_output_body_filter_pt (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_core_module.h,"typedef ngx_int_t (*ngx_http_output_body_filter_pt)
    (ngx_http_request_t *r, ngx_chain_t *chain);",516.0,517.0,19.0,47.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5675,274833,ngx_http_request_body_filter_pt,1,ngx_http_request_body_filter_pt,"ngx_int_t ngx_http_request_body_filter_pt (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_core_module.h,"typedef ngx_int_t (*ngx_http_request_body_filter_pt)
    (ngx_http_request_t *r, ngx_chain_t *chain);",518.0,519.0,19.0,47.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5676,274845,ngx_http_write_filter,1,ngx_http_write_filter,"ngx_int_t ngx_http_write_filter (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_write_filter_module.c,"ngx_int_t
ngx_http_write_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    off_t                      size, sent, nsent, limit;
    ngx_uint_t                 last, flush, sync;
    ngx_msec_t                 delay;
    ngx_chain_t               *cl, *ln, **ll, *chain;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;

    if (c->error) {
        return NGX_ERROR;
    }

    size = 0;
    flush = 0;
    sync = 0;
    last = 0;
    ll = &r->out;

    /* find the size, the flush point and the last link of the saved chain */

    for (cl = r->out; cl; cl = cl->next) {
        ll = &cl->next;

        ngx_log_debug7(NGX_LOG_DEBUG_EVENT, c->log, 0,
                       ""write old buf t:%d f:%d %p, pos %p, size: %z ""
                       ""file: %O, size: %O"",
                       cl->buf->temporary, cl->buf->in_file,
                       cl->buf->start, cl->buf->pos,
                       cl->buf->last - cl->buf->pos,
              ...",47.0,358.0,1.0,1.0,312.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5677,274851,ngx_http_request_body_save_filter,1,ngx_http_request_body_save_filter,"ngx_int_t ngx_http_request_body_save_filter (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_request_body.c,"ngx_int_t
ngx_http_request_body_save_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_buf_t                 *b;
    ngx_chain_t               *cl;
    ngx_http_request_body_t   *rb;

    rb = r->request_body;

#if (NGX_DEBUG)

#if 0
    for (cl = rb->bufs; cl; cl = cl->next) {
        ngx_log_debug7(NGX_LOG_DEBUG_EVENT, r->connection->log, 0,
                       ""http body old buf t:%d f:%d %p, pos %p, size: %z ""
                       ""file: %O, size: %O"",
                       cl->buf->temporary, cl->buf->in_file,
                       cl->buf->start, cl->buf->pos,
                       cl->buf->last - cl->buf->pos,
                       cl->buf->file_pos,
                       cl->buf->file_last - cl->buf->file_pos);
    }
#endif

    for (cl = in; cl; cl = cl->next) {
        ngx_log_debug7(NGX_LOG_DEBUG_EVENT, r->connection->log, 0,
                       ""http body new buf t:%d f:%d %p, pos %p, size: %z ""
                       ""file: %O, size: %O"",
           ...",1185.0,1271.0,1.0,1.0,87.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5678,274891,ngx_http_file_cache_lock,1,ngx_http_file_cache_lock,"ngx_int_t ngx_http_file_cache_lock (ngx_http_request_t*,ngx_http_cache_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_lock(ngx_http_request_t *r, ngx_http_cache_t *c)
{
    ngx_msec_t                 now, timer;
    ngx_http_file_cache_t     *cache;

    if (!c->lock) {
        return NGX_DECLINED;
    }

    now = ngx_current_msec;

    cache = c->file_cache;

    ngx_shmtx_lock(&cache->shpool->mutex);

    timer = c->node->lock_time - now;

    if (!c->node->updating || (ngx_msec_int_t) timer <= 0) {
        c->node->updating = 1;
        c->node->lock_time = now + c->lock_age;
        c->updating = 1;
        c->lock_time = c->node->lock_time;
    }

    ngx_shmtx_unlock(&cache->shpool->mutex);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache lock u:%d wt:%M"",
                   c->updating, c->wait_time);

    if (c->updating) {
        return NGX_DECLINED;
    }

    if (c->lock_timeout == 0) {
        return NGX_HTTP_CACHE_SCARCE;
    }

    c->waiting = 1;

    if (c->wait_time == 0) {
        c->wait_time...",404.0,460.0,1.0,1.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5679,274897,ngx_http_file_cache_lock_wait_handler,1,ngx_http_file_cache_lock_wait_handler,void ngx_http_file_cache_lock_wait_handler (ngx_event_t*),http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_lock_wait_handler(ngx_event_t *ev)
{
    ngx_connection_t    *c;
    ngx_http_request_t  *r;

    r = ev->data;
    c = r->connection;

    ngx_http_set_log_request(c->log, r);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http file cache wait: \""%V?%V\"""", &r->uri, &r->args);

    ngx_http_file_cache_lock_wait(r, r->cache);

    ngx_http_run_posted_requests(c);
}",463.0,480.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5680,274902,ngx_http_file_cache_lock_wait,1,ngx_http_file_cache_lock_wait,"void ngx_http_file_cache_lock_wait (ngx_http_request_t*,ngx_http_cache_t*)",http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_lock_wait(ngx_http_request_t *r, ngx_http_cache_t *c)
{
    ngx_uint_t              wait;
    ngx_msec_t              now, timer;
    ngx_http_file_cache_t  *cache;

    now = ngx_current_msec;

    timer = c->wait_time - now;

    if ((ngx_msec_int_t) timer <= 0) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""cache lock timeout"");
        c->lock_timeout = 0;
        goto wakeup;
    }

    cache = c->file_cache;
    wait = 0;

    ngx_shmtx_lock(&cache->shpool->mutex);

    timer = c->node->lock_time - now;

    if (c->node->updating && (ngx_msec_int_t) timer > 0) {
        wait = 1;
    }

    ngx_shmtx_unlock(&cache->shpool->mutex);

    if (wait) {
        ngx_add_timer(&c->wait_event, (timer > 500) ? 500 : timer);
        return;
    }

wakeup:

    c->waiting = 0;
    r->main->blocked--;
    r->write_event_handler(r);
}",483.0,524.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5681,274908,ngx_http_file_cache_read,1,ngx_http_file_cache_read,"ngx_int_t ngx_http_file_cache_read (ngx_http_request_t*,ngx_http_cache_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_read(ngx_http_request_t *r, ngx_http_cache_t *c)
{
    u_char                        *p;
    time_t                         now;
    ssize_t                        n;
    ngx_str_t                     *key;
    ngx_int_t                      rc;
    ngx_uint_t                     i;
    ngx_http_file_cache_t         *cache;
    ngx_http_file_cache_header_t  *h;

    n = ngx_http_file_cache_aio_read(r, c);

    if (n < 0) {
        return n;
    }

    if ((size_t) n < c->header_start) {
        ngx_log_error(NGX_LOG_CRIT, r->connection->log, 0,
                      ""cache file \""%s\"" is too small"", c->file.name.data);
        return NGX_DECLINED;
    }

    h = (ngx_http_file_cache_header_t *) c->buf->pos;

    if (h->version != NGX_HTTP_CACHE_VERSION) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""cache file \""%s\"" version mismatch"", c->file.name.data);
        return NGX_DECLINED;
    }

    if (h->crc32 !=...",527.0,665.0,1.0,1.0,139.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5682,274914,ngx_http_file_cache_aio_read,1,ngx_http_file_cache_aio_read,"ssize_t ngx_http_file_cache_aio_read (ngx_http_request_t*,ngx_http_cache_t*)",http\ngx_http_file_cache.c,"static ssize_t
ngx_http_file_cache_aio_read(ngx_http_request_t *r, ngx_http_cache_t *c)
{
#if (NGX_HAVE_FILE_AIO || NGX_THREADS)
    ssize_t                    n;
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
#endif

#if (NGX_HAVE_FILE_AIO)

    if (clcf->aio == NGX_HTTP_AIO_ON && ngx_file_aio) {
        n = ngx_file_aio_read(&c->file, c->buf->pos, c->body_start, 0, r->pool);

        if (n != NGX_AGAIN) {
            c->reading = 0;
            return n;
        }

        c->reading = 1;

        c->file.aio->data = r;
        c->file.aio->handler = ngx_http_cache_aio_event_handler;

        r->main->blocked++;
        r->aio = 1;

        return NGX_AGAIN;
    }

#endif

#if (NGX_THREADS)

    if (clcf->aio == NGX_HTTP_AIO_THREADS) {
        c->file.thread_task = c->thread_task;
        c->file.thread_handler = ngx_http_cache_thread_handler;
        c->file.thread_ctx = r;

        n = ngx_thread_read(&c->file, c->buf->pos...",668.0,719.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ssize_t
5683,274920,ngx_http_file_cache_exists,1,ngx_http_file_cache_exists,"ngx_int_t ngx_http_file_cache_exists (ngx_http_file_cache_t*,ngx_http_cache_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_exists(ngx_http_file_cache_t *cache, ngx_http_cache_t *c)
{
    ngx_int_t                    rc;
    ngx_http_file_cache_node_t  *fcn;

    ngx_shmtx_lock(&cache->shpool->mutex);

    fcn = c->node;

    if (fcn == NULL) {
        fcn = ngx_http_file_cache_lookup(cache, c->key);
    }

    if (fcn) {
        ngx_queue_remove(&fcn->queue);

        if (c->node == NULL) {
            fcn->uses++;
            fcn->count++;
        }

        if (fcn->error) {

            if (fcn->valid_sec < ngx_time()) {
                goto renew;
            }

            rc = NGX_OK;

            goto done;
        }

        if (fcn->exists || fcn->uses >= c->min_uses) {

            c->exists = fcn->exists;
            if (fcn->body_start && !c->update_variant) {
                c->body_start = fcn->body_start;
            }

            rc = NGX_OK;

            goto done;
        }

        rc = NGX_AGAIN;

        goto done;
    }

    fcn = ngx_slab_call...",821.0,931.0,1.0,1.0,111.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5684,274926,ngx_http_file_cache_name,1,ngx_http_file_cache_name,"ngx_int_t ngx_http_file_cache_name (ngx_http_request_t*,ngx_path_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_name(ngx_http_request_t *r, ngx_path_t *path)
{
    u_char            *p;
    ngx_http_cache_t  *c;

    c = r->cache;

    if (c->file.name.len) {
        return NGX_OK;
    }

    c->file.name.len = path->name.len + 1 + path->len
                       + 2 * NGX_HTTP_CACHE_KEY_LEN;

    c->file.name.data = ngx_pnalloc(r->pool, c->file.name.len + 1);
    if (c->file.name.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(c->file.name.data, path->name.data, path->name.len);

    p = c->file.name.data + path->name.len + 1 + path->len;
    p = ngx_hex_dump(p, c->key, NGX_HTTP_CACHE_KEY_LEN);
    *p = '\0';

    ngx_create_hashed_filename(path, c->file.name.data, c->file.name.len);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""cache file: \""%s\"""", c->file.name.data);

    return NGX_OK;
}",934.0,966.0,1.0,1.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5685,274932,ngx_http_file_cache_lookup,1,ngx_http_file_cache_lookup,"ngx_http_file_cache_node_t* ngx_http_file_cache_lookup (ngx_http_file_cache_t*,u_char*)",http\ngx_http_file_cache.c,"static ngx_http_file_cache_node_t *
ngx_http_file_cache_lookup(ngx_http_file_cache_t *cache, u_char *key)
{
    ngx_int_t                    rc;
    ngx_rbtree_key_t             node_key;
    ngx_rbtree_node_t           *node, *sentinel;
    ngx_http_file_cache_node_t  *fcn;

    ngx_memcpy((u_char *) &node_key, key, sizeof(ngx_rbtree_key_t));

    node = cache->sh->rbtree.root;
    sentinel = cache->sh->rbtree.sentinel;

    while (node != sentinel) {

        if (node_key < node->key) {
            node = node->left;
            continue;
        }

        if (node_key > node->key) {
            node = node->right;
            continue;
        }

        /* node_key == node->key */

        fcn = (ngx_http_file_cache_node_t *) node;

        rc = ngx_memcmp(&key[sizeof(ngx_rbtree_key_t)], fcn->key,
                        NGX_HTTP_CACHE_KEY_LEN - sizeof(ngx_rbtree_key_t));

        if (rc == 0) {
            return fcn;
        }

        node = (rc < 0) ? node->left : node->rig...",969.0,1011.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_http_file_cache_node_t
5686,274938,ngx_http_file_cache_rbtree_insert_value,1,ngx_http_file_cache_rbtree_insert_value,"void ngx_http_file_cache_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t           **p;
    ngx_http_file_cache_node_t   *cn, *cnt;

    for ( ;; ) {

        if (node->key < temp->key) {

            p = &temp->left;

        } else if (node->key > temp->key) {

            p = &temp->right;

        } else { /* node->key == temp->key */

            cn = (ngx_http_file_cache_node_t *) node;
            cnt = (ngx_http_file_cache_node_t *) temp;

            p = (ngx_memcmp(cn->key, cnt->key,
                            NGX_HTTP_CACHE_KEY_LEN - sizeof(ngx_rbtree_key_t))
                 < 0)
                    ? &temp->left : &temp->right;
        }

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",1014.0,1054.0,1.0,1.0,41.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5687,274945,ngx_http_file_cache_vary,1,ngx_http_file_cache_vary,"void ngx_http_file_cache_vary (ngx_http_request_t*,u_char*,size_t,u_char*)",http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_vary(ngx_http_request_t *r, u_char *vary, size_t len,
    u_char *hash)
{
    u_char     *p, *last;
    ngx_str_t   name;
    ngx_md5_t   md5;
    u_char      buf[NGX_HTTP_CACHE_VARY_LEN];

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache vary: \""%*s\"""", len, vary);

    ngx_md5_init(&md5);
    ngx_md5_update(&md5, r->cache->main, NGX_HTTP_CACHE_KEY_LEN);

    ngx_strlow(buf, vary, len);

    p = buf;
    last = buf + len;

    while (p < last) {

        while (p < last && (*p == ' ' || *p == ',')) { p++; }

        name.data = p;

        while (p < last && *p != ',' && *p != ' ') { p++; }

        name.len = p - name.data;

        if (name.len == 0) {
            break;
        }

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http file cache vary: %V"", &name);

        ngx_md5_update(&md5, name.data, name.len);
        ngx_md5_update(&md5, (u_char *) "":"", ...",1057.0,1103.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,void
5688,274953,ngx_http_file_cache_vary_header,1,ngx_http_file_cache_vary_header,"void ngx_http_file_cache_vary_header (ngx_http_request_t*,ngx_md5_t*,ngx_str_t*)",http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_vary_header(ngx_http_request_t *r, ngx_md5_t *md5,
    ngx_str_t *name)
{
    size_t            len;
    u_char           *p, *start, *last;
    ngx_uint_t        i, multiple, normalize;
    ngx_list_part_t  *part;
    ngx_table_elt_t  *header;

    multiple = 0;
    normalize = 0;

    if (name->len == sizeof(""Accept-Charset"") - 1
        && ngx_strncasecmp(name->data, (u_char *) ""Accept-Charset"",
                           sizeof(""Accept-Charset"") - 1) == 0)
    {
        normalize = 1;

    } else if (name->len == sizeof(""Accept-Encoding"") - 1
        && ngx_strncasecmp(name->data, (u_char *) ""Accept-Encoding"",
                           sizeof(""Accept-Encoding"") - 1) == 0)
    {
        normalize = 1;

    } else if (name->len == sizeof(""Accept-Language"") - 1
        && ngx_strncasecmp(name->data, (u_char *) ""Accept-Language"",
                           sizeof(""Accept-Language"") - 1) == 0)
    {
        normalize = 1;
    }

    part = &r->headers...",1106.0,1206.0,1.0,1.0,101.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5689,274960,ngx_http_file_cache_reopen,1,ngx_http_file_cache_reopen,"ngx_int_t ngx_http_file_cache_reopen (ngx_http_request_t*,ngx_http_cache_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_reopen(ngx_http_request_t *r, ngx_http_cache_t *c)
{
    ngx_http_file_cache_t  *cache;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->file.log, 0,
                   ""http file cache reopen"");

    if (c->secondary) {
        ngx_log_error(NGX_LOG_CRIT, r->connection->log, 0,
                      ""cache file \""%s\"" has incorrect vary hash"",
                      c->file.name.data);
        return NGX_DECLINED;
    }

    cache = c->file_cache;

    ngx_shmtx_lock(&cache->shpool->mutex);

    c->node->count--;
    c->node = NULL;

    ngx_shmtx_unlock(&cache->shpool->mutex);

    c->secondary = 1;
    c->file.name.len = 0;
    c->body_start = c->buffer_size;

    ngx_memcpy(c->key, c->variant, NGX_HTTP_CACHE_KEY_LEN);

    return ngx_http_file_cache_open(r);
}",1209.0,1240.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5690,274966,ngx_http_file_cache_update_variant,1,ngx_http_file_cache_update_variant,"ngx_int_t ngx_http_file_cache_update_variant (ngx_http_request_t*,ngx_http_cache_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_update_variant(ngx_http_request_t *r, ngx_http_cache_t *c)
{
    ngx_http_file_cache_t  *cache;

    if (!c->secondary) {
        return NGX_OK;
    }

    if (c->vary.len
        && ngx_memcmp(c->variant, c->key, NGX_HTTP_CACHE_KEY_LEN) == 0)
    {
        return NGX_OK;
    }

    /*
     * if the variant hash doesn't match one we used as a secondary
     * cache key, switch back to the original key
     */

    cache = c->file_cache;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http file cache main key"");

    ngx_shmtx_lock(&cache->shpool->mutex);

    c->node->count--;
    c->node->updating = 0;
    c->node = NULL;

    ngx_shmtx_unlock(&cache->shpool->mutex);

    c->file.name.len = 0;
    c->update_variant = 1;

    ngx_memcpy(c->key, c->main, NGX_HTTP_CACHE_KEY_LEN);

    if (ngx_http_file_cache_exists(cache, c) == NGX_ERROR) {
        return NGX_ERROR;
    }

    if (ngx_http_file_cache_name(r, cache...",1308.0,1355.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5691,274972,ngx_http_file_cache_cleanup,1,ngx_http_file_cache_cleanup,void ngx_http_file_cache_cleanup (void*),http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_cleanup(void *data)
{
    ngx_http_cache_t  *c = data;

    if (c->updated) {
        return;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->file.log, 0,
                   ""http file cache cleanup"");

    if (c->updating && !c->background) {
        ngx_log_error(NGX_LOG_ALERT, c->file.log, 0,
                      ""stalled cache updating, error:%ui"", c->error);
    }

    ngx_http_file_cache_free(c, NULL);
}",1683.0,1701.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5692,274977,ngx_http_file_cache_forced_expire,1,ngx_http_file_cache_forced_expire,time_t ngx_http_file_cache_forced_expire (ngx_http_file_cache_t*),http\ngx_http_file_cache.c,"static time_t
ngx_http_file_cache_forced_expire(ngx_http_file_cache_t *cache)
{
    u_char                      *name, *p;
    size_t                       len;
    time_t                       wait;
    ngx_uint_t                   tries;
    ngx_path_t                  *path;
    ngx_queue_t                 *q, *sentinel;
    ngx_http_file_cache_node_t  *fcn;
    u_char                       key[2 * NGX_HTTP_CACHE_KEY_LEN];

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                   ""http file cache forced expire"");

    path = cache->path;
    len = path->name.len + 1 + path->len + 2 * NGX_HTTP_CACHE_KEY_LEN;

    name = ngx_alloc(len + 1, ngx_cycle->log);
    if (name == NULL) {
        return 10;
    }

    ngx_memcpy(name, path->name.data, path->name.len);

    wait = 10;
    tries = 20;
    sentinel = NULL;

    ngx_shmtx_lock(&cache->shpool->mutex);

    for ( ;; ) {
        if (ngx_queue_empty(&cache->sh->queue)) {
            break;
        }

        q =...",1704.0,1795.0,1.0,1.0,92.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,time_t
5693,274982,ngx_http_file_cache_expire,1,ngx_http_file_cache_expire,time_t ngx_http_file_cache_expire (ngx_http_file_cache_t*),http\ngx_http_file_cache.c,"static time_t
ngx_http_file_cache_expire(ngx_http_file_cache_t *cache)
{
    u_char                      *name, *p;
    size_t                       len;
    time_t                       now, wait;
    ngx_path_t                  *path;
    ngx_msec_t                   elapsed;
    ngx_queue_t                 *q;
    ngx_http_file_cache_node_t  *fcn;
    u_char                       key[2 * NGX_HTTP_CACHE_KEY_LEN];

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                   ""http file cache expire"");

    path = cache->path;
    len = path->name.len + 1 + path->len + 2 * NGX_HTTP_CACHE_KEY_LEN;

    name = ngx_alloc(len + 1, ngx_cycle->log);
    if (name == NULL) {
        return 10;
    }

    ngx_memcpy(name, path->name.data, path->name.len);

    now = ngx_time();

    ngx_shmtx_lock(&cache->shpool->mutex);

    for ( ;; ) {

        if (ngx_quit || ngx_terminate) {
            wait = 1;
            break;
        }

        if (ngx_queue_empty(&cache->sh->queue...",1798.0,1906.0,1.0,1.0,109.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,time_t
5694,274987,ngx_http_file_cache_delete,1,ngx_http_file_cache_delete,"void ngx_http_file_cache_delete (ngx_http_file_cache_t*,ngx_queue_t*,u_char*)",http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_delete(ngx_http_file_cache_t *cache, ngx_queue_t *q,
    u_char *name)
{
    u_char                      *p;
    size_t                       len;
    ngx_path_t                  *path;
    ngx_http_file_cache_node_t  *fcn;

    fcn = ngx_queue_data(q, ngx_http_file_cache_node_t, queue);

    if (fcn->exists) {
        cache->sh->size -= fcn->fs_size;

        path = cache->path;
        p = name + path->name.len + 1 + path->len;
        p = ngx_hex_dump(p, (u_char *) &fcn->node.key,
                         sizeof(ngx_rbtree_key_t));
        len = NGX_HTTP_CACHE_KEY_LEN - sizeof(ngx_rbtree_key_t);
        p = ngx_hex_dump(p, fcn->key, len);
        *p = '\0';

        fcn->count++;
        fcn->deleting = 1;
        ngx_shmtx_unlock(&cache->shpool->mutex);

        len = path->name.len + 1 + path->len + 2 * NGX_HTTP_CACHE_KEY_LEN;
        ngx_create_hashed_filename(path, name, len);

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
     ...",1909.0,1957.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5695,274994,ngx_http_file_cache_loader_sleep,1,ngx_http_file_cache_loader_sleep,void ngx_http_file_cache_loader_sleep (ngx_http_file_cache_t*),http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_loader_sleep(ngx_http_file_cache_t *cache)
{
    ngx_msleep(cache->loader_sleep);

    ngx_time_update();

    cache->last = ngx_current_msec;
    cache->files = 0;
}",2145.0,2154.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5696,274999,ngx_http_file_cache_noop,1,ngx_http_file_cache_noop,"ngx_int_t ngx_http_file_cache_noop (ngx_tree_ctx_t*,ngx_str_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_noop(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    return NGX_OK;
}",2093.0,2097.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5697,275005,ngx_http_file_cache_manage_file,1,ngx_http_file_cache_manage_file,"ngx_int_t ngx_http_file_cache_manage_file (ngx_tree_ctx_t*,ngx_str_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_manage_file(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    ngx_msec_t              elapsed;
    ngx_http_file_cache_t  *cache;

    cache = ctx->data;

    if (ngx_http_file_cache_add_file(ctx, path) != NGX_OK) {
        (void) ngx_http_file_cache_delete_file(ctx, path);
    }

    if (++cache->files >= cache->loader_files) {
        ngx_http_file_cache_loader_sleep(cache);

    } else {
        ngx_time_update();

        elapsed = ngx_abs((ngx_msec_int_t) (ngx_current_msec - cache->last));

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                       ""http file cache loader time elapsed: %M"", elapsed);

        if (elapsed >= cache->loader_threshold) {
            ngx_http_file_cache_loader_sleep(cache);
        }
    }

    return (ngx_quit || ngx_terminate) ? NGX_ABORT : NGX_OK;
}",2100.0,2129.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5698,275011,ngx_http_file_cache_manage_directory,1,ngx_http_file_cache_manage_directory,"ngx_int_t ngx_http_file_cache_manage_directory (ngx_tree_ctx_t*,ngx_str_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_manage_directory(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    if (path->len >= 5
        && ngx_strncmp(path->data + path->len - 5, ""/temp"", 5) == 0)
    {
        return NGX_DECLINED;
    }

    return NGX_OK;
}",2132.0,2142.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5699,275017,ngx_http_file_cache_add_file,1,ngx_http_file_cache_add_file,"ngx_int_t ngx_http_file_cache_add_file (ngx_tree_ctx_t*,ngx_str_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_add_file(ngx_tree_ctx_t *ctx, ngx_str_t *name)
{
    u_char                 *p;
    ngx_int_t               n;
    ngx_uint_t              i;
    ngx_http_cache_t        c;
    ngx_http_file_cache_t  *cache;

    if (name->len < 2 * NGX_HTTP_CACHE_KEY_LEN) {
        return NGX_ERROR;
    }

    /*
     * Temporary files in cache have a suffix consisting of a dot
     * followed by 10 digits.
     */

    if (name->len >= 2 * NGX_HTTP_CACHE_KEY_LEN + 1 + 10
        && name->data[name->len - 10 - 1] == '.')
    {
        return NGX_OK;
    }

    if (ctx->size < (off_t) sizeof(ngx_http_file_cache_header_t)) {
        ngx_log_error(NGX_LOG_CRIT, ctx->log, 0,
                      ""cache file \""%s\"" is too small"", name->data);
        return NGX_ERROR;
    }

    ngx_memzero(&c, sizeof(ngx_http_cache_t));
    cache = ctx->data;

    c.length = ctx->size;
    c.fs_size = (ctx->fs_size + cache->bsize - 1) / cache->bsize;

    p = &name->data[name->len ...",2157.0,2208.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5700,275023,ngx_http_file_cache_add,1,ngx_http_file_cache_add,"ngx_int_t ngx_http_file_cache_add (ngx_http_file_cache_t*,ngx_http_cache_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_add(ngx_http_file_cache_t *cache, ngx_http_cache_t *c)
{
    ngx_http_file_cache_node_t  *fcn;

    ngx_shmtx_lock(&cache->shpool->mutex);

    fcn = ngx_http_file_cache_lookup(cache, c->key);

    if (fcn == NULL) {

        fcn = ngx_slab_calloc_locked(cache->shpool,
                                     sizeof(ngx_http_file_cache_node_t));
        if (fcn == NULL) {
            ngx_http_file_cache_set_watermark(cache);

            if (cache->fail_time != ngx_time()) {
                cache->fail_time = ngx_time();
                ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0,
                           ""could not allocate node%s"", cache->shpool->log_ctx);
            }

            ngx_shmtx_unlock(&cache->shpool->mutex);
            return NGX_ERROR;
        }

        cache->sh->count++;

        ngx_memcpy((u_char *) &fcn->node.key, c->key, sizeof(ngx_rbtree_key_t));

        ngx_memcpy(fcn->key, &c->key[sizeof(ngx_rbtree_key_t)],
        ...",2211.0,2263.0,1.0,1.0,53.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5701,275029,ngx_http_file_cache_delete_file,1,ngx_http_file_cache_delete_file,"ngx_int_t ngx_http_file_cache_delete_file (ngx_tree_ctx_t*,ngx_str_t*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_delete_file(ngx_tree_ctx_t *ctx, ngx_str_t *path)
{
    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ctx->log, 0,
                   ""http file cache delete: \""%s\"""", path->data);

    if (ngx_delete_file(path->data) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_CRIT, ctx->log, ngx_errno,
                      ngx_delete_file_n "" \""%s\"" failed"", path->data);
    }

    return NGX_OK;
}",2266.0,2278.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5702,275035,ngx_http_file_cache_set_watermark,1,ngx_http_file_cache_set_watermark,void ngx_http_file_cache_set_watermark (ngx_http_file_cache_t*),http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_set_watermark(ngx_http_file_cache_t *cache)
{
    cache->sh->watermark = cache->sh->count - cache->sh->count / 8;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                   ""http file cache watermark: %ui"", cache->sh->watermark);
}",2281.0,2288.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5703,275068,ngx_http_file_cache_init,1,ngx_http_file_cache_init,"ngx_int_t ngx_http_file_cache_init (ngx_shm_zone_t*,void*)",http\ngx_http_file_cache.c,"static ngx_int_t
ngx_http_file_cache_init(ngx_shm_zone_t *shm_zone, void *data)
{
    ngx_http_file_cache_t  *ocache = data;

    size_t                  len;
    ngx_uint_t              n;
    ngx_http_file_cache_t  *cache;

    cache = shm_zone->data;

    if (ocache) {
        if (ngx_strcmp(cache->path->name.data, ocache->path->name.data) != 0) {
            ngx_log_error(NGX_LOG_EMERG, shm_zone->shm.log, 0,
                          ""cache \""%V\"" uses the \""%V\"" cache path ""
                          ""while previously it used the \""%V\"" cache path"",
                          &shm_zone->shm.name, &cache->path->name,
                          &ocache->path->name);

            return NGX_ERROR;
        }

        for (n = 0; n < NGX_MAX_PATH_LEVEL; n++) {
            if (cache->path->level[n] != ocache->path->level[n]) {
                ngx_log_error(NGX_LOG_EMERG, shm_zone->shm.log, 0,
                              ""cache \""%V\"" had previously different levels"",
                ...",82.0,172.0,1.0,1.0,91.0,139,15,80,13,0,7,9,14,0,7,,0,4,4,2,2,ngx_int_t
5704,280634,ngx_http_file_cache_manager,1,ngx_http_file_cache_manager,ngx_msec_t ngx_http_file_cache_manager (void*),http\ngx_http_file_cache.c,"static ngx_msec_t
ngx_http_file_cache_manager(void *data)
{
    ngx_http_file_cache_t  *cache = data;

    off_t       size, free;
    time_t      wait;
    ngx_msec_t  elapsed, next;
    ngx_uint_t  count, watermark;

    cache->last = ngx_current_msec;
    cache->files = 0;

    next = (ngx_msec_t) ngx_http_file_cache_expire(cache) * 1000;

    if (next == 0) {
        next = cache->manager_sleep;
        goto done;
    }

    for ( ;; ) {
        ngx_shmtx_lock(&cache->shpool->mutex);

        size = cache->sh->size;
        count = cache->sh->count;
        watermark = cache->sh->watermark;

        ngx_shmtx_unlock(&cache->shpool->mutex);

        ngx_log_debug3(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                       ""http file cache size: %O c:%ui w:%i"",
                       size, count, (ngx_int_t) watermark);

        if (size < cache->max_size && count < watermark) {

            if (!cache->min_free) {
                break;
            }

            free = ngx_fs...",1960.0,2044.0,1.0,1.0,85.0,65,15,62,14,0,6,17,19,0,6,,0,3,2,1,1,ngx_msec_t
5705,280859,ngx_http_file_cache_loader,1,ngx_http_file_cache_loader,void ngx_http_file_cache_loader (void*),http\ngx_http_file_cache.c,"static void
ngx_http_file_cache_loader(void *data)
{
    ngx_http_file_cache_t  *cache = data;

    ngx_tree_ctx_t  tree;

    if (!cache->sh->cold || cache->sh->loading) {
        return;
    }

    if (!ngx_atomic_cmp_set(&cache->sh->loading, 0, ngx_pid)) {
        return;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, ngx_cycle->log, 0,
                   ""http file cache loader"");

    tree.init_handler = NULL;
    tree.file_handler = ngx_http_file_cache_manage_file;
    tree.pre_tree_handler = ngx_http_file_cache_manage_directory;
    tree.post_tree_handler = ngx_http_file_cache_noop;
    tree.spec_handler = ngx_http_file_cache_delete_file;
    tree.data = cache;
    tree.alloc = 0;
    tree.log = ngx_cycle->log;

    cache->last = ngx_current_msec;
    cache->files = 0;

    if (ngx_walk_tree(&tree, &cache->path->name) == NGX_ABORT) {
        cache->sh->loading = 0;
        return;
    }

    cache->sh->cold = 0;
    cache->sh->loading = 0;

    ngx_log_error(NGX_LOG_NOTICE, ng...",2047.0,2090.0,1.0,1.0,44.0,59,10,38,14,0,3,4,4,2,3,,0,2,2,1,1,void
5706,283050,ngx_http_header_filter_init,1,ngx_http_header_filter_init,ngx_int_t ngx_http_header_filter_init (ngx_conf_t*),http\ngx_http_header_filter_module.c,"static ngx_int_t
ngx_http_header_filter_init(ngx_conf_t *cf)
{
    ngx_http_top_header_filter = ngx_http_header_filter;

    return NGX_OK;
}",624.0,630.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5707,283055,ngx_http_header_filter,1,ngx_http_header_filter,ngx_int_t ngx_http_header_filter (ngx_http_request_t*),http\ngx_http_header_filter_module.c,"static ngx_int_t
ngx_http_header_filter(ngx_http_request_t *r)
{
    u_char                    *p;
    size_t                     len;
    ngx_str_t                  host, *status_line;
    ngx_buf_t                 *b;
    ngx_uint_t                 status, i, port;
    ngx_chain_t                out;
    ngx_list_part_t           *part;
    ngx_table_elt_t           *header;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_core_srv_conf_t  *cscf;
    u_char                     addr[NGX_SOCKADDR_STRLEN];

    if (r->header_sent) {
        return NGX_OK;
    }

    r->header_sent = 1;

    if (r != r->main) {
        return NGX_OK;
    }

    if (r->http_version < NGX_HTTP_VERSION_10) {
        return NGX_OK;
    }

    if (r->method == NGX_HTTP_HEAD) {
        r->header_only = 1;
    }

    if (r->headers_out.last_modified_time != -1) {
        if (r->headers_out.status != NGX_HTTP_OK
            && r->headers_out.status != NGX_HTTP_PARTIAL_CONTEN...",156.0,621.0,1.0,24.0,466.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5708,290642,ngx_http_postpone_filter_add,1,ngx_http_postpone_filter_add,"ngx_int_t ngx_http_postpone_filter_add (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_postpone_filter_module.c,"static ngx_int_t
ngx_http_postpone_filter_add(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_http_postponed_request_t  *pr, **ppr;

    if (r->postponed) {
        for (pr = r->postponed; pr->next; pr = pr->next) { /* void */ }

        if (pr->request == NULL) {
            goto found;
        }

        ppr = &pr->next;

    } else {
        ppr = &r->postponed;
    }

    pr = ngx_palloc(r->pool, sizeof(ngx_http_postponed_request_t));
    if (pr == NULL) {
        return NGX_ERROR;
    }

    *ppr = pr;

    pr->request = NULL;
    pr->out = NULL;
    pr->next = NULL;

found:

    if (ngx_chain_add_copy(r->pool, &pr->out, in) == NGX_OK) {
        return NGX_OK;
    }

    return NGX_ERROR;
}",141.0,177.0,1.0,1.0,37.0,0,0,0,0,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5709,290648,ngx_http_postpone_filter_in_memory,1,ngx_http_postpone_filter_in_memory,"ngx_int_t ngx_http_postpone_filter_in_memory (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_postpone_filter_module.c,"static ngx_int_t
ngx_http_postpone_filter_in_memory(ngx_http_request_t *r, ngx_chain_t *in)
{
    size_t                     len;
    ngx_buf_t                 *b;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http postpone filter in memory"");

    if (r->out == NULL) {
        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

        if (r->headers_out.content_length_n != -1) {
            len = r->headers_out.content_length_n;

            if (len > clcf->subrequest_output_buffer_size) {
                ngx_log_error(NGX_LOG_ERR, c->log, 0,
                              ""too big subrequest response: %uz"", len);
                return NGX_ERROR;
            }

        } else {
            len = clcf->subrequest_output_buffer_size;
        }

        b = ngx_create_temp_buf(r->pool, len);
        if (b == NULL) {
            return NGX_ERROR;
        }...",180.0,249.0,1.0,1.0,70.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5710,290654,ngx_http_postpone_filter_init,1,ngx_http_postpone_filter_init,ngx_int_t ngx_http_postpone_filter_init (ngx_conf_t*),http\ngx_http_postpone_filter_module.c,"static ngx_int_t
ngx_http_postpone_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_body_filter = ngx_http_top_body_filter;
    ngx_http_top_body_filter = ngx_http_postpone_filter;

    return NGX_OK;
}",252.0,259.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5711,290689,ngx_http_postpone_filter,1,ngx_http_postpone_filter,"ngx_int_t ngx_http_postpone_filter (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_postpone_filter_module.c,"static ngx_int_t
ngx_http_postpone_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    ngx_connection_t              *c;
    ngx_http_postponed_request_t  *pr;

    c = r->connection;

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http postpone filter \""%V?%V\"" %p"", &r->uri, &r->args, in);

    if (r->subrequest_in_memory) {
        return ngx_http_postpone_filter_in_memory(r, in);
    }

    if (r != c->data) {

        if (in) {
            if (ngx_http_postpone_filter_add(r, in) != NGX_OK) {
                return NGX_ERROR;
            }

            return NGX_OK;
        }

#if 0
        /* TODO: SSI may pass NULL */
        ngx_log_error(NGX_LOG_ALERT, c->log, 0,
                      ""http postpone filter NULL inactive request"");
#endif

        return NGX_OK;
    }

    if (r->postponed == NULL) {

        if (in || c->buffered) {
            return ngx_http_next_body_filter(r->main, in);
        }

        return NGX_OK;
    }

    if (in) {
      ...",54.0,138.0,1.0,1.0,85.0,41,6,52,9,0,5,12,19,2,5,,0,2,4,2,2,ngx_int_t
5712,291235,ngx_http_wait_request_handler,1,ngx_http_wait_request_handler,void ngx_http_wait_request_handler (ngx_event_t*),http\ngx_http_request.c,"static void
ngx_http_wait_request_handler(ngx_event_t *rev)
{
    u_char                    *p;
    size_t                     size;
    ssize_t                    n;
    ngx_buf_t                 *b;
    ngx_connection_t          *c;
    ngx_http_connection_t     *hc;
    ngx_http_core_srv_conf_t  *cscf;

    c = rev->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, ""http wait request handler"");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        ngx_http_close_connection(c);
        return;
    }

    if (c->close) {
        ngx_http_close_connection(c);
        return;
    }

    hc = c->data;
    cscf = ngx_http_get_module_srv_conf(hc->conf_ctx, ngx_http_core_module);

    size = cscf->client_header_buffer_size;

    b = c->buffer;

    if (b == NULL) {
        b = ngx_create_temp_buf(c->pool, size);
        if (b == NULL) {
            ngx_http_close_connection(c);
            return;
        }

        c->bu...",377.0,504.0,1.0,1.0,128.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5713,291240,ngx_http_alloc_request,1,ngx_http_alloc_request,ngx_http_request_t* ngx_http_alloc_request (ngx_connection_t*),http\ngx_http_request.c,"static ngx_http_request_t *
ngx_http_alloc_request(ngx_connection_t *c)
{
    ngx_pool_t                 *pool;
    ngx_time_t                 *tp;
    ngx_http_request_t         *r;
    ngx_http_connection_t      *hc;
    ngx_http_core_srv_conf_t   *cscf;
    ngx_http_core_main_conf_t  *cmcf;

    hc = c->data;

    cscf = ngx_http_get_module_srv_conf(hc->conf_ctx, ngx_http_core_module);

    pool = ngx_create_pool(cscf->request_pool_size, c->log);
    if (pool == NULL) {
        return NULL;
    }

    r = ngx_pcalloc(pool, sizeof(ngx_http_request_t));
    if (r == NULL) {
        ngx_destroy_pool(pool);
        return NULL;
    }

    r->pool = pool;

    r->http_connection = hc;
    r->signature = NGX_HTTP_MODULE;
    r->connection = c;

    r->main_conf = hc->conf_ctx->main_conf;
    r->srv_conf = hc->conf_ctx->srv_conf;
    r->loc_conf = hc->conf_ctx->loc_conf;

    r->read_event_handler = ngx_http_block_reading;

    r->header_in = hc->busy ? hc->busy->buf : c->buffer;

    i...",539.0,638.0,1.0,1.0,100.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_http_request_t
5714,291245,ngx_http_process_request_line,1,ngx_http_process_request_line,void ngx_http_process_request_line (ngx_event_t*),http\ngx_http_request.c,"static void
ngx_http_process_request_line(ngx_event_t *rev)
{
    ssize_t              n;
    ngx_int_t            rc, rv;
    ngx_str_t            host;
    ngx_connection_t    *c;
    ngx_http_request_t  *r;

    c = rev->data;
    r = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, rev->log, 0,
                   ""http process request line"");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_http_close_request(r, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    rc = NGX_AGAIN;

    for ( ;; ) {

        if (rc == NGX_AGAIN) {
            n = ngx_http_read_request_header(r);

            if (n == NGX_AGAIN || n == NGX_ERROR) {
                break;
            }
        }

        rc = ngx_http_parse_request_line(r, r->header_in);

        if (rc == NGX_OK) {

            /* the request line has been parsed successfully */

            r->request_line.len = r->request_end - r->requ...",1063.0,1223.0,1.0,1.0,161.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5715,291250,ngx_http_process_request_headers,1,ngx_http_process_request_headers,void ngx_http_process_request_headers (ngx_event_t*),http\ngx_http_request.c,"static void
ngx_http_process_request_headers(ngx_event_t *rev)
{
    u_char                     *p;
    size_t                      len;
    ssize_t                     n;
    ngx_int_t                   rc, rv;
    ngx_table_elt_t            *h;
    ngx_connection_t           *c;
    ngx_http_header_t          *hh;
    ngx_http_request_t         *r;
    ngx_http_core_srv_conf_t   *cscf;
    ngx_http_core_main_conf_t  *cmcf;

    c = rev->data;
    r = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, rev->log, 0,
                   ""http process request header line"");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_http_close_request(r, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    rc = NGX_AGAIN;

    for ( ;; ) {

        if (rc == NGX_AGAIN) {

            if (r->header_in->pos == r->header_in->end) {

        ...",1347.0,1534.0,1.0,1.0,188.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5716,291255,ngx_http_read_request_header,1,ngx_http_read_request_header,ssize_t ngx_http_read_request_header (ngx_http_request_t*),http\ngx_http_request.c,"static ssize_t
ngx_http_read_request_header(ngx_http_request_t *r)
{
    ssize_t                    n;
    ngx_event_t               *rev;
    ngx_connection_t          *c;
    ngx_http_core_srv_conf_t  *cscf;

    c = r->connection;
    rev = c->read;

    n = r->header_in->last - r->header_in->pos;

    if (n > 0) {
        return n;
    }

    if (rev->ready) {
        n = c->recv(c, r->header_in->last,
                    r->header_in->end - r->header_in->last);
    } else {
        n = NGX_AGAIN;
    }

    if (n == NGX_AGAIN) {
        if (!rev->timer_set) {
            cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
            ngx_add_timer(rev, cscf->client_header_timeout);
        }

        if (ngx_handle_read_event(rev, 0) != NGX_OK) {
            ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
            return NGX_ERROR;
        }

        return NGX_AGAIN;
    }

    if (n == 0) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
               ...",1537.0,1591.0,1.0,1.0,55.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ssize_t
5717,291260,ngx_http_alloc_large_header_buffer,1,ngx_http_alloc_large_header_buffer,"ngx_int_t ngx_http_alloc_large_header_buffer (ngx_http_request_t*,ngx_uint_t)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_alloc_large_header_buffer(ngx_http_request_t *r,
    ngx_uint_t request_line)
{
    u_char                    *old, *new;
    ngx_buf_t                 *b;
    ngx_chain_t               *cl;
    ngx_http_connection_t     *hc;
    ngx_http_core_srv_conf_t  *cscf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http alloc large header buffer"");

    if (request_line && r->state == 0) {

        /* the client fills up the buffer with ""\r\n"" */

        r->header_in->pos = r->header_in->start;
        r->header_in->last = r->header_in->start;

        return NGX_OK;
    }

    old = request_line ? r->request_start : r->header_name_start;

    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

    if (r->state != 0
        && (size_t) (r->header_in->pos - old)
                                     >= cscf->large_client_header_buffers.size)
    {
        return NGX_DECLINED;
    }

    hc = r->http_connection;

    if...",1594.0,1746.0,1.0,1.0,153.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5718,291266,ngx_http_process_header_line,1,ngx_http_process_header_line,"ngx_int_t ngx_http_process_header_line (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_process_header_line(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_table_elt_t  **ph;

    ph = (ngx_table_elt_t **) ((char *) &r->headers_in + offset);

    if (*ph == NULL) {
        *ph = h;
    }

    return NGX_OK;
}",1749.0,1762.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5719,291273,ngx_http_process_unique_header_line,1,ngx_http_process_unique_header_line,"ngx_int_t ngx_http_process_unique_header_line (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_process_unique_header_line(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_table_elt_t  **ph;

    ph = (ngx_table_elt_t **) ((char *) &r->headers_in + offset);

    if (*ph == NULL) {
        *ph = h;
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                  ""client sent duplicate header line: \""%V: %V\"", ""
                  ""previous value: \""%V: %V\"""",
                  &h->key, &h->value, &(*ph)->key, &(*ph)->value);

    ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);

    return NGX_ERROR;
}",1765.0,1786.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5720,291280,ngx_http_process_multi_header_lines,1,ngx_http_process_multi_header_lines,"ngx_int_t ngx_http_process_multi_header_lines (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_process_multi_header_lines(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_array_t       *headers;
    ngx_table_elt_t  **ph;

    headers = (ngx_array_t *) ((char *) &r->headers_in + offset);

    if (headers->elts == NULL) {
        if (ngx_array_init(headers, r->pool, 1, sizeof(ngx_table_elt_t *))
            != NGX_OK)
        {
            ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
            return NGX_ERROR;
        }
    }

    ph = ngx_array_push(headers);
    if (ph == NULL) {
        ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_ERROR;
    }

    *ph = h;
    return NGX_OK;
}",1926.0,1952.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5721,291287,ngx_http_process_host,1,ngx_http_process_host,"ngx_int_t ngx_http_process_host (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_process_host(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_int_t  rc;
    ngx_str_t  host;

    if (r->headers_in.host) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent duplicate host header: \""%V: %V\"", ""
                      ""previous value: \""%V: %V\"""",
                      &h->key, &h->value, &r->headers_in.host->key,
                      &r->headers_in.host->value);
        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        return NGX_ERROR;
    }

    r->headers_in.host = h;

    host = h->value;

    rc = ngx_http_validate_host(&host, r->pool, 0);

    if (rc == NGX_DECLINED) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent invalid host header"");
        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        return NGX_ERROR;
    }

    if (rc == NGX_ERROR) {
        ngx_http_close_request(r, NGX_HTTP_INTERNAL_S...",1789.0,1835.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5722,291294,ngx_http_process_connection,1,ngx_http_process_connection,"ngx_int_t ngx_http_process_connection (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_process_connection(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    if (ngx_strcasestrn(h->value.data, ""close"", 5 - 1)) {
        r->headers_in.connection_type = NGX_HTTP_CONNECTION_CLOSE;

    } else if (ngx_strcasestrn(h->value.data, ""keep-alive"", 10 - 1)) {
        r->headers_in.connection_type = NGX_HTTP_CONNECTION_KEEP_ALIVE;
    }

    return NGX_OK;
}",1838.0,1850.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5723,291301,ngx_http_process_user_agent,1,ngx_http_process_user_agent,"ngx_int_t ngx_http_process_user_agent (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_process_user_agent(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    u_char  *user_agent, *msie;

    if (r->headers_in.user_agent) {
        return NGX_OK;
    }

    r->headers_in.user_agent = h;

    /* check some widespread browsers while the header is in CPU cache */

    user_agent = h->value.data;

    msie = ngx_strstrn(user_agent, ""MSIE "", 5 - 1);

    if (msie && msie + 7 < user_agent + h->value.len) {

        r->headers_in.msie = 1;

        if (msie[6] == '.') {

            switch (msie[5]) {
            case '4':
            case '5':
                r->headers_in.msie6 = 1;
                break;
            case '6':
                if (ngx_strstrn(msie + 8, ""SV1"", 3 - 1) == NULL) {
                    r->headers_in.msie6 = 1;
                }
                break;
            }
        }

#if 0
        /* MSIE ignores the SSL ""close notify"" alert */
        if (c->ssl) {
            c->ssl->no_send_shutdown = 1;
   ...",1853.0,1923.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5724,291308,ngx_http_validate_host,1,ngx_http_validate_host,"ngx_int_t ngx_http_validate_host (ngx_str_t*,ngx_pool_t*,ngx_uint_t)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_validate_host(ngx_str_t *host, ngx_pool_t *pool, ngx_uint_t alloc)
{
    u_char  *h, ch;
    size_t   i, dot_pos, host_len;

    enum {
        sw_usual = 0,
        sw_literal,
        sw_rest
    } state;

    dot_pos = host->len;
    host_len = host->len;

    h = host->data;

    state = sw_usual;

    for (i = 0; i < host->len; i++) {
        ch = h[i];

        switch (ch) {

        case '.':
            if (dot_pos == i - 1) {
                return NGX_DECLINED;
            }
            dot_pos = i;
            break;

        case ':':
            if (state == sw_usual) {
                host_len = i;
                state = sw_rest;
            }
            break;

        case '[':
            if (i == 0) {
                state = sw_literal;
            }
            break;

        case ']':
            if (state == sw_literal) {
                host_len = i + 1;
                state = sw_rest;
            }
            break;

        defa...",2128.0,2217.0,1.0,1.0,90.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5725,291315,ngx_http_set_virtual_server,1,ngx_http_set_virtual_server,"ngx_int_t ngx_http_set_virtual_server (ngx_http_request_t*,ngx_str_t*)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_set_virtual_server(ngx_http_request_t *r, ngx_str_t *host)
{
    ngx_int_t                  rc;
    ngx_http_connection_t     *hc;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_core_srv_conf_t  *cscf;

#if (NGX_SUPPRESS_WARN)
    cscf = NULL;
#endif

    hc = r->http_connection;

#if (NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME)

    if (hc->ssl_servername) {
        if (hc->ssl_servername->len == host->len
            && ngx_strncmp(hc->ssl_servername->data,
                           host->data, host->len) == 0)
        {
#if (NGX_PCRE)
            if (hc->ssl_servername_regex
                && ngx_http_regex_exec(r, hc->ssl_servername_regex,
                                          hc->ssl_servername) != NGX_OK)
            {
                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                return NGX_ERROR;
            }
#endif
            return NGX_OK;
        }
    }

#endif

    rc = ngx_http_find_virtual_serv...",2220.0,2300.0,1.0,1.0,81.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5726,291321,ngx_http_find_virtual_server,1,ngx_http_find_virtual_server,"ngx_int_t ngx_http_find_virtual_server (ngx_connection_t*,ngx_http_virtual_names_t*,ngx_str_t*,ngx_http_request_t*,ngx_http_core_srv_conf_t**)",http\ngx_http_request.c,"static ngx_int_t
ngx_http_find_virtual_server(ngx_connection_t *c,
    ngx_http_virtual_names_t *virtual_names, ngx_str_t *host,
    ngx_http_request_t *r, ngx_http_core_srv_conf_t **cscfp)
{
    ngx_http_core_srv_conf_t  *cscf;

    if (virtual_names == NULL) {
        return NGX_DECLINED;
    }

    cscf = ngx_hash_find_combined(&virtual_names->names,
                                  ngx_hash_key(host->data, host->len),
                                  host->data, host->len);

    if (cscf) {
        *cscfp = cscf;
        return NGX_OK;
    }

#if (NGX_PCRE)

    if (host->len && virtual_names->nregex) {
        ngx_int_t                n;
        ngx_uint_t               i;
        ngx_http_server_name_t  *sn;

        sn = virtual_names->regex;

#if (NGX_HTTP_SSL && defined SSL_CTRL_SET_TLSEXT_HOSTNAME)

        if (r == NULL) {
            ngx_http_connection_t  *hc;

            for (i = 0; i < virtual_names->nregex; i++) {

                n = ngx_regex_exec(sn[i].regex->r...",2303.0,2386.0,1.0,1.0,84.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ngx_int_t
5727,291330,ngx_http_request_handler,1,ngx_http_request_handler,void ngx_http_request_handler (ngx_event_t*),http\ngx_http_request.c,"static void
ngx_http_request_handler(ngx_event_t *ev)
{
    ngx_connection_t    *c;
    ngx_http_request_t  *r;

    c = ev->data;
    r = c->data;

    ngx_http_set_log_request(c->log, r);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http run request: \""%V?%V\"""", &r->uri, &r->args);

    if (c->close) {
        r->main->count++;
        ngx_http_terminate_request(r, 0);
        ngx_http_run_posted_requests(c);
        return;
    }

    if (ev->delayed && ev->timedout) {
        ev->delayed = 0;
        ev->timedout = 0;
    }

    if (ev->write) {
        r->write_event_handler(r);

    } else {
        r->read_event_handler(r);
    }

    ngx_http_run_posted_requests(c);
}",2389.0,2423.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5728,291335,ngx_http_terminate_request,1,ngx_http_terminate_request,"void ngx_http_terminate_request (ngx_http_request_t*,ngx_int_t)",http\ngx_http_request.c,"static void
ngx_http_terminate_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_http_cleanup_t    *cln;
    ngx_http_request_t    *mr;
    ngx_http_ephemeral_t  *e;

    mr = r->main;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http terminate request count:%d"", mr->count);

    if (rc > 0 && (mr->headers_out.status == 0 || mr->connection->sent == 0)) {
        mr->headers_out.status = rc;
    }

    cln = mr->cleanup;
    mr->cleanup = NULL;

    while (cln) {
        if (cln->handler) {
            cln->handler(cln->data);
        }

        cln = cln->next;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http terminate cleanup count:%d blk:%d"",
                   mr->count, mr->blocked);

    if (mr->write_event_handler) {

        if (mr->blocked) {
            r->connection->error = 1;
            r->write_event_handler = ngx_http_request_finalizer;
            return;
        }

        e = ng...",2669.0,2716.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5729,291341,ngx_http_terminate_handler,1,ngx_http_terminate_handler,void ngx_http_terminate_handler (ngx_http_request_t*),http\ngx_http_request.c,"static void
ngx_http_terminate_handler(ngx_http_request_t *r)
{
    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http terminate handler count:%d"", r->count);

    r->count = 1;

    ngx_http_close_request(r, 0);
}",2719.0,2728.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5730,291346,ngx_http_finalize_connection,1,ngx_http_finalize_connection,void ngx_http_finalize_connection (ngx_http_request_t*),http\ngx_http_request.c,"static void
ngx_http_finalize_connection(ngx_http_request_t *r)
{
    ngx_http_core_loc_conf_t  *clcf;

#if (NGX_HTTP_V2)
    if (r->stream) {
        ngx_http_close_request(r, 0);
        return;
    }
#endif

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (r->main->count != 1) {

        if (r->discard_body) {
            r->read_event_handler = ngx_http_discarded_request_body_handler;
            ngx_add_timer(r->connection->read, clcf->lingering_timeout);

            if (r->lingering_time == 0) {
                r->lingering_time = ngx_time()
                                      + (time_t) (clcf->lingering_time / 1000);
            }
        }

        ngx_http_close_request(r, 0);
        return;
    }

    r = r->main;

    if (r->connection->read->eof) {
        ngx_http_close_request(r, 0);
        return;
    }

    if (r->reading_body) {
        r->keepalive = 0;
        r->lingering_close = 1;
    }

    if (!ngx_terminate
         && !ngx_exi...",2731.0,2793.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5731,291351,ngx_http_set_write_handler,1,ngx_http_set_write_handler,ngx_int_t ngx_http_set_write_handler (ngx_http_request_t*),http\ngx_http_request.c,"static ngx_int_t
ngx_http_set_write_handler(ngx_http_request_t *r)
{
    ngx_event_t               *wev;
    ngx_http_core_loc_conf_t  *clcf;

    r->http_state = NGX_HTTP_WRITING_REQUEST_STATE;

    r->read_event_handler = r->discard_body ?
                                ngx_http_discarded_request_body_handler:
                                ngx_http_test_reading;
    r->write_event_handler = ngx_http_writer;

    wev = r->connection->write;

    if (wev->ready && wev->delayed) {
        return NGX_OK;
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
    if (!wev->delayed) {
        ngx_add_timer(wev, clcf->send_timeout);
    }

    if (ngx_handle_write_event(wev, clcf->send_lowat) != NGX_OK) {
        ngx_http_close_request(r, 0);
        return NGX_ERROR;
    }

    return NGX_OK;
}",2796.0,2826.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5732,291356,ngx_http_writer,1,ngx_http_writer,void ngx_http_writer (ngx_http_request_t*),http\ngx_http_request.c,"static void
ngx_http_writer(ngx_http_request_t *r)
{
    ngx_int_t                  rc;
    ngx_event_t               *wev;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;
    wev = c->write;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, wev->log, 0,
                   ""http writer handler: \""%V?%V\"""", &r->uri, &r->args);

    clcf = ngx_http_get_module_loc_conf(r->main, ngx_http_core_module);

    if (wev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT,
                      ""client timed out"");
        c->timedout = 1;

        ngx_http_finalize_request(r, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    if (wev->delayed || r->aio) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, wev->log, 0,
                       ""http writer delayed"");

        if (!wev->delayed) {
            ngx_add_timer(wev, clcf->send_timeout);
        }

        if (ngx_handle_write_event(wev, clcf->send_lowat) != NGX_OK) {
            ngx_...",2829.0,2899.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5733,291361,ngx_http_request_finalizer,1,ngx_http_request_finalizer,void ngx_http_request_finalizer (ngx_http_request_t*),http\ngx_http_request.c,"static void
ngx_http_request_finalizer(ngx_http_request_t *r)
{
    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http finalizer done: \""%V?%V\"""", &r->uri, &r->args);

    ngx_http_finalize_request(r, 0);
}",2902.0,2909.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5734,291366,ngx_http_set_keepalive,1,ngx_http_set_keepalive,void ngx_http_set_keepalive (ngx_http_request_t*),http\ngx_http_request.c,"static void
ngx_http_set_keepalive(ngx_http_request_t *r)
{
    int                        tcp_nodelay;
    ngx_buf_t                 *b, *f;
    ngx_chain_t               *cl, *ln;
    ngx_event_t               *rev, *wev;
    ngx_connection_t          *c;
    ngx_http_connection_t     *hc;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;
    rev = c->read;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, ""set http keepalive handler"");

    c->log->action = ""closing request"";

    hc = r->http_connection;
    b = r->header_in;

    if (b->pos < b->last) {

        /* the pipelined request */

        if (b != c->buffer) {

            /*
             * If the large header buffers were allocated while the previous
             * request processing then we do not use c->buffer for
             * the pipelined request (see ngx_http_create_request()).
             *
             * Now we would move the lar...",3055.0,3267.0,1.0,1.0,213.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5735,291371,ngx_http_keepalive_handler,1,ngx_http_keepalive_handler,void ngx_http_keepalive_handler (ngx_event_t*),http\ngx_http_request.c,"static void
ngx_http_keepalive_handler(ngx_event_t *rev)
{
    size_t             size;
    ssize_t            n;
    ngx_buf_t         *b;
    ngx_connection_t  *c;

    c = rev->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, ""http keepalive handler"");

    if (rev->timedout || c->close) {
        ngx_http_close_connection(c);
        return;
    }

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {
        if (rev->pending_eof) {
            c->log->handler = NULL;
            ngx_log_error(NGX_LOG_INFO, c->log, rev->kq_errno,
                          ""kevent() reported that client %V closed ""
                          ""keepalive connection"", &c->addr_text);
#if (NGX_HTTP_SSL)
            if (c->ssl) {
                c->ssl->no_send_shutdown = 1;
            }
#endif
            ngx_http_close_connection(c);
            return;
        }
    }

#endif

    b = c->buffer;
    size = b->end - b->start;

    if (b->pos == NULL) {

        /*
        ...",3270.0,3398.0,1.0,1.0,129.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5736,291376,ngx_http_set_lingering_close,1,ngx_http_set_lingering_close,void ngx_http_set_lingering_close (ngx_connection_t*),http\ngx_http_request.c,"static void
ngx_http_set_lingering_close(ngx_connection_t *c)
{
    ngx_event_t               *rev, *wev;
    ngx_http_request_t        *r;
    ngx_http_core_loc_conf_t  *clcf;

    r = c->data;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (r->lingering_time == 0) {
        r->lingering_time = ngx_time() + (time_t) (clcf->lingering_time / 1000);
    }

#if (NGX_HTTP_SSL)
    if (c->ssl) {
        ngx_int_t  rc;

        c->ssl->shutdown_without_free = 1;

        rc = ngx_ssl_shutdown(c);

        if (rc == NGX_ERROR) {
            ngx_http_close_request(r, 0);
            return;
        }

        if (rc == NGX_AGAIN) {
            c->ssl->handler = ngx_http_set_lingering_close;
            return;
        }
    }
#endif

    rev = c->read;
    rev->handler = ngx_http_lingering_close_handler;

    if (ngx_handle_read_event(rev, 0) != NGX_OK) {
        ngx_http_close_request(r, 0);
        return;
    }

    wev = c->write;
    wev->handler = ngx_http_...",3401.0,3469.0,1.0,1.0,69.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5737,291381,ngx_http_lingering_close_handler,1,ngx_http_lingering_close_handler,void ngx_http_lingering_close_handler (ngx_event_t*),http\ngx_http_request.c,"static void
ngx_http_lingering_close_handler(ngx_event_t *rev)
{
    ssize_t                    n;
    ngx_msec_t                 timer;
    ngx_connection_t          *c;
    ngx_http_request_t        *r;
    ngx_http_core_loc_conf_t  *clcf;
    u_char                     buffer[NGX_HTTP_LINGERING_BUFFER_SIZE];

    c = rev->data;
    r = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http lingering close handler"");

    if (rev->timedout || c->close) {
        ngx_http_close_request(r, 0);
        return;
    }

    timer = (ngx_msec_t) r->lingering_time - (ngx_msec_t) ngx_time();
    if ((ngx_msec_int_t) timer <= 0) {
        ngx_http_close_request(r, 0);
        return;
    }

    do {
        n = c->recv(c, buffer, NGX_HTTP_LINGERING_BUFFER_SIZE);

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0, ""lingering read: %z"", n);

        if (n == NGX_AGAIN) {
            break;
        }

        if (n == NGX_ERROR || n == 0) {
            ngx_http...",3472.0,3529.0,1.0,1.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5738,291386,ngx_http_post_action,1,ngx_http_post_action,ngx_int_t ngx_http_post_action (ngx_http_request_t*),http\ngx_http_request.c,"static ngx_int_t
ngx_http_post_action(ngx_http_request_t *r)
{
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->post_action.data == NULL) {
        return NGX_DECLINED;
    }

    if (r->post_action && r->uri_changes == 0) {
        return NGX_DECLINED;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""post action: \""%V\"""", &clcf->post_action);

    r->main->count--;

    r->http_version = NGX_HTTP_VERSION_9;
    r->header_only = 1;
    r->post_action = 1;

    r->read_event_handler = ngx_http_block_reading;

    if (clcf->post_action.data[0] == '/') {
        ngx_http_internal_redirect(r, &clcf->post_action, NULL);

    } else {
        ngx_http_named_location(r, &clcf->post_action);
    }

    return NGX_OK;
}",3584.0,3618.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5739,291391,ngx_http_close_request,1,ngx_http_close_request,"void ngx_http_close_request (ngx_http_request_t*,ngx_int_t)",http\ngx_http_request.c,"static void
ngx_http_close_request(ngx_http_request_t *r, ngx_int_t rc)
{
    ngx_connection_t  *c;

    r = r->main;
    c = r->connection;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http request count:%d blk:%d"", r->count, r->blocked);

    if (r->count == 0) {
        ngx_log_error(NGX_LOG_ALERT, c->log, 0, ""http request count is zero"");
    }

    r->count--;

    if (r->count || r->blocked) {
        return;
    }

#if (NGX_HTTP_V2)
    if (r->stream) {
        ngx_http_v2_close_stream(r->stream, rc);
        return;
    }
#endif

    ngx_http_free_request(r, rc);
    ngx_http_close_connection(c);
}",3621.0,3651.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5740,291397,ngx_http_log_request,1,ngx_http_log_request,void ngx_http_log_request (ngx_http_request_t*),http\ngx_http_request.c,"static void
ngx_http_log_request(ngx_http_request_t *r)
{
    ngx_uint_t                  i, n;
    ngx_http_handler_pt        *log_handler;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    log_handler = cmcf->phases[NGX_HTTP_LOG_PHASE].handlers.elts;
    n = cmcf->phases[NGX_HTTP_LOG_PHASE].handlers.nelts;

    for (i = 0; i < n; i++) {
        log_handler[i](r);
    }
}",3744.0,3759.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5741,291402,ngx_http_log_error,1,ngx_http_log_error,"u_char* ngx_http_log_error (ngx_log_t*,u_char*,size_t)",http\ngx_http_request.c,"static u_char *
ngx_http_log_error(ngx_log_t *log, u_char *buf, size_t len)
{
    u_char              *p;
    ngx_http_request_t  *r;
    ngx_http_log_ctx_t  *ctx;

    if (log->action) {
        p = ngx_snprintf(buf, len, "" while %s"", log->action);
        len -= p - buf;
        buf = p;
    }

    ctx = log->data;

    p = ngx_snprintf(buf, len, "", client: %V"", &ctx->connection->addr_text);
    len -= p - buf;

    r = ctx->request;

    if (r) {
        return r->log_handler(r, ctx->current_request, p, len);

    } else {
        p = ngx_snprintf(p, len, "", server: %V"",
                         &ctx->connection->listening->addr_text);
    }

    return p;
}",3795.0,3824.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5742,291409,ngx_http_log_error_handler,1,ngx_http_log_error_handler,"u_char* ngx_http_log_error_handler (ngx_http_request_t*,ngx_http_request_t*,u_char*,size_t)",http\ngx_http_request.c,"static u_char *
ngx_http_log_error_handler(ngx_http_request_t *r, ngx_http_request_t *sr,
    u_char *buf, size_t len)
{
    char                      *uri_separator;
    u_char                    *p;
    ngx_http_upstream_t       *u;
    ngx_http_core_srv_conf_t  *cscf;

    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

    p = ngx_snprintf(buf, len, "", server: %V"", &cscf->server_name);
    len -= p - buf;
    buf = p;

    if (r->request_line.data == NULL && r->request_start) {
        for (p = r->request_start; p < r->header_in->last; p++) {
            if (*p == CR || *p == LF) {
                break;
            }
        }

        r->request_line.len = p - r->request_start;
        r->request_line.data = r->request_start;
    }

    if (r->request_line.len) {
        p = ngx_snprintf(buf, len, "", request: \""%V\"""", &r->request_line);
        len -= p - buf;
        buf = p;
    }

    if (r != sr) {
        p = ngx_snprintf(buf, len, "", subrequest: \""%V\"""", &...",3827.0,3898.0,1.0,1.0,72.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,u_char
5743,299372,ngx_http_client_body_handler_pt,1,ngx_http_client_body_handler_pt,void ngx_http_client_body_handler_pt (ngx_http_request_t*),http\ngx_http_request.h,typedef void (*ngx_http_client_body_handler_pt)(ngx_http_request_t *r);,293.0,293.0,14.0,70.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5744,299401,ngx_http_cleanup_pt,1,ngx_http_cleanup_pt,void ngx_http_cleanup_pt (void*),http\ngx_http_request.h,typedef void (*ngx_http_cleanup_pt)(void *data);,331.0,331.0,14.0,47.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5745,299412,ngx_http_post_subrequest_pt,1,ngx_http_post_subrequest_pt,"ngx_int_t ngx_http_post_subrequest_pt (ngx_http_request_t*,void*,ngx_int_t)",http\ngx_http_request.h,"typedef ngx_int_t (*ngx_http_post_subrequest_pt)(ngx_http_request_t *r,
    void *data, ngx_int_t rc);",342.0,343.0,19.0,29.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5746,299434,ngx_http_handler_pt,1,ngx_http_handler_pt,ngx_int_t ngx_http_handler_pt (ngx_http_request_t*),http\ngx_http_request.h,typedef ngx_int_t (*ngx_http_handler_pt)(ngx_http_request_t *r);,368.0,368.0,19.0,63.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5747,299439,ngx_http_event_handler_pt,1,ngx_http_event_handler_pt,void ngx_http_event_handler_pt (ngx_http_request_t*),http\ngx_http_request.h,typedef void (*ngx_http_event_handler_pt)(ngx_http_request_t *r);,369.0,369.0,14.0,64.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5748,299615,ngx_http_read_client_request_body_handler,1,ngx_http_read_client_request_body_handler,void ngx_http_read_client_request_body_handler (ngx_http_request_t*),http\ngx_http_request_body.c,"static void
ngx_http_read_client_request_body_handler(ngx_http_request_t *r)
{
    ngx_int_t  rc;

    if (r->connection->read->timedout) {
        r->connection->timedout = 1;
        ngx_http_finalize_request(r, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    rc = ngx_http_do_read_client_request_body(r);

    if (rc >= NGX_HTTP_SPECIAL_RESPONSE) {
        ngx_http_finalize_request(r, rc);
    }
}",247.0,263.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5749,299620,ngx_http_do_read_client_request_body,1,ngx_http_do_read_client_request_body,ngx_int_t ngx_http_do_read_client_request_body (ngx_http_request_t*),http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_do_read_client_request_body(ngx_http_request_t *r)
{
    off_t                      rest;
    size_t                     size;
    ssize_t                    n;
    ngx_int_t                  rc;
    ngx_chain_t                out;
    ngx_connection_t          *c;
    ngx_http_request_body_t   *rb;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;
    rb = r->request_body;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http read client request body"");

    for ( ;; ) {
        for ( ;; ) {
            if (rb->buf->last == rb->buf->end) {

                /* update chains */

                rc = ngx_http_request_body_filter(r, NULL);

                if (rc != NGX_OK) {
                    return rc;
                }

                if (rb->busy != NULL) {
                    if (r->request_body_no_buffering) {
                        if (c->read->timer_set) {
                            ngx_del_timer(c->read);
        ...",266.0,402.0,1.0,1.0,137.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5750,299625,ngx_http_copy_pipelined_header,1,ngx_http_copy_pipelined_header,"ngx_int_t ngx_http_copy_pipelined_header (ngx_http_request_t*,ngx_buf_t*)",http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_copy_pipelined_header(ngx_http_request_t *r, ngx_buf_t *buf)
{
    size_t                     n;
    ngx_buf_t                 *b;
    ngx_chain_t               *cl;
    ngx_http_connection_t     *hc;
    ngx_http_core_srv_conf_t  *cscf;

    b = r->header_in;
    n = buf->last - buf->pos;

    if (buf == b || n == 0) {
        return NGX_OK;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http body pipelined header: %uz"", n);

    /*
     * if there is a pipelined request in the client body buffer,
     * copy it to the r->header_in buffer if there is enough room,
     * or allocate a large client header buffer
     */

    if (n > (size_t) (b->end - b->last)) {

        hc = r->http_connection;

        if (hc->free) {
            cl = hc->free;
            hc->free = cl->next;

            b = cl->buf;

            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           ""http large hea...",405.0,484.0,1.0,1.0,80.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5751,299631,ngx_http_write_request_body,1,ngx_http_write_request_body,ngx_int_t ngx_http_write_request_body (ngx_http_request_t*),http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_write_request_body(ngx_http_request_t *r)
{
    ssize_t                    n;
    ngx_chain_t               *cl, *ln;
    ngx_temp_file_t           *tf;
    ngx_http_request_body_t   *rb;
    ngx_http_core_loc_conf_t  *clcf;

    rb = r->request_body;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http write client request body, bufs %p"", rb->bufs);

    if (rb->temp_file == NULL) {
        tf = ngx_pcalloc(r->pool, sizeof(ngx_temp_file_t));
        if (tf == NULL) {
            return NGX_ERROR;
        }

        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

        tf->file.fd = NGX_INVALID_FILE;
        tf->file.log = r->connection->log;
        tf->path = clcf->client_body_temp_path;
        tf->pool = r->pool;
        tf->warn = ""a client request body is buffered to a temporary file"";
        tf->log_level = r->request_body_file_log_level;
        tf->persistent = r->request_body_in_persistent_file;...",487.0,566.0,1.0,1.0,80.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5752,299636,ngx_http_read_discarded_request_body,1,ngx_http_read_discarded_request_body,ngx_int_t ngx_http_read_discarded_request_body (ngx_http_request_t*),http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_read_discarded_request_body(ngx_http_request_t *r)
{
    size_t     size;
    ssize_t    n;
    ngx_int_t  rc;
    ngx_buf_t  b;
    u_char     buffer[NGX_HTTP_DISCARD_BUFFER_SIZE];

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http read discarded body"");

    ngx_memzero(&b, sizeof(ngx_buf_t));

    b.temporary = 1;

    for ( ;; ) {
        if (r->headers_in.content_length_n == 0) {
            break;
        }

        if (!r->connection->read->ready) {
            return NGX_AGAIN;
        }

        size = (size_t) ngx_min(r->headers_in.content_length_n,
                                NGX_HTTP_DISCARD_BUFFER_SIZE);

        n = r->connection->recv(r->connection, buffer, size);

        if (n == NGX_ERROR) {
            r->connection->error = 1;
            return NGX_OK;
        }

        if (n == NGX_AGAIN) {
            return NGX_AGAIN;
        }

        if (n == 0) {
            return NGX_OK;
        }

    ...",715.0,775.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5753,299641,ngx_http_discard_request_body_filter,1,ngx_http_discard_request_body_filter,"ngx_int_t ngx_http_discard_request_body_filter (ngx_http_request_t*,ngx_buf_t*)",http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_discard_request_body_filter(ngx_http_request_t *r, ngx_buf_t *b)
{
    size_t                     size;
    ngx_int_t                  rc;
    ngx_http_request_body_t   *rb;
    ngx_http_core_srv_conf_t  *cscf;

    if (r->headers_in.chunked) {

        rb = r->request_body;

        if (rb == NULL) {

            rb = ngx_pcalloc(r->pool, sizeof(ngx_http_request_body_t));
            if (rb == NULL) {
                return NGX_HTTP_INTERNAL_SERVER_ERROR;
            }

            rb->chunked = ngx_pcalloc(r->pool, sizeof(ngx_http_chunked_t));
            if (rb->chunked == NULL) {
                return NGX_HTTP_INTERNAL_SERVER_ERROR;
            }

            r->request_body = rb;
        }

        for ( ;; ) {

            rc = ngx_http_parse_chunked(r, b, rb->chunked);

            if (rc == NGX_OK) {

                /* a chunk has been parsed successfully */

                size = b->last - b->pos;

                if ((off_t) size > rb->chunked-...",778.0,868.0,1.0,1.0,91.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5754,299647,ngx_http_test_expect,1,ngx_http_test_expect,ngx_int_t ngx_http_test_expect (ngx_http_request_t*),http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_test_expect(ngx_http_request_t *r)
{
    ngx_int_t   n;
    ngx_str_t  *expect;

    if (r->expect_tested
        || r->headers_in.expect == NULL
        || r->http_version < NGX_HTTP_VERSION_11
#if (NGX_HTTP_V2)
        || r->stream != NULL
#endif
       )
    {
        return NGX_OK;
    }

    r->expect_tested = 1;

    expect = &r->headers_in.expect->value;

    if (expect->len != sizeof(""100-continue"") - 1
        || ngx_strncasecmp(expect->data, (u_char *) ""100-continue"",
                           sizeof(""100-continue"") - 1)
           != 0)
    {
        return NGX_OK;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""send 100 Continue"");

    n = r->connection->send(r->connection,
                            (u_char *) ""HTTP/1.1 100 Continue"" CRLF CRLF,
                            sizeof(""HTTP/1.1 100 Continue"" CRLF CRLF) - 1);

    if (n == sizeof(""HTTP/1.1 100 Continue"" CRLF CRLF) - 1) {
        return NGX_O...",871.0,916.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5755,299652,ngx_http_request_body_filter,1,ngx_http_request_body_filter,"ngx_int_t ngx_http_request_body_filter (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_request_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    if (r->headers_in.chunked) {
        return ngx_http_request_body_chunked_filter(r, in);

    } else {
        return ngx_http_request_body_length_filter(r, in);
    }
}",919.0,928.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5756,299658,ngx_http_request_body_length_filter,1,ngx_http_request_body_length_filter,"ngx_int_t ngx_http_request_body_length_filter (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_request_body_length_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    size_t                     size;
    ngx_int_t                  rc;
    ngx_buf_t                 *b;
    ngx_chain_t               *cl, *tl, *out, **ll;
    ngx_http_request_body_t   *rb;

    rb = r->request_body;

    if (rb->rest == -1) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http request body content length filter"");

        rb->rest = r->headers_in.content_length_n;
    }

    out = NULL;
    ll = &out;

    for (cl = in; cl; cl = cl->next) {

        if (rb->rest == 0) {
            break;
        }

        tl = ngx_chain_get_free_buf(r->pool, &rb->free);
        if (tl == NULL) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }

        b = tl->buf;

        ngx_memzero(b, sizeof(ngx_buf_t));

        b->temporary = 1;
        b->tag = (ngx_buf_tag_t) &ngx_http_read_client_request_body;
        b->start = cl->buf...",931.0,998.0,1.0,1.0,68.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5757,299664,ngx_http_request_body_chunked_filter,1,ngx_http_request_body_chunked_filter,"ngx_int_t ngx_http_request_body_chunked_filter (ngx_http_request_t*,ngx_chain_t*)",http\ngx_http_request_body.c,"static ngx_int_t
ngx_http_request_body_chunked_filter(ngx_http_request_t *r, ngx_chain_t *in)
{
    size_t                     size;
    ngx_int_t                  rc;
    ngx_buf_t                 *b;
    ngx_chain_t               *cl, *out, *tl, **ll;
    ngx_http_request_body_t   *rb;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_core_srv_conf_t  *cscf;

    rb = r->request_body;

    if (rb->rest == -1) {

        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                       ""http request body chunked filter"");

        rb->chunked = ngx_pcalloc(r->pool, sizeof(ngx_http_chunked_t));
        if (rb->chunked == NULL) {
            return NGX_HTTP_INTERNAL_SERVER_ERROR;
        }

        cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

        r->headers_in.content_length_n = 0;
        rb->rest = cscf->large_client_header_buffers.size;
    }

    out = NULL;
    ll = &out;

    for (cl = in; cl; cl = cl->next) {

        b = NULL;

        for...",1001.0,1182.0,1.0,1.0,182.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5758,302974,ngx_http_script_init_arrays,1,ngx_http_script_init_arrays,ngx_int_t ngx_http_script_init_arrays (ngx_http_script_compile_t*),http\ngx_http_script.c,"static ngx_int_t
ngx_http_script_init_arrays(ngx_http_script_compile_t *sc)
{
    ngx_uint_t   n;

    if (sc->flushes && *sc->flushes == NULL) {
        n = sc->variables ? sc->variables : 1;
        *sc->flushes = ngx_array_create(sc->cf->pool, n, sizeof(ngx_uint_t));
        if (*sc->flushes == NULL) {
            return NGX_ERROR;
        }
    }

    if (*sc->lengths == NULL) {
        n = sc->variables * (2 * sizeof(ngx_http_script_copy_code_t)
                             + sizeof(ngx_http_script_var_code_t))
            + sizeof(uintptr_t);

        *sc->lengths = ngx_array_create(sc->cf->pool, n, 1);
        if (*sc->lengths == NULL) {
            return NGX_ERROR;
        }
    }

    if (*sc->values == NULL) {
        n = (sc->variables * (2 * sizeof(ngx_http_script_copy_code_t)
                              + sizeof(ngx_http_script_var_code_t))
                + sizeof(uintptr_t)
                + sc->source->len
                + sizeof(uintptr_t) - 1)
            & ~(s...",681.0,722.0,1.0,1.0,42.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5759,302979,ngx_http_script_done,1,ngx_http_script_done,ngx_int_t ngx_http_script_done (ngx_http_script_compile_t*),http\ngx_http_script.c,"static ngx_int_t
ngx_http_script_done(ngx_http_script_compile_t *sc)
{
    ngx_str_t    zero;
    uintptr_t   *code;

    if (sc->zero) {

        zero.len = 1;
        zero.data = (u_char *) ""\0"";

        if (ngx_http_script_add_copy_code(sc, &zero, 0) != NGX_OK) {
            return NGX_ERROR;
        }
    }

    if (sc->conf_prefix || sc->root_prefix) {
        if (ngx_http_script_add_full_name_code(sc) != NGX_OK) {
            return NGX_ERROR;
        }
    }

    if (sc->complete_lengths) {
        code = ngx_http_script_add_code(*sc->lengths, sizeof(uintptr_t), NULL);
        if (code == NULL) {
            return NGX_ERROR;
        }

        *code = (uintptr_t) NULL;
    }

    if (sc->complete_values) {
        code = ngx_http_script_add_code(*sc->values, sizeof(uintptr_t),
                                        &sc->main);
        if (code == NULL) {
            return NGX_ERROR;
        }

        *code = (uintptr_t) NULL;
    }

    return NGX_OK;
}",725.0,767.0,1.0,1.0,43.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5760,302984,ngx_http_script_add_copy_code,1,ngx_http_script_add_copy_code,"ngx_int_t ngx_http_script_add_copy_code (ngx_http_script_compile_t*,ngx_str_t*,ngx_uint_t)",http\ngx_http_script.c,"static ngx_int_t
ngx_http_script_add_copy_code(ngx_http_script_compile_t *sc, ngx_str_t *value,
    ngx_uint_t last)
{
    u_char                       *p;
    size_t                        size, len, zero;
    ngx_http_script_copy_code_t  *code;

    zero = (sc->zero && last);
    len = value->len + zero;

    code = ngx_http_script_add_code(*sc->lengths,
                                    sizeof(ngx_http_script_copy_code_t), NULL);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = (ngx_http_script_code_pt) (void *)
                                                 ngx_http_script_copy_len_code;
    code->len = len;

    size = (sizeof(ngx_http_script_copy_code_t) + len + sizeof(uintptr_t) - 1)
            & ~(sizeof(uintptr_t) - 1);

    code = ngx_http_script_add_code(*sc->values, size, &sc->main);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = ngx_http_script_copy_code;
    code->len = len;

    p = ngx_cpymem((u_char *) code + ...",808.0,849.0,1.0,1.0,42.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5761,302991,ngx_http_script_add_var_code,1,ngx_http_script_add_var_code,"ngx_int_t ngx_http_script_add_var_code (ngx_http_script_compile_t*,ngx_str_t*)",http\ngx_http_script.c,"static ngx_int_t
ngx_http_script_add_var_code(ngx_http_script_compile_t *sc, ngx_str_t *name)
{
    ngx_int_t                    index, *p;
    ngx_http_script_var_code_t  *code;

    index = ngx_http_get_variable_index(sc->cf, name);

    if (index == NGX_ERROR) {
        return NGX_ERROR;
    }

    if (sc->flushes) {
        p = ngx_array_push(*sc->flushes);
        if (p == NULL) {
            return NGX_ERROR;
        }

        *p = index;
    }

    code = ngx_http_script_add_code(*sc->lengths,
                                    sizeof(ngx_http_script_var_code_t), NULL);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = (ngx_http_script_code_pt) (void *)
                                             ngx_http_script_copy_var_len_code;
    code->index = (uintptr_t) index;

    code = ngx_http_script_add_code(*sc->values,
                                    sizeof(ngx_http_script_var_code_t),
                                    &sc->main);
    if (code ==...",888.0,930.0,1.0,1.0,43.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5762,302997,ngx_http_script_add_args_code,1,ngx_http_script_add_args_code,ngx_int_t ngx_http_script_add_args_code (ngx_http_script_compile_t*),http\ngx_http_script.c,"static ngx_int_t
ngx_http_script_add_args_code(ngx_http_script_compile_t *sc)
{
    uintptr_t   *code;

    code = ngx_http_script_add_code(*sc->lengths, sizeof(uintptr_t), NULL);
    if (code == NULL) {
        return NGX_ERROR;
    }

    *code = (uintptr_t) ngx_http_script_mark_args_code;

    code = ngx_http_script_add_code(*sc->values, sizeof(uintptr_t), &sc->main);
    if (code == NULL) {
        return NGX_ERROR;
    }

    *code = (uintptr_t) ngx_http_script_start_args_code;

    return NGX_OK;
}",990.0,1010.0,1.0,1.0,21.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5763,303002,ngx_http_script_add_full_name_code,1,ngx_http_script_add_full_name_code,ngx_int_t ngx_http_script_add_full_name_code (ngx_http_script_compile_t*),http\ngx_http_script.c,"static ngx_int_t
ngx_http_script_add_full_name_code(ngx_http_script_compile_t *sc)
{
    ngx_http_script_full_name_code_t  *code;

    code = ngx_http_script_add_code(*sc->lengths,
                                    sizeof(ngx_http_script_full_name_code_t),
                                    NULL);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = (ngx_http_script_code_pt) (void *)
                                            ngx_http_script_full_name_len_code;
    code->conf_prefix = sc->conf_prefix;

    code = ngx_http_script_add_code(*sc->values,
                                    sizeof(ngx_http_script_full_name_code_t),
                                    &sc->main);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = ngx_http_script_full_name_code;
    code->conf_prefix = sc->conf_prefix;

    return NGX_OK;
}",1413.0,1440.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5764,303007,ngx_http_script_full_name_len_code,1,ngx_http_script_full_name_len_code,size_t ngx_http_script_full_name_len_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"static size_t
ngx_http_script_full_name_len_code(ngx_http_script_engine_t *e)
{
    ngx_http_script_full_name_code_t  *code;

    code = (ngx_http_script_full_name_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_full_name_code_t);

    return code->conf_prefix ? ngx_cycle->conf_prefix.len:
                               ngx_cycle->prefix.len;
}",1443.0,1454.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,size_t
5765,303012,ngx_http_script_full_name_code,1,ngx_http_script_full_name_code,void ngx_http_script_full_name_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"static void
ngx_http_script_full_name_code(ngx_http_script_engine_t *e)
{
    ngx_http_script_full_name_code_t  *code;

    ngx_str_t  value, *prefix;

    code = (ngx_http_script_full_name_code_t *) e->ip;

    value.data = e->buf.data;
    value.len = e->pos - e->buf.data;

    prefix = code->conf_prefix ? (ngx_str_t *) &ngx_cycle->conf_prefix:
                                 (ngx_str_t *) &ngx_cycle->prefix;

    if (ngx_get_full_name(e->request->pool, prefix, &value) != NGX_OK) {
        e->ip = ngx_http_script_exit;
        e->status = NGX_HTTP_INTERNAL_SERVER_ERROR;
        return;
    }

    e->buf = value;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script fullname: \""%V\"""", &value);

    e->ip += sizeof(ngx_http_script_full_name_code_t);
}",1457.0,1484.0,1.0,16.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5766,303023,ngx_http_script_flush_complex_value,1,ngx_http_script_flush_complex_value,"void ngx_http_script_flush_complex_value (ngx_http_request_t*,ngx_http_complex_value_t*)",http\ngx_http_script.c,"void
ngx_http_script_flush_complex_value(ngx_http_request_t *r,
    ngx_http_complex_value_t *val)
{
    ngx_uint_t *index;

    index = val->flushes;

    if (index) {
        while (*index != (ngx_uint_t) -1) {

            if (r->variables[*index].no_cacheable) {
                r->variables[*index].valid = 0;
                r->variables[*index].not_found = 0;
            }

            index++;
        }
    }
}",35.0,54.0,1.0,1.0,20.0,20,8,12,4,1,1,4,7,0,0,,0,1,4,2,2,void
5767,303078,ngx_http_complex_value,1,ngx_http_complex_value,"ngx_int_t ngx_http_complex_value (ngx_http_request_t*,ngx_http_complex_value_t*,ngx_str_t*)",http\ngx_http_script.c,"ngx_int_t
ngx_http_complex_value(ngx_http_request_t *r, ngx_http_complex_value_t *val,
    ngx_str_t *value)
{
    size_t                        len;
    ngx_http_script_code_pt       code;
    ngx_http_script_len_code_pt   lcode;
    ngx_http_script_engine_t      e;

    if (val->lengths == NULL) {
        *value = val->value;
        return NGX_OK;
    }

    ngx_http_script_flush_complex_value(r, val);

    ngx_memzero(&e, sizeof(ngx_http_script_engine_t));

    e.ip = val->lengths;
    e.request = r;
    e.flushed = 1;

    len = 0;

    while (*(uintptr_t *) e.ip) {
        lcode = *(ngx_http_script_len_code_pt *) e.ip;
        len += lcode(&e);
    }

    value->len = len;
    value->data = ngx_pnalloc(r->pool, len);
    if (value->data == NULL) {
        return NGX_ERROR;
    }

    e.ip = val->values;
    e.pos = value->data;
    e.buf = *value;

    while (*(uintptr_t *) e.ip) {
        code = *(ngx_http_script_code_pt *) e.ip;
        code((ngx_http_script_engine_t *) &e);...",57.0,104.0,1.0,1.0,48.0,52,9,41,11,19,21,5,5,4,2,,0,20,6,3,3,ngx_int_t
5768,303225,ngx_http_complex_value_size,1,ngx_http_complex_value_size,"size_t ngx_http_complex_value_size (ngx_http_request_t*,ngx_http_complex_value_t*,size_t)",http\ngx_http_script.c,"size_t
ngx_http_complex_value_size(ngx_http_request_t *r,
    ngx_http_complex_value_t *val, size_t default_value)
{
    size_t     size;
    ngx_str_t  value;

    if (val == NULL) {
        return default_value;
    }

    if (val->lengths == NULL) {
        return val->u.size;
    }

    if (ngx_http_complex_value(r, val, &value) != NGX_OK) {
        return default_value;
    }

    size = ngx_parse_size(&value);

    if (size == (size_t) NGX_ERROR) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""invalid size \""%V\"""", &value);
        return default_value;
    }

    return size;
}",107.0,135.0,1.0,1.0,29.0,14,7,20,9,0,4,5,5,2,3,,0,3,6,3,3,size_t
5769,303292,ngx_http_compile_complex_value,1,ngx_http_compile_complex_value,ngx_int_t ngx_http_compile_complex_value (ngx_http_compile_complex_value_t*),http\ngx_http_script.c,"ngx_int_t
ngx_http_compile_complex_value(ngx_http_compile_complex_value_t *ccv)
{
    ngx_str_t                  *v;
    ngx_uint_t                  i, n, nv, nc;
    ngx_array_t                 flushes, lengths, values, *pf, *pl, *pv;
    ngx_http_script_compile_t   sc;

    v = ccv->value;

    nv = 0;
    nc = 0;

    for (i = 0; i < v->len; i++) {
        if (v->data[i] == '$') {
            if (v->data[i + 1] >= '1' && v->data[i + 1] <= '9') {
                nc++;

            } else {
                nv++;
            }
        }
    }

    if ((v->len == 0 || v->data[0] != '$')
        && (ccv->conf_prefix || ccv->root_prefix))
    {
        if (ngx_conf_full_name(ccv->cf->cycle, v, ccv->conf_prefix) != NGX_OK) {
            return NGX_ERROR;
        }

        ccv->conf_prefix = 0;
        ccv->root_prefix = 0;
    }

    ccv->complex_value->value = *v;
    ccv->complex_value->flushes = NULL;
    ccv->complex_value->lengths = NULL;
    ccv->complex_value->values = NULL;

  ...",138.0,239.0,1.0,1.0,102.0,150,20,107,21,4,49,12,16,19,5,,0,49,2,1,1,ngx_int_t
5770,303689,ngx_http_set_complex_value_slot,1,ngx_http_set_complex_value_slot,"char* ngx_http_set_complex_value_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_script.c,"char *
ngx_http_set_complex_value_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_str_t                          *value;
    ngx_http_complex_value_t          **cv;
    ngx_http_compile_complex_value_t    ccv;

    cv = (ngx_http_complex_value_t **) (p + cmd->offset);

    if (*cv != NGX_CONF_UNSET_PTR && *cv != NULL) {
        return ""is duplicate"";
    }

    *cv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
    if (*cv == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = *cv;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",242.0,275.0,1.0,1.0,34.0,32,12,29,14,1,5,4,4,1,2,,0,5,6,3,3,char*
5771,303784,ngx_http_set_complex_value_zero_slot,1,ngx_http_set_complex_value_zero_slot,"char* ngx_http_set_complex_value_zero_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_script.c,"char *
ngx_http_set_complex_value_zero_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    char  *p = conf;

    ngx_str_t                          *value;
    ngx_http_complex_value_t          **cv;
    ngx_http_compile_complex_value_t    ccv;

    cv = (ngx_http_complex_value_t **) (p + cmd->offset);

    if (*cv != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    *cv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
    if (*cv == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = *cv;
    ccv.zero = 1;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",278.0,313.0,1.0,1.0,36.0,31,11,28,14,0,6,4,4,1,2,,0,6,6,3,3,char*
5772,303879,ngx_http_set_complex_value_size_slot,1,ngx_http_set_complex_value_size_slot,"char* ngx_http_set_complex_value_size_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_script.c,"char *
ngx_http_set_complex_value_size_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    char  *p = conf;

    char                      *rv;
    ngx_http_complex_value_t  *cv;

    rv = ngx_http_set_complex_value_slot(cf, cmd, conf);

    if (rv != NGX_CONF_OK) {
        return rv;
    }

    cv = *(ngx_http_complex_value_t **) (p + cmd->offset);

    if (cv->lengths) {
        return NGX_CONF_OK;
    }

    cv->u.size = ngx_parse_size(&cv->value);
    if (cv->u.size == (size_t) NGX_ERROR) {
        return ""invalid value"";
    }

    return NGX_CONF_OK;
}",316.0,343.0,1.0,1.0,28.0,18,9,19,8,0,4,4,4,1,2,,0,4,6,3,3,char*
5773,303948,ngx_http_test_predicates,1,ngx_http_test_predicates,"ngx_int_t ngx_http_test_predicates (ngx_http_request_t*,ngx_array_t*)",http\ngx_http_script.c,"ngx_int_t
ngx_http_test_predicates(ngx_http_request_t *r, ngx_array_t *predicates)
{
    ngx_str_t                  val;
    ngx_uint_t                 i;
    ngx_http_complex_value_t  *cv;

    if (predicates == NULL) {
        return NGX_OK;
    }

    cv = predicates->elts;

    for (i = 0; i < predicates->nelts; i++) {
        if (ngx_http_complex_value(r, &cv[i], &val) != NGX_OK) {
            return NGX_ERROR;
        }

        if (val.len && (val.len != 1 || val.data[0] != '0')) {
            return NGX_DECLINED;
        }
    }

    return NGX_OK;
}",346.0,370.0,1.0,1.0,25.0,18,10,19,9,0,6,5,7,5,1,,0,6,4,2,2,ngx_int_t
5774,304019,ngx_http_test_required_predicates,1,ngx_http_test_required_predicates,"ngx_int_t ngx_http_test_required_predicates (ngx_http_request_t*,ngx_array_t*)",http\ngx_http_script.c,"ngx_int_t
ngx_http_test_required_predicates(ngx_http_request_t *r,
    ngx_array_t *predicates)
{
    ngx_str_t                  val;
    ngx_uint_t                 i;
    ngx_http_complex_value_t  *cv;

    if (predicates == NULL) {
        return NGX_OK;
    }

    cv = predicates->elts;

    for (i = 0; i < predicates->nelts; i++) {
        if (ngx_http_complex_value(r, &cv[i], &val) != NGX_OK) {
            return NGX_ERROR;
        }

        if (val.len == 0 || (val.len == 1 && val.data[0] == '0')) {
            return NGX_DECLINED;
        }
    }

    return NGX_OK;
}",373.0,398.0,1.0,1.0,26.0,19,10,19,9,0,6,5,7,5,1,,0,6,4,2,2,ngx_int_t
5775,304092,ngx_http_set_predicate_slot,1,ngx_http_set_predicate_slot,"char* ngx_http_set_predicate_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_script.c,"char *
ngx_http_set_predicate_slot(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_str_t                          *value;
    ngx_uint_t                          i;
    ngx_array_t                       **a;
    ngx_http_complex_value_t           *cv;
    ngx_http_compile_complex_value_t    ccv;

    a = (ngx_array_t **) (p + cmd->offset);

    if (*a == NGX_CONF_UNSET_PTR) {
        *a = ngx_array_create(cf->pool, 1, sizeof(ngx_http_complex_value_t));
        if (*a == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {
        cv = ngx_array_push(*a);
        if (cv == NULL) {
            return NGX_CONF_ERROR;
        }

        ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

        ccv.cf = cf;
        ccv.value = &value[i];
        ccv.complex_value = cv;

        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
            return NGX_CONF_ERROR;
...",401.0,441.0,1.0,1.0,41.0,35,12,36,16,0,6,6,9,1,3,,0,6,6,3,3,char*
5776,304209,ngx_http_script_variables_count,1,ngx_http_script_variables_count,ngx_uint_t ngx_http_script_variables_count (ngx_str_t*),http\ngx_http_script.c,"ngx_uint_t
ngx_http_script_variables_count(ngx_str_t *value)
{
    ngx_uint_t  i, n;

    for (n = 0, i = 0; i < value->len; i++) {
        if (value->data[i] == '$') {
            n++;
        }
    }

    return n;
}",444.0,456.0,1.0,1.0,13.0,9,7,8,3,0,2,3,4,2,0,,0,2,2,1,1,ngx_uint_t
5777,304246,ngx_http_script_compile,1,ngx_http_script_compile,ngx_int_t ngx_http_script_compile (ngx_http_script_compile_t*),http\ngx_http_script.c,"ngx_int_t
ngx_http_script_compile(ngx_http_script_compile_t *sc)
{
    u_char       ch;
    ngx_str_t    name;
    ngx_uint_t   i, bracket;

    if (ngx_http_script_init_arrays(sc) != NGX_OK) {
        return NGX_ERROR;
    }

    for (i = 0; i < sc->source->len; /* void */ ) {

        name.len = 0;

        if (sc->source->data[i] == '$') {

            if (++i == sc->source->len) {
                goto invalid_variable;
            }

            if (sc->source->data[i] >= '1' && sc->source->data[i] <= '9') {
#if (NGX_PCRE)
                ngx_uint_t  n;

                n = sc->source->data[i] - '0';

                if (sc->captures_mask & ((ngx_uint_t) 1 << n)) {
                    sc->dup_capture = 1;
                }

                sc->captures_mask |= (ngx_uint_t) 1 << n;

                if (ngx_http_script_add_capture_code(sc, n) != NGX_OK) {
                    return NGX_ERROR;
                }

                i++;

                continue;
#else
                ...",459.0,611.0,1.0,1.0,153.0,119,15,89,8,1,41,31,57,20,8,,0,37,2,1,1,ngx_int_t
5778,304635,ngx_http_script_run,1,ngx_http_script_run,"u_char ngx_http_script_run (ngx_http_request_t*,ngx_str_t*,void*,size_t,void*)",http\ngx_http_script.c,"u_char *
ngx_http_script_run(ngx_http_request_t *r, ngx_str_t *value,
    void *code_lengths, size_t len, void *code_values)
{
    ngx_uint_t                    i;
    ngx_http_script_code_pt       code;
    ngx_http_script_len_code_pt   lcode;
    ngx_http_script_engine_t      e;
    ngx_http_core_main_conf_t    *cmcf;

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    for (i = 0; i < cmcf->variables.nelts; i++) {
        if (r->variables[i].no_cacheable) {
            r->variables[i].valid = 0;
            r->variables[i].not_found = 0;
        }
    }

    ngx_memzero(&e, sizeof(ngx_http_script_engine_t));

    e.ip = code_lengths;
    e.request = r;
    e.flushed = 1;

    while (*(uintptr_t *) e.ip) {
        lcode = *(ngx_http_script_len_code_pt *) e.ip;
        len += lcode(&e);
    }


    value->len = len;
    value->data = ngx_pnalloc(r->pool, len);
    if (value->data == NULL) {
        return NULL;
    }

    e.ip = code_values;
    e.pos = value->d...",614.0,660.0,1.0,1.0,47.0,55,11,41,13,0,16,6,7,4,1,,0,16,10,5,5,u_char
5779,304797,ngx_http_script_flush_no_cacheable_variables,1,ngx_http_script_flush_no_cacheable_variables,"void ngx_http_script_flush_no_cacheable_variables (ngx_http_request_t*,ngx_array_t*)",http\ngx_http_script.c,"void
ngx_http_script_flush_no_cacheable_variables(ngx_http_request_t *r,
    ngx_array_t *indices)
{
    ngx_uint_t  n, *index;

    if (indices) {
        index = indices->elts;
        for (n = 0; n < indices->nelts; n++) {
            if (r->variables[index[n]].no_cacheable) {
                r->variables[index[n]].valid = 0;
                r->variables[index[n]].not_found = 0;
            }
        }
    }
}",663.0,678.0,1.0,1.0,16.0,19,5,15,4,1,2,4,7,1,0,,0,2,4,2,2,void
5780,305142,ngx_http_script_start_code,1,ngx_http_script_start_code,"void* ngx_http_script_start_code (ngx_pool_t*,ngx_array_t**,size_t)",http\ngx_http_script.c,"void *
ngx_http_script_start_code(ngx_pool_t *pool, ngx_array_t **codes, size_t size)
{
    if (*codes == NULL) {
        *codes = ngx_array_create(pool, 256, 1);
        if (*codes == NULL) {
            return NULL;
        }
    }

    return ngx_array_push_n(*codes, size);
}",770.0,781.0,1.0,1.0,12.0,7,3,9,4,0,2,3,4,0,2,,0,1,6,3,3,void*
5781,305175,ngx_http_script_add_code,1,ngx_http_script_add_code,"void* ngx_http_script_add_code (ngx_array_t*,size_t,void*)",http\ngx_http_script.c,"void *
ngx_http_script_add_code(ngx_array_t *codes, size_t size, void *code)
{
    u_char  *elts, **p;
    void    *new;

    elts = codes->elts;

    new = ngx_array_push_n(codes, size);
    if (new == NULL) {
        return NULL;
    }

    if (code) {
        if (elts != codes->elts) {
            p = code;
            *p += (u_char *) codes->elts - elts;
        }
    }

    return new;
}",784.0,805.0,1.0,1.0,22.0,12,8,17,7,0,4,4,5,1,1,,0,4,6,3,3,void*
5782,305359,ngx_http_script_copy_len_code,1,ngx_http_script_copy_len_code,size_t ngx_http_script_copy_len_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"size_t
ngx_http_script_copy_len_code(ngx_http_script_engine_t *e)
{
    ngx_http_script_copy_code_t  *code;

    code = (ngx_http_script_copy_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_copy_code_t);

    return code->len;
}",852.0,862.0,1.0,1.0,11.0,7,5,5,3,0,3,1,1,0,0,,0,3,2,1,1,size_t
5783,305382,ngx_http_script_copy_code,1,ngx_http_script_copy_code,void ngx_http_script_copy_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_copy_code(ngx_http_script_engine_t *e)
{
    u_char                       *p;
    ngx_http_script_copy_code_t  *code;

    code = (ngx_http_script_copy_code_t *) e->ip;

    p = e->pos;

    if (!e->skip) {
        e->pos = ngx_copy(p, e->ip + sizeof(ngx_http_script_copy_code_t),
                          code->len);
    }

    e->ip += sizeof(ngx_http_script_copy_code_t)
          + ((code->len + sizeof(uintptr_t) - 1) & ~(sizeof(uintptr_t) - 1));

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script copy: \""%*s\"""", e->pos - p, p);
}",865.0,885.0,1.0,1.0,21.0,30,10,20,6,0,10,2,2,1,0,,0,10,2,1,1,void
5784,305573,ngx_http_script_copy_var_len_code,1,ngx_http_script_copy_var_len_code,size_t ngx_http_script_copy_var_len_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"size_t
ngx_http_script_copy_var_len_code(ngx_http_script_engine_t *e)
{
    ngx_http_variable_value_t   *value;
    ngx_http_script_var_code_t  *code;

    code = (ngx_http_script_var_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_var_code_t);

    if (e->flushed) {
        value = ngx_http_get_indexed_variable(e->request, code->index);

    } else {
        value = ngx_http_get_flushed_variable(e->request, code->index);
    }

    if (value && !value->not_found) {
        return value->len;
    }

    return 0;
}",933.0,955.0,1.0,1.0,23.0,14,7,11,4,0,6,3,3,1,1,,0,6,2,1,1,size_t
5785,305632,ngx_http_script_copy_var_code,1,ngx_http_script_copy_var_code,void ngx_http_script_copy_var_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_copy_var_code(ngx_http_script_engine_t *e)
{
    u_char                      *p;
    ngx_http_variable_value_t   *value;
    ngx_http_script_var_code_t  *code;

    code = (ngx_http_script_var_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_var_code_t);

    if (!e->skip) {

        if (e->flushed) {
            value = ngx_http_get_indexed_variable(e->request, code->index);

        } else {
            value = ngx_http_get_flushed_variable(e->request, code->index);
        }

        if (value && !value->not_found) {
            p = e->pos;
            e->pos = ngx_copy(p, value->data, value->len);

            ngx_log_debug2(NGX_LOG_DEBUG_HTTP,
                           e->request->connection->log, 0,
                           ""http script var: \""%*s\"""", e->pos - p, p);
        }
    }
}",958.0,987.0,1.0,1.0,30.0,26,8,22,6,0,11,4,6,2,1,,0,11,2,1,1,void
5786,305783,ngx_http_script_mark_args_code,1,ngx_http_script_mark_args_code,size_t ngx_http_script_mark_args_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"size_t
ngx_http_script_mark_args_code(ngx_http_script_engine_t *e)
{
    e->is_args = 1;
    e->ip += sizeof(uintptr_t);

    return 1;
}",1013.0,1020.0,1.0,1.0,8.0,5,4,3,2,0,2,1,1,0,0,,0,2,2,1,1,size_t
5787,305801,ngx_http_script_start_args_code,1,ngx_http_script_start_args_code,void ngx_http_script_start_args_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_start_args_code(ngx_http_script_engine_t *e)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script args"");

    e->is_args = 1;
    e->args = e->pos;
    e->ip += sizeof(uintptr_t);
}",1023.0,1032.0,1.0,1.0,10.0,11,4,7,3,0,5,1,1,0,0,,0,5,2,1,1,void
5788,306050,ngx_http_script_return_code,1,ngx_http_script_return_code,void ngx_http_script_return_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_return_code(ngx_http_script_engine_t *e)
{
    ngx_http_script_return_code_t  *code;

    code = (ngx_http_script_return_code_t *) e->ip;

    if (code->status < NGX_HTTP_BAD_REQUEST
        || code->text.value.len
        || code->text.lengths)
    {
        e->status = ngx_http_send_response(e->request, code->status, NULL,
                                           &code->text);
    } else {
        e->status = code->status;
    }

    e->ip = ngx_http_script_exit;
}",1487.0,1505.0,1.0,12.0,19.0,22,7,13,5,0,11,2,2,3,1,,0,11,2,1,1,void
5789,306119,ngx_http_script_break_code,1,ngx_http_script_break_code,void ngx_http_script_break_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_break_code(ngx_http_script_engine_t *e)
{
    ngx_http_request_t  *r;

    r = e->request;

    if (r->uri_changed) {
        r->valid_location = 0;
        r->uri_changed = 0;
    }

    e->ip = ngx_http_script_exit;
}",1508.0,1521.0,1.0,12.0,14.0,11,4,7,3,0,3,2,2,0,0,,0,3,2,1,1,void
5790,306155,ngx_http_script_if_code,1,ngx_http_script_if_code,void ngx_http_script_if_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_if_code(ngx_http_script_engine_t *e)
{
    ngx_http_script_if_code_t  *code;

    code = (ngx_http_script_if_code_t *) e->ip;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script if"");

    e->sp--;

    if (e->sp->len && (e->sp->len != 1 || e->sp->data[0] != '0')) {
        if (code->loc_conf) {
            e->request->loc_conf = code->loc_conf;
            ngx_http_update_location_config(e->request);
        }

        e->ip += sizeof(ngx_http_script_if_code_t);
        return;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script if: false"");

    e->ip += code->next;
}",1524.0,1550.0,1.0,1.0,27.0,34,10,18,4,0,15,3,4,4,1,,0,14,2,1,1,void
5791,306251,ngx_http_script_equal_code,1,ngx_http_script_equal_code,void ngx_http_script_equal_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_equal_code(ngx_http_script_engine_t *e)
{
    ngx_http_variable_value_t  *val, *res;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script equal"");

    e->sp--;
    val = e->sp;
    res = e->sp - 1;

    e->ip += sizeof(uintptr_t);

    if (val->len == res->len
        && ngx_strncmp(val->data, res->data, res->len) == 0)
    {
        *res = ngx_http_variable_true_value;
        return;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script equal: no"");

    *res = ngx_http_variable_null_value;
}",1553.0,1578.0,1.0,1.0,26.0,28,9,20,7,0,6,2,2,0,0,,0,6,2,1,1,void
5792,306333,ngx_http_script_not_equal_code,1,ngx_http_script_not_equal_code,void ngx_http_script_not_equal_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_not_equal_code(ngx_http_script_engine_t *e)
{
    ngx_http_variable_value_t  *val, *res;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script not equal"");

    e->sp--;
    val = e->sp;
    res = e->sp - 1;

    e->ip += sizeof(uintptr_t);

    if (val->len == res->len
        && ngx_strncmp(val->data, res->data, res->len) == 0)
    {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                       ""http script not equal: no"");

        *res = ngx_http_variable_null_value;
        return;
    }

    *res = ngx_http_variable_true_value;
}",1581.0,1606.0,1.0,1.0,26.0,28,9,20,7,0,6,2,2,0,0,,0,6,2,1,1,void
5793,306415,ngx_http_script_file_code,1,ngx_http_script_file_code,void ngx_http_script_file_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_file_code(ngx_http_script_engine_t *e)
{
    ngx_str_t                     path;
    ngx_http_request_t           *r;
    ngx_open_file_info_t          of;
    ngx_http_core_loc_conf_t     *clcf;
    ngx_http_variable_value_t    *value;
    ngx_http_script_file_code_t  *code;

    value = e->sp - 1;

    code = (ngx_http_script_file_code_t *) e->ip;
    e->ip += sizeof(ngx_http_script_file_code_t);

    path.len = value->len - 1;
    path.data = value->data;

    r = e->request;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http script file op %p \""%V\"""", (void *) code->op, &path);

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    ngx_memzero(&of, sizeof(ngx_open_file_info_t));

    of.read_ahead = clcf->read_ahead;
    of.directio = clcf->directio;
    of.valid = clcf->open_file_cache_valid;
    of.min_uses = clcf->open_file_cache_min_uses;
    of.test_only = 1;
    of.errors = clcf->open_file_cache_err...",1609.0,1747.0,1.0,16.0,139.0,105,13,100,28,0,43,34,26,20,3,,0,42,2,1,1,void
5794,306779,ngx_http_script_complex_value_code,1,ngx_http_script_complex_value_code,void ngx_http_script_complex_value_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_complex_value_code(ngx_http_script_engine_t *e)
{
    size_t                                 len;
    ngx_http_script_engine_t               le;
    ngx_http_script_len_code_pt            lcode;
    ngx_http_script_complex_value_code_t  *code;

    code = (ngx_http_script_complex_value_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_complex_value_code_t);

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script complex value"");

    ngx_memzero(&le, sizeof(ngx_http_script_engine_t));

    le.ip = code->lengths->elts;
    le.line = e->line;
    le.request = e->request;
    le.quote = e->quote;

    for (len = 0; *(uintptr_t *) le.ip; len += lcode(&le)) {
        lcode = *(ngx_http_script_len_code_pt *) le.ip;
    }

    e->buf.len = len;
    e->buf.data = ngx_pnalloc(e->request->pool, len);
    if (e->buf.data == NULL) {
        e->ip = ngx_http_script_exit;
        e->status = NGX_HTTP_INTERNAL_SERVER_ERROR;
 ...",1750.0,1789.0,1.0,16.0,40.0,65,10,38,11,0,28,3,3,2,1,,0,28,2,1,1,void
5795,306952,ngx_http_script_value_code,1,ngx_http_script_value_code,void ngx_http_script_value_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_value_code(ngx_http_script_engine_t *e)
{
    ngx_http_script_value_code_t  *code;

    code = (ngx_http_script_value_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_value_code_t);

    e->sp->len = code->text_len;
    e->sp->data = (u_char *) code->text_data;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script value: \""%v\"""", e->sp);

    e->sp++;
}",1792.0,1808.0,1.0,1.0,17.0,21,6,12,4,0,9,1,1,0,0,,0,9,2,1,1,void
5796,307009,ngx_http_script_set_var_code,1,ngx_http_script_set_var_code,void ngx_http_script_set_var_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_set_var_code(ngx_http_script_engine_t *e)
{
    ngx_http_request_t          *r;
    ngx_http_script_var_code_t  *code;

    code = (ngx_http_script_var_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_var_code_t);

    r = e->request;

    e->sp--;

    r->variables[code->index].len = e->sp->len;
    r->variables[code->index].valid = 1;
    r->variables[code->index].no_cacheable = 0;
    r->variables[code->index].not_found = 0;
    r->variables[code->index].data = e->sp->data;

#if (NGX_DEBUG)
    {
    ngx_http_variable_t        *v;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    v = cmcf->variables.elts;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script set $%V"", &v[code->index].name);
    }
#endif
}",1811.0,1844.0,1.0,1.0,34.0,39,8,19,4,0,11,1,1,0,0,,0,11,2,1,1,void
5797,307101,ngx_http_script_var_set_handler_code,1,ngx_http_script_var_set_handler_code,void ngx_http_script_var_set_handler_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_var_set_handler_code(ngx_http_script_engine_t *e)
{
    ngx_http_script_var_handler_code_t  *code;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script set var handler"");

    code = (ngx_http_script_var_handler_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_var_handler_code_t);

    e->sp--;

    code->handler(e->request, e->sp, code->data);
}",1847.0,1862.0,1.0,1.0,16.0,15,6,11,4,0,8,1,1,0,0,,0,8,2,1,1,void
5798,307148,ngx_http_script_var_code,1,ngx_http_script_var_code,void ngx_http_script_var_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_var_code(ngx_http_script_engine_t *e)
{
    ngx_http_variable_value_t   *value;
    ngx_http_script_var_code_t  *code;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                   ""http script var"");

    code = (ngx_http_script_var_code_t *) e->ip;

    e->ip += sizeof(ngx_http_script_var_code_t);

    value = ngx_http_get_flushed_variable(e->request, code->index);

    if (value && !value->not_found) {
        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, e->request->connection->log, 0,
                       ""http script var: \""%v\"""", value);

        *e->sp = *value;
        e->sp++;

        return;
    }

    *e->sp = ngx_http_variable_null_value;
    e->sp++;
}",1865.0,1892.0,1.0,1.0,28.0,29,9,20,6,0,11,2,2,0,1,,0,11,2,1,1,void
5799,307230,ngx_http_script_nop_code,1,ngx_http_script_nop_code,void ngx_http_script_nop_code (ngx_http_script_engine_t*),http\ngx_http_script.c,"void
ngx_http_script_nop_code(ngx_http_script_engine_t *e)
{
    e->ip += sizeof(uintptr_t);
}",1895.0,1899.0,1.0,1.0,5.0,3,3,2,2,0,1,1,1,0,0,,0,1,2,1,1,void
5800,307304,ngx_http_script_code_pt,1,ngx_http_script_code_pt,void ngx_http_script_code_pt (ngx_http_script_engine_t*),http\ngx_http_script.h,typedef void (*ngx_http_script_code_pt) (ngx_http_script_engine_t *e);,89.0,89.0,14.0,69.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5801,307309,ngx_http_script_len_code_pt,1,ngx_http_script_len_code_pt,size_t ngx_http_script_len_code_pt (ngx_http_script_engine_t*),http\ngx_http_script.h,typedef size_t (*ngx_http_script_len_code_pt) (ngx_http_script_engine_t *e);,90.0,90.0,16.0,75.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,size_t
5802,307500,ngx_http_script_copy_capture_len_code,1,ngx_http_script_copy_capture_len_code,size_t ngx_http_script_copy_capture_len_code (ngx_http_script_engine_t*),http\ngx_http_script.h,size_t ngx_http_script_copy_capture_len_code(ngx_http_script_engine_t *e);,247.0,247.0,8.0,73.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,size_t
5803,307505,ngx_http_script_copy_capture_code,1,ngx_http_script_copy_capture_code,void ngx_http_script_copy_capture_code (ngx_http_script_engine_t*),http\ngx_http_script.h,void ngx_http_script_copy_capture_code(ngx_http_script_engine_t *e);,248.0,248.0,6.0,67.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5804,307593,ngx_http_send_error_page,1,ngx_http_send_error_page,"ngx_int_t ngx_http_send_error_page (ngx_http_request_t*,ngx_http_err_page_t*)",http\ngx_http_special_response.c,"static ngx_int_t
ngx_http_send_error_page(ngx_http_request_t *r, ngx_http_err_page_t *err_page)
{
    ngx_int_t                  overwrite;
    ngx_str_t                  uri, args;
    ngx_table_elt_t           *location;
    ngx_http_core_loc_conf_t  *clcf;

    overwrite = err_page->overwrite;

    if (overwrite && overwrite != NGX_HTTP_OK) {
        r->expect_tested = 1;
    }

    if (overwrite >= 0) {
        r->err_status = overwrite;
    }

    if (ngx_http_complex_value(r, &err_page->value, &uri) != NGX_OK) {
        return NGX_ERROR;
    }

    if (uri.len && uri.data[0] == '/') {

        if (err_page->value.lengths) {
            ngx_http_split_args(r, &uri, &args);

        } else {
            args = err_page->args;
        }

        if (r->method != NGX_HTTP_HEAD) {
            r->method = NGX_HTTP_GET;
            r->method_name = ngx_http_core_get_method;
        }

        return ngx_http_internal_redirect(r, &uri, &args);
    }

    if (uri.len && uri.data[0] == ...",587.0,668.0,1.0,53.0,82.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5805,307599,ngx_http_send_special_response,1,ngx_http_send_special_response,"ngx_int_t ngx_http_send_special_response (ngx_http_request_t*,ngx_http_core_loc_conf_t*,ngx_uint_t)",http\ngx_http_special_response.c,"static ngx_int_t
ngx_http_send_special_response(ngx_http_request_t *r,
    ngx_http_core_loc_conf_t *clcf, ngx_uint_t err)
{
    u_char       *tail;
    size_t        len;
    ngx_int_t     rc;
    ngx_buf_t    *b;
    ngx_uint_t    msie_padding;
    ngx_chain_t   out[3];

    if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_ON) {
        len = sizeof(ngx_http_error_full_tail) - 1;
        tail = ngx_http_error_full_tail;

    } else if (clcf->server_tokens == NGX_HTTP_SERVER_TOKENS_BUILD) {
        len = sizeof(ngx_http_error_build_tail) - 1;
        tail = ngx_http_error_build_tail;

    } else {
        len = sizeof(ngx_http_error_tail) - 1;
        tail = ngx_http_error_tail;
    }

    msie_padding = 0;

    if (ngx_http_error_pages[err].len) {
        r->headers_out.content_length_n = ngx_http_error_pages[err].len + len;
        if (clcf->msie_padding
            && (r->headers_in.msie || r->headers_in.chrome)
            && r->http_version >= NGX_HTTP_VERSION_10
            ...",671.0,783.0,1.0,22.0,113.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5806,307606,ngx_http_send_refresh,1,ngx_http_send_refresh,ngx_int_t ngx_http_send_refresh (ngx_http_request_t*),http\ngx_http_special_response.c,"static ngx_int_t
ngx_http_send_refresh(ngx_http_request_t *r)
{
    u_char       *p, *location;
    size_t        len, size;
    uintptr_t     escape;
    ngx_int_t     rc;
    ngx_buf_t    *b;
    ngx_chain_t   out;

    len = r->headers_out.location->value.len;
    location = r->headers_out.location->value.data;

    escape = 2 * ngx_escape_uri(NULL, location, len, NGX_ESCAPE_REFRESH);

    size = sizeof(ngx_http_msie_refresh_head) - 1
           + escape + len
           + sizeof(ngx_http_msie_refresh_tail) - 1;

    r->err_status = NGX_HTTP_OK;

    r->headers_out.content_type_len = sizeof(""text/html"") - 1;
    ngx_str_set(&r->headers_out.content_type, ""text/html"");
    r->headers_out.content_type_lowcase = NULL;

    r->headers_out.location->hash = 0;
    r->headers_out.location = NULL;

    r->headers_out.content_length_n = size;

    if (r->headers_out.content_length) {
        r->headers_out.content_length->hash = 0;
        r->headers_out.content_length = NULL;
    }

    n...",786.0,856.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5807,309161,ngx_http_upstream_init_request,1,ngx_http_upstream_init_request,void ngx_http_upstream_init_request (ngx_http_request_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_init_request(ngx_http_request_t *r)
{
    ngx_str_t                      *host;
    ngx_uint_t                      i;
    ngx_resolver_ctx_t             *ctx, temp;
    ngx_http_cleanup_t             *cln;
    ngx_http_upstream_t            *u;
    ngx_http_core_loc_conf_t       *clcf;
    ngx_http_upstream_srv_conf_t   *uscf, **uscfp;
    ngx_http_upstream_main_conf_t  *umcf;

    if (r->aio) {
        return;
    }

    u = r->upstream;

#if (NGX_HTTP_CACHE)

    if (u->conf->cache) {
        ngx_int_t  rc;

        rc = ngx_http_upstream_cache(r, u);

        if (rc == NGX_BUSY) {
            r->write_event_handler = ngx_http_upstream_init_request;
            return;
        }

        r->write_event_handler = ngx_http_request_empty_handler;

        if (rc == NGX_ERROR) {
            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
            return;
        }

        if (rc == NGX_OK) {
            rc = ngx_http_upstream_cache_send...",548.0,817.0,1.0,1.0,270.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
5808,309166,ngx_http_upstream_resolve_handler,1,ngx_http_upstream_resolve_handler,void ngx_http_upstream_resolve_handler (ngx_resolver_ctx_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_resolve_handler(ngx_resolver_ctx_t *ctx)
{
    ngx_uint_t                     run_posted;
    ngx_connection_t              *c;
    ngx_http_request_t            *r;
    ngx_http_upstream_t           *u;
    ngx_http_upstream_resolved_t  *ur;

    run_posted = ctx->async;

    r = ctx->data;
    c = r->connection;

    u = r->upstream;
    ur = u->resolved;

    ngx_http_set_log_request(c->log, r);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream resolve: \""%V?%V\"""", &r->uri, &r->args);

    if (ctx->state) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""%V could not be resolved (%i: %s)"",
                      &ctx->name, ctx->state,
                      ngx_resolver_strerror(ctx->state));

        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_BAD_GATEWAY);
        goto failed;
    }

    ur->naddrs = ctx->naddrs;
    ur->addrs = ctx->addrs;

#if (NGX_DEBUG)
    {
    u_char   ...",1189.0,1266.0,1.0,1.0,78.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5809,309171,ngx_http_upstream_rd_check_broken_connection,1,ngx_http_upstream_rd_check_broken_connection,void ngx_http_upstream_rd_check_broken_connection (ngx_http_request_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_rd_check_broken_connection(ngx_http_request_t *r)
{
    ngx_http_upstream_check_broken_connection(r, r->connection->read);
}",1303.0,1307.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5810,309176,ngx_http_upstream_wr_check_broken_connection,1,ngx_http_upstream_wr_check_broken_connection,void ngx_http_upstream_wr_check_broken_connection (ngx_http_request_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_wr_check_broken_connection(ngx_http_request_t *r)
{
    ngx_http_upstream_check_broken_connection(r, r->connection->write);
}",1310.0,1314.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5811,309181,ngx_http_upstream_check_broken_connection,1,ngx_http_upstream_check_broken_connection,"void ngx_http_upstream_check_broken_connection (ngx_http_request_t*,ngx_event_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_check_broken_connection(ngx_http_request_t *r,
    ngx_event_t *ev)
{
    int                  n;
    char                 buf[1];
    ngx_err_t            err;
    ngx_int_t            event;
    ngx_connection_t     *c;
    ngx_http_upstream_t  *u;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, ev->log, 0,
                   ""http upstream check client, write event:%d, \""%V\"""",
                   ev->write, &r->uri);

    c = r->connection;
    u = r->upstream;

    if (c->error) {
        if ((ngx_event_flags & NGX_USE_LEVEL_EVENT) && ev->active) {

            event = ev->write ? NGX_WRITE_EVENT : NGX_READ_EVENT;

            if (ngx_del_event(ev, event, 0) != NGX_OK) {
                ngx_http_upstream_finalize_request(r, u,
                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
                return;
            }
        }

        if (!u->cacheable) {
            ngx_http_upstream_finalize_request(r, u,
                       ...",1317.0,1508.0,1.0,1.0,192.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5812,309187,ngx_http_upstream_connect,1,ngx_http_upstream_connect,"void ngx_http_upstream_connect (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_connect(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    ngx_int_t          rc;
    ngx_connection_t  *c;

    r->connection->log->action = ""connecting to upstream"";

    if (u->state && u->state->response_time == (ngx_msec_t) -1) {
        u->state->response_time = ngx_current_msec - u->start_time;
    }

    u->state = ngx_array_push(r->upstream_states);
    if (u->state == NULL) {
        ngx_http_upstream_finalize_request(r, u,
                                           NGX_HTTP_INTERNAL_SERVER_ERROR);
        return;
    }

    ngx_memzero(u->state, sizeof(ngx_http_upstream_state_t));

    u->start_time = ngx_current_msec;

    u->state->response_time = (ngx_msec_t) -1;
    u->state->connect_time = (ngx_msec_t) -1;
    u->state->header_time = (ngx_msec_t) -1;

    rc = ngx_event_connect_peer(&u->peer);

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http upstream connect: %i"", rc);

    if (rc == NGX_ERROR) {
...",1511.0,1660.0,1.0,1.0,150.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5813,309193,ngx_http_upstream_reinit,1,ngx_http_upstream_reinit,"ngx_int_t ngx_http_upstream_reinit (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_reinit(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    off_t         file_pos;
    ngx_chain_t  *cl;

    if (u->reinit_request(r) != NGX_OK) {
        return NGX_ERROR;
    }

    u->keepalive = 0;
    u->upgrade = 0;
    u->error = 0;

    ngx_memzero(&u->headers_in, sizeof(ngx_http_upstream_headers_in_t));
    u->headers_in.content_length_n = -1;
    u->headers_in.last_modified_time = -1;

    if (ngx_list_init(&u->headers_in.headers, r->pool, 8,
                      sizeof(ngx_table_elt_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_list_init(&u->headers_in.trailers, r->pool, 2,
                      sizeof(ngx_table_elt_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    /* reinit the request chain */

    file_pos = 0;

    for (cl = u->request_bufs; cl; cl = cl->next) {
        cl->buf->pos = cl->buf->start;

        /* there is at most one file */

        if (cl->buf->in_file) {
            cl...",1969.0,2052.0,1.0,1.0,84.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5814,309199,ngx_http_upstream_send_request,1,ngx_http_upstream_send_request,"void ngx_http_upstream_send_request (ngx_http_request_t*,ngx_http_upstream_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_send_request(ngx_http_request_t *r, ngx_http_upstream_t *u,
    ngx_uint_t do_write)
{
    ngx_int_t          rc;
    ngx_connection_t  *c;

    c = u->peer.connection;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream send request"");

    if (u->state->connect_time == (ngx_msec_t) -1) {
        u->state->connect_time = ngx_current_msec - u->start_time;
    }

    if (!u->request_sent && ngx_http_upstream_test_connect(c) != NGX_OK) {
        ngx_http_upstream_next(r, u, NGX_HTTP_UPSTREAM_FT_ERROR);
        return;
    }

    c->log->action = ""sending request to upstream"";

    rc = ngx_http_upstream_send_request_body(r, u, do_write);

    if (rc == NGX_ERROR) {
        ngx_http_upstream_next(r, u, NGX_HTTP_UPSTREAM_FT_ERROR);
        return;
    }

    if (rc >= NGX_HTTP_SPECIAL_RESPONSE) {
        ngx_http_upstream_finalize_request(r, u, rc);
        return;
    }

    if (rc == NGX_AGAIN) {
        if (!c->write->rea...",2055.0,2161.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5815,309206,ngx_http_upstream_send_request_body,1,ngx_http_upstream_send_request_body,"ngx_int_t ngx_http_upstream_send_request_body (ngx_http_request_t*,ngx_http_upstream_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_send_request_body(ngx_http_request_t *r,
    ngx_http_upstream_t *u, ngx_uint_t do_write)
{
    ngx_int_t                  rc;
    ngx_chain_t               *out, *cl, *ln;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http upstream send request body"");

    if (!r->request_body_no_buffering) {

        /* buffered request body */

        if (!u->request_sent) {
            u->request_sent = 1;
            out = u->request_bufs;

        } else {
            out = NULL;
        }

        rc = ngx_output_chain(&u->output, out);

        if (rc == NGX_AGAIN) {
            u->request_body_blocked = 1;

        } else {
            u->request_body_blocked = 0;
        }

        return rc;
    }

    if (!u->request_sent) {
        u->request_sent = 1;
        out = u->request_bufs;

        if (r->request_body->bufs) {
            for (cl = ou...",2164.0,2281.0,1.0,1.0,118.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5816,309213,ngx_http_upstream_send_request_handler,1,ngx_http_upstream_send_request_handler,"void ngx_http_upstream_send_request_handler (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_send_request_handler(ngx_http_request_t *r,
    ngx_http_upstream_t *u)
{
    ngx_connection_t  *c;

    c = u->peer.connection;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http upstream send request handler"");

    if (c->write->timedout) {
        ngx_http_upstream_next(r, u, NGX_HTTP_UPSTREAM_FT_TIMEOUT);
        return;
    }

#if (NGX_HTTP_SSL)

    if (u->ssl && c->ssl == NULL) {
        ngx_http_upstream_ssl_init_connection(r, u, c);
        return;
    }

#endif

    if (u->header_sent && !u->conf->preserve_output) {
        u->write_event_handler = ngx_http_upstream_dummy_handler;

        (void) ngx_handle_write_event(c->write, 0);

        return;
    }

    ngx_http_upstream_send_request(r, u, 1);
}",2284.0,2318.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5817,309219,ngx_http_upstream_read_request_handler,1,ngx_http_upstream_read_request_handler,void ngx_http_upstream_read_request_handler (ngx_http_request_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_read_request_handler(ngx_http_request_t *r)
{
    ngx_connection_t     *c;
    ngx_http_upstream_t  *u;

    c = r->connection;
    u = r->upstream;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http upstream read request handler"");

    if (c->read->timedout) {
        c->timedout = 1;
        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    ngx_http_upstream_send_request(r, u, 0);
}",2321.0,2340.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5818,309224,ngx_http_upstream_process_header,1,ngx_http_upstream_process_header,"void ngx_http_upstream_process_header (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_process_header(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    ssize_t            n;
    ngx_int_t          rc;
    ngx_connection_t  *c;

    c = u->peer.connection;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream process header"");

    c->log->action = ""reading response header from upstream"";

    if (c->read->timedout) {
        ngx_http_upstream_next(r, u, NGX_HTTP_UPSTREAM_FT_TIMEOUT);
        return;
    }

    if (!u->request_sent && ngx_http_upstream_test_connect(c) != NGX_OK) {
        ngx_http_upstream_next(r, u, NGX_HTTP_UPSTREAM_FT_ERROR);
        return;
    }

    if (u->buffer.start == NULL) {
        u->buffer.start = ngx_palloc(r->pool, u->conf->buffer_size);
        if (u->buffer.start == NULL) {
            ngx_http_upstream_finalize_request(r, u,
                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
            return;
        }

        u->buffer.pos = u->buffer.sta...",2343.0,2497.0,1.0,1.0,155.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5819,309230,ngx_http_upstream_test_next,1,ngx_http_upstream_test_next,"ngx_int_t ngx_http_upstream_test_next (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_test_next(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    ngx_msec_t                 timeout;
    ngx_uint_t                 status, mask;
    ngx_http_upstream_next_t  *un;

    status = u->headers_in.status_n;

    for (un = ngx_http_upstream_next_errors; un->status; un++) {

        if (status != un->status) {
            continue;
        }

        timeout = u->conf->next_upstream_timeout;

        if (u->request_sent
            && (r->method & (NGX_HTTP_POST|NGX_HTTP_LOCK|NGX_HTTP_PATCH)))
        {
            mask = un->mask | NGX_HTTP_UPSTREAM_FT_NON_IDEMPOTENT;

        } else {
            mask = un->mask;
        }

        if (u->peer.tries > 1
            && ((u->conf->next_upstream & mask) == mask)
            && !(u->request_sent && r->request_body_no_buffering)
            && !(timeout && ngx_current_msec - u->peer.start_time >= timeout))
        {
            ngx_http_upstream_next(r, u, un->mask);
            return NGX_OK;...",2500.0,2636.0,1.0,1.0,137.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5820,309236,ngx_http_upstream_intercept_errors,1,ngx_http_upstream_intercept_errors,"ngx_int_t ngx_http_upstream_intercept_errors (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_intercept_errors(ngx_http_request_t *r,
    ngx_http_upstream_t *u)
{
    ngx_int_t                  status;
    ngx_uint_t                 i;
    ngx_table_elt_t           *h;
    ngx_http_err_page_t       *err_page;
    ngx_http_core_loc_conf_t  *clcf;

    status = u->headers_in.status_n;

    if (status == NGX_HTTP_NOT_FOUND && u->conf->intercept_404) {
        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_NOT_FOUND);
        return NGX_OK;
    }

    if (!u->conf->intercept_errors) {
        return NGX_DECLINED;
    }

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->error_pages == NULL) {
        return NGX_DECLINED;
    }

    err_page = clcf->error_pages->elts;
    for (i = 0; i < clcf->error_pages->nelts; i++) {

        if (err_page[i].status == status) {

            if (status == NGX_HTTP_UNAUTHORIZED
                && u->headers_in.www_authenticate)
            {
                h = ngx_list_push(&r...",2639.0,2719.0,1.0,1.0,81.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5821,309242,ngx_http_upstream_test_connect,1,ngx_http_upstream_test_connect,ngx_int_t ngx_http_upstream_test_connect (ngx_connection_t*),http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_test_connect(ngx_connection_t *c)
{
    int        err;
    socklen_t  len;

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT)  {
        if (c->write->pending_eof || c->read->pending_eof) {
            if (c->write->pending_eof) {
                err = c->write->kq_errno;

            } else {
                err = c->read->kq_errno;
            }

            c->log->action = ""connecting to upstream"";
            (void) ngx_connection_error(c, err,
                                    ""kevent() reported that connect() failed"");
            return NGX_ERROR;
        }

    } else
#endif
    {
        err = 0;
        len = sizeof(int);

        /*
         * BSDs and Linux return 0 and set a pending error in err
         * Solaris returns -1 and sets errno
         */

        if (getsockopt(c->fd, SOL_SOCKET, SO_ERROR, (void *) &err, &len)
            == -1)
        {
            err = ngx_socket_errno;
        }

        if (...",2722.0,2770.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5822,309247,ngx_http_upstream_process_headers,1,ngx_http_upstream_process_headers,"ngx_int_t ngx_http_upstream_process_headers (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_headers(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    ngx_str_t                       uri, args;
    ngx_uint_t                      i, flags;
    ngx_list_part_t                *part;
    ngx_table_elt_t                *h;
    ngx_http_upstream_header_t     *hh;
    ngx_http_upstream_main_conf_t  *umcf;

    umcf = ngx_http_get_module_main_conf(r, ngx_http_upstream_module);

    if (u->headers_in.x_accel_redirect
        && !(u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT))
    {
        ngx_http_upstream_finalize_request(r, u, NGX_DECLINED);

        part = &u->headers_in.headers.part;
        h = part->elts;

        for (i = 0; /* void */; i++) {

            if (i >= part->nelts) {
                if (part->next == NULL) {
                    break;
                }

                part = part->next;
                h = part->elts;
                i = 0;
            }

            hh = ngx_hash_find(&umcf->headers...",2773.0,2913.0,1.0,1.0,141.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5823,309253,ngx_http_upstream_process_trailers,1,ngx_http_upstream_process_trailers,"ngx_int_t ngx_http_upstream_process_trailers (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_trailers(ngx_http_request_t *r,
    ngx_http_upstream_t *u)
{
    ngx_uint_t        i;
    ngx_list_part_t  *part;
    ngx_table_elt_t  *h, *ho;

    if (!u->conf->pass_trailers) {
        return NGX_OK;
    }

    part = &u->headers_in.trailers.part;
    h = part->elts;

    for (i = 0; /* void */; i++) {

        if (i >= part->nelts) {
            if (part->next == NULL) {
                break;
            }

            part = part->next;
            h = part->elts;
            i = 0;
        }

        if (ngx_hash_find(&u->conf->hide_headers_hash, h[i].hash,
                          h[i].lowcase_key, h[i].key.len))
        {
            continue;
        }

        ho = ngx_list_push(&r->headers_out.trailers);
        if (ho == NULL) {
            return NGX_ERROR;
        }

        *ho = h[i];
    }

    return NGX_OK;
}",2916.0,2958.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5824,309259,ngx_http_upstream_send_response,1,ngx_http_upstream_send_response,"void ngx_http_upstream_send_response (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_send_response(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    ssize_t                    n;
    ngx_int_t                  rc;
    ngx_event_pipe_t          *p;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    rc = ngx_http_send_header(r);

    if (rc == NGX_ERROR || rc > NGX_OK || r->post_action) {
        ngx_http_upstream_finalize_request(r, u, rc);
        return;
    }

    u->header_sent = 1;

    if (u->upgrade) {

#if (NGX_HTTP_CACHE)

        if (r->cache) {
            ngx_http_file_cache_free(r->cache, u->pipe->temp_file);
        }

#endif

        ngx_http_upstream_upgrade(r, u);
        return;
    }

    c = r->connection;

    if (r->header_only) {

        if (!u->buffering) {
            ngx_http_upstream_finalize_request(r, u, rc);
            return;
        }

        if (!u->cacheable && !u->store) {
            ngx_http_upstream_finalize_request(r, u, rc);
            return;
        }

        u->p...",2961.0,3301.0,1.0,1.0,341.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5825,309265,ngx_http_upstream_upgrade,1,ngx_http_upstream_upgrade,"void ngx_http_upstream_upgrade (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_upgrade(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;
    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    /* TODO: prevent upgrade if not requested or not possible */

    if (r != r->main) {
        ngx_log_error(NGX_LOG_ERR, c->log, 0,
                      ""connection upgrade in subrequest"");
        ngx_http_upstream_finalize_request(r, u, NGX_ERROR);
        return;
    }

    r->keepalive = 0;
    c->log->action = ""proxying upgraded connection"";

    u->read_event_handler = ngx_http_upstream_upgraded_read_upstream;
    u->write_event_handler = ngx_http_upstream_upgraded_write_upstream;
    r->read_event_handler = ngx_http_upstream_upgraded_read_downstream;
    r->write_event_handler = ngx_http_upstream_upgraded_write_downstream;

    if (clcf->tcp_nodelay) {

        if (ngx_tcp_nodelay(c) != NGX_OK) {
            ngx_http_upstream_...",3304.0,3357.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5826,309271,ngx_http_upstream_upgraded_read_downstream,1,ngx_http_upstream_upgraded_read_downstream,void ngx_http_upstream_upgraded_read_downstream (ngx_http_request_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_upgraded_read_downstream(ngx_http_request_t *r)
{
    ngx_http_upstream_process_upgraded(r, 0, 0);
}",3360.0,3364.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5827,309276,ngx_http_upstream_upgraded_write_downstream,1,ngx_http_upstream_upgraded_write_downstream,void ngx_http_upstream_upgraded_write_downstream (ngx_http_request_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_upgraded_write_downstream(ngx_http_request_t *r)
{
    ngx_http_upstream_process_upgraded(r, 1, 1);
}",3367.0,3371.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5828,309281,ngx_http_upstream_upgraded_read_upstream,1,ngx_http_upstream_upgraded_read_upstream,"void ngx_http_upstream_upgraded_read_upstream (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_upgraded_read_upstream(ngx_http_request_t *r,
    ngx_http_upstream_t *u)
{
    ngx_http_upstream_process_upgraded(r, 1, 0);
}",3374.0,3379.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5829,309287,ngx_http_upstream_upgraded_write_upstream,1,ngx_http_upstream_upgraded_write_upstream,"void ngx_http_upstream_upgraded_write_upstream (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_upgraded_write_upstream(ngx_http_request_t *r,
    ngx_http_upstream_t *u)
{
    ngx_http_upstream_process_upgraded(r, 0, 1);
}",3382.0,3387.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5830,309293,ngx_http_upstream_process_upgraded,1,ngx_http_upstream_process_upgraded,"void ngx_http_upstream_process_upgraded (ngx_http_request_t*,ngx_uint_t,ngx_uint_t)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_process_upgraded(ngx_http_request_t *r,
    ngx_uint_t from_upstream, ngx_uint_t do_write)
{
    size_t                     size;
    ssize_t                    n;
    ngx_buf_t                 *b;
    ngx_uint_t                 flags;
    ngx_connection_t          *c, *downstream, *upstream, *dst, *src;
    ngx_http_upstream_t       *u;
    ngx_http_core_loc_conf_t  *clcf;

    c = r->connection;
    u = r->upstream;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream process upgraded, fu:%ui"", from_upstream);

    downstream = c;
    upstream = u->peer.connection;

    if (downstream->write->timedout) {
        c->timedout = 1;
        ngx_connection_error(c, NGX_ETIMEDOUT, ""client timed out"");
        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    if (upstream->read->timedout || upstream->write->timedout) {
        ngx_connection_error(c, NGX_ETIMEDOUT, ""upstream timed ...",3390.0,3580.0,1.0,1.0,191.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5831,309300,ngx_http_upstream_process_non_buffered_downstream,1,ngx_http_upstream_process_non_buffered_downstream,void ngx_http_upstream_process_non_buffered_downstream (ngx_http_request_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_process_non_buffered_downstream(ngx_http_request_t *r)
{
    ngx_event_t          *wev;
    ngx_connection_t     *c;
    ngx_http_upstream_t  *u;

    c = r->connection;
    u = r->upstream;
    wev = c->write;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream process non buffered downstream"");

    c->log->action = ""sending to client"";

    if (wev->timedout) {
        c->timedout = 1;
        ngx_connection_error(c, NGX_ETIMEDOUT, ""client timed out"");
        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    ngx_http_upstream_process_non_buffered_request(r, 1);
}",3583.0,3607.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5832,309305,ngx_http_upstream_process_non_buffered_upstream,1,ngx_http_upstream_process_non_buffered_upstream,"void ngx_http_upstream_process_non_buffered_upstream (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_process_non_buffered_upstream(ngx_http_request_t *r,
    ngx_http_upstream_t *u)
{
    ngx_connection_t  *c;

    c = u->peer.connection;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream process non buffered upstream"");

    c->log->action = ""reading upstream"";

    if (c->read->timedout) {
        ngx_connection_error(c, NGX_ETIMEDOUT, ""upstream timed out"");
        ngx_http_upstream_finalize_request(r, u, NGX_HTTP_GATEWAY_TIME_OUT);
        return;
    }

    ngx_http_upstream_process_non_buffered_request(r, 0);
}",3610.0,3630.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5833,309311,ngx_http_upstream_process_non_buffered_request,1,ngx_http_upstream_process_non_buffered_request,"void ngx_http_upstream_process_non_buffered_request (ngx_http_request_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_process_non_buffered_request(ngx_http_request_t *r,
    ngx_uint_t do_write)
{
    size_t                     size;
    ssize_t                    n;
    ngx_buf_t                 *b;
    ngx_int_t                  rc;
    ngx_uint_t                 flags;
    ngx_connection_t          *downstream, *upstream;
    ngx_http_upstream_t       *u;
    ngx_http_core_loc_conf_t  *clcf;

    u = r->upstream;
    downstream = r->connection;
    upstream = u->peer.connection;

    b = &u->buffer;

    do_write = do_write || u->length == 0;

    for ( ;; ) {

        if (do_write) {

            if (u->out_bufs || u->busy_bufs || downstream->buffered) {
                rc = ngx_http_output_filter(r, u->out_bufs);

                if (rc == NGX_ERROR) {
                    ngx_http_upstream_finalize_request(r, u, NGX_ERROR);
                    return;
                }

                ngx_chain_update_chains(r->pool, &u->free_bufs, &u->busy_bufs,
                ...",3633.0,3763.0,1.0,1.0,131.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5834,309317,ngx_http_upstream_output_filter,1,ngx_http_upstream_output_filter,"ngx_int_t ngx_http_upstream_output_filter (void*,ngx_chain_t*)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_output_filter(void *data, ngx_chain_t *chain)
{
    ngx_int_t            rc;
    ngx_event_pipe_t    *p;
    ngx_http_request_t  *r;

    r = data;
    p = r->upstream->pipe;

    rc = ngx_http_output_filter(r, chain);

    p->aio = r->aio;

    return rc;
}",3917.0,3932.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5835,309323,ngx_http_upstream_process_downstream,1,ngx_http_upstream_process_downstream,void ngx_http_upstream_process_downstream (ngx_http_request_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_process_downstream(ngx_http_request_t *r)
{
    ngx_event_t          *wev;
    ngx_connection_t     *c;
    ngx_event_pipe_t     *p;
    ngx_http_upstream_t  *u;

    c = r->connection;
    u = r->upstream;
    p = u->pipe;
    wev = c->write;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream process downstream"");

    c->log->action = ""sending to client"";

#if (NGX_THREADS)
    p->aio = r->aio;
#endif

    if (wev->timedout) {

        p->downstream_error = 1;
        c->timedout = 1;
        ngx_connection_error(c, NGX_ETIMEDOUT, ""client timed out"");

    } else {

        if (wev->delayed) {

            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                           ""http downstream delayed"");

            if (ngx_handle_write_event(wev, p->send_lowat) != NGX_OK) {
                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);
            }

            return;
        }

        if (ngx_event_pipe(p...",3935.0,3984.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5836,309328,ngx_http_upstream_process_upstream,1,ngx_http_upstream_process_upstream,"void ngx_http_upstream_process_upstream (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_process_upstream(ngx_http_request_t *r,
    ngx_http_upstream_t *u)
{
    ngx_event_t       *rev;
    ngx_event_pipe_t  *p;
    ngx_connection_t  *c;

    c = u->peer.connection;
    p = u->pipe;
    rev = c->read;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream process upstream"");

    c->log->action = ""reading upstream"";

    if (rev->timedout) {

        p->upstream_error = 1;
        ngx_connection_error(c, NGX_ETIMEDOUT, ""upstream timed out"");

    } else {

        if (rev->delayed) {

            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                           ""http upstream delayed"");

            if (ngx_handle_read_event(rev, 0) != NGX_OK) {
                ngx_http_upstream_finalize_request(r, u, NGX_ERROR);
            }

            return;
        }

        if (ngx_event_pipe(p, 0) == NGX_ABORT) {
            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);
            return;
        }
   ...",3987.0,4030.0,1.0,1.0,44.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5837,309334,ngx_http_upstream_process_request,1,ngx_http_upstream_process_request,"void ngx_http_upstream_process_request (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_process_request(ngx_http_request_t *r,
    ngx_http_upstream_t *u)
{
    ngx_temp_file_t   *tf;
    ngx_event_pipe_t  *p;

    p = u->pipe;

#if (NGX_THREADS)

    if (p->writing && !p->aio) {

        /*
         * make sure to call ngx_event_pipe()
         * if there is an incomplete aio write
         */

        if (ngx_event_pipe(p, 1) == NGX_ABORT) {
            ngx_http_upstream_finalize_request(r, u, NGX_ERROR);
            return;
        }
    }

    if (p->writing) {
        return;
    }

#endif

    if (u->peer.connection) {

        if (u->store) {

            if (p->upstream_eof || p->upstream_done) {

                tf = p->temp_file;

                if (u->headers_in.status_n == NGX_HTTP_OK
                    && (p->upstream_done || p->length == -1)
                    && (u->headers_in.content_length_n == -1
                        || u->headers_in.content_length_n == tf->offset))
                {
                    ngx_http_ups...",4033.0,4139.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5838,309340,ngx_http_upstream_store,1,ngx_http_upstream_store,"void ngx_http_upstream_store (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_store(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    size_t                  root;
    time_t                  lm;
    ngx_str_t               path;
    ngx_temp_file_t        *tf;
    ngx_ext_rename_file_t   ext;

    tf = u->pipe->temp_file;

    if (tf->file.fd == NGX_INVALID_FILE) {

        /* create file for empty 200 response */

        tf = ngx_pcalloc(r->pool, sizeof(ngx_temp_file_t));
        if (tf == NULL) {
            return;
        }

        tf->file.fd = NGX_INVALID_FILE;
        tf->file.log = r->connection->log;
        tf->path = u->conf->temp_path;
        tf->pool = r->pool;
        tf->persistent = 1;

        if (ngx_create_temp_file(&tf->file, tf->path, tf->pool,
                                 tf->persistent, tf->clean, tf->access)
            != NGX_OK)
        {
            return;
        }

        u->pipe->temp_file = tf;
    }

    ext.access = u->conf->store_access;
    ext.path_access = u->conf->store_access;
 ...",4142.0,4220.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5839,309346,ngx_http_upstream_dummy_handler,1,ngx_http_upstream_dummy_handler,"void ngx_http_upstream_dummy_handler (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_dummy_handler(ngx_http_request_t *r, ngx_http_upstream_t *u)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http upstream dummy handler"");
}",4223.0,4228.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5840,309352,ngx_http_upstream_next,1,ngx_http_upstream_next,"void ngx_http_upstream_next (ngx_http_request_t*,ngx_http_upstream_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_next(ngx_http_request_t *r, ngx_http_upstream_t *u,
    ngx_uint_t ft_type)
{
    ngx_msec_t  timeout;
    ngx_uint_t  status, state;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http next upstream, %xi"", ft_type);

    if (u->peer.sockaddr) {

        if (u->peer.connection) {
            u->state->bytes_sent = u->peer.connection->sent;
        }

        if (ft_type == NGX_HTTP_UPSTREAM_FT_HTTP_403
            || ft_type == NGX_HTTP_UPSTREAM_FT_HTTP_404)
        {
            state = NGX_PEER_NEXT;

        } else {
            state = NGX_PEER_FAILED;
        }

        u->peer.free(&u->peer, u->peer.data, state);
        u->peer.sockaddr = NULL;
    }

    if (ft_type == NGX_HTTP_UPSTREAM_FT_TIMEOUT) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, NGX_ETIMEDOUT,
                      ""upstream timed out"");
    }

    if (u->peer.cached && ft_type == NGX_HTTP_UPSTREAM_FT_ERROR) {
        /* TODO: inform ...",4231.0,4384.0,1.0,1.0,154.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5841,309359,ngx_http_upstream_cleanup,1,ngx_http_upstream_cleanup,void ngx_http_upstream_cleanup (void*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_cleanup(void *data)
{
    ngx_http_request_t *r = data;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""cleanup http upstream request: \""%V\"""", &r->uri);

    ngx_http_upstream_finalize_request(r, r->upstream, NGX_DONE);
}",4387.0,4396.0,1.0,1.0,10.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
5842,309364,ngx_http_upstream_finalize_request,1,ngx_http_upstream_finalize_request,"void ngx_http_upstream_finalize_request (ngx_http_request_t*,ngx_http_upstream_t*,ngx_int_t)",http\ngx_http_upstream.c,"static void
ngx_http_upstream_finalize_request(ngx_http_request_t *r,
    ngx_http_upstream_t *u, ngx_int_t rc)
{
    ngx_uint_t  flush;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""finalize http upstream request: %i"", rc);

    if (u->cleanup == NULL) {
        /* the request was already finalized */
        ngx_http_finalize_request(r, NGX_DONE);
        return;
    }

    *u->cleanup = NULL;
    u->cleanup = NULL;

    if (u->resolved && u->resolved->ctx) {
        ngx_resolve_name_done(u->resolved->ctx);
        u->resolved->ctx = NULL;
    }

    if (u->state && u->state->response_time == (ngx_msec_t) -1) {
        u->state->response_time = ngx_current_msec - u->start_time;

        if (u->pipe && u->pipe->read_length) {
            u->state->bytes_received += u->pipe->read_length
                                        - u->pipe->preread_size;
            u->state->response_length = u->pipe->read_length;
        }

        if (u->peer.conn...",4399.0,4562.0,1.0,1.0,164.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5843,309371,ngx_http_upstream_process_header_line,1,ngx_http_upstream_process_header_line,"ngx_int_t ngx_http_upstream_process_header_line (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_header_line(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_table_elt_t  **ph;

    ph = (ngx_table_elt_t **) ((char *) &r->upstream->headers_in + offset);

    if (*ph == NULL) {
        *ph = h;
    }

    return NGX_OK;
}",4565.0,4578.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5844,309378,ngx_http_upstream_process_content_length,1,ngx_http_upstream_process_content_length,"ngx_int_t ngx_http_upstream_process_content_length (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_content_length(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset)
{
    ngx_http_upstream_t  *u;

    u = r->upstream;

    u->headers_in.content_length = h;
    u->headers_in.content_length_n = ngx_atoof(h->value.data, h->value.len);

    return NGX_OK;
}",4589.0,4601.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5845,309385,ngx_http_upstream_process_last_modified,1,ngx_http_upstream_process_last_modified,"ngx_int_t ngx_http_upstream_process_last_modified (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_last_modified(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset)
{
    ngx_http_upstream_t  *u;

    u = r->upstream;

    u->headers_in.last_modified = h;
    u->headers_in.last_modified_time = ngx_parse_http_time(h->value.data,
                                                           h->value.len);

    return NGX_OK;
}",4604.0,4617.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5846,309392,ngx_http_upstream_process_set_cookie,1,ngx_http_upstream_process_set_cookie,"ngx_int_t ngx_http_upstream_process_set_cookie (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_set_cookie(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_array_t           *pa;
    ngx_table_elt_t      **ph;
    ngx_http_upstream_t   *u;

    u = r->upstream;
    pa = &u->headers_in.cookies;

    if (pa->elts == NULL) {
        if (ngx_array_init(pa, r->pool, 1, sizeof(ngx_table_elt_t *)) != NGX_OK)
        {
            return NGX_ERROR;
        }
    }

    ph = ngx_array_push(pa);
    if (ph == NULL) {
        return NGX_ERROR;
    }

    *ph = h;

#if (NGX_HTTP_CACHE)
    if (!(u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_SET_COOKIE)) {
        u->cacheable = 0;
    }
#endif

    return NGX_OK;
}",4620.0,4652.0,1.0,1.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5847,309399,ngx_http_upstream_process_cache_control,1,ngx_http_upstream_process_cache_control,"ngx_int_t ngx_http_upstream_process_cache_control (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_cache_control(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset)
{
    ngx_array_t          *pa;
    ngx_table_elt_t     **ph;
    ngx_http_upstream_t  *u;

    u = r->upstream;
    pa = &u->headers_in.cache_control;

    if (pa->elts == NULL) {
        if (ngx_array_init(pa, r->pool, 2, sizeof(ngx_table_elt_t *)) != NGX_OK)
        {
            return NGX_ERROR;
        }
    }

    ph = ngx_array_push(pa);
    if (ph == NULL) {
        return NGX_ERROR;
    }

    *ph = h;

#if (NGX_HTTP_CACHE)
    {
    u_char     *p, *start, *last;
    ngx_int_t   n;

    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL) {
        return NGX_OK;
    }

    if (r->cache == NULL) {
        return NGX_OK;
    }

    if (r->cache->valid_sec != 0 && u->headers_in.x_accel_expires != NULL) {
        return NGX_OK;
    }

    start = h->value.data;
    last = start + h->value.len;

    if (ngx_strlcasestrn(start, last, (u_char *...",4655.0,4790.0,1.0,1.0,136.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5848,309406,ngx_http_upstream_ignore_header_line,1,ngx_http_upstream_ignore_header_line,"ngx_int_t ngx_http_upstream_ignore_header_line (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_ignore_header_line(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    return NGX_OK;
}",4581.0,4586.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5849,309413,ngx_http_upstream_process_expires,1,ngx_http_upstream_process_expires,"ngx_int_t ngx_http_upstream_process_expires (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_expires(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_http_upstream_t  *u;

    u = r->upstream;
    u->headers_in.expires = h;

#if (NGX_HTTP_CACHE)
    {
    time_t  expires;

    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_EXPIRES) {
        return NGX_OK;
    }

    if (r->cache == NULL) {
        return NGX_OK;
    }

    if (r->cache->valid_sec != 0) {
        return NGX_OK;
    }

    expires = ngx_parse_http_time(h->value.data, h->value.len);

    if (expires == NGX_ERROR || expires < ngx_time()) {
        u->cacheable = 0;
        return NGX_OK;
    }

    r->cache->valid_sec = expires;
    }
#endif

    return NGX_OK;
}",4793.0,4830.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5850,309420,ngx_http_upstream_process_accel_expires,1,ngx_http_upstream_process_accel_expires,"ngx_int_t ngx_http_upstream_process_accel_expires (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_accel_expires(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset)
{
    ngx_http_upstream_t  *u;

    u = r->upstream;
    u->headers_in.x_accel_expires = h;

#if (NGX_HTTP_CACHE)
    {
    u_char     *p;
    size_t      len;
    ngx_int_t   n;

    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES) {
        return NGX_OK;
    }

    if (r->cache == NULL) {
        return NGX_OK;
    }

    len = h->value.len;
    p = h->value.data;

    if (p[0] != '@') {
        n = ngx_atoi(p, len);

        switch (n) {
        case 0:
            u->cacheable = 0;
            /* fall through */

        case NGX_ERROR:
            return NGX_OK;

        default:
            r->cache->valid_sec = ngx_time() + n;
            return NGX_OK;
        }
    }

    p++;
    len--;

    n = ngx_atoi(p, len);

    if (n != NGX_ERROR) {
        r->cache->valid_sec = n;
    }
    }
#endif

    return NGX_OK;
}",4833.0,4888.0,1.0,1.0,56.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5851,309427,ngx_http_upstream_process_limit_rate,1,ngx_http_upstream_process_limit_rate,"ngx_int_t ngx_http_upstream_process_limit_rate (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_limit_rate(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_int_t             n;
    ngx_http_upstream_t  *u;

    u = r->upstream;
    u->headers_in.x_accel_limit_rate = h;

    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE) {
        return NGX_OK;
    }

    n = ngx_atoi(h->value.data, h->value.len);

    if (n != NGX_ERROR) {
        r->limit_rate = (size_t) n;
        r->limit_rate_set = 1;
    }

    return NGX_OK;
}",4891.0,4913.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5852,309434,ngx_http_upstream_process_buffering,1,ngx_http_upstream_process_buffering,"ngx_int_t ngx_http_upstream_process_buffering (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_buffering(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    u_char                c0, c1, c2;
    ngx_http_upstream_t  *u;

    u = r->upstream;

    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING) {
        return NGX_OK;
    }

    if (u->conf->change_buffering) {

        if (h->value.len == 2) {
            c0 = ngx_tolower(h->value.data[0]);
            c1 = ngx_tolower(h->value.data[1]);

            if (c0 == 'n' && c1 == 'o') {
                u->buffering = 0;
            }

        } else if (h->value.len == 3) {
            c0 = ngx_tolower(h->value.data[0]);
            c1 = ngx_tolower(h->value.data[1]);
            c2 = ngx_tolower(h->value.data[2]);

            if (c0 == 'y' && c1 == 'e' && c2 == 's') {
                u->buffering = 1;
            }
        }
    }

    return NGX_OK;
}",4916.0,4951.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5853,309441,ngx_http_upstream_process_charset,1,ngx_http_upstream_process_charset,"ngx_int_t ngx_http_upstream_process_charset (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_charset(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    if (r->upstream->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_XA_CHARSET) {
        return NGX_OK;
    }

    r->headers_out.override_charset = &h->value;

    return NGX_OK;
}",4954.0,4965.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5854,309448,ngx_http_upstream_process_connection,1,ngx_http_upstream_process_connection,"ngx_int_t ngx_http_upstream_process_connection (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_connection(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    r->upstream->headers_in.connection = h;

    if (ngx_strlcasestrn(h->value.data, h->value.data + h->value.len,
                         (u_char *) ""close"", 5 - 1)
        != NULL)
    {
        r->upstream->headers_in.connection_close = 1;
    }

    return NGX_OK;
}",4968.0,4982.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5855,309455,ngx_http_upstream_process_transfer_encoding,1,ngx_http_upstream_process_transfer_encoding,"ngx_int_t ngx_http_upstream_process_transfer_encoding (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_transfer_encoding(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset)
{
    r->upstream->headers_in.transfer_encoding = h;

    if (ngx_strlcasestrn(h->value.data, h->value.data + h->value.len,
                         (u_char *) ""chunked"", 7 - 1)
        != NULL)
    {
        r->upstream->headers_in.chunked = 1;
    }

    return NGX_OK;
}",4985.0,4999.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5856,309462,ngx_http_upstream_process_vary,1,ngx_http_upstream_process_vary,"ngx_int_t ngx_http_upstream_process_vary (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_process_vary(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset)
{
    ngx_http_upstream_t  *u;

    u = r->upstream;
    u->headers_in.vary = h;

#if (NGX_HTTP_CACHE)

    if (u->conf->ignore_headers & NGX_HTTP_UPSTREAM_IGN_VARY) {
        return NGX_OK;
    }

    if (r->cache == NULL) {
        return NGX_OK;
    }

    if (h->value.len > NGX_HTTP_CACHE_VARY_LEN
        || (h->value.len == 1 && h->value.data[0] == '*'))
    {
        u->cacheable = 0;
    }

    r->cache->vary = h->value;

#endif

    return NGX_OK;
}",5002.0,5032.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5857,309469,ngx_http_upstream_copy_header_line,1,ngx_http_upstream_copy_header_line,"ngx_int_t ngx_http_upstream_copy_header_line (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_copy_header_line(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_table_elt_t  *ho, **ph;

    ho = ngx_list_push(&r->headers_out.headers);
    if (ho == NULL) {
        return NGX_ERROR;
    }

    *ho = *h;

    if (offset) {
        ph = (ngx_table_elt_t **) ((char *) &r->headers_out + offset);
        *ph = ho;
    }

    return NGX_OK;
}",5035.0,5054.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5858,309476,ngx_http_upstream_copy_multi_header_lines,1,ngx_http_upstream_copy_multi_header_lines,"ngx_int_t ngx_http_upstream_copy_multi_header_lines (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_copy_multi_header_lines(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset)
{
    ngx_array_t      *pa;
    ngx_table_elt_t  *ho, **ph;

    pa = (ngx_array_t *) ((char *) &r->headers_out + offset);

    if (pa->elts == NULL) {
        if (ngx_array_init(pa, r->pool, 2, sizeof(ngx_table_elt_t *)) != NGX_OK)
        {
            return NGX_ERROR;
        }
    }

    ho = ngx_list_push(&r->headers_out.headers);
    if (ho == NULL) {
        return NGX_ERROR;
    }

    *ho = *h;

    ph = ngx_array_push(pa);
    if (ph == NULL) {
        return NGX_ERROR;
    }

    *ph = ho;

    return NGX_OK;
}",5057.0,5088.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5859,309483,ngx_http_upstream_copy_content_type,1,ngx_http_upstream_copy_content_type,"ngx_int_t ngx_http_upstream_copy_content_type (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_copy_content_type(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    u_char  *p, *last;

    r->headers_out.content_type_len = h->value.len;
    r->headers_out.content_type = h->value;
    r->headers_out.content_type_lowcase = NULL;

    for (p = h->value.data; *p; p++) {

        if (*p != ';') {
            continue;
        }

        last = p;

        while (*++p == ' ') { /* void */ }

        if (*p == '\0') {
            return NGX_OK;
        }

        if (ngx_strncasecmp(p, (u_char *) ""charset="", 8) != 0) {
            continue;
        }

        p += 8;

        r->headers_out.content_type_len = last - h->value.data;

        if (*p == '""') {
            p++;
        }

        last = h->value.data + h->value.len;

        if (*(last - 1) == '""') {
            last--;
        }

        r->headers_out.charset.len = last - p;
        r->headers_out.charset.data = p;

        return NGX_OK;
    }

    return NGX_OK;
}",5091.0,5140.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5860,309490,ngx_http_upstream_copy_last_modified,1,ngx_http_upstream_copy_last_modified,"ngx_int_t ngx_http_upstream_copy_last_modified (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_copy_last_modified(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_table_elt_t  *ho;

    ho = ngx_list_push(&r->headers_out.headers);
    if (ho == NULL) {
        return NGX_ERROR;
    }

    *ho = *h;

    r->headers_out.last_modified = ho;
    r->headers_out.last_modified_time =
                                    r->upstream->headers_in.last_modified_time;

    return NGX_OK;
}",5143.0,5161.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5861,309497,ngx_http_upstream_rewrite_location,1,ngx_http_upstream_rewrite_location,"ngx_int_t ngx_http_upstream_rewrite_location (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_rewrite_location(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_int_t         rc;
    ngx_table_elt_t  *ho;

    ho = ngx_list_push(&r->headers_out.headers);
    if (ho == NULL) {
        return NGX_ERROR;
    }

    *ho = *h;

    if (r->upstream->rewrite_redirect) {
        rc = r->upstream->rewrite_redirect(r, ho, 0);

        if (rc == NGX_DECLINED) {
            return NGX_OK;
        }

        if (rc == NGX_OK) {
            r->headers_out.location = ho;

            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           ""rewritten location: \""%V\"""", &ho->value);
        }

        return rc;
    }

    if (ho->value.data[0] != '/') {
        r->headers_out.location = ho;
    }

    /*
     * we do not set r->headers_out.location here to avoid handling
     * relative redirects in ngx_http_header_filter()
     */

    return NGX_OK;
}",5164.0,5205.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5862,309504,ngx_http_upstream_rewrite_refresh,1,ngx_http_upstream_rewrite_refresh,"ngx_int_t ngx_http_upstream_rewrite_refresh (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_rewrite_refresh(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    u_char           *p;
    ngx_int_t         rc;
    ngx_table_elt_t  *ho;

    ho = ngx_list_push(&r->headers_out.headers);
    if (ho == NULL) {
        return NGX_ERROR;
    }

    *ho = *h;

    if (r->upstream->rewrite_redirect) {

        p = ngx_strcasestrn(ho->value.data, ""url="", 4 - 1);

        if (p) {
            rc = r->upstream->rewrite_redirect(r, ho, p + 4 - ho->value.data);

        } else {
            return NGX_OK;
        }

        if (rc == NGX_DECLINED) {
            return NGX_OK;
        }

        if (rc == NGX_OK) {
            r->headers_out.refresh = ho;

            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           ""rewritten refresh: \""%V\"""", &ho->value);
        }

        return rc;
    }

    r->headers_out.refresh = ho;

    return NGX_OK;
}",5208.0,5251.0,1.0,1.0,44.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5863,309511,ngx_http_upstream_rewrite_set_cookie,1,ngx_http_upstream_rewrite_set_cookie,"ngx_int_t ngx_http_upstream_rewrite_set_cookie (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_rewrite_set_cookie(ngx_http_request_t *r, ngx_table_elt_t *h,
    ngx_uint_t offset)
{
    ngx_int_t         rc;
    ngx_table_elt_t  *ho;

    ho = ngx_list_push(&r->headers_out.headers);
    if (ho == NULL) {
        return NGX_ERROR;
    }

    *ho = *h;

    if (r->upstream->rewrite_cookie) {
        rc = r->upstream->rewrite_cookie(r, ho);

        if (rc == NGX_DECLINED) {
            return NGX_OK;
        }

#if (NGX_DEBUG)
        if (rc == NGX_OK) {
            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                           ""rewritten cookie: \""%V\"""", &ho->value);
        }
#endif

        return rc;
    }

    return NGX_OK;
}",5254.0,5286.0,1.0,1.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5864,309518,ngx_http_upstream_copy_allow_ranges,1,ngx_http_upstream_copy_allow_ranges,"ngx_int_t ngx_http_upstream_copy_allow_ranges (ngx_http_request_t*,ngx_table_elt_t*,ngx_uint_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_copy_allow_ranges(ngx_http_request_t *r,
    ngx_table_elt_t *h, ngx_uint_t offset)
{
    ngx_table_elt_t  *ho;

    if (r->upstream->conf->force_ranges) {
        return NGX_OK;
    }

#if (NGX_HTTP_CACHE)

    if (r->cached) {
        r->allow_ranges = 1;
        return NGX_OK;
    }

    if (r->upstream->cacheable) {
        r->allow_ranges = 1;
        r->single_range = 1;
        return NGX_OK;
    }

#endif

    ho = ngx_list_push(&r->headers_out.headers);
    if (ho == NULL) {
        return NGX_ERROR;
    }

    *ho = *h;

    r->headers_out.accept_ranges = ho;

    return NGX_OK;
}",5289.0,5324.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5865,309525,ngx_http_upstream_add_variables,1,ngx_http_upstream_add_variables,ngx_int_t ngx_http_upstream_add_variables (ngx_conf_t*),http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_upstream_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",5350.0,5366.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5866,309530,ngx_http_upstream_addr_variable,1,ngx_http_upstream_addr_variable,"ngx_int_t ngx_http_upstream_addr_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_addr_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                     *p;
    size_t                      len;
    ngx_uint_t                  i;
    ngx_http_upstream_state_t  *state;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (r->upstream_states == NULL || r->upstream_states->nelts == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    len = 0;
    state = r->upstream_states->elts;

    for (i = 0; i < r->upstream_states->nelts; i++) {
        if (state[i].peer) {
            len += state[i].peer->len + 2;

        } else {
            len += 3;
        }
    }

    p = ngx_pnalloc(r->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->data = p;

    i = 0;

    for ( ;; ) {
        if (state[i].peer) {
            p = ngx_cpymem(p, state[i].peer->data, state[i].peer->len);
        }

        if (++i == r->upstream_states->nelts) {
 ...",5369.0,5437.0,1.0,1.0,69.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5867,309537,ngx_http_upstream_status_variable,1,ngx_http_upstream_status_variable,"ngx_int_t ngx_http_upstream_status_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_status_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                     *p;
    size_t                      len;
    ngx_uint_t                  i;
    ngx_http_upstream_state_t  *state;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (r->upstream_states == NULL || r->upstream_states->nelts == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    len = r->upstream_states->nelts * (3 + 2);

    p = ngx_pnalloc(r->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->data = p;

    i = 0;
    state = r->upstream_states->elts;

    for ( ;; ) {
        if (state[i].status) {
            p = ngx_sprintf(p, ""%ui"", state[i].status);

        } else {
            *p++ = '-';
        }

        if (++i == r->upstream_states->nelts) {
            break;
        }

        if (state[i].peer) {
            *p++ = ',';
            *p++ = ' ';

        } el...",5440.0,5502.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5868,309544,ngx_http_upstream_response_time_variable,1,ngx_http_upstream_response_time_variable,"ngx_int_t ngx_http_upstream_response_time_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_response_time_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                     *p;
    size_t                      len;
    ngx_uint_t                  i;
    ngx_msec_int_t              ms;
    ngx_http_upstream_state_t  *state;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (r->upstream_states == NULL || r->upstream_states->nelts == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    len = r->upstream_states->nelts * (NGX_TIME_T_LEN + 4 + 2);

    p = ngx_pnalloc(r->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->data = p;

    i = 0;
    state = r->upstream_states->elts;

    for ( ;; ) {

        if (data == 1) {
            ms = state[i].header_time;

        } else if (data == 2) {
            ms = state[i].connect_time;

        } else {
            ms = state[i].response_time;
        }

        if (ms != -1) {
            ms =...",5505.0,5580.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5869,309551,ngx_http_upstream_response_length_variable,1,ngx_http_upstream_response_length_variable,"ngx_int_t ngx_http_upstream_response_length_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_response_length_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                     *p;
    size_t                      len;
    ngx_uint_t                  i;
    ngx_http_upstream_state_t  *state;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (r->upstream_states == NULL || r->upstream_states->nelts == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    len = r->upstream_states->nelts * (NGX_OFF_T_LEN + 2);

    p = ngx_pnalloc(r->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->data = p;

    i = 0;
    state = r->upstream_states->elts;

    for ( ;; ) {

        if (data == 1) {
            p = ngx_sprintf(p, ""%O"", state[i].bytes_received);

        } else if (data == 2) {
            p = ngx_sprintf(p, ""%O"", state[i].bytes_sent);

        } else {
            p = ngx_sprintf(p, ""%O"", state[i].response_length);
        }

        if (+...",5583.0,5649.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5870,309558,ngx_http_upstream_header_variable,1,ngx_http_upstream_header_variable,"ngx_int_t ngx_http_upstream_header_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_header_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->upstream == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    return ngx_http_variable_unknown_header(v, (ngx_str_t *) data,
                                         &r->upstream->headers_in.headers.part,
                                         sizeof(""upstream_http_"") - 1);
}",5652.0,5664.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5871,309565,ngx_http_upstream_trailer_variable,1,ngx_http_upstream_trailer_variable,"ngx_int_t ngx_http_upstream_trailer_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_trailer_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->upstream == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    return ngx_http_variable_unknown_header(v, (ngx_str_t *) data,
                                        &r->upstream->headers_in.trailers.part,
                                        sizeof(""upstream_trailer_"") - 1);
}",5667.0,5679.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5872,309572,ngx_http_upstream_cookie_variable,1,ngx_http_upstream_cookie_variable,"ngx_int_t ngx_http_upstream_cookie_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_cookie_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_str_t  *name = (ngx_str_t *) data;

    ngx_str_t   cookie, s;

    if (r->upstream == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    s.len = name->len - (sizeof(""upstream_cookie_"") - 1);
    s.data = name->data + sizeof(""upstream_cookie_"") - 1;

    if (ngx_http_parse_set_cookie_lines(&r->upstream->headers_in.cookies,
                                        &s, &cookie)
        == NGX_DECLINED)
    {
        v->not_found = 1;
        return NGX_OK;
    }

    v->len = cookie.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = cookie.data;

    return NGX_OK;
}",5682.0,5713.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5873,309579,ngx_http_upstream,1,ngx_http_upstream,"char* ngx_http_upstream (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_upstream.c,"static char *
ngx_http_upstream(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy)
{
    char                          *rv;
    void                          *mconf;
    ngx_str_t                     *value;
    ngx_url_t                      u;
    ngx_uint_t                     m;
    ngx_conf_t                     pcf;
    ngx_http_module_t             *module;
    ngx_http_conf_ctx_t           *ctx, *http_ctx;
    ngx_http_upstream_srv_conf_t  *uscf;

    ngx_memzero(&u, sizeof(ngx_url_t));

    value = cf->args->elts;
    u.host = value[1];
    u.no_resolve = 1;
    u.no_port = 1;

    uscf = ngx_http_upstream_add(cf, &u, NGX_HTTP_UPSTREAM_CREATE
                                         |NGX_HTTP_UPSTREAM_WEIGHT
                                         |NGX_HTTP_UPSTREAM_MAX_CONNS
                                         |NGX_HTTP_UPSTREAM_MAX_FAILS
                                         |NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
                                         |NGX_HTTP_UPSTREAM...",5796.0,5909.0,1.0,1.0,114.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5874,309586,ngx_http_upstream_server,1,ngx_http_upstream_server,"char* ngx_http_upstream_server (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_upstream.c,"static char *
ngx_http_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_upstream_srv_conf_t  *uscf = conf;

    time_t                       fail_timeout;
    ngx_str_t                   *value, s;
    ngx_url_t                    u;
    ngx_int_t                    weight, max_conns, max_fails;
    ngx_uint_t                   i;
    ngx_http_upstream_server_t  *us;

    us = ngx_array_push(uscf->servers);
    if (us == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_memzero(us, sizeof(ngx_http_upstream_server_t));

    value = cf->args->elts;

    weight = 1;
    max_conns = 0;
    max_fails = 1;
    fail_timeout = 10;

    for (i = 2; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""weight="", 7) == 0) {

            if (!(uscf->flags & NGX_HTTP_UPSTREAM_WEIGHT)) {
                goto not_supported;
            }

            weight = ngx_atoi(&value[i].data[7], value[i].len - 7);

            if (weight == NGX_ERROR || weig...",5912.0,6066.0,1.0,1.0,155.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
5875,309593,ngx_http_upstream_set_local,1,ngx_http_upstream_set_local,"ngx_int_t ngx_http_upstream_set_local (ngx_http_request_t*,ngx_http_upstream_t*,ngx_http_upstream_local_t*)",http\ngx_http_upstream.c,"static ngx_int_t
ngx_http_upstream_set_local(ngx_http_request_t *r, ngx_http_upstream_t *u,
    ngx_http_upstream_local_t *local)
{
    ngx_int_t    rc;
    ngx_str_t    val;
    ngx_addr_t  *addr;

    if (local == NULL) {
        u->peer.local = NULL;
        return NGX_OK;
    }

#if (NGX_HAVE_TRANSPARENT_PROXY)
    u->peer.transparent = local->transparent;
#endif

    if (local->value == NULL) {
        u->peer.local = local->addr;
        return NGX_OK;
    }

    if (ngx_http_complex_value(r, local->value, &val) != NGX_OK) {
        return NGX_ERROR;
    }

    if (val.len == 0) {
        return NGX_OK;
    }

    addr = ngx_palloc(r->pool, sizeof(ngx_addr_t));
    if (addr == NULL) {
        return NGX_ERROR;
    }

    rc = ngx_parse_addr_port(r->pool, addr, val.data, val.len);
    if (rc == NGX_ERROR) {
        return NGX_ERROR;
    }

    if (rc != NGX_OK) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""invalid local address \""%V\"""", &val...",6280.0,6330.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5876,309600,ngx_http_upstream_create_main_conf,1,ngx_http_upstream_create_main_conf,void* ngx_http_upstream_create_main_conf (ngx_conf_t*),http\ngx_http_upstream.c,"static void *
ngx_http_upstream_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_upstream_main_conf_t  *umcf;

    umcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_main_conf_t));
    if (umcf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&umcf->upstreams, cf->pool, 4,
                       sizeof(ngx_http_upstream_srv_conf_t *))
        != NGX_OK)
    {
        return NULL;
    }

    return umcf;
}",6500.0,6518.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
5877,309605,ngx_http_upstream_init_main_conf,1,ngx_http_upstream_init_main_conf,"char* ngx_http_upstream_init_main_conf (ngx_conf_t*,void*)",http\ngx_http_upstream.c,"static char *
ngx_http_upstream_init_main_conf(ngx_conf_t *cf, void *conf)
{
    ngx_http_upstream_main_conf_t  *umcf = conf;

    ngx_uint_t                      i;
    ngx_array_t                     headers_in;
    ngx_hash_key_t                 *hk;
    ngx_hash_init_t                 hash;
    ngx_http_upstream_init_pt       init;
    ngx_http_upstream_header_t     *header;
    ngx_http_upstream_srv_conf_t  **uscfp;

    uscfp = umcf->upstreams.elts;

    for (i = 0; i < umcf->upstreams.nelts; i++) {

        init = uscfp[i]->peer.init_upstream ? uscfp[i]->peer.init_upstream:
                                            ngx_http_upstream_init_round_robin;

        if (init(cf, uscfp[i]) != NGX_OK) {
            return NGX_CONF_ERROR;
        }
    }


    /* upstream_headers_in_hash */

    if (ngx_array_init(&headers_in, cf->temp_pool, 32, sizeof(ngx_hash_key_t))
        != NGX_OK)
    {
        return NGX_CONF_ERROR;
    }

    for (header = ngx_http_upstream_headers_in; heade...",6521.0,6579.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
5878,310111,ngx_http_upstream_create,1,ngx_http_upstream_create,ngx_int_t ngx_http_upstream_create (ngx_http_request_t*),http\ngx_http_upstream.c,"ngx_int_t
ngx_http_upstream_create(ngx_http_request_t *r)
{
    ngx_http_upstream_t  *u;

    u = r->upstream;

    if (u && u->cleanup) {
        r->main->count++;
        ngx_http_upstream_cleanup(r);
    }

    u = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_t));
    if (u == NULL) {
        return NGX_ERROR;
    }

    r->upstream = u;

    u->peer.log = r->connection->log;
    u->peer.log_error = NGX_ERROR_ERR;

#if (NGX_HTTP_CACHE)
    r->cache = NULL;
#endif

    u->headers_in.content_length_n = -1;
    u->headers_in.last_modified_time = -1;

    return NGX_OK;
}",478.0,508.0,1.0,1.0,31.0,29,8,21,7,6,2,3,3,0,2,,0,1,2,1,1,ngx_int_t
5879,310193,ngx_http_upstream_init,1,ngx_http_upstream_init,void ngx_http_upstream_init (ngx_http_request_t*),http\ngx_http_upstream.c,"void
ngx_http_upstream_init(ngx_http_request_t *r)
{
    ngx_connection_t     *c;

    c = r->connection;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http init upstream, client timer: %d"", c->read->timer_set);

#if (NGX_HTTP_V2)
    if (r->stream) {
        ngx_http_upstream_init_request(r);
        return;
    }
#endif

    if (c->read->timer_set) {
        ngx_del_timer(c->read);
    }

    if (ngx_event_flags & NGX_USE_CLEAR_EVENT) {

        if (!c->write->active) {
            if (ngx_add_event(c->write, NGX_WRITE_EVENT, NGX_CLEAR_EVENT)
                == NGX_ERROR)
            {
                ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
                return;
            }
        }
    }

    ngx_http_upstream_init_request(r);
}",511.0,545.0,1.0,1.0,35.0,14,5,17,9,1,2,5,8,0,2,,0,0,2,1,1,void
5880,311104,ngx_http_upstream_handler,1,ngx_http_upstream_handler,void ngx_http_upstream_handler (ngx_event_t*),http\ngx_http_upstream.c,"static void
ngx_http_upstream_handler(ngx_event_t *ev)
{
    ngx_connection_t     *c;
    ngx_http_request_t   *r;
    ngx_http_upstream_t  *u;

    c = ev->data;
    r = c->data;

    u = r->upstream;
    c = r->connection;

    ngx_http_set_log_request(c->log, r);

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http upstream request: \""%V?%V\"""", &r->uri, &r->args);

    if (ev->delayed && ev->timedout) {
        ev->delayed = 0;
        ev->timedout = 0;
    }

    if (ev->write) {
        u->write_event_handler(r, u);

    } else {
        u->read_event_handler(r, u);
    }

    ngx_http_run_posted_requests(c);
}",1269.0,1300.0,1.0,1.0,32.0,23,4,23,5,0,1,3,3,0,1,,0,0,2,1,1,void
5881,316353,ngx_http_upstream_non_buffered_filter_init,1,ngx_http_upstream_non_buffered_filter_init,ngx_int_t ngx_http_upstream_non_buffered_filter_init (void*),http\ngx_http_upstream.c,"ngx_int_t
ngx_http_upstream_non_buffered_filter_init(void *data)
{
    return NGX_OK;
}",3766.0,3770.0,1.0,1.0,5.0,0,0,1,1,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5882,316360,ngx_http_upstream_non_buffered_filter,1,ngx_http_upstream_non_buffered_filter,"ngx_int_t ngx_http_upstream_non_buffered_filter (void*,ssize_t)",http\ngx_http_upstream.c,"ngx_int_t
ngx_http_upstream_non_buffered_filter(void *data, ssize_t bytes)
{
    ngx_http_request_t  *r = data;

    ngx_buf_t            *b;
    ngx_chain_t          *cl, **ll;
    ngx_http_upstream_t  *u;

    u = r->upstream;

    if (u->length == 0) {
        ngx_log_error(NGX_LOG_WARN, r->connection->log, 0,
                      ""upstream sent more data than specified in ""
                      ""\""Content-Length\"" header"");
        return NGX_OK;
    }

    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
        ll = &cl->next;
    }

    cl = ngx_chain_get_free_buf(r->pool, &u->free_bufs);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    *ll = cl;

    cl->buf->flush = 1;
    cl->buf->memory = 1;

    b = &u->buffer;

    cl->buf->pos = b->last;
    b->last += bytes;
    cl->buf->last = b->last;
    cl->buf->tag = u->output.tag;

    if (u->length == -1) {
        return NGX_OK;
    }

    if (bytes > u->length) {

        ngx_log_error(NGX_LOG_WARN, ...",3773.0,3831.0,1.0,1.0,59.0,65,12,49,11,0,3,6,6,0,3,,0,1,4,2,2,ngx_int_t
5883,321197,ngx_http_upstream_add,1,ngx_http_upstream_add,"ngx_http_upstream_srv_conf_t ngx_http_upstream_add (ngx_conf_t*,ngx_url_t*,ngx_uint_t)",http\ngx_http_upstream.c,"ngx_http_upstream_srv_conf_t *
ngx_http_upstream_add(ngx_conf_t *cf, ngx_url_t *u, ngx_uint_t flags)
{
    ngx_uint_t                      i;
    ngx_http_upstream_server_t     *us;
    ngx_http_upstream_srv_conf_t   *uscf, **uscfp;
    ngx_http_upstream_main_conf_t  *umcf;

    if (!(flags & NGX_HTTP_UPSTREAM_CREATE)) {

        if (ngx_parse_url(cf->pool, u) != NGX_OK) {
            if (u->err) {
                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                   ""%s in upstream \""%V\"""", u->err, &u->url);
            }

            return NULL;
        }
    }

    umcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_upstream_module);

    uscfp = umcf->upstreams.elts;

    for (i = 0; i < umcf->upstreams.nelts; i++) {

        if (uscfp[i]->host.len != u->host.len
            || ngx_strncasecmp(uscfp[i]->host.data, u->host.data, u->host.len)
               != 0)
        {
            continue;
        }

        if ((flags & NGX_HTTP_UPSTREAM_CREATE)
   ...",6069.0,6177.0,1.0,1.0,109.0,131,14,119,16,0,36,18,27,13,10,,0,32,6,3,3,ngx_http_upstream_srv_conf_t
5884,321593,ngx_http_upstream_bind_set_slot,1,ngx_http_upstream_bind_set_slot,"char* ngx_http_upstream_bind_set_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_upstream.c,"char *
ngx_http_upstream_bind_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    char  *p = conf;

    ngx_int_t                           rc;
    ngx_str_t                          *value;
    ngx_http_complex_value_t            cv;
    ngx_http_upstream_local_t         **plocal, *local;
    ngx_http_compile_complex_value_t    ccv;

    plocal = (ngx_http_upstream_local_t **) (p + cmd->offset);

    if (*plocal != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (cf->args->nelts == 2 && ngx_strcmp(value[1].data, ""off"") == 0) {
        *plocal = NULL;
        return NGX_CONF_OK;
    }

    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &cv;

    if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    local = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_local_t));
    if (local == NULL) {
        re...",6180.0,6277.0,1.0,1.0,98.0,54,13,47,18,0,11,9,11,3,4,,0,10,6,3,3,char*
5885,321981,ngx_http_upstream_param_set_slot,1,ngx_http_upstream_param_set_slot,"char* ngx_http_upstream_param_set_slot (ngx_conf_t*,ngx_command_t*,void*)",http\ngx_http_upstream.c,"char *
ngx_http_upstream_param_set_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    char  *p = conf;

    ngx_str_t                   *value;
    ngx_array_t                **a;
    ngx_http_upstream_param_t   *param;

    a = (ngx_array_t **) (p + cmd->offset);

    if (*a == NULL) {
        *a = ngx_array_create(cf->pool, 4, sizeof(ngx_http_upstream_param_t));
        if (*a == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    param = ngx_array_push(*a);
    if (param == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    param->key = value[1];
    param->value = value[2];
    param->skip_empty = 0;

    if (cf->args->nelts == 4) {
        if (ngx_strcmp(value[3].data, ""if_not_empty"") != 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid parameter \""%V\"""", &value[3]);
            return NGX_CONF_ERROR;
        }

        param->skip_empty = 1;
    }

    return NGX_CONF_OK;
}",6333.0,6374.0,1.0,1.0,42.0,37,11,33,12,0,7,6,8,0,3,,0,6,6,3,3,char*
5886,322104,ngx_http_upstream_hide_headers_hash,1,ngx_http_upstream_hide_headers_hash,"ngx_int_t ngx_http_upstream_hide_headers_hash (ngx_conf_t*,ngx_http_upstream_conf_t*,ngx_http_upstream_conf_t*,ngx_str_t*,ngx_hash_init_t*)",http\ngx_http_upstream.c,"ngx_int_t
ngx_http_upstream_hide_headers_hash(ngx_conf_t *cf,
    ngx_http_upstream_conf_t *conf, ngx_http_upstream_conf_t *prev,
    ngx_str_t *default_hide_headers, ngx_hash_init_t *hash)
{
    ngx_str_t       *h;
    ngx_uint_t       i, j;
    ngx_array_t      hide_headers;
    ngx_hash_key_t  *hk;

    if (conf->hide_headers == NGX_CONF_UNSET_PTR
        && conf->pass_headers == NGX_CONF_UNSET_PTR)
    {
        conf->hide_headers = prev->hide_headers;
        conf->pass_headers = prev->pass_headers;

        conf->hide_headers_hash = prev->hide_headers_hash;

        if (conf->hide_headers_hash.buckets) {
            return NGX_OK;
        }

    } else {
        if (conf->hide_headers == NGX_CONF_UNSET_PTR) {
            conf->hide_headers = prev->hide_headers;
        }

        if (conf->pass_headers == NGX_CONF_UNSET_PTR) {
            conf->pass_headers = prev->pass_headers;
        }
    }

    if (ngx_array_init(&hide_headers, cf->temp_pool, 4, sizeof(ngx_hash_key_t))
  ...",6377.0,6497.0,1.0,1.0,121.0,126,12,105,16,0,50,22,37,21,8,,0,50,10,5,5,ngx_int_t
5887,322788,ngx_http_upstream_init_pt,1,ngx_http_upstream_init_pt,"ngx_int_t ngx_http_upstream_init_pt (ngx_conf_t*,ngx_http_upstream_srv_conf_t*)",http\ngx_http_upstream.h,"typedef ngx_int_t (*ngx_http_upstream_init_pt)(ngx_conf_t *cf,
    ngx_http_upstream_srv_conf_t *us);",81.0,82.0,19.0,37.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5888,322794,ngx_http_upstream_init_peer_pt,1,ngx_http_upstream_init_peer_pt,"ngx_int_t ngx_http_upstream_init_peer_pt (ngx_http_request_t*,ngx_http_upstream_srv_conf_t*)",http\ngx_http_upstream.h,"typedef ngx_int_t (*ngx_http_upstream_init_peer_pt)(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us);",83.0,84.0,19.0,37.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5889,322953,ngx_http_upstream_handler_pt,1,ngx_http_upstream_handler_pt,"void ngx_http_upstream_handler_pt (ngx_http_request_t*,ngx_http_upstream_t*)",http\ngx_http_upstream.h,"typedef void (*ngx_http_upstream_handler_pt)(ngx_http_request_t *r,
    ngx_http_upstream_t *u);",319.0,320.0,14.0,27.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5890,322978,input_filter_init,1,ngx_http_upstream_s.input_filter_init,ngx_int_t ngx_http_upstream_s.input_filter_init (void*),http\ngx_http_upstream.h,ngx_int_t                      (*input_filter_init)(void *data);,355.0,355.0,36.0,67.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5891,322983,input_filter,1,ngx_http_upstream_s.input_filter,"ngx_int_t ngx_http_upstream_s.input_filter (void*,ssize_t)",http\ngx_http_upstream.h,"ngx_int_t                      (*input_filter)(void *data, ssize_t bytes);",356.0,356.0,36.0,77.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5892,322990,create_key,1,ngx_http_upstream_s.create_key,ngx_int_t ngx_http_upstream_s.create_key (ngx_http_request_t*),http\ngx_http_upstream.h,ngx_int_t                      (*create_key)(ngx_http_request_t *r);,360.0,360.0,36.0,71.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5893,322995,create_request,1,ngx_http_upstream_s.create_request,ngx_int_t ngx_http_upstream_s.create_request (ngx_http_request_t*),http\ngx_http_upstream.h,ngx_int_t                      (*create_request)(ngx_http_request_t *r);,362.0,362.0,36.0,75.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5894,323000,reinit_request,1,ngx_http_upstream_s.reinit_request,ngx_int_t ngx_http_upstream_s.reinit_request (ngx_http_request_t*),http\ngx_http_upstream.h,ngx_int_t                      (*reinit_request)(ngx_http_request_t *r);,363.0,363.0,36.0,75.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5895,323005,process_header,1,ngx_http_upstream_s.process_header,ngx_int_t ngx_http_upstream_s.process_header (ngx_http_request_t*),http\ngx_http_upstream.h,ngx_int_t                      (*process_header)(ngx_http_request_t *r);,364.0,364.0,36.0,75.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5896,323010,abort_request,1,ngx_http_upstream_s.abort_request,void ngx_http_upstream_s.abort_request (ngx_http_request_t*),http\ngx_http_upstream.h,void                           (*abort_request)(ngx_http_request_t *r);,365.0,365.0,36.0,74.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5897,323015,finalize_request,1,ngx_http_upstream_s.finalize_request,"void ngx_http_upstream_s.finalize_request (ngx_http_request_t*,ngx_int_t)",http\ngx_http_upstream.h,"void                           (*finalize_request)(ngx_http_request_t *r,
                                         ngx_int_t rc);",366.0,367.0,36.0,54.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
5898,323021,rewrite_redirect,1,ngx_http_upstream_s.rewrite_redirect,"ngx_int_t ngx_http_upstream_s.rewrite_redirect (ngx_http_request_t*,ngx_table_elt_t*,size_t)",http\ngx_http_upstream.h,"ngx_int_t                      (*rewrite_redirect)(ngx_http_request_t *r,
                                         ngx_table_elt_t *h, size_t prefix);",368.0,369.0,36.0,75.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5899,323028,rewrite_cookie,1,ngx_http_upstream_s.rewrite_cookie,"ngx_int_t ngx_http_upstream_s.rewrite_cookie (ngx_http_request_t*,ngx_table_elt_t*)",http\ngx_http_upstream.h,"ngx_int_t                      (*rewrite_cookie)(ngx_http_request_t *r,
                                         ngx_table_elt_t *h);",370.0,371.0,36.0,60.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
5900,323130,ngx_http_upstream_get_peer,1,ngx_http_upstream_get_peer,ngx_http_upstream_rr_peer_t* ngx_http_upstream_get_peer (ngx_http_upstream_rr_peer_data_t*),http\ngx_http_upstream_round_robin.c,"static ngx_http_upstream_rr_peer_t *
ngx_http_upstream_get_peer(ngx_http_upstream_rr_peer_data_t *rrp)
{
    time_t                        now;
    uintptr_t                     m;
    ngx_int_t                     total;
    ngx_uint_t                    i, n, p;
    ngx_http_upstream_rr_peer_t  *peer, *best;

    now = ngx_time();

    best = NULL;
    total = 0;

#if (NGX_SUPPRESS_WARN)
    p = 0;
#endif

    for (peer = rrp->peers->peer, i = 0;
         peer;
         peer = peer->next, i++)
    {
        n = i / (8 * sizeof(uintptr_t));
        m = (uintptr_t) 1 << i % (8 * sizeof(uintptr_t));

        if (rrp->tried[n] & m) {
            continue;
        }

        if (peer->down) {
            continue;
        }

        if (peer->max_fails
            && peer->fails >= peer->max_fails
            && now - peer->checked <= peer->fail_timeout)
        {
            continue;
        }

        if (peer->max_conns && peer->conns >= peer->max_conns) {
            continue;
   ...",521.0,596.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_http_upstream_rr_peer_t
5901,323135,ngx_http_upstream_init_round_robin,1,ngx_http_upstream_init_round_robin,"ngx_int_t ngx_http_upstream_init_round_robin (ngx_conf_t*,ngx_http_upstream_srv_conf_t*)",http\ngx_http_upstream_round_robin.c,"ngx_int_t
ngx_http_upstream_init_round_robin(ngx_conf_t *cf,
    ngx_http_upstream_srv_conf_t *us)
{
    ngx_url_t                      u;
    ngx_uint_t                     i, j, n, w, t;
    ngx_http_upstream_server_t    *server;
    ngx_http_upstream_rr_peer_t   *peer, **peerp;
    ngx_http_upstream_rr_peers_t  *peers, *backup;

    us->peer.init = ngx_http_upstream_init_round_robin_peer;

    if (us->servers) {
        server = us->servers->elts;

        n = 0;
        w = 0;
        t = 0;

        for (i = 0; i < us->servers->nelts; i++) {
            if (server[i].backup) {
                continue;
            }

            n += server[i].naddrs;
            w += server[i].naddrs * server[i].weight;

            if (!server[i].down) {
                t += server[i].naddrs;
            }
        }

        if (n == 0) {
            ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
                          ""no servers in upstream \""%V\"" in %s:%ui"",
                          &us->hos...",30.0,253.0,1.0,1.0,224.0,388,14,328,20,2,19,30,53,3,10,,0,16,4,2,2,ngx_int_t
5902,324157,ngx_http_upstream_init_round_robin_peer,1,ngx_http_upstream_init_round_robin_peer,"ngx_int_t ngx_http_upstream_init_round_robin_peer (ngx_http_request_t*,ngx_http_upstream_srv_conf_t*)",http\ngx_http_upstream_round_robin.c,"ngx_int_t
ngx_http_upstream_init_round_robin_peer(ngx_http_request_t *r,
    ngx_http_upstream_srv_conf_t *us)
{
    ngx_uint_t                         n;
    ngx_http_upstream_rr_peer_data_t  *rrp;

    rrp = r->upstream->peer.data;

    if (rrp == NULL) {
        rrp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_rr_peer_data_t));
        if (rrp == NULL) {
            return NGX_ERROR;
        }

        r->upstream->peer.data = rrp;
    }

    rrp->peers = us->peer.data;
    rrp->current = NULL;
    rrp->config = 0;

    n = rrp->peers->number;

    if (rrp->peers->next && rrp->peers->next->number > n) {
        n = rrp->peers->next->number;
    }

    if (n <= 8 * sizeof(uintptr_t)) {
        rrp->tried = &rrp->data;
        rrp->data = 0;

    } else {
        n = (n + (8 * sizeof(uintptr_t) - 1)) / (8 * sizeof(uintptr_t));

        rrp->tried = ngx_pcalloc(r->pool, n * sizeof(uintptr_t));
        if (rrp->tried == NULL) {
            return NGX_ERROR;
        }
    }

    r->...",256.0,308.0,1.0,30.0,53.0,66,12,37,9,0,15,5,6,2,1,,0,15,4,2,2,ngx_int_t
5903,324367,ngx_http_upstream_create_round_robin_peer,1,ngx_http_upstream_create_round_robin_peer,"ngx_int_t ngx_http_upstream_create_round_robin_peer (ngx_http_request_t*,ngx_http_upstream_resolved_t*)",http\ngx_http_upstream_round_robin.c,"ngx_int_t
ngx_http_upstream_create_round_robin_peer(ngx_http_request_t *r,
    ngx_http_upstream_resolved_t *ur)
{
    u_char                            *p;
    size_t                             len;
    socklen_t                          socklen;
    ngx_uint_t                         i, n;
    struct sockaddr                   *sockaddr;
    ngx_http_upstream_rr_peer_t       *peer, **peerp;
    ngx_http_upstream_rr_peers_t      *peers;
    ngx_http_upstream_rr_peer_data_t  *rrp;

    rrp = r->upstream->peer.data;

    if (rrp == NULL) {
        rrp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_rr_peer_data_t));
        if (rrp == NULL) {
            return NGX_ERROR;
        }

        r->upstream->peer.data = rrp;
    }

    peers = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_rr_peers_t));
    if (peers == NULL) {
        return NGX_ERROR;
    }

    peer = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_rr_peer_t)
                                * ur->naddrs);
    if (peer == ...",311.0,427.0,1.0,30.0,117.0,113,11,68,12,0,23,7,8,1,3,,0,23,4,2,2,ngx_int_t
5904,324879,ngx_http_upstream_get_round_robin_peer,1,ngx_http_upstream_get_round_robin_peer,"ngx_int_t ngx_http_upstream_get_round_robin_peer (ngx_peer_connection_t*,void*)",http\ngx_http_upstream_round_robin.c,"ngx_int_t
ngx_http_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_http_upstream_rr_peer_data_t  *rrp = data;

    ngx_int_t                      rc;
    ngx_uint_t                     i, n;
    ngx_http_upstream_rr_peer_t   *peer;
    ngx_http_upstream_rr_peers_t  *peers;

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""get rr peer, try: %ui"", pc->tries);

    pc->cached = 0;
    pc->connection = NULL;

    peers = rrp->peers;
    ngx_http_upstream_rr_peers_wlock(peers);

    if (peers->single) {
        peer = peers->peer;

        if (peer->down) {
            goto failed;
        }

        if (peer->max_conns && peer->conns >= peer->max_conns) {
            goto failed;
        }

        rrp->current = peer;

    } else {

        /* there are several peers */

        peer = ngx_http_upstream_get_peer(rrp);

        if (peer == NULL) {
            goto failed;
        }

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, pc->log, ...",430.0,518.0,1.0,1.0,89.0,57,14,55,13,0,5,9,11,0,0,,0,5,4,2,2,ngx_int_t
5905,325318,ngx_http_upstream_free_round_robin_peer,1,ngx_http_upstream_free_round_robin_peer,"void ngx_http_upstream_free_round_robin_peer (ngx_peer_connection_t*,void*,ngx_uint_t)",http\ngx_http_upstream_round_robin.c,"void
ngx_http_upstream_free_round_robin_peer(ngx_peer_connection_t *pc, void *data,
    ngx_uint_t state)
{
    ngx_http_upstream_rr_peer_data_t  *rrp = data;

    time_t                       now;
    ngx_http_upstream_rr_peer_t  *peer;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, pc->log, 0,
                   ""free rr peer %ui %ui"", pc->tries, state);

    /* TODO: NGX_PEER_KEEPALIVE */

    peer = rrp->current;

    ngx_http_upstream_rr_peers_rlock(rrp->peers);
    ngx_http_upstream_rr_peer_lock(rrp->peers, peer);

    if (rrp->peers->single) {

        peer->conns--;

        ngx_http_upstream_rr_peer_unlock(rrp->peers, peer);
        ngx_http_upstream_rr_peers_unlock(rrp->peers);

        pc->tries = 0;
        return;
    }

    if (state & NGX_PEER_FAILED) {
        now = ngx_time();

        peer->fails++;
        peer->accessed = now;
        peer->checked = now;

        if (peer->max_fails) {
            peer->effective_weight -= peer->weight / peer->max_fails;

            i...",599.0,670.0,1.0,1.0,72.0,46,9,45,9,0,9,7,11,1,1,,0,8,6,3,3,void
5906,325599,ngx_http_add_prefix_variable,1,ngx_http_add_prefix_variable,"ngx_http_variable_t* ngx_http_add_prefix_variable (ngx_conf_t*,ngx_str_t*,ngx_uint_t)",http\ngx_http_variables.c,"static ngx_http_variable_t *
ngx_http_add_prefix_variable(ngx_conf_t *cf, ngx_str_t *name, ngx_uint_t flags)
{
    ngx_uint_t                  i;
    ngx_http_variable_t        *v;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    v = cmcf->prefix_variables.elts;
    for (i = 0; i < cmcf->prefix_variables.nelts; i++) {
        if (name->len != v[i].name.len
            || ngx_strncasecmp(name->data, v[i].name.data, name->len) != 0)
        {
            continue;
        }

        v = &v[i];

        if (!(v->flags & NGX_HTTP_VAR_CHANGEABLE)) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""the duplicate \""%V\"" variable"", name);
            return NULL;
        }

        if (!(flags & NGX_HTTP_VAR_WEAK)) {
            v->flags &= ~NGX_HTTP_VAR_WEAK;
        }

        return v;
    }

    v = ngx_array_push(&cmcf->prefix_variables);
    if (v == NULL) {
        return NULL;
   ...",489.0,541.0,1.0,1.0,53.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_http_variable_t
5907,325606,ngx_http_variable_request,1,ngx_http_variable_request,"ngx_int_t ngx_http_variable_request (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_str_t  *s;

    s = (ngx_str_t *) ((char *) r + data);

    if (s->data) {
        v->len = s->len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = s->data;

    } else {
        v->not_found = 1;
    }

    return NGX_OK;
}",744.0,764.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5908,325613,ngx_http_variable_request_get_size,1,ngx_http_variable_request_get_size,"ngx_int_t ngx_http_variable_request_get_size (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_get_size(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    size_t  *sp;

    sp = (size_t *) ((char *) r + data);

    v->data = ngx_pnalloc(r->pool, NGX_SIZE_T_LEN);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(v->data, ""%uz"", *sp) - v->data;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    return NGX_OK;
}",784.0,803.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5909,325620,ngx_http_variable_header,1,ngx_http_variable_header,"ngx_int_t ngx_http_variable_header (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_header(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_table_elt_t  *h;

    h = *(ngx_table_elt_t **) ((char *) r + data);

    if (h) {
        v->len = h->value.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = h->value.data;

    } else {
        v->not_found = 1;
    }

    return NGX_OK;
}",806.0,826.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5910,325627,ngx_http_variable_cookies,1,ngx_http_variable_cookies,"ngx_int_t ngx_http_variable_cookies (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_cookies(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    return ngx_http_variable_headers_internal(r, v, data, ';');
}",829.0,834.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5911,325634,ngx_http_variable_headers,1,ngx_http_variable_headers,"ngx_int_t ngx_http_variable_headers (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_headers(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    return ngx_http_variable_headers_internal(r, v, data, ',');
}",837.0,842.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5912,325641,ngx_http_variable_headers_internal,1,ngx_http_variable_headers_internal,"ngx_int_t ngx_http_variable_headers_internal (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t,u_char)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_headers_internal(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data, u_char sep)
{
    size_t             len;
    u_char            *p, *end;
    ngx_uint_t         i, n;
    ngx_array_t       *a;
    ngx_table_elt_t  **h;

    a = (ngx_array_t *) ((char *) r + data);

    n = a->nelts;
    h = a->elts;

    len = 0;

    for (i = 0; i < n; i++) {

        if (h[i]->hash == 0) {
            continue;
        }

        len += h[i]->value.len + 2;
    }

    if (len == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    len -= 2;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (n == 1) {
        v->len = (*h)->value.len;
        v->data = (*h)->value.data;

        return NGX_OK;
    }

    p = ngx_pnalloc(r->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = len;
    v->data = p;

    end = p + len;

    for (i = 0; /* void */ ; i++) {

        if (h[i]->hash =...",845.0,915.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
5913,325649,ngx_http_variable_unknown_header_in,1,ngx_http_variable_unknown_header_in,"ngx_int_t ngx_http_variable_unknown_header_in (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_unknown_header_in(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    return ngx_http_variable_unknown_header(v, (ngx_str_t *) data,
                                            &r->headers_in.headers.part,
                                            sizeof(""http_"") - 1);
}",918.0,925.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5914,325656,ngx_http_variable_unknown_header_out,1,ngx_http_variable_unknown_header_out,"ngx_int_t ngx_http_variable_unknown_header_out (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_unknown_header_out(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    return ngx_http_variable_unknown_header(v, (ngx_str_t *) data,
                                            &r->headers_out.headers.part,
                                            sizeof(""sent_http_"") - 1);
}",928.0,935.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5915,325663,ngx_http_variable_unknown_trailer_out,1,ngx_http_variable_unknown_trailer_out,"ngx_int_t ngx_http_variable_unknown_trailer_out (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_unknown_trailer_out(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    return ngx_http_variable_unknown_header(v, (ngx_str_t *) data,
                                            &r->headers_out.trailers.part,
                                            sizeof(""sent_trailer_"") - 1);
}",938.0,945.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5916,325670,ngx_http_variable_request_line,1,ngx_http_variable_request_line,"ngx_int_t ngx_http_variable_request_line (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_line(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p, *s;

    s = r->request_line.data;

    if (s == NULL) {
        s = r->request_start;

        if (s == NULL) {
            v->not_found = 1;
            return NGX_OK;
        }

        for (p = s; p < r->header_in->last; p++) {
            if (*p == CR || *p == LF) {
                break;
            }
        }

        r->request_line.len = p - s;
        r->request_line.data = s;
    }

    v->len = r->request_line.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = s;

    return NGX_OK;
}",1006.0,1039.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5917,325677,ngx_http_variable_cookie,1,ngx_http_variable_cookie,"ngx_int_t ngx_http_variable_cookie (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_cookie(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_str_t *name = (ngx_str_t *) data;

    ngx_str_t  cookie, s;

    s.len = name->len - (sizeof(""cookie_"") - 1);
    s.data = name->data + sizeof(""cookie_"") - 1;

    if (ngx_http_parse_multi_header_lines(&r->headers_in.cookies, &s, &cookie)
        == NGX_DECLINED)
    {
        v->not_found = 1;
        return NGX_OK;
    }

    v->len = cookie.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = cookie.data;

    return NGX_OK;
}",1042.0,1067.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5918,325684,ngx_http_variable_argument,1,ngx_http_variable_argument,"ngx_int_t ngx_http_variable_argument (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_argument(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_str_t *name = (ngx_str_t *) data;

    u_char     *arg;
    size_t      len;
    ngx_str_t   value;

    len = name->len - (sizeof(""arg_"") - 1);
    arg = name->data + sizeof(""arg_"") - 1;

    if (len == 0 || ngx_http_arg(r, arg, len, &value) != NGX_OK) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->data = value.data;
    v->len = value.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    return NGX_OK;
}",1070.0,1095.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5919,325691,ngx_http_variable_content_length,1,ngx_http_variable_content_length,"ngx_int_t ngx_http_variable_content_length (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_content_length(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    if (r->headers_in.content_length) {
        v->len = r->headers_in.content_length->value.len;
        v->data = r->headers_in.content_length->value.data;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;

    } else if (r->reading_body) {
        v->not_found = 1;
        v->no_cacheable = 1;

    } else if (r->headers_in.content_length_n >= 0) {
        p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
        if (p == NULL) {
            return NGX_ERROR;
        }

        v->len = ngx_sprintf(p, ""%O"", r->headers_in.content_length_n) - p;
        v->data = p;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;

    } else {
        v->not_found = 1;
    }

    return NGX_OK;
}",1153.0,1187.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5920,325698,ngx_http_variable_host,1,ngx_http_variable_host,"ngx_int_t ngx_http_variable_host (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_host(ngx_http_request_t *r, ngx_http_variable_value_t *v,
    uintptr_t data)
{
    ngx_http_core_srv_conf_t  *cscf;

    if (r->headers_in.server.len) {
        v->len = r->headers_in.server.len;
        v->data = r->headers_in.server.data;

    } else {
        cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

        v->len = cscf->server_name.len;
        v->data = cscf->server_name.data;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    return NGX_OK;
}",1190.0,1212.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5921,325705,ngx_http_variable_binary_remote_addr,1,ngx_http_variable_binary_remote_addr,"ngx_int_t ngx_http_variable_binary_remote_addr (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_binary_remote_addr(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    switch (r->connection->sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) r->connection->sockaddr;

        v->len = sizeof(struct in6_addr);
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = sin6->sin6_addr.s6_addr;

        break;
#endif

#if (NGX_HAVE_UNIX_DOMAIN)
    case AF_UNIX:

        v->len = r->connection->addr_text.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = r->connection->addr_text.data;

        break;
#endif

    default: /* AF_INET */
        sin = (struct sockaddr_in *) r->connection->sockaddr;

        v->len = sizeof(in_addr_t);
        v->valid = 1;
        v->no_cacheable = 0;
        v->not...",1215.0,1264.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5922,325712,ngx_http_variable_remote_addr,1,ngx_http_variable_remote_addr,"ngx_int_t ngx_http_variable_remote_addr (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_remote_addr(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    v->len = r->connection->addr_text.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = r->connection->addr_text.data;

    return NGX_OK;
}",1267.0,1278.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5923,325719,ngx_http_variable_remote_port,1,ngx_http_variable_remote_port,"ngx_int_t ngx_http_variable_remote_port (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_remote_port(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t  port;

    v->len = 0;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = ngx_pnalloc(r->pool, sizeof(""65535"") - 1);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    port = ngx_inet_get_port(r->connection->sockaddr);

    if (port > 0 && port < 65536) {
        v->len = ngx_sprintf(v->data, ""%ui"", port) - v->data;
    }

    return NGX_OK;
}",1281.0,1304.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5924,325726,ngx_http_variable_proxy_protocol_addr,1,ngx_http_variable_proxy_protocol_addr,"ngx_int_t ngx_http_variable_proxy_protocol_addr (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_proxy_protocol_addr(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_str_t             *addr;
    ngx_proxy_protocol_t  *pp;

    pp = r->connection->proxy_protocol;
    if (pp == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    addr = (ngx_str_t *) ((char *) pp + data);

    v->len = addr->len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = addr->data;

    return NGX_OK;
}",1307.0,1329.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5925,325733,ngx_http_variable_proxy_protocol_port,1,ngx_http_variable_proxy_protocol_port,"ngx_int_t ngx_http_variable_proxy_protocol_port (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_proxy_protocol_port(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t             port;
    ngx_proxy_protocol_t  *pp;

    pp = r->connection->proxy_protocol;
    if (pp == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->len = 0;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = ngx_pnalloc(r->pool, sizeof(""65535"") - 1);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    port = *(in_port_t *) ((char *) pp + data);

    if (port > 0 && port < 65536) {
        v->len = ngx_sprintf(v->data, ""%ui"", port) - v->data;
    }

    return NGX_OK;
}",1332.0,1362.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5926,325740,ngx_http_variable_server_addr,1,ngx_http_variable_server_addr,"ngx_int_t ngx_http_variable_server_addr (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_server_addr(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_str_t  s;
    u_char     addr[NGX_SOCKADDR_STRLEN];

    s.len = NGX_SOCKADDR_STRLEN;
    s.data = addr;

    if (ngx_connection_local_sockaddr(r->connection, &s, 0) != NGX_OK) {
        return NGX_ERROR;
    }

    s.data = ngx_pnalloc(r->pool, s.len);
    if (s.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s.data, addr, s.len);

    v->len = s.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = s.data;

    return NGX_OK;
}",1365.0,1393.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5927,325747,ngx_http_variable_server_port,1,ngx_http_variable_server_port,"ngx_int_t ngx_http_variable_server_port (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_server_port(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t  port;

    v->len = 0;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (ngx_connection_local_sockaddr(r->connection, NULL, 0) != NGX_OK) {
        return NGX_ERROR;
    }

    v->data = ngx_pnalloc(r->pool, sizeof(""65535"") - 1);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    port = ngx_inet_get_port(r->connection->local_sockaddr);

    if (port > 0 && port < 65536) {
        v->len = ngx_sprintf(v->data, ""%ui"", port) - v->data;
    }

    return NGX_OK;
}",1396.0,1423.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5928,325754,ngx_http_variable_scheme,1,ngx_http_variable_scheme,"ngx_int_t ngx_http_variable_scheme (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_scheme(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
#if (NGX_HTTP_SSL)

    if (r->connection->ssl) {
        v->len = sizeof(""https"") - 1;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = (u_char *) ""https"";

        return NGX_OK;
    }

#endif

    v->len = sizeof(""http"") - 1;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = (u_char *) ""http"";

    return NGX_OK;
}",1426.0,1451.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5929,325761,ngx_http_variable_https,1,ngx_http_variable_https,"ngx_int_t ngx_http_variable_https (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_https(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
#if (NGX_HTTP_SSL)

    if (r->connection->ssl) {
        v->len = sizeof(""on"") - 1;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = (u_char *) ""on"";

        return NGX_OK;
    }

#endif

    *v = ngx_http_variable_null_value;

    return NGX_OK;
}",1454.0,1475.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5930,325768,ngx_http_variable_set_args,1,ngx_http_variable_set_args,"void ngx_http_variable_set_args (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static void
ngx_http_variable_set_args(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    r->args.len = v->len;
    r->args.data = v->data;
    r->valid_unparsed_uri = 0;
}",1478.0,1485.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5931,325775,ngx_http_variable_is_args,1,ngx_http_variable_is_args,"ngx_int_t ngx_http_variable_is_args (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_is_args(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->args.len == 0) {
        *v = ngx_http_variable_null_value;
        return NGX_OK;
    }

    v->len = 1;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = (u_char *) ""?"";

    return NGX_OK;
}",1488.0,1504.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5932,325782,ngx_http_variable_document_root,1,ngx_http_variable_document_root,"ngx_int_t ngx_http_variable_document_root (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_document_root(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_str_t                  path;
    ngx_http_core_loc_conf_t  *clcf;

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->root_lengths == NULL) {
        v->len = clcf->root.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = clcf->root.data;

    } else {
        if (ngx_http_script_run(r, &path, clcf->root_lengths->elts, 0,
                                clcf->root_values->elts)
            == NULL)
        {
            return NGX_ERROR;
        }

        if (ngx_get_full_name(r->pool, (ngx_str_t *) &ngx_cycle->prefix, &path)
            != NGX_OK)
        {
            return NGX_ERROR;
        }

        v->len = path.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = path.data;
    }

    return NGX_OK;
}",1507.0,1545.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5933,325789,ngx_http_variable_realpath_root,1,ngx_http_variable_realpath_root,"ngx_int_t ngx_http_variable_realpath_root (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_realpath_root(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                    *real;
    size_t                     len;
    ngx_str_t                  path;
    ngx_http_core_loc_conf_t  *clcf;
#if (NGX_HAVE_MAX_PATH)
    u_char                     buffer[NGX_MAX_PATH];
#endif

    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    if (clcf->root_lengths == NULL) {
        path = clcf->root;

    } else {
        if (ngx_http_script_run(r, &path, clcf->root_lengths->elts, 1,
                                clcf->root_values->elts)
            == NULL)
        {
            return NGX_ERROR;
        }

        path.data[path.len - 1] = '\0';

        if (ngx_get_full_name(r->pool, (ngx_str_t *) &ngx_cycle->prefix, &path)
            != NGX_OK)
        {
            return NGX_ERROR;
        }
    }

#if (NGX_HAVE_MAX_PATH)
    real = buffer;
#else
    real = NULL;
#endif

    real = ngx_realp...",1548.0,1618.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5934,325796,ngx_http_variable_request_filename,1,ngx_http_variable_request_filename,"ngx_int_t ngx_http_variable_request_filename (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_filename(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    size_t     root;
    ngx_str_t  path;

    if (ngx_http_map_uri_to_path(r, &path, &root, 0) == NULL) {
        return NGX_ERROR;
    }

    /* ngx_http_map_uri_to_path() allocates memory for terminating '\0' */

    v->len = path.len - 1;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = path.data;

    return NGX_OK;
}",1621.0,1641.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5935,325803,ngx_http_variable_server_name,1,ngx_http_variable_server_name,"ngx_int_t ngx_http_variable_server_name (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_server_name(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_http_core_srv_conf_t  *cscf;

    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

    v->len = cscf->server_name.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = cscf->server_name.data;

    return NGX_OK;
}",1644.0,1659.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5936,325810,ngx_http_variable_request_method,1,ngx_http_variable_request_method,"ngx_int_t ngx_http_variable_request_method (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_method(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->main->method_name.data) {
        v->len = r->main->method_name.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = r->main->method_name.data;

    } else {
        v->not_found = 1;
    }

    return NGX_OK;
}",1662.0,1678.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5937,325817,ngx_http_variable_remote_user,1,ngx_http_variable_remote_user,"ngx_int_t ngx_http_variable_remote_user (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_remote_user(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_int_t  rc;

    rc = ngx_http_auth_basic_user(r);

    if (rc == NGX_DECLINED) {
        v->not_found = 1;
        return NGX_OK;
    }

    if (rc == NGX_ERROR) {
        return NGX_ERROR;
    }

    v->len = r->headers_in.user.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = r->headers_in.user.data;

    return NGX_OK;
}",1681.0,1705.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5938,325824,ngx_http_variable_bytes_sent,1,ngx_http_variable_bytes_sent,"ngx_int_t ngx_http_variable_bytes_sent (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_bytes_sent(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(p, ""%O"", r->connection->sent) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",1708.0,1726.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5939,325831,ngx_http_variable_body_bytes_sent,1,ngx_http_variable_body_bytes_sent,"ngx_int_t ngx_http_variable_body_bytes_sent (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_body_bytes_sent(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    off_t    sent;
    u_char  *p;

    sent = r->connection->sent - r->header_size;

    if (sent < 0) {
        sent = 0;
    }

    p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(p, ""%O"", sent) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",1729.0,1754.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5940,325838,ngx_http_variable_pipe,1,ngx_http_variable_pipe,"ngx_int_t ngx_http_variable_pipe (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_pipe(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    v->data = (u_char *) (r->pipeline ? ""p"" : ""."");
    v->len = 1;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    return NGX_OK;
}",1757.0,1768.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5941,325845,ngx_http_variable_request_completion,1,ngx_http_variable_request_completion,"ngx_int_t ngx_http_variable_request_completion (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_completion(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->request_complete) {
        v->len = 2;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = (u_char *) ""OK"";

        return NGX_OK;
    }

    *v = ngx_http_variable_null_value;

    return NGX_OK;
}",2026.0,2043.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5942,325852,ngx_http_variable_request_body,1,ngx_http_variable_request_body,"ngx_int_t ngx_http_variable_request_body (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_body(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char       *p;
    size_t        len;
    ngx_buf_t    *buf;
    ngx_chain_t  *cl;

    if (r->request_body == NULL
        || r->request_body->bufs == NULL
        || r->request_body->temp_file)
    {
        v->not_found = 1;

        return NGX_OK;
    }

    cl = r->request_body->bufs;
    buf = cl->buf;

    if (cl->next == NULL) {
        v->len = buf->last - buf->pos;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = buf->pos;

        return NGX_OK;
    }

    len = buf->last - buf->pos;
    cl = cl->next;

    for ( /* void */ ; cl; cl = cl->next) {
        buf = cl->buf;
        len += buf->last - buf->pos;
    }

    p = ngx_pnalloc(r->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->data = p;
    cl = r->request_body->bufs;

    for ( /* void */ ; cl; cl = cl->next) {
        ...",2046.0,2104.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5943,325859,ngx_http_variable_request_body_file,1,ngx_http_variable_request_body_file,"ngx_int_t ngx_http_variable_request_body_file (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_body_file(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->request_body == NULL || r->request_body->temp_file == NULL) {
        v->not_found = 1;

        return NGX_OK;
    }

    v->len = r->request_body->temp_file->file.name.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = r->request_body->temp_file->file.name.data;

    return NGX_OK;
}",2107.0,2124.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5944,325866,ngx_http_variable_request_length,1,ngx_http_variable_request_length,"ngx_int_t ngx_http_variable_request_length (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_length(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(p, ""%O"", r->request_length) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2127.0,2145.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5945,325873,ngx_http_variable_request_time,1,ngx_http_variable_request_time,"ngx_int_t ngx_http_variable_request_time (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_time(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char          *p;
    ngx_time_t      *tp;
    ngx_msec_int_t   ms;

    p = ngx_pnalloc(r->pool, NGX_TIME_T_LEN + 4);
    if (p == NULL) {
        return NGX_ERROR;
    }

    tp = ngx_timeofday();

    ms = (ngx_msec_int_t)
             ((tp->sec - r->start_sec) * 1000 + (tp->msec - r->start_msec));
    ms = ngx_max(ms, 0);

    v->len = ngx_sprintf(p, ""%T.%03M"", (time_t) ms / 1000, ms % 1000) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2148.0,2174.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5946,325880,ngx_http_variable_request_id,1,ngx_http_variable_request_id,"ngx_int_t ngx_http_variable_request_id (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_request_id(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *id;

#if (NGX_OPENSSL)
    u_char   random_bytes[16];
#endif

    id = ngx_pnalloc(r->pool, 32);
    if (id == NULL) {
        return NGX_ERROR;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->len = 32;
    v->data = id;

#if (NGX_OPENSSL)

    if (RAND_bytes(random_bytes, 16) == 1) {
        ngx_hex_dump(id, random_bytes, 16);
        return NGX_OK;
    }

    ngx_ssl_error(NGX_LOG_ERR, r->connection->log, 0, ""RAND_bytes() failed"");

#endif

    ngx_sprintf(id, ""%08xD%08xD%08xD%08xD"",
                (uint32_t) ngx_random(), (uint32_t) ngx_random(),
                (uint32_t) ngx_random(), (uint32_t) ngx_random());

    return NGX_OK;
}",2177.0,2215.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5947,325887,ngx_http_variable_status,1,ngx_http_variable_status,"ngx_int_t ngx_http_variable_status (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_status(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t  status;

    v->data = ngx_pnalloc(r->pool, NGX_INT_T_LEN);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    if (r->err_status) {
        status = r->err_status;

    } else if (r->headers_out.status) {
        status = r->headers_out.status;

    } else if (r->http_version == NGX_HTTP_VERSION_9) {
        status = 9;

    } else {
        status = 0;
    }

    v->len = ngx_sprintf(v->data, ""%03ui"", status) - v->data;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    return NGX_OK;
}",1771.0,1801.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5948,325894,ngx_http_variable_sent_content_type,1,ngx_http_variable_sent_content_type,"ngx_int_t ngx_http_variable_sent_content_type (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_sent_content_type(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->headers_out.content_type.len) {
        v->len = r->headers_out.content_type.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = r->headers_out.content_type.data;

    } else {
        v->not_found = 1;
    }

    return NGX_OK;
}",1804.0,1820.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5949,325901,ngx_http_variable_sent_content_length,1,ngx_http_variable_sent_content_length,"ngx_int_t ngx_http_variable_sent_content_length (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_sent_content_length(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    if (r->headers_out.content_length) {
        v->len = r->headers_out.content_length->value.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = r->headers_out.content_length->value.data;

        return NGX_OK;
    }

    if (r->headers_out.content_length_n >= 0) {
        p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
        if (p == NULL) {
            return NGX_ERROR;
        }

        v->len = ngx_sprintf(p, ""%O"", r->headers_out.content_length_n) - p;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = p;

        return NGX_OK;
    }

    v->not_found = 1;

    return NGX_OK;
}",1823.0,1857.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5950,325908,ngx_http_variable_sent_location,1,ngx_http_variable_sent_location,"ngx_int_t ngx_http_variable_sent_location (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_sent_location(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ngx_str_t  name;

    if (r->headers_out.location) {
        v->len = r->headers_out.location->value.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = r->headers_out.location->value.data;

        return NGX_OK;
    }

    ngx_str_set(&name, ""sent_http_location"");

    return ngx_http_variable_unknown_header(v, &name,
                                            &r->headers_out.headers.part,
                                            sizeof(""sent_http_"") - 1);
}",1860.0,1881.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5951,325915,ngx_http_variable_sent_last_modified,1,ngx_http_variable_sent_last_modified,"ngx_int_t ngx_http_variable_sent_last_modified (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_sent_last_modified(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    if (r->headers_out.last_modified) {
        v->len = r->headers_out.last_modified->value.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = r->headers_out.last_modified->value.data;

        return NGX_OK;
    }

    if (r->headers_out.last_modified_time >= 0) {
        p = ngx_pnalloc(r->pool, sizeof(""Mon, 28 Sep 1970 06:00:00 GMT"") - 1);
        if (p == NULL) {
            return NGX_ERROR;
        }

        v->len = ngx_http_time(p, r->headers_out.last_modified_time) - p;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = p;

        return NGX_OK;
    }

    v->not_found = 1;

    return NGX_OK;
}",1884.0,1918.0,1.0,1.0,35.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5952,325922,ngx_http_variable_sent_connection,1,ngx_http_variable_sent_connection,"ngx_int_t ngx_http_variable_sent_connection (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_sent_connection(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    size_t   len;
    char    *p;

    if (r->headers_out.status == NGX_HTTP_SWITCHING_PROTOCOLS) {
        len = sizeof(""upgrade"") - 1;
        p = ""upgrade"";

    } else if (r->keepalive) {
        len = sizeof(""keep-alive"") - 1;
        p = ""keep-alive"";

    } else {
        len = sizeof(""close"") - 1;
        p = ""close"";
    }

    v->len = len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = (u_char *) p;

    return NGX_OK;
}",1921.0,1948.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5953,325929,ngx_http_variable_sent_keep_alive,1,ngx_http_variable_sent_keep_alive,"ngx_int_t ngx_http_variable_sent_keep_alive (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_sent_keep_alive(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char                    *p;
    ngx_http_core_loc_conf_t  *clcf;

    if (r->keepalive) {
        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

        if (clcf->keepalive_header) {

            p = ngx_pnalloc(r->pool, sizeof(""timeout="") - 1 + NGX_TIME_T_LEN);
            if (p == NULL) {
                return NGX_ERROR;
            }

            v->len = ngx_sprintf(p, ""timeout=%T"", clcf->keepalive_header) - p;
            v->valid = 1;
            v->no_cacheable = 0;
            v->not_found = 0;
            v->data = p;

            return NGX_OK;
        }
    }

    v->not_found = 1;

    return NGX_OK;
}",1951.0,1981.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5954,325936,ngx_http_variable_sent_transfer_encoding,1,ngx_http_variable_sent_transfer_encoding,"ngx_int_t ngx_http_variable_sent_transfer_encoding (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_sent_transfer_encoding(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    if (r->chunked) {
        v->len = sizeof(""chunked"") - 1;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = (u_char *) ""chunked"";

    } else {
        v->not_found = 1;
    }

    return NGX_OK;
}",1984.0,2000.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5955,325943,ngx_http_variable_set_limit_rate,1,ngx_http_variable_set_limit_rate,"void ngx_http_variable_set_limit_rate (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static void
ngx_http_variable_set_limit_rate(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    ssize_t    s;
    ngx_str_t  val;

    val.len = v->len;
    val.data = v->data;

    s = ngx_parse_size(&val);

    if (s == NGX_ERROR) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""invalid $limit_rate \""%V\"""", &val);
        return;
    }

    r->limit_rate = s;
    r->limit_rate_set = 1;
}",2003.0,2023.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5956,325950,ngx_http_variable_connection,1,ngx_http_variable_connection,"ngx_int_t ngx_http_variable_connection (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_connection(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(r->pool, NGX_ATOMIC_T_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(p, ""%uA"", r->connection->number) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2218.0,2236.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5957,325957,ngx_http_variable_connection_requests,1,ngx_http_variable_connection_requests,"ngx_int_t ngx_http_variable_connection_requests (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_connection_requests(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(r->pool, NGX_INT_T_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(p, ""%ui"", r->connection->requests) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2239.0,2257.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5958,325964,ngx_http_variable_connection_time,1,ngx_http_variable_connection_time,"ngx_int_t ngx_http_variable_connection_time (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_connection_time(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char          *p;
    ngx_msec_int_t   ms;

    p = ngx_pnalloc(r->pool, NGX_TIME_T_LEN + 4);
    if (p == NULL) {
        return NGX_ERROR;
    }

    ms = ngx_current_msec - r->connection->start_time;
    ms = ngx_max(ms, 0);

    v->len = ngx_sprintf(p, ""%T.%03M"", (time_t) ms / 1000, ms % 1000) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2260.0,2282.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5959,325971,ngx_http_variable_nginx_version,1,ngx_http_variable_nginx_version,"ngx_int_t ngx_http_variable_nginx_version (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_nginx_version(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    v->len = sizeof(NGINX_VERSION) - 1;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = (u_char *) NGINX_VERSION;

    return NGX_OK;
}",2285.0,2296.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5960,325978,ngx_http_variable_hostname,1,ngx_http_variable_hostname,"ngx_int_t ngx_http_variable_hostname (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_hostname(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    v->len = ngx_cycle->hostname.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = ngx_cycle->hostname.data;

    return NGX_OK;
}",2299.0,2310.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5961,325985,ngx_http_variable_pid,1,ngx_http_variable_pid,"ngx_int_t ngx_http_variable_pid (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_pid(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(r->pool, NGX_INT64_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(p, ""%P"", ngx_pid) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2313.0,2331.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5962,325992,ngx_http_variable_msec,1,ngx_http_variable_msec,"ngx_int_t ngx_http_variable_msec (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_msec(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char      *p;
    ngx_time_t  *tp;

    p = ngx_pnalloc(r->pool, NGX_TIME_T_LEN + 4);
    if (p == NULL) {
        return NGX_ERROR;
    }

    tp = ngx_timeofday();

    v->len = ngx_sprintf(p, ""%T.%03M"", tp->sec, tp->msec) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2334.0,2355.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5963,325999,ngx_http_variable_time_iso8601,1,ngx_http_variable_time_iso8601,"ngx_int_t ngx_http_variable_time_iso8601 (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_time_iso8601(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(r->pool, ngx_cached_http_log_iso8601.len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(p, ngx_cached_http_log_iso8601.data,
               ngx_cached_http_log_iso8601.len);

    v->len = ngx_cached_http_log_iso8601.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2358.0,2379.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5964,326006,ngx_http_variable_time_local,1,ngx_http_variable_time_local,"ngx_int_t ngx_http_variable_time_local (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.c,"static ngx_int_t
ngx_http_variable_time_local(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(r->pool, ngx_cached_http_log_time.len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(p, ngx_cached_http_log_time.data, ngx_cached_http_log_time.len);

    v->len = ngx_cached_http_log_time.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",2382.0,2402.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5965,326616,ngx_http_add_variable,1,ngx_http_add_variable,"ngx_http_variable_t ngx_http_add_variable (ngx_conf_t*,ngx_str_t*,ngx_uint_t)",http\ngx_http_variables.c,"ngx_http_variable_t *
ngx_http_add_variable(ngx_conf_t *cf, ngx_str_t *name, ngx_uint_t flags)
{
    ngx_int_t                   rc;
    ngx_uint_t                  i;
    ngx_hash_key_t             *key;
    ngx_http_variable_t        *v;
    ngx_http_core_main_conf_t  *cmcf;

    if (name->len == 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""$\"""");
        return NULL;
    }

    if (flags & NGX_HTTP_VAR_PREFIX) {
        return ngx_http_add_prefix_variable(cf, name, flags);
    }

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    key = cmcf->variables_keys->keys.elts;
    for (i = 0; i < cmcf->variables_keys->keys.nelts; i++) {
        if (name->len != key[i].key.len
            || ngx_strncasecmp(name->data, key[i].key.data, name->len) != 0)
        {
            continue;
        }

        v = key[i].value;

        if (!(v->flags & NGX_HTTP_VAR_CHANGEABLE)) {
            ngx_conf_log_error...",410.0,486.0,1.0,1.0,77.0,71,13,77,17,1,20,12,14,6,9,,0,15,6,3,3,ngx_http_variable_t
5966,327060,ngx_http_get_variable_index,1,ngx_http_get_variable_index,"ngx_int_t ngx_http_get_variable_index (ngx_conf_t*,ngx_str_t*)",http\ngx_http_variables.c,"ngx_int_t
ngx_http_get_variable_index(ngx_conf_t *cf, ngx_str_t *name)
{
    ngx_uint_t                  i;
    ngx_http_variable_t        *v;
    ngx_http_core_main_conf_t  *cmcf;

    if (name->len == 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""$\"""");
        return NGX_ERROR;
    }

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    v = cmcf->variables.elts;

    if (v == NULL) {
        if (ngx_array_init(&cmcf->variables, cf->pool, 4,
                           sizeof(ngx_http_variable_t))
            != NGX_OK)
        {
            return NGX_ERROR;
        }

    } else {
        for (i = 0; i < cmcf->variables.nelts; i++) {
            if (name->len != v[i].name.len
                || ngx_strncasecmp(name->data, v[i].name.data, name->len) != 0)
            {
                continue;
            }

            return i;
        }
    }

    v = ngx_array_push(&cmcf->variables);
    if (...",544.0,601.0,1.0,1.0,58.0,46,8,41,10,0,14,6,7,3,5,,0,12,4,2,2,ngx_int_t
5967,327261,ngx_http_get_indexed_variable,1,ngx_http_get_indexed_variable,"ngx_http_variable_value_t ngx_http_get_indexed_variable (ngx_http_request_t*,ngx_uint_t)",http\ngx_http_variables.c,"ngx_http_variable_value_t *
ngx_http_get_indexed_variable(ngx_http_request_t *r, ngx_uint_t index)
{
    ngx_http_variable_t        *v;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    if (cmcf->variables.nelts <= index) {
        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
                      ""unknown variable index: %ui"", index);
        return NULL;
    }

    if (r->variables[index].not_found || r->variables[index].valid) {
        return &r->variables[index];
    }

    v = cmcf->variables.elts;

    if (ngx_http_variable_depth == 0) {
        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                      ""cycle while evaluating variable \""%V\"""",
                      &v[index].name);
        return NULL;
    }

    ngx_http_variable_depth--;

    if (v[index].get_handler(r, &r->variables[index], v[index].data)
        == NGX_OK)
    {
        ngx_http_variable_depth++;

        if (v[index].flags ...",604.0,651.0,1.0,1.0,48.0,54,11,46,11,3,8,6,7,2,2,,0,6,4,2,2,ngx_http_variable_value_t
5968,327421,ngx_http_get_flushed_variable,1,ngx_http_get_flushed_variable,"ngx_http_variable_value_t ngx_http_get_flushed_variable (ngx_http_request_t*,ngx_uint_t)",http\ngx_http_variables.c,"ngx_http_variable_value_t *
ngx_http_get_flushed_variable(ngx_http_request_t *r, ngx_uint_t index)
{
    ngx_http_variable_value_t  *v;

    v = &r->variables[index];

    if (v->valid || v->not_found) {
        if (!v->no_cacheable) {
            return v;
        }

        v->valid = 0;
        v->not_found = 0;
    }

    return ngx_http_get_indexed_variable(r, index);
}",654.0,671.0,1.0,1.0,18.0,13,6,11,3,2,1,3,4,0,1,,0,0,4,2,2,ngx_http_variable_value_t
5969,327467,ngx_http_get_variable,1,ngx_http_get_variable,"ngx_http_variable_value_t ngx_http_get_variable (ngx_http_request_t*,ngx_str_t*,ngx_uint_t)",http\ngx_http_variables.c,"ngx_http_variable_value_t *
ngx_http_get_variable(ngx_http_request_t *r, ngx_str_t *name, ngx_uint_t key)
{
    size_t                      len;
    ngx_uint_t                  i, n;
    ngx_http_variable_t        *v;
    ngx_http_variable_value_t  *vv;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

    v = ngx_hash_find(&cmcf->variables_hash, key, name->data, name->len);

    if (v) {
        if (v->flags & NGX_HTTP_VAR_INDEXED) {
            return ngx_http_get_flushed_variable(r, v->index);
        }

        if (ngx_http_variable_depth == 0) {
            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
                          ""cycle while evaluating variable \""%V\"""", name);
            return NULL;
        }

        ngx_http_variable_depth--;

        vv = ngx_palloc(r->pool, sizeof(ngx_http_variable_value_t));

        if (vv && v->get_handler(r, vv, v->data) == NGX_OK) {
            ngx_http_variable_depth++;
   ...",674.0,741.0,1.0,1.0,68.0,68,16,73,16,0,19,10,15,6,5,,0,17,6,3,3,ngx_http_variable_value_t
5970,328199,ngx_http_variable_unknown_header,1,ngx_http_variable_unknown_header,"ngx_int_t ngx_http_variable_unknown_header (ngx_http_variable_value_t*,ngx_str_t*,ngx_list_part_t*,size_t)",http\ngx_http_variables.c,"ngx_int_t
ngx_http_variable_unknown_header(ngx_http_variable_value_t *v, ngx_str_t *var,
    ngx_list_part_t *part, size_t prefix)
{
    u_char            ch;
    ngx_uint_t        i, n;
    ngx_table_elt_t  *header;

    header = part->elts;

    for (i = 0; /* void */ ; i++) {

        if (i >= part->nelts) {
            if (part->next == NULL) {
                break;
            }

            part = part->next;
            header = part->elts;
            i = 0;
        }

        if (header[i].hash == 0) {
            continue;
        }

        for (n = 0; n + prefix < var->len && n < header[i].key.len; n++) {
            ch = header[i].key.data[n];

            if (ch >= 'A' && ch <= 'Z') {
                ch |= 0x20;

            } else if (ch == '-') {
                ch = '_';
            }

            if (var->data[n + prefix] != ch) {
                break;
            }
        }

        if (n + prefix == var->len && n == header[i].key.len) {
            v->len = he...",948.0,1003.0,1.0,1.0,56.0,63,12,51,10,0,3,12,19,3,0,,0,3,8,4,4,ngx_int_t
5971,332098,ngx_http_map_find,1,ngx_http_map_find,"void* ngx_http_map_find (ngx_http_request_t*,ngx_http_map_t*,ngx_str_t*)",http\ngx_http_variables.c,"void *
ngx_http_map_find(ngx_http_request_t *r, ngx_http_map_t *map, ngx_str_t *match)
{
    void        *value;
    u_char      *low;
    size_t       len;
    ngx_uint_t   key;

    len = match->len;

    if (len) {
        low = ngx_pnalloc(r->pool, len);
        if (low == NULL) {
            return NULL;
        }

    } else {
        low = NULL;
    }

    key = ngx_hash_strlow(low, match->data, len);

    value = ngx_hash_find_combined(&map->hash, key, low, len);
    if (value) {
        return value;
    }

#if (NGX_PCRE)

    if (len && map->nregex) {
        ngx_int_t              n;
        ngx_uint_t             i;
        ngx_http_map_regex_t  *reg;

        reg = map->regex;

        for (i = 0; i < map->nregex; i++) {

            n = ngx_http_regex_exec(r, reg[i].regex, match);

            if (n == NGX_OK) {
                return reg[i].value;
            }

            if (n == NGX_DECLINED) {
                continue;
            }

            /* NGX_ERROR */

...",2405.0,2462.0,1.0,1.0,58.0,10,4,21,8,1,6,4,5,0,3,,0,6,6,3,3,void*
5972,332161,ngx_http_variables_add_core_vars,1,ngx_http_variables_add_core_vars,ngx_int_t ngx_http_variables_add_core_vars (ngx_conf_t*),http\ngx_http_variables.c,"ngx_int_t
ngx_http_variables_add_core_vars(ngx_conf_t *cf)
{
    ngx_http_variable_t        *cv, *v;
    ngx_http_core_main_conf_t  *cmcf;

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    cmcf->variables_keys = ngx_pcalloc(cf->temp_pool,
                                       sizeof(ngx_hash_keys_arrays_t));
    if (cmcf->variables_keys == NULL) {
        return NGX_ERROR;
    }

    cmcf->variables_keys->pool = cf->pool;
    cmcf->variables_keys->temp_pool = cf->pool;

    if (ngx_hash_keys_array_init(cmcf->variables_keys, NGX_HASH_SMALL)
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->prefix_variables, cf->pool, 8,
                       sizeof(ngx_http_variable_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    for (cv = ngx_http_core_variables; cv->name.len; cv++) {
        v = ngx_http_add_variable(cf, &cv->name, cv->flags);
        if (v == NULL) {
            return NGX_ERROR;
        }

    ...",2621.0,2661.0,1.0,1.0,41.0,33,8,35,12,0,11,6,7,5,4,,0,11,2,1,1,ngx_int_t
5973,332277,ngx_http_variables_init_vars,1,ngx_http_variables_init_vars,ngx_int_t ngx_http_variables_init_vars (ngx_conf_t*),http\ngx_http_variables.c,"ngx_int_t
ngx_http_variables_init_vars(ngx_conf_t *cf)
{
    size_t                      len;
    ngx_uint_t                  i, n;
    ngx_hash_key_t             *key;
    ngx_hash_init_t             hash;
    ngx_http_variable_t        *v, *av, *pv;
    ngx_http_core_main_conf_t  *cmcf;

    /* set the handlers for the indexed http variables */

    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);

    v = cmcf->variables.elts;
    pv = cmcf->prefix_variables.elts;
    key = cmcf->variables_keys->keys.elts;

    for (i = 0; i < cmcf->variables.nelts; i++) {

        for (n = 0; n < cmcf->variables_keys->keys.nelts; n++) {

            av = key[n].value;

            if (v[i].name.len == key[n].key.len
                && ngx_strncmp(v[i].name.data, key[n].key.data, v[i].name.len)
                   == 0)
            {
                v[i].get_handler = av->get_handler;
                v[i].data = av->data;

                av->flags |= NGX_HTTP_VAR_INDEXED;
    ...",2664.0,2770.0,1.0,1.0,107.0,161,13,122,20,0,22,16,24,7,2,,0,21,2,1,1,ngx_int_t
5974,332729,ngx_http_set_variable_pt,1,ngx_http_set_variable_pt,"void ngx_http_set_variable_pt (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.h,"typedef void (*ngx_http_set_variable_pt) (ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data);",23.0,24.0,14.0,49.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
5975,332736,ngx_http_get_variable_pt,1,ngx_http_get_variable_pt,"ngx_int_t ngx_http_get_variable_pt (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\ngx_http_variables.h,"typedef ngx_int_t (*ngx_http_get_variable_pt) (ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data);",25.0,26.0,19.0,49.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
5976,332825,ngx_http_write_filter_init,1,ngx_http_write_filter_init,ngx_int_t ngx_http_write_filter_init (ngx_conf_t*),http\ngx_http_write_filter_module.c,"static ngx_int_t
ngx_http_write_filter_init(ngx_conf_t *cf)
{
    ngx_http_top_body_filter = ngx_http_write_filter;

    return NGX_OK;
}",361.0,367.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
5977,333926,ngx_http_v2_read_handler,1,ngx_http_v2_read_handler,void ngx_http_v2_read_handler (ngx_event_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_read_handler(ngx_event_t *rev)
{
    u_char                    *p, *end;
    size_t                     available;
    ssize_t                    n;
    ngx_connection_t          *c;
    ngx_http_v2_main_conf_t   *h2mcf;
    ngx_http_v2_connection_t  *h2c;

    c = rev->data;
    h2c = c->data;

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        ngx_http_v2_finalize_connection(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
        return;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, ""http2 read handler"");

    h2c->blocked = 1;

    if (c->close) {
        c->close = 0;

        if (c->error) {
            ngx_http_v2_finalize_connection(h2c, 0);
            return;
        }

        if (!h2c->processing && !h2c->pushing) {
            ngx_http_v2_finalize_connection(h2c, NGX_HTTP_V2_NO_ERROR);
            return;
        }

        if (!h2c->goaway) {
            h2c->goaway = 1;

            if (...",342.0,466.0,1.0,45.0,125.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
5978,333931,ngx_http_v2_write_handler,1,ngx_http_v2_write_handler,void ngx_http_v2_write_handler (ngx_event_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_write_handler(ngx_event_t *wev)
{
    ngx_int_t                  rc;
    ngx_connection_t          *c;
    ngx_http_v2_connection_t  *h2c;

    c = wev->data;
    h2c = c->data;

    if (wev->timedout) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                       ""http2 write event timed out"");
        c->error = 1;
        c->timedout = 1;
        ngx_http_v2_finalize_connection(h2c, 0);
        return;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, ""http2 write handler"");

    if (h2c->last_out == NULL && !c->buffered) {

        if (wev->timer_set) {
            ngx_del_timer(wev);
        }

        ngx_http_v2_handle_connection(h2c);
        return;
    }

    h2c->blocked = 1;

    rc = ngx_http_v2_send_output_queue(h2c);

    if (rc == NGX_ERROR) {
        ngx_http_v2_finalize_connection(h2c, 0);
        return;
    }

    h2c->blocked = 0;

    if (rc == NGX_AGAIN) {
        return;
    }

    ngx_http_v2_handle_connection(h...",469.0,516.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5979,333936,ngx_http_v2_handle_connection,1,ngx_http_v2_handle_connection,void ngx_http_v2_handle_connection (ngx_http_v2_connection_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_handle_connection(ngx_http_v2_connection_t *h2c)
{
    ngx_int_t                  rc;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;

    if (h2c->last_out || h2c->processing || h2c->pushing) {
        return;
    }

    c = h2c->connection;

    if (c->error) {
        ngx_http_close_connection(c);
        return;
    }

    if (c->buffered) {
        h2c->blocked = 1;

        rc = ngx_http_v2_send_output_queue(h2c);

        h2c->blocked = 0;

        if (rc == NGX_ERROR) {
            ngx_http_close_connection(c);
            return;
        }

        if (rc == NGX_AGAIN) {
            return;
        }

        /* rc == NGX_OK */
    }

    if (h2c->goaway) {
        ngx_http_v2_lingering_close(c);
        return;
    }

    clcf = ngx_http_get_module_loc_conf(h2c->http_connection->conf_ctx,
                                        ngx_http_core_module);

    if (!c->read->timer_set) {
        ngx_add_timer(c->read, clcf->keepaliv...",634.0,710.0,1.0,1.0,77.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5980,333941,ngx_http_v2_lingering_close,1,ngx_http_v2_lingering_close,void ngx_http_v2_lingering_close (ngx_connection_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_lingering_close(ngx_connection_t *c)
{
    ngx_event_t               *rev, *wev;
    ngx_http_v2_connection_t  *h2c;
    ngx_http_core_loc_conf_t  *clcf;

    h2c = c->data;

    clcf = ngx_http_get_module_loc_conf(h2c->http_connection->conf_ctx,
                                        ngx_http_core_module);

    if (clcf->lingering_close == NGX_HTTP_LINGERING_OFF) {
        ngx_http_close_connection(c);
        return;
    }

    if (h2c->lingering_time == 0) {
        h2c->lingering_time = ngx_time()
                              + (time_t) (clcf->lingering_time / 1000);
    }

#if (NGX_HTTP_SSL)
    if (c->ssl) {
        ngx_int_t  rc;

        rc = ngx_ssl_shutdown(c);

        if (rc == NGX_ERROR) {
            ngx_http_close_connection(c);
            return;
        }

        if (rc == NGX_AGAIN) {
            c->ssl->handler = ngx_http_v2_lingering_close;
            return;
        }
    }
#endif

    rev = c->read;
    rev->handler = ngx_http_v2_li...",713.0,786.0,1.0,1.0,74.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5981,333946,ngx_http_v2_lingering_close_handler,1,ngx_http_v2_lingering_close_handler,void ngx_http_v2_lingering_close_handler (ngx_event_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_lingering_close_handler(ngx_event_t *rev)
{
    ssize_t                    n;
    ngx_msec_t                 timer;
    ngx_connection_t          *c;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_v2_connection_t  *h2c;
    u_char                     buffer[NGX_HTTP_LINGERING_BUFFER_SIZE];

    c = rev->data;
    h2c = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
                   ""http2 lingering close handler"");

    if (rev->timedout || c->close) {
        ngx_http_close_connection(c);
        return;
    }

    timer = (ngx_msec_t) h2c->lingering_time - (ngx_msec_t) ngx_time();
    if ((ngx_msec_int_t) timer <= 0) {
        ngx_http_close_connection(c);
        return;
    }

    do {
        n = c->recv(c, buffer, NGX_HTTP_LINGERING_BUFFER_SIZE);

        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0, ""lingering read: %z"", n);

        if (n == NGX_AGAIN) {
            break;
        }

        if (n == NGX_ERROR || n == 0) {
          ...",789.0,846.0,1.0,1.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
5982,333951,ngx_http_v2_state_proxy_protocol,1,ngx_http_v2_state_proxy_protocol,"u_char* ngx_http_v2_state_proxy_protocol (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_proxy_protocol(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ngx_log_t  *log;

    log = h2c->connection->log;
    log->action = ""reading PROXY protocol"";

    pos = ngx_proxy_protocol_read(h2c->connection, pos, end);

    log->action = ""processing HTTP/2 connection"";

    if (pos == NULL) {
        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
    }

    return ngx_http_v2_state_preface(h2c, pos, end);
}",849.0,867.0,1.0,49.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5983,333958,ngx_http_v2_state_preface,1,ngx_http_v2_state_preface,"u_char* ngx_http_v2_state_preface (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_preface(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    static const u_char preface[] = ""PRI * HTTP/2.0\r\n"";

    if ((size_t) (end - pos) < sizeof(preface) - 1) {
        return ngx_http_v2_state_save(h2c, pos, end, ngx_http_v2_state_preface);
    }

    if (ngx_memcmp(pos, preface, sizeof(preface) - 1) != 0) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""invalid connection preface"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
    }

    return ngx_http_v2_state_preface_end(h2c, pos + sizeof(preface) - 1, end);
}",870.0,888.0,1.0,49.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5984,333965,ngx_http_v2_state_preface_end,1,ngx_http_v2_state_preface_end,"u_char* ngx_http_v2_state_preface_end (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_preface_end(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    static const u_char preface[] = ""\r\nSM\r\n\r\n"";

    if ((size_t) (end - pos) < sizeof(preface) - 1) {
        return ngx_http_v2_state_save(h2c, pos, end,
                                      ngx_http_v2_state_preface_end);
    }

    if (ngx_memcmp(pos, preface, sizeof(preface) - 1) != 0) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""invalid connection preface"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 preface verified"");

    return ngx_http_v2_state_head(h2c, pos + sizeof(preface) - 1, end);
}",891.0,913.0,1.0,49.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5985,333972,ngx_http_v2_state_head,1,ngx_http_v2_state_head,"u_char* ngx_http_v2_state_head (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_head(ngx_http_v2_connection_t *h2c, u_char *pos, u_char *end)
{
    uint32_t    head;
    ngx_uint_t  type;

    if (end - pos < NGX_HTTP_V2_FRAME_HEADER_SIZE) {
        return ngx_http_v2_state_save(h2c, pos, end, ngx_http_v2_state_head);
    }

    head = ngx_http_v2_parse_uint32(pos);

    h2c->state.length = ngx_http_v2_parse_length(head);
    h2c->state.flags = pos[4];

    h2c->state.sid = ngx_http_v2_parse_sid(&pos[5]);

    pos += NGX_HTTP_V2_FRAME_HEADER_SIZE;

    type = ngx_http_v2_parse_type(head);

    ngx_log_debug4(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 frame type:%ui f:%Xd l:%uz sid:%ui"",
                   type, h2c->state.flags, h2c->state.length, h2c->state.sid);

    if (type >= NGX_HTTP_V2_FRAME_STATES) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent frame with unknown type %ui"", type);
        return ngx_http_v2_state_skip(h2c, pos, end);
    }

 ...",916.0,948.0,1.0,16.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5986,333979,ngx_http_v2_state_data,1,ngx_http_v2_state_data,"u_char* ngx_http_v2_state_data (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_data(ngx_http_v2_connection_t *h2c, u_char *pos, u_char *end)
{
    size_t                 size;
    ngx_http_v2_node_t    *node;
    ngx_http_v2_stream_t  *stream;

    size = h2c->state.length;

    if (h2c->state.flags & NGX_HTTP_V2_PADDED_FLAG) {

        if (h2c->state.length == 0) {
            ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                          ""client sent padded DATA frame ""
                          ""with incorrect length: 0"");

            return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
        }

        if (end - pos == 0) {
            return ngx_http_v2_state_save(h2c, pos, end,
                                          ngx_http_v2_state_data);
        }

        h2c->state.padding = *pos++;

        if (h2c->state.padding >= size) {
            ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                          ""client sent padded DATA frame ""
                          ""with inc...",951.0,1088.0,1.0,53.0,138.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5987,333986,ngx_http_v2_state_read_data,1,ngx_http_v2_state_read_data,"u_char* ngx_http_v2_state_read_data (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_read_data(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    size_t                   size;
    ngx_buf_t               *buf;
    ngx_int_t                rc;
    ngx_connection_t        *fc;
    ngx_http_request_t      *r;
    ngx_http_v2_stream_t    *stream;
    ngx_http_v2_srv_conf_t  *h2scf;

    stream = h2c->state.stream;

    if (stream == NULL) {
        return ngx_http_v2_state_skip_padded(h2c, pos, end);
    }

    if (stream->skip_data) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                       ""skipping http2 DATA frame"");

        return ngx_http_v2_state_skip_padded(h2c, pos, end);
    }

    r = stream->request;
    fc = r->connection;

    if (r->reading_body && !r->request_body_no_buffering) {
        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                       ""skipping http2 DATA frame"");

        return ngx_http_v2_state_skip_padded(h2c, pos, end);
    }

   ...",1091.0,1190.0,1.0,52.0,100.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5988,333993,ngx_http_v2_state_headers,1,ngx_http_v2_state_headers,"u_char* ngx_http_v2_state_headers (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_headers(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    size_t                     size;
    ngx_uint_t                 padded, priority, depend, dependency, excl,
                               weight;
    ngx_uint_t                 status;
    ngx_http_v2_node_t        *node;
    ngx_http_v2_stream_t      *stream;
    ngx_http_v2_srv_conf_t    *h2scf;
    ngx_http_core_srv_conf_t  *cscf;
    ngx_http_core_loc_conf_t  *clcf;

    padded = h2c->state.flags & NGX_HTTP_V2_PADDED_FLAG;
    priority = h2c->state.flags & NGX_HTTP_V2_PRIORITY_FLAG;

    size = 0;

    if (padded) {
        size++;
    }

    if (priority) {
        size += sizeof(uint32_t) + 1;
    }

    if (h2c->state.length < size) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent HEADERS frame with incorrect length %uz"",
                      h2c->state.length);

        return ngx_http_v2_connection_error(h2c, NGX_HTT...",1193.0,1393.0,1.0,49.0,201.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5989,334000,ngx_http_v2_state_header_block,1,ngx_http_v2_state_header_block,"u_char* ngx_http_v2_state_header_block (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_header_block(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    u_char      ch;
    ngx_int_t   value;
    ngx_uint_t  indexed, size_update, prefix;

    if (end - pos < 1) {
        return ngx_http_v2_state_headers_save(h2c, pos, end,
                                              ngx_http_v2_state_header_block);
    }

    if (!(h2c->state.flags & NGX_HTTP_V2_END_HEADERS_FLAG)
        && h2c->state.length < NGX_HTTP_V2_INT_OCTETS)
    {
        return ngx_http_v2_handle_continuation(h2c, pos, end,
                                               ngx_http_v2_state_header_block);
    }

    size_update = 0;
    indexed = 0;

    ch = *pos;

    if (ch >= (1 << 7)) {
        /* indexed header field */
        indexed = 1;
        prefix = ngx_http_v2_prefix(7);

    } else if (ch >= (1 << 6)) {
        /* literal header field with incremental indexing */
        h2c->state.index = 1;
        prefix = ngx_http_v2_prefix(6);

    } else if...",1396.0,1493.0,1.0,53.0,98.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5990,334007,ngx_http_v2_state_field_len,1,ngx_http_v2_state_field_len,"u_char* ngx_http_v2_state_field_len (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_field_len(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    size_t                     alloc;
    ngx_int_t                  len;
    ngx_uint_t                 huff;
    ngx_http_core_srv_conf_t  *cscf;

    if (!(h2c->state.flags & NGX_HTTP_V2_END_HEADERS_FLAG)
        && h2c->state.length < NGX_HTTP_V2_INT_OCTETS)
    {
        return ngx_http_v2_handle_continuation(h2c, pos, end,
                                               ngx_http_v2_state_field_len);
    }

    if (h2c->state.length < 1) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent header block with incorrect length"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
    }

    if (end - pos < 1) {
        return ngx_http_v2_state_headers_save(h2c, pos, end,
                                              ngx_http_v2_state_field_len);
    }

    huff = *pos >> 7;
    len = ngx_http_v2_parse_int(h2c...",1496.0,1580.0,1.0,49.0,85.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5991,334014,ngx_http_v2_state_field_huff,1,ngx_http_v2_state_field_huff,"u_char* ngx_http_v2_state_field_huff (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_field_huff(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    size_t  size;

    size = end - pos;

    if (size > h2c->state.field_rest) {
        size = h2c->state.field_rest;
    }

    if (size > h2c->state.length) {
        size = h2c->state.length;
    }

    h2c->state.length -= size;
    h2c->state.field_rest -= size;

    if (ngx_http_v2_huff_decode(&h2c->state.field_state, pos, size,
                                &h2c->state.field_end,
                                h2c->state.field_rest == 0,
                                h2c->connection->log)
        != NGX_OK)
    {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent invalid encoded header field"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_COMP_ERROR);
    }

    pos += size;

    if (h2c->state.field_rest == 0) {
        *h2c->state.field_end = '\0';
        return ngx_http_v2_state_process_header(h2c,...",1583.0,1635.0,1.0,49.0,53.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5992,334021,ngx_http_v2_state_field_raw,1,ngx_http_v2_state_field_raw,"u_char* ngx_http_v2_state_field_raw (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_field_raw(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    size_t  size;

    size = end - pos;

    if (size > h2c->state.field_rest) {
        size = h2c->state.field_rest;
    }

    if (size > h2c->state.length) {
        size = h2c->state.length;
    }

    h2c->state.length -= size;
    h2c->state.field_rest -= size;

    h2c->state.field_end = ngx_cpymem(h2c->state.field_end, pos, size);

    pos += size;

    if (h2c->state.field_rest == 0) {
        *h2c->state.field_end = '\0';
        return ngx_http_v2_state_process_header(h2c, pos, end);
    }

    if (h2c->state.length) {
        return ngx_http_v2_state_headers_save(h2c, pos, end,
                                              ngx_http_v2_state_field_raw);
    }

    if (h2c->state.flags & NGX_HTTP_V2_END_HEADERS_FLAG) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent header field with incorrect length"");

        return...",1638.0,1680.0,1.0,49.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5993,334028,ngx_http_v2_state_field_skip,1,ngx_http_v2_state_field_skip,"u_char* ngx_http_v2_state_field_skip (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_field_skip(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    size_t  size;

    size = end - pos;

    if (size > h2c->state.field_rest) {
        size = h2c->state.field_rest;
    }

    if (size > h2c->state.length) {
        size = h2c->state.length;
    }

    h2c->state.length -= size;
    h2c->state.field_rest -= size;

    pos += size;

    if (h2c->state.field_rest == 0) {
        return ngx_http_v2_state_process_header(h2c, pos, end);
    }

    if (h2c->state.length) {
        return ngx_http_v2_state_save(h2c, pos, end,
                                      ngx_http_v2_state_field_skip);
    }

    if (h2c->state.flags & NGX_HTTP_V2_END_HEADERS_FLAG) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent header field with incorrect length"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
    }

    return ngx_http_v2_handle_continuation(h2c, pos, end,
...",1683.0,1722.0,1.0,49.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5994,334035,ngx_http_v2_state_process_header,1,ngx_http_v2_state_process_header,"u_char* ngx_http_v2_state_process_header (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_process_header(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    size_t                      len;
    ngx_int_t                   rc;
    ngx_table_elt_t            *h;
    ngx_http_header_t          *hh;
    ngx_http_request_t         *r;
    ngx_http_v2_header_t       *header;
    ngx_http_core_srv_conf_t   *cscf;
    ngx_http_core_main_conf_t  *cmcf;

    static ngx_str_t cookie = ngx_string(""cookie"");

    header = &h2c->state.header;

    if (h2c->state.parse_name) {
        h2c->state.parse_name = 0;

        header->name.len = h2c->state.field_end - h2c->state.field_start;
        header->name.data = h2c->state.field_start;

        if (header->name.len == 0) {
            ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                          ""client sent zero header name length"");

            return ngx_http_v2_connection_error(h2c,
                                                NGX_HTTP_V2_PROTOCOL_ERROR);
       ...",1725.0,1889.0,1.0,48.0,165.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5995,334042,ngx_http_v2_state_header_complete,1,ngx_http_v2_state_header_complete,"u_char* ngx_http_v2_state_header_complete (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_header_complete(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ngx_http_v2_stream_t  *stream;

    if (h2c->state.length) {
        if (end - pos > 0) {
            h2c->state.handler = ngx_http_v2_state_header_block;
            return pos;
        }

        return ngx_http_v2_state_headers_save(h2c, pos, end,
                                              ngx_http_v2_state_header_block);
    }

    if (!(h2c->state.flags & NGX_HTTP_V2_END_HEADERS_FLAG)) {
        return ngx_http_v2_handle_continuation(h2c, pos, end,
                                             ngx_http_v2_state_header_complete);
    }

    stream = h2c->state.stream;

    if (stream) {
        ngx_http_v2_run_request(stream->request);
    }

    if (!h2c->state.keep_pool) {
        ngx_destroy_pool(h2c->state.pool);
    }

    h2c->state.pool = NULL;
    h2c->state.keep_pool = 0;

    if (h2c->state.padding) {
        return ngx_http_v2_state_skip_padded(h2c, p...",1892.0,1931.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5996,334049,ngx_http_v2_handle_continuation,1,ngx_http_v2_handle_continuation,"u_char* ngx_http_v2_handle_continuation (ngx_http_v2_connection_t*,u_char*,u_char*,ngx_http_v2_handler_pt)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_handle_continuation(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end, ngx_http_v2_handler_pt handler)
{
    u_char    *p;
    size_t     len, skip;
    uint32_t   head;

    len = h2c->state.length;

    if (h2c->state.padding && (size_t) (end - pos) > len) {
        skip = ngx_min(h2c->state.padding, (end - pos) - len);

        h2c->state.padding -= skip;

        p = pos;
        pos += skip;
        ngx_memmove(pos, p, len);
    }

    if ((size_t) (end - pos) < len + NGX_HTTP_V2_FRAME_HEADER_SIZE) {
        return ngx_http_v2_state_headers_save(h2c, pos, end, handler);
    }

    p = pos + len;

    head = ngx_http_v2_parse_uint32(p);

    if (ngx_http_v2_parse_type(head) != NGX_HTTP_V2_CONTINUATION_FRAME) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
             ""client sent inappropriate frame while CONTINUATION was expected"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
    }

    h2c...",1934.0,1993.0,1.0,49.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,u_char
5997,334057,ngx_http_v2_state_priority,1,ngx_http_v2_state_priority,"u_char* ngx_http_v2_state_priority (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_priority(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ngx_uint_t           depend, dependency, excl, weight;
    ngx_http_v2_node_t  *node;

    if (h2c->state.length != NGX_HTTP_V2_PRIORITY_SIZE) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent PRIORITY frame with incorrect length %uz"",
                      h2c->state.length);

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
    }

    if (--h2c->priority_limit == 0) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent too many PRIORITY frames"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_ENHANCE_YOUR_CALM);
    }

    if (end - pos < NGX_HTTP_V2_PRIORITY_SIZE) {
        return ngx_http_v2_state_save(h2c, pos, end,
                                      ngx_http_v2_state_priority);
    }

    dependency = ngx_http_v2_parse_uint32(pos);

   ...",1996.0,2073.0,1.0,29.0,78.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5998,334064,ngx_http_v2_state_rst_stream,1,ngx_http_v2_state_rst_stream,"u_char* ngx_http_v2_state_rst_stream (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_rst_stream(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ngx_uint_t             status;
    ngx_event_t           *ev;
    ngx_connection_t      *fc;
    ngx_http_v2_node_t    *node;
    ngx_http_v2_stream_t  *stream;

    if (h2c->state.length != NGX_HTTP_V2_RST_STREAM_SIZE) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent RST_STREAM frame with incorrect length %uz"",
                      h2c->state.length);

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
    }

    if (end - pos < NGX_HTTP_V2_RST_STREAM_SIZE) {
        return ngx_http_v2_state_save(h2c, pos, end,
                                      ngx_http_v2_state_rst_stream);
    }

    status = ngx_http_v2_parse_uint32(pos);

    pos += NGX_HTTP_V2_RST_STREAM_SIZE;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 RST_STREAM frame, sid:%ui status:%ui"",
   ...",2076.0,2160.0,1.0,29.0,85.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
5999,334071,ngx_http_v2_state_settings,1,ngx_http_v2_state_settings,"u_char* ngx_http_v2_state_settings (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_settings(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 SETTINGS frame"");

    if (h2c->state.sid) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent SETTINGS frame with incorrect identifier"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
    }

    if (h2c->state.flags == NGX_HTTP_V2_ACK_FLAG) {

        if (h2c->state.length != 0) {
            ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                          ""client sent SETTINGS frame with the ACK flag ""
                          ""and nonzero length"");

            return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
        }

        h2c->settings_ack = 1;

        return ngx_http_v2_state_complete(h2c, pos, end);
    }

    if (h2c->state.length % NGX_HTTP_V2_SETTINGS_PARAM_SIZE) {
 ...",2163.0,2201.0,1.0,49.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6000,334078,ngx_http_v2_state_settings_params,1,ngx_http_v2_state_settings_params,"u_char* ngx_http_v2_state_settings_params (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_settings_params(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ssize_t                   window_delta;
    ngx_uint_t                id, value;
    ngx_http_v2_srv_conf_t   *h2scf;
    ngx_http_v2_out_frame_t  *frame;

    window_delta = 0;

    while (h2c->state.length) {
        if (end - pos < NGX_HTTP_V2_SETTINGS_PARAM_SIZE) {
            return ngx_http_v2_state_save(h2c, pos, end,
                                          ngx_http_v2_state_settings_params);
        }

        h2c->state.length -= NGX_HTTP_V2_SETTINGS_PARAM_SIZE;

        id = ngx_http_v2_parse_uint16(pos);
        value = ngx_http_v2_parse_uint32(&pos[2]);

        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                       ""http2 setting %ui:%ui"", id, value);

        switch (id) {

        case NGX_HTTP_V2_INIT_WINDOW_SIZE_SETTING:

            if (value > NGX_HTTP_V2_MAX_WINDOW) {
                ngx_log_error(NGX_LOG_INFO, h2c->co...",2204.0,2313.0,1.0,24.0,110.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6001,334085,ngx_http_v2_state_push_promise,1,ngx_http_v2_state_push_promise,"u_char* ngx_http_v2_state_push_promise (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_push_promise(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                  ""client sent PUSH_PROMISE frame"");

    return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
}",2316.0,2324.0,1.0,45.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6002,334092,ngx_http_v2_state_ping,1,ngx_http_v2_state_ping,"u_char* ngx_http_v2_state_ping (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_ping(ngx_http_v2_connection_t *h2c, u_char *pos, u_char *end)
{
    ngx_buf_t                *buf;
    ngx_http_v2_out_frame_t  *frame;

    if (h2c->state.length != NGX_HTTP_V2_PING_SIZE) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent PING frame with incorrect length %uz"",
                      h2c->state.length);

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
    }

    if (end - pos < NGX_HTTP_V2_PING_SIZE) {
        return ngx_http_v2_state_save(h2c, pos, end, ngx_http_v2_state_ping);
    }

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 PING frame"");

    if (h2c->state.sid) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent PING frame with incorrect identifier"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
    }

    if (h2c->state.flags & NGX...",2327.0,2373.0,1.0,29.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6003,334099,ngx_http_v2_state_goaway,1,ngx_http_v2_state_goaway,"u_char* ngx_http_v2_state_goaway (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_goaway(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
#if (NGX_DEBUG)
    ngx_uint_t  last_sid, error;
#endif

    if (h2c->state.length < NGX_HTTP_V2_GOAWAY_SIZE) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent GOAWAY frame ""
                      ""with incorrect length %uz"", h2c->state.length);

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
    }

    if (end - pos < NGX_HTTP_V2_GOAWAY_SIZE) {
        return ngx_http_v2_state_save(h2c, pos, end, ngx_http_v2_state_goaway);
    }

    if (h2c->state.sid) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent GOAWAY frame with incorrect identifier"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
    }

#if (NGX_DEBUG)
    h2c->state.length -= NGX_HTTP_V2_GOAWAY_SIZE;

    last_sid = ngx_http_v2_parse_sid(pos);
    error = ngx_http_v2...",2376.0,2417.0,1.0,28.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6004,334106,ngx_http_v2_state_window_update,1,ngx_http_v2_state_window_update,"u_char* ngx_http_v2_state_window_update (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_window_update(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    size_t                 window;
    ngx_event_t           *wev;
    ngx_queue_t           *q;
    ngx_http_v2_node_t    *node;
    ngx_http_v2_stream_t  *stream;

    if (h2c->state.length != NGX_HTTP_V2_WINDOW_UPDATE_SIZE) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent WINDOW_UPDATE frame ""
                      ""with incorrect length %uz"", h2c->state.length);

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_SIZE_ERROR);
    }

    if (end - pos < NGX_HTTP_V2_WINDOW_UPDATE_SIZE) {
        return ngx_http_v2_state_save(h2c, pos, end,
                                      ngx_http_v2_state_window_update);
    }

    window = ngx_http_v2_parse_window(pos);

    pos += NGX_HTTP_V2_WINDOW_UPDATE_SIZE;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 WINDOW_UPDATE frame s...",2420.0,2546.0,1.0,29.0,127.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6005,334113,ngx_http_v2_state_continuation,1,ngx_http_v2_state_continuation,"u_char* ngx_http_v2_state_continuation (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_continuation(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                  ""client sent unexpected CONTINUATION frame"");

    return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_PROTOCOL_ERROR);
}",2549.0,2557.0,1.0,45.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6006,334120,ngx_http_v2_state_complete,1,ngx_http_v2_state_complete,"u_char* ngx_http_v2_state_complete (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_complete(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 frame complete pos:%p end:%p"", pos, end);

    if (pos > end) {
        ngx_log_error(NGX_LOG_ALERT, h2c->connection->log, 0,
                      ""receive buffer overrun"");

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_INTERNAL_ERROR);
    }

    h2c->state.stream = NULL;
    h2c->state.handler = ngx_http_v2_state_head;

    return pos;
}",2560.0,2578.0,1.0,49.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6007,334127,ngx_http_v2_state_skip_padded,1,ngx_http_v2_state_skip_padded,"u_char* ngx_http_v2_state_skip_padded (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_skip_padded(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end)
{
    h2c->state.length += h2c->state.padding;
    h2c->state.padding = 0;

    return ngx_http_v2_state_skip(h2c, pos, end);
}",2581.0,2589.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6008,334134,ngx_http_v2_state_skip,1,ngx_http_v2_state_skip,"u_char* ngx_http_v2_state_skip (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_skip(ngx_http_v2_connection_t *h2c, u_char *pos, u_char *end)
{
    size_t  size;

    size = end - pos;

    if (size < h2c->state.length) {
        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                       ""http2 frame skip %uz of %uz"", size, h2c->state.length);

        h2c->state.length -= size;
        return ngx_http_v2_state_save(h2c, end, end, ngx_http_v2_state_skip);
    }

    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 frame skip %uz"", h2c->state.length);

    return ngx_http_v2_state_complete(h2c, pos + h2c->state.length, end);
}",2592.0,2611.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6009,334141,ngx_http_v2_state_save,1,ngx_http_v2_state_save,"u_char* ngx_http_v2_state_save (ngx_http_v2_connection_t*,u_char*,u_char*,ngx_http_v2_handler_pt)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_save(ngx_http_v2_connection_t *h2c, u_char *pos, u_char *end,
    ngx_http_v2_handler_pt handler)
{
    size_t  size;

    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 frame state save pos:%p end:%p handler:%p"",
                   pos, end, handler);

    size = end - pos;

    if (size > NGX_HTTP_V2_STATE_BUFFER_SIZE) {
        ngx_log_error(NGX_LOG_ALERT, h2c->connection->log, 0,
                      ""state buffer overflow: %uz bytes required"", size);

        return ngx_http_v2_connection_error(h2c, NGX_HTTP_V2_INTERNAL_ERROR);
    }

    ngx_memcpy(h2c->state.buffer, pos, NGX_HTTP_V2_STATE_BUFFER_SIZE);

    h2c->state.buffer_used = size;
    h2c->state.handler = handler;
    h2c->state.incomplete = 1;

    return end;
}",2614.0,2640.0,1.0,49.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,u_char
6010,334149,ngx_http_v2_state_headers_save,1,ngx_http_v2_state_headers_save,"u_char* ngx_http_v2_state_headers_save (ngx_http_v2_connection_t*,u_char*,u_char*,ngx_http_v2_handler_pt)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_state_headers_save(ngx_http_v2_connection_t *h2c, u_char *pos,
    u_char *end, ngx_http_v2_handler_pt handler)
{
    ngx_event_t               *rev;
    ngx_http_request_t        *r;
    ngx_http_core_srv_conf_t  *cscf;

    if (h2c->state.stream) {
        r = h2c->state.stream->request;
        rev = r->connection->read;

        if (!rev->timer_set) {
            cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
            ngx_add_timer(rev, cscf->client_header_timeout);
        }
    }

    return ngx_http_v2_state_save(h2c, pos, end, handler);
}",2643.0,2662.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,u_char
6011,334157,ngx_http_v2_connection_error,1,ngx_http_v2_connection_error,"u_char* ngx_http_v2_connection_error (ngx_http_v2_connection_t*,ngx_uint_t)",http\v2\ngx_http_v2.c,"static u_char *
ngx_http_v2_connection_error(ngx_http_v2_connection_t *h2c,
    ngx_uint_t err)
{
    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 state connection error"");

    ngx_http_v2_finalize_connection(h2c, err);

    return NULL;
}",2665.0,2675.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,u_char
6012,334163,ngx_http_v2_parse_int,1,ngx_http_v2_parse_int,"ngx_int_t ngx_http_v2_parse_int (ngx_http_v2_connection_t*,u_char**,u_char*,ngx_uint_t)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_parse_int(ngx_http_v2_connection_t *h2c, u_char **pos, u_char *end,
    ngx_uint_t prefix)
{
    u_char      *start, *p;
    ngx_uint_t   value, octet, shift;

    start = *pos;
    p = start;

    value = *p++ & prefix;

    if (value != prefix) {
        if (h2c->state.length == 0) {
            return NGX_ERROR;
        }

        h2c->state.length--;

        *pos = p;
        return value;
    }

    if (end - start > NGX_HTTP_V2_INT_OCTETS) {
        end = start + NGX_HTTP_V2_INT_OCTETS;
    }

    for (shift = 0; p != end; shift += 7) {
        octet = *p++;

        value += (octet & 0x7f) << shift;

        if (octet < 128) {
            if ((size_t) (p - start) > h2c->state.length) {
                return NGX_ERROR;
            }

            h2c->state.length -= p - start;

            *pos = p;
            return value;
        }
    }

    if ((size_t) (end - start) >= h2c->state.length) {
        return NGX_ERROR;
    }

    if (end == sta...",2678.0,2731.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
6013,334171,ngx_http_v2_create_stream,1,ngx_http_v2_create_stream,"ngx_http_v2_stream_t* ngx_http_v2_create_stream (ngx_http_v2_connection_t*,ngx_uint_t)",http\v2\ngx_http_v2.c,"static ngx_http_v2_stream_t *
ngx_http_v2_create_stream(ngx_http_v2_connection_t *h2c, ngx_uint_t push)
{
    ngx_log_t                 *log;
    ngx_event_t               *rev, *wev;
    ngx_connection_t          *fc;
    ngx_http_log_ctx_t        *ctx;
    ngx_http_request_t        *r;
    ngx_http_v2_stream_t      *stream;
    ngx_http_v2_srv_conf_t    *h2scf;
    ngx_http_core_srv_conf_t  *cscf;

    fc = h2c->free_fake_connections;

    if (fc) {
        h2c->free_fake_connections = fc->data;

        rev = fc->read;
        wev = fc->write;
        log = fc->log;
        ctx = log->data;

    } else {
        fc = ngx_palloc(h2c->pool, sizeof(ngx_connection_t));
        if (fc == NULL) {
            return NULL;
        }

        rev = ngx_palloc(h2c->pool, sizeof(ngx_event_t));
        if (rev == NULL) {
            return NULL;
        }

        wev = ngx_palloc(h2c->pool, sizeof(ngx_event_t));
        if (wev == NULL) {
            return NULL;
        }

        log = ng...",3161.0,3309.0,1.0,1.0,149.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_http_v2_stream_t
6014,334177,ngx_http_v2_get_node_by_id,1,ngx_http_v2_get_node_by_id,"ngx_http_v2_node_t* ngx_http_v2_get_node_by_id (ngx_http_v2_connection_t*,ngx_uint_t,ngx_uint_t)",http\v2\ngx_http_v2.c,"static ngx_http_v2_node_t *
ngx_http_v2_get_node_by_id(ngx_http_v2_connection_t *h2c, ngx_uint_t sid,
    ngx_uint_t alloc)
{
    ngx_uint_t               index;
    ngx_http_v2_node_t      *node;
    ngx_http_v2_srv_conf_t  *h2scf;

    h2scf = ngx_http_get_module_srv_conf(h2c->http_connection->conf_ctx,
                                         ngx_http_v2_module);

    index = ngx_http_v2_index(h2scf, sid);

    for (node = h2c->streams_index[index]; node; node = node->index) {

        if (node->id == sid) {
            return node;
        }
    }

    if (!alloc) {
        return NULL;
    }

    if (h2c->closed_nodes < 32) {
        node = ngx_pcalloc(h2c->connection->pool, sizeof(ngx_http_v2_node_t));
        if (node == NULL) {
            return NULL;
        }

    } else {
        node = ngx_http_v2_get_closed_node(h2c);
    }

    node->id = sid;

    ngx_queue_init(&node->children);

    node->index = h2c->streams_index[index];
    h2c->streams_index[index] = node;

   ...",3312.0,3354.0,1.0,12.0,43.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_http_v2_node_t
6015,334184,ngx_http_v2_get_closed_node,1,ngx_http_v2_get_closed_node,ngx_http_v2_node_t* ngx_http_v2_get_closed_node (ngx_http_v2_connection_t*),http\v2\ngx_http_v2.c,"static ngx_http_v2_node_t *
ngx_http_v2_get_closed_node(ngx_http_v2_connection_t *h2c)
{
    ngx_uint_t               weight;
    ngx_queue_t             *q, *children;
    ngx_http_v2_node_t      *node, **next, *n, *parent, *child;
    ngx_http_v2_srv_conf_t  *h2scf;

    h2scf = ngx_http_get_module_srv_conf(h2c->http_connection->conf_ctx,
                                         ngx_http_v2_module);

    h2c->closed_nodes--;

    q = ngx_queue_head(&h2c->closed);

    ngx_queue_remove(q);

    node = ngx_queue_data(q, ngx_http_v2_node_t, reuse);

    next = &h2c->streams_index[ngx_http_v2_index(h2scf, node->id)];

    for ( ;; ) {
        n = *next;

        if (n == node) {
            *next = n->index;
            break;
        }

        next = &n->index;
    }

    ngx_queue_remove(&node->queue);

    weight = 0;

    for (q = ngx_queue_head(&node->children);
         q != ngx_queue_sentinel(&node->children);
         q = ngx_queue_next(q))
    {
        child = ngx_queue_dat...",3357.0,3435.0,1.0,31.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_http_v2_node_t
6016,334189,ngx_http_v2_send_settings,1,ngx_http_v2_send_settings,ngx_int_t ngx_http_v2_send_settings (ngx_http_v2_connection_t*),http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_send_settings(ngx_http_v2_connection_t *h2c)
{
    size_t                    len;
    ngx_buf_t                *buf;
    ngx_chain_t              *cl;
    ngx_http_v2_srv_conf_t   *h2scf;
    ngx_http_v2_out_frame_t  *frame;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 send SETTINGS frame"");

    frame = ngx_palloc(h2c->pool, sizeof(ngx_http_v2_out_frame_t));
    if (frame == NULL) {
        return NGX_ERROR;
    }

    cl = ngx_alloc_chain_link(h2c->pool);
    if (cl == NULL) {
        return NGX_ERROR;
    }

    len = NGX_HTTP_V2_SETTINGS_PARAM_SIZE * 3;

    buf = ngx_create_temp_buf(h2c->pool, NGX_HTTP_V2_FRAME_HEADER_SIZE + len);
    if (buf == NULL) {
        return NGX_ERROR;
    }

    buf->last_buf = 1;

    cl->buf = buf;
    cl->next = NULL;

    frame->first = cl;
    frame->last = cl;
    frame->handler = ngx_http_v2_settings_frame_handler;
    frame->stream = NULL;
#if (NGX_DEBUG)
    frame->le...",2891.0,2961.0,1.0,10.0,71.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6017,334194,ngx_http_v2_settings_frame_handler,1,ngx_http_v2_settings_frame_handler,"ngx_int_t ngx_http_v2_settings_frame_handler (ngx_http_v2_connection_t*,ngx_http_v2_out_frame_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_settings_frame_handler(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_out_frame_t *frame)
{
    ngx_buf_t  *buf;

    buf = frame->first->buf;

    if (buf->pos != buf->last) {
        return NGX_AGAIN;
    }

    ngx_free_chain(h2c->pool, frame->first);

    return NGX_OK;
}",2964.0,2979.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6018,334200,ngx_http_v2_send_window_update,1,ngx_http_v2_send_window_update,"ngx_int_t ngx_http_v2_send_window_update (ngx_http_v2_connection_t*,ngx_uint_t,size_t)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_send_window_update(ngx_http_v2_connection_t *h2c, ngx_uint_t sid,
    size_t window)
{
    ngx_buf_t                *buf;
    ngx_http_v2_out_frame_t  *frame;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 send WINDOW_UPDATE frame sid:%ui, window:%uz"",
                   sid, window);

    frame = ngx_http_v2_get_frame(h2c, NGX_HTTP_V2_WINDOW_UPDATE_SIZE,
                                  NGX_HTTP_V2_WINDOW_UPDATE_FRAME,
                                  NGX_HTTP_V2_NO_FLAG, sid);
    if (frame == NULL) {
        return NGX_ERROR;
    }

    buf = frame->first->buf;

    buf->last = ngx_http_v2_write_uint32(buf->last, window);

    ngx_http_v2_queue_blocked_frame(h2c, frame);

    return NGX_OK;
}",2982.0,3007.0,1.0,39.0,26.0,0,0,0,0,3,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6019,334207,ngx_http_v2_send_rst_stream,1,ngx_http_v2_send_rst_stream,"ngx_int_t ngx_http_v2_send_rst_stream (ngx_http_v2_connection_t*,ngx_uint_t,ngx_uint_t)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_send_rst_stream(ngx_http_v2_connection_t *h2c, ngx_uint_t sid,
    ngx_uint_t status)
{
    ngx_buf_t                *buf;
    ngx_http_v2_out_frame_t  *frame;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 send RST_STREAM frame sid:%ui, status:%ui"",
                   sid, status);

    frame = ngx_http_v2_get_frame(h2c, NGX_HTTP_V2_RST_STREAM_SIZE,
                                  NGX_HTTP_V2_RST_STREAM_FRAME,
                                  NGX_HTTP_V2_NO_FLAG, sid);
    if (frame == NULL) {
        return NGX_ERROR;
    }

    buf = frame->first->buf;

    buf->last = ngx_http_v2_write_uint32(buf->last, status);

    ngx_http_v2_queue_blocked_frame(h2c, frame);

    return NGX_OK;
}",3010.0,3035.0,1.0,39.0,26.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6020,334214,ngx_http_v2_send_goaway,1,ngx_http_v2_send_goaway,"ngx_int_t ngx_http_v2_send_goaway (ngx_http_v2_connection_t*,ngx_uint_t)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_send_goaway(ngx_http_v2_connection_t *h2c, ngx_uint_t status)
{
    ngx_buf_t                *buf;
    ngx_http_v2_out_frame_t  *frame;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 send GOAWAY frame: last sid %ui, error %ui"",
                   h2c->last_sid, status);

    frame = ngx_http_v2_get_frame(h2c, NGX_HTTP_V2_GOAWAY_SIZE,
                                  NGX_HTTP_V2_GOAWAY_FRAME,
                                  NGX_HTTP_V2_NO_FLAG, 0);
    if (frame == NULL) {
        return NGX_ERROR;
    }

    buf = frame->first->buf;

    buf->last = ngx_http_v2_write_sid(buf->last, h2c->last_sid);
    buf->last = ngx_http_v2_write_uint32(buf->last, status);

    ngx_http_v2_queue_blocked_frame(h2c, frame);

    return NGX_OK;
}",3038.0,3063.0,1.0,39.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6021,334220,ngx_http_v2_get_frame,1,ngx_http_v2_get_frame,"ngx_http_v2_out_frame_t* ngx_http_v2_get_frame (ngx_http_v2_connection_t*,size_t,ngx_uint_t,u_char,ngx_uint_t)",http\v2\ngx_http_v2.c,"static ngx_http_v2_out_frame_t *
ngx_http_v2_get_frame(ngx_http_v2_connection_t *h2c, size_t length,
    ngx_uint_t type, u_char flags, ngx_uint_t sid)
{
    ngx_buf_t                *buf;
    ngx_pool_t               *pool;
    ngx_http_v2_out_frame_t  *frame;

    frame = h2c->free_frames;

    if (frame) {
        h2c->free_frames = frame->next;

        buf = frame->first->buf;
        buf->pos = buf->start;

        frame->blocked = 0;

    } else if (h2c->frames < 10000) {
        pool = h2c->pool ? h2c->pool : h2c->connection->pool;

        frame = ngx_pcalloc(pool, sizeof(ngx_http_v2_out_frame_t));
        if (frame == NULL) {
            return NULL;
        }

        frame->first = ngx_alloc_chain_link(pool);
        if (frame->first == NULL) {
            return NULL;
        }

        buf = ngx_create_temp_buf(pool, NGX_HTTP_V2_FRAME_BUFFER_SIZE);
        if (buf == NULL) {
            return NULL;
        }

        buf->last_buf = 1;

        frame->first->buf = buf...",3066.0,3137.0,1.0,40.0,72.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ngx_http_v2_out_frame_t
6022,334229,ngx_http_v2_frame_handler,1,ngx_http_v2_frame_handler,"ngx_int_t ngx_http_v2_frame_handler (ngx_http_v2_connection_t*,ngx_http_v2_out_frame_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_frame_handler(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_out_frame_t *frame)
{
    ngx_buf_t  *buf;

    buf = frame->first->buf;

    if (buf->pos != buf->last) {
        return NGX_AGAIN;
    }

    frame->next = h2c->free_frames;
    h2c->free_frames = frame;

    h2c->total_bytes += NGX_HTTP_V2_FRAME_HEADER_SIZE + frame->length;

    return NGX_OK;
}",3140.0,3158.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6023,334235,ngx_http_v2_validate_header,1,ngx_http_v2_validate_header,"ngx_int_t ngx_http_v2_validate_header (ngx_http_request_t*,ngx_http_v2_header_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_validate_header(ngx_http_request_t *r, ngx_http_v2_header_t *header)
{
    u_char                     ch;
    ngx_uint_t                 i;
    ngx_http_core_srv_conf_t  *cscf;

    r->invalid_header = 0;

    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);

    for (i = (header->name.data[0] == ':'); i != header->name.len; i++) {
        ch = header->name.data[i];

        if ((ch >= 'a' && ch <= 'z')
            || (ch == '-')
            || (ch >= '0' && ch <= '9')
            || (ch == '_' && cscf->underscores_in_headers))
        {
            continue;
        }

        if (ch <= 0x20 || ch == 0x7f || ch == ':'
            || (ch >= 'A' && ch <= 'Z'))
        {
            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          ""client sent invalid header name: \""%V\"""",
                          &header->name);

            return NGX_ERROR;
        }

        r->invalid_header = 1;
    }

    for (i = 0; i != he...",3438.0,3487.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6024,334241,ngx_http_v2_pseudo_header,1,ngx_http_v2_pseudo_header,"ngx_int_t ngx_http_v2_pseudo_header (ngx_http_request_t*,ngx_http_v2_header_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_pseudo_header(ngx_http_request_t *r, ngx_http_v2_header_t *header)
{
    header->name.len--;
    header->name.data++;

    switch (header->name.len) {
    case 4:
        if (ngx_memcmp(header->name.data, ""path"", sizeof(""path"") - 1)
            == 0)
        {
            return ngx_http_v2_parse_path(r, &header->value);
        }

        break;

    case 6:
        if (ngx_memcmp(header->name.data, ""method"", sizeof(""method"") - 1)
            == 0)
        {
            return ngx_http_v2_parse_method(r, &header->value);
        }

        if (ngx_memcmp(header->name.data, ""scheme"", sizeof(""scheme"") - 1)
            == 0)
        {
            return ngx_http_v2_parse_scheme(r, &header->value);
        }

        break;

    case 9:
        if (ngx_memcmp(header->name.data, ""authority"", sizeof(""authority"") - 1)
            == 0)
        {
            return ngx_http_v2_parse_authority(r, &header->value);
        }

        break;
    }

    ngx_log_erro...",3490.0,3536.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6025,334247,ngx_http_v2_parse_path,1,ngx_http_v2_parse_path,"ngx_int_t ngx_http_v2_parse_path (ngx_http_request_t*,ngx_str_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_parse_path(ngx_http_request_t *r, ngx_str_t *value)
{
    if (r->unparsed_uri.len) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent duplicate :path header"");

        return NGX_DECLINED;
    }

    if (value->len == 0) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent empty :path header"");

        return NGX_DECLINED;
    }

    r->uri_start = value->data;
    r->uri_end = value->data + value->len;

    if (ngx_http_parse_uri(r) != NGX_OK) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent invalid :path header: \""%V\"""", value);

        return NGX_DECLINED;
    }

    if (ngx_http_process_request_uri(r) != NGX_OK) {
        /*
         * request has been finalized already
         * in ngx_http_process_request_uri()
         */
        return NGX_ABORT;
    }

    return NGX_OK;
}",3539.0,3575.0,1.0,1.0,37.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6026,334253,ngx_http_v2_parse_method,1,ngx_http_v2_parse_method,"ngx_int_t ngx_http_v2_parse_method (ngx_http_request_t*,ngx_str_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_parse_method(ngx_http_request_t *r, ngx_str_t *value)
{
    size_t         k, len;
    ngx_uint_t     n;
    const u_char  *p, *m;

    /*
     * This array takes less than 256 sequential bytes,
     * and if typical CPU cache line size is 64 bytes,
     * it is prefetched for 4 load operations.
     */
    static const struct {
        u_char            len;
        const u_char      method[11];
        uint32_t          value;
    } tests[] = {
        { 3, ""GET"",       NGX_HTTP_GET },
        { 4, ""POST"",      NGX_HTTP_POST },
        { 4, ""HEAD"",      NGX_HTTP_HEAD },
        { 7, ""OPTIONS"",   NGX_HTTP_OPTIONS },
        { 8, ""PROPFIND"",  NGX_HTTP_PROPFIND },
        { 3, ""PUT"",       NGX_HTTP_PUT },
        { 5, ""MKCOL"",     NGX_HTTP_MKCOL },
        { 6, ""DELETE"",    NGX_HTTP_DELETE },
        { 4, ""COPY"",      NGX_HTTP_COPY },
        { 4, ""MOVE"",      NGX_HTTP_MOVE },
        { 9, ""PROPPATCH"", NGX_HTTP_PROPPATCH },
        { 4, ""LOCK"",      NGX_H...",3578.0,3671.0,1.0,1.0,94.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6027,334259,ngx_http_v2_parse_scheme,1,ngx_http_v2_parse_scheme,"ngx_int_t ngx_http_v2_parse_scheme (ngx_http_request_t*,ngx_str_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_parse_scheme(ngx_http_request_t *r, ngx_str_t *value)
{
    u_char      c, ch;
    ngx_uint_t  i;

    if (r->schema.len) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent duplicate :scheme header"");

        return NGX_DECLINED;
    }

    if (value->len == 0) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent empty :scheme header"");

        return NGX_DECLINED;
    }

    for (i = 0; i < value->len; i++) {
        ch = value->data[i];

        c = (u_char) (ch | 0x20);
        if (c >= 'a' && c <= 'z') {
            continue;
        }

        if (((ch >= '0' && ch <= '9') || ch == '+' || ch == '-' || ch == '.')
            && i > 0)
        {
            continue;
        }

        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client sent invalid :scheme header: \""%V\"""", value);

        return NGX_DECLINED;
    }

    r->schema = ...",3674.0,3717.0,1.0,1.0,44.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6028,334265,ngx_http_v2_parse_authority,1,ngx_http_v2_parse_authority,"ngx_int_t ngx_http_v2_parse_authority (ngx_http_request_t*,ngx_str_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_parse_authority(ngx_http_request_t *r, ngx_str_t *value)
{
    return ngx_http_v2_parse_header(r, &ngx_http_v2_parse_headers[0], value);
}",3720.0,3724.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6029,334271,ngx_http_v2_parse_header,1,ngx_http_v2_parse_header,"ngx_int_t ngx_http_v2_parse_header (ngx_http_request_t*,ngx_http_v2_parse_header_t*,ngx_str_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_parse_header(ngx_http_request_t *r,
    ngx_http_v2_parse_header_t *header, ngx_str_t *value)
{
    ngx_table_elt_t            *h;
    ngx_http_core_main_conf_t  *cmcf;

    h = ngx_list_push(&r->headers_in.headers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    h->key.len = header->name.len;
    h->key.data = header->name.data;
    h->lowcase_key = header->name.data;

    if (header->hh == NULL) {
        header->hash = ngx_hash_key(header->name.data, header->name.len);

        cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);

        header->hh = ngx_hash_find(&cmcf->headers_in_hash, header->hash,
                                   h->lowcase_key, h->key.len);
        if (header->hh == NULL) {
            return NGX_ERROR;
        }
    }

    h->hash = header->hash;

    h->value.len = value->len;
    h->value.data = value->data;

    if (header->hh->handler(r, h, header->hh->offset) != NGX_OK) {
        /* header handler ha...",3727.0,3766.0,1.0,1.0,40.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6030,334278,ngx_http_v2_construct_request_line,1,ngx_http_v2_construct_request_line,ngx_int_t ngx_http_v2_construct_request_line (ngx_http_request_t*),http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_construct_request_line(ngx_http_request_t *r)
{
    u_char  *p;

    static const u_char ending[] = "" HTTP/2.0"";

    if (r->method_name.len == 0
        || r->schema.len == 0
        || r->unparsed_uri.len == 0)
    {
        if (r->method_name.len == 0) {
            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          ""client sent no :method header"");

        } else if (r->schema.len == 0) {
            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          ""client sent no :scheme header"");

        } else {
            ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                          ""client sent no :path header"");
        }

        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        return NGX_ERROR;
    }

    r->request_line.len = r->method_name.len + 1
                          + r->unparsed_uri.len
                          + sizeof(ending) - 1;

    p = ngx_pnalloc(r->pool, r->r...",3769.0,3821.0,1.0,1.0,53.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6031,334283,ngx_http_v2_cookie,1,ngx_http_v2_cookie,"ngx_int_t ngx_http_v2_cookie (ngx_http_request_t*,ngx_http_v2_header_t*)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_cookie(ngx_http_request_t *r, ngx_http_v2_header_t *header)
{
    ngx_str_t    *val;
    ngx_array_t  *cookies;

    cookies = r->stream->cookies;

    if (cookies == NULL) {
        cookies = ngx_array_create(r->pool, 2, sizeof(ngx_str_t));
        if (cookies == NULL) {
            return NGX_ERROR;
        }

        r->stream->cookies = cookies;
    }

    val = ngx_array_push(cookies);
    if (val == NULL) {
        return NGX_ERROR;
    }

    val->len = header->value.len;
    val->data = header->value.data;

    return NGX_OK;
}",3824.0,3850.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6032,334289,ngx_http_v2_construct_cookie_header,1,ngx_http_v2_construct_cookie_header,ngx_int_t ngx_http_v2_construct_cookie_header (ngx_http_request_t*),http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_construct_cookie_header(ngx_http_request_t *r)
{
    u_char                     *buf, *p, *end;
    size_t                      len;
    ngx_str_t                  *vals;
    ngx_uint_t                  i;
    ngx_array_t                *cookies;
    ngx_table_elt_t            *h;
    ngx_http_header_t          *hh;
    ngx_http_core_main_conf_t  *cmcf;

    static ngx_str_t cookie = ngx_string(""cookie"");

    cookies = r->stream->cookies;

    if (cookies == NULL) {
        return NGX_OK;
    }

    vals = cookies->elts;

    i = 0;
    len = 0;

    do {
        len += vals[i].len + 2;
    } while (++i != cookies->nelts);

    len -= 2;

    buf = ngx_pnalloc(r->pool, len + 1);
    if (buf == NULL) {
        ngx_http_v2_close_stream(r->stream, NGX_HTTP_INTERNAL_SERVER_ERROR);
        return NGX_ERROR;
    }

    p = buf;
    end = buf + len;

    for (i = 0; /* void */ ; i++) {

        p = ngx_cpymem(p, vals[i].data, vals[i].len);

        if (p == en...",3853.0,3941.0,1.0,1.0,89.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6033,334294,ngx_http_v2_run_request,1,ngx_http_v2_run_request,void ngx_http_v2_run_request (ngx_http_request_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_run_request(ngx_http_request_t *r)
{
    ngx_connection_t          *fc;
    ngx_http_v2_connection_t  *h2c;

    fc = r->connection;

    if (ngx_http_v2_construct_request_line(r) != NGX_OK) {
        goto failed;
    }

    if (ngx_http_v2_construct_cookie_header(r) != NGX_OK) {
        goto failed;
    }

    r->http_state = NGX_HTTP_PROCESS_REQUEST_STATE;

    if (ngx_http_process_request_header(r) != NGX_OK) {
        goto failed;
    }

    if (r->headers_in.content_length_n > 0 && r->stream->in_closed) {
        ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                      ""client prematurely closed stream"");

        r->stream->skip_data = 1;

        ngx_http_finalize_request(r, NGX_HTTP_BAD_REQUEST);
        goto failed;
    }

    if (r->headers_in.content_length_n == -1 && !r->stream->in_closed) {
        r->headers_in.chunked = 1;
    }

    h2c = r->stream->connection;

    h2c->payload_bytes += r->request_length;

    ngx_http_process...",3944.0,3989.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6034,334299,ngx_http_v2_run_request_handler,1,ngx_http_v2_run_request_handler,void ngx_http_v2_run_request_handler (ngx_event_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_run_request_handler(ngx_event_t *ev)
{
    ngx_connection_t    *fc;
    ngx_http_request_t  *r;

    fc = ev->data;
    r = fc->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, fc->log, 0,
                   ""http2 run request handler"");

    ngx_http_v2_run_request(r);
}",3992.0,4005.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6035,334304,ngx_http_v2_process_request_body,1,ngx_http_v2_process_request_body,"ngx_int_t ngx_http_v2_process_request_body (ngx_http_request_t*,u_char*,size_t,ngx_uint_t)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_process_request_body(ngx_http_request_t *r, u_char *pos,
    size_t size, ngx_uint_t last)
{
    ngx_buf_t                 *buf;
    ngx_int_t                  rc;
    ngx_connection_t          *fc;
    ngx_http_request_body_t   *rb;
    ngx_http_core_loc_conf_t  *clcf;

    fc = r->connection;
    rb = r->request_body;
    buf = rb->buf;

    if (size) {
        if (buf->sync) {
            buf->pos = buf->start = pos;
            buf->last = buf->end = pos + size;

            r->request_body_in_file_only = 1;

        } else {
            if (size > (size_t) (buf->end - buf->last)) {
                ngx_log_error(NGX_LOG_INFO, fc->log, 0,
                              ""client intended to send body data ""
                              ""larger than declared"");

                return NGX_HTTP_BAD_REQUEST;
            }

            buf->last = ngx_cpymem(buf->last, pos, size);
        }
    }

    if (last) {
        rb->rest = 0;

        if (fc->read-...",4143.0,4227.0,1.0,1.0,85.0,0,0,0,0,3,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
6036,334312,ngx_http_v2_filter_request_body,1,ngx_http_v2_filter_request_body,ngx_int_t ngx_http_v2_filter_request_body (ngx_http_request_t*),http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_filter_request_body(ngx_http_request_t *r)
{
    ngx_buf_t                 *b, *buf;
    ngx_int_t                  rc;
    ngx_chain_t               *cl;
    ngx_http_request_body_t   *rb;
    ngx_http_core_loc_conf_t  *clcf;

    rb = r->request_body;
    buf = rb->buf;

    if (buf->pos == buf->last && rb->rest) {
        cl = NULL;
        goto update;
    }

    cl = ngx_chain_get_free_buf(r->pool, &rb->free);
    if (cl == NULL) {
        return NGX_HTTP_INTERNAL_SERVER_ERROR;
    }

    b = cl->buf;

    ngx_memzero(b, sizeof(ngx_buf_t));

    if (buf->pos != buf->last) {
        r->request_length += buf->last - buf->pos;
        rb->received += buf->last - buf->pos;

        if (r->headers_in.content_length_n != -1) {
            if (rb->received > r->headers_in.content_length_n) {
                ngx_log_error(NGX_LOG_INFO, r->connection->log, 0,
                              ""client intended to send body data ""
                              ""la...",4230.0,4318.0,1.0,1.0,89.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6037,334317,ngx_http_v2_read_client_request_body_handler,1,ngx_http_v2_read_client_request_body_handler,void ngx_http_v2_read_client_request_body_handler (ngx_http_request_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_read_client_request_body_handler(ngx_http_request_t *r)
{
    ngx_connection_t  *fc;

    fc = r->connection;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, fc->log, 0,
                   ""http2 read client request body handler"");

    if (fc->read->timedout) {
        ngx_log_error(NGX_LOG_INFO, fc->log, NGX_ETIMEDOUT, ""client timed out"");

        fc->timedout = 1;
        r->stream->skip_data = 1;

        ngx_http_finalize_request(r, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    if (fc->error) {
        ngx_log_error(NGX_LOG_INFO, fc->log, 0,
                      ""client prematurely closed stream"");

        r->stream->skip_data = 1;

        ngx_http_finalize_request(r, NGX_HTTP_CLIENT_CLOSED_REQUEST);
        return;
    }
}",4321.0,4350.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6038,334322,ngx_http_v2_terminate_stream,1,ngx_http_v2_terminate_stream,"ngx_int_t ngx_http_v2_terminate_stream (ngx_http_v2_connection_t*,ngx_http_v2_stream_t*,ngx_uint_t)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_terminate_stream(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_stream_t *stream, ngx_uint_t status)
{
    ngx_event_t       *rev;
    ngx_connection_t  *fc;

    if (stream->rst_sent) {
        return NGX_OK;
    }

    if (ngx_http_v2_send_rst_stream(h2c, stream->node->id, status)
        == NGX_ERROR)
    {
        return NGX_ERROR;
    }

    stream->rst_sent = 1;
    stream->skip_data = 1;

    fc = stream->request->connection;
    fc->error = 1;

    rev = fc->read;
    rev->handler(rev);

    return NGX_OK;
}",4445.0,4472.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6039,334329,ngx_http_v2_close_stream_handler,1,ngx_http_v2_close_stream_handler,void ngx_http_v2_close_stream_handler (ngx_event_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_close_stream_handler(ngx_event_t *ev)
{
    ngx_connection_t    *fc;
    ngx_http_request_t  *r;

    fc = ev->data;
    r = fc->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, fc->log, 0,
                   ""http2 close stream handler"");

    if (ev->timedout) {
        ngx_log_error(NGX_LOG_INFO, fc->log, NGX_ETIMEDOUT, ""client timed out"");

        fc->timedout = 1;

        ngx_http_v2_close_stream(r->stream, NGX_HTTP_REQUEST_TIME_OUT);
        return;
    }

    ngx_http_v2_close_stream(r->stream, 0);
}",4595.0,4617.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6040,334334,ngx_http_v2_retry_close_stream_handler,1,ngx_http_v2_retry_close_stream_handler,void ngx_http_v2_retry_close_stream_handler (ngx_event_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_retry_close_stream_handler(ngx_event_t *ev)
{
    ngx_connection_t    *fc;
    ngx_http_request_t  *r;

    fc = ev->data;
    r = fc->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, fc->log, 0,
                   ""http2 retry close stream handler"");

    ngx_http_v2_close_stream(r->stream, 0);
}",4620.0,4633.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6041,334339,ngx_http_v2_handle_connection_handler,1,ngx_http_v2_handle_connection_handler,void ngx_http_v2_handle_connection_handler (ngx_event_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_handle_connection_handler(ngx_event_t *rev)
{
    ngx_connection_t          *c;
    ngx_http_v2_connection_t  *h2c;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, rev->log, 0,
                   ""http2 handle connection handler"");

    c = rev->data;
    h2c = c->data;

    if (c->error) {
        ngx_http_v2_finalize_connection(h2c, 0);
        return;
    }

    rev->handler = ngx_http_v2_read_handler;

    if (rev->ready) {
        ngx_http_v2_read_handler(rev);
        return;
    }

    if (h2c->last_out && ngx_http_v2_send_output_queue(h2c) == NGX_ERROR) {
        ngx_http_v2_finalize_connection(h2c, 0);
        return;
    }

    ngx_http_v2_handle_connection(c->data);
}",4636.0,4666.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6042,334344,ngx_http_v2_idle_handler,1,ngx_http_v2_idle_handler,void ngx_http_v2_idle_handler (ngx_event_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_idle_handler(ngx_event_t *rev)
{
    ngx_connection_t          *c;
    ngx_http_v2_srv_conf_t    *h2scf;
    ngx_http_v2_connection_t  *h2c;
    ngx_http_core_loc_conf_t  *clcf;

    c = rev->data;
    h2c = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, ""http2 idle handler"");

    if (rev->timedout || c->close) {
        ngx_http_v2_finalize_connection(h2c, NGX_HTTP_V2_NO_ERROR);
        return;
    }

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {
        if (rev->pending_eof) {
            c->log->handler = NULL;
            ngx_log_error(NGX_LOG_INFO, c->log, rev->kq_errno,
                          ""kevent() reported that client %V closed ""
                          ""idle connection"", &c->addr_text);
#if (NGX_HTTP_SSL)
            if (c->ssl) {
                c->ssl->no_send_shutdown = 1;
            }
#endif
            ngx_http_close_connection(c);
            return;
        }
    }

#endif

    clcf = ngx_http_...",4669.0,4733.0,1.0,45.0,65.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6043,334349,ngx_http_v2_finalize_connection,1,ngx_http_v2_finalize_connection,"void ngx_http_v2_finalize_connection (ngx_http_v2_connection_t*,ngx_uint_t)",http\v2\ngx_http_v2.c,"static void
ngx_http_v2_finalize_connection(ngx_http_v2_connection_t *h2c,
    ngx_uint_t status)
{
    ngx_uint_t               i, size;
    ngx_event_t             *ev;
    ngx_connection_t        *c, *fc;
    ngx_http_request_t      *r;
    ngx_http_v2_node_t      *node;
    ngx_http_v2_stream_t    *stream;
    ngx_http_v2_srv_conf_t  *h2scf;

    c = h2c->connection;

    h2c->blocked = 1;

    if (!c->error && !h2c->goaway) {
        h2c->goaway = 1;

        if (ngx_http_v2_send_goaway(h2c, status) != NGX_ERROR) {
            (void) ngx_http_v2_send_output_queue(h2c);
        }
    }

    if (!h2c->processing && !h2c->pushing) {
        goto done;
    }

    c->read->handler = ngx_http_empty_handler;
    c->write->handler = ngx_http_empty_handler;

    h2c->last_out = NULL;

    h2scf = ngx_http_get_module_srv_conf(h2c->http_connection->conf_ctx,
                                         ngx_http_v2_module);

    size = ngx_http_v2_index_size(h2scf);

    for (i = 0; i < size; ...",4736.0,4821.0,1.0,11.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6044,334355,ngx_http_v2_adjust_windows,1,ngx_http_v2_adjust_windows,"ngx_int_t ngx_http_v2_adjust_windows (ngx_http_v2_connection_t*,ssize_t)",http\v2\ngx_http_v2.c,"static ngx_int_t
ngx_http_v2_adjust_windows(ngx_http_v2_connection_t *h2c, ssize_t delta)
{
    ngx_uint_t               i, size;
    ngx_event_t             *wev;
    ngx_http_v2_node_t      *node;
    ngx_http_v2_stream_t    *stream;
    ngx_http_v2_srv_conf_t  *h2scf;

    h2scf = ngx_http_get_module_srv_conf(h2c->http_connection->conf_ctx,
                                         ngx_http_v2_module);

    size = ngx_http_v2_index_size(h2scf);

    for (i = 0; i < size; i++) {

        for (node = h2c->streams_index[i]; node; node = node->index) {
            stream = node->stream;

            if (stream == NULL) {
                continue;
            }

            if (delta > 0
                && stream->send_window
                      > (ssize_t) (NGX_HTTP_V2_MAX_WINDOW - delta))
            {
                if (ngx_http_v2_terminate_stream(h2c, stream,
                                                 NGX_HTTP_V2_FLOW_CTRL_ERROR)
                    == NGX_ERROR)
        ...",4824.0,4883.0,1.0,11.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6045,334361,ngx_http_v2_set_dependency,1,ngx_http_v2_set_dependency,"void ngx_http_v2_set_dependency (ngx_http_v2_connection_t*,ngx_http_v2_node_t*,ngx_uint_t,ngx_uint_t)",http\v2\ngx_http_v2.c,"static void
ngx_http_v2_set_dependency(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_node_t *node, ngx_uint_t depend, ngx_uint_t exclusive)
{
    ngx_queue_t         *children, *q;
    ngx_http_v2_node_t  *parent, *child, *next;

    parent = depend ? ngx_http_v2_get_node_by_id(h2c, depend, 0) : NULL;

    if (parent == NULL) {
        parent = NGX_HTTP_V2_ROOT;

        if (depend != 0) {
            exclusive = 0;
        }

        node->rank = 1;
        node->rel_weight = (1.0 / 256) * node->weight;

        children = &h2c->dependencies;

    } else {
        if (node->parent != NULL) {

            for (next = parent->parent;
                 next != NGX_HTTP_V2_ROOT && next->rank >= node->rank;
                 next = next->parent)
            {
                if (next != node) {
                    continue;
                }

                ngx_queue_remove(&parent->queue);
                ngx_queue_insert_after(&node->queue, &parent->queue);

                parent->pa...",4886.0,4974.0,1.0,17.0,89.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,void
6046,334369,ngx_http_v2_node_children_update,1,ngx_http_v2_node_children_update,void ngx_http_v2_node_children_update (ngx_http_v2_node_t*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_node_children_update(ngx_http_v2_node_t *node)
{
    ngx_queue_t         *q;
    ngx_http_v2_node_t  *child;

    for (q = ngx_queue_head(&node->children);
         q != ngx_queue_sentinel(&node->children);
         q = ngx_queue_next(q))
    {
        child = ngx_queue_data(q, ngx_http_v2_node_t, queue);

        child->rank = node->rank + 1;
        child->rel_weight = (node->rel_weight / 256) * child->weight;

        ngx_http_v2_node_children_update(child);
    }
}",4977.0,4994.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6047,334374,ngx_http_v2_pool_cleanup,1,ngx_http_v2_pool_cleanup,void ngx_http_v2_pool_cleanup (void*),http\v2\ngx_http_v2.c,"static void
ngx_http_v2_pool_cleanup(void *data)
{
    ngx_http_v2_connection_t  *h2c = data;

    if (h2c->state.pool) {
        ngx_destroy_pool(h2c->state.pool);
    }

    if (h2c->pool) {
        ngx_destroy_pool(h2c->pool);
    }
}",4997.0,5009.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6048,334434,ngx_http_v2_init,1,ngx_http_v2_init,void ngx_http_v2_init (ngx_event_t*),http\v2\ngx_http_v2.c,"void
ngx_http_v2_init(ngx_event_t *rev)
{
    ngx_connection_t          *c;
    ngx_pool_cleanup_t        *cln;
    ngx_http_connection_t     *hc;
    ngx_http_v2_srv_conf_t    *h2scf;
    ngx_http_v2_main_conf_t   *h2mcf;
    ngx_http_v2_connection_t  *h2c;
    ngx_http_core_srv_conf_t  *cscf;

    c = rev->data;
    hc = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, ""init http2 connection"");

    c->log->action = ""processing HTTP/2 connection"";

    h2mcf = ngx_http_get_module_main_conf(hc->conf_ctx, ngx_http_v2_module);

    if (h2mcf->recv_buffer == NULL) {
        h2mcf->recv_buffer = ngx_palloc(ngx_cycle->pool,
                                        h2mcf->recv_buffer_size);
        if (h2mcf->recv_buffer == NULL) {
            ngx_http_close_connection(c);
            return;
        }
    }

    h2c = ngx_pcalloc(c->pool, sizeof(ngx_http_v2_connection_t));
    if (h2c == NULL) {
        ngx_http_close_connection(c);
        return;
    }

    h2c->connection =...",232.0,339.0,1.0,46.0,108.0,93,11,95,23,0,29,10,11,4,16,,0,20,2,1,1,void
6049,335185,ngx_http_v2_send_output_queue,1,ngx_http_v2_send_output_queue,ngx_int_t ngx_http_v2_send_output_queue (ngx_http_v2_connection_t*),http\v2\ngx_http_v2.c,"ngx_int_t
ngx_http_v2_send_output_queue(ngx_http_v2_connection_t *h2c)
{
    int                        tcp_nodelay;
    ngx_chain_t               *cl;
    ngx_event_t               *wev;
    ngx_connection_t          *c;
    ngx_http_v2_out_frame_t   *out, *frame, *fn;
    ngx_http_core_loc_conf_t  *clcf;

    c = h2c->connection;
    wev = c->write;

    if (c->error) {
        goto error;
    }

    if (!wev->ready) {
        return NGX_AGAIN;
    }

    cl = NULL;
    out = NULL;

    for (frame = h2c->last_out; frame; frame = fn) {
        frame->last->next = cl;
        cl = frame->first;

        fn = frame->next;
        frame->next = out;
        out = frame;

        ngx_log_debug4(NGX_LOG_DEBUG_HTTP, c->log, 0,
                       ""http2 frame out: %p sid:%ui bl:%d len:%uz"",
                       out, out->stream ? out->stream->node->id : 0,
                       out->blocked, out->length);
    }

    cl = c->send_chain(c, cl, 0);

    if (cl == NGX_CHAIN_ERROR) {
  ...",519.0,631.0,1.0,1.0,113.0,81,9,92,20,3,3,21,17,3,3,,0,3,2,1,1,ngx_int_t
6050,341437,ngx_http_v2_push_stream,1,ngx_http_v2_push_stream,"ngx_http_v2_stream_t ngx_http_v2_push_stream (ngx_http_v2_stream_t*,ngx_str_t*)",http\v2\ngx_http_v2.c,"ngx_http_v2_stream_t *
ngx_http_v2_push_stream(ngx_http_v2_stream_t *parent, ngx_str_t *path)
{
    ngx_int_t                     rc;
    ngx_str_t                     value;
    ngx_pool_t                   *pool;
    ngx_uint_t                    index;
    ngx_table_elt_t             **h;
    ngx_connection_t             *fc;
    ngx_http_request_t           *r;
    ngx_http_v2_node_t           *node;
    ngx_http_v2_stream_t         *stream;
    ngx_http_v2_srv_conf_t       *h2scf;
    ngx_http_v2_connection_t     *h2c;
    ngx_http_v2_parse_header_t   *header;

    h2c = parent->connection;

    pool = ngx_create_pool(1024, h2c->connection->log);
    if (pool == NULL) {
        goto rst_stream;
    }

    node = ngx_http_v2_get_node_by_id(h2c, h2c->last_push, 1);

    if (node == NULL) {
        ngx_destroy_pool(pool);
        goto rst_stream;
    }

    stream = ngx_http_v2_create_stream(h2c, 1);
    if (stream == NULL) {

        if (node->parent == NULL) {
            h2scf ...",2734.0,2888.0,1.0,20.0,155.0,135,14,129,28,0,32,25,20,4,16,,0,25,4,2,2,ngx_http_v2_stream_t
6051,345001,ngx_http_v2_read_request_body,1,ngx_http_v2_read_request_body,ngx_int_t ngx_http_v2_read_request_body (ngx_http_request_t*),http\v2\ngx_http_v2.c,"ngx_int_t
ngx_http_v2_read_request_body(ngx_http_request_t *r)
{
    off_t                      len;
    size_t                     size;
    ngx_buf_t                 *buf;
    ngx_int_t                  rc;
    ngx_http_v2_stream_t      *stream;
    ngx_http_v2_srv_conf_t    *h2scf;
    ngx_http_request_body_t   *rb;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_v2_connection_t  *h2c;

    stream = r->stream;
    rb = r->request_body;

    if (stream->skip_data) {
        r->request_body_no_buffering = 0;
        rb->post_handler(r);
        return NGX_OK;
    }

    h2scf = ngx_http_get_module_srv_conf(r, ngx_http_v2_module);
    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);

    len = r->headers_in.content_length_n;

    if (r->request_body_no_buffering && !stream->in_closed) {

        if (len < 0 || len > (off_t) clcf->client_body_buffer_size) {
            len = clcf->client_body_buffer_size;
        }

        /*
         * We need a room to store data up...",4008.0,4140.0,1.0,1.0,133.0,91,13,95,20,0,15,17,26,4,8,,0,12,2,1,1,ngx_int_t
6052,345963,ngx_http_v2_read_unbuffered_request_body,1,ngx_http_v2_read_unbuffered_request_body,ngx_int_t ngx_http_v2_read_unbuffered_request_body (ngx_http_request_t*),http\v2\ngx_http_v2.c,"ngx_int_t
ngx_http_v2_read_unbuffered_request_body(ngx_http_request_t *r)
{
    size_t                     window;
    ngx_buf_t                 *buf;
    ngx_int_t                  rc;
    ngx_connection_t          *fc;
    ngx_http_v2_stream_t      *stream;
    ngx_http_v2_connection_t  *h2c;
    ngx_http_core_loc_conf_t  *clcf;

    stream = r->stream;
    fc = r->connection;

    if (fc->read->timedout) {
        if (stream->recv_window) {
            stream->skip_data = 1;
            fc->timedout = 1;

            return NGX_HTTP_REQUEST_TIME_OUT;
        }

        fc->read->timedout = 0;
    }

    if (fc->error) {
        stream->skip_data = 1;
        return NGX_HTTP_BAD_REQUEST;
    }

    rc = ngx_http_v2_filter_request_body(r);

    if (rc != NGX_OK) {
        stream->skip_data = 1;
        return rc;
    }

    if (!r->request_body->rest) {
        return NGX_OK;
    }

    if (r->request_body->busy != NULL) {
        return NGX_AGAIN;
    }

    buf = r->request_body-...",4353.0,4442.0,1.0,1.0,90.0,73,10,68,17,0,4,13,15,2,4,,0,3,2,1,1,ngx_int_t
6053,346274,ngx_http_v2_close_stream,1,ngx_http_v2_close_stream,"void ngx_http_v2_close_stream (ngx_http_v2_stream_t*,ngx_int_t)",http\v2\ngx_http_v2.c,"void
ngx_http_v2_close_stream(ngx_http_v2_stream_t *stream, ngx_int_t rc)
{
    ngx_pool_t                *pool;
    ngx_uint_t                 push;
    ngx_event_t               *ev;
    ngx_connection_t          *fc;
    ngx_http_v2_node_t        *node;
    ngx_http_v2_connection_t  *h2c;

    h2c = stream->connection;
    node = stream->node;

    ngx_log_debug4(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 close stream %ui, queued %ui, ""
                   ""processing %ui, pushing %ui"",
                   node->id, stream->queued, h2c->processing, h2c->pushing);

    fc = stream->request->connection;

    if (stream->queued) {
        fc->error = 1;
        fc->write->handler = ngx_http_v2_retry_close_stream_handler;
        fc->read->handler = ngx_http_v2_retry_close_stream_handler;
        return;
    }

    if (!stream->rst_sent && !h2c->connection->error) {

        if (!stream->out_closed) {
            if (ngx_http_v2_send_rst_stream(h2c, node->id...",4475.0,4592.0,1.0,53.0,118.0,91,14,72,13,1,3,13,16,1,3,,0,1,4,2,2,void
6054,347682,ngx_http_v2_handler_pt,1,ngx_http_v2_handler_pt,"u_char* ngx_http_v2_handler_pt (ngx_http_v2_connection_t*,u_char*,u_char*)",http\v2\ngx_http_v2.h,"typedef u_char *(*ngx_http_v2_handler_pt) (ngx_http_v2_connection_t *h2c,
    u_char *pos, u_char *end);",63.0,64.0,16.0,29.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char*
6055,347806,handler,1,ngx_http_v2_out_frame_s.handler,"ngx_int_t ngx_http_v2_out_frame_s.handler (ngx_http_v2_connection_t*,ngx_http_v2_out_frame_t*)",http\v2\ngx_http_v2.h,"ngx_int_t                      (*handler)(ngx_http_v2_connection_t *h2c,
                                        ngx_http_v2_out_frame_t *frame);",228.0,229.0,36.0,71.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6056,347851,ngx_http_v2_get_static_name,1,ngx_http_v2_get_static_name,ngx_str_t* ngx_http_v2_get_static_name (ngx_uint_t),http\v2\ngx_http_v2_table.c,"ngx_str_t *
ngx_http_v2_get_static_name(ngx_uint_t index)
{
    return &ngx_http_v2_static_table[index - 1].name;
}",89.0,93.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_str_t
6057,347856,ngx_http_v2_get_static_value,1,ngx_http_v2_get_static_value,ngx_str_t* ngx_http_v2_get_static_value (ngx_uint_t),http\v2\ngx_http_v2_table.c,"ngx_str_t *
ngx_http_v2_get_static_value(ngx_uint_t index)
{
    return &ngx_http_v2_static_table[index - 1].value;
}",96.0,100.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_str_t
6058,347861,ngx_http_v2_get_indexed_header,1,ngx_http_v2_get_indexed_header,"ngx_int_t ngx_http_v2_get_indexed_header (ngx_http_v2_connection_t*,ngx_uint_t,ngx_uint_t)",http\v2\ngx_http_v2_table.c,"ngx_int_t
ngx_http_v2_get_indexed_header(ngx_http_v2_connection_t *h2c, ngx_uint_t index,
    ngx_uint_t name_only)
{
    u_char                *p;
    size_t                 rest;
    ngx_http_v2_header_t  *entry;

    if (index == 0) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent invalid hpack table index 0"");
        return NGX_ERROR;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 get indexed %s: %ui"",
                   name_only ? ""name"" : ""header"", index);

    index--;

    if (index < NGX_HTTP_V2_STATIC_TABLE_ENTRIES) {
        h2c->state.header = ngx_http_v2_static_table[index];
        return NGX_OK;
    }

    index -= NGX_HTTP_V2_STATIC_TABLE_ENTRIES;

    if (index < h2c->hpack.added - h2c->hpack.deleted) {
        index = (h2c->hpack.added - index - 1) % h2c->hpack.allocated;
        entry = h2c->hpack.entries[index];

        p = ngx_pnalloc(h2c->state.pool, entry->nam...",103.0,185.0,1.0,16.0,83.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6059,347868,ngx_http_v2_add_header,1,ngx_http_v2_add_header,"ngx_int_t ngx_http_v2_add_header (ngx_http_v2_connection_t*,ngx_http_v2_header_t*)",http\v2\ngx_http_v2_table.c,"ngx_int_t
ngx_http_v2_add_header(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_header_t *header)
{
    size_t                 avail;
    ngx_uint_t             index;
    ngx_http_v2_header_t  *entry, **entries;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 table add: \""%V: %V\"""",
                   &header->name, &header->value);

    if (h2c->hpack.entries == NULL) {
        h2c->hpack.allocated = 64;
        h2c->hpack.size = NGX_HTTP_V2_TABLE_SIZE;
        h2c->hpack.free = NGX_HTTP_V2_TABLE_SIZE;

        h2c->hpack.entries = ngx_palloc(h2c->connection->pool,
                                        sizeof(ngx_http_v2_header_t *)
                                        * h2c->hpack.allocated);
        if (h2c->hpack.entries == NULL) {
            return NGX_ERROR;
        }

        h2c->hpack.storage = ngx_palloc(h2c->connection->pool,
                                        h2c->hpack.free);
        if (h2c->hpack.storage == NULL) ...",188.0,299.0,1.0,26.0,112.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6060,347874,ngx_http_v2_table_size,1,ngx_http_v2_table_size,"ngx_int_t ngx_http_v2_table_size (ngx_http_v2_connection_t*,size_t)",http\v2\ngx_http_v2_table.c,"ngx_int_t
ngx_http_v2_table_size(ngx_http_v2_connection_t *h2c, size_t size)
{
    ssize_t                needed;
    ngx_http_v2_header_t  *entry;

    if (size > NGX_HTTP_V2_TABLE_SIZE) {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""client sent invalid table size update: %uz"", size);

        return NGX_ERROR;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 new hpack table size: %uz was:%uz"",
                   size, h2c->hpack.size);

    needed = h2c->hpack.size - size;

    while (needed > (ssize_t) h2c->hpack.free) {
        entry = h2c->hpack.entries[h2c->hpack.deleted++ % h2c->hpack.allocated];
        h2c->hpack.free += 32 + entry->name.len + entry->value.len;
    }

    h2c->hpack.size = size;
    h2c->hpack.free -= needed;

    return NGX_OK;
}",335.0,363.0,1.0,15.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6061,347880,ngx_http_v2_huff_decode,1,ngx_http_v2_huff_decode,"ngx_int_t ngx_http_v2_huff_decode (u_char*,u_char*,size_t,u_char**,ngx_uint_t,ngx_log_t*)",http\v2\ngx_http_v2_huff_decode.c,"ngx_int_t
ngx_http_v2_huff_decode(u_char *state, u_char *src, size_t len, u_char **dst,
    ngx_uint_t last, ngx_log_t *log)
{
    u_char  *end, ch, ending;

    ch = 0;
    ending = 1;

    end = src + len;

    while (src != end) {
        ch = *src++;

        if (ngx_http_v2_huff_decode_bits(state, &ending, ch >> 4, dst)
            != NGX_OK)
        {
            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, log, 0,
                           ""http2 huffman decoding error at state %d: ""
                           ""bad code 0x%Xd"", *state, ch >> 4);

            return NGX_ERROR;
        }

        if (ngx_http_v2_huff_decode_bits(state, &ending, ch & 0xf, dst)
            != NGX_OK)
        {
            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, log, 0,
                           ""http2 huffman decoding error at state %d: ""
                           ""bad code 0x%Xd"", *state, ch & 0xf);

            return NGX_ERROR;
        }
    }

    if (last) {
        if (!ending) {
            ngx_log_de...",2642.0,2690.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,12,6,6,ngx_int_t
6062,347890,ngx_http_v2_huff_encode,1,ngx_http_v2_huff_encode,"size_t ngx_http_v2_huff_encode (u_char*,size_t,u_char*,ngx_uint_t)",http\v2\ngx_http_v2_huff_encode.c,"size_t
ngx_http_v2_huff_encode(u_char *src, size_t len, u_char *dst, ngx_uint_t lower)
{
    u_char                          *end;
    size_t                           hlen;
    ngx_uint_t                       buf, pending, code;
    ngx_http_v2_huff_encode_code_t  *table, *next;

    table = lower ? ngx_http_v2_huff_encode_table_lc
                  : ngx_http_v2_huff_encode_table;
    hlen = 0;
    buf = 0;
    pending = 0;

    end = src + len;

    while (src != end) {
        next = &table[*src++];

        code = next->code;
        pending += next->len;

        /* accumulate bits */
        if (pending < sizeof(buf) * 8) {
            buf |= code << (sizeof(buf) * 8 - pending);
            continue;
        }

        if (hlen + sizeof(buf) >= len) {
            return 0;
        }

        pending -= sizeof(buf) * 8;

        buf |= code >> pending;

        ngx_http_v2_huff_encode_buf(&dst[hlen], buf);

        hlen += sizeof(buf);

        buf = pending ? code << (sizeof...",191.0,254.0,1.0,8.0,64.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,size_t
6063,347898,ngx_http_v2_string_encode,1,ngx_http_v2_string_encode,"u_char* ngx_http_v2_string_encode (u_char*,u_char*,size_t,u_char*,ngx_uint_t)",http\v2\ngx_http_v2_encode.c,"u_char *
ngx_http_v2_string_encode(u_char *dst, u_char *src, size_t len, u_char *tmp,
    ngx_uint_t lower)
{
    size_t  hlen;

    hlen = ngx_http_v2_huff_encode(src, len, tmp, lower);

    if (hlen > 0) {
        *dst = NGX_HTTP_V2_ENCODE_HUFF;
        dst = ngx_http_v2_write_int(dst, ngx_http_v2_prefix(7), hlen);
        return ngx_cpymem(dst, tmp, hlen);
    }

    *dst = NGX_HTTP_V2_ENCODE_RAW;
    dst = ngx_http_v2_write_int(dst, ngx_http_v2_prefix(7), len);

    if (lower) {
        ngx_strlow(dst, src, len);
        return dst + len;
    }

    return ngx_cpymem(dst, src, len);
}",17.0,40.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,u_char
6064,347918,ngx_http_v2_write_int,1,ngx_http_v2_write_int,"u_char* ngx_http_v2_write_int (u_char*,ngx_uint_t,ngx_uint_t)",http\v2\ngx_http_v2_encode.c,"static u_char *
ngx_http_v2_write_int(u_char *pos, ngx_uint_t prefix, ngx_uint_t value)
{
    if (value < prefix) {
        *pos++ |= value;
        return pos;
    }

    *pos++ |= prefix;
    value -= prefix;

    while (value >= 128) {
        *pos++ = value % 128 + 128;
        value /= 128;
    }

    *pos++ = (u_char) value;

    return pos;
}",43.0,62.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6065,348095,ngx_http_v2_push_resources,1,ngx_http_v2_push_resources,ngx_int_t ngx_http_v2_push_resources (ngx_http_request_t*),http\v2\ngx_http_v2_filter_module.c,"static ngx_int_t
ngx_http_v2_push_resources(ngx_http_request_t *r)
{
    u_char                     *start, *end, *last;
    ngx_int_t                   rc;
    ngx_str_t                   path;
    ngx_uint_t                  i, push;
    ngx_table_elt_t           **h;
    ngx_http_v2_loc_conf_t     *h2lcf;
    ngx_http_complex_value_t   *pushes;
    ngx_str_t                   binary[NGX_HTTP_V2_PUSH_HEADERS];

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
                   ""http2 push resources"");

    ngx_memzero(binary, NGX_HTTP_V2_PUSH_HEADERS * sizeof(ngx_str_t));

    h2lcf = ngx_http_get_module_loc_conf(r, ngx_http_v2_module);

    if (h2lcf->pushes) {
        pushes = h2lcf->pushes->elts;

        for (i = 0; i < h2lcf->pushes->nelts; i++) {

            if (ngx_http_complex_value(r, &pushes[i], &path) != NGX_OK) {
                return NGX_ERROR;
            }

            if (path.len == 0) {
                continue;
            }

            if (path...",673.0,894.0,1.0,39.0,222.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6066,348100,ngx_http_v2_push_resource,1,ngx_http_v2_push_resource,"ngx_int_t ngx_http_v2_push_resource (ngx_http_request_t*,ngx_str_t*,ngx_str_t*)",http\v2\ngx_http_v2_filter_module.c,"static ngx_int_t
ngx_http_v2_push_resource(ngx_http_request_t *r, ngx_str_t *path,
    ngx_str_t *binary)
{
    u_char                      *start, *pos, *tmp;
    size_t                       len;
    ngx_str_t                   *value;
    ngx_uint_t                   i;
    ngx_table_elt_t            **h;
    ngx_connection_t            *fc;
    ngx_http_v2_stream_t        *stream;
    ngx_http_v2_out_frame_t     *frame;
    ngx_http_v2_connection_t    *h2c;
    ngx_http_v2_push_header_t   *ph;

    fc = r->connection;

    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, fc->log, 0, ""http2 push resource"");

    stream = r->stream;
    h2c = stream->connection;

    if (!ngx_path_separator(path->data[0])) {
        ngx_log_error(NGX_LOG_WARN, fc->log, 0,
                      ""non-absolute path \""%V\"" not pushed"", path);
        return NGX_DECLINED;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 pushing:%ui limit:%ui"",
                   h2c->p...",897.0,1075.0,1.0,24.0,179.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6067,348107,ngx_http_v2_create_headers_frame,1,ngx_http_v2_create_headers_frame,"ngx_http_v2_out_frame_t* ngx_http_v2_create_headers_frame (ngx_http_request_t*,u_char*,u_char*,ngx_uint_t)",http\v2\ngx_http_v2_filter_module.c,"static ngx_http_v2_out_frame_t *
ngx_http_v2_create_headers_frame(ngx_http_request_t *r, u_char *pos,
    u_char *end, ngx_uint_t fin)
{
    u_char                    type, flags;
    size_t                    rest, frame_size;
    ngx_buf_t                *b;
    ngx_chain_t              *cl, **ll;
    ngx_http_v2_stream_t     *stream;
    ngx_http_v2_out_frame_t  *frame;

    stream = r->stream;
    rest = end - pos;

    frame = ngx_palloc(r->pool, sizeof(ngx_http_v2_out_frame_t));
    if (frame == NULL) {
        return NULL;
    }

    frame->handler = ngx_http_v2_headers_frame_handler;
    frame->stream = stream;
    frame->length = rest;
    frame->blocked = 1;
    frame->fin = fin;

    ll = &frame->first;

    type = NGX_HTTP_V2_HEADERS_FRAME;
    flags = fin ? NGX_HTTP_V2_END_STREAM_FLAG : NGX_HTTP_V2_NO_FLAG;
    frame_size = stream->connection->frame_size;

    for ( ;; ) {
        if (rest <= frame_size) {
            frame_size = rest;
            flags |= NGX_HTTP_V2_...",1078.0,1180.0,1.0,1.0,103.0,0,0,0,0,1,0,1,1,0,0,,0,0,8,4,4,ngx_http_v2_out_frame_t
6068,348115,ngx_http_v2_create_push_frame,1,ngx_http_v2_create_push_frame,"ngx_http_v2_out_frame_t* ngx_http_v2_create_push_frame (ngx_http_request_t*,u_char*,u_char*)",http\v2\ngx_http_v2_filter_module.c,"static ngx_http_v2_out_frame_t *
ngx_http_v2_create_push_frame(ngx_http_request_t *r, u_char *pos, u_char *end)
{
    u_char                     type, flags;
    size_t                     rest, frame_size, len;
    ngx_buf_t                 *b;
    ngx_chain_t               *cl, **ll;
    ngx_http_v2_stream_t      *stream;
    ngx_http_v2_out_frame_t   *frame;
    ngx_http_v2_connection_t  *h2c;

    stream = r->stream;
    h2c = stream->connection;
    rest = NGX_HTTP_V2_STREAM_ID_SIZE + (end - pos);

    frame = ngx_palloc(r->pool, sizeof(ngx_http_v2_out_frame_t));
    if (frame == NULL) {
        return NULL;
    }

    frame->handler = ngx_http_v2_push_frame_handler;
    frame->stream = stream;
    frame->length = rest;
    frame->blocked = 1;
    frame->fin = 0;

    ll = &frame->first;

    type = NGX_HTTP_V2_PUSH_PROMISE_FRAME;
    flags = NGX_HTTP_V2_NO_FLAG;
    frame_size = h2c->frame_size;

    for ( ;; ) {
        if (rest <= frame_size) {
            frame_size = rest;...",1183.0,1299.0,1.0,1.0,117.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_http_v2_out_frame_t
6069,348122,ngx_http_v2_create_trailers_frame,1,ngx_http_v2_create_trailers_frame,ngx_http_v2_out_frame_t* ngx_http_v2_create_trailers_frame (ngx_http_request_t*),http\v2\ngx_http_v2_filter_module.c,"static ngx_http_v2_out_frame_t *
ngx_http_v2_create_trailers_frame(ngx_http_request_t *r)
{
    u_char            *pos, *start, *tmp;
    size_t             len, tmp_len;
    ngx_uint_t         i;
    ngx_list_part_t   *part;
    ngx_table_elt_t   *header;
    ngx_connection_t  *fc;

    fc = r->connection;
    len = 0;
    tmp_len = 0;

    part = &r->headers_out.trailers.part;
    header = part->elts;

    for (i = 0; /* void */; i++) {

        if (i >= part->nelts) {
            if (part->next == NULL) {
                break;
            }

            part = part->next;
            header = part->elts;
            i = 0;
        }

        if (header[i].hash == 0) {
            continue;
        }

        if (header[i].key.len > NGX_HTTP_V2_MAX_FIELD) {
            ngx_log_error(NGX_LOG_CRIT, fc->log, 0,
                          ""too long response trailer name: \""%V\"""",
                          &header[i].key);
            return NULL;
        }

        if (header[i].value...",1302.0,1413.0,1.0,15.0,112.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_http_v2_out_frame_t
6070,348127,ngx_http_v2_send_chain,1,ngx_http_v2_send_chain,"ngx_chain_t* ngx_http_v2_send_chain (ngx_connection_t*,ngx_chain_t*,off_t)",http\v2\ngx_http_v2_filter_module.c,"static ngx_chain_t *
ngx_http_v2_send_chain(ngx_connection_t *fc, ngx_chain_t *in, off_t limit)
{
    off_t                      size, offset;
    size_t                     rest, frame_size;
    ngx_chain_t               *cl, *out, **ln;
    ngx_http_request_t        *r;
    ngx_http_v2_stream_t      *stream;
    ngx_http_v2_loc_conf_t    *h2lcf;
    ngx_http_v2_out_frame_t   *frame, *trailers;
    ngx_http_v2_connection_t  *h2c;

    r = fc->data;
    stream = r->stream;

#if (NGX_SUPPRESS_WARN)
    size = 0;
#endif

    while (in) {
        size = ngx_buf_size(in->buf);

        if (size || in->buf->last_buf) {
            break;
        }

        in = in->next;
    }

    if (in == NULL || stream->out_closed) {

        if (size) {
            ngx_log_error(NGX_LOG_ERR, fc->log, 0,
                          ""output on closed stream"");
            return NGX_CHAIN_ERROR;
        }

        if (stream->queued) {
            fc->write->active = 1;
            fc->write->ready = 0;...",1416.0,1632.0,1.0,15.0,217.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6071,348134,ngx_http_v2_filter_get_shadow,1,ngx_http_v2_filter_get_shadow,"ngx_chain_t* ngx_http_v2_filter_get_shadow (ngx_http_v2_stream_t*,ngx_buf_t*,off_t,off_t)",http\v2\ngx_http_v2_filter_module.c,"static ngx_chain_t *
ngx_http_v2_filter_get_shadow(ngx_http_v2_stream_t *stream, ngx_buf_t *buf,
    off_t offset, off_t size)
{
    ngx_buf_t    *chunk;
    ngx_chain_t  *cl;

    cl = ngx_chain_get_free_buf(stream->request->pool, &stream->free_bufs);
    if (cl == NULL) {
        return NULL;
    }

    chunk = cl->buf;

    ngx_memcpy(chunk, buf, sizeof(ngx_buf_t));

    chunk->tag = (ngx_buf_tag_t) &ngx_http_v2_filter_get_shadow;
    chunk->shadow = buf;

    if (ngx_buf_in_memory(chunk)) {
        chunk->pos += offset;
        chunk->last = chunk->pos + size;
    }

    if (chunk->in_file) {
        chunk->file_pos += offset;
        chunk->file_last = chunk->file_pos + size;
    }

    return cl;
}",1635.0,1665.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_chain_t
6072,348142,ngx_http_v2_filter_get_data_frame,1,ngx_http_v2_filter_get_data_frame,"ngx_http_v2_out_frame_t* ngx_http_v2_filter_get_data_frame (ngx_http_v2_stream_t*,size_t,ngx_chain_t*,ngx_chain_t*)",http\v2\ngx_http_v2_filter_module.c,"static ngx_http_v2_out_frame_t *
ngx_http_v2_filter_get_data_frame(ngx_http_v2_stream_t *stream,
    size_t len, ngx_chain_t *first, ngx_chain_t *last)
{
    u_char                     flags;
    ngx_buf_t                 *buf;
    ngx_chain_t               *cl;
    ngx_http_v2_out_frame_t   *frame;
    ngx_http_v2_connection_t  *h2c;

    frame = stream->free_frames;
    h2c = stream->connection;

    if (frame) {
        stream->free_frames = frame->next;

    } else if (h2c->frames < 10000) {
        frame = ngx_palloc(stream->request->pool,
                           sizeof(ngx_http_v2_out_frame_t));
        if (frame == NULL) {
            return NULL;
        }

        stream->frames++;
        h2c->frames++;

    } else {
        ngx_log_error(NGX_LOG_INFO, h2c->connection->log, 0,
                      ""http2 flood detected"");

        h2c->connection->error = 1;
        return NULL;
    }

    flags = last->buf->last_buf ? NGX_HTTP_V2_END_STREAM_FLAG : 0;

    ngx_log_debu...",1668.0,1753.0,1.0,1.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_http_v2_out_frame_t
6073,348151,ngx_http_v2_waiting_queue,1,ngx_http_v2_waiting_queue,"void ngx_http_v2_waiting_queue (ngx_http_v2_connection_t*,ngx_http_v2_stream_t*)",http\v2\ngx_http_v2_filter_module.c,"static void
ngx_http_v2_waiting_queue(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_stream_t *stream)
{
    ngx_queue_t           *q;
    ngx_http_v2_stream_t  *s;

    if (stream->waiting) {
        return;
    }

    stream->waiting = 1;

    for (q = ngx_queue_last(&h2c->waiting);
         q != ngx_queue_sentinel(&h2c->waiting);
         q = ngx_queue_prev(q))
    {
        s = ngx_queue_data(q, ngx_http_v2_stream_t, queue);

        if (s->node->rank < stream->node->rank
            || (s->node->rank == stream->node->rank
                && s->node->rel_weight >= stream->node->rel_weight))
        {
            break;
        }
    }

    ngx_queue_insert_after(q, &stream->queue);
}",1778.0,1806.0,1.0,1.0,29.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,void
6074,348158,ngx_http_v2_headers_frame_handler,1,ngx_http_v2_headers_frame_handler,"ngx_int_t ngx_http_v2_headers_frame_handler (ngx_http_v2_connection_t*,ngx_http_v2_out_frame_t*)",http\v2\ngx_http_v2_filter_module.c,"static ngx_int_t
ngx_http_v2_headers_frame_handler(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_out_frame_t *frame)
{
    ngx_chain_t           *cl, *ln;
    ngx_http_v2_stream_t  *stream;

    stream = frame->stream;
    cl = frame->first;

    for ( ;; ) {
        if (cl->buf->pos != cl->buf->last) {
            frame->first = cl;

            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                           ""http2:%ui HEADERS frame %p was sent partially"",
                           stream->node->id, frame);

            return NGX_AGAIN;
        }

        ln = cl->next;

        if (cl->buf->tag == (ngx_buf_tag_t) &ngx_http_v2_module) {
            cl->next = stream->free_frame_headers;
            stream->free_frame_headers = cl;

        } else {
            cl->next = stream->free_bufs;
            stream->free_bufs = cl;
        }

        if (cl == frame->last) {
            break;
        }

        cl = ln;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_HT...",1834.0,1887.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6075,348164,ngx_http_v2_push_frame_handler,1,ngx_http_v2_push_frame_handler,"ngx_int_t ngx_http_v2_push_frame_handler (ngx_http_v2_connection_t*,ngx_http_v2_out_frame_t*)",http\v2\ngx_http_v2_filter_module.c,"static ngx_int_t
ngx_http_v2_push_frame_handler(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_out_frame_t *frame)
{
    ngx_chain_t           *cl, *ln;
    ngx_http_v2_stream_t  *stream;

    stream = frame->stream;
    cl = frame->first;

    for ( ;; ) {
        if (cl->buf->pos != cl->buf->last) {
            frame->first = cl;

            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                           ""http2:%ui PUSH_PROMISE frame %p was sent partially"",
                           stream->node->id, frame);

            return NGX_AGAIN;
        }

        ln = cl->next;

        if (cl->buf->tag == (ngx_buf_tag_t) &ngx_http_v2_module) {
            cl->next = stream->free_frame_headers;
            stream->free_frame_headers = cl;

        } else {
            cl->next = stream->free_bufs;
            stream->free_bufs = cl;
        }

        if (cl == frame->last) {
            break;
        }

        cl = ln;
    }

    ngx_log_debug2(NGX_LOG_DEBUG_...",1890.0,1943.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6076,348170,ngx_http_v2_data_frame_handler,1,ngx_http_v2_data_frame_handler,"ngx_int_t ngx_http_v2_data_frame_handler (ngx_http_v2_connection_t*,ngx_http_v2_out_frame_t*)",http\v2\ngx_http_v2_filter_module.c,"static ngx_int_t
ngx_http_v2_data_frame_handler(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_out_frame_t *frame)
{
    ngx_buf_t             *buf;
    ngx_chain_t           *cl, *ln;
    ngx_http_v2_stream_t  *stream;

    stream = frame->stream;
    cl = frame->first;

    if (cl->buf->tag == (ngx_buf_tag_t) &ngx_http_v2_module) {

        if (cl->buf->pos != cl->buf->last) {
            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                           ""http2:%ui DATA frame %p was sent partially"",
                           stream->node->id, frame);

            return NGX_AGAIN;
        }

        ln = cl->next;

        cl->next = stream->free_frame_headers;
        stream->free_frame_headers = cl;

        if (cl == frame->last) {
            goto done;
        }

        cl = ln;
    }

    for ( ;; ) {
        if (cl->buf->tag == (ngx_buf_tag_t) &ngx_http_v2_filter_get_shadow) {
            buf = cl->buf->shadow;

            if (ngx_buf_in_memory(buf)) ...",1946.0,2038.0,1.0,1.0,93.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6077,348178,ngx_http_v2_filter_cleanup,1,ngx_http_v2_filter_cleanup,void ngx_http_v2_filter_cleanup (void*),http\v2\ngx_http_v2_filter_module.c,"static void
ngx_http_v2_filter_cleanup(void *data)
{
    ngx_http_v2_stream_t *stream = data;

    size_t                     window;
    ngx_event_t               *wev;
    ngx_queue_t               *q;
    ngx_http_v2_out_frame_t   *frame, **fn;
    ngx_http_v2_connection_t  *h2c;

    if (stream->waiting) {
        stream->waiting = 0;
        ngx_queue_remove(&stream->queue);
    }

    if (stream->queued == 0) {
        return;
    }

    window = 0;
    h2c = stream->connection;
    fn = &h2c->last_out;

    for ( ;; ) {
        frame = *fn;

        if (frame == NULL) {
            break;
        }

        if (frame->stream == stream && !frame->blocked) {
            *fn = frame->next;

            window += frame->length;

            if (--stream->queued == 0) {
                break;
            }

            continue;
        }

        fn = &frame->next;
    }

    if (h2c->send_window == 0 && window) {

        while (!ngx_queue_empty(&h2c->waiting)) {
            q =...",2097.0,2166.0,1.0,1.0,70.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6078,348183,ngx_http_v2_filter_init,1,ngx_http_v2_filter_init,ngx_int_t ngx_http_v2_filter_init (ngx_conf_t*),http\v2\ngx_http_v2_filter_module.c,"static ngx_int_t
ngx_http_v2_filter_init(ngx_conf_t *cf)
{
    ngx_http_next_header_filter = ngx_http_top_header_filter;
    ngx_http_top_header_filter = ngx_http_v2_header_filter;

    return NGX_OK;
}",2169.0,2176.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6079,348218,ngx_http_v2_header_filter,1,ngx_http_v2_header_filter,ngx_int_t ngx_http_v2_header_filter (ngx_http_request_t*),http\v2\ngx_http_v2_filter_module.c,"static ngx_int_t
ngx_http_v2_header_filter(ngx_http_request_t *r)
{
    u_char                     status, *pos, *start, *p, *tmp;
    size_t                     len, tmp_len;
    ngx_str_t                  host, location;
    ngx_uint_t                 i, port, fin;
    ngx_list_part_t           *part;
    ngx_table_elt_t           *header;
    ngx_connection_t          *fc;
    ngx_http_cleanup_t        *cln;
    ngx_http_v2_stream_t      *stream;
    ngx_http_v2_out_frame_t   *frame;
    ngx_http_v2_connection_t  *h2c;
    ngx_http_core_loc_conf_t  *clcf;
    ngx_http_core_srv_conf_t  *cscf;
    u_char                     addr[NGX_SOCKADDR_STRLEN];

    static const u_char nginx[5] = ""\x84\xaa\x63\x55\xe7"";
#if (NGX_HTTP_GZIP)
    static const u_char accept_encoding[12] =
        ""\x8b\x84\x84\x2d\x69\x5b\x05\x44\x3c\x86\xaa\x6f"";
#endif

    static size_t nginx_ver_len = ngx_http_v2_literal_size(NGINX_VER);
    static u_char nginx_ver[ngx_http_v2_literal_size(NGINX_VER)];

    s...",133.0,670.0,1.0,34.0,538.0,593,25,425,63,0,26,63,86,2,14,,0,22,2,1,1,ngx_int_t
6080,353370,ngx_http_v2_flow_control,1,ngx_http_v2_flow_control,"ANY ngx_http_v2_flow_control (ngx_http_v2_connection_t*,ngx_http_v2_stream_t*)",http\v2\ngx_http_v2_filter_module.c,"ngx_http_v2_flow_control(ngx_http_v2_connection_t *h2c,
    ngx_http_v2_stream_t *stream)
{
    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2:%ui windows: conn:%uz stream:%z"",
                   stream->node->id, h2c->send_window, stream->send_window);

    if (stream->send_window <= 0) {
        stream->exhausted = 1;
        return NGX_DECLINED;
    }

    if (h2c->send_window == 0) {
        ngx_http_v2_waiting_queue(h2c, stream);
        return NGX_DECLINED;
    }

    return NGX_OK;
}",1757.0,1775.0,1.0,1.0,19.0,12,4,13,5,0,1,3,3,0,1,,0,0,4,2,2,ANY
6081,353516,ngx_http_v2_filter_send,1,ngx_http_v2_filter_send,"ANY ngx_http_v2_filter_send (ngx_connection_t*,ngx_http_v2_stream_t*)",http\v2\ngx_http_v2_filter_module.c,"ngx_http_v2_filter_send(ngx_connection_t *fc, ngx_http_v2_stream_t *stream)
{
    stream->blocked = 1;

    if (ngx_http_v2_send_output_queue(stream->connection) == NGX_ERROR) {
        fc->error = 1;
        return NGX_ERROR;
    }

    stream->blocked = 0;

    if (stream->queued) {
        fc->buffered |= NGX_HTTP_V2_BUFFERED;
        fc->write->active = 1;
        fc->write->ready = 0;
        return NGX_AGAIN;
    }

    fc->buffered &= ~NGX_HTTP_V2_BUFFERED;

    return NGX_OK;
}",1810.0,1831.0,1.0,1.0,22.0,18,4,15,6,1,1,3,3,1,1,,0,1,4,2,2,ANY
6082,375199,ngx_http_v2_huff_decode_bits,1,ngx_http_v2_huff_decode_bits,"ANY ngx_http_v2_huff_decode_bits (u_char*,u_char*,ngx_uint_t,u_char**)",http\v2\ngx_http_v2_huff_decode.c,"ngx_http_v2_huff_decode_bits(u_char *state, u_char *ending, ngx_uint_t bits,
    u_char **dst)
{
    ngx_http_v2_huff_decode_code_t  code;

    code = ngx_http_v2_huff_decode_codes[*state][bits];

    if (code.next == *state) {
        return NGX_ERROR;
    }

    if (code.emit) {
        *(*dst)++ = code.sym;
    }

    *ending = code.ending;
    *state = code.next;

    return NGX_OK;
}",2695.0,2714.0,1.0,1.0,20.0,19,6,15,8,0,6,3,3,2,0,,0,6,8,4,4,ANY
6083,377012,ngx_http_v2_add_variables,1,ngx_http_v2_add_variables,ngx_int_t ngx_http_v2_add_variables (ngx_conf_t*),http\v2\ngx_http_v2_module.c,"static ngx_int_t
ngx_http_v2_add_variables(ngx_conf_t *cf)
{
    ngx_http_variable_t  *var, *v;

    for (v = ngx_http_v2_vars; v->name.len; v++) {
        var = ngx_http_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",220.0,236.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6084,377017,ngx_http_v2_variable,1,ngx_http_v2_variable,"ngx_int_t ngx_http_v2_variable (ngx_http_request_t*,ngx_http_variable_value_t*,uintptr_t)",http\v2\ngx_http_v2_module.c,"static ngx_int_t
ngx_http_v2_variable(ngx_http_request_t *r,
    ngx_http_variable_value_t *v, uintptr_t data)
{

    if (r->stream) {
#if (NGX_HTTP_SSL)

        if (r->connection->ssl) {
            v->len = sizeof(""h2"") - 1;
            v->valid = 1;
            v->no_cacheable = 0;
            v->not_found = 0;
            v->data = (u_char *) ""h2"";

            return NGX_OK;
        }

#endif
        v->len = sizeof(""h2c"") - 1;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = (u_char *) ""h2c"";

        return NGX_OK;
    }

    *v = ngx_http_variable_null_value;

    return NGX_OK;
}",239.0,270.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6085,377024,ngx_http_v2_module_init,1,ngx_http_v2_module_init,ngx_int_t ngx_http_v2_module_init (ngx_cycle_t*),http\v2\ngx_http_v2_module.c,"static ngx_int_t
ngx_http_v2_module_init(ngx_cycle_t *cycle)
{
    return NGX_OK;
}",273.0,277.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6086,377029,ngx_http_v2_create_main_conf,1,ngx_http_v2_create_main_conf,void* ngx_http_v2_create_main_conf (ngx_conf_t*),http\v2\ngx_http_v2_module.c,"static void *
ngx_http_v2_create_main_conf(ngx_conf_t *cf)
{
    ngx_http_v2_main_conf_t  *h2mcf;

    h2mcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_v2_main_conf_t));
    if (h2mcf == NULL) {
        return NULL;
    }

    h2mcf->recv_buffer_size = NGX_CONF_UNSET_SIZE;

    return h2mcf;
}",280.0,293.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6087,377034,ngx_http_v2_init_main_conf,1,ngx_http_v2_init_main_conf,"char* ngx_http_v2_init_main_conf (ngx_conf_t*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_init_main_conf(ngx_conf_t *cf, void *conf)
{
    ngx_http_v2_main_conf_t *h2mcf = conf;

    ngx_conf_init_size_value(h2mcf->recv_buffer_size, 256 * 1024);

    return NGX_CONF_OK;
}",296.0,304.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
6088,377040,ngx_http_v2_create_srv_conf,1,ngx_http_v2_create_srv_conf,void* ngx_http_v2_create_srv_conf (ngx_conf_t*),http\v2\ngx_http_v2_module.c,"static void *
ngx_http_v2_create_srv_conf(ngx_conf_t *cf)
{
    ngx_http_v2_srv_conf_t  *h2scf;

    h2scf = ngx_pcalloc(cf->pool, sizeof(ngx_http_v2_srv_conf_t));
    if (h2scf == NULL) {
        return NULL;
    }

    h2scf->pool_size = NGX_CONF_UNSET_SIZE;

    h2scf->concurrent_streams = NGX_CONF_UNSET_UINT;
    h2scf->concurrent_pushes = NGX_CONF_UNSET_UINT;

    h2scf->preread_size = NGX_CONF_UNSET_SIZE;

    h2scf->streams_index_mask = NGX_CONF_UNSET_UINT;

    return h2scf;
}",307.0,327.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6089,377045,ngx_http_v2_merge_srv_conf,1,ngx_http_v2_merge_srv_conf,"char* ngx_http_v2_merge_srv_conf (ngx_conf_t*,void*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_v2_srv_conf_t *prev = parent;
    ngx_http_v2_srv_conf_t *conf = child;

    ngx_conf_merge_size_value(conf->pool_size, prev->pool_size, 4096);

    ngx_conf_merge_uint_value(conf->concurrent_streams,
                              prev->concurrent_streams, 128);
    ngx_conf_merge_uint_value(conf->concurrent_pushes,
                              prev->concurrent_pushes, 10);

    ngx_conf_merge_size_value(conf->preread_size, prev->preread_size, 65536);

    ngx_conf_merge_uint_value(conf->streams_index_mask,
                              prev->streams_index_mask, 32 - 1);

    return NGX_CONF_OK;
}",330.0,349.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6090,377052,ngx_http_v2_create_loc_conf,1,ngx_http_v2_create_loc_conf,void* ngx_http_v2_create_loc_conf (ngx_conf_t*),http\v2\ngx_http_v2_module.c,"static void *
ngx_http_v2_create_loc_conf(ngx_conf_t *cf)
{
    ngx_http_v2_loc_conf_t  *h2lcf;

    h2lcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_v2_loc_conf_t));
    if (h2lcf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     h2lcf->pushes = NULL;
     */

    h2lcf->chunk_size = NGX_CONF_UNSET_SIZE;

    h2lcf->push_preload = NGX_CONF_UNSET;
    h2lcf->push = NGX_CONF_UNSET;

    return h2lcf;
}",352.0,374.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6091,377057,ngx_http_v2_merge_loc_conf,1,ngx_http_v2_merge_loc_conf,"char* ngx_http_v2_merge_loc_conf (ngx_conf_t*,void*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_http_v2_loc_conf_t *prev = parent;
    ngx_http_v2_loc_conf_t *conf = child;

    ngx_conf_merge_size_value(conf->chunk_size, prev->chunk_size, 8 * 1024);

    ngx_conf_merge_value(conf->push, prev->push, 1);

    if (conf->push && conf->pushes == NULL) {
        conf->pushes = prev->pushes;
    }

    ngx_conf_merge_value(conf->push_preload, prev->push_preload, 0);

    return NGX_CONF_OK;
}",377.0,394.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6092,377064,ngx_http_v2_push,1,ngx_http_v2_push,"char* ngx_http_v2_push (ngx_conf_t*,ngx_command_t*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_push(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_http_v2_loc_conf_t *h2lcf = conf;

    ngx_str_t                         *value;
    ngx_http_complex_value_t          *cv;
    ngx_http_compile_complex_value_t   ccv;

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {

        if (h2lcf->pushes) {
            return ""\""off\"" parameter cannot be used with URI"";
        }

        if (h2lcf->push == 0) {
            return ""is duplicate"";
        }

        h2lcf->push = 0;
        return NGX_CONF_OK;
    }

    if (h2lcf->push == 0) {
        return ""URI cannot be used with \""off\"" parameter"";
    }

    h2lcf->push = 1;

    if (h2lcf->pushes == NULL) {
        h2lcf->pushes = ngx_array_create(cf->pool, 1,
                                         sizeof(ngx_http_complex_value_t));
        if (h2lcf->pushes == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    cv = ngx_array_push(h2lcf->pushes);
    if (c...",397.0,452.0,1.0,1.0,56.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6093,377071,ngx_http_v2_recv_buffer_size,1,ngx_http_v2_recv_buffer_size,"char* ngx_http_v2_recv_buffer_size (ngx_conf_t*,void*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_recv_buffer_size(ngx_conf_t *cf, void *post, void *data)
{
    size_t *sp = data;

    if (*sp <= 2 * NGX_HTTP_V2_STATE_BUFFER_SIZE) {
        return ""value is too small"";
    }

    return NGX_CONF_OK;
}",455.0,465.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6094,377078,ngx_http_v2_pool_size,1,ngx_http_v2_pool_size,"char* ngx_http_v2_pool_size (ngx_conf_t*,void*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_pool_size(ngx_conf_t *cf, void *post, void *data)
{
    size_t *sp = data;

    if (*sp < NGX_MIN_POOL_SIZE) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""the pool size must be no less than %uz"",
                           NGX_MIN_POOL_SIZE);

        return NGX_CONF_ERROR;
    }

    if (*sp % NGX_POOL_ALIGNMENT) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""the pool size must be a multiple of %uz"",
                           NGX_POOL_ALIGNMENT);

        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",468.0,490.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6095,377085,ngx_http_v2_preread_size,1,ngx_http_v2_preread_size,"char* ngx_http_v2_preread_size (ngx_conf_t*,void*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_preread_size(ngx_conf_t *cf, void *post, void *data)
{
    size_t *sp = data;

    if (*sp > NGX_HTTP_V2_MAX_WINDOW) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""the maximum body preread buffer size is %uz"",
                           NGX_HTTP_V2_MAX_WINDOW);

        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",493.0,507.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6096,377092,ngx_http_v2_streams_index_mask,1,ngx_http_v2_streams_index_mask,"char* ngx_http_v2_streams_index_mask (ngx_conf_t*,void*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_streams_index_mask(ngx_conf_t *cf, void *post, void *data)
{
    ngx_uint_t *np = data;

    ngx_uint_t  mask;

    mask = *np - 1;

    if (*np == 0 || (*np & mask)) {
        return ""must be a power of two"";
    }

    *np = mask;

    return NGX_CONF_OK;
}",510.0,526.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6097,377099,ngx_http_v2_chunk_size,1,ngx_http_v2_chunk_size,"char* ngx_http_v2_chunk_size (ngx_conf_t*,void*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_chunk_size(ngx_conf_t *cf, void *post, void *data)
{
    size_t *sp = data;

    if (*sp == 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""the http2 chunk size cannot be zero"");

        return NGX_CONF_ERROR;
    }

    if (*sp > NGX_HTTP_V2_MAX_FRAME_SIZE) {
        *sp = NGX_HTTP_V2_MAX_FRAME_SIZE;
    }

    return NGX_CONF_OK;
}",529.0,546.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6098,377106,ngx_http_v2_obsolete,1,ngx_http_v2_obsolete,"char* ngx_http_v2_obsolete (ngx_conf_t*,ngx_command_t*,void*)",http\v2\ngx_http_v2_module.c,"static char *
ngx_http_v2_obsolete(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_conf_deprecated_t  *d = cmd->post;

    ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                       ""the \""%s\"" directive is obsolete, ""
                       ""use the \""%s\"" directive instead"",
                       d->old_name, d->new_name);

    return NGX_CONF_OK;
}",549.0,560.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6099,378155,ngx_http_v2_table_account,1,ngx_http_v2_table_account,"ngx_int_t ngx_http_v2_table_account (ngx_http_v2_connection_t*,size_t)",http\v2\ngx_http_v2_table.c,"static ngx_int_t
ngx_http_v2_table_account(ngx_http_v2_connection_t *h2c, size_t size)
{
    ngx_http_v2_header_t  *entry;

    size += 32;

    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                   ""http2 table account: %uz free:%uz"",
                   size, h2c->hpack.free);

    if (size <= h2c->hpack.free) {
        h2c->hpack.free -= size;
        return NGX_OK;
    }

    if (size > h2c->hpack.size) {
        h2c->hpack.deleted = h2c->hpack.added;
        h2c->hpack.free = h2c->hpack.size;
        return NGX_DECLINED;
    }

    do {
        entry = h2c->hpack.entries[h2c->hpack.deleted++ % h2c->hpack.allocated];
        h2c->hpack.free += 32 + entry->name.len + entry->value.len;
    } while (size > h2c->hpack.free);

    h2c->hpack.free -= size;

    return NGX_OK;
}",302.0,332.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6100,379722,ngx_mail_block,1,ngx_mail_block,"char* ngx_mail_block (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail.c,"static char *
ngx_mail_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                        *rv;
    ngx_uint_t                   i, m, mi, s;
    ngx_conf_t                   pcf;
    ngx_array_t                  ports;
    ngx_mail_listen_t           *listen;
    ngx_mail_module_t           *module;
    ngx_mail_conf_ctx_t         *ctx;
    ngx_mail_core_srv_conf_t   **cscfp;
    ngx_mail_core_main_conf_t   *cmcf;

    if (*(ngx_mail_conf_ctx_t **) conf) {
        return ""is duplicate"";
    }

    /* the main mail context */

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_mail_conf_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    *(ngx_mail_conf_ctx_t **) conf = ctx;

    /* count the number of the mail modules and set up their indices */

    ngx_mail_max_module = ngx_count_modules(cf->cycle, NGX_MAIL_MODULE);


    /* the mail main_conf context, it is the same in the all mail contexts */

    ctx->main_conf = ngx_pcalloc(cf->pool,
        ...",66.0,221.0,1.0,1.0,156.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6101,379729,ngx_mail_add_ports,1,ngx_mail_add_ports,"ngx_int_t ngx_mail_add_ports (ngx_conf_t*,ngx_array_t*,ngx_mail_listen_t*)",mail\ngx_mail.c,"static ngx_int_t
ngx_mail_add_ports(ngx_conf_t *cf, ngx_array_t *ports,
    ngx_mail_listen_t *listen)
{
    in_port_t              p;
    ngx_uint_t             i;
    struct sockaddr       *sa;
    ngx_mail_conf_port_t  *port;
    ngx_mail_conf_addr_t  *addr;

    sa = listen->sockaddr;
    p = ngx_inet_get_port(sa);

    port = ports->elts;
    for (i = 0; i < ports->nelts; i++) {
        if (p == port[i].port && sa->sa_family == port[i].family) {

            /* a port is already in the port list */

            port = &port[i];
            goto found;
        }
    }

    /* add a port to the port list */

    port = ngx_array_push(ports);
    if (port == NULL) {
        return NGX_ERROR;
    }

    port->family = sa->sa_family;
    port->port = p;

    if (ngx_array_init(&port->addrs, cf->temp_pool, 2,
                       sizeof(ngx_mail_conf_addr_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

found:

    addr = ngx_array_push(&port->addrs);
    if (addr == N...",224.0,275.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6102,379736,ngx_mail_optimize_servers,1,ngx_mail_optimize_servers,"char* ngx_mail_optimize_servers (ngx_conf_t*,ngx_array_t*)",mail\ngx_mail.c,"static char *
ngx_mail_optimize_servers(ngx_conf_t *cf, ngx_array_t *ports)
{
    ngx_uint_t                 i, p, last, bind_wildcard;
    ngx_listening_t           *ls;
    ngx_mail_port_t           *mport;
    ngx_mail_conf_port_t      *port;
    ngx_mail_conf_addr_t      *addr;
    ngx_mail_core_srv_conf_t  *cscf;

    port = ports->elts;
    for (p = 0; p < ports->nelts; p++) {

        ngx_sort(port[p].addrs.elts, (size_t) port[p].addrs.nelts,
                 sizeof(ngx_mail_conf_addr_t), ngx_mail_cmp_conf_addrs);

        addr = port[p].addrs.elts;
        last = port[p].addrs.nelts;

        /*
         * if there is the binding to the ""*:port"" then we need to bind()
         * to the ""*:port"" only and ignore the other bindings
         */

        if (addr[last - 1].opt.wildcard) {
            addr[last - 1].opt.bind = 1;
            bind_wildcard = 1;

        } else {
            bind_wildcard = 0;
        }

        i = 0;

        while (i < last) {

            if (bi...",278.0,380.0,1.0,1.0,103.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
6103,379742,ngx_mail_add_addrs,1,ngx_mail_add_addrs,"ngx_int_t ngx_mail_add_addrs (ngx_conf_t*,ngx_mail_port_t*,ngx_mail_conf_addr_t*)",mail\ngx_mail.c,"static ngx_int_t
ngx_mail_add_addrs(ngx_conf_t *cf, ngx_mail_port_t *mport,
    ngx_mail_conf_addr_t *addr)
{
    ngx_uint_t           i;
    ngx_mail_in_addr_t  *addrs;
    struct sockaddr_in  *sin;

    mport->addrs = ngx_pcalloc(cf->pool,
                               mport->naddrs * sizeof(ngx_mail_in_addr_t));
    if (mport->addrs == NULL) {
        return NGX_ERROR;
    }

    addrs = mport->addrs;

    for (i = 0; i < mport->naddrs; i++) {

        sin = (struct sockaddr_in *) addr[i].opt.sockaddr;
        addrs[i].addr = sin->sin_addr.s_addr;

        addrs[i].conf.ctx = addr[i].opt.ctx;
#if (NGX_MAIL_SSL)
        addrs[i].conf.ssl = addr[i].opt.ssl;
#endif
        addrs[i].conf.proxy_protocol = addr[i].opt.proxy_protocol;
        addrs[i].conf.addr_text = addr[i].opt.addr_text;
    }

    return NGX_OK;
}",383.0,413.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6104,379749,ngx_mail_cmp_conf_addrs,1,ngx_mail_cmp_conf_addrs,"ngx_int_t ngx_mail_cmp_conf_addrs (void*,void*)",mail\ngx_mail.c,"static ngx_int_t
ngx_mail_cmp_conf_addrs(const void *one, const void *two)
{
    ngx_mail_conf_addr_t  *first, *second;

    first = (ngx_mail_conf_addr_t *) one;
    second = (ngx_mail_conf_addr_t *) two;

    if (first->opt.wildcard) {
        /* a wildcard must be the last resort, shift it to the end */
        return 1;
    }

    if (second->opt.wildcard) {
        /* a wildcard must be the last resort, shift it to the end */
        return -1;
    }

    if (first->opt.bind && !second->opt.bind) {
        /* shift explicit bind()ed addresses to the start */
        return -1;
    }

    if (!first->opt.bind && second->opt.bind) {
        /* shift explicit bind()ed addresses to the start */
        return 1;
    }

    /* do not sort by default */

    return 0;
}",453.0,484.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6105,381065,ngx_mail_init_session_pt,1,ngx_mail_init_session_pt,"void ngx_mail_init_session_pt (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail.h,"typedef void (*ngx_mail_init_session_pt)(ngx_mail_session_t *s,
    ngx_connection_t *c);",318.0,319.0,14.0,24.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6106,381071,ngx_mail_init_protocol_pt,1,ngx_mail_init_protocol_pt,void ngx_mail_init_protocol_pt (ngx_event_t*),mail\ngx_mail.h,typedef void (*ngx_mail_init_protocol_pt)(ngx_event_t *rev);,320.0,320.0,14.0,59.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6107,381076,ngx_mail_auth_state_pt,1,ngx_mail_auth_state_pt,void ngx_mail_auth_state_pt (ngx_event_t*),mail\ngx_mail.h,typedef void (*ngx_mail_auth_state_pt)(ngx_event_t *rev);,321.0,321.0,14.0,56.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6108,381081,ngx_mail_parse_command_pt,1,ngx_mail_parse_command_pt,ngx_int_t ngx_mail_parse_command_pt (ngx_mail_session_t*),mail\ngx_mail.h,typedef ngx_int_t (*ngx_mail_parse_command_pt)(ngx_mail_session_t *s);,322.0,322.0,19.0,69.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6109,381105,create_main_conf,1,ngx_mail_module_t.create_main_conf,void* ngx_mail_module_t.create_main_conf (ngx_conf_t*),mail\ngx_mail.h,void                       *(*create_main_conf)(ngx_conf_t *cf);,344.0,344.0,32.0,67.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6110,381110,init_main_conf,1,ngx_mail_module_t.init_main_conf,"char* ngx_mail_module_t.init_main_conf (ngx_conf_t*,void*)",mail\ngx_mail.h,"char                       *(*init_main_conf)(ngx_conf_t *cf, void *conf);",345.0,345.0,32.0,77.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
6111,381116,create_srv_conf,1,ngx_mail_module_t.create_srv_conf,void* ngx_mail_module_t.create_srv_conf (ngx_conf_t*),mail\ngx_mail.h,void                       *(*create_srv_conf)(ngx_conf_t *cf);,347.0,347.0,32.0,66.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6112,381121,merge_srv_conf,1,ngx_mail_module_t.merge_srv_conf,"char* ngx_mail_module_t.merge_srv_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail.h,"char                       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev,
                                                  void *conf);",348.0,349.0,32.0,61.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6113,381129,ngx_mail_init_connection,1,ngx_mail_init_connection,void ngx_mail_init_connection (ngx_connection_t*),mail\ngx_mail_handler.c,"void
ngx_mail_init_connection(ngx_connection_t *c)
{
    size_t                     len;
    ngx_uint_t                 i;
    ngx_event_t               *rev;
    ngx_mail_port_t           *port;
    struct sockaddr           *sa;
    struct sockaddr_in        *sin;
    ngx_mail_log_ctx_t        *ctx;
    ngx_mail_in_addr_t        *addr;
    ngx_mail_session_t        *s;
    ngx_mail_addr_conf_t      *addr_conf;
    ngx_mail_core_srv_conf_t  *cscf;
    u_char                     text[NGX_SOCKADDR_STRLEN];
#if (NGX_HAVE_INET6)
    struct sockaddr_in6       *sin6;
    ngx_mail_in6_addr_t       *addr6;
#endif


    /* find the server configuration for the address:port */

    port = c->listening->servers;

    if (port->naddrs > 1) {

        /*
         * There are several addresses on this port and one of them
         * is the ""*:port"" wildcard so getsockname() is needed to determine
         * the server address.
         *
         * AcceptEx() already gave this address.
         ...",26.0,194.0,1.0,1.0,169.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6114,381134,ngx_mail_salt,1,ngx_mail_salt,"ngx_int_t ngx_mail_salt (ngx_mail_session_t*,ngx_connection_t*,ngx_mail_core_srv_conf_t*)",mail\ngx_mail_handler.c,"ngx_int_t
ngx_mail_salt(ngx_mail_session_t *s, ngx_connection_t *c,
    ngx_mail_core_srv_conf_t *cscf)
{
    s->salt.data = ngx_pnalloc(c->pool,
                               sizeof("" <18446744073709551616.@>"" CRLF) - 1
                               + NGX_TIME_T_LEN
                               + cscf->server_name.len);
    if (s->salt.data == NULL) {
        return NGX_ERROR;
    }

    s->salt.len = ngx_sprintf(s->salt.data, ""<%ul.%T@%V>"" CRLF,
                              ngx_random(), ngx_time(), &cscf->server_name)
                  - s->salt.data;

    return NGX_OK;
}",480.0,497.0,1.0,1.0,18.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6115,381141,ngx_mail_auth_plain,1,ngx_mail_auth_plain,"ngx_int_t ngx_mail_auth_plain (ngx_mail_session_t*,ngx_connection_t*,ngx_uint_t)",mail\ngx_mail_handler.c,"ngx_int_t
ngx_mail_auth_plain(ngx_mail_session_t *s, ngx_connection_t *c, ngx_uint_t n)
{
    u_char     *p, *last;
    ngx_str_t  *arg, plain;

    arg = s->args.elts;

#if (NGX_DEBUG_MAIL_PASSWD)
    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail auth plain: \""%V\"""", &arg[n]);
#endif

    plain.data = ngx_pnalloc(c->pool, ngx_base64_decoded_length(arg[n].len));
    if (plain.data == NULL) {
        return NGX_ERROR;
    }

    if (ngx_decode_base64(&plain, &arg[n]) != NGX_OK) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
            ""client sent invalid base64 encoding in AUTH PLAIN command"");
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    p = plain.data;
    last = p + plain.len;

    while (p < last && *p++) { /* void */ }

    if (p == last) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
                      ""client sent invalid login in AUTH PLAIN command"");
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    s->login.data = p;

 ...",523.0,579.0,1.0,1.0,57.0,0,0,0,0,3,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6116,381148,ngx_mail_auth_login_username,1,ngx_mail_auth_login_username,"ngx_int_t ngx_mail_auth_login_username (ngx_mail_session_t*,ngx_connection_t*,ngx_uint_t)",mail\ngx_mail_handler.c,"ngx_int_t
ngx_mail_auth_login_username(ngx_mail_session_t *s, ngx_connection_t *c,
    ngx_uint_t n)
{
    ngx_str_t  *arg;

    arg = s->args.elts;

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail auth login username: \""%V\"""", &arg[n]);

    s->login.data = ngx_pnalloc(c->pool, ngx_base64_decoded_length(arg[n].len));
    if (s->login.data == NULL) {
        return NGX_ERROR;
    }

    if (ngx_decode_base64(&s->login, &arg[n]) != NGX_OK) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
            ""client sent invalid base64 encoding in AUTH LOGIN command"");
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail auth login username: \""%V\"""", &s->login);

    return NGX_OK;
}",582.0,608.0,1.0,1.0,27.0,0,0,0,0,3,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6117,381155,ngx_mail_auth_login_password,1,ngx_mail_auth_login_password,"ngx_int_t ngx_mail_auth_login_password (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_handler.c,"ngx_int_t
ngx_mail_auth_login_password(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t  *arg;

    arg = s->args.elts;

#if (NGX_DEBUG_MAIL_PASSWD)
    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail auth login password: \""%V\"""", &arg[0]);
#endif

    s->passwd.data = ngx_pnalloc(c->pool,
                                 ngx_base64_decoded_length(arg[0].len));
    if (s->passwd.data == NULL) {
        return NGX_ERROR;
    }

    if (ngx_decode_base64(&s->passwd, &arg[0]) != NGX_OK) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
            ""client sent invalid base64 encoding in AUTH LOGIN command"");
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

#if (NGX_DEBUG_MAIL_PASSWD)
    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail auth login password: \""%V\"""", &s->passwd);
#endif

    return NGX_DONE;
}",611.0,641.0,1.0,1.0,31.0,0,0,0,0,3,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6118,381161,ngx_mail_auth_cram_md5_salt,1,ngx_mail_auth_cram_md5_salt,"ngx_int_t ngx_mail_auth_cram_md5_salt (ngx_mail_session_t*,ngx_connection_t*,char*,size_t)",mail\ngx_mail_handler.c,"ngx_int_t
ngx_mail_auth_cram_md5_salt(ngx_mail_session_t *s, ngx_connection_t *c,
    char *prefix, size_t len)
{
    u_char      *p;
    ngx_str_t    salt;
    ngx_uint_t   n;

    p = ngx_pnalloc(c->pool, len + ngx_base64_encoded_length(s->salt.len) + 2);
    if (p == NULL) {
        return NGX_ERROR;
    }

    salt.data = ngx_cpymem(p, prefix, len);
    s->salt.len -= 2;

    ngx_encode_base64(&salt, &s->salt);

    s->salt.len += 2;
    n = len + salt.len;
    p[n++] = CR; p[n++] = LF;

    s->out.len = n;
    s->out.data = p;

    return NGX_OK;
}",644.0,670.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
6119,381169,ngx_mail_auth_cram_md5,1,ngx_mail_auth_cram_md5,"ngx_int_t ngx_mail_auth_cram_md5 (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_handler.c,"ngx_int_t
ngx_mail_auth_cram_md5(ngx_mail_session_t *s, ngx_connection_t *c)
{
    u_char     *p, *last;
    ngx_str_t  *arg;

    arg = s->args.elts;

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail auth cram-md5: \""%V\"""", &arg[0]);

    s->login.data = ngx_pnalloc(c->pool, ngx_base64_decoded_length(arg[0].len));
    if (s->login.data == NULL) {
        return NGX_ERROR;
    }

    if (ngx_decode_base64(&s->login, &arg[0]) != NGX_OK) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
            ""client sent invalid base64 encoding in AUTH CRAM-MD5 command"");
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    p = s->login.data;
    last = p + s->login.len;

    while (p < last) {
        if (*p++ == ' ') {
            s->login.len = p - s->login.data - 1;
            s->passwd.len = last - p;
            s->passwd.data = p;
            break;
        }
    }

    if (s->passwd.len != 32) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
            ""c...",673.0,719.0,1.0,1.0,47.0,0,0,0,0,3,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6120,381175,ngx_mail_auth_external,1,ngx_mail_auth_external,"ngx_int_t ngx_mail_auth_external (ngx_mail_session_t*,ngx_connection_t*,ngx_uint_t)",mail\ngx_mail_handler.c,"ngx_int_t
ngx_mail_auth_external(ngx_mail_session_t *s, ngx_connection_t *c,
    ngx_uint_t n)
{
    ngx_str_t  *arg, external;

    arg = s->args.elts;

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail auth external: \""%V\"""", &arg[n]);

    external.data = ngx_pnalloc(c->pool, ngx_base64_decoded_length(arg[n].len));
    if (external.data == NULL) {
        return NGX_ERROR;
    }

    if (ngx_decode_base64(&external, &arg[n]) != NGX_OK) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0,
            ""client sent invalid base64 encoding in AUTH EXTERNAL command"");
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    s->login.len = external.len;
    s->login.data = external.data;

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail auth external: \""%V\"""", &s->login);

    s->auth_method = NGX_MAIL_AUTH_EXTERNAL;

    return NGX_DONE;
}",722.0,753.0,1.0,1.0,32.0,0,0,0,0,3,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6121,381182,ngx_mail_auth_parse,1,ngx_mail_auth_parse,"ngx_int_t ngx_mail_auth_parse (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_parse.c,"ngx_int_t
ngx_mail_auth_parse(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t                 *arg;

#if (NGX_MAIL_SSL)
    if (ngx_mail_starttls_only(s, c)) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }
#endif

    if (s->args.nelts == 0) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    arg = s->args.elts;

    if (arg[0].len == 5) {

        if (ngx_strncasecmp(arg[0].data, (u_char *) ""LOGIN"", 5) == 0) {

            if (s->args.nelts == 1) {
                return NGX_MAIL_AUTH_LOGIN;
            }

            if (s->args.nelts == 2) {
                return NGX_MAIL_AUTH_LOGIN_USERNAME;
            }

            return NGX_MAIL_PARSE_INVALID_COMMAND;
        }

        if (ngx_strncasecmp(arg[0].data, (u_char *) ""PLAIN"", 5) == 0) {

            if (s->args.nelts == 1) {
                return NGX_MAIL_AUTH_PLAIN;
            }

            if (s->args.nelts == 2) {
                return ngx_mail_auth_plain(s, c, 1);
            }
        }

   ...",903.0,975.0,1.0,1.0,73.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6122,381188,ngx_mail_send,1,ngx_mail_send,void ngx_mail_send (ngx_event_t*),mail\ngx_mail_handler.c,"void
ngx_mail_send(ngx_event_t *wev)
{
    ngx_int_t                  n;
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_mail_core_srv_conf_t  *cscf;

    c = wev->data;
    s = c->data;

    if (wev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_mail_close_connection(c);
        return;
    }

    if (s->out.len == 0) {
        if (ngx_handle_write_event(c->write, 0) != NGX_OK) {
            ngx_mail_close_connection(c);
        }

        return;
    }

    n = c->send(c, s->out.data, s->out.len);

    if (n > 0) {
        s->out.data += n;
        s->out.len -= n;

        if (s->out.len != 0) {
            goto again;
        }

        if (wev->timer_set) {
            ngx_del_timer(wev);
        }

        if (s->quit) {
            ngx_mail_close_connection(c);
            return;
        }

        if (s->blocked) {
            c->read->handler(c->read);
        }

...",756.0,825.0,1.0,1.0,70.0,0,0,0,0,5,0,1,1,0,0,,0,0,2,1,1,void
6123,381193,ngx_mail_read_command,1,ngx_mail_read_command,"ngx_int_t ngx_mail_read_command (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_handler.c,"ngx_int_t
ngx_mail_read_command(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ssize_t                    n;
    ngx_int_t                  rc;
    ngx_str_t                  l;
    ngx_mail_core_srv_conf_t  *cscf;

    if (s->buffer->last < s->buffer->end) {

        n = c->recv(c, s->buffer->last, s->buffer->end - s->buffer->last);

        if (n == NGX_ERROR || n == 0) {
            ngx_mail_close_connection(c);
            return NGX_ERROR;
        }

        if (n > 0) {
            s->buffer->last += n;
        }

        if (n == NGX_AGAIN) {
            if (s->buffer->pos == s->buffer->last) {
                return NGX_AGAIN;
            }
        }
    }

    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

    rc = cscf->protocol->parse_command(s);

    if (rc == NGX_AGAIN) {

        if (s->buffer->last < s->buffer->end) {
            return rc;
        }

        l.len = s->buffer->last - s->buffer->start;
        l.data = s->buffer->start;

        ngx...",828.0,900.0,1.0,1.0,73.0,0,0,0,0,3,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6124,381199,ngx_mail_auth,1,ngx_mail_auth,"void ngx_mail_auth (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_handler.c,"void
ngx_mail_auth(ngx_mail_session_t *s, ngx_connection_t *c)
{
    s->args.nelts = 0;

    if (s->buffer->pos == s->buffer->last) {
        s->buffer->pos = s->buffer->start;
        s->buffer->last = s->buffer->start;
    }

    s->state = 0;

    if (c->read->timer_set) {
        ngx_del_timer(c->read);
    }

    s->login_attempt++;

    ngx_mail_auth_http_init(s);
}",903.0,922.0,1.0,1.0,20.0,0,0,0,0,3,0,1,1,0,0,,0,0,4,2,2,void
6125,381205,ngx_mail_close_connection,1,ngx_mail_close_connection,void ngx_mail_close_connection (ngx_connection_t*),mail\ngx_mail_handler.c,"void
ngx_mail_close_connection(ngx_connection_t *c)
{
    ngx_pool_t  *pool;

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""close mail connection: %d"", c->fd);

#if (NGX_MAIL_SSL)

    if (c->ssl) {
        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
            c->ssl->handler = ngx_mail_close_connection;
            return;
        }
    }

#endif

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
#endif

    c->destroyed = 1;

    pool = c->pool;

    ngx_close_connection(c);

    ngx_destroy_pool(pool);
}",939.0,969.0,1.0,1.0,31.0,0,0,0,0,14,0,1,1,0,0,,0,0,2,1,1,void
6126,381210,ngx_mail_session_internal_server_error,1,ngx_mail_session_internal_server_error,void ngx_mail_session_internal_server_error (ngx_mail_session_t*),mail\ngx_mail_handler.c,"void
ngx_mail_session_internal_server_error(ngx_mail_session_t *s)
{
    ngx_mail_core_srv_conf_t  *cscf;

    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

    s->out = cscf->protocol->internal_server_error;
    s->quit = 1;

    ngx_mail_send(s->connection->write);
}",925.0,936.0,1.0,1.0,12.0,0,0,0,0,15,0,1,1,0,0,,0,0,2,1,1,void
6127,381215,ngx_mail_log_error,1,ngx_mail_log_error,"u_char* ngx_mail_log_error (ngx_log_t*,u_char*,size_t)",mail\ngx_mail_handler.c,"u_char *
ngx_mail_log_error(ngx_log_t *log, u_char *buf, size_t len)
{
    u_char              *p;
    ngx_mail_session_t  *s;
    ngx_mail_log_ctx_t  *ctx;

    if (log->action) {
        p = ngx_snprintf(buf, len, "" while %s"", log->action);
        len -= p - buf;
        buf = p;
    }

    ctx = log->data;

    p = ngx_snprintf(buf, len, "", client: %V"", ctx->client);
    len -= p - buf;
    buf = p;

    s = ctx->session;

    if (s == NULL) {
        return p;
    }

    p = ngx_snprintf(buf, len, ""%s, server: %V"",
                     s->starttls ? "" using starttls"" : """",
                     s->addr_text);
    len -= p - buf;
    buf = p;

    if (s->login.len == 0) {
        return p;
    }

    p = ngx_snprintf(buf, len, "", login: \""%V\"""", &s->login);
    len -= p - buf;
    buf = p;

    if (s->proxy == NULL) {
        return p;
    }

    p = ngx_snprintf(buf, len, "", upstream: %V"", s->proxy->upstream.name);

    return p;
}",972.0,1018.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6128,381222,ngx_mail_capabilities,1,ngx_mail_capabilities,"char* ngx_mail_capabilities (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_core_module.c,"char *
ngx_mail_capabilities(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char  *p = conf;

    ngx_str_t    *c, *value;
    ngx_uint_t    i;
    ngx_array_t  *a;

    a = (ngx_array_t *) (p + cmd->offset);

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {
        c = ngx_array_push(a);
        if (c == NULL) {
            return NGX_CONF_ERROR;
        }

        *c = value[i];
    }

    return NGX_CONF_OK;
}",670.0,693.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6129,381229,ngx_mail_proxy_init,1,ngx_mail_proxy_init,"void ngx_mail_proxy_init (ngx_mail_session_t*,ngx_addr_t*)",mail\ngx_mail_proxy_module.c,"void
ngx_mail_proxy_init(ngx_mail_session_t *s, ngx_addr_t *peer)
{
    ngx_int_t                  rc;
    ngx_mail_proxy_ctx_t      *p;
    ngx_mail_proxy_conf_t     *pcf;
    ngx_mail_core_srv_conf_t  *cscf;

    s->connection->log->action = ""connecting to upstream"";

    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

    p = ngx_pcalloc(s->connection->pool, sizeof(ngx_mail_proxy_ctx_t));
    if (p == NULL) {
        ngx_mail_session_internal_server_error(s);
        return;
    }

    s->proxy = p;

    p->upstream.sockaddr = peer->sockaddr;
    p->upstream.socklen = peer->socklen;
    p->upstream.name = &peer->name;
    p->upstream.get = ngx_event_get_peer;
    p->upstream.log = s->connection->log;
    p->upstream.log_error = NGX_ERROR_ERR;

    rc = ngx_event_connect_peer(&p->upstream);

    if (rc == NGX_ERROR || rc == NGX_BUSY || rc == NGX_DECLINED) {
        ngx_mail_proxy_internal_server_error(s);
        return;
    }

    ngx_add_timer(p->upstream.connecti...",128.0,206.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6130,381235,ngx_mail_auth_http_init,1,ngx_mail_auth_http_init,void ngx_mail_auth_http_init (ngx_mail_session_t*),mail\ngx_mail_auth_http_module.c,"void
ngx_mail_auth_http_init(ngx_mail_session_t *s)
{
    ngx_int_t                   rc;
    ngx_pool_t                 *pool;
    ngx_mail_auth_http_ctx_t   *ctx;
    ngx_mail_auth_http_conf_t  *ahcf;

    s->connection->log->action = ""in http auth state"";

    pool = ngx_create_pool(2048, s->connection->log);
    if (pool == NULL) {
        ngx_mail_session_internal_server_error(s);
        return;
    }

    ctx = ngx_pcalloc(pool, sizeof(ngx_mail_auth_http_ctx_t));
    if (ctx == NULL) {
        ngx_destroy_pool(pool);
        ngx_mail_session_internal_server_error(s);
        return;
    }

    ctx->pool = pool;

    ahcf = ngx_mail_get_module_srv_conf(s, ngx_mail_auth_http_module);

    ctx->request = ngx_mail_auth_http_create_request(s, pool, ahcf);
    if (ctx->request == NULL) {
        ngx_destroy_pool(ctx->pool);
        ngx_mail_session_internal_server_error(s);
        return;
    }

    ngx_mail_set_ctx(s, ctx, ngx_mail_auth_http_module);

    ctx->peer.sockaddr = ahc...",161.0,232.0,1.0,1.0,72.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6131,381240,ngx_mail_realip_handler,1,ngx_mail_realip_handler,ngx_int_t ngx_mail_realip_handler (ngx_mail_session_t*),mail\ngx_mail_realip_module.c,"ngx_int_t
ngx_mail_realip_handler(ngx_mail_session_t *s)
{
    ngx_addr_t                   addr;
    ngx_connection_t            *c;
    ngx_mail_realip_srv_conf_t  *rscf;

    rscf = ngx_mail_get_module_srv_conf(s, ngx_mail_realip_module);

    if (rscf->from == NULL) {
        return NGX_OK;
    }

    c = s->connection;

    if (c->proxy_protocol == NULL) {
        return NGX_OK;
    }

    if (ngx_cidr_match(c->sockaddr, rscf->from) != NGX_OK) {
        return NGX_OK;
    }

    if (ngx_parse_addr(c->pool, &addr, c->proxy_protocol->src_addr.data,
                       c->proxy_protocol->src_addr.len)
        != NGX_OK)
    {
        return NGX_OK;
    }

    ngx_inet_set_port(addr.sockaddr, c->proxy_protocol->src_port);

    return ngx_mail_realip_set_addr(s, &addr);
}",67.0,100.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6132,381275,ngx_mail_auth_http_handler_pt,1,ngx_mail_auth_http_handler_pt,"void ngx_mail_auth_http_handler_pt (ngx_mail_session_t*,ngx_mail_auth_http_ctx_t*)",mail\ngx_mail_auth_http_module.c,"typedef void (*ngx_mail_auth_http_handler_pt)(ngx_mail_session_t *s,
    ngx_mail_auth_http_ctx_t *ctx);",34.0,35.0,14.0,34.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6133,381298,ngx_mail_auth_http_write_handler,1,ngx_mail_auth_http_write_handler,void ngx_mail_auth_http_write_handler (ngx_event_t*),mail\ngx_mail_auth_http_module.c,"static void
ngx_mail_auth_http_write_handler(ngx_event_t *wev)
{
    ssize_t                     n, size;
    ngx_connection_t           *c;
    ngx_mail_session_t         *s;
    ngx_mail_auth_http_ctx_t   *ctx;
    ngx_mail_auth_http_conf_t  *ahcf;

    c = wev->data;
    s = c->data;

    ctx = ngx_mail_get_module_ctx(s, ngx_mail_auth_http_module);

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, wev->log, 0,
                   ""mail auth http write handler"");

    if (wev->timedout) {
        ngx_log_error(NGX_LOG_ERR, wev->log, NGX_ETIMEDOUT,
                      ""auth http server %V timed out"", ctx->peer.name);
        ngx_close_connection(c);
        ngx_destroy_pool(ctx->pool);
        ngx_mail_session_internal_server_error(s);
        return;
    }

    size = ctx->request->last - ctx->request->pos;

    n = ngx_send(c, ctx->request->pos, size);

    if (n == NGX_ERROR) {
        ngx_close_connection(c);
        ngx_destroy_pool(ctx->pool);
        ngx_mail_session_internal_server_...",235.0,296.0,1.0,1.0,62.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6134,381303,ngx_mail_auth_http_read_handler,1,ngx_mail_auth_http_read_handler,void ngx_mail_auth_http_read_handler (ngx_event_t*),mail\ngx_mail_auth_http_module.c,"static void
ngx_mail_auth_http_read_handler(ngx_event_t *rev)
{
    ssize_t                     n, size;
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_mail_auth_http_ctx_t  *ctx;

    c = rev->data;
    s = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
                   ""mail auth http read handler"");

    ctx = ngx_mail_get_module_ctx(s, ngx_mail_auth_http_module);

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_ERR, rev->log, NGX_ETIMEDOUT,
                      ""auth http server %V timed out"", ctx->peer.name);
        ngx_close_connection(c);
        ngx_destroy_pool(ctx->pool);
        ngx_mail_session_internal_server_error(s);
        return;
    }

    if (ctx->response == NULL) {
        ctx->response = ngx_create_temp_buf(ctx->pool, 1024);
        if (ctx->response == NULL) {
            ngx_close_connection(c);
            ngx_destroy_pool(ctx->pool);
            ngx_mail_session_internal_server_error(s);
            re...",299.0,352.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6135,381308,ngx_mail_auth_http_ignore_status_line,1,ngx_mail_auth_http_ignore_status_line,"void ngx_mail_auth_http_ignore_status_line (ngx_mail_session_t*,ngx_mail_auth_http_ctx_t*)",mail\ngx_mail_auth_http_module.c,"static void
ngx_mail_auth_http_ignore_status_line(ngx_mail_session_t *s,
    ngx_mail_auth_http_ctx_t *ctx)
{
    u_char  *p, ch;
    enum  {
        sw_start = 0,
        sw_H,
        sw_HT,
        sw_HTT,
        sw_HTTP,
        sw_skip,
        sw_almost_done
    } state;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
                   ""mail auth http process status line"");

    state = ctx->state;

    for (p = ctx->response->pos; p < ctx->response->last; p++) {
        ch = *p;

        switch (state) {

        /* ""HTTP/"" */
        case sw_start:
            if (ch == 'H') {
                state = sw_H;
                break;
            }
            goto next;

        case sw_H:
            if (ch == 'T') {
                state = sw_HT;
                break;
            }
            goto next;

        case sw_HT:
            if (ch == 'T') {
                state = sw_HTT;
                break;
            }
            goto next;

        case sw...",355.0,459.0,1.0,1.0,105.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6136,381314,ngx_mail_auth_http_process_headers,1,ngx_mail_auth_http_process_headers,"void ngx_mail_auth_http_process_headers (ngx_mail_session_t*,ngx_mail_auth_http_ctx_t*)",mail\ngx_mail_auth_http_module.c,"static void
ngx_mail_auth_http_process_headers(ngx_mail_session_t *s,
    ngx_mail_auth_http_ctx_t *ctx)
{
    u_char      *p;
    time_t       timer;
    size_t       len, size;
    ngx_int_t    rc, port, n;
    ngx_addr_t  *peer;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
                   ""mail auth http process headers"");

    for ( ;; ) {
        rc = ngx_mail_auth_http_parse_header_line(s, ctx);

        if (rc == NGX_OK) {

#if (NGX_DEBUG)
            {
            ngx_str_t  key, value;

            key.len = ctx->header_name_end - ctx->header_name_start;
            key.data = ctx->header_name_start;
            value.len = ctx->header_end - ctx->header_start;
            value.data = ctx->header_start;

            ngx_log_debug2(NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
                           ""mail auth http header: \""%V: %V\"""",
                           &key, &value);
            }
#endif

            len = ctx->header_name_end - ctx->header_na...",462.0,855.0,1.0,1.0,394.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6137,381320,ngx_mail_auth_sleep_handler,1,ngx_mail_auth_sleep_handler,void ngx_mail_auth_sleep_handler (ngx_event_t*),mail\ngx_mail_auth_http_module.c,"static void
ngx_mail_auth_sleep_handler(ngx_event_t *rev)
{
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_mail_core_srv_conf_t  *cscf;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, ""mail auth sleep handler"");

    c = rev->data;
    s = c->data;

    if (rev->timedout) {

        rev->timedout = 0;

        if (s->auth_wait) {
            s->auth_wait = 0;
            ngx_mail_auth_http_init(s);
            return;
        }

        cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

        rev->handler = cscf->protocol->auth_state;

        s->mail_state = 0;
        s->auth_method = NGX_MAIL_AUTH_PLAIN;

        c->log->action = ""in auth state"";

        ngx_mail_send(c->write);

        if (c->destroyed) {
            return;
        }

        ngx_add_timer(rev, cscf->timeout);

        if (rev->ready) {
            rev->handler(rev);
            return;
        }

        if (ngx_handle_read_event(rev, 0) != NGX_OK) {
          ...",858.0,914.0,1.0,1.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6138,381325,ngx_mail_auth_http_parse_header_line,1,ngx_mail_auth_http_parse_header_line,"ngx_int_t ngx_mail_auth_http_parse_header_line (ngx_mail_session_t*,ngx_mail_auth_http_ctx_t*)",mail\ngx_mail_auth_http_module.c,"static ngx_int_t
ngx_mail_auth_http_parse_header_line(ngx_mail_session_t *s,
    ngx_mail_auth_http_ctx_t *ctx)
{
    u_char      c, ch, *p;
    enum {
        sw_start = 0,
        sw_name,
        sw_space_before_value,
        sw_value,
        sw_space_after_value,
        sw_almost_done,
        sw_header_almost_done
    } state;

    state = ctx->state;

    for (p = ctx->response->pos; p < ctx->response->last; p++) {
        ch = *p;

        switch (state) {

        /* first char */
        case sw_start:

            switch (ch) {
            case CR:
                ctx->header_end = p;
                state = sw_header_almost_done;
                break;
            case LF:
                ctx->header_end = p;
                goto header_done;
            default:
                state = sw_name;
                ctx->header_name_start = p;

                c = (u_char) (ch | 0x20);
                if (c >= 'a' && c <= 'z') {
                    break;
                }
...",917.0,1097.0,1.0,1.0,181.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6139,381331,ngx_mail_auth_http_block_read,1,ngx_mail_auth_http_block_read,void ngx_mail_auth_http_block_read (ngx_event_t*),mail\ngx_mail_auth_http_module.c,"static void
ngx_mail_auth_http_block_read(ngx_event_t *rev)
{
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_mail_auth_http_ctx_t  *ctx;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
                   ""mail auth http block read"");

    if (ngx_handle_read_event(rev, 0) != NGX_OK) {
        c = rev->data;
        s = c->data;

        ctx = ngx_mail_get_module_ctx(s, ngx_mail_auth_http_module);

        ngx_close_connection(ctx->peer.connection);
        ngx_destroy_pool(ctx->pool);
        ngx_mail_session_internal_server_error(s);
    }
}",1100.0,1120.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6140,381336,ngx_mail_auth_http_dummy_handler,1,ngx_mail_auth_http_dummy_handler,void ngx_mail_auth_http_dummy_handler (ngx_event_t*),mail\ngx_mail_auth_http_module.c,"static void
ngx_mail_auth_http_dummy_handler(ngx_event_t *ev)
{
    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, ev->log, 0,
                   ""mail auth http dummy handler"");
}",1123.0,1128.0,1.0,1.0,6.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6141,381341,ngx_mail_auth_http_create_request,1,ngx_mail_auth_http_create_request,"ngx_buf_t* ngx_mail_auth_http_create_request (ngx_mail_session_t*,ngx_pool_t*,ngx_mail_auth_http_conf_t*)",mail\ngx_mail_auth_http_module.c,"static ngx_buf_t *
ngx_mail_auth_http_create_request(ngx_mail_session_t *s, ngx_pool_t *pool,
    ngx_mail_auth_http_conf_t *ahcf)
{
    size_t                     len;
    ngx_buf_t                 *b;
    ngx_str_t                  login, passwd;
    ngx_connection_t          *c;
#if (NGX_MAIL_SSL)
    ngx_str_t                  verify, subject, issuer, serial, fingerprint,
                               raw_cert, cert;
    ngx_mail_ssl_conf_t       *sslcf;
#endif
    ngx_mail_core_srv_conf_t  *cscf;

    if (ngx_mail_auth_http_escape(pool, &s->login, &login) != NGX_OK) {
        return NULL;
    }

    if (ngx_mail_auth_http_escape(pool, &s->passwd, &passwd) != NGX_OK) {
        return NULL;
    }

    c = s->connection;

#if (NGX_MAIL_SSL)

    sslcf = ngx_mail_get_module_srv_conf(s, ngx_mail_ssl_module);

    if (c->ssl && sslcf->verify) {

        /* certificate details */

        if (ngx_ssl_get_client_verify(c, pool, &verify) != NGX_OK) {
            return NULL;
        }
...",1131.0,1435.0,1.0,1.0,305.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_buf_t
6142,381348,ngx_mail_auth_http_escape,1,ngx_mail_auth_http_escape,"ngx_int_t ngx_mail_auth_http_escape (ngx_pool_t*,ngx_str_t*,ngx_str_t*)",mail\ngx_mail_auth_http_module.c,"static ngx_int_t
ngx_mail_auth_http_escape(ngx_pool_t *pool, ngx_str_t *text, ngx_str_t *escaped)
{
    u_char     *p;
    uintptr_t   n;

    n = ngx_escape_uri(NULL, text->data, text->len, NGX_ESCAPE_MAIL_AUTH);

    if (n == 0) {
        *escaped = *text;
        return NGX_OK;
    }

    escaped->len = text->len + n * 2;

    p = ngx_pnalloc(pool, escaped->len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    (void) ngx_escape_uri(p, text->data, text->len, NGX_ESCAPE_MAIL_AUTH);

    escaped->data = p;

    return NGX_OK;
}",1438.0,1463.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6143,381355,ngx_mail_auth_http_create_conf,1,ngx_mail_auth_http_create_conf,void* ngx_mail_auth_http_create_conf (ngx_conf_t*),mail\ngx_mail_auth_http_module.c,"static void *
ngx_mail_auth_http_create_conf(ngx_conf_t *cf)
{
    ngx_mail_auth_http_conf_t  *ahcf;

    ahcf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_auth_http_conf_t));
    if (ahcf == NULL) {
        return NULL;
    }

    ahcf->timeout = NGX_CONF_UNSET_MSEC;
    ahcf->pass_client_cert = NGX_CONF_UNSET;

    ahcf->file = cf->conf_file->file.name.data;
    ahcf->line = cf->conf_file->line;

    return ahcf;
}",1466.0,1483.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6144,381360,ngx_mail_auth_http_merge_conf,1,ngx_mail_auth_http_merge_conf,"char* ngx_mail_auth_http_merge_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail_auth_http_module.c,"static char *
ngx_mail_auth_http_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_mail_auth_http_conf_t *prev = parent;
    ngx_mail_auth_http_conf_t *conf = child;

    u_char           *p;
    size_t            len;
    ngx_uint_t        i;
    ngx_table_elt_t  *header;

    if (conf->peer == NULL) {
        conf->peer = prev->peer;
        conf->host_header = prev->host_header;
        conf->uri = prev->uri;

        if (conf->peer == NULL) {
            ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
                          ""no \""auth_http\"" is defined for server in %s:%ui"",
                          conf->file, conf->line);

            return NGX_CONF_ERROR;
        }
    }

    ngx_conf_merge_msec_value(conf->timeout, prev->timeout, 60000);

    ngx_conf_merge_value(conf->pass_client_cert, prev->pass_client_cert, 0);

    if (conf->headers == NULL) {
        conf->headers = prev->headers;
        conf->header = prev->header;
    }

    if (conf->headers && conf->hea...",1486.0,1544.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6145,381367,ngx_mail_auth_http,1,ngx_mail_auth_http,"char* ngx_mail_auth_http (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_auth_http_module.c,"static char *
ngx_mail_auth_http(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_auth_http_conf_t *ahcf = conf;

    ngx_str_t  *value;
    ngx_url_t   u;

    value = cf->args->elts;

    ngx_memzero(&u, sizeof(ngx_url_t));

    u.url = value[1];
    u.default_port = 80;
    u.uri_part = 1;

    if (ngx_strncmp(u.url.data, ""http://"", 7) == 0) {
        u.url.len -= 7;
        u.url.data += 7;
    }

    if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
        if (u.err) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""%s in auth_http \""%V\"""", u.err, &u.url);
        }

        return NGX_CONF_ERROR;
    }

    ahcf->peer = u.addrs;

    if (u.family != AF_UNIX) {
        ahcf->host_header = u.host;

    } else {
        ngx_str_set(&ahcf->host_header, ""localhost"");
    }

    ahcf->uri = u.uri;

    if (ahcf->uri.len == 0) {
        ngx_str_set(&ahcf->uri, ""/"");
    }

    return NGX_CONF_OK;
}",1547.0,1593.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6146,381374,ngx_mail_auth_http_header,1,ngx_mail_auth_http_header,"char* ngx_mail_auth_http_header (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_auth_http_module.c,"static char *
ngx_mail_auth_http_header(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_auth_http_conf_t *ahcf = conf;

    ngx_str_t        *value;
    ngx_table_elt_t  *header;

    if (ahcf->headers == NULL) {
        ahcf->headers = ngx_array_create(cf->pool, 1, sizeof(ngx_table_elt_t));
        if (ahcf->headers == NULL) {
            return NGX_CONF_ERROR;
        }
    }

    header = ngx_array_push(ahcf->headers);
    if (header == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    header->key = value[1];
    header->value = value[2];

    return NGX_CONF_OK;
}",1596.0,1622.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6147,385691,ngx_mail_core_create_main_conf,1,ngx_mail_core_create_main_conf,void* ngx_mail_core_create_main_conf (ngx_conf_t*),mail\ngx_mail_core_module.c,"static void *
ngx_mail_core_create_main_conf(ngx_conf_t *cf)
{
    ngx_mail_core_main_conf_t  *cmcf;

    cmcf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_core_main_conf_t));
    if (cmcf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&cmcf->servers, cf->pool, 4,
                       sizeof(ngx_mail_core_srv_conf_t *))
        != NGX_OK)
    {
        return NULL;
    }

    if (ngx_array_init(&cmcf->listen, cf->pool, 4, sizeof(ngx_mail_listen_t))
        != NGX_OK)
    {
        return NULL;
    }

    return cmcf;
}",126.0,150.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6148,385696,ngx_mail_core_create_srv_conf,1,ngx_mail_core_create_srv_conf,void* ngx_mail_core_create_srv_conf (ngx_conf_t*),mail\ngx_mail_core_module.c,"static void *
ngx_mail_core_create_srv_conf(ngx_conf_t *cf)
{
    ngx_mail_core_srv_conf_t  *cscf;

    cscf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_core_srv_conf_t));
    if (cscf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     cscf->protocol = NULL;
     *     cscf->error_log = NULL;
     */

    cscf->timeout = NGX_CONF_UNSET_MSEC;
    cscf->resolver_timeout = NGX_CONF_UNSET_MSEC;

    cscf->max_errors = NGX_CONF_UNSET_UINT;

    cscf->resolver = NGX_CONF_UNSET_PTR;

    cscf->file_name = cf->conf_file->file.name.data;
    cscf->line = cf->conf_file->line;

    return cscf;
}",153.0,181.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6149,385701,ngx_mail_core_merge_srv_conf,1,ngx_mail_core_merge_srv_conf,"char* ngx_mail_core_merge_srv_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail_core_module.c,"static char *
ngx_mail_core_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_mail_core_srv_conf_t *prev = parent;
    ngx_mail_core_srv_conf_t *conf = child;

    ngx_conf_merge_msec_value(conf->timeout, prev->timeout, 60000);
    ngx_conf_merge_msec_value(conf->resolver_timeout, prev->resolver_timeout,
                              30000);

    ngx_conf_merge_uint_value(conf->max_errors, prev->max_errors, 5);

    ngx_conf_merge_str_value(conf->server_name, prev->server_name, """");

    if (conf->server_name.len == 0) {
        conf->server_name = cf->cycle->hostname;
    }

    if (conf->protocol == NULL) {
        ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
                      ""unknown mail protocol for server in %s:%ui"",
                      conf->file_name, conf->line);
        return NGX_CONF_ERROR;
    }

    if (conf->error_log == NULL) {
        if (prev->error_log) {
            conf->error_log = prev->error_log;
        } else {
            conf->error_l...",184.0,220.0,1.0,1.0,37.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6150,385708,ngx_mail_core_server,1,ngx_mail_core_server,"char* ngx_mail_core_server (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_core_module.c,"static char *
ngx_mail_core_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                       *rv;
    void                       *mconf;
    ngx_uint_t                  m;
    ngx_conf_t                  pcf;
    ngx_mail_module_t          *module;
    ngx_mail_conf_ctx_t        *ctx, *mail_ctx;
    ngx_mail_core_srv_conf_t   *cscf, **cscfp;
    ngx_mail_core_main_conf_t  *cmcf;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_mail_conf_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    mail_ctx = cf->ctx;
    ctx->main_conf = mail_ctx->main_conf;

    /* the server{}'s srv_conf */

    ctx->srv_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_mail_max_module);
    if (ctx->srv_conf == NULL) {
        return NGX_CONF_ERROR;
    }

    for (m = 0; cf->cycle->modules[m]; m++) {
        if (cf->cycle->modules[m]->type != NGX_MAIL_MODULE) {
            continue;
        }

        module = cf->cycle->modules[m]->ctx;

        if (module->create_...",223.0,300.0,1.0,1.0,78.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6151,385715,ngx_mail_core_listen,1,ngx_mail_core_listen,"char* ngx_mail_core_listen (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_core_module.c,"static char *
ngx_mail_core_listen(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_core_srv_conf_t  *cscf = conf;

    ngx_str_t                  *value, size;
    ngx_url_t                   u;
    ngx_uint_t                  i, n, m;
    ngx_mail_listen_t          *ls, *als;
    ngx_mail_module_t          *module;
    ngx_mail_core_main_conf_t  *cmcf;

    cscf->listen = 1;

    value = cf->args->elts;

    ngx_memzero(&u, sizeof(ngx_url_t));

    u.url = value[1];
    u.listen = 1;

    if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
        if (u.err) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""%s in \""%V\"" of the \""listen\"" directive"",
                               u.err, &u.url);
        }

        return NGX_CONF_ERROR;
    }

    cmcf = ngx_mail_conf_get_module_main_conf(cf, ngx_mail_core_module);

    ls = ngx_array_push_n(&cmcf->listen, u.naddrs);
    if (ls == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_mem...",303.0,598.0,1.0,1.0,296.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6152,385722,ngx_mail_core_protocol,1,ngx_mail_core_protocol,"char* ngx_mail_core_protocol (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_core_module.c,"static char *
ngx_mail_core_protocol(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_core_srv_conf_t  *cscf = conf;

    ngx_str_t          *value;
    ngx_uint_t          m;
    ngx_mail_module_t  *module;

    value = cf->args->elts;

    for (m = 0; cf->cycle->modules[m]; m++) {
        if (cf->cycle->modules[m]->type != NGX_MAIL_MODULE) {
            continue;
        }

        module = cf->cycle->modules[m]->ctx;

        if (module->protocol
            && ngx_strcmp(module->protocol->name.data, value[1].data) == 0)
        {
            cscf->protocol = module->protocol;

            return NGX_CONF_OK;
        }
    }

    ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                       ""unknown protocol \""%V\"""", &value[1]);
    return NGX_CONF_ERROR;
}",601.0,631.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6153,385729,ngx_mail_core_error_log,1,ngx_mail_core_error_log,"char* ngx_mail_core_error_log (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_core_module.c,"static char *
ngx_mail_core_error_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_core_srv_conf_t  *cscf = conf;

    return ngx_log_set_log(cf, &cscf->error_log);
}",634.0,640.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6154,385736,ngx_mail_core_resolver,1,ngx_mail_core_resolver,"char* ngx_mail_core_resolver (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_core_module.c,"static char *
ngx_mail_core_resolver(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_core_srv_conf_t  *cscf = conf;

    ngx_str_t  *value;

    value = cf->args->elts;

    if (cscf->resolver != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        cscf->resolver = NULL;
        return NGX_CONF_OK;
    }

    cscf->resolver = ngx_resolver_create(cf, &value[1], cf->args->nelts - 1);
    if (cscf->resolver == NULL) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",643.0,667.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6155,387354,ngx_mail_proxy_protocol_handler,1,ngx_mail_proxy_protocol_handler,void ngx_mail_proxy_protocol_handler (ngx_event_t*),mail\ngx_mail_handler.c,"static void
ngx_mail_proxy_protocol_handler(ngx_event_t *rev)
{
    u_char                    *p, buf[NGX_PROXY_PROTOCOL_MAX_HEADER];
    size_t                     size;
    ssize_t                    n;
    ngx_err_t                  err;
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_mail_core_srv_conf_t  *cscf;

    c = rev->data;
    s = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""mail PROXY protocol handler"");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_mail_close_connection(c);
        return;
    }

    n = recv(c->fd, (char *) buf, sizeof(buf), MSG_PEEK);

    err = ngx_socket_errno;

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0, ""recv(): %z"", n);

    if (n == -1) {
        if (err == NGX_EAGAIN) {
            rev->ready = 0;

            if (!rev->timer_set) {
                cscf = ngx_mail_get_module_srv_...",197.0,269.0,1.0,1.0,73.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6156,387359,ngx_mail_init_session_handler,1,ngx_mail_init_session_handler,void ngx_mail_init_session_handler (ngx_event_t*),mail\ngx_mail_handler.c,"static void
ngx_mail_init_session_handler(ngx_event_t *rev)
{
    ngx_connection_t  *c;

    c = rev->data;

#if (NGX_MAIL_SSL)
    {
    ngx_mail_session_t   *s;
    ngx_mail_ssl_conf_t  *sslcf;

    s = c->data;

    sslcf = ngx_mail_get_module_srv_conf(s, ngx_mail_ssl_module);

    if (sslcf->enable || s->ssl) {
        c->log->action = ""SSL handshaking"";

        ngx_mail_ssl_init_connection(&sslcf->ssl, c);
        return;
    }

    }
#endif

    ngx_mail_init_session(c);
}",272.0,299.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6157,387364,ngx_mail_init_session,1,ngx_mail_init_session,void ngx_mail_init_session (ngx_connection_t*),mail\ngx_mail_handler.c,"static void
ngx_mail_init_session(ngx_connection_t *c)
{
    ngx_mail_session_t        *s;
    ngx_mail_core_srv_conf_t  *cscf;

    s = c->data;

    c->log->action = ""sending client greeting line"";

    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

    s->protocol = cscf->protocol->type;

    s->ctx = ngx_pcalloc(c->pool, sizeof(void *) * ngx_mail_max_module);
    if (s->ctx == NULL) {
        ngx_mail_session_internal_server_error(s);
        return;
    }

    c->write->handler = ngx_mail_send;

    cscf->protocol->init_session(s, c);
}",454.0,477.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6158,389352,ngx_mail_imap_login,1,ngx_mail_imap_login,"ngx_int_t ngx_mail_imap_login (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_imap_handler.c,"static ngx_int_t
ngx_mail_imap_login(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t  *arg;

#if (NGX_MAIL_SSL)
    if (ngx_mail_starttls_only(s, c)) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }
#endif

    arg = s->args.elts;

    if (s->args.nelts != 2 || arg[0].len == 0) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    s->login.len = arg[0].len;
    s->login.data = ngx_pnalloc(c->pool, s->login.len);
    if (s->login.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s->login.data, arg[0].data, s->login.len);

    s->passwd.len = arg[1].len;
    s->passwd.data = ngx_pnalloc(c->pool, s->passwd.len);
    if (s->passwd.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s->passwd.data, arg[1].data, s->passwd.len);

#if (NGX_DEBUG_MAIL_PASSWD)
    ngx_log_debug2(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""imap login:\""%V\"" passwd:\""%V\"""",
                   &s->login, &s->passwd);
#else
    ngx_log_debug1(NGX_LOG_DEBUG_...",303.0,346.0,1.0,1.0,44.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6159,389358,ngx_mail_imap_authenticate,1,ngx_mail_imap_authenticate,"ngx_int_t ngx_mail_imap_authenticate (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_imap_handler.c,"static ngx_int_t
ngx_mail_imap_authenticate(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_int_t                  rc;
    ngx_mail_core_srv_conf_t  *cscf;
    ngx_mail_imap_srv_conf_t  *iscf;

#if (NGX_MAIL_SSL)
    if (ngx_mail_starttls_only(s, c)) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }
#endif

    iscf = ngx_mail_get_module_srv_conf(s, ngx_mail_imap_module);

    rc = ngx_mail_auth_parse(s, c);

    switch (rc) {

    case NGX_MAIL_AUTH_LOGIN:

        ngx_str_set(&s->out, imap_username);
        s->mail_state = ngx_imap_auth_login_username;

        return NGX_OK;

    case NGX_MAIL_AUTH_LOGIN_USERNAME:

        ngx_str_set(&s->out, imap_password);
        s->mail_state = ngx_imap_auth_login_password;

        return ngx_mail_auth_login_username(s, c, 1);

    case NGX_MAIL_AUTH_PLAIN:

        ngx_str_set(&s->out, imap_plain_next);
        s->mail_state = ngx_imap_auth_plain;

        return NGX_OK;

    case NGX_MAIL_AUTH_CRAM_MD5:

        if (!(iscf->au...",349.0,423.0,1.0,1.0,75.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6160,389364,ngx_mail_imap_capability,1,ngx_mail_imap_capability,"ngx_int_t ngx_mail_imap_capability (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_imap_handler.c,"static ngx_int_t
ngx_mail_imap_capability(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_mail_imap_srv_conf_t  *iscf;

    iscf = ngx_mail_get_module_srv_conf(s, ngx_mail_imap_module);

#if (NGX_MAIL_SSL)

    if (c->ssl == NULL) {
        ngx_mail_ssl_conf_t  *sslcf;

        sslcf = ngx_mail_get_module_srv_conf(s, ngx_mail_ssl_module);

        if (sslcf->starttls == NGX_MAIL_STARTTLS_ON) {
            s->text = iscf->starttls_capability;
            return NGX_OK;
        }

        if (sslcf->starttls == NGX_MAIL_STARTTLS_ONLY) {
            s->text = iscf->starttls_only_capability;
            return NGX_OK;
        }
    }
#endif

    s->text = iscf->capability;

    return NGX_OK;
}",426.0,455.0,1.0,1.0,30.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6161,389370,ngx_mail_imap_starttls,1,ngx_mail_imap_starttls,"ngx_int_t ngx_mail_imap_starttls (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_imap_handler.c,"static ngx_int_t
ngx_mail_imap_starttls(ngx_mail_session_t *s, ngx_connection_t *c)
{
#if (NGX_MAIL_SSL)
    ngx_mail_ssl_conf_t  *sslcf;

    if (c->ssl == NULL) {
        sslcf = ngx_mail_get_module_srv_conf(s, ngx_mail_ssl_module);
        if (sslcf->starttls) {
            s->buffer->pos = s->buffer->start;
            s->buffer->last = s->buffer->start;
            c->read->handler = ngx_mail_starttls_handler;
            return NGX_OK;
        }
    }

#endif

    return NGX_MAIL_PARSE_INVALID_COMMAND;
}",458.0,477.0,1.0,1.0,20.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6162,389388,ngx_mail_imap_init_session,1,ngx_mail_imap_init_session,"void ngx_mail_imap_init_session (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_imap_handler.c,"void
ngx_mail_imap_init_session(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_mail_core_srv_conf_t  *cscf;

    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

    ngx_str_set(&s->out, imap_greeting);

    c->read->handler = ngx_mail_imap_init_protocol;

    ngx_add_timer(c->read, cscf->timeout);

    if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
        ngx_mail_close_connection(c);
    }

    ngx_mail_send(c->write);
}",36.0,54.0,1.0,1.0,19.0,11,4,12,6,0,5,2,2,1,3,,0,3,4,2,2,void
6163,389435,ngx_mail_imap_init_protocol,1,ngx_mail_imap_init_protocol,void ngx_mail_imap_init_protocol (ngx_event_t*),mail\ngx_mail_imap_handler.c,"void
ngx_mail_imap_init_protocol(ngx_event_t *rev)
{
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_mail_imap_srv_conf_t  *iscf;

    c = rev->data;

    c->log->action = ""in auth state"";

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_mail_close_connection(c);
        return;
    }

    s = c->data;

    if (s->buffer == NULL) {
        if (ngx_array_init(&s->args, c->pool, 2, sizeof(ngx_str_t))
            == NGX_ERROR)
        {
            ngx_mail_session_internal_server_error(s);
            return;
        }

        iscf = ngx_mail_get_module_srv_conf(s, ngx_mail_imap_module);

        s->buffer = ngx_create_temp_buf(c->pool, iscf->client_buffer_size);
        if (s->buffer == NULL) {
            ngx_mail_session_internal_server_error(s);
            return;
        }
    }

    s->mail_state = ngx_imap_start;
    c->read->handler = ngx_mail_imap_auth_s...",57.0,98.0,1.0,1.0,42.0,30,5,31,11,0,13,5,7,4,7,,0,8,2,1,1,void
6164,389545,ngx_mail_imap_auth_state,1,ngx_mail_imap_auth_state,void ngx_mail_imap_auth_state (ngx_event_t*),mail\ngx_mail_imap_handler.c,"void
ngx_mail_imap_auth_state(ngx_event_t *rev)
{
    u_char              *p;
    ngx_int_t            rc;
    ngx_uint_t           tag;
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    c = rev->data;
    s = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""imap auth state"");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_mail_close_connection(c);
        return;
    }

    if (s->out.len) {
        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""imap send handler busy"");
        s->blocked = 1;

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_close_connection(c);
            return;
        }

        return;
    }

    s->blocked = 0;

    rc = ngx_mail_read_command(s, c);

    if (rc == NGX_AGAIN) {
        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_session_internal_server_error(s);
            return;
...",101.0,300.0,1.0,1.0,200.0,151,8,156,33,1,73,34,31,16,23,,0,64,2,1,1,void
6165,390499,ngx_mail_imap_create_srv_conf,1,ngx_mail_imap_create_srv_conf,void* ngx_mail_imap_create_srv_conf (ngx_conf_t*),mail\ngx_mail_imap_module.c,"static void *
ngx_mail_imap_create_srv_conf(ngx_conf_t *cf)
{
    ngx_mail_imap_srv_conf_t  *iscf;

    iscf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_imap_srv_conf_t));
    if (iscf == NULL) {
        return NULL;
    }

    iscf->client_buffer_size = NGX_CONF_UNSET_SIZE;

    if (ngx_array_init(&iscf->capabilities, cf->pool, 4, sizeof(ngx_str_t))
        != NGX_OK)
    {
        return NULL;
    }

    return iscf;
}",117.0,136.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6166,390504,ngx_mail_imap_merge_srv_conf,1,ngx_mail_imap_merge_srv_conf,"char* ngx_mail_imap_merge_srv_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail_imap_module.c,"static char *
ngx_mail_imap_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_mail_imap_srv_conf_t *prev = parent;
    ngx_mail_imap_srv_conf_t *conf = child;

    u_char      *p, *auth;
    size_t       size;
    ngx_str_t   *c, *d;
    ngx_uint_t   i, m;

    ngx_conf_merge_size_value(conf->client_buffer_size,
                              prev->client_buffer_size,
                              (size_t) ngx_pagesize);

    ngx_conf_merge_bitmask_value(conf->auth_methods,
                              prev->auth_methods,
                              (NGX_CONF_BITMASK_SET
                               |NGX_MAIL_AUTH_PLAIN_ENABLED));


    if (conf->capabilities.nelts == 0) {
        conf->capabilities = prev->capabilities;
    }

    if (conf->capabilities.nelts == 0) {

        for (d = ngx_mail_imap_default_capabilities; d->len; d++) {
            c = ngx_array_push(&conf->capabilities);
            if (c == NULL) {
                return NGX_CONF_ERROR;
      ...",139.0,257.0,1.0,1.0,119.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6167,391162,ngx_mail_imap_parse_command,1,ngx_mail_imap_parse_command,ngx_int_t ngx_mail_imap_parse_command (ngx_mail_session_t*),mail\ngx_mail_parse.c,"ngx_int_t
ngx_mail_imap_parse_command(ngx_mail_session_t *s)
{
    u_char      ch, *p, *c, *dst, *src, *end;
    ngx_str_t  *arg;
    enum {
        sw_start = 0,
        sw_tag,
        sw_invalid,
        sw_spaces_before_command,
        sw_command,
        sw_spaces_before_argument,
        sw_argument,
        sw_backslash,
        sw_literal,
        sw_no_sync_literal_argument,
        sw_start_literal_argument,
        sw_literal_argument,
        sw_end_literal_argument,
        sw_almost_done
    } state;

    state = s->state;

    for (p = s->buffer->pos; p < s->buffer->last; p++) {
        ch = *p;

        switch (state) {

        /* IMAP tag */
        case sw_start:
            s->tag_start = p;
            state = sw_tag;

            /* fall through */

        case sw_tag:
            switch (ch) {
            case ' ':
                s->tag.len = p - s->tag_start + 1;
                s->tag.data = s->tag_start;
                state = sw_spaces_before_command;
...",227.0,676.0,1.0,1.0,450.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6168,391187,ngx_mail_pop3_parse_command,1,ngx_mail_pop3_parse_command,ngx_int_t ngx_mail_pop3_parse_command (ngx_mail_session_t*),mail\ngx_mail_parse.c,"ngx_int_t
ngx_mail_pop3_parse_command(ngx_mail_session_t *s)
{
    u_char      ch, *p, *c, c0, c1, c2, c3;
    ngx_str_t  *arg;
    enum {
        sw_start = 0,
        sw_command,
        sw_invalid,
        sw_spaces_before_argument,
        sw_argument,
        sw_almost_done
    } state;

    state = s->state;

    for (p = s->buffer->pos; p < s->buffer->last; p++) {
        ch = *p;

        switch (state) {

        /* POP3 command */
        case sw_start:
            s->cmd_start = p;
            state = sw_command;

            /* fall through */

        case sw_command:
            if (ch == ' ' || ch == CR || ch == LF) {
                c = s->cmd_start;

                if (p - c == 4) {

                    c0 = ngx_toupper(c[0]);
                    c1 = ngx_toupper(c[1]);
                    c2 = ngx_toupper(c[2]);
                    c3 = ngx_toupper(c[3]);

                    if (c0 == 'U' && c1 == 'S' && c2 == 'E' && c3 == 'R')
                    {
             ...",17.0,224.0,1.0,1.0,208.0,114,16,123,26,0,31,39,51,5,1,,0,31,2,1,1,ngx_int_t
6169,393126,ngx_mail_smtp_parse_command,1,ngx_mail_smtp_parse_command,ngx_int_t ngx_mail_smtp_parse_command (ngx_mail_session_t*),mail\ngx_mail_parse.c,"ngx_int_t
ngx_mail_smtp_parse_command(ngx_mail_session_t *s)
{
    u_char      ch, *p, *c, c0, c1, c2, c3;
    ngx_str_t  *arg;
    enum {
        sw_start = 0,
        sw_command,
        sw_invalid,
        sw_spaces_before_argument,
        sw_argument,
        sw_almost_done
    } state;

    state = s->state;

    for (p = s->buffer->pos; p < s->buffer->last; p++) {
        ch = *p;

        switch (state) {

        /* SMTP command */
        case sw_start:
            s->cmd_start = p;
            state = sw_command;

            /* fall through */

        case sw_command:
            if (ch == ' ' || ch == CR || ch == LF) {
                c = s->cmd_start;

                if (p - c == 4) {

                    c0 = ngx_toupper(c[0]);
                    c1 = ngx_toupper(c[1]);
                    c2 = ngx_toupper(c[2]);
                    c3 = ngx_toupper(c[3]);

                    if (c0 == 'H' && c1 == 'E' && c2 == 'L' && c3 == 'O')
                    {
             ...",679.0,900.0,1.0,1.0,222.0,109,16,119,25,0,29,37,47,3,1,,0,29,2,1,1,ngx_int_t
6170,393971,ngx_mail_pop3_user,1,ngx_mail_pop3_user,"ngx_int_t ngx_mail_pop3_user (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_pop3_handler.c,"static ngx_int_t
ngx_mail_pop3_user(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t  *arg;

#if (NGX_MAIL_SSL)
    if (ngx_mail_starttls_only(s, c)) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }
#endif

    if (s->args.nelts != 1) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    arg = s->args.elts;
    s->login.len = arg[0].len;
    s->login.data = ngx_pnalloc(c->pool, s->login.len);
    if (s->login.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s->login.data, arg[0].data, s->login.len);

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""pop3 login: \""%V\"""", &s->login);

    s->mail_state = ngx_pop3_user;

    return NGX_OK;
}",309.0,339.0,1.0,1.0,31.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6171,393977,ngx_mail_pop3_pass,1,ngx_mail_pop3_pass,"ngx_int_t ngx_mail_pop3_pass (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_pop3_handler.c,"static ngx_int_t
ngx_mail_pop3_pass(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t  *arg;

    if (s->args.nelts != 1) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    arg = s->args.elts;
    s->passwd.len = arg[0].len;
    s->passwd.data = ngx_pnalloc(c->pool, s->passwd.len);
    if (s->passwd.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s->passwd.data, arg[0].data, s->passwd.len);

#if (NGX_DEBUG_MAIL_PASSWD)
    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""pop3 passwd: \""%V\"""", &s->passwd);
#endif

    return NGX_DONE;
}",342.0,366.0,1.0,1.0,25.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6172,393983,ngx_mail_pop3_capa,1,ngx_mail_pop3_capa,"ngx_int_t ngx_mail_pop3_capa (ngx_mail_session_t*,ngx_connection_t*,ngx_int_t)",mail\ngx_mail_pop3_handler.c,"static ngx_int_t
ngx_mail_pop3_capa(ngx_mail_session_t *s, ngx_connection_t *c, ngx_int_t stls)
{
    ngx_mail_pop3_srv_conf_t  *pscf;

    pscf = ngx_mail_get_module_srv_conf(s, ngx_mail_pop3_module);

#if (NGX_MAIL_SSL)

    if (stls && c->ssl == NULL) {
        ngx_mail_ssl_conf_t  *sslcf;

        sslcf = ngx_mail_get_module_srv_conf(s, ngx_mail_ssl_module);

        if (sslcf->starttls == NGX_MAIL_STARTTLS_ON) {
            s->out = pscf->starttls_capability;
            return NGX_OK;
        }

        if (sslcf->starttls == NGX_MAIL_STARTTLS_ONLY) {
            s->out = pscf->starttls_only_capability;
            return NGX_OK;
        }
    }

#endif

    s->out = pscf->capability;
    return NGX_OK;
}",369.0,398.0,1.0,1.0,30.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6173,393990,ngx_mail_pop3_stls,1,ngx_mail_pop3_stls,"ngx_int_t ngx_mail_pop3_stls (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_pop3_handler.c,"static ngx_int_t
ngx_mail_pop3_stls(ngx_mail_session_t *s, ngx_connection_t *c)
{
#if (NGX_MAIL_SSL)
    ngx_mail_ssl_conf_t  *sslcf;

    if (c->ssl == NULL) {
        sslcf = ngx_mail_get_module_srv_conf(s, ngx_mail_ssl_module);
        if (sslcf->starttls) {
            s->buffer->pos = s->buffer->start;
            s->buffer->last = s->buffer->start;
            c->read->handler = ngx_mail_starttls_handler;
            return NGX_OK;
        }
    }

#endif

    return NGX_MAIL_PARSE_INVALID_COMMAND;
}",401.0,420.0,1.0,1.0,20.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6174,393996,ngx_mail_pop3_apop,1,ngx_mail_pop3_apop,"ngx_int_t ngx_mail_pop3_apop (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_pop3_handler.c,"static ngx_int_t
ngx_mail_pop3_apop(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t                 *arg;
    ngx_mail_pop3_srv_conf_t  *pscf;

#if (NGX_MAIL_SSL)
    if (ngx_mail_starttls_only(s, c)) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }
#endif

    if (s->args.nelts != 2) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    pscf = ngx_mail_get_module_srv_conf(s, ngx_mail_pop3_module);

    if (!(pscf->auth_methods & NGX_MAIL_AUTH_APOP_ENABLED)) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }

    arg = s->args.elts;

    s->login.len = arg[0].len;
    s->login.data = ngx_pnalloc(c->pool, s->login.len);
    if (s->login.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s->login.data, arg[0].data, s->login.len);

    s->passwd.len = arg[1].len;
    s->passwd.data = ngx_pnalloc(c->pool, s->passwd.len);
    if (s->passwd.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s->passwd.data, arg[1].data, s->passwd.len);
...",423.0,469.0,1.0,1.0,47.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6175,394002,ngx_mail_pop3_auth,1,ngx_mail_pop3_auth,"ngx_int_t ngx_mail_pop3_auth (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_pop3_handler.c,"static ngx_int_t
ngx_mail_pop3_auth(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_int_t                  rc;
    ngx_mail_pop3_srv_conf_t  *pscf;

#if (NGX_MAIL_SSL)
    if (ngx_mail_starttls_only(s, c)) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }
#endif

    pscf = ngx_mail_get_module_srv_conf(s, ngx_mail_pop3_module);

    if (s->args.nelts == 0) {
        s->out = pscf->auth_capability;
        s->state = 0;

        return NGX_OK;
    }

    rc = ngx_mail_auth_parse(s, c);

    switch (rc) {

    case NGX_MAIL_AUTH_LOGIN:

        ngx_str_set(&s->out, pop3_username);
        s->mail_state = ngx_pop3_auth_login_username;

        return NGX_OK;

    case NGX_MAIL_AUTH_LOGIN_USERNAME:

        ngx_str_set(&s->out, pop3_password);
        s->mail_state = ngx_pop3_auth_login_password;

        return ngx_mail_auth_login_username(s, c, 1);

    case NGX_MAIL_AUTH_PLAIN:

        ngx_str_set(&s->out, pop3_next);
        s->mail_state = ngx_pop3_auth_plain;

        ...",472.0,544.0,1.0,1.0,73.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6176,394014,ngx_mail_pop3_init_session,1,ngx_mail_pop3_init_session,"void ngx_mail_pop3_init_session (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_pop3_handler.c,"void
ngx_mail_pop3_init_session(ngx_mail_session_t *s, ngx_connection_t *c)
{
    u_char                    *p;
    ngx_mail_core_srv_conf_t  *cscf;
    ngx_mail_pop3_srv_conf_t  *pscf;

    pscf = ngx_mail_get_module_srv_conf(s, ngx_mail_pop3_module);
    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

    if (pscf->auth_methods
        & (NGX_MAIL_AUTH_APOP_ENABLED|NGX_MAIL_AUTH_CRAM_MD5_ENABLED))
    {
        if (ngx_mail_salt(s, c, cscf) != NGX_OK) {
            ngx_mail_session_internal_server_error(s);
            return;
        }

        s->out.data = ngx_pnalloc(c->pool, sizeof(pop3_greeting) + s->salt.len);
        if (s->out.data == NULL) {
            ngx_mail_session_internal_server_error(s);
            return;
        }

        p = ngx_cpymem(s->out.data, pop3_greeting, sizeof(pop3_greeting) - 3);
        *p++ = ' ';
        p = ngx_cpymem(p, s->salt.data, s->salt.len);

        s->out.len = p - s->out.data;

    } else {
        ngx_str_set(&s->out,...",32.0,75.0,1.0,1.0,44.0,44,12,40,12,0,17,5,7,4,7,,0,13,4,2,2,void
6177,394165,ngx_mail_pop3_init_protocol,1,ngx_mail_pop3_init_protocol,void ngx_mail_pop3_init_protocol (ngx_event_t*),mail\ngx_mail_pop3_handler.c,"void
ngx_mail_pop3_init_protocol(ngx_event_t *rev)
{
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    c = rev->data;

    c->log->action = ""in auth state"";

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_mail_close_connection(c);
        return;
    }

    s = c->data;

    if (s->buffer == NULL) {
        if (ngx_array_init(&s->args, c->pool, 2, sizeof(ngx_str_t))
            == NGX_ERROR)
        {
            ngx_mail_session_internal_server_error(s);
            return;
        }

        s->buffer = ngx_create_temp_buf(c->pool, 128);
        if (s->buffer == NULL) {
            ngx_mail_session_internal_server_error(s);
            return;
        }
    }

    s->mail_state = ngx_pop3_start;
    c->read->handler = ngx_mail_pop3_auth_state;

    ngx_mail_pop3_auth_state(rev);
}",78.0,116.0,1.0,1.0,39.0,28,5,27,9,0,12,5,7,4,7,,0,7,2,1,1,void
6178,394267,ngx_mail_pop3_auth_state,1,ngx_mail_pop3_auth_state,void ngx_mail_pop3_auth_state (ngx_event_t*),mail\ngx_mail_pop3_handler.c,"void
ngx_mail_pop3_auth_state(ngx_event_t *rev)
{
    ngx_int_t            rc;
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    c = rev->data;
    s = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""pop3 auth state"");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_mail_close_connection(c);
        return;
    }

    if (s->out.len) {
        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""pop3 send handler busy"");
        s->blocked = 1;

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_close_connection(c);
            return;
        }

        return;
    }

    s->blocked = 0;

    rc = ngx_mail_read_command(s, c);

    if (rc == NGX_AGAIN) {
        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_session_internal_server_error(s);
            return;
        }

        return;
    }

    if (rc == NGX_ERROR)...",119.0,307.0,1.0,1.0,189.0,90,7,132,31,1,51,37,26,12,24,,0,43,2,1,1,void
6179,395220,ngx_mail_pop3_create_srv_conf,1,ngx_mail_pop3_create_srv_conf,void* ngx_mail_pop3_create_srv_conf (ngx_conf_t*),mail\ngx_mail_pop3_module.c,"static void *
ngx_mail_pop3_create_srv_conf(ngx_conf_t *cf)
{
    ngx_mail_pop3_srv_conf_t  *pscf;

    pscf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_pop3_srv_conf_t));
    if (pscf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&pscf->capabilities, cf->pool, 4, sizeof(ngx_str_t))
        != NGX_OK)
    {
        return NULL;
    }

    return pscf;
}",110.0,127.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6180,395225,ngx_mail_pop3_merge_srv_conf,1,ngx_mail_pop3_merge_srv_conf,"char* ngx_mail_pop3_merge_srv_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail_pop3_module.c,"static char *
ngx_mail_pop3_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_mail_pop3_srv_conf_t *prev = parent;
    ngx_mail_pop3_srv_conf_t *conf = child;

    u_char      *p;
    size_t       size, stls_only_size;
    ngx_str_t   *c, *d;
    ngx_uint_t   i, m;

    ngx_conf_merge_bitmask_value(conf->auth_methods,
                                 prev->auth_methods,
                                 (NGX_CONF_BITMASK_SET
                                  |NGX_MAIL_AUTH_PLAIN_ENABLED));

    if (conf->auth_methods & NGX_MAIL_AUTH_PLAIN_ENABLED) {
        conf->auth_methods |= NGX_MAIL_AUTH_LOGIN_ENABLED;
    }

    if (conf->capabilities.nelts == 0) {
        conf->capabilities = prev->capabilities;
    }

    if (conf->capabilities.nelts == 0) {

        for (d = ngx_mail_pop3_default_capabilities; d->len; d++) {
            c = ngx_array_push(&conf->capabilities);
            if (c == NULL) {
                return NGX_CONF_ERROR;
            }

            *c ...",130.0,322.0,1.0,1.0,193.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6181,396117,ngx_mail_proxy_block_read,1,ngx_mail_proxy_block_read,void ngx_mail_proxy_block_read (ngx_event_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_block_read(ngx_event_t *rev)
{
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, ""mail proxy block read"");

    if (ngx_handle_read_event(rev, 0) != NGX_OK) {
        c = rev->data;
        s = c->data;

        ngx_mail_proxy_close_session(s);
    }
}",209.0,223.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6182,396122,ngx_mail_proxy_pop3_handler,1,ngx_mail_proxy_pop3_handler,void ngx_mail_proxy_pop3_handler (ngx_event_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_pop3_handler(ngx_event_t *rev)
{
    u_char                 *p;
    ngx_int_t               rc;
    ngx_str_t               line;
    ngx_connection_t       *c;
    ngx_mail_session_t     *s;
    ngx_mail_proxy_conf_t  *pcf;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
                   ""mail proxy pop3 auth handler"");

    c = rev->data;
    s = c->data;

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT,
                      ""upstream timed out"");
        c->timedout = 1;
        ngx_mail_proxy_internal_server_error(s);
        return;
    }

    if (s->proxy->proxy_protocol) {
        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""mail proxy pop3 busy"");

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_proxy_internal_server_error(s);
            return;
        }

        return;
    }

    rc = ngx_mail_proxy_read_response(s, 0);

    if (rc == NGX_AGAIN) {
        if (ngx_handl...",226.0,361.0,1.0,1.0,136.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6183,396127,ngx_mail_proxy_imap_handler,1,ngx_mail_proxy_imap_handler,void ngx_mail_proxy_imap_handler (ngx_event_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_imap_handler(ngx_event_t *rev)
{
    u_char                 *p;
    ngx_int_t               rc;
    ngx_str_t               line;
    ngx_connection_t       *c;
    ngx_mail_session_t     *s;
    ngx_mail_proxy_conf_t  *pcf;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
                   ""mail proxy imap auth handler"");

    c = rev->data;
    s = c->data;

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT,
                      ""upstream timed out"");
        c->timedout = 1;
        ngx_mail_proxy_internal_server_error(s);
        return;
    }

    if (s->proxy->proxy_protocol) {
        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""mail proxy imap busy"");

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_proxy_internal_server_error(s);
            return;
        }

        return;
    }

    rc = ngx_mail_proxy_read_response(s, s->mail_state);

    if (rc == NGX_AGAIN) {
        i...",364.0,520.0,1.0,1.0,157.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6184,396132,ngx_mail_proxy_smtp_handler,1,ngx_mail_proxy_smtp_handler,void ngx_mail_proxy_smtp_handler (ngx_event_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_smtp_handler(ngx_event_t *rev)
{
    u_char                    *p;
    ngx_int_t                  rc;
    ngx_str_t                  line, auth, encoded;
    ngx_buf_t                 *b;
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_mail_proxy_conf_t     *pcf;
    ngx_mail_core_srv_conf_t  *cscf;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
                   ""mail proxy smtp auth handler"");

    c = rev->data;
    s = c->data;

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT,
                      ""upstream timed out"");
        c->timedout = 1;
        ngx_mail_proxy_internal_server_error(s);
        return;
    }

    if (s->proxy->proxy_protocol) {
        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""mail proxy smtp busy"");

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_proxy_internal_server_error(s);
            return;
        }

        retur...",523.0,855.0,1.0,1.0,333.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6185,396137,ngx_mail_proxy_write_handler,1,ngx_mail_proxy_write_handler,void ngx_mail_proxy_write_handler (ngx_event_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_write_handler(ngx_event_t *wev)
{
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, wev->log, 0, ""mail proxy write handler"");

    c = wev->data;
    s = c->data;

    if (s->proxy->proxy_protocol) {
        if (ngx_mail_proxy_send_proxy_protocol(s) != NGX_OK) {
            return;
        }

        s->proxy->proxy_protocol = 0;
    }

    if (ngx_handle_write_event(wev, 0) != NGX_OK) {
        ngx_mail_proxy_internal_server_error(s);
    }

    if (c->read->ready) {
        ngx_post_event(c->read, &ngx_posted_events);
    }
}",858.0,884.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6186,396142,ngx_mail_proxy_send_proxy_protocol,1,ngx_mail_proxy_send_proxy_protocol,ngx_int_t ngx_mail_proxy_send_proxy_protocol (ngx_mail_session_t*),mail\ngx_mail_proxy_module.c,"static ngx_int_t
ngx_mail_proxy_send_proxy_protocol(ngx_mail_session_t *s)
{
    u_char            *p;
    ssize_t            n, size;
    ngx_connection_t  *c;
    u_char             buf[NGX_PROXY_PROTOCOL_MAX_HEADER];

    s->connection->log->action = ""sending PROXY protocol header to upstream"";

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
                   ""mail proxy send PROXY protocol header"");

    p = ngx_proxy_protocol_write(s->connection, buf,
                                 buf + NGX_PROXY_PROTOCOL_MAX_HEADER);
    if (p == NULL) {
        ngx_mail_proxy_internal_server_error(s);
        return NGX_ERROR;
    }

    c = s->proxy->upstream.connection;

    size = p - buf;

    n = c->send(c, buf, size);

    if (n == NGX_AGAIN) {
        if (ngx_handle_write_event(c->write, 0) != NGX_OK) {
            ngx_mail_proxy_internal_server_error(s);
            return NGX_ERROR;
        }

        return NGX_AGAIN;
    }

    if (n == NGX_ERROR) {
        ngx_m...",887.0,945.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6187,396147,ngx_mail_proxy_read_response,1,ngx_mail_proxy_read_response,"ngx_int_t ngx_mail_proxy_read_response (ngx_mail_session_t*,ngx_uint_t)",mail\ngx_mail_proxy_module.c,"static ngx_int_t
ngx_mail_proxy_read_response(ngx_mail_session_t *s, ngx_uint_t state)
{
    u_char                 *p, *m;
    ssize_t                 n;
    ngx_buf_t              *b;
    ngx_mail_proxy_conf_t  *pcf;

    s->connection->log->action = ""reading response from upstream"";

    b = s->proxy->buffer;

    n = s->proxy->upstream.connection->recv(s->proxy->upstream.connection,
                                            b->last, b->end - b->last);

    if (n == NGX_ERROR || n == 0) {
        return NGX_ERROR;
    }

    if (n == NGX_AGAIN) {
        return NGX_AGAIN;
    }

    b->last += n;

    if (b->last - b->pos < 4) {
        return NGX_AGAIN;
    }

    if (*(b->last - 2) != CR || *(b->last - 1) != LF) {
        if (b->last == b->end) {
            *(b->last - 1) = '\0';
            ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                          ""upstream sent too long response line: \""%s\"""",
                          b->pos);
            return NGX_ERRO...",948.0,1106.0,1.0,1.0,159.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6188,396153,ngx_mail_proxy_handler,1,ngx_mail_proxy_handler,void ngx_mail_proxy_handler (ngx_event_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_handler(ngx_event_t *ev)
{
    char                   *action, *recv_action, *send_action;
    size_t                  size;
    ssize_t                 n;
    ngx_buf_t              *b;
    ngx_uint_t              do_write;
    ngx_connection_t       *c, *src, *dst;
    ngx_mail_session_t     *s;
    ngx_mail_proxy_conf_t  *pcf;

    c = ev->data;
    s = c->data;

    if (ev->timedout || c->close) {
        c->log->action = ""proxying"";

        if (c->close) {
            ngx_log_error(NGX_LOG_INFO, c->log, 0, ""shutdown timeout"");

        } else if (c == s->connection) {
            ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT,
                          ""client timed out"");
            c->timedout = 1;

        } else {
            ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT,
                          ""upstream timed out"");
        }

        ngx_mail_proxy_close_session(s);
        return;
    }

    if (c == s->connection) {
        if (ev-...",1109.0,1277.0,1.0,1.0,169.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6189,396158,ngx_mail_proxy_upstream_error,1,ngx_mail_proxy_upstream_error,void ngx_mail_proxy_upstream_error (ngx_mail_session_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_upstream_error(ngx_mail_session_t *s)
{
    if (s->proxy->upstream.connection) {
        ngx_log_debug1(NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
                       ""close mail proxy connection: %d"",
                       s->proxy->upstream.connection->fd);

        ngx_close_connection(s->proxy->upstream.connection);
    }

    if (s->out.len == 0) {
        ngx_mail_session_internal_server_error(s);
        return;
    }

    s->quit = 1;
    ngx_mail_send(s->connection->write);
}",1280.0,1298.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6190,396163,ngx_mail_proxy_internal_server_error,1,ngx_mail_proxy_internal_server_error,void ngx_mail_proxy_internal_server_error (ngx_mail_session_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_internal_server_error(ngx_mail_session_t *s)
{
    if (s->proxy->upstream.connection) {
        ngx_log_debug1(NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
                       ""close mail proxy connection: %d"",
                       s->proxy->upstream.connection->fd);

        ngx_close_connection(s->proxy->upstream.connection);
    }

    ngx_mail_session_internal_server_error(s);
}",1301.0,1313.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6191,396168,ngx_mail_proxy_close_session,1,ngx_mail_proxy_close_session,void ngx_mail_proxy_close_session (ngx_mail_session_t*),mail\ngx_mail_proxy_module.c,"static void
ngx_mail_proxy_close_session(ngx_mail_session_t *s)
{
    if (s->proxy->upstream.connection) {
        ngx_log_debug1(NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
                       ""close mail proxy connection: %d"",
                       s->proxy->upstream.connection->fd);

        ngx_close_connection(s->proxy->upstream.connection);
    }

    ngx_mail_close_connection(s->connection);
}",1316.0,1328.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6192,396173,ngx_mail_proxy_create_conf,1,ngx_mail_proxy_create_conf,void* ngx_mail_proxy_create_conf (ngx_conf_t*),mail\ngx_mail_proxy_module.c,"static void *
ngx_mail_proxy_create_conf(ngx_conf_t *cf)
{
    ngx_mail_proxy_conf_t  *pcf;

    pcf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_proxy_conf_t));
    if (pcf == NULL) {
        return NULL;
    }

    pcf->enable = NGX_CONF_UNSET;
    pcf->pass_error_message = NGX_CONF_UNSET;
    pcf->xclient = NGX_CONF_UNSET;
    pcf->smtp_auth = NGX_CONF_UNSET;
    pcf->proxy_protocol = NGX_CONF_UNSET;
    pcf->buffer_size = NGX_CONF_UNSET_SIZE;
    pcf->timeout = NGX_CONF_UNSET_MSEC;

    return pcf;
}",1331.0,1350.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6193,396178,ngx_mail_proxy_merge_conf,1,ngx_mail_proxy_merge_conf,"char* ngx_mail_proxy_merge_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail_proxy_module.c,"static char *
ngx_mail_proxy_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_mail_proxy_conf_t *prev = parent;
    ngx_mail_proxy_conf_t *conf = child;

    ngx_conf_merge_value(conf->enable, prev->enable, 0);
    ngx_conf_merge_value(conf->pass_error_message, prev->pass_error_message, 0);
    ngx_conf_merge_value(conf->xclient, prev->xclient, 1);
    ngx_conf_merge_value(conf->smtp_auth, prev->smtp_auth, 0);
    ngx_conf_merge_value(conf->proxy_protocol, prev->proxy_protocol, 0);
    ngx_conf_merge_size_value(conf->buffer_size, prev->buffer_size,
                              (size_t) ngx_pagesize);
    ngx_conf_merge_msec_value(conf->timeout, prev->timeout, 24 * 60 * 60000);

    return NGX_CONF_OK;
}",1353.0,1369.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6194,400235,ngx_mail_realip_set_addr,1,ngx_mail_realip_set_addr,"ngx_int_t ngx_mail_realip_set_addr (ngx_mail_session_t*,ngx_addr_t*)",mail\ngx_mail_realip_module.c,"static ngx_int_t
ngx_mail_realip_set_addr(ngx_mail_session_t *s, ngx_addr_t *addr)
{
    size_t             len;
    u_char            *p;
    u_char             text[NGX_SOCKADDR_STRLEN];
    ngx_connection_t  *c;

    c = s->connection;

    len = ngx_sock_ntop(addr->sockaddr, addr->socklen, text,
                        NGX_SOCKADDR_STRLEN, 0);
    if (len == 0) {
        return NGX_ERROR;
    }

    p = ngx_pnalloc(c->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(p, text, len);

    c->sockaddr = addr->sockaddr;
    c->socklen = addr->socklen;
    c->addr_text.len = len;
    c->addr_text.data = p;

    return NGX_OK;
}",103.0,132.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6195,400241,ngx_mail_realip_from,1,ngx_mail_realip_from,"char* ngx_mail_realip_from (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_realip_module.c,"static char *
ngx_mail_realip_from(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_realip_srv_conf_t *rscf = conf;

    ngx_int_t             rc;
    ngx_str_t            *value;
    ngx_url_t             u;
    ngx_cidr_t            c, *cidr;
    ngx_uint_t            i;
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    value = cf->args->elts;

    if (rscf->from == NULL) {
        rscf->from = ngx_array_create(cf->pool, 2,
                                      sizeof(ngx_cidr_t));
        if (rscf->from == NULL) {
            return NGX_CONF_ERROR;
        }
    }

#if (NGX_HAVE_UNIX_DOMAIN)

    if (ngx_strcmp(value[1].data, ""unix:"") == 0) {
        cidr = ngx_array_push(rscf->from);
        if (cidr == NULL) {
            return NGX_CONF_ERROR;
        }

        cidr->family = AF_UNIX;
        return NGX_CONF_OK;
    }

#endif

    rc = ngx_ptocidr(&value[1], &c);

    if (rc != NGX_ERROR) {
        if (rc == NGX_DONE...",135.0,235.0,1.0,1.0,101.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6196,400248,ngx_mail_realip_create_srv_conf,1,ngx_mail_realip_create_srv_conf,void* ngx_mail_realip_create_srv_conf (ngx_conf_t*),mail\ngx_mail_realip_module.c,"static void *
ngx_mail_realip_create_srv_conf(ngx_conf_t *cf)
{
    ngx_mail_realip_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_realip_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->from = NULL;
     */

    return conf;
}",238.0,255.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6197,400253,ngx_mail_realip_merge_srv_conf,1,ngx_mail_realip_merge_srv_conf,"char* ngx_mail_realip_merge_srv_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail_realip_module.c,"static char *
ngx_mail_realip_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_mail_realip_srv_conf_t *prev = parent;
    ngx_mail_realip_srv_conf_t *conf = child;

    if (conf->from == NULL) {
        conf->from = prev->from;
    }

    return NGX_CONF_OK;
}",258.0,269.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6198,400783,ngx_mail_smtp_resolve_addr_handler,1,ngx_mail_smtp_resolve_addr_handler,void ngx_mail_smtp_resolve_addr_handler (ngx_resolver_ctx_t*),mail\ngx_mail_smtp_handler.c,"static void
ngx_mail_smtp_resolve_addr_handler(ngx_resolver_ctx_t *ctx)
{
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    s = ctx->data;
    c = s->connection;

    if (ctx->state) {
        ngx_log_error(NGX_LOG_ERR, c->log, 0,
                      ""%V could not be resolved (%i: %s)"",
                      &c->addr_text, ctx->state,
                      ngx_resolver_strerror(ctx->state));

        if (ctx->state == NGX_RESOLVE_NXDOMAIN) {
            s->host = smtp_unavailable;

        } else {
            s->host = smtp_tempunavail;
        }

        ngx_resolve_addr_done(ctx);

        ngx_mail_smtp_greeting(s, s->connection);

        return;
    }

    c->log->action = ""in resolving client hostname"";

    s->host.data = ngx_pstrdup(c->pool, &ctx->name);
    if (s->host.data == NULL) {
        ngx_resolve_addr_done(ctx);
        ngx_mail_close_connection(c);
        return;
    }

    s->host.len = ctx->name.len;

    ngx_resolve_addr_done(ctx);

    ngx_log_deb...",101.0,149.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6199,400788,ngx_mail_smtp_resolve_name,1,ngx_mail_smtp_resolve_name,void ngx_mail_smtp_resolve_name (ngx_event_t*),mail\ngx_mail_smtp_handler.c,"static void
ngx_mail_smtp_resolve_name(ngx_event_t *rev)
{
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_resolver_ctx_t        *ctx;
    ngx_mail_core_srv_conf_t  *cscf;

    c = rev->data;
    s = c->data;

    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

    ctx = ngx_resolve_start(cscf->resolver, NULL);
    if (ctx == NULL) {
        ngx_mail_close_connection(c);
        return;
    }

    ctx->name = s->host;
    ctx->handler = ngx_mail_smtp_resolve_name_handler;
    ctx->data = s;
    ctx->timeout = cscf->resolver_timeout;

    s->resolver_ctx = ctx;
    c->read->handler = ngx_mail_smtp_block_reading;

    if (ngx_resolve_name(ctx) != NGX_OK) {
        ngx_mail_close_connection(c);
    }
}",152.0,182.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6200,400793,ngx_mail_smtp_resolve_name_handler,1,ngx_mail_smtp_resolve_name_handler,void ngx_mail_smtp_resolve_name_handler (ngx_resolver_ctx_t*),mail\ngx_mail_smtp_handler.c,"static void
ngx_mail_smtp_resolve_name_handler(ngx_resolver_ctx_t *ctx)
{
    ngx_uint_t           i;
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    s = ctx->data;
    c = s->connection;

    if (ctx->state) {
        ngx_log_error(NGX_LOG_ERR, c->log, 0,
                      ""\""%V\"" could not be resolved (%i: %s)"",
                      &ctx->name, ctx->state,
                      ngx_resolver_strerror(ctx->state));

        if (ctx->state == NGX_RESOLVE_NXDOMAIN) {
            s->host = smtp_unavailable;

        } else {
            s->host = smtp_tempunavail;
        }

    } else {

#if (NGX_DEBUG)
        {
        u_char     text[NGX_SOCKADDR_STRLEN];
        ngx_str_t  addr;

        addr.data = text;

        for (i = 0; i < ctx->naddrs; i++) {
            addr.len = ngx_sock_ntop(ctx->addrs[i].sockaddr,
                                     ctx->addrs[i].socklen,
                                     text, NGX_SOCKADDR_STRLEN, 0);

            ngx_log_debug1(...",185.0,245.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6201,400798,ngx_mail_smtp_block_reading,1,ngx_mail_smtp_block_reading,void ngx_mail_smtp_block_reading (ngx_event_t*),mail\ngx_mail_smtp_handler.c,"static void
ngx_mail_smtp_block_reading(ngx_event_t *rev)
{
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;
    ngx_resolver_ctx_t  *ctx;

    c = rev->data;
    s = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""smtp reading blocked"");

    if (ngx_handle_read_event(rev, 0) != NGX_OK) {

        if (s->resolver_ctx) {
            ctx = s->resolver_ctx;

            if (ctx->handler == ngx_mail_smtp_resolve_addr_handler) {
                ngx_resolve_addr_done(ctx);

            } else if (ctx->handler == ngx_mail_smtp_resolve_name_handler) {
                ngx_resolve_name_done(ctx);
            }

            s->resolver_ctx = NULL;
        }

        ngx_mail_close_connection(c);
    }
}",248.0,277.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6202,400803,ngx_mail_smtp_greeting,1,ngx_mail_smtp_greeting,"void ngx_mail_smtp_greeting (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"static void
ngx_mail_smtp_greeting(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_msec_t                 timeout;
    ngx_mail_core_srv_conf_t  *cscf;
    ngx_mail_smtp_srv_conf_t  *sscf;

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""smtp greeting for \""%V\"""", &s->host);

    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);
    sscf = ngx_mail_get_module_srv_conf(s, ngx_mail_smtp_module);

    timeout = sscf->greeting_delay ? sscf->greeting_delay : cscf->timeout;
    ngx_add_timer(c->read, timeout);

    if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
        ngx_mail_close_connection(c);
    }

    if (c->read->ready) {
        ngx_post_event(c->read, &ngx_posted_events);
    }

    if (sscf->greeting_delay) {
         c->read->handler = ngx_mail_smtp_invalid_pipelining;
         return;
    }

    c->read->handler = ngx_mail_smtp_init_protocol;

    s->out = sscf->greeting;

    ngx_mail_send(c->write);
}",280.0,314.0,1.0,1.0,35.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,void
6203,400809,ngx_mail_smtp_invalid_pipelining,1,ngx_mail_smtp_invalid_pipelining,void ngx_mail_smtp_invalid_pipelining (ngx_event_t*),mail\ngx_mail_smtp_handler.c,"static void
ngx_mail_smtp_invalid_pipelining(ngx_event_t *rev)
{
    ngx_connection_t          *c;
    ngx_mail_session_t        *s;
    ngx_mail_core_srv_conf_t  *cscf;
    ngx_mail_smtp_srv_conf_t  *sscf;

    c = rev->data;
    s = c->data;

    c->log->action = ""in delay pipelining state"";

    if (rev->timedout) {

        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""delay greeting"");

        rev->timedout = 0;

        cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

        c->read->handler = ngx_mail_smtp_init_protocol;

        ngx_add_timer(c->read, cscf->timeout);

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_close_connection(c);
            return;
        }

        sscf = ngx_mail_get_module_srv_conf(s, ngx_mail_smtp_module);

        s->out = sscf->greeting;

    } else {

        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""invalid pipelining"");

        if (s->buffer == NULL) {
            if (ngx_mail_smtp_creat...",317.0,373.0,1.0,1.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6204,400814,ngx_mail_smtp_create_buffer,1,ngx_mail_smtp_create_buffer,"ngx_int_t ngx_mail_smtp_create_buffer (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"static ngx_int_t
ngx_mail_smtp_create_buffer(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_mail_smtp_srv_conf_t  *sscf;

    if (ngx_array_init(&s->args, c->pool, 2, sizeof(ngx_str_t)) == NGX_ERROR) {
        ngx_mail_session_internal_server_error(s);
        return NGX_ERROR;
    }

    sscf = ngx_mail_get_module_srv_conf(s, ngx_mail_smtp_module);

    s->buffer = ngx_create_temp_buf(c->pool, sscf->client_buffer_size);
    if (s->buffer == NULL) {
        ngx_mail_session_internal_server_error(s);
        return NGX_ERROR;
    }

    return NGX_OK;
}",408.0,427.0,1.0,1.0,20.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6205,400820,ngx_mail_smtp_helo,1,ngx_mail_smtp_helo,"ngx_int_t ngx_mail_smtp_helo (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"static ngx_int_t
ngx_mail_smtp_helo(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t                 *arg;
    ngx_mail_smtp_srv_conf_t  *sscf;

    if (s->args.nelts != 1) {
        ngx_str_set(&s->out, smtp_invalid_argument);
        s->state = 0;
        return NGX_OK;
    }

    arg = s->args.elts;

    s->smtp_helo.len = arg[0].len;

    s->smtp_helo.data = ngx_pnalloc(c->pool, arg[0].len);
    if (s->smtp_helo.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s->smtp_helo.data, arg[0].data, arg[0].len);

    ngx_str_null(&s->smtp_from);
    ngx_str_null(&s->smtp_to);

    sscf = ngx_mail_get_module_srv_conf(s, ngx_mail_smtp_module);

    if (s->command == NGX_SMTP_HELO) {
        s->out = sscf->server_name;

    } else {
        s->esmtp = 1;

#if (NGX_MAIL_SSL)

        if (c->ssl == NULL) {
            ngx_mail_ssl_conf_t  *sslcf;

            sslcf = ngx_mail_get_module_srv_conf(s, ngx_mail_ssl_module);

            if (sslcf->starttls == NGX_MAIL_S...",596.0,653.0,1.0,1.0,58.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6206,400826,ngx_mail_smtp_auth,1,ngx_mail_smtp_auth,"ngx_int_t ngx_mail_smtp_auth (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"static ngx_int_t
ngx_mail_smtp_auth(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_int_t                  rc;
    ngx_mail_core_srv_conf_t  *cscf;
    ngx_mail_smtp_srv_conf_t  *sscf;

#if (NGX_MAIL_SSL)
    if (ngx_mail_starttls_only(s, c)) {
        return NGX_MAIL_PARSE_INVALID_COMMAND;
    }
#endif

    if (s->args.nelts == 0) {
        ngx_str_set(&s->out, smtp_invalid_argument);
        s->state = 0;
        return NGX_OK;
    }

    sscf = ngx_mail_get_module_srv_conf(s, ngx_mail_smtp_module);

    rc = ngx_mail_auth_parse(s, c);

    switch (rc) {

    case NGX_MAIL_AUTH_LOGIN:

        ngx_str_set(&s->out, smtp_username);
        s->mail_state = ngx_smtp_auth_login_username;

        return NGX_OK;

    case NGX_MAIL_AUTH_LOGIN_USERNAME:

        ngx_str_set(&s->out, smtp_password);
        s->mail_state = ngx_smtp_auth_login_password;

        return ngx_mail_auth_login_username(s, c, 1);

    case NGX_MAIL_AUTH_PLAIN:

        ngx_str_set(&s->out, smtp_next);
     ...",656.0,736.0,1.0,1.0,81.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6207,400832,ngx_mail_smtp_mail,1,ngx_mail_smtp_mail,"ngx_int_t ngx_mail_smtp_mail (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"static ngx_int_t
ngx_mail_smtp_mail(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t                 *arg, cmd;
    ngx_mail_smtp_srv_conf_t  *sscf;

    sscf = ngx_mail_get_module_srv_conf(s, ngx_mail_smtp_module);

    if (!(sscf->auth_methods & NGX_MAIL_AUTH_NONE_ENABLED)) {
        ngx_mail_smtp_log_rejected_command(s, c, ""client was rejected: \""%V\"""");
        ngx_str_set(&s->out, smtp_auth_required);
        return NGX_OK;
    }

    /* auth none */

    if (s->smtp_from.len) {
        ngx_str_set(&s->out, smtp_bad_sequence);
        return NGX_OK;
    }

    if (s->args.nelts == 0) {
        ngx_str_set(&s->out, smtp_invalid_argument);
        return NGX_OK;
    }

    arg = s->args.elts;
    arg += s->args.nelts - 1;

    cmd.len = arg->data + arg->len - s->cmd.data;
    cmd.data = s->cmd.data;

    s->smtp_from.len = cmd.len;

    s->smtp_from.data = ngx_pnalloc(c->pool, cmd.len);
    if (s->smtp_from.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcp...",739.0,786.0,1.0,1.0,48.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6208,400838,ngx_mail_smtp_starttls,1,ngx_mail_smtp_starttls,"ngx_int_t ngx_mail_smtp_starttls (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"static ngx_int_t
ngx_mail_smtp_starttls(ngx_mail_session_t *s, ngx_connection_t *c)
{
#if (NGX_MAIL_SSL)
    ngx_mail_ssl_conf_t  *sslcf;

    if (c->ssl == NULL) {
        sslcf = ngx_mail_get_module_srv_conf(s, ngx_mail_ssl_module);
        if (sslcf->starttls) {

            /*
             * RFC3207 requires us to discard any knowledge
             * obtained from client before STARTTLS.
             */

            ngx_str_null(&s->smtp_helo);
            ngx_str_null(&s->smtp_from);
            ngx_str_null(&s->smtp_to);

            s->buffer->pos = s->buffer->start;
            s->buffer->last = s->buffer->start;

            c->read->handler = ngx_mail_starttls_handler;
            return NGX_OK;
        }
    }

#endif

    return NGX_MAIL_PARSE_INVALID_COMMAND;
}",839.0,869.0,1.0,1.0,31.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6209,400844,ngx_mail_smtp_rset,1,ngx_mail_smtp_rset,"ngx_int_t ngx_mail_smtp_rset (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"static ngx_int_t
ngx_mail_smtp_rset(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_null(&s->smtp_from);
    ngx_str_null(&s->smtp_to);
    ngx_str_set(&s->out, smtp_ok);

    return NGX_OK;
}",828.0,836.0,1.0,1.0,9.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6210,400850,ngx_mail_smtp_rcpt,1,ngx_mail_smtp_rcpt,"ngx_int_t ngx_mail_smtp_rcpt (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"static ngx_int_t
ngx_mail_smtp_rcpt(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_str_t  *arg, cmd;

    if (s->smtp_from.len == 0) {
        ngx_str_set(&s->out, smtp_bad_sequence);
        return NGX_OK;
    }

    if (s->args.nelts == 0) {
        ngx_str_set(&s->out, smtp_invalid_argument);
        return NGX_OK;
    }

    arg = s->args.elts;
    arg += s->args.nelts - 1;

    cmd.len = arg->data + arg->len - s->cmd.data;
    cmd.data = s->cmd.data;

    s->smtp_to.len = cmd.len;

    s->smtp_to.data = ngx_pnalloc(c->pool, cmd.len);
    if (s->smtp_to.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(s->smtp_to.data, cmd.data, cmd.len);

    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
                   ""smtp rcpt to:\""%V\"""", &s->smtp_to);

    s->auth_method = NGX_MAIL_AUTH_NONE;

    return NGX_DONE;
}",789.0,825.0,1.0,1.0,37.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6211,400856,ngx_mail_smtp_discard_command,1,ngx_mail_smtp_discard_command,"ngx_int_t ngx_mail_smtp_discard_command (ngx_mail_session_t*,ngx_connection_t*,char*)",mail\ngx_mail_smtp_handler.c,"static ngx_int_t
ngx_mail_smtp_discard_command(ngx_mail_session_t *s, ngx_connection_t *c,
    char *err)
{
    ssize_t    n;

    n = c->recv(c, s->buffer->last, s->buffer->end - s->buffer->last);

    if (n == NGX_ERROR || n == 0) {
        ngx_mail_close_connection(c);
        return NGX_ERROR;
    }

    if (n > 0) {
        s->buffer->last += n;
    }

    if (n == NGX_AGAIN) {
        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_session_internal_server_error(s);
            return NGX_ERROR;
        }

        return NGX_AGAIN;
    }

    ngx_mail_smtp_log_rejected_command(s, c, err);

    s->buffer->pos = s->buffer->start;
    s->buffer->last = s->buffer->start;

    return NGX_OK;
}",872.0,904.0,1.0,1.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6212,400863,ngx_mail_smtp_log_rejected_command,1,ngx_mail_smtp_log_rejected_command,"void ngx_mail_smtp_log_rejected_command (ngx_mail_session_t*,ngx_connection_t*,char*)",mail\ngx_mail_smtp_handler.c,"static void
ngx_mail_smtp_log_rejected_command(ngx_mail_session_t *s, ngx_connection_t *c,
    char *err)
{
    u_char      ch;
    ngx_str_t   cmd;
    ngx_uint_t  i;

    if (c->log->log_level < NGX_LOG_INFO) {
        return;
    }

    cmd.len = s->buffer->last - s->buffer->start;
    cmd.data = s->buffer->start;

    for (i = 0; i < cmd.len; i++) {
        ch = cmd.data[i];

        if (ch != CR && ch != LF) {
            continue;
        }

        cmd.data[i] = '_';
    }

    cmd.len = i;

    ngx_log_error(NGX_LOG_INFO, c->log, 0, err, &cmd);
}",907.0,935.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
6213,400891,ngx_mail_smtp_init_session,1,ngx_mail_smtp_init_session,"void ngx_mail_smtp_init_session (ngx_mail_session_t*,ngx_connection_t*)",mail\ngx_mail_smtp_handler.c,"void
ngx_mail_smtp_init_session(ngx_mail_session_t *s, ngx_connection_t *c)
{
    ngx_resolver_ctx_t        *ctx;
    ngx_mail_core_srv_conf_t  *cscf;

    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);

    if (cscf->resolver == NULL) {
        s->host = smtp_unavailable;
        ngx_mail_smtp_greeting(s, c);
        return;
    }

#if (NGX_HAVE_UNIX_DOMAIN)
    if (c->sockaddr->sa_family == AF_UNIX) {
        s->host = smtp_tempunavail;
        ngx_mail_smtp_greeting(s, c);
        return;
    }
#endif

    c->log->action = ""in resolving client address"";

    ctx = ngx_resolve_start(cscf->resolver, NULL);
    if (ctx == NULL) {
        ngx_mail_close_connection(c);
        return;
    }

    ctx->addr.sockaddr = c->sockaddr;
    ctx->addr.socklen = c->socklen;
    ctx->handler = ngx_mail_smtp_resolve_addr_handler;
    ctx->data = s;
    ctx->timeout = cscf->resolver_timeout;

    s->resolver_ctx = ctx;
    c->read->handler = ngx_mail_smtp_block_reading;

    if (ngx...",56.0,98.0,1.0,1.0,43.0,32,5,32,9,0,11,4,4,2,5,,0,8,4,2,2,void
6214,401637,ngx_mail_smtp_init_protocol,1,ngx_mail_smtp_init_protocol,void ngx_mail_smtp_init_protocol (ngx_event_t*),mail\ngx_mail_smtp_handler.c,"void
ngx_mail_smtp_init_protocol(ngx_event_t *rev)
{
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    c = rev->data;

    c->log->action = ""in auth state"";

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_mail_close_connection(c);
        return;
    }

    s = c->data;

    if (s->buffer == NULL) {
        if (ngx_mail_smtp_create_buffer(s, c) != NGX_OK) {
            return;
        }
    }

    s->mail_state = ngx_smtp_start;
    c->read->handler = ngx_mail_smtp_auth_state;

    ngx_mail_smtp_auth_state(rev);
}",376.0,405.0,1.0,1.0,30.0,19,4,20,8,0,6,4,5,2,4,,0,3,2,1,1,void
6215,401765,ngx_mail_smtp_auth_state,1,ngx_mail_smtp_auth_state,void ngx_mail_smtp_auth_state (ngx_event_t*),mail\ngx_mail_smtp_handler.c,"void
ngx_mail_smtp_auth_state(ngx_event_t *rev)
{
    ngx_int_t            rc;
    ngx_connection_t    *c;
    ngx_mail_session_t  *s;

    c = rev->data;
    s = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""smtp auth state"");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        c->timedout = 1;
        ngx_mail_close_connection(c);
        return;
    }

    if (s->out.len) {
        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, c->log, 0, ""smtp send handler busy"");
        s->blocked = 1;

        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_close_connection(c);
            return;
        }

        return;
    }

    s->blocked = 0;

    rc = ngx_mail_read_command(s, c);

    if (rc == NGX_AGAIN) {
        if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
            ngx_mail_session_internal_server_error(s);
            return;
        }

        return;
    }

    if (rc == NGX_ERROR)...",430.0,593.0,1.0,1.0,164.0,89,7,125,32,1,50,30,23,11,23,,0,42,2,1,1,void
6216,403029,ngx_mail_smtp_create_srv_conf,1,ngx_mail_smtp_create_srv_conf,void* ngx_mail_smtp_create_srv_conf (ngx_conf_t*),mail\ngx_mail_smtp_module.c,"static void *
ngx_mail_smtp_create_srv_conf(ngx_conf_t *cf)
{
    ngx_mail_smtp_srv_conf_t  *sscf;

    sscf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_smtp_srv_conf_t));
    if (sscf == NULL) {
        return NULL;
    }

    sscf->client_buffer_size = NGX_CONF_UNSET_SIZE;
    sscf->greeting_delay = NGX_CONF_UNSET_MSEC;

    if (ngx_array_init(&sscf->capabilities, cf->pool, 4, sizeof(ngx_str_t))
        != NGX_OK)
    {
        return NULL;
    }

    return sscf;
}",117.0,137.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6217,403034,ngx_mail_smtp_merge_srv_conf,1,ngx_mail_smtp_merge_srv_conf,"char* ngx_mail_smtp_merge_srv_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail_smtp_module.c,"static char *
ngx_mail_smtp_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_mail_smtp_srv_conf_t *prev = parent;
    ngx_mail_smtp_srv_conf_t *conf = child;

    u_char                    *p, *auth, *last;
    size_t                     size;
    ngx_str_t                 *c;
    ngx_uint_t                 i, m, auth_enabled;
    ngx_mail_core_srv_conf_t  *cscf;

    ngx_conf_merge_size_value(conf->client_buffer_size,
                              prev->client_buffer_size,
                              (size_t) ngx_pagesize);

    ngx_conf_merge_msec_value(conf->greeting_delay,
                              prev->greeting_delay, 0);

    ngx_conf_merge_bitmask_value(conf->auth_methods,
                              prev->auth_methods,
                              (NGX_CONF_BITMASK_SET
                               |NGX_MAIL_AUTH_PLAIN_ENABLED
                               |NGX_MAIL_AUTH_LOGIN_ENABLED));


    cscf = ngx_mail_conf_get_module_srv_conf(cf, ngx_ma...",140.0,311.0,1.0,1.0,172.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6218,403988,ngx_mail_ssl_create_conf,1,ngx_mail_ssl_create_conf,void* ngx_mail_ssl_create_conf (ngx_conf_t*),mail\ngx_mail_ssl_module.c,"static void *
ngx_mail_ssl_create_conf(ngx_conf_t *cf)
{
    ngx_mail_ssl_conf_t  *scf;

    scf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_ssl_conf_t));
    if (scf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     scf->listen = 0;
     *     scf->protocols = 0;
     *     scf->dhparam = { 0, NULL };
     *     scf->ecdh_curve = { 0, NULL };
     *     scf->client_certificate = { 0, NULL };
     *     scf->trusted_certificate = { 0, NULL };
     *     scf->crl = { 0, NULL };
     *     scf->ciphers = { 0, NULL };
     *     scf->shm_zone = NULL;
     */

    scf->enable = NGX_CONF_UNSET;
    scf->starttls = NGX_CONF_UNSET_UINT;
    scf->certificates = NGX_CONF_UNSET_PTR;
    scf->certificate_keys = NGX_CONF_UNSET_PTR;
    scf->passwords = NGX_CONF_UNSET_PTR;
    scf->conf_commands = NGX_CONF_UNSET_PTR;
    scf->prefer_server_ciphers = NGX_CONF_UNSET;
    scf->verify = NGX_CONF_UNSET_UINT;
    scf->verify_depth = NGX_CONF_UNSET_UINT;
    scf->...",247.0,286.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6219,403993,ngx_mail_ssl_merge_conf,1,ngx_mail_ssl_merge_conf,"char* ngx_mail_ssl_merge_conf (ngx_conf_t*,void*,void*)",mail\ngx_mail_ssl_module.c,"static char *
ngx_mail_ssl_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_mail_ssl_conf_t *prev = parent;
    ngx_mail_ssl_conf_t *conf = child;

    char                *mode;
    ngx_pool_cleanup_t  *cln;

    ngx_conf_merge_value(conf->enable, prev->enable, 0);
    ngx_conf_merge_uint_value(conf->starttls, prev->starttls,
                         NGX_MAIL_STARTTLS_OFF);

    ngx_conf_merge_value(conf->session_timeout,
                         prev->session_timeout, 300);

    ngx_conf_merge_value(conf->prefer_server_ciphers,
                         prev->prefer_server_ciphers, 0);

    ngx_conf_merge_bitmask_value(conf->protocols, prev->protocols,
                         (NGX_CONF_BITMASK_SET|NGX_SSL_TLSv1
                          |NGX_SSL_TLSv1_1|NGX_SSL_TLSv1_2));

    ngx_conf_merge_uint_value(conf->verify, prev->verify, 0);
    ngx_conf_merge_uint_value(conf->verify_depth, prev->verify_depth, 1);

    ngx_conf_merge_ptr_value(conf->certificates, prev->cert...",289.0,486.0,1.0,25.0,198.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6220,404000,ngx_mail_ssl_enable,1,ngx_mail_ssl_enable,"char* ngx_mail_ssl_enable (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_ssl_module.c,"static char *
ngx_mail_ssl_enable(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_ssl_conf_t  *scf = conf;

    char  *rv;

    rv = ngx_conf_set_flag_slot(cf, cmd, conf);

    if (rv != NGX_CONF_OK) {
        return rv;
    }

    if (scf->enable && (ngx_int_t) scf->starttls > NGX_MAIL_STARTTLS_OFF) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""\""starttls\"" directive conflicts with \""ssl on\"""");
        return NGX_CONF_ERROR;
    }

    if (!scf->listen) {
        scf->file = cf->conf_file->file.name.data;
        scf->line = cf->conf_file->line;
    }

    return NGX_CONF_OK;
}",489.0,514.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6221,404007,ngx_mail_ssl_starttls,1,ngx_mail_ssl_starttls,"char* ngx_mail_ssl_starttls (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_ssl_module.c,"static char *
ngx_mail_ssl_starttls(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_ssl_conf_t  *scf = conf;

    char  *rv;

    rv = ngx_conf_set_enum_slot(cf, cmd, conf);

    if (rv != NGX_CONF_OK) {
        return rv;
    }

    if (scf->enable == 1 && (ngx_int_t) scf->starttls > NGX_MAIL_STARTTLS_OFF) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""\""ssl\"" directive conflicts with \""starttls\"""");
        return NGX_CONF_ERROR;
    }

    if (!scf->listen) {
        scf->file = cf->conf_file->file.name.data;
        scf->line = cf->conf_file->line;
    }

    return NGX_CONF_OK;
}",517.0,542.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6222,404014,ngx_mail_ssl_password_file,1,ngx_mail_ssl_password_file,"char* ngx_mail_ssl_password_file (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_ssl_module.c,"static char *
ngx_mail_ssl_password_file(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_ssl_conf_t  *scf = conf;

    ngx_str_t  *value;

    if (scf->passwords != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    scf->passwords = ngx_ssl_read_password_file(cf, &value[1]);

    if (scf->passwords == NULL) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",545.0,565.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6223,404021,ngx_mail_ssl_session_cache,1,ngx_mail_ssl_session_cache,"char* ngx_mail_ssl_session_cache (ngx_conf_t*,ngx_command_t*,void*)",mail\ngx_mail_ssl_module.c,"static char *
ngx_mail_ssl_session_cache(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_mail_ssl_conf_t  *scf = conf;

    size_t       len;
    ngx_str_t   *value, name, size;
    ngx_int_t    n;
    ngx_uint_t   i, j;

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {

        if (ngx_strcmp(value[i].data, ""off"") == 0) {
            scf->builtin_session_cache = NGX_SSL_NO_SCACHE;
            continue;
        }

        if (ngx_strcmp(value[i].data, ""none"") == 0) {
            scf->builtin_session_cache = NGX_SSL_NONE_SCACHE;
            continue;
        }

        if (ngx_strcmp(value[i].data, ""builtin"") == 0) {
            scf->builtin_session_cache = NGX_SSL_DFLT_BUILTIN_SCACHE;
            continue;
        }

        if (value[i].len > sizeof(""builtin:"") - 1
            && ngx_strncmp(value[i].data, ""builtin:"", sizeof(""builtin:"") - 1)
               == 0)
        {
            n = ngx_atoi(value[i].data + sizeof(""builtin:"") - 1,
            ...",568.0,677.0,1.0,1.0,110.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6224,404028,ngx_mail_ssl_conf_command_check,1,ngx_mail_ssl_conf_command_check,"char* ngx_mail_ssl_conf_command_check (ngx_conf_t*,void*,void*)",mail\ngx_mail_ssl_module.c,"static char *
ngx_mail_ssl_conf_command_check(ngx_conf_t *cf, void *post, void *data)
{
#ifndef SSL_CONF_FLAG_FILE
    return ""is not supported on this platform"";
#else
    return NGX_CONF_OK;
#endif
}",680.0,688.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6225,405765,ngx_cpp_test_handler,1,ngx_cpp_test_handler,void ngx_cpp_test_handler (void*),misc\ngx_cpp_test_module.cpp,"void
ngx_cpp_test_handler(void *data)
{
    return;
}",27.0,31.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6226,405785,ProfilerStart,1,ProfilerStart,int ProfilerStart (u_char*),misc\ngx_google_perftools_module.c,int ProfilerStart(u_char* fname);,16.0,16.0,5.0,32.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,int
6227,405790,ProfilerStop,1,ProfilerStop,void ProfilerStop (void),misc\ngx_google_perftools_module.c,void ProfilerStop(void);,17.0,17.0,6.0,23.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6228,405795,ProfilerRegisterThread,1,ProfilerRegisterThread,void ProfilerRegisterThread (void),misc\ngx_google_perftools_module.c,void ProfilerRegisterThread(void);,18.0,18.0,6.0,33.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6229,405800,ngx_google_perftools_create_conf,1,ngx_google_perftools_create_conf,void* ngx_google_perftools_create_conf (ngx_cycle_t*),misc\ngx_google_perftools_module.c,"static void *
ngx_google_perftools_create_conf(ngx_cycle_t *cycle)
{
    ngx_google_perftools_conf_t  *gptcf;

    gptcf = ngx_pcalloc(cycle->pool, sizeof(ngx_google_perftools_conf_t));
    if (gptcf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc()
     *
     *     gptcf->profiles = { 0, NULL };
     */

    return gptcf;
}",66.0,83.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6230,405805,ngx_google_perftools_worker,1,ngx_google_perftools_worker,ngx_int_t ngx_google_perftools_worker (ngx_cycle_t*),misc\ngx_google_perftools_module.c,"static ngx_int_t
ngx_google_perftools_worker(ngx_cycle_t *cycle)
{
    u_char                       *profile;
    ngx_google_perftools_conf_t  *gptcf;

    gptcf = (ngx_google_perftools_conf_t *)
                ngx_get_conf(cycle->conf_ctx, ngx_google_perftools_module);

    if (gptcf->profiles.len == 0) {
        return NGX_OK;
    }

    profile = ngx_alloc(gptcf->profiles.len + NGX_INT_T_LEN + 2, cycle->log);
    if (profile == NULL) {
        return NGX_OK;
    }

    if (getenv(""CPUPROFILE"")) {
        /* disable inherited Profiler enabled in master process */
        ProfilerStop();
    }

    ngx_sprintf(profile, ""%V.%d%Z"", &gptcf->profiles, ngx_pid);

    if (ProfilerStart(profile)) {
        /* start ITIMER_PROF timer */
        ProfilerRegisterThread();

    } else {
        ngx_log_error(NGX_LOG_CRIT, cycle->log, ngx_errno,
                      ""ProfilerStart(%s) failed"", profile);
    }

    ngx_free(profile);

    return NGX_OK;
}",86.0,123.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6231,405973,ngx_alloc,1,ngx_alloc,"void* ngx_alloc (size_t,ngx_log_t*)",os\win32\ngx_alloc.c,"void *ngx_alloc(size_t size, ngx_log_t *log)
{
    void  *p;

    p = malloc(size);
    if (p == NULL) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                      ""malloc(%uz) failed"", size);
    }

    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, log, 0, ""malloc: %p:%uz"", p, size);

    return p;
}",17.0,30.0,1.0,1.0,14.0,2,2,13,7,15,1,2,2,0,1,,0,0,4,2,2,void*
6232,406004,ngx_calloc,1,ngx_calloc,"void* ngx_calloc (size_t,ngx_log_t*)",os\win32\ngx_alloc.c,"void *ngx_calloc(size_t size, ngx_log_t *log)
{
    void  *p;

    p = ngx_alloc(size, log);

    if (p) {
        ngx_memzero(p, size);
    }

    return p;
}",33.0,44.0,1.0,1.0,12.0,1,1,7,3,0,1,2,2,0,1,,0,1,4,2,2,void*
6233,406076,ngx_atomic_cmp_set,1,ngx_atomic_cmp_set,"ANY ngx_atomic_cmp_set (ngx_atomic_t*,ngx_atomic_uint_t,ngx_atomic_uint_t)",os\unix\ngx_sunpro_atomic_sparc64.h,"ngx_atomic_cmp_set(ngx_atomic_t *lock, ngx_atomic_uint_t old,
    ngx_atomic_uint_t set)
{
    set = NGX_CASA(set, old, lock);

    return (set == old);
}",25.0,31.0,1.0,10.0,7.0,4,3,4,3,1,0,2,2,0,0,,0,0,6,3,3,ANY
6234,406099,ngx_atomic_fetch_add,1,ngx_atomic_fetch_add,"ANY ngx_atomic_fetch_add (ngx_atomic_t*,ngx_atomic_int_t)",os\unix\ngx_sunpro_atomic_sparc64.h,"ngx_atomic_fetch_add(ngx_atomic_t *value, ngx_atomic_int_t add)
{
    ngx_atomic_uint_t  old, res;

    old = *value;

    for ( ;; ) {

        res = old + add;

        res = NGX_CASA(res, old, value);

        if (res == old) {
            return res;
        }

        old = res;
    }
}",35.0,53.0,1.0,14.0,19.0,4,3,5,3,3,0,1,1,0,0,,0,0,4,2,2,ANY
6235,406134,ngx_write_channel,1,ngx_write_channel,"ngx_int_t ngx_write_channel (ngx_socket_t,ngx_channel_t*,size_t,ngx_log_t*)",os\unix\ngx_channel.c,"ngx_int_t
ngx_write_channel(ngx_socket_t s, ngx_channel_t *ch, size_t size,
    ngx_log_t *log)
{
    ssize_t             n;
    ngx_err_t           err;
    struct iovec        iov[1];
    struct msghdr       msg;

#if (NGX_HAVE_MSGHDR_MSG_CONTROL)

    union {
        struct cmsghdr  cm;
        char            space[CMSG_SPACE(sizeof(int))];
    } cmsg;

    if (ch->fd == -1) {
        msg.msg_control = NULL;
        msg.msg_controllen = 0;

    } else {
        msg.msg_control = (caddr_t) &cmsg;
        msg.msg_controllen = sizeof(cmsg);

        ngx_memzero(&cmsg, sizeof(cmsg));

        cmsg.cm.cmsg_len = CMSG_LEN(sizeof(int));
        cmsg.cm.cmsg_level = SOL_SOCKET;
        cmsg.cm.cmsg_type = SCM_RIGHTS;

        /*
         * We have to use ngx_memcpy() instead of simple
         *   *(int *) CMSG_DATA(&cmsg.cm) = ch->fd;
         * because some gcc 4.4 with -O2/3/s optimization issues the warning:
         *   dereferencing type-punned pointer will break strict-aliasing r...",13.0,92.0,1.0,1.0,80.0,28,8,28,15,0,2,4,5,1,1,,0,1,8,4,4,ngx_int_t
6236,406249,ngx_read_channel,1,ngx_read_channel,"ngx_int_t ngx_read_channel (ngx_socket_t,ngx_channel_t*,size_t,ngx_log_t*)",os\unix\ngx_channel.c,"ngx_int_t
ngx_read_channel(ngx_socket_t s, ngx_channel_t *ch, size_t size, ngx_log_t *log)
{
    ssize_t             n;
    ngx_err_t           err;
    struct iovec        iov[1];
    struct msghdr       msg;

#if (NGX_HAVE_MSGHDR_MSG_CONTROL)
    union {
        struct cmsghdr  cm;
        char            space[CMSG_SPACE(sizeof(int))];
    } cmsg;
#else
    int                 fd;
#endif

    iov[0].iov_base = (char *) ch;
    iov[0].iov_len = size;

    msg.msg_name = NULL;
    msg.msg_namelen = 0;
    msg.msg_iov = iov;
    msg.msg_iovlen = 1;

#if (NGX_HAVE_MSGHDR_MSG_CONTROL)
    msg.msg_control = (caddr_t) &cmsg;
    msg.msg_controllen = sizeof(cmsg);
#else
    msg.msg_accrights = (caddr_t) &fd;
    msg.msg_accrightslen = sizeof(int);
#endif

    n = recvmsg(s, &msg, 0);

    if (n == -1) {
        err = ngx_errno;
        if (err == NGX_EAGAIN) {
            return NGX_AGAIN;
        }

        ngx_log_error(NGX_LOG_ALERT, log, err, ""recvmsg() failed"");
        return NGX_E...",95.0,195.0,1.0,1.0,101.0,38,12,48,20,0,5,7,9,1,3,,0,2,8,4,4,ngx_int_t
6237,406398,ngx_add_channel_event,1,ngx_add_channel_event,"ngx_int_t ngx_add_channel_event (ngx_cycle_t*,ngx_fd_t,ngx_int_t,ngx_event_handler_pt)",os\unix\ngx_channel.c,"ngx_int_t
ngx_add_channel_event(ngx_cycle_t *cycle, ngx_fd_t fd, ngx_int_t event,
    ngx_event_handler_pt handler)
{
    ngx_event_t       *ev, *rev, *wev;
    ngx_connection_t  *c;

    c = ngx_get_connection(fd, cycle->log);

    if (c == NULL) {
        return NGX_ERROR;
    }

    c->pool = cycle->pool;

    rev = c->read;
    wev = c->write;

    rev->log = cycle->log;
    wev->log = cycle->log;

    rev->channel = 1;
    wev->channel = 1;

    ev = (event == NGX_READ_EVENT) ? rev : wev;

    ev->handler = handler;

    if (ngx_add_conn && (ngx_event_flags & NGX_USE_EPOLL_EVENT) == 0) {
        if (ngx_add_conn(c) == NGX_ERROR) {
            ngx_free_connection(c);
            return NGX_ERROR;
        }

    } else {
        if (ngx_add_event(ev, event, 0) == NGX_ERROR) {
            ngx_free_connection(c);
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",198.0,240.0,1.0,1.0,43.0,29,6,33,15,0,2,4,5,0,2,,0,1,8,4,4,ngx_int_t
6238,406513,ngx_close_channel,1,ngx_close_channel,"void ngx_close_channel (ngx_fd_t*,ngx_log_t*)",os\unix\ngx_channel.c,"void
ngx_close_channel(ngx_fd_t *fd, ngx_log_t *log)
{
    if (close(fd[0]) == -1) {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno, ""close() channel failed"");
    }

    if (close(fd[1]) == -1) {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno, ""close() channel failed"");
    }
}",243.0,253.0,1.0,1.0,11.0,6,3,8,4,7,2,3,3,0,2,,0,0,4,2,2,void
6239,406603,ngx_daemon,1,ngx_daemon,ngx_int_t ngx_daemon (ngx_log_t*),os\unix\ngx_daemon.c,"ngx_int_t
ngx_daemon(ngx_log_t *log)
{
    int  fd;

    switch (fork()) {
    case -1:
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno, ""fork() failed"");
        return NGX_ERROR;

    case 0:
        break;

    default:
        exit(0);
    }

    ngx_parent = ngx_pid;
    ngx_pid = ngx_getpid();

    if (setsid() == -1) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno, ""setsid() failed"");
        return NGX_ERROR;
    }

    umask(0);

    fd = open(""/dev/null"", O_RDWR);
    if (fd == -1) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                      ""open(\""/dev/null\"") failed"");
        return NGX_ERROR;
    }

    if (dup2(fd, STDIN_FILENO) == -1) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno, ""dup2(STDIN) failed"");
        return NGX_ERROR;
    }

    if (dup2(fd, STDOUT_FILENO) == -1) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno, ""dup2(STDOUT) failed"");
        return NGX_ERROR;
    }

#if 0
    if (dup2(fd, STDERR_FILENO) == -1) {
  ...",12.0,71.0,1.0,1.0,60.0,15,4,38,12,1,6,9,9,0,6,,0,0,2,1,1,ngx_int_t
6240,406723,ngx_debug_init,1,ngx_debug_init,void ngx_debug_init (void),os\unix\ngx_freebsd_init.c,"void
ngx_debug_init(void)
{
#if (NGX_DEBUG_MALLOC)

#if __FreeBSD_version >= 500014 && __FreeBSD_version < 1000011
    _malloc_options = ""J"";
#elif __FreeBSD_version < 500014
    malloc_options = ""J"";
#endif

    ngx_debug_malloc = 1;

#else
    char  *mo;

    mo = getenv(""MALLOC_OPTIONS"");

    if (mo && ngx_strchr(mo, 'J')) {
        ngx_debug_malloc = 1;
    }
#endif
}",76.0,98.0,1.0,1.0,23.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
6241,406728,ngx_darwin_sendfile_chain,1,ngx_darwin_sendfile_chain,"ngx_chain_t* ngx_darwin_sendfile_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_darwin_sendfile_chain.c,"ngx_chain_t *
ngx_darwin_sendfile_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    int              rc;
    off_t            send, prev_send, sent;
    off_t            file_size;
    ssize_t          n;
    ngx_uint_t       eintr;
    ngx_err_t        err;
    ngx_buf_t       *file;
    ngx_event_t     *wev;
    ngx_chain_t     *cl;
    ngx_iovec_t      header, trailer;
    struct sf_hdtr   hdtr;
    struct iovec     headers[NGX_IOVS_PREALLOCATE];
    struct iovec     trailers[NGX_IOVS_PREALLOCATE];

    wev = c->write;

    if (!wev->ready) {
        return in;
    }

#if (NGX_HAVE_KQUEUE)

    if ((ngx_event_flags & NGX_USE_KQUEUE_EVENT) && wev->pending_eof) {
        (void) ngx_connection_error(c, wev->kq_errno,
                               ""kevent() reported about an closed connection"");
        wev->error = 1;
        return NGX_CHAIN_ERROR;
    }

#endif

    /* the maximum limit size is the maximum size_t value - the page size */

    if (limit == 0 || limit ...",30.0,206.0,1.0,1.0,177.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6242,406902,ngx_os_specific_init,1,ngx_os_specific_init,ngx_int_t ngx_os_specific_init (ngx_log_t*),os\unix\ngx_solaris_init.c,"ngx_int_t
ngx_os_specific_init(ngx_log_t *log)
{
    if (sysinfo(SI_SYSNAME, ngx_solaris_sysname, sizeof(ngx_solaris_sysname))
        == -1)
    {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ""sysinfo(SI_SYSNAME) failed"");
        return NGX_ERROR;
    }

    if (sysinfo(SI_RELEASE, ngx_solaris_release, sizeof(ngx_solaris_release))
        == -1)
    {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ""sysinfo(SI_RELEASE) failed"");
        return NGX_ERROR;
    }

    if (sysinfo(SI_VERSION, ngx_solaris_version, sizeof(ngx_solaris_version))
        == -1)
    {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ""sysinfo(SI_SYSNAME) failed"");
        return NGX_ERROR;
    }


    ngx_os_io = ngx_solaris_io;

    return NGX_OK;
}",34.0,65.0,1.0,1.0,32.0,45,10,68,20,0,19,13,19,6,4,,0,15,2,1,1,ngx_int_t
6243,407087,ngx_os_specific_status,1,ngx_os_specific_status,void ngx_os_specific_status (ngx_log_t*),os\unix\ngx_solaris_init.c,"void
ngx_os_specific_status(ngx_log_t *log)
{

    ngx_log_error(NGX_LOG_NOTICE, log, 0, ""OS: %s %s"",
                  ngx_solaris_sysname, ngx_solaris_release);

    ngx_log_error(NGX_LOG_NOTICE, log, 0, ""version: %s"",
                  ngx_solaris_version);
}",68.0,77.0,1.0,1.0,10.0,17,7,21,8,0,10,5,8,4,2,,0,8,2,1,1,void
6244,407625,ngx_strerror,1,ngx_strerror,"u_char ngx_strerror (ngx_err_t,u_char*,size_t)",os\win32\ngx_errno.c,"u_char *
ngx_strerror(ngx_err_t err, u_char *errstr, size_t size)
{
    u_int          len;
    static u_long  lang = MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US);

    if (size == 0) {
        return errstr;
    }

    len = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,
                        NULL, err, lang, (char *) errstr, size, NULL);

    if (len == 0 && lang) {

        /*
         * Try to use English messages first and fallback to a language,
         * based on locale: non-English Windows have no English messages
         * at all.  This way allows to use English messages at least on
         * Windows with MUI.
         */

        lang = 0;

        len = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,
                            NULL, err, lang, (char *) errstr, size, NULL);
    }

    if (len == 0) {
        return ngx_snprintf(errstr, size,
                            ""FormatMessage() error:(%d)"", GetLastError());
    }

    /* remove "".\r\n\0"" */
    while (errstr[len] == '\0...",12.0,53.0,1.0,1.0,42.0,10,8,14,7,2,6,2,2,2,0,,0,6,6,3,3,u_char
6245,407670,ngx_strerror_init,1,ngx_strerror_init,ngx_int_t ngx_strerror_init (void),os\win32\ngx_errno.c,"ngx_int_t
ngx_strerror_init(void)
{
    return NGX_OK;
}",56.0,60.0,1.0,1.0,5.0,36,10,56,14,1,16,11,10,2,1,,0,15,2,1,1,ngx_int_t
6246,407852,ngx_file_aio_result,1,ngx_file_aio_result,"ssize_t ngx_file_aio_result (ngx_file_t*,ngx_event_aio_t*,ngx_event_t*)",os\unix\ngx_file_aio_read.c,"static ssize_t
ngx_file_aio_result(ngx_file_t *file, ngx_event_aio_t *aio, ngx_event_t *ev)
{
    int        n;
    ngx_err_t  err;

    n = aio_error(&aio->aiocb);

    ngx_log_debug2(NGX_LOG_DEBUG_CORE, file->log, 0,
                   ""aio_error: fd:%d %d"", file->fd, n);

    if (n == -1) {
        err = ngx_errno;
        aio->err = err;

        ngx_log_error(NGX_LOG_ALERT, file->log, err,
                      ""aio_error(\""%V\"") failed"", &file->name);
        return NGX_ERROR;
    }

    if (n == NGX_EINPROGRESS) {
        if (ev->ready) {
            ev->ready = 0;
            ngx_log_error(NGX_LOG_ALERT, file->log, n,
                          ""aio_read(\""%V\"") still in progress"",
                          &file->name);
        }

        return NGX_AGAIN;
    }

    n = aio_return(&aio->aiocb);

    if (n == -1) {
        err = ngx_errno;
        aio->err = err;
        ev->ready = 1;

        ngx_log_error(NGX_LOG_CRIT, file->log, err,
                      ""aio_return(\""%...",148.0,200.0,1.0,1.0,53.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ssize_t
6247,407859,ngx_file_aio_event_handler,1,ngx_file_aio_event_handler,void ngx_file_aio_event_handler (ngx_event_t*),os\unix\ngx_linux_aio_read.c,"static void
ngx_file_aio_event_handler(ngx_event_t *ev)
{
    ngx_event_aio_t  *aio;

    aio = ev->data;

    ngx_log_debug2(NGX_LOG_DEBUG_CORE, ev->log, 0,
                   ""aio event handler fd:%d %V"", aio->fd, &aio->file->name);

    aio->handler(ev);
}",137.0,148.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6248,407864,ngx_file_aio_init,1,ngx_file_aio_init,"ngx_int_t ngx_file_aio_init (ngx_file_t*,ngx_pool_t*)",os\unix\ngx_linux_aio_read.c,"ngx_int_t
ngx_file_aio_init(ngx_file_t *file, ngx_pool_t *pool)
{
    ngx_event_aio_t  *aio;

    aio = ngx_pcalloc(pool, sizeof(ngx_event_aio_t));
    if (aio == NULL) {
        return NGX_ERROR;
    }

    aio->file = file;
    aio->fd = file->fd;
    aio->event.data = aio;
    aio->event.ready = 1;
    aio->event.log = file->log;

    file->aio = aio;

    return NGX_OK;
}",27.0,46.0,1.0,1.0,20.0,20,5,18,7,1,1,2,2,0,1,,0,1,4,2,2,ngx_int_t
6249,407926,ngx_file_aio_read,1,ngx_file_aio_read,"ssize_t ngx_file_aio_read (ngx_file_t*,u_char*,size_t,off_t,ngx_pool_t*)",os\unix\ngx_linux_aio_read.c,"ssize_t
ngx_file_aio_read(ngx_file_t *file, u_char *buf, size_t size, off_t offset,
    ngx_pool_t *pool)
{
    ngx_err_t         err;
    struct iocb      *piocb[1];
    ngx_event_t      *ev;
    ngx_event_aio_t  *aio;

    if (!ngx_file_aio) {
        return ngx_read_file(file, buf, size, offset);
    }

    if (file->aio == NULL && ngx_file_aio_init(file, pool) != NGX_OK) {
        return NGX_ERROR;
    }

    aio = file->aio;
    ev = &aio->event;

    if (!ev->ready) {
        ngx_log_error(NGX_LOG_ALERT, file->log, 0,
                      ""second aio post for \""%V\"""", &file->name);
        return NGX_AGAIN;
    }

    ngx_log_debug4(NGX_LOG_DEBUG_CORE, file->log, 0,
                   ""aio complete:%d @%O:%uz %V"",
                   ev->complete, offset, size, &file->name);

    if (ev->complete) {
        ev->active = 0;
        ev->complete = 0;

        if (aio->res >= 0) {
            ngx_set_errno(0);
            return aio->res;
        }

        ngx_set_errno(-aio->re...",49.0,134.0,1.0,1.0,86.0,68,10,81,21,0,8,9,12,1,8,,0,1,10,5,5,ssize_t
6250,408384,ngx_chain_to_iovec,1,ngx_chain_to_iovec,"ngx_chain_t* ngx_chain_to_iovec (ngx_iovec_t*,ngx_chain_t*)",os\unix\ngx_files.c,"static ngx_chain_t *
ngx_chain_to_iovec(ngx_iovec_t *vec, ngx_chain_t *cl)
{
    size_t         total, size;
    u_char        *prev;
    ngx_uint_t     n;
    struct iovec  *iov;

    iov = NULL;
    prev = NULL;
    total = 0;
    n = 0;

    for ( /* void */ ; cl; cl = cl->next) {

        if (ngx_buf_special(cl->buf)) {
            continue;
        }

        size = cl->buf->last - cl->buf->pos;

        if (prev == cl->buf->pos) {
            iov->iov_len += size;

        } else {
            if (n == vec->nalloc) {
                break;
            }

            iov = &vec->iovs[n++];

            iov->iov_base = (void *) cl->buf->pos;
            iov->iov_len = size;
        }

        prev = cl->buf->pos + size;
        total += size;
    }

    vec->count = n;
    vec->size = total;

    return cl;
}",345.0,388.0,1.0,1.0,44.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_chain_t
6251,408390,ngx_writev_file,1,ngx_writev_file,"ssize_t ngx_writev_file (ngx_file_t*,ngx_iovec_t*,off_t)",os\unix\ngx_files.c,"static ssize_t
ngx_writev_file(ngx_file_t *file, ngx_iovec_t *vec, off_t offset)
{
    ssize_t    n;
    ngx_err_t  err;

    ngx_log_debug3(NGX_LOG_DEBUG_CORE, file->log, 0,
                   ""writev: %d, %uz, %O"", file->fd, vec->size, offset);

#if (NGX_HAVE_PWRITEV)

eintr:

    n = pwritev(file->fd, vec->iovs, vec->count, offset);

    if (n == -1) {
        err = ngx_errno;

        if (err == NGX_EINTR) {
            ngx_log_debug0(NGX_LOG_DEBUG_CORE, file->log, err,
                           ""pwritev() was interrupted"");
            goto eintr;
        }

        ngx_log_error(NGX_LOG_CRIT, file->log, err,
                      ""pwritev() \""%s\"" failed"", file->name.data);
        return NGX_ERROR;
    }

    if ((size_t) n != vec->size) {
        ngx_log_error(NGX_LOG_CRIT, file->log, 0,
                      ""pwritev() \""%s\"" has written only %z of %uz"",
                      file->name.data, n, vec->size);
        return NGX_ERROR;
    }

#else

    if (file->sys_offset !...",391.0,471.0,1.0,1.0,81.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ssize_t
6252,408397,ngx_read_file,1,ngx_read_file,"ssize_t ngx_read_file (ngx_file_t*,u_char*,size_t,off_t)",os\win32\ngx_files.c,"ssize_t
ngx_read_file(ngx_file_t *file, u_char *buf, size_t size, off_t offset)
{
    u_long      n;
    ngx_err_t   err;
    OVERLAPPED  ovlp, *povlp;

    ovlp.Internal = 0;
    ovlp.InternalHigh = 0;
    ovlp.Offset = (u_long) offset;
    ovlp.OffsetHigh = (u_long) (offset >> 32);
    ovlp.hEvent = NULL;

    povlp = &ovlp;

    if (ReadFile(file->fd, buf, size, &n, povlp) == 0) {
        err = ngx_errno;

        if (err == ERROR_HANDLE_EOF) {
            return 0;
        }

        ngx_log_error(NGX_LOG_ERR, file->log, err,
                      ""ReadFile() \""%s\"" failed"", file->name.data);
        return NGX_ERROR;
    }

    file->offset += n;

    return n;
}",61.0,91.0,1.0,1.0,31.0,23,7,33,10,4,2,4,5,0,2,,0,0,8,4,4,ssize_t
6253,408496,ngx_write_file,1,ngx_write_file,"ssize_t ngx_write_file (ngx_file_t*,u_char*,size_t,off_t)",os\win32\ngx_files.c,"ssize_t
ngx_write_file(ngx_file_t *file, u_char *buf, size_t size, off_t offset)
{
    u_long      n;
    OVERLAPPED  ovlp, *povlp;

    ovlp.Internal = 0;
    ovlp.InternalHigh = 0;
    ovlp.Offset = (u_long) offset;
    ovlp.OffsetHigh = (u_long) (offset >> 32);
    ovlp.hEvent = NULL;

    povlp = &ovlp;

    if (WriteFile(file->fd, buf, size, &n, povlp) == 0) {
        ngx_log_error(NGX_LOG_ERR, file->log, ngx_errno,
                      ""WriteFile() \""%s\"" failed"", file->name.data);
        return NGX_ERROR;
    }

    if (n != size) {
        ngx_log_error(NGX_LOG_CRIT, file->log, 0,
                      ""WriteFile() \""%s\"" has written only %ul of %uz"",
                      file->name.data, n, size);
        return NGX_ERROR;
    }

    file->offset += n;

    return n;
}",94.0,124.0,1.0,1.0,31.0,32,10,48,13,3,2,8,12,0,2,,0,0,8,4,4,ssize_t
6254,408634,ngx_open_tempfile,1,ngx_open_tempfile,"ngx_fd_t ngx_open_tempfile (u_char*,ngx_uint_t,ngx_uint_t)",os\unix\ngx_files.c,"ngx_fd_t
ngx_open_tempfile(u_char *name, ngx_uint_t persistent, ngx_uint_t access)
{
    ngx_fd_t  fd;

    fd = open((const char *) name, O_CREAT|O_EXCL|O_RDWR,
              access ? access : 0600);

    if (fd != -1 && !persistent) {
        (void) unlink((const char *) name);
    }

    return fd;
}",276.0,289.0,1.0,1.0,14.0,11,8,11,7,1,0,2,2,0,0,,0,0,6,3,3,ngx_fd_t
6255,408674,ngx_write_chain_to_file,1,ngx_write_chain_to_file,"ssize_t ngx_write_chain_to_file (ngx_file_t*,ngx_chain_t*,off_t,ngx_pool_t*)",os\win32\ngx_files.c,"ssize_t
ngx_write_chain_to_file(ngx_file_t *file, ngx_chain_t *cl, off_t offset,
    ngx_pool_t *pool)
{
    u_char   *buf, *prev;
    size_t    size;
    ssize_t   total, n;

    total = 0;

    while (cl) {
        buf = cl->buf->pos;
        prev = buf;
        size = 0;

        /* coalesce the neighbouring bufs */

        while (cl && prev == cl->buf->pos) {
            size += cl->buf->last - cl->buf->pos;
            prev = cl->buf->last;
            cl = cl->next;
        }

        n = ngx_write_file(file, buf, size, offset);

        if (n == NGX_ERROR) {
            return NGX_ERROR;
        }

        total += n;
        offset += n;
    }

    return total;
}",127.0,161.0,1.0,1.0,35.0,31,10,39,10,1,7,6,10,1,4,,0,6,8,4,4,ssize_t
6256,409066,ngx_set_file_time,1,ngx_set_file_time,"ngx_int_t ngx_set_file_time (u_char*,ngx_fd_t,time_t)",os\win32\ngx_files.c,"ngx_int_t
ngx_set_file_time(u_char *name, ngx_fd_t fd, time_t s)
{
    uint64_t  intervals;
    FILETIME  ft;

    /* 116444736000000000 is commented in src/os/win32/ngx_time.c */

    intervals = s * 10000000 + 116444736000000000;

    ft.dwLowDateTime = (DWORD) intervals;
    ft.dwHighDateTime = (DWORD) (intervals >> 32);

    if (SetFileTime(fd, NULL, NULL, &ft) != 0) {
        return NGX_OK;
    }

    return NGX_ERROR;
}",305.0,323.0,1.0,1.0,19.0,15,6,9,5,2,0,2,2,0,0,,0,0,6,3,3,ngx_int_t
6257,409116,ngx_create_file_mapping,1,ngx_create_file_mapping,ngx_int_t ngx_create_file_mapping (ngx_file_mapping_t*),os\win32\ngx_files.c,"ngx_int_t
ngx_create_file_mapping(ngx_file_mapping_t *fm)
{
    LARGE_INTEGER  size;

    fm->fd = ngx_open_file(fm->name, NGX_FILE_RDWR, NGX_FILE_TRUNCATE,
                           NGX_FILE_DEFAULT_ACCESS);

    if (fm->fd == NGX_INVALID_FILE) {
        ngx_log_error(NGX_LOG_CRIT, fm->log, ngx_errno,
                      ngx_open_file_n "" \""%s\"" failed"", fm->name);
        return NGX_ERROR;
    }

    fm->handle = NULL;

    size.QuadPart = fm->size;

    if (SetFilePointerEx(fm->fd, size, NULL, FILE_BEGIN) == 0) {
        ngx_log_error(NGX_LOG_CRIT, fm->log, ngx_errno,
                      ""SetFilePointerEx(\""%s\"", %uz) failed"",
                      fm->name, fm->size);
        goto failed;
    }

    if (SetEndOfFile(fm->fd) == 0) {
        ngx_log_error(NGX_LOG_CRIT, fm->log, ngx_errno,
                      ""SetEndOfFile() \""%s\"" failed"", fm->name);
        goto failed;
    }

    fm->handle = CreateFileMapping(fm->fd, NULL, PAGE_READWRITE,
                                ...",326.0,394.0,1.0,1.0,69.0,23,6,32,15,0,18,6,5,5,3,,0,16,2,1,1,ngx_int_t
6258,409216,ngx_close_file_mapping,1,ngx_close_file_mapping,void ngx_close_file_mapping (ngx_file_mapping_t*),os\win32\ngx_files.c,"void
ngx_close_file_mapping(ngx_file_mapping_t *fm)
{
    if (UnmapViewOfFile(fm->addr) == 0) {
        ngx_log_error(NGX_LOG_ALERT, fm->log, ngx_errno,
                      ""UnmapViewOfFile(%p) of file mapping \""%s\"" failed"",
                      fm->addr, &fm->name);
    }

    if (CloseHandle(fm->handle) == 0) {
        ngx_log_error(NGX_LOG_ALERT, fm->log, ngx_errno,
                      ""CloseHandle() of file mapping \""%s\"" failed"",
                      &fm->name);
    }

    if (ngx_close_file(fm->fd) == NGX_FILE_ERROR) {
        ngx_log_error(NGX_LOG_ALERT, fm->log, ngx_errno,
                      ngx_close_file_n "" \""%s\"" failed"", fm->name);
    }
}",397.0,416.0,1.0,1.0,20.0,9,3,9,4,0,7,3,3,3,1,,0,6,2,1,1,void
6259,409255,ngx_open_dir,1,ngx_open_dir,"ngx_int_t ngx_open_dir (ngx_str_t*,ngx_dir_t*)",os\win32\ngx_files.c,"ngx_int_t
ngx_open_dir(ngx_str_t *name, ngx_dir_t *dir)
{
    u_char     *pattern, *p;
    ngx_err_t   err;

    pattern = malloc(name->len + 3);
    if (pattern == NULL) {
        return NGX_ERROR;
    }

    p = ngx_cpymem(pattern, name->data, name->len);

    *p++ = '/';
    *p++ = '*';
    *p = '\0';

    dir->dir = FindFirstFile((const char *) pattern, &dir->finddata);

    if (dir->dir == INVALID_HANDLE_VALUE) {
        err = ngx_errno;
        ngx_free(pattern);
        ngx_set_errno(err);
        return NGX_ERROR;
    }

    ngx_free(pattern);

    dir->valid_info = 1;
    dir->ready = 1;

    return NGX_OK;
}",427.0,459.0,1.0,1.0,33.0,8,4,7,5,3,4,2,2,1,0,,0,4,4,2,2,ngx_int_t
6260,409287,ngx_read_dir,1,ngx_read_dir,ngx_int_t ngx_read_dir (ngx_dir_t*),os\win32\ngx_files.c,"ngx_int_t
ngx_read_dir(ngx_dir_t *dir)
{
    if (dir->ready) {
        dir->ready = 0;
        return NGX_OK;
    }

    if (FindNextFile(dir->dir, &dir->finddata) != 0) {
        dir->type = 1;
        return NGX_OK;
    }

    return NGX_ERROR;
}",462.0,476.0,1.0,1.0,15.0,6,2,6,3,3,4,2,2,1,0,,0,4,2,1,1,ngx_int_t
6261,409314,ngx_open_glob,1,ngx_open_glob,ngx_int_t ngx_open_glob (ngx_glob_t*),os\win32\ngx_files.c,"ngx_int_t
ngx_open_glob(ngx_glob_t *gl)
{
    u_char     *p;
    size_t      len;
    ngx_err_t   err;

    gl->dir = FindFirstFile((const char *) gl->pattern, &gl->finddata);

    if (gl->dir == INVALID_HANDLE_VALUE) {

        err = ngx_errno;

        if ((err == ERROR_FILE_NOT_FOUND || err == ERROR_PATH_NOT_FOUND)
             && gl->test)
        {
            gl->no_match = 1;
            return NGX_OK;
        }

        return NGX_ERROR;
    }

    for (p = gl->pattern; *p; p++) {
        if (*p == '/') {
            gl->last = p + 1 - gl->pattern;
        }
    }

    len = ngx_strlen(gl->finddata.cFileName);
    gl->name.len = gl->last + len;

    gl->name.data = ngx_alloc(gl->name.len + 1, gl->log);
    if (gl->name.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(gl->name.data, gl->pattern, gl->last);
    ngx_cpystrn(gl->name.data + gl->last, (u_char *) gl->finddata.cFileName,
                len + 1);

    gl->ready = 1;

    return NGX_OK;
}",490.0,534.0,1.0,1.0,45.0,6,5,7,5,1,2,2,2,0,0,,0,2,2,1,1,ngx_int_t
6262,409343,ngx_read_glob,1,ngx_read_glob,"ngx_int_t ngx_read_glob (ngx_glob_t*,ngx_str_t*)",os\win32\ngx_files.c,"ngx_int_t
ngx_read_glob(ngx_glob_t *gl, ngx_str_t *name)
{
    size_t     len;
    ngx_err_t  err;

    if (gl->no_match) {
        return NGX_DONE;
    }

    if (gl->ready) {
        *name = gl->name;

        gl->ready = 0;
        return NGX_OK;
    }

    ngx_free(gl->name.data);
    gl->name.data = NULL;

    if (FindNextFile(gl->dir, &gl->finddata) != 0) {

        len = ngx_strlen(gl->finddata.cFileName);
        gl->name.len = gl->last + len;

        gl->name.data = ngx_alloc(gl->name.len + 1, gl->log);
        if (gl->name.data == NULL) {
            return NGX_ERROR;
        }

        ngx_memcpy(gl->name.data, gl->pattern, gl->last);
        ngx_cpystrn(gl->name.data + gl->last, (u_char *) gl->finddata.cFileName,
                    len + 1);

        *name = gl->name;

        return NGX_OK;
    }

    err = ngx_errno;

    if (err == NGX_ENOMOREFILES) {
        return NGX_DONE;
    }

    ngx_log_error(NGX_LOG_ALERT, gl->log, err,
                  ""FindNextFile(%s) f...",537.0,586.0,1.0,1.0,50.0,22,7,13,5,1,9,2,2,1,0,,0,9,4,2,2,ngx_int_t
6263,409405,ngx_close_glob,1,ngx_close_glob,void ngx_close_glob (ngx_glob_t*),os\win32\ngx_files.c,"void
ngx_close_glob(ngx_glob_t *gl)
{
    if (gl->name.data) {
        ngx_free(gl->name.data);
    }

    if (gl->dir == INVALID_HANDLE_VALUE) {
        return;
    }

    if (FindClose(gl->dir) == 0) {
        ngx_log_error(NGX_LOG_ALERT, gl->log, ngx_errno,
                      ""FindClose(%s) failed"", gl->pattern);
    }
}",589.0,604.0,1.0,1.0,16.0,2,2,1,1,1,1,1,1,0,0,,0,1,2,1,1,void
6264,409415,ngx_trylock_fd,1,ngx_trylock_fd,ngx_err_t ngx_trylock_fd (ngx_fd_t),os\unix\ngx_files.c,"ngx_err_t
ngx_trylock_fd(ngx_fd_t fd)
{
    struct flock  fl;

    ngx_memzero(&fl, sizeof(struct flock));
    fl.l_type = F_WRLCK;
    fl.l_whence = SEEK_SET;

    if (fcntl(fd, F_SETLK, &fl) == -1) {
        return ngx_errno;
    }

    return 0;
}",758.0,772.0,1.0,1.0,15.0,9,6,10,7,1,0,2,2,0,0,,0,0,2,1,1,ngx_err_t
6265,409450,ngx_lock_fd,1,ngx_lock_fd,ngx_err_t ngx_lock_fd (ngx_fd_t),os\unix\ngx_files.c,"ngx_err_t
ngx_lock_fd(ngx_fd_t fd)
{
    struct flock  fl;

    ngx_memzero(&fl, sizeof(struct flock));
    fl.l_type = F_WRLCK;
    fl.l_whence = SEEK_SET;

    if (fcntl(fd, F_SETLKW, &fl) == -1) {
        return ngx_errno;
    }

    return 0;
}",775.0,789.0,1.0,1.0,15.0,9,6,10,7,1,0,2,2,0,0,,0,0,2,1,1,ngx_err_t
6266,409485,ngx_unlock_fd,1,ngx_unlock_fd,ngx_err_t ngx_unlock_fd (ngx_fd_t),os\unix\ngx_files.c,"ngx_err_t
ngx_unlock_fd(ngx_fd_t fd)
{
    struct flock  fl;

    ngx_memzero(&fl, sizeof(struct flock));
    fl.l_type = F_UNLCK;
    fl.l_whence = SEEK_SET;

    if (fcntl(fd, F_SETLK, &fl) == -1) {
        return  ngx_errno;
    }

    return 0;
}",792.0,806.0,1.0,1.0,15.0,9,6,10,7,1,0,2,2,0,0,,0,0,2,1,1,ngx_err_t
6267,409520,ngx_fs_bsize,1,ngx_fs_bsize,size_t ngx_fs_bsize (u_char*),os\win32\ngx_files.c,"size_t
ngx_fs_bsize(u_char *name)
{
    u_char  root[4];
    u_long  sc, bs, nfree, ncl;

    if (name[2] == ':') {
        ngx_cpystrn(root, name, 4);
        name = root;
    }

    if (GetDiskFreeSpace((const char *) name, &sc, &bs, &nfree, &ncl) == 0) {
        return 512;
    }

    return sc * bs;
}",642.0,658.0,1.0,1.0,17.0,0,0,0,0,2,0,1,1,0,0,,0,0,2,1,1,size_t
6268,409527,ngx_fs_available,1,ngx_fs_available,off_t ngx_fs_available (u_char*),os\win32\ngx_files.c,"off_t
ngx_fs_available(u_char *name)
{
    ULARGE_INTEGER  navail;

    if (GetDiskFreeSpaceEx((const char *) name, &navail, NULL, NULL) == 0) {
        return NGX_MAX_OFF_T_VALUE;
    }

    return (off_t) navail.QuadPart;
}",661.0,671.0,1.0,1.0,11.0,0,0,1,1,1,0,1,1,0,0,,0,0,2,1,1,off_t
6269,409603,ngx_write_fd,1,ngx_write_fd,"ANY ngx_write_fd (ngx_fd_t,void*,size_t)",os\win32\ngx_files.c,"ssize_t
ngx_write_fd(ngx_fd_t fd, void *buf, size_t size)
{
    u_long  n;

    if (WriteFile(fd, buf, size, &n, NULL) != 0) {
        return (size_t) n;
    }

    return -1;
}",177.0,187.0,1.0,1.0,11.0,0,0,3,3,4,0,1,1,0,0,,0,0,6,3,3,ssize_t
6270,409645,ngx_de_info,1,ngx_de_info,"ANY ngx_de_info (u_char*,ngx_dir_t*)",os\win32\ngx_files.c,"ngx_int_t
ngx_de_info(u_char *name, ngx_dir_t *dir)
{
    return NGX_OK;
}",607.0,611.0,1.0,1.0,5.0,5,4,3,2,3,2,1,1,0,0,,0,2,4,2,2,ngx_int_t
6271,409716,ngx_freebsd_sendfile_chain,1,ngx_freebsd_sendfile_chain,"ngx_chain_t* ngx_freebsd_sendfile_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_freebsd_sendfile_chain.c,"ngx_chain_t *
ngx_freebsd_sendfile_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    int               rc, flags;
    off_t             send, prev_send, sent;
    size_t            file_size;
    ssize_t           n;
    ngx_uint_t        eintr, eagain;
    ngx_err_t         err;
    ngx_buf_t        *file;
    ngx_event_t      *wev;
    ngx_chain_t      *cl;
    ngx_iovec_t       header, trailer;
    struct sf_hdtr    hdtr;
    struct iovec      headers[NGX_IOVS_PREALLOCATE];
    struct iovec      trailers[NGX_IOVS_PREALLOCATE];
#if (NGX_HAVE_AIO_SENDFILE)
    ngx_uint_t        ebusy;
    ngx_event_aio_t  *aio;
#endif

    wev = c->write;

    if (!wev->ready) {
        return in;
    }

#if (NGX_HAVE_KQUEUE)

    if ((ngx_event_flags & NGX_USE_KQUEUE_EVENT) && wev->pending_eof) {
        (void) ngx_connection_error(c, wev->kq_errno,
                               ""kevent() reported about an closed connection"");
        wev->error = 1;
        return NGX_CHAIN_ERROR;
 ...",32.0,333.0,1.0,1.0,302.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6272,410861,ngx_linux_sendfile_chain,1,ngx_linux_sendfile_chain,"ngx_chain_t* ngx_linux_sendfile_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_linux_sendfile_chain.c,"ngx_chain_t *
ngx_linux_sendfile_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    int            tcp_nodelay;
    off_t          send, prev_send;
    size_t         file_size, sent;
    ssize_t        n;
    ngx_err_t      err;
    ngx_buf_t     *file;
    ngx_event_t   *wev;
    ngx_chain_t   *cl;
    ngx_iovec_t    header;
    struct iovec   headers[NGX_IOVS_PREALLOCATE];

    wev = c->write;

    if (!wev->ready) {
        return in;
    }


    /* the maximum limit size is 2G-1 - the page size */

    if (limit == 0 || limit > (off_t) (NGX_SENDFILE_MAXSIZE - ngx_pagesize)) {
        limit = NGX_SENDFILE_MAXSIZE - ngx_pagesize;
    }


    send = 0;

    header.iovs = headers;
    header.nalloc = NGX_IOVS_PREALLOCATE;

    for ( ;; ) {
        prev_send = send;

        /* create the iovec and coalesce the neighbouring bufs */

        cl = ngx_output_chain_to_iovec(&header, in, limit - send, c->log);

        if (cl == NGX_CHAIN_ERROR) {
            return NGX_CHAI...",46.0,226.0,1.0,39.0,181.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6273,410886,io_submit,1,io_submit,"int io_submit (aio_context_t,long,iocb**)",os\unix\ngx_linux_aio_read.c,"static int
io_submit(aio_context_t ctx, long n, struct iocb **paiocb)
{
    return syscall(SYS_io_submit, ctx, n, paiocb);
}",20.0,24.0,1.0,1.0,5.0,0,0,4,4,0,0,1,1,0,0,,0,0,6,3,3,int
6274,411373,sendfile,1,sendfile,"ssize_t sendfile (int,int,int32_t*,size_t)",os\unix\ngx_linux_config.h,"extern ssize_t sendfile(int s, int fd, int32_t *offset, size_t size);",77.0,77.0,16.0,68.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ssize_t
6275,411482,ngx_linux_sendfile,1,ngx_linux_sendfile,"ssize_t ngx_linux_sendfile (ngx_connection_t*,ngx_buf_t*,size_t)",os\unix\ngx_linux_sendfile_chain.c,"static ssize_t
ngx_linux_sendfile(ngx_connection_t *c, ngx_buf_t *file, size_t size)
{
#if (NGX_HAVE_SENDFILE64)
    off_t      offset;
#else
    int32_t    offset;
#endif
    ssize_t    n;
    ngx_err_t  err;

#if (NGX_THREADS)

    if (file->file->thread_handler) {
        return ngx_linux_sendfile_thread(c, file, size);
    }

#endif

#if (NGX_HAVE_SENDFILE64)
    offset = file->file_pos;
#else
    offset = (int32_t) file->file_pos;
#endif

eintr:

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""sendfile: @%O %uz"", file->file_pos, size);

    n = sendfile(c->fd, file->file->fd, &offset, size);

    if (n == -1) {
        err = ngx_errno;

        switch (err) {
        case NGX_EAGAIN:
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, err,
                           ""sendfile() is not ready"");
            return NGX_AGAIN;

        case NGX_EINTR:
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, err,
                           ""sendfile() was i...",229.0,299.0,1.0,1.0,71.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6276,412000,ngx_recv_pt,1,ngx_recv_pt,"ssize_t ngx_recv_pt (ngx_connection_t*,u_char*,size_t)",os\unix\ngx_os.h,"typedef ssize_t (*ngx_recv_pt)(ngx_connection_t *c, u_char *buf, size_t size);",19.0,19.0,17.0,77.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6277,412007,ngx_recv_chain_pt,1,ngx_recv_chain_pt,"ssize_t ngx_recv_chain_pt (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_os.h,"typedef ssize_t (*ngx_recv_chain_pt)(ngx_connection_t *c, ngx_chain_t *in,
    off_t limit);",20.0,21.0,17.0,16.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6278,412014,ngx_send_pt,1,ngx_send_pt,"ssize_t ngx_send_pt (ngx_connection_t*,u_char*,size_t)",os\unix\ngx_os.h,"typedef ssize_t (*ngx_send_pt)(ngx_connection_t *c, u_char *buf, size_t size);",22.0,22.0,17.0,77.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6279,412021,ngx_send_chain_pt,1,ngx_send_chain_pt,"ngx_chain_t* ngx_send_chain_pt (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_os.h,"typedef ngx_chain_t *(*ngx_send_chain_pt)(ngx_connection_t *c, ngx_chain_t *in,
    off_t limit);",23.0,24.0,21.0,16.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t*
6280,412038,ngx_os_init,1,ngx_os_init,ngx_int_t ngx_os_init (ngx_log_t*),os\win32\ngx_win32_init.c,"ngx_int_t
ngx_os_init(ngx_log_t *log)
{
    DWORD         bytes;
    SOCKET        s;
    WSADATA       wsd;
    ngx_err_t     err;
    ngx_time_t   *tp;
    ngx_uint_t    n;
    SYSTEM_INFO   si;

    /* get Windows version */

    ngx_memzero(&osvi, sizeof(OSVERSIONINFOEX));
    osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);

#ifdef _MSC_VER
#pragma warning(disable:4996)
#endif

    osviex = GetVersionEx((OSVERSIONINFO *) &osvi);

    if (osviex == 0) {
        osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);
        if (GetVersionEx((OSVERSIONINFO *) &osvi) == 0) {
            ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                          ""GetVersionEx() failed"");
            return NGX_ERROR;
        }
    }

#ifdef _MSC_VER
#pragma warning(default:4996)
#endif

    /*
     *  Windows 3.1 Win32s   0xxxxx
     *
     *  Windows 95           140000
     *  Windows 98           141000
     *  Windows ME           149000
     *  Windows NT 3.51      235100
     *  Wi...",67.0,279.0,1.0,1.0,213.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6281,412043,ngx_os_status,1,ngx_os_status,void ngx_os_status (ngx_log_t*),os\win32\ngx_win32_init.c,"void
ngx_os_status(ngx_log_t *log)
{
    ngx_osviex_stub_t  *osviex_stub;

    ngx_log_error(NGX_LOG_NOTICE, log, 0, NGINX_VER_BUILD);

    if (osviex) {

        /*
         * the MSVC 6.0 SP2 defines wSuiteMask and wProductType
         * as WORD wReserved[2]
         */
        osviex_stub = (ngx_osviex_stub_t *) &osvi.wServicePackMinor;

        ngx_log_error(NGX_LOG_INFO, log, 0,
                      ""OS: %ui build:%ud, \""%s\"", suite:%Xd, type:%ud"",
                      ngx_win32_version, osvi.dwBuildNumber, osvi.szCSDVersion,
                      osviex_stub->wSuiteMask, osviex_stub->wProductType);

    } else {
        if (osvi.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS) {

            /* Win9x build */

            ngx_log_error(NGX_LOG_INFO, log, 0,
                          ""OS: %ui build:%ud.%ud.%ud, \""%s\"""",
                          ngx_win32_version,
                          osvi.dwBuildNumber >> 24,
                          (osvi.dwBuildNumber >> 16) & 0xff,
    ...",282.0,329.0,1.0,1.0,48.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
6282,412063,ngx_os_signal_process,1,ngx_os_signal_process,"ngx_int_t ngx_os_signal_process (ngx_cycle_t*,char*,ngx_pid_t)",os\win32\ngx_process_cycle.c,"ngx_int_t
ngx_os_signal_process(ngx_cycle_t *cycle, char *sig, ngx_pid_t pid)
{
    HANDLE     ev;
    ngx_int_t  rc;
    char       evn[NGX_PROCESS_SYNC_NAME];

    ngx_sprintf((u_char *) evn, ""Global\\ngx_%s_%P%Z"", sig, pid);

    ev = OpenEvent(EVENT_MODIFY_STATE, 0, evn);
    if (ev == NULL) {
        ngx_log_error(NGX_LOG_ERR, cycle->log, ngx_errno,
                      ""OpenEvent(\""%s\"") failed"", evn);
        return 1;
    }

    if (SetEvent(ev) == 0) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""SetEvent(\""%s\"") failed"", evn);
        rc = 1;

    } else {
        rc = 0;
    }

    ngx_close_handle(ev);

    return rc;
}",1005.0,1033.0,1.0,1.0,29.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6283,412070,ngx_unix_recv,1,ngx_unix_recv,"ssize_t ngx_unix_recv (ngx_connection_t*,u_char*,size_t)",os\unix\ngx_recv.c,"ssize_t
ngx_unix_recv(ngx_connection_t *c, u_char *buf, size_t size)
{
    ssize_t       n;
    ngx_err_t     err;
    ngx_event_t  *rev;

    rev = c->read;

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {
        ngx_log_debug3(NGX_LOG_DEBUG_EVENT, c->log, 0,
                       ""recv: eof:%d, avail:%d, err:%d"",
                       rev->pending_eof, rev->available, rev->kq_errno);

        if (rev->available == 0) {
            if (rev->pending_eof) {
                rev->ready = 0;
                rev->eof = 1;

                if (rev->kq_errno) {
                    rev->error = 1;
                    ngx_set_socket_errno(rev->kq_errno);

                    return ngx_connection_error(c, rev->kq_errno,
                               ""kevent() reported about an closed connection"");
                }

                return 0;

            } else {
                rev->ready = 0;
                return NGX_AGAIN;
            }
        }
    }

#end...",13.0,201.0,1.0,1.0,189.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6284,412077,ngx_readv_chain,1,ngx_readv_chain,"ssize_t ngx_readv_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_readv_chain.c,"ssize_t
ngx_readv_chain(ngx_connection_t *c, ngx_chain_t *chain, off_t limit)
{
    u_char        *prev;
    ssize_t        n, size;
    ngx_err_t      err;
    ngx_array_t    vec;
    ngx_event_t   *rev;
    struct iovec  *iov, iovs[NGX_IOVS_PREALLOCATE];

    rev = c->read;

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {
        ngx_log_debug3(NGX_LOG_DEBUG_EVENT, c->log, 0,
                       ""readv: eof:%d, avail:%d, err:%d"",
                       rev->pending_eof, rev->available, rev->kq_errno);

        if (rev->available == 0) {
            if (rev->pending_eof) {
                rev->ready = 0;
                rev->eof = 1;

                ngx_log_error(NGX_LOG_INFO, c->log, rev->kq_errno,
                              ""kevent() reported about an closed connection"");

                if (rev->kq_errno) {
                    rev->error = 1;
                    ngx_set_socket_errno(rev->kq_errno);
                    return NGX_ERROR;
          ...",13.0,248.0,1.0,1.0,236.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6285,412084,ngx_udp_unix_recv,1,ngx_udp_unix_recv,"ssize_t ngx_udp_unix_recv (ngx_connection_t*,u_char*,size_t)",os\unix\ngx_udp_recv.c,"ssize_t
ngx_udp_unix_recv(ngx_connection_t *c, u_char *buf, size_t size)
{
    ssize_t       n;
    ngx_err_t     err;
    ngx_event_t  *rev;

    rev = c->read;

    do {
        n = recv(c->fd, buf, size, 0);

        ngx_log_debug3(NGX_LOG_DEBUG_EVENT, c->log, 0,
                       ""recv: fd:%d %z of %uz"", c->fd, n, size);

        if (n >= 0) {

#if (NGX_HAVE_KQUEUE)

            if (ngx_event_flags & NGX_USE_KQUEUE_EVENT) {
                rev->available -= n;

                /*
                 * rev->available may be negative here because some additional
                 * bytes may be received between kevent() and recv()
                 */

                if (rev->available <= 0) {
                    rev->ready = 0;
                    rev->available = 0;
                }
            }

#endif

            return n;
        }

        err = ngx_socket_errno;

        if (err == NGX_EAGAIN || err == NGX_EINTR) {
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log,...",13.0,72.0,1.0,1.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6286,412091,ngx_unix_send,1,ngx_unix_send,"ssize_t ngx_unix_send (ngx_connection_t*,u_char*,size_t)",os\unix\ngx_send.c,"ssize_t
ngx_unix_send(ngx_connection_t *c, u_char *buf, size_t size)
{
    ssize_t       n;
    ngx_err_t     err;
    ngx_event_t  *wev;

    wev = c->write;

#if (NGX_HAVE_KQUEUE)

    if ((ngx_event_flags & NGX_USE_KQUEUE_EVENT) && wev->pending_eof) {
        (void) ngx_connection_error(c, wev->kq_errno,
                               ""kevent() reported about an closed connection"");
        wev->error = 1;
        return NGX_ERROR;
    }

#endif

    for ( ;; ) {
        n = send(c->fd, buf, size, 0);

        ngx_log_debug3(NGX_LOG_DEBUG_EVENT, c->log, 0,
                       ""send: fd:%d %z of %uz"", c->fd, n, size);

        if (n > 0) {
            if (n < (ssize_t) size) {
                wev->ready = 0;
            }

            c->sent += n;

            return n;
        }

        err = ngx_socket_errno;

        if (n == 0) {
            ngx_log_error(NGX_LOG_ALERT, c->log, err, ""send() returned zero"");
            wev->ready = 0;
            return n;
        }

    ...",13.0,73.0,1.0,1.0,61.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6287,412098,ngx_writev_chain,1,ngx_writev_chain,"ngx_chain_t* ngx_writev_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_writev_chain.c,"ngx_chain_t *
ngx_writev_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    ssize_t        n, sent;
    off_t          send, prev_send;
    ngx_chain_t   *cl;
    ngx_event_t   *wev;
    ngx_iovec_t    vec;
    struct iovec   iovs[NGX_IOVS_PREALLOCATE];

    wev = c->write;

    if (!wev->ready) {
        return in;
    }

#if (NGX_HAVE_KQUEUE)

    if ((ngx_event_flags & NGX_USE_KQUEUE_EVENT) && wev->pending_eof) {
        (void) ngx_connection_error(c, wev->kq_errno,
                               ""kevent() reported about an closed connection"");
        wev->error = 1;
        return NGX_CHAIN_ERROR;
    }

#endif

    /* the maximum limit size is the maximum size_t value - the page size */

    if (limit == 0 || limit > (off_t) (NGX_MAX_SIZE_T_VALUE - ngx_pagesize)) {
        limit = NGX_MAX_SIZE_T_VALUE - ngx_pagesize;
    }

    send = 0;

    vec.iovs = iovs;
    vec.nalloc = NGX_IOVS_PREALLOCATE;

    for ( ;; ) {
        prev_send = send;

        /* create the i...",13.0,104.0,1.0,1.0,92.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6288,412105,ngx_udp_unix_send,1,ngx_udp_unix_send,"ssize_t ngx_udp_unix_send (ngx_connection_t*,u_char*,size_t)",os\unix\ngx_udp_send.c,"ssize_t
ngx_udp_unix_send(ngx_connection_t *c, u_char *buf, size_t size)
{
    ssize_t       n;
    ngx_err_t     err;
    ngx_event_t  *wev;

    wev = c->write;

    for ( ;; ) {
        n = sendto(c->fd, buf, size, 0, c->sockaddr, c->socklen);

        ngx_log_debug4(NGX_LOG_DEBUG_EVENT, c->log, 0,
                       ""sendto: fd:%d %z of %uz to \""%V\"""",
                       c->fd, n, size, &c->addr_text);

        if (n >= 0) {
            if ((size_t) n != size) {
                wev->error = 1;
                (void) ngx_connection_error(c, 0, ""sendto() incomplete"");
                return NGX_ERROR;
            }

            c->sent += n;

            return n;
        }

        err = ngx_socket_errno;

        if (err == NGX_EAGAIN) {
            wev->ready = 0;
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, NGX_EAGAIN,
                           ""sendto() not ready"");
            return NGX_AGAIN;
        }

        if (err != NGX_EINTR) {
            wev->e...",13.0,56.0,1.0,1.0,44.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6289,412112,ngx_udp_unix_sendmsg_chain,1,ngx_udp_unix_sendmsg_chain,"ngx_chain_t* ngx_udp_unix_sendmsg_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_udp_sendmsg_chain.c,"ngx_chain_t *
ngx_udp_unix_sendmsg_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    ssize_t        n;
    off_t          send;
    ngx_chain_t   *cl;
    ngx_event_t   *wev;
    ngx_iovec_t    vec;
    struct iovec   iovs[NGX_IOVS_PREALLOCATE];

    wev = c->write;

    if (!wev->ready) {
        return in;
    }

#if (NGX_HAVE_KQUEUE)

    if ((ngx_event_flags & NGX_USE_KQUEUE_EVENT) && wev->pending_eof) {
        (void) ngx_connection_error(c, wev->kq_errno,
                               ""kevent() reported about an closed connection"");
        wev->error = 1;
        return NGX_CHAIN_ERROR;
    }

#endif

    /* the maximum limit size is the maximum size_t value - the page size */

    if (limit == 0 || limit > (off_t) (NGX_MAX_SIZE_T_VALUE - ngx_pagesize)) {
        limit = NGX_MAX_SIZE_T_VALUE - ngx_pagesize;
    }

    send = 0;

    vec.iovs = iovs;
    vec.nalloc = NGX_IOVS_PREALLOCATE;

    for ( ;; ) {

        /* create the iovec and coalesce the neighbourin...",18.0,110.0,1.0,1.0,93.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6290,412126,ngx_output_chain_to_iovec,1,ngx_output_chain_to_iovec,"ngx_chain_t* ngx_output_chain_to_iovec (ngx_iovec_t*,ngx_chain_t*,size_t,ngx_log_t*)",os\unix\ngx_writev_chain.c,"ngx_chain_t *
ngx_output_chain_to_iovec(ngx_iovec_t *vec, ngx_chain_t *in, size_t limit,
    ngx_log_t *log)
{
    size_t         total, size;
    u_char        *prev;
    ngx_uint_t     n;
    struct iovec  *iov;

    iov = NULL;
    prev = NULL;
    total = 0;
    n = 0;

    for ( /* void */ ; in && total < limit; in = in->next) {

        if (ngx_buf_special(in->buf)) {
            continue;
        }

        if (in->buf->in_file) {
            break;
        }

        if (!ngx_buf_in_memory(in->buf)) {
            ngx_log_error(NGX_LOG_ALERT, log, 0,
                          ""bad buf in output chain ""
                          ""t:%d r:%d f:%d %p %p-%p %p %O-%O"",
                          in->buf->temporary,
                          in->buf->recycled,
                          in->buf->in_file,
                          in->buf->start,
                          in->buf->pos,
                          in->buf->last,
                          in->buf->file,
                   ...",107.0,178.0,1.0,1.0,72.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_chain_t
6291,412134,ngx_writev,1,ngx_writev,"ssize_t ngx_writev (ngx_connection_t*,ngx_iovec_t*)",os\unix\ngx_writev_chain.c,"ssize_t
ngx_writev(ngx_connection_t *c, ngx_iovec_t *vec)
{
    ssize_t    n;
    ngx_err_t  err;

eintr:

    n = writev(c->fd, vec->iovs, vec->count);

    ngx_log_debug2(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""writev: %z of %uz"", n, vec->size);

    if (n == -1) {
        err = ngx_errno;

        switch (err) {
        case NGX_EAGAIN:
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, err,
                           ""writev() not ready"");
            return NGX_AGAIN;

        case NGX_EINTR:
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, err,
                           ""writev() was interrupted"");
            goto eintr;

        default:
            c->write->error = 1;
            ngx_connection_error(c, err, ""writev() failed"");
            return NGX_ERROR;
        }
    }

    return n;
}",181.0,216.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ssize_t
6292,412396,handler,1,ngx_signal_t.handler,"void ngx_signal_t.handler (int,siginfo_t*,void*)",os\unix\ngx_process.c,"void  (*handler)(int signo, siginfo_t *siginfo, void *ucontext);",18.0,18.0,11.0,67.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
6293,412404,ngx_execute_proc,1,ngx_execute_proc,"void ngx_execute_proc (ngx_cycle_t*,void*)",os\unix\ngx_process.c,"static void
ngx_execute_proc(ngx_cycle_t *cycle, void *data)
{
    ngx_exec_ctx_t  *ctx = data;

    if (execve(ctx->path, ctx->argv, ctx->envp) == -1) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""execve() failed while executing %s \""%s\"""",
                      ctx->name, ctx->path);
    }

    exit(1);
}",269.0,281.0,1.0,1.0,13.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6294,412410,ngx_signal_handler,1,ngx_signal_handler,"void ngx_signal_handler (int,siginfo_t*,void*)",os\unix\ngx_process.c,"static void
ngx_signal_handler(int signo, siginfo_t *siginfo, void *ucontext)
{
    char            *action;
    ngx_int_t        ignore;
    ngx_err_t        err;
    ngx_signal_t    *sig;

    ignore = 0;

    err = ngx_errno;

    for (sig = signals; sig->signo != 0; sig++) {
        if (sig->signo == signo) {
            break;
        }
    }

    ngx_time_sigsafe_update();

    action = """";

    switch (ngx_process) {

    case NGX_PROCESS_MASTER:
    case NGX_PROCESS_SINGLE:
        switch (signo) {

        case ngx_signal_value(NGX_SHUTDOWN_SIGNAL):
            ngx_quit = 1;
            action = "", shutting down"";
            break;

        case ngx_signal_value(NGX_TERMINATE_SIGNAL):
        case SIGINT:
            ngx_terminate = 1;
            action = "", exiting"";
            break;

        case ngx_signal_value(NGX_NOACCEPT_SIGNAL):
            if (ngx_daemonized) {
                ngx_noaccept = 1;
                action = "", stop accepting connections"";
          ...",318.0,467.0,1.0,1.0,150.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
6295,412417,ngx_process_get_status,1,ngx_process_get_status,void ngx_process_get_status (void),os\unix\ngx_process.c,"static void
ngx_process_get_status(void)
{
    int              status;
    char            *process;
    ngx_pid_t        pid;
    ngx_err_t        err;
    ngx_int_t        i;
    ngx_uint_t       one;

    one = 0;

    for ( ;; ) {
        pid = waitpid(-1, &status, WNOHANG);

        if (pid == 0) {
            return;
        }

        if (pid == -1) {
            err = ngx_errno;

            if (err == NGX_EINTR) {
                continue;
            }

            if (err == NGX_ECHILD && one) {
                return;
            }

            /*
             * Solaris always calls the signal handler for each exited process
             * despite waitpid() may be already called for this process.
             *
             * When several processes exit at the same time FreeBSD may
             * erroneously call the signal handler for exited process
             * despite waitpid() may be already called for this process.
             */

            if (err == NGX_ECHI...",470.0,561.0,1.0,1.0,92.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6296,412422,ngx_unlock_mutexes,1,ngx_unlock_mutexes,void ngx_unlock_mutexes (ngx_pid_t),os\unix\ngx_process.c,"static void
ngx_unlock_mutexes(ngx_pid_t pid)
{
    ngx_uint_t        i;
    ngx_shm_zone_t   *shm_zone;
    ngx_list_part_t  *part;
    ngx_slab_pool_t  *sp;

    /*
     * unlock the accept mutex if the abnormally exited process
     * held it
     */

    if (ngx_accept_mutex_ptr) {
        (void) ngx_shmtx_force_unlock(&ngx_accept_mutex, pid);
    }

    /*
     * unlock shared memory mutexes if held by the abnormally exited
     * process
     */

    part = (ngx_list_part_t *) &ngx_cycle->shared_memory.part;
    shm_zone = part->elts;

    for (i = 0; /* void */ ; i++) {

        if (i >= part->nelts) {
            if (part->next == NULL) {
                break;
            }
            part = part->next;
            shm_zone = part->elts;
            i = 0;
        }

        sp = (ngx_slab_pool_t *) shm_zone[i].shm.addr;

        if (ngx_shmtx_force_unlock(&sp->mutex, pid)) {
            ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0,
                          ""shared memo...",564.0,608.0,1.0,1.0,45.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6297,412451,ngx_spawn_process,1,ngx_spawn_process,"ngx_pid_t ngx_spawn_process (ngx_cycle_t*,ngx_spawn_proc_pt,void*,char*,ngx_int_t)",os\win32\ngx_process.c,"ngx_pid_t
ngx_spawn_process(ngx_cycle_t *cycle, char *name, ngx_int_t respawn)
{
    u_long          rc, n, code;
    ngx_int_t       s;
    ngx_pid_t       pid;
    ngx_exec_ctx_t  ctx;
    HANDLE          events[2];
    char            file[MAX_PATH + 1];

    if (respawn >= 0) {
        s = respawn;

    } else {
        for (s = 0; s < ngx_last_process; s++) {
            if (ngx_processes[s].handle == NULL) {
                break;
            }
        }

        if (s == NGX_MAX_PROCESSES) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, 0,
                          ""no more than %d processes can be spawned"",
                          NGX_MAX_PROCESSES);
            return NGX_INVALID_PID;
        }
    }

    n = GetModuleFileName(NULL, file, MAX_PATH);

    if (n == 0) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""GetModuleFileName() failed"");
        return NGX_INVALID_PID;
    }

    file[n] = '\0';

    ngx_log_debug1(NGX_LOG_...",20.0,203.0,1.0,1.0,184.0,149,10,163,30,1,58,21,21,10,16,,0,44,6,3,3,ngx_pid_t
6298,413016,ngx_execute,1,ngx_execute,"ngx_pid_t ngx_execute (ngx_cycle_t*,ngx_exec_ctx_t*)",os\win32\ngx_process.c,"ngx_pid_t
ngx_execute(ngx_cycle_t *cycle, ngx_exec_ctx_t *ctx)
{
    STARTUPINFO          si;
    PROCESS_INFORMATION  pi;

    ngx_memzero(&si, sizeof(STARTUPINFO));
    si.cb = sizeof(STARTUPINFO);

    ngx_memzero(&pi, sizeof(PROCESS_INFORMATION));

    if (CreateProcess(ctx->path, ctx->args,
                      NULL, NULL, 0, CREATE_NO_WINDOW, NULL, NULL, &si, &pi)
        == 0)
    {
        ngx_log_error(NGX_LOG_CRIT, cycle->log, ngx_errno,
                      ""CreateProcess(\""%s\"") failed"", ngx_argv[0]);

        return 0;
    }

    ctx->child = pi.hProcess;

    if (CloseHandle(pi.hThread) == 0) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""CloseHandle(pi.hThread) failed"");
    }

    ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0,
                  ""start %s process %P"", ctx->name, pi.dwProcessId);

    return pi.dwProcessId;
}",206.0,238.0,1.0,1.0,33.0,1,1,5,4,1,2,1,1,0,1,,0,1,4,2,2,ngx_pid_t
6299,413071,ngx_init_signals,1,ngx_init_signals,ngx_int_t ngx_init_signals (ngx_log_t*),os\unix\ngx_process.c,"ngx_int_t
ngx_init_signals(ngx_log_t *log)
{
    ngx_signal_t      *sig;
    struct sigaction   sa;

    for (sig = signals; sig->signo != 0; sig++) {
        ngx_memzero(&sa, sizeof(struct sigaction));

        if (sig->handler) {
            sa.sa_sigaction = sig->handler;
            sa.sa_flags = SA_SIGINFO;

        } else {
            sa.sa_handler = SIG_IGN;
        }

        sigemptyset(&sa.sa_mask);
        if (sigaction(sig->signo, &sa, NULL) == -1) {
#if (NGX_VALGRIND)
            ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                          ""sigaction(%s) failed, ignored"", sig->signame);
#else
            ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                          ""sigaction(%s) failed"", sig->signame);
            return NGX_ERROR;
#endif
        }
    }

    return NGX_OK;
}",284.0,315.0,1.0,1.0,32.0,18,8,20,11,1,4,4,6,2,1,,0,3,2,1,1,ngx_int_t
6300,413705,ngx_debug_point,1,ngx_debug_point,void ngx_debug_point (void),os\unix\ngx_process.c,"void
ngx_debug_point(void)
{
    ngx_core_conf_t  *ccf;

    ccf = (ngx_core_conf_t *) ngx_get_conf(ngx_cycle->conf_ctx,
                                           ngx_core_module);

    switch (ccf->debug_points) {

    case NGX_DEBUG_POINTS_STOP:
        raise(SIGSTOP);
        break;

    case NGX_DEBUG_POINTS_ABORT:
        ngx_abort();
    }
}",611.0,628.0,1.0,1.0,18.0,4,3,7,6,1,1,3,2,1,0,,0,1,2,1,1,void
6301,413798,ngx_spawn_proc_pt,1,ngx_spawn_proc_pt,"void ngx_spawn_proc_pt (ngx_cycle_t*,void*)",os\unix\ngx_process.h,"typedef void (*ngx_spawn_proc_pt) (ngx_cycle_t *cycle, void *data);",20.0,20.0,14.0,66.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6302,413880,ngx_start_worker_processes,1,ngx_start_worker_processes,"void ngx_start_worker_processes (ngx_cycle_t*,ngx_int_t,ngx_int_t)",os\win32\ngx_process_cycle.c,"static ngx_int_t
ngx_start_worker_processes(ngx_cycle_t *cycle, ngx_int_t type)
{
    ngx_int_t         n;
    ngx_core_conf_t  *ccf;

    ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, ""start worker processes"");

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    for (n = 0; n < ccf->worker_processes; n++) {
        if (ngx_spawn_process(cycle, ""worker"", type) == NGX_INVALID_PID) {
            break;
        }
    }

    return n;
}",367.0,384.0,1.0,1.0,18.0,0,0,0,0,4,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6303,413887,ngx_start_cache_manager_processes,1,ngx_start_cache_manager_processes,"void ngx_start_cache_manager_processes (ngx_cycle_t*,ngx_uint_t)",os\unix\ngx_process_cycle.c,"static void
ngx_start_cache_manager_processes(ngx_cycle_t *cycle, ngx_uint_t respawn)
{
    ngx_uint_t    i, manager, loader;
    ngx_path_t  **path;

    manager = 0;
    loader = 0;

    path = ngx_cycle->paths.elts;
    for (i = 0; i < ngx_cycle->paths.nelts; i++) {

        if (path[i]->manager) {
            manager = 1;
        }

        if (path[i]->loader) {
            loader = 1;
        }
    }

    if (manager == 0) {
        return;
    }

    ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,
                      &ngx_cache_manager_ctx, ""cache manager process"",
                      respawn ? NGX_PROCESS_JUST_RESPAWN : NGX_PROCESS_RESPAWN);

    ngx_pass_open_channel(cycle);

    if (loader == 0) {
        return;
    }

    ngx_spawn_process(cycle, ngx_cache_manager_process_cycle,
                      &ngx_cache_loader_ctx, ""cache loader process"",
                      respawn ? NGX_PROCESS_JUST_SPAWN : NGX_PROCESS_NORESPAWN);

    ngx_pass_open_channel(cycl...",352.0,392.0,1.0,1.0,41.0,0,0,0,0,4,0,1,1,0,0,,0,0,4,2,2,void
6304,413893,ngx_pass_open_channel,1,ngx_pass_open_channel,void ngx_pass_open_channel (ngx_cycle_t*),os\unix\ngx_process_cycle.c,"static void
ngx_pass_open_channel(ngx_cycle_t *cycle)
{
    ngx_int_t      i;
    ngx_channel_t  ch;

    ngx_memzero(&ch, sizeof(ngx_channel_t));

    ch.command = NGX_CMD_OPEN_CHANNEL;
    ch.pid = ngx_processes[ngx_process_slot].pid;
    ch.slot = ngx_process_slot;
    ch.fd = ngx_processes[ngx_process_slot].channel[0];

    for (i = 0; i < ngx_last_process; i++) {

        if (i == ngx_process_slot
            || ngx_processes[i].pid == -1
            || ngx_processes[i].channel[0] == -1)
        {
            continue;
        }

        ngx_log_debug6(NGX_LOG_DEBUG_CORE, cycle->log, 0,
                      ""pass channel s:%i pid:%P fd:%d to s:%i pid:%P fd:%d"",
                      ch.slot, ch.pid, ch.fd,
                      i, ngx_processes[i].pid,
                      ngx_processes[i].channel[0]);

        /* TODO: NGX_AGAIN */

        ngx_write_channel(ngx_processes[i].channel[0],
                          &ch, sizeof(ngx_channel_t), cycle->log);
    }
}",395.0,428.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6305,413898,ngx_signal_worker_processes,1,ngx_signal_worker_processes,"void ngx_signal_worker_processes (ngx_cycle_t*,int)",os\unix\ngx_process_cycle.c,"static void
ngx_signal_worker_processes(ngx_cycle_t *cycle, int signo)
{
    ngx_int_t      i;
    ngx_err_t      err;
    ngx_channel_t  ch;

    ngx_memzero(&ch, sizeof(ngx_channel_t));

#if (NGX_BROKEN_SCM_RIGHTS)

    ch.command = 0;

#else

    switch (signo) {

    case ngx_signal_value(NGX_SHUTDOWN_SIGNAL):
        ch.command = NGX_CMD_QUIT;
        break;

    case ngx_signal_value(NGX_TERMINATE_SIGNAL):
        ch.command = NGX_CMD_TERMINATE;
        break;

    case ngx_signal_value(NGX_REOPEN_SIGNAL):
        ch.command = NGX_CMD_REOPEN;
        break;

    default:
        ch.command = 0;
    }

#endif

    ch.fd = -1;


    for (i = 0; i < ngx_last_process; i++) {

        ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                       ""child: %i %P e:%d t:%d d:%d r:%d j:%d"",
                       i,
                       ngx_processes[i].pid,
                       ngx_processes[i].exiting,
                       ngx_processes[i].exited,
                   ...",431.0,530.0,1.0,1.0,100.0,0,0,0,0,5,0,1,1,0,0,,0,0,4,2,2,void
6306,413904,ngx_reap_children,1,ngx_reap_children,ngx_uint_t ngx_reap_children (ngx_cycle_t*),os\unix\ngx_process_cycle.c,"static ngx_uint_t
ngx_reap_children(ngx_cycle_t *cycle)
{
    ngx_int_t         i, n;
    ngx_uint_t        live;
    ngx_channel_t     ch;
    ngx_core_conf_t  *ccf;

    ngx_memzero(&ch, sizeof(ngx_channel_t));

    ch.command = NGX_CMD_CLOSE_CHANNEL;
    ch.fd = -1;

    live = 0;
    for (i = 0; i < ngx_last_process; i++) {

        ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
                       ""child: %i %P e:%d t:%d d:%d r:%d j:%d"",
                       i,
                       ngx_processes[i].pid,
                       ngx_processes[i].exiting,
                       ngx_processes[i].exited,
                       ngx_processes[i].detached,
                       ngx_processes[i].respawn,
                       ngx_processes[i].just_spawn);

        if (ngx_processes[i].pid == -1) {
            continue;
        }

        if (ngx_processes[i].exited) {

            if (!ngx_processes[i].detached) {
                ngx_close_channel(ngx_processes[i].channel, c...",533.0,652.0,1.0,1.0,120.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_uint_t
6307,413909,ngx_master_process_exit,1,ngx_master_process_exit,void ngx_master_process_exit (ngx_cycle_t*),os\win32\ngx_process_cycle.c,"static void
ngx_master_process_exit(ngx_cycle_t *cycle)
{
    ngx_uint_t  i;

    ngx_delete_pidfile(cycle);

    ngx_close_handle(ngx_cache_manager_mutex);
    ngx_close_handle(ngx_stop_event);
    ngx_close_handle(ngx_quit_event);
    ngx_close_handle(ngx_reopen_event);
    ngx_close_handle(ngx_reload_event);
    ngx_close_handle(ngx_master_process_event);

    ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, ""exit"");

    for (i = 0; cycle->modules[i]; i++) {
        if (cycle->modules[i]->exit_master) {
            cycle->modules[i]->exit_master(cycle);
        }
    }

    ngx_destroy_pool(cycle->pool);

    exit(0);
}",541.0,566.0,1.0,1.0,26.0,0,0,0,0,2,0,1,1,0,0,,0,0,2,1,1,void
6308,413914,ngx_worker_process_cycle,1,ngx_worker_process_cycle,"void ngx_worker_process_cycle (ngx_cycle_t*,void*)",os\win32\ngx_process_cycle.c,"static void
ngx_worker_process_cycle(ngx_cycle_t *cycle, char *mevn)
{
    char        wtevn[NGX_PROCESS_SYNC_NAME];
    char        wqevn[NGX_PROCESS_SYNC_NAME];
    char        wroevn[NGX_PROCESS_SYNC_NAME];
    HANDLE      mev, events[3];
    u_long      nev, ev;
    ngx_err_t   err;
    ngx_tid_t   wtid, cmtid, cltid;
    ngx_log_t  *log;

    log = cycle->log;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, log, 0, ""worker started"");

    ngx_sprintf((u_char *) wtevn, ""ngx_worker_term_%P%Z"", ngx_pid);
    events[0] = CreateEvent(NULL, 1, 0, wtevn);
    if (events[0] == NULL) {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ""CreateEvent(\""%s\"") failed"", wtevn);
        goto failed;
    }

    ngx_sprintf((u_char *) wqevn, ""ngx_worker_quit_%P%Z"", ngx_pid);
    events[1] = CreateEvent(NULL, 1, 0, wqevn);
    if (events[1] == NULL) {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ""CreateEvent(\""%s\"") failed"", wqevn);
        goto fail...",569.0,759.0,1.0,1.0,191.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6309,413920,ngx_worker_process_init,1,ngx_worker_process_init,"void ngx_worker_process_init (ngx_cycle_t*,ngx_int_t)",os\unix\ngx_process_cycle.c,"static void
ngx_worker_process_init(ngx_cycle_t *cycle, ngx_int_t worker)
{
    sigset_t          set;
    ngx_int_t         n;
    ngx_time_t       *tp;
    ngx_uint_t        i;
    ngx_cpuset_t     *cpu_affinity;
    struct rlimit     rlmt;
    ngx_core_conf_t  *ccf;
    ngx_listening_t  *ls;

    if (ngx_set_environment(cycle, NULL) == NULL) {
        /* fatal */
        exit(2);
    }

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    if (worker >= 0 && ccf->priority != 0) {
        if (setpriority(PRIO_PROCESS, 0, ccf->priority) == -1) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""setpriority(%d) failed"", ccf->priority);
        }
    }

    if (ccf->rlimit_nofile != NGX_CONF_UNSET) {
        rlmt.rlim_cur = (rlim_t) ccf->rlimit_nofile;
        rlmt.rlim_max = (rlim_t) ccf->rlimit_nofile;

        if (setrlimit(RLIMIT_NOFILE, &rlmt) == -1) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_e...",751.0,945.0,1.0,1.0,195.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6310,413926,ngx_worker_process_exit,1,ngx_worker_process_exit,void ngx_worker_process_exit (ngx_cycle_t*),os\win32\ngx_process_cycle.c,"static void
ngx_worker_process_exit(ngx_cycle_t *cycle)
{
    ngx_uint_t         i;
    ngx_connection_t  *c;

    ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, ""exit"");

    for (i = 0; cycle->modules[i]; i++) {
        if (cycle->modules[i]->exit_process) {
            cycle->modules[i]->exit_process(cycle);
        }
    }

    if (ngx_exiting) {
        c = cycle->connections;
        for (i = 0; i < cycle->connection_n; i++) {
            if (c[i].fd != (ngx_socket_t) -1
                && c[i].read
                && !c[i].read->accept
                && !c[i].read->channel
                && !c[i].read->resolver)
            {
                ngx_log_error(NGX_LOG_ALERT, cycle->log, 0,
                              ""*%uA open socket #%d left in connection %ui"",
                              c[i].number, c[i].fd, i);
            }
        }
    }

    ngx_destroy_pool(cycle->pool);

    exit(0);
}",822.0,855.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6311,413931,ngx_channel_handler,1,ngx_channel_handler,void ngx_channel_handler (ngx_event_t*),os\unix\ngx_process_cycle.c,"static void
ngx_channel_handler(ngx_event_t *ev)
{
    ngx_int_t          n;
    ngx_channel_t      ch;
    ngx_connection_t  *c;

    if (ev->timedout) {
        ev->timedout = 0;
        return;
    }

    c = ev->data;

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, ev->log, 0, ""channel handler"");

    for ( ;; ) {

        n = ngx_read_channel(c->fd, &ch, sizeof(ngx_channel_t), ev->log);

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, ev->log, 0, ""channel: %i"", n);

        if (n == NGX_ERROR) {

            if (ngx_event_flags & NGX_USE_EPOLL_EVENT) {
                ngx_del_conn(c, 0);
            }

            ngx_close_connection(c);
            return;
        }

        if (ngx_event_flags & NGX_USE_EVENTPORT_EVENT) {
            if (ngx_add_event(ev, NGX_READ_EVENT, 0) == NGX_ERROR) {
                return;
            }
        }

        if (n == NGX_AGAIN) {
            return;
        }

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, ev->log, 0,
                       ""channel comm...",1009.0,1094.0,1.0,1.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6312,413936,ngx_cache_manager_process_cycle,1,ngx_cache_manager_process_cycle,"void ngx_cache_manager_process_cycle (ngx_cycle_t*,void*)",os\unix\ngx_process_cycle.c,"static void
ngx_cache_manager_process_cycle(ngx_cycle_t *cycle, void *data)
{
    ngx_cache_manager_ctx_t *ctx = data;

    void         *ident[4];
    ngx_event_t   ev;

    /*
     * Set correct process type since closing listening Unix domain socket
     * in a master process also removes the Unix domain socket file.
     */
    ngx_process = NGX_PROCESS_HELPER;

    ngx_close_listening_sockets(cycle);

    /* Set a moderate number of connections for a helper process. */
    cycle->connection_n = 512;

    ngx_worker_process_init(cycle, -1);

    ngx_memzero(&ev, sizeof(ngx_event_t));
    ev.handler = ctx->handler;
    ev.data = ident;
    ev.log = cycle->log;
    ident[3] = (void *) -1;

    ngx_use_accept_mutex = 0;

    ngx_setproctitle(ctx->name);

    ngx_add_timer(&ev, ctx->delay);

    for ( ;; ) {

        if (ngx_terminate || ngx_quit) {
            ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, ""exiting"");
            exit(0);
        }

        if (ngx_reopen) {
        ...",1097.0,1145.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6313,413942,ngx_cache_manager_process_handler,1,ngx_cache_manager_process_handler,void ngx_cache_manager_process_handler (ngx_event_t*),os\win32\ngx_process_cycle.c,"static void
ngx_cache_manager_process_handler(void)
{
    u_long        ev;
    ngx_uint_t    i;
    ngx_msec_t    next, n;
    ngx_path_t  **path;

    next = 60 * 60 * 1000;

    path = ngx_cycle->paths.elts;
    for (i = 0; i < ngx_cycle->paths.nelts; i++) {

        if (path[i]->manager) {
            n = path[i]->manager(path[i]->data);

            next = (n <= next) ? n : next;

            ngx_time_update();
        }
    }

    if (next == 0) {
        next = 1;
    }

    ev = WaitForSingleObject(ngx_cache_manager_event, (u_long) next);

    if (ev != WAIT_TIMEOUT) {

        ngx_time_update();

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, ngx_cycle->log, 0,
                       ""cache manager WaitForSingleObject: %ul"", ev);
    }
}",918.0,953.0,1.0,1.0,36.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6314,413947,ngx_cache_loader_process_handler,1,ngx_cache_loader_process_handler,void ngx_cache_loader_process_handler (ngx_event_t*),os\unix\ngx_process_cycle.c,"static void
ngx_cache_loader_process_handler(ngx_event_t *ev)
{
    ngx_uint_t     i;
    ngx_path_t   **path;
    ngx_cycle_t   *cycle;

    cycle = (ngx_cycle_t *) ngx_cycle;

    path = cycle->paths.elts;
    for (i = 0; i < cycle->paths.nelts; i++) {

        if (ngx_terminate || ngx_quit) {
            break;
        }

        if (path[i]->loader) {
            path[i]->loader(path[i]->data);
            ngx_time_update();
        }
    }

    exit(0);
}",1177.0,1200.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6315,413993,ngx_master_process_cycle,1,ngx_master_process_cycle,void ngx_master_process_cycle (ngx_cycle_t*),os\win32\ngx_process_cycle.c,"void
ngx_master_process_cycle(ngx_cycle_t *cycle)
{
    u_long      nev, ev, timeout;
    ngx_err_t   err;
    ngx_int_t   n;
    ngx_msec_t  timer;
    ngx_uint_t  live;
    HANDLE      events[MAXIMUM_WAIT_OBJECTS];

    ngx_sprintf((u_char *) ngx_master_process_event_name,
                ""ngx_master_%s%Z"", ngx_unique);

    if (ngx_process == NGX_PROCESS_WORKER) {
        ngx_worker_process_cycle(cycle, ngx_master_process_event_name);
        return;
    }

    ngx_log_debug0(NGX_LOG_DEBUG_CORE, cycle->log, 0, ""master started"");

    ngx_console_init(cycle);

    SetEnvironmentVariable(""ngx_unique"", ngx_unique);

    ngx_master_process_event = CreateEvent(NULL, 1, 0,
                                           ngx_master_process_event_name);
    if (ngx_master_process_event == NULL) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""CreateEvent(\""%s\"") failed"",
                      ngx_master_process_event_name);
        exit(2);
    }

    if (n...",63.0,249.0,1.0,1.0,187.0,109,24,171,47,0,59,28,47,12,27,,0,37,2,1,1,void
6316,414498,ngx_single_process_cycle,1,ngx_single_process_cycle,void ngx_single_process_cycle (ngx_cycle_t*),os\win32\ngx_process_cycle.c,"void
ngx_single_process_cycle(ngx_cycle_t *cycle)
{
    ngx_tid_t  tid;

    ngx_console_init(cycle);

    if (ngx_create_signal_events(cycle) != NGX_OK) {
        exit(2);
    }

    if (ngx_create_thread(&tid, ngx_worker_thread, NULL, cycle->log) != 0) {
        /* fatal */
        exit(2);
    }

    /* STUB */
    WaitForSingleObject(ngx_stop_event, INFINITE);
}",984.0,1002.0,1.0,1.0,19.0,32,7,44,12,1,13,13,25,5,7,,0,8,2,1,1,void
6317,417588,ngx_shm_alloc,1,ngx_shm_alloc,ngx_int_t ngx_shm_alloc (ngx_shm_t*),os\win32\ngx_shmem.c,"ngx_int_t
ngx_shm_alloc(ngx_shm_t *shm)
{
    u_char         *name;
    uint64_t        size;
    static u_char  *base = (u_char *) NGX_SHMEM_BASE;

    name = ngx_alloc(shm->name.len + 2 + NGX_INT32_LEN, shm->log);
    if (name == NULL) {
        return NGX_ERROR;
    }

    (void) ngx_sprintf(name, ""%V_%s%Z"", &shm->name, ngx_unique);

    ngx_set_errno(0);

    size = shm->size;

    shm->handle = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE,
                                    (u_long) (size >> 32),
                                    (u_long) (size & 0xffffffff),
                                    (char *) name);

    if (shm->handle == NULL) {
        ngx_log_error(NGX_LOG_ALERT, shm->log, ngx_errno,
                      ""CreateFileMapping(%uz, %s) failed"",
                      shm->size, name);
        ngx_free(name);

        return NGX_ERROR;
    }

    ngx_free(name);

    if (ngx_errno == ERROR_ALREADY_EXISTS) {
        shm->exists = 1;
    }

    shm->a...",44.0,120.0,1.0,38.0,77.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6318,417593,ngx_shm_free,1,ngx_shm_free,void ngx_shm_free (ngx_shm_t*),os\win32\ngx_shmem.c,"void
ngx_shm_free(ngx_shm_t *shm)
{
    if (UnmapViewOfFile(shm->addr) == 0) {
        ngx_log_error(NGX_LOG_ALERT, shm->log, ngx_errno,
                      ""UnmapViewOfFile(%p) of file mapping \""%V\"" failed"",
                      shm->addr, &shm->name);
    }

    if (CloseHandle(shm->handle) == 0) {
        ngx_log_error(NGX_LOG_ALERT, shm->log, ngx_errno,
                      ""CloseHandle() of file mapping \""%V\"" failed"",
                      &shm->name);
    }
}",147.0,161.0,1.0,1.0,15.0,0,0,0,0,2,0,1,1,0,0,,0,0,2,1,1,void
6319,417607,ngx_tcp_nopush,1,ngx_tcp_nopush,int ngx_tcp_nopush (ngx_socket_t),os\unix\ngx_socket.c,"int
ngx_tcp_nopush(ngx_socket_t s)
{
    return 0;
}",103.0,107.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,int
6320,417614,ngx_tcp_push,1,ngx_tcp_push,int ngx_tcp_push (ngx_socket_t),os\win32\ngx_socket.c,"int
ngx_tcp_push(ngx_socket_t s)
{
    return 0;
}",45.0,49.0,1.0,1.0,5.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,int
6321,417644,ngx_solaris_sendfilev_chain,1,ngx_solaris_sendfilev_chain,"ngx_chain_t* ngx_solaris_sendfilev_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\unix\ngx_solaris_sendfilev_chain.c,"ngx_chain_t *
ngx_solaris_sendfilev_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    int             fd;
    u_char         *prev;
    off_t           size, send, prev_send, aligned, fprev;
    size_t          sent;
    ssize_t         n;
    ngx_int_t       eintr;
    ngx_err_t       err;
    ngx_buf_t      *file;
    ngx_uint_t      nsfv;
    sendfilevec_t  *sfv, sfvs[NGX_SENDFILEVECS];
    ngx_event_t    *wev;
    ngx_chain_t    *cl;

    wev = c->write;

    if (!wev->ready) {
        return in;
    }

    if (!c->sendfile) {
        return ngx_writev_chain(c, in, limit);
    }


    /* the maximum limit size is the maximum size_t value - the page size */

    if (limit == 0 || limit > (off_t) (NGX_MAX_SIZE_T_VALUE - ngx_pagesize)) {
        limit = NGX_MAX_SIZE_T_VALUE - ngx_pagesize;
    }


    send = 0;

    for ( ;; ) {
        fd = SFV_FD_SELF;
        prev = NULL;
        fprev = 0;
        file = NULL;
        sfv = NULL;
        eintr = 0;
        sent = 0...",41.0,228.0,1.0,30.0,188.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6322,418411,ngx_casa,1,ngx_casa,"ngx_atomic_uint_t ngx_casa (ngx_atomic_uint_t,ngx_atomic_uint_t,ngx_atomic_t*)",os\unix\ngx_sunpro_atomic_sparc64.h,"ngx_atomic_uint_t
ngx_casa(ngx_atomic_uint_t set, ngx_atomic_uint_t old, ngx_atomic_t *lock);",16.0,16.0,1.0,74.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_atomic_uint_t
6323,418418,ngx_casxa,1,ngx_casxa,"ngx_atomic_uint_t ngx_casxa (ngx_atomic_uint_t,ngx_atomic_uint_t,ngx_atomic_t*)",os\unix\ngx_sunpro_atomic_sparc64.h,"ngx_atomic_uint_t
ngx_casxa(ngx_atomic_uint_t set, ngx_atomic_uint_t old, ngx_atomic_t *lock);",19.0,19.0,1.0,75.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_atomic_uint_t
6324,418506,ngx_thread_cond_create,1,ngx_thread_cond_create,"ngx_int_t ngx_thread_cond_create (ngx_thread_cond_t*,ngx_log_t*)",os\unix\ngx_thread_cond.c,"ngx_int_t
ngx_thread_cond_create(ngx_thread_cond_t *cond, ngx_log_t *log)
{
    ngx_err_t  err;

    err = pthread_cond_init(cond, NULL);
    if (err == 0) {
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_EMERG, log, err, ""pthread_cond_init() failed"");
    return NGX_ERROR;
}",12.0,24.0,1.0,1.0,13.0,2,2,9,7,0,1,2,2,0,1,,0,0,4,2,2,ngx_int_t
6325,418532,ngx_thread_cond_destroy,1,ngx_thread_cond_destroy,"ngx_int_t ngx_thread_cond_destroy (ngx_thread_cond_t*,ngx_log_t*)",os\unix\ngx_thread_cond.c,"ngx_int_t
ngx_thread_cond_destroy(ngx_thread_cond_t *cond, ngx_log_t *log)
{
    ngx_err_t  err;

    err = pthread_cond_destroy(cond);
    if (err == 0) {
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_EMERG, log, err, ""pthread_cond_destroy() failed"");
    return NGX_ERROR;
}",27.0,39.0,1.0,1.0,13.0,2,2,8,6,0,1,2,2,0,1,,0,0,4,2,2,ngx_int_t
6326,418557,ngx_thread_cond_signal,1,ngx_thread_cond_signal,"ngx_int_t ngx_thread_cond_signal (ngx_thread_cond_t*,ngx_log_t*)",os\unix\ngx_thread_cond.c,"ngx_int_t
ngx_thread_cond_signal(ngx_thread_cond_t *cond, ngx_log_t *log)
{
    ngx_err_t  err;

    err = pthread_cond_signal(cond);
    if (err == 0) {
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_EMERG, log, err, ""pthread_cond_signal() failed"");
    return NGX_ERROR;
}",42.0,54.0,1.0,1.0,13.0,2,2,8,6,1,1,2,2,0,1,,0,0,4,2,2,ngx_int_t
6327,418582,ngx_thread_cond_wait,1,ngx_thread_cond_wait,"ngx_int_t ngx_thread_cond_wait (ngx_thread_cond_t*,ngx_thread_mutex_t*,ngx_log_t*)",os\unix\ngx_thread_cond.c,"ngx_int_t
ngx_thread_cond_wait(ngx_thread_cond_t *cond, ngx_thread_mutex_t *mtx,
    ngx_log_t *log)
{
    ngx_err_t  err;

    err = pthread_cond_wait(cond, mtx);

#if 0
    ngx_time_update();
#endif

    if (err == 0) {
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_ALERT, log, err, ""pthread_cond_wait() failed"");

    return NGX_ERROR;
}",57.0,76.0,1.0,1.0,20.0,2,2,9,7,0,1,2,2,0,1,,0,0,6,3,3,ngx_int_t
6328,418622,ngx_thread_tid,1,ngx_thread_tid,ngx_tid_t ngx_thread_tid (void),os\unix\ngx_thread_id.c,"ngx_tid_t
ngx_thread_tid(void)
{
    return (uint64_t) (uintptr_t) pthread_self();
}",64.0,68.0,1.0,1.0,5.0,2,1,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_tid_t
6329,418642,ngx_thread_mutex_create,1,ngx_thread_mutex_create,"ngx_int_t ngx_thread_mutex_create (ngx_thread_mutex_t*,ngx_log_t*)",os\unix\ngx_thread_mutex.c,"ngx_int_t
ngx_thread_mutex_create(ngx_thread_mutex_t *mtx, ngx_log_t *log)
{
    ngx_err_t            err;
    pthread_mutexattr_t  attr;

    err = pthread_mutexattr_init(&attr);
    if (err != 0) {
        ngx_log_error(NGX_LOG_EMERG, log, err,
                      ""pthread_mutexattr_init() failed"");
        return NGX_ERROR;
    }

    err = pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ERRORCHECK);
    if (err != 0) {
        ngx_log_error(NGX_LOG_EMERG, log, err,
                      ""pthread_mutexattr_settype""
                      ""(PTHREAD_MUTEX_ERRORCHECK) failed"");
        return NGX_ERROR;
    }

    err = pthread_mutex_init(mtx, &attr);
    if (err != 0) {
        ngx_log_error(NGX_LOG_EMERG, log, err,
                      ""pthread_mutex_init() failed"");
        return NGX_ERROR;
    }

    err = pthread_mutexattr_destroy(&attr);
    if (err != 0) {
        ngx_log_error(NGX_LOG_ALERT, log, err,
                      ""pthread_mutexattr_destroy() failed"");
    }

    ...",77.0,112.0,1.0,1.0,36.0,12,3,30,9,0,4,5,5,0,4,,0,0,4,2,2,ngx_int_t
6330,418720,ngx_thread_mutex_destroy,1,ngx_thread_mutex_destroy,"ngx_int_t ngx_thread_mutex_destroy (ngx_thread_mutex_t*,ngx_log_t*)",os\unix\ngx_thread_mutex.c,"ngx_int_t
ngx_thread_mutex_destroy(ngx_thread_mutex_t *mtx, ngx_log_t *log)
{
    ngx_err_t  err;

    err = pthread_mutex_destroy(mtx);
    if (err != 0) {
        ngx_log_error(NGX_LOG_ALERT, log, err,
                      ""pthread_mutex_destroy() failed"");
        return NGX_ERROR;
    }

    return NGX_OK;
}",115.0,128.0,1.0,1.0,14.0,2,2,8,6,0,1,2,2,0,1,,0,0,4,2,2,ngx_int_t
6331,418745,ngx_thread_mutex_lock,1,ngx_thread_mutex_lock,"ngx_int_t ngx_thread_mutex_lock (ngx_thread_mutex_t*,ngx_log_t*)",os\unix\ngx_thread_mutex.c,"ngx_int_t
ngx_thread_mutex_lock(ngx_thread_mutex_t *mtx, ngx_log_t *log)
{
    ngx_err_t  err;

    err = pthread_mutex_lock(mtx);
    if (err == 0) {
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_ALERT, log, err, ""pthread_mutex_lock() failed"");

    return NGX_ERROR;
}",131.0,144.0,1.0,1.0,14.0,2,2,8,6,1,1,2,2,0,1,,0,0,4,2,2,ngx_int_t
6332,418770,ngx_thread_mutex_unlock,1,ngx_thread_mutex_unlock,"ngx_int_t ngx_thread_mutex_unlock (ngx_thread_mutex_t*,ngx_log_t*)",os\unix\ngx_thread_mutex.c,"ngx_int_t
ngx_thread_mutex_unlock(ngx_thread_mutex_t *mtx, ngx_log_t *log)
{
    ngx_err_t  err;

    err = pthread_mutex_unlock(mtx);

#if 0
    ngx_time_update();
#endif

    if (err == 0) {
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_ALERT, log, err, ""pthread_mutex_unlock() failed"");

    return NGX_ERROR;
}",147.0,165.0,1.0,1.0,19.0,2,2,8,6,3,1,2,2,0,1,,0,0,4,2,2,ngx_int_t
6333,418804,ngx_timezone_update,1,ngx_timezone_update,void ngx_timezone_update (void),os\unix\ngx_time.c,"void
ngx_timezone_update(void)
{
#if (NGX_FREEBSD)

    if (getenv(""TZ"")) {
        return;
    }

    putenv(""TZ=UTC"");

    tzset();

    unsetenv(""TZ"");

    tzset();

#elif (NGX_LINUX)
    time_t      s;
    struct tm  *t;
    char        buf[4];

    s = time(0);

    t = localtime(&s);

    strftime(buf, 4, ""%H"", t);

#endif
}",24.0,53.0,1.0,1.0,30.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,void
6334,418809,ngx_localtime,1,ngx_localtime,"void ngx_localtime (time_t,ngx_tm_t*)",os\unix\ngx_time.c,"void
ngx_localtime(time_t s, ngx_tm_t *tm)
{
#if (NGX_HAVE_LOCALTIME_R)
    (void) localtime_r(&s, tm);

#else
    ngx_tm_t  *t;

    t = localtime(&s);
    *tm = *t;

#endif

    tm->ngx_tm_mon++;
    tm->ngx_tm_year += 1900;
}",56.0,72.0,1.0,1.0,17.0,9,6,6,3,1,0,1,1,0,0,,0,0,4,2,2,void
6335,418835,ngx_libc_localtime,1,ngx_libc_localtime,"void ngx_libc_localtime (time_t,tm*)",os\win32\ngx_time.c,"void
ngx_libc_localtime(time_t s, struct tm *tm)
{
    struct tm  *t;

    t = localtime(&s);
    *tm = *t;
}",41.0,48.0,1.0,1.0,8.0,5,3,4,3,1,0,1,1,0,0,,0,0,4,2,2,void
6336,418852,ngx_libc_gmtime,1,ngx_libc_gmtime,"void ngx_libc_gmtime (time_t,tm*)",os\win32\ngx_time.c,"void
ngx_libc_gmtime(time_t s, struct tm *tm)
{
    struct tm  *t;

    t = gmtime(&s);
    *tm = *t;
}",51.0,58.0,1.0,1.0,8.0,5,3,4,3,0,0,1,1,0,0,,0,0,4,2,2,void
6337,419155,ngx_udp_output_chain_to_iovec,1,ngx_udp_output_chain_to_iovec,"ngx_chain_t* ngx_udp_output_chain_to_iovec (ngx_iovec_t*,ngx_chain_t*,ngx_log_t*)",os\unix\ngx_udp_sendmsg_chain.c,"static ngx_chain_t *
ngx_udp_output_chain_to_iovec(ngx_iovec_t *vec, ngx_chain_t *in, ngx_log_t *log)
{
    size_t         total, size;
    u_char        *prev;
    ngx_uint_t     n, flush;
    ngx_chain_t   *cl;
    struct iovec  *iov;

    cl = in;
    iov = NULL;
    prev = NULL;
    total = 0;
    n = 0;
    flush = 0;

    for ( /* void */ ; in && !flush; in = in->next) {

        if (in->buf->flush || in->buf->last_buf) {
            flush = 1;
        }

        if (ngx_buf_special(in->buf)) {
            continue;
        }

        if (in->buf->in_file) {
            break;
        }

        if (!ngx_buf_in_memory(in->buf)) {
            ngx_log_error(NGX_LOG_ALERT, log, 0,
                          ""bad buf in output chain ""
                          ""t:%d r:%d f:%d %p %p-%p %p %O-%O"",
                          in->buf->temporary,
                          in->buf->recycled,
                          in->buf->in_file,
                          in->buf->start,
            ...",113.0,203.0,1.0,1.0,91.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6338,419162,ngx_sendmsg,1,ngx_sendmsg,"ssize_t ngx_sendmsg (ngx_connection_t*,ngx_iovec_t*)",os\unix\ngx_udp_sendmsg_chain.c,"static ssize_t
ngx_sendmsg(ngx_connection_t *c, ngx_iovec_t *vec)
{
    ssize_t        n;
    ngx_err_t      err;
    struct msghdr  msg;

#if (NGX_HAVE_MSGHDR_MSG_CONTROL)

#if (NGX_HAVE_IP_SENDSRCADDR)
    u_char         msg_control[CMSG_SPACE(sizeof(struct in_addr))];
#elif (NGX_HAVE_IP_PKTINFO)
    u_char         msg_control[CMSG_SPACE(sizeof(struct in_pktinfo))];
#endif

#if (NGX_HAVE_INET6 && NGX_HAVE_IPV6_RECVPKTINFO)
    u_char         msg_control6[CMSG_SPACE(sizeof(struct in6_pktinfo))];
#endif

#endif

    ngx_memzero(&msg, sizeof(struct msghdr));

    if (c->socklen) {
        msg.msg_name = c->sockaddr;
        msg.msg_namelen = c->socklen;
    }

    msg.msg_iov = vec->iovs;
    msg.msg_iovlen = vec->count;

#if (NGX_HAVE_MSGHDR_MSG_CONTROL)

    if (c->listening && c->listening->wildcard && c->local_sockaddr) {

#if (NGX_HAVE_IP_SENDSRCADDR)

        if (c->local_sockaddr->sa_family == AF_INET) {
            struct cmsghdr      *cmsg;
            struct in_addr      *a...",206.0,342.0,1.0,1.0,137.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ssize_t
6339,419759,ngx_libc_crypt,1,ngx_libc_crypt,"ngx_int_t ngx_libc_crypt (ngx_pool_t*,u_char*,u_char*,u_char**)",os\unix\ngx_user.h,"ngx_int_t ngx_libc_crypt(ngx_pool_t *pool, u_char *key, u_char *salt,
    u_char **encrypted);",20.0,21.0,11.0,23.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
6340,420393,ngx_dlerror,1,ngx_dlerror,char* ngx_dlerror (void),os\win32\ngx_dlopen.c,"char *
ngx_dlerror(void)
{
    u_char         *p;
    static u_char   errstr[NGX_MAX_ERROR_STR];

    p = ngx_strerror(ngx_errno, errstr, NGX_MAX_ERROR_STR);
    *p = '\0';

    return (char *) errstr;
}",12.0,22.0,1.0,1.0,11.0,4,3,6,4,0,1,1,1,0,1,,0,1,2,1,1,char*
6341,420576,ngx_event_log,1,ngx_event_log,"ANY ngx_event_log (ngx_err_t,char*...)",os\win32\ngx_event_log.c,"ngx_event_log(ngx_err_t err, const char *fmt, ...)
{
    u_char         *p, *last;
    long            types;
    HKEY            key;
    HANDLE          ev;
    va_list         args;
    u_char          text[NGX_MAX_ERROR_STR];
    const char     *msgarg[9];
    static u_char   netmsg[] = ""%SystemRoot%\\System32\\netmsg.dll"";

    last = text + NGX_MAX_ERROR_STR;
    p = text + GetModuleFileName(NULL, (char *) text, NGX_MAX_ERROR_STR - 50);

    *p++ = ':';
    ngx_linefeed(p);

    va_start(args, fmt);
    p = ngx_vslprintf(p, last, fmt, args);
    va_end(args);

    if (err) {
        p = ngx_log_errno(p, last, err);
    }

    if (p > last - NGX_LINEFEED_SIZE - 1) {
        p = last - NGX_LINEFEED_SIZE - 1;
    }

    ngx_linefeed(p);

    *p = '\0';

    /*
     * we do not log errors here since we use
     * Event Log only to log our own logs open errors
     */

    if (RegCreateKeyEx(HKEY_LOCAL_MACHINE,
           ""SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\...",15.0,99.0,1.0,25.0,85.0,50,11,74,20,0,2,6,6,0,2,,0,2,4,2,2,ANY
6342,420790,ngx_win32_check_filename,1,ngx_win32_check_filename,"ngx_int_t ngx_win32_check_filename (u_char*,u_short*,size_t)",os\win32\ngx_files.c,"static ngx_int_t
ngx_win32_check_filename(u_char *name, u_short *u, size_t len)
{
    u_char     *p, ch;
    u_long      n;
    u_short    *lu;
    ngx_err_t   err;
    enum {
        sw_start = 0,
        sw_normal,
        sw_after_slash,
        sw_after_colon,
        sw_after_dot
    } state;

    /* check for NTFS streams ("":""), trailing dots and spaces */

    lu = NULL;
    state = sw_start;

    for (p = name; *p; p++) {
        ch = *p;

        switch (state) {

        case sw_start:

            /*
             * skip till first ""/"" to allow paths starting with drive and
             * relative path, like ""c:html/""
             */

            if (ch == '/' || ch == '\\') {
                state = sw_after_slash;
            }

            break;

        case sw_normal:

            if (ch == ':') {
                state = sw_after_colon;
                break;
            }

            if (ch == '.' || ch == ' ') {
                state = sw_after_dot;
              ...",674.0,815.0,1.0,1.0,142.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6343,420797,ngx_utf8_to_utf16,1,ngx_utf8_to_utf16,"u_short* ngx_utf8_to_utf16 (u_short*,u_char*,size_t*)",os\win32\ngx_files.c,"static u_short *
ngx_utf8_to_utf16(u_short *utf16, u_char *utf8, size_t *len)
{
    u_char    *p;
    u_short   *u, *last;
    uint32_t   n;

    p = utf8;
    u = utf16;
    last = utf16 + *len;

    while (u < last) {

        if (*p < 0x80) {
            *u++ = (u_short) *p;

            if (*p == 0) {
                *len = u - utf16;
                return utf16;
            }

            p++;

            continue;
        }

        if (u + 1 == last) {
            *len = u - utf16;
            break;
        }

        n = ngx_utf8_decode(&p, 4);

        if (n > 0x10ffff) {
            ngx_set_errno(NGX_EILSEQ);
            return NULL;
        }

        if (n > 0xffff) {
            n -= 0x10000;
            *u++ = (u_short) (0xd800 + (n >> 10));
            *u++ = (u_short) (0xdc00 + (n & 0x03ff));
            continue;
        }

        *u++ = (u_short) n;
    }

    /* the given buffer is not enough, allocate a new one */

    u = malloc(((p - utf8) + ngx_strlen(p) +...",818.0,912.0,1.0,1.0,95.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,u_short
6344,420804,ngx_open_file,1,ngx_open_file,"ngx_fd_t ngx_open_file (u_char*,u_long,u_long,u_long)",os\win32\ngx_files.c,"ngx_fd_t
ngx_open_file(u_char *name, u_long mode, u_long create, u_long access)
{
    size_t      len;
    u_short    *u;
    ngx_fd_t    fd;
    ngx_err_t   err;
    u_short     utf16[NGX_UTF16_BUFLEN];

    len = NGX_UTF16_BUFLEN;
    u = ngx_utf8_to_utf16(utf16, name, &len);

    if (u == NULL) {
        return INVALID_HANDLE_VALUE;
    }

    fd = INVALID_HANDLE_VALUE;

    if (create == NGX_FILE_OPEN
        && ngx_win32_check_filename(name, u, len) != NGX_OK)
    {
        goto failed;
    }

    fd = CreateFileW(u, mode,
                     FILE_SHARE_READ|FILE_SHARE_WRITE|FILE_SHARE_DELETE,
                     NULL, create, FILE_FLAG_BACKUP_SEMANTICS, NULL);

failed:

    if (u != utf16) {
        err = ngx_errno;
        ngx_free(u);
        ngx_set_errno(err);
    }

    return fd;
}",21.0,58.0,1.0,22.0,38.0,13,6,33,17,11,2,5,4,1,2,,0,2,8,4,4,ngx_fd_t
6345,421161,ngx_read_fd,1,ngx_read_fd,"ssize_t ngx_read_fd (ngx_fd_t,void*,size_t)",os\win32\ngx_files.c,"ssize_t
ngx_read_fd(ngx_fd_t fd, void *buf, size_t size)
{
    u_long  n;

    if (ReadFile(fd, buf, size, &n, NULL) != 0) {
        return (size_t) n;
    }

    return -1;
}",164.0,174.0,1.0,1.0,11.0,4,4,6,5,2,0,2,2,0,0,,0,0,6,3,3,ssize_t
6346,421213,ngx_write_console,1,ngx_write_console,"ssize_t ngx_write_console (ngx_fd_t,void*,size_t)",os\win32\ngx_files.c,"ssize_t
ngx_write_console(ngx_fd_t fd, void *buf, size_t size)
{
    u_long  n;

    (void) CharToOemBuff(buf, buf, size);

    if (WriteFile(fd, buf, size, &n, NULL) != 0) {
        return (size_t) n;
    }

    return -1;
}",190.0,202.0,1.0,1.0,13.0,5,4,9,5,2,0,2,2,0,0,,0,0,6,3,3,ssize_t
6347,421245,ngx_win32_rename_file,1,ngx_win32_rename_file,"ngx_err_t ngx_win32_rename_file (ngx_str_t*,ngx_str_t*,ngx_log_t*)",os\win32\ngx_files.c,"ngx_err_t
ngx_win32_rename_file(ngx_str_t *from, ngx_str_t *to, ngx_log_t *log)
{
    u_char             *name;
    ngx_err_t           err;
    ngx_uint_t          collision;
    ngx_atomic_uint_t   num;

    name = ngx_alloc(to->len + 1 + NGX_ATOMIC_T_LEN + 1 + sizeof(""DELETE""),
                     log);
    if (name == NULL) {
        return NGX_ENOMEM;
    }

    ngx_memcpy(name, to->data, to->len);

    collision = 0;

    /* mutex_lock() (per cache or single ?) */

    for ( ;; ) {
        num = ngx_next_temp_number(collision);

        ngx_sprintf(name + to->len, "".%0muA.DELETE%Z"", num);

        if (MoveFile((const char *) to->data, (const char *) name) != 0) {
            break;
        }

        collision = 1;

        ngx_log_error(NGX_LOG_CRIT, log, ngx_errno,
                      ""MoveFile() \""%s\"" to \""%s\"" failed"", to->data, name);
    }

    if (MoveFile((const char *) from->data, (const char *) to->data) == 0) {
        err = ngx_errno;

    } else {
        err ...",205.0,257.0,1.0,1.0,53.0,28,7,35,12,0,13,7,7,3,5,,0,10,6,3,3,ngx_err_t
6348,421372,ngx_file_info,1,ngx_file_info,"ngx_int_t ngx_file_info (u_char*,ngx_file_info_t*)",os\win32\ngx_files.c,"ngx_int_t
ngx_file_info(u_char *file, ngx_file_info_t *sb)
{
    size_t                      len;
    long                        rc;
    u_short                    *u;
    ngx_err_t                   err;
    WIN32_FILE_ATTRIBUTE_DATA   fa;
    u_short                     utf16[NGX_UTF16_BUFLEN];

    len = NGX_UTF16_BUFLEN;

    u = ngx_utf8_to_utf16(utf16, file, &len);

    if (u == NULL) {
        return NGX_FILE_ERROR;
    }

    rc = NGX_FILE_ERROR;

    if (ngx_win32_check_filename(file, u, len) != NGX_OK) {
        goto failed;
    }

    rc = GetFileAttributesExW(u, GetFileExInfoStandard, &fa);

    sb->dwFileAttributes = fa.dwFileAttributes;
    sb->ftCreationTime = fa.ftCreationTime;
    sb->ftLastAccessTime = fa.ftLastAccessTime;
    sb->ftLastWriteTime = fa.ftLastWriteTime;
    sb->nFileSizeHigh = fa.nFileSizeHigh;
    sb->nFileSizeLow = fa.nFileSizeLow;

failed:

    if (u != utf16) {
        err = ngx_errno;
        ngx_free(u);
        ngx_set_errno(err);
    }

    ...",260.0,302.0,1.0,38.0,43.0,28,6,37,13,2,2,5,4,1,2,,0,2,4,2,2,ngx_int_t
6349,421779,ngx_realpath,1,ngx_realpath,"u_char ngx_realpath (u_char*,u_char*)",os\win32\ngx_files.c,"u_char *
ngx_realpath(u_char *path, u_char *resolved)
{
    /* STUB */
    return path;
}",419.0,424.0,1.0,1.0,6.0,0,0,1,1,0,0,1,1,0,0,,0,0,4,2,2,u_char
6350,421915,ngx_close_dir,1,ngx_close_dir,ngx_int_t ngx_close_dir (ngx_dir_t*),os\win32\ngx_files.c,"ngx_int_t
ngx_close_dir(ngx_dir_t *dir)
{
    if (FindClose(dir->dir) == 0) {
        return NGX_ERROR;
    }

    return NGX_OK;
}",479.0,487.0,1.0,1.0,9.0,2,2,3,3,4,1,2,2,1,0,,0,1,2,1,1,ngx_int_t
6351,422320,ngx_de_link_info,1,ngx_de_link_info,"ngx_int_t ngx_de_link_info (u_char*,ngx_dir_t*)",os\win32\ngx_files.c,"ngx_int_t
ngx_de_link_info(u_char *name, ngx_dir_t *dir)
{
    return NGX_OK;
}",614.0,618.0,1.0,1.0,5.0,0,0,1,1,2,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6352,422328,ngx_read_ahead,1,ngx_read_ahead,"ngx_int_t ngx_read_ahead (ngx_fd_t,size_t)",os\win32\ngx_files.c,"ngx_int_t
ngx_read_ahead(ngx_fd_t fd, size_t n)
{
    return ~NGX_FILE_ERROR;
}",621.0,625.0,1.0,1.0,5.0,1,1,1,1,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6353,422337,ngx_directio_on,1,ngx_directio_on,ngx_int_t ngx_directio_on (ngx_fd_t),os\win32\ngx_files.c,"ngx_int_t
ngx_directio_on(ngx_fd_t fd)
{
    return ~NGX_FILE_ERROR;
}",628.0,632.0,1.0,1.0,5.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6354,422345,ngx_directio_off,1,ngx_directio_off,ngx_int_t ngx_directio_off (ngx_fd_t),os\win32\ngx_files.c,"ngx_int_t
ngx_directio_off(ngx_fd_t fd)
{
    return ~NGX_FILE_ERROR;
}",635.0,639.0,1.0,1.0,5.0,1,1,1,1,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6355,423163,ngx_wsarecv,1,ngx_wsarecv,"ssize_t ngx_wsarecv (ngx_connection_t*,u_char*,size_t)",os\win32\ngx_wsarecv.c,"ssize_t
ngx_wsarecv(ngx_connection_t *c, u_char *buf, size_t size)
{
    int           rc;
    u_long        bytes, flags;
    WSABUF        wsabuf[1];
    ngx_err_t     err;
    ngx_int_t     n;
    ngx_event_t  *rev;

    wsabuf[0].buf = (char *) buf;
    wsabuf[0].len = size;
    flags = 0;
    bytes = 0;

    rc = WSARecv(c->fd, wsabuf, 1, &bytes, &flags, NULL, NULL);

    ngx_log_debug4(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""WSARecv: fd:%d rc:%d %ul of %z"", c->fd, rc, bytes, size);

    rev = c->read;

    if (rc == -1) {
        rev->ready = 0;
        err = ngx_socket_errno;

        if (err == WSAEWOULDBLOCK) {
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, err,
                           ""WSARecv() not ready"");
            return NGX_AGAIN;
        }

        n = ngx_connection_error(c, err, ""WSARecv() failed"");

        if (n == NGX_ERROR) {
            rev->error = 1;
        }

        return n;
    }

#if (NGX_HAVE_FIONREAD)

    if (rev->available...",13.0,102.0,1.0,1.0,90.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6356,423170,ngx_overlapped_wsarecv,1,ngx_overlapped_wsarecv,"ssize_t ngx_overlapped_wsarecv (ngx_connection_t*,u_char*,size_t)",os\win32\ngx_wsarecv.c,"ssize_t
ngx_overlapped_wsarecv(ngx_connection_t *c, u_char *buf, size_t size)
{
    int               rc;
    u_long            bytes, flags;
    WSABUF            wsabuf[1];
    ngx_err_t         err;
    ngx_int_t         n;
    ngx_event_t      *rev;
    LPWSAOVERLAPPED   ovlp;

    rev = c->read;

    if (!rev->ready) {
        ngx_log_error(NGX_LOG_ALERT, c->log, 0, ""second wsa post"");
        return NGX_AGAIN;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""rev->complete: %d"", rev->complete);

    if (rev->complete) {
        rev->complete = 0;

        if (ngx_event_flags & NGX_USE_IOCP_EVENT) {
            if (rev->ovlp.error) {
                ngx_connection_error(c, rev->ovlp.error, ""WSARecv() failed"");
                return NGX_ERROR;
            }

            ngx_log_debug3(NGX_LOG_DEBUG_EVENT, c->log, 0,
                           ""WSARecv ovlp: fd:%d %ul of %z"",
                           c->fd, rev->available, size);

            return...",105.0,213.0,1.0,1.0,109.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6357,423177,ngx_udp_wsarecv,1,ngx_udp_wsarecv,"ssize_t ngx_udp_wsarecv (ngx_connection_t*,u_char*,size_t)",os\win32\ngx_udp_wsarecv.c,"ssize_t
ngx_udp_wsarecv(ngx_connection_t *c, u_char *buf, size_t size)
{
    int           rc;
    u_long        bytes, flags;
    WSABUF        wsabuf[1];
    ngx_err_t     err;
    ngx_event_t  *rev;

    wsabuf[0].buf = (char *) buf;
    wsabuf[0].len = size;
    flags = 0;
    bytes = 0;

    rc = WSARecv(c->fd, wsabuf, 1, &bytes, &flags, NULL, NULL);

    ngx_log_debug4(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""WSARecv: fd:%d rc:%d %ul of %z"", c->fd, rc, bytes, size);

    rev = c->read;

    if (rc == -1) {
        rev->ready = 0;
        err = ngx_socket_errno;

        if (err == WSAEWOULDBLOCK) {
            ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, err,
                           ""WSARecv() not ready"");
            return NGX_AGAIN;
        }

        rev->error = 1;
        ngx_connection_error(c, err, ""WSARecv() failed"");

        return NGX_ERROR;
    }

    return bytes;
}",13.0,51.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6358,423184,ngx_udp_overlapped_wsarecv,1,ngx_udp_overlapped_wsarecv,"ssize_t ngx_udp_overlapped_wsarecv (ngx_connection_t*,u_char*,size_t)",os\win32\ngx_udp_wsarecv.c,"ssize_t
ngx_udp_overlapped_wsarecv(ngx_connection_t *c, u_char *buf, size_t size)
{
    int               rc;
    u_long            bytes, flags;
    WSABUF            wsabuf[1];
    ngx_err_t         err;
    ngx_event_t      *rev;
    LPWSAOVERLAPPED   ovlp;

    rev = c->read;

    if (!rev->ready) {
        ngx_log_error(NGX_LOG_ALERT, c->log, 0, ""second wsa post"");
        return NGX_AGAIN;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""rev->complete: %d"", rev->complete);

    if (rev->complete) {
        rev->complete = 0;

        if (ngx_event_flags & NGX_USE_IOCP_EVENT) {
            if (rev->ovlp.error) {
                ngx_connection_error(c, rev->ovlp.error, ""WSARecv() failed"");
                return NGX_ERROR;
            }

            ngx_log_debug3(NGX_LOG_DEBUG_EVENT, c->log, 0,
                           ""WSARecv ovlp: fd:%d %ul of %z"",
                           c->fd, rev->available, size);

            return rev->available;
    ...",54.0,149.0,1.0,1.0,96.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6359,423191,ngx_wsarecv_chain,1,ngx_wsarecv_chain,"ssize_t ngx_wsarecv_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\win32\ngx_wsarecv_chain.c,"ssize_t
ngx_wsarecv_chain(ngx_connection_t *c, ngx_chain_t *chain, off_t limit)
{
    int           rc;
    u_char       *prev;
    u_long        bytes, flags;
    size_t        n, size;
    ngx_err_t     err;
    ngx_array_t   vec;
    ngx_event_t  *rev;
    LPWSABUF      wsabuf;
    WSABUF        wsabufs[NGX_WSABUFS];

    prev = NULL;
    wsabuf = NULL;
    flags = 0;
    size = 0;
    bytes = 0;

    vec.elts = wsabufs;
    vec.nelts = 0;
    vec.size = sizeof(WSABUF);
    vec.nalloc = NGX_WSABUFS;
    vec.pool = c->pool;

    /* coalesce the neighbouring bufs */

    while (chain) {
        n = chain->buf->end - chain->buf->last;

        if (limit) {
            if (size >= (size_t) limit) {
                break;
            }

            if (size + n > (size_t) limit) {
                n = (size_t) limit - size;
            }
        }

        if (prev == chain->buf->last) {
            wsabuf->len += n;

        } else {
            if (vec.nelts == vec.nalloc) {
        ...",16.0,145.0,1.0,26.0,130.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6360,423198,ngx_wsasend,1,ngx_wsasend,"ssize_t ngx_wsasend (ngx_connection_t*,u_char*,size_t)",os\win32\ngx_wsasend.c,"ssize_t
ngx_wsasend(ngx_connection_t *c, u_char *buf, size_t size)
{
    int           n;
    u_long        sent;
    ngx_err_t     err;
    ngx_event_t  *wev;
    WSABUF        wsabuf;

    wev = c->write;

    if (!wev->ready) {
        return NGX_AGAIN;
    }

    /*
     * WSABUF must be 4-byte aligned otherwise
     * WSASend() will return undocumented WSAEINVAL error.
     */

    wsabuf.buf = (char *) buf;
    wsabuf.len = size;

    sent = 0;

    n = WSASend(c->fd, &wsabuf, 1, &sent, 0, NULL, NULL);

    ngx_log_debug4(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""WSASend: fd:%d, %d, %ul of %uz"", c->fd, n, sent, size);

    if (n == 0) {
        if (sent < size) {
            wev->ready = 0;
        }

        c->sent += sent;

        return sent;
    }

    err = ngx_socket_errno;

    if (err == WSAEWOULDBLOCK) {
        ngx_log_debug0(NGX_LOG_DEBUG_EVENT, c->log, err, ""WSASend() not ready"");
        wev->ready = 0;
        return NGX_AGAIN;
    }

    wev->error =...",13.0,65.0,1.0,1.0,53.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6361,423205,ngx_overlapped_wsasend,1,ngx_overlapped_wsasend,"ssize_t ngx_overlapped_wsasend (ngx_connection_t*,u_char*,size_t)",os\win32\ngx_wsasend.c,"ssize_t
ngx_overlapped_wsasend(ngx_connection_t *c, u_char *buf, size_t size)
{
    int               n;
    u_long            sent;
    ngx_err_t         err;
    ngx_event_t      *wev;
    LPWSAOVERLAPPED   ovlp;
    WSABUF            wsabuf;

    wev = c->write;

    if (!wev->ready) {
        return NGX_AGAIN;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""wev->complete: %d"", wev->complete);

    if (!wev->complete) {

        /* post the overlapped WSASend() */

        /*
         * WSABUFs must be 4-byte aligned otherwise
         * WSASend() will return undocumented WSAEINVAL error.
         */

        wsabuf.buf = (char *) buf;
        wsabuf.len = size;

        sent = 0;

        ovlp = (LPWSAOVERLAPPED) &c->write->ovlp;
        ngx_memzero(ovlp, sizeof(WSAOVERLAPPED));

        n = WSASend(c->fd, &wsabuf, 1, &sent, 0, ovlp, NULL);

        ngx_log_debug4(NGX_LOG_DEBUG_EVENT, c->log, 0,
                       ""WSASend: fd:%d, %d, %ul of %uz...",68.0,185.0,1.0,1.0,118.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ssize_t
6362,423212,ngx_wsasend_chain,1,ngx_wsasend_chain,"ngx_chain_t* ngx_wsasend_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\win32\ngx_wsasend_chain.c,"ngx_chain_t *
ngx_wsasend_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    int           rc;
    u_char       *prev;
    u_long        size, sent, send, prev_send;
    ngx_err_t     err;
    ngx_event_t  *wev;
    ngx_array_t   vec;
    ngx_chain_t  *cl;
    LPWSABUF      wsabuf;
    WSABUF        wsabufs[NGX_WSABUFS];

    wev = c->write;

    if (!wev->ready) {
        return in;
    }

    /* the maximum limit size is the maximum u_long value - the page size */

    if (limit == 0 || limit > (off_t) (NGX_MAX_UINT32_VALUE - ngx_pagesize)) {
        limit = NGX_MAX_UINT32_VALUE - ngx_pagesize;
    }

    send = 0;

    /*
     * WSABUFs must be 4-byte aligned otherwise
     * WSASend() will return undocumented WSAEINVAL error.
     */

    vec.elts = wsabufs;
    vec.size = sizeof(WSABUF);
    vec.nalloc = ngx_min(NGX_WSABUFS, ngx_max_wsabufs);
    vec.pool = c->pool;

    for ( ;; ) {
        prev = NULL;
        wsabuf = NULL;
        prev_send = send;

        vec....",16.0,129.0,1.0,26.0,114.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6363,423219,ngx_overlapped_wsasend_chain,1,ngx_overlapped_wsasend_chain,"ngx_chain_t* ngx_overlapped_wsasend_chain (ngx_connection_t*,ngx_chain_t*,off_t)",os\win32\ngx_wsasend_chain.c,"ngx_chain_t *
ngx_overlapped_wsasend_chain(ngx_connection_t *c, ngx_chain_t *in, off_t limit)
{
    int               rc;
    u_char           *prev;
    u_long            size, send, sent;
    ngx_err_t         err;
    ngx_event_t      *wev;
    ngx_array_t       vec;
    ngx_chain_t      *cl;
    LPWSAOVERLAPPED   ovlp;
    LPWSABUF          wsabuf;
    WSABUF            wsabufs[NGX_WSABUFS];

    wev = c->write;

    if (!wev->ready) {
        return in;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0,
                   ""wev->complete: %d"", wev->complete);

    if (!wev->complete) {

        /* post the overlapped WSASend() */

        /* the maximum limit size is the maximum u_long value - the page size */

        if (limit == 0 || limit > (off_t) (NGX_MAX_UINT32_VALUE - ngx_pagesize))
        {
            limit = NGX_MAX_UINT32_VALUE - ngx_pagesize;
        }

        /*
         * WSABUFs must be 4-byte aligned otherwise
         * WSASend() will return undocument...",132.0,296.0,1.0,30.0,165.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_chain_t
6364,423955,ngx_console_init,1,ngx_console_init,void ngx_console_init (ngx_cycle_t*),os\win32\ngx_process_cycle.c,"static void
ngx_console_init(ngx_cycle_t *cycle)
{
    ngx_core_conf_t  *ccf;

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);

    if (ccf->daemon) {
        if (FreeConsole() == 0) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""FreeConsole() failed"");
        }

        return;
    }

    if (SetConsoleCtrlHandler(ngx_console_handler, 1) == 0) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""SetConsoleCtrlHandler() failed"");
    }
}",252.0,272.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6365,423960,ngx_console_handler,1,ngx_console_handler,int ngx_console_handler (u_long),os\win32\ngx_process_cycle.c,"static int __stdcall
ngx_console_handler(u_long type)
{
    char  *msg;

    switch (type) {

    case CTRL_C_EVENT:
        msg = ""Ctrl-C pressed, exiting"";
        break;

    case CTRL_BREAK_EVENT:
        msg = ""Ctrl-Break pressed, exiting"";
        break;

    case CTRL_CLOSE_EVENT:
        msg = ""console closing, exiting"";
        break;

    case CTRL_LOGOFF_EVENT:
        msg = ""user logs off, exiting"";
        break;

    default:
        return 0;
    }

    ngx_log_error(NGX_LOG_NOTICE, ngx_cycle->log, 0, msg);

    if (ngx_stop_event == NULL) {
        return 1;
    }

    if (SetEvent(ngx_stop_event) == 0) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0,
                      ""SetEvent(\""%s\"") failed"", ngx_stop_event_name);
    }

    return 1;
}",275.0,314.0,1.0,11.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,int
6366,423965,ngx_create_signal_events,1,ngx_create_signal_events,ngx_int_t ngx_create_signal_events (ngx_cycle_t*),os\win32\ngx_process_cycle.c,"static ngx_int_t
ngx_create_signal_events(ngx_cycle_t *cycle)
{
    ngx_sprintf((u_char *) ngx_stop_event_name,
                ""Global\\ngx_stop_%s%Z"", ngx_unique);

    ngx_stop_event = CreateEvent(NULL, 1, 0, ngx_stop_event_name);
    if (ngx_stop_event == NULL) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""CreateEvent(\""%s\"") failed"", ngx_stop_event_name);
        return NGX_ERROR;
    }


    ngx_sprintf((u_char *) ngx_quit_event_name,
                ""Global\\ngx_quit_%s%Z"", ngx_unique);

    ngx_quit_event = CreateEvent(NULL, 1, 0, ngx_quit_event_name);
    if (ngx_quit_event == NULL) {
        ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                      ""CreateEvent(\""%s\"") failed"", ngx_quit_event_name);
        return NGX_ERROR;
    }


    ngx_sprintf((u_char *) ngx_reopen_event_name,
                ""Global\\ngx_reopen_%s%Z"", ngx_unique);

    ngx_reopen_event = CreateEvent(NULL, 1, 0, ngx_reopen_event_name);
    if (ngx...",317.0,364.0,1.0,1.0,48.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6367,423976,ngx_reopen_worker_processes,1,ngx_reopen_worker_processes,void ngx_reopen_worker_processes (ngx_cycle_t*),os\win32\ngx_process_cycle.c,"static void
ngx_reopen_worker_processes(ngx_cycle_t *cycle)
{
    ngx_int_t  n;

    for (n = 0; n < ngx_last_process; n++) {

        if (ngx_processes[n].handle == NULL) {
            continue;
        }

        if (SetEvent(ngx_processes[n].reopen) == 0) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""SetEvent(\""%s\"") failed"",
                          ngx_processes[n].reopen_event);
        }
    }
}",387.0,404.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6368,423981,ngx_quit_worker_processes,1,ngx_quit_worker_processes,"void ngx_quit_worker_processes (ngx_cycle_t*,ngx_uint_t)",os\win32\ngx_process_cycle.c,"static void
ngx_quit_worker_processes(ngx_cycle_t *cycle, ngx_uint_t old)
{
    ngx_int_t  n;

    for (n = 0; n < ngx_last_process; n++) {

        ngx_log_debug5(NGX_LOG_DEBUG_CORE, cycle->log, 0,
                       ""process: %d %P %p e:%d j:%d"",
                       n,
                       ngx_processes[n].pid,
                       ngx_processes[n].handle,
                       ngx_processes[n].exiting,
                       ngx_processes[n].just_spawn);

        if (old && ngx_processes[n].just_spawn) {
            ngx_processes[n].just_spawn = 0;
            continue;
        }

        if (ngx_processes[n].handle == NULL) {
            continue;
        }

        if (SetEvent(ngx_processes[n].quit) == 0) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""SetEvent(\""%s\"") failed"",
                          ngx_processes[n].quit_event);
        }

        ngx_processes[n].exiting = 1;
    }
}",407.0,439.0,1.0,1.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6369,423987,ngx_terminate_worker_processes,1,ngx_terminate_worker_processes,void ngx_terminate_worker_processes (ngx_cycle_t*),os\win32\ngx_process_cycle.c,"static void
ngx_terminate_worker_processes(ngx_cycle_t *cycle)
{
    ngx_int_t  n;

    for (n = 0; n < ngx_last_process; n++) {

        if (ngx_processes[n].handle == NULL) {
            continue;
        }

        if (TerminateProcess(ngx_processes[n].handle, 0) == 0) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""TerminateProcess(\""%p\"") failed"",
                          ngx_processes[n].handle);
        }

        ngx_processes[n].exiting = 1;

        ngx_close_handle(ngx_processes[n].reopen);
        ngx_close_handle(ngx_processes[n].quit);
        ngx_close_handle(ngx_processes[n].term);
        ngx_close_handle(ngx_processes[n].handle);
    }
}",442.0,466.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6370,423992,ngx_reap_worker,1,ngx_reap_worker,"ngx_uint_t ngx_reap_worker (ngx_cycle_t*,HANDLE)",os\win32\ngx_process_cycle.c,"static ngx_uint_t
ngx_reap_worker(ngx_cycle_t *cycle, HANDLE h)
{
    u_long     code;
    ngx_int_t  n;

    for (n = 0; n < ngx_last_process; n++) {

        if (ngx_processes[n].handle != h) {
            continue;
        }

        if (GetExitCodeProcess(h, &code) == 0) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
                          ""GetExitCodeProcess(%P) failed"",
                          ngx_processes[n].pid);
        }

        ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0,
                      ""%s process %P exited with code %Xl"",
                      ngx_processes[n].name, ngx_processes[n].pid, code);

        ngx_close_handle(ngx_processes[n].reopen);
        ngx_close_handle(ngx_processes[n].quit);
        ngx_close_handle(ngx_processes[n].term);
        ngx_close_handle(h);

        ngx_processes[n].handle = NULL;
        ngx_processes[n].term = NULL;
        ngx_processes[n].quit = NULL;
        ngx_processes[n].reopen = NULL;

        if (...",469.0,538.0,1.0,1.0,70.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
6371,424014,ngx_worker_thread,1,ngx_worker_thread,ngx_thread_value_t ngx_worker_thread (void*),os\win32\ngx_process_cycle.c,"static ngx_thread_value_t __stdcall
ngx_worker_thread(void *data)
{
    ngx_int_t     n;
    ngx_time_t   *tp;
    ngx_cycle_t  *cycle;

    tp = ngx_timeofday();
    srand((ngx_pid << 16) ^ (unsigned) tp->sec ^ tp->msec);

    cycle = (ngx_cycle_t *) ngx_cycle;

    for (n = 0; cycle->modules[n]; n++) {
        if (cycle->modules[n]->init_process) {
            if (cycle->modules[n]->init_process(cycle) == NGX_ERROR) {
                /* fatal */
                exit(2);
            }
        }
    }

    while (!ngx_quit) {

        if (ngx_exiting) {
            if (ngx_event_no_timers_left() == NGX_OK) {
                break;
            }
        }

        ngx_log_debug0(NGX_LOG_DEBUG_CORE, cycle->log, 0, ""worker cycle"");

        ngx_process_events_and_timers(cycle);

        if (ngx_terminate) {
            return 0;
        }

        if (ngx_quit) {
            ngx_quit = 0;

            if (!ngx_exiting) {
                ngx_exiting = 1;
                ngx_set_shutdown...",762.0,819.0,1.0,26.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_thread_value_t
6372,424019,ngx_cache_manager_thread,1,ngx_cache_manager_thread,ngx_thread_value_t ngx_cache_manager_thread (void*),os\win32\ngx_process_cycle.c,"static ngx_thread_value_t __stdcall
ngx_cache_manager_thread(void *data)
{
    u_long        ev;
    HANDLE        events[2];
    ngx_err_t     err;
    ngx_cycle_t  *cycle;

    cycle = (ngx_cycle_t *) ngx_cycle;

    events[0] = ngx_cache_manager_event;
    events[1] = ngx_cache_manager_mutex;

    for ( ;; ) {
        ev = WaitForMultipleObjects(2, events, 0, INFINITE);

        err = ngx_errno;
        ngx_time_update();

        ngx_log_debug1(NGX_LOG_DEBUG_CORE, cycle->log, 0,
                       ""cache manager WaitForMultipleObjects: %ul"", ev);

        if (ev == WAIT_FAILED) {
            ngx_log_error(NGX_LOG_ALERT, cycle->log, err,
                          ""WaitForMultipleObjects() failed"");
        }

        /*
         * ev == WAIT_OBJECT_0
         * ev == WAIT_OBJECT_0 + 1
         * ev == WAIT_ABANDONED_0 + 1
         */

        if (ngx_terminate || ngx_quit || ngx_exiting) {
            ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, ""exiting"");
            return...",858.0,915.0,1.0,26.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_thread_value_t
6373,424029,ngx_cache_loader_thread,1,ngx_cache_loader_thread,ngx_thread_value_t ngx_cache_loader_thread (void*),os\win32\ngx_process_cycle.c,"static ngx_thread_value_t __stdcall
ngx_cache_loader_thread(void *data)
{
    ngx_uint_t     i;
    ngx_path_t   **path;
    ngx_cycle_t   *cycle;

    ngx_msleep(60000);

    cycle = (ngx_cycle_t *) ngx_cycle;

    path = cycle->paths.elts;
    for (i = 0; i < cycle->paths.nelts; i++) {

        if (ngx_terminate || ngx_quit || ngx_exiting) {
            break;
        }

        if (path[i]->loader) {
            path[i]->loader(path[i]->data);
            ngx_time_update();
        }
    }

    return 0;
}",956.0,981.0,1.0,26.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_thread_value_t
6374,426386,ngx_close_handle,1,ngx_close_handle,void ngx_close_handle (HANDLE),os\win32\ngx_process_cycle.c,"void
ngx_close_handle(HANDLE h)
{
    if (CloseHandle(h) == 0) {
        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, ngx_errno,
                      ""CloseHandle(%p) failed"", h);
    }
}",1036.0,1043.0,1.0,1.0,8.0,2,2,5,4,0,1,2,2,0,1,,0,0,2,1,1,void
6375,426456,ngx_service,1,ngx_service,ngx_int_t ngx_service (ngx_log_t*),os\win32\ngx_service.c,"ngx_int_t
ngx_service(ngx_log_t *log)
{
    /* primary thread */

    /* StartServiceCtrlDispatcher() should be called within 30 seconds */

    if (StartServiceCtrlDispatcher(st) == 0) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                      ""StartServiceCtrlDispatcher() failed"");
        return NGX_ERROR;
    }

    return NGX_OK;
}",19.0,33.0,1.0,1.0,15.0,1,1,6,6,0,2,2,2,1,1,,0,1,2,1,1,ngx_int_t
6376,426476,service_main,1,service_main,"void service_main (u_int,char**)",os\win32\ngx_service.c,"void
service_main(u_int argc, char **argv)
{
    SERVICE_STATUS         status;
    SERVICE_STATUS_HANDLE  service;

    /* thread spawned by SCM */

    service = RegisterServiceCtrlHandlerEx(""nginx"", service_handler, ctx);
    if (service == INVALID_HANDLE_VALUE) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                      ""RegisterServiceCtrlHandlerEx() failed"");
        return;
    }

    status.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
    status.dwCurrentState = SERVICE_START_PENDING;
    status.dwControlsAccepted = SERVICE_ACCEPT_STOP
                                |SERVICE_ACCEPT_PARAMCHANGE;
    status.dwWin32ExitCode = NO_ERROR;
    status.dwServiceSpecificExitCode = 0;
    status.dwCheckPoint = 1;
    status.dwWaitHint = 2000;

    /* SetServiceStatus() should be called within 80 seconds */

    if (SetServiceStatus(service, &status) == 0) {
        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
                      ""SetServiceStatus() failed"");
        r...",36.0,87.0,1.0,1.0,52.0,27,5,33,13,0,3,4,4,0,3,,0,0,4,2,2,void
6377,426581,service_handler,1,service_handler,"u_int service_handler (u_int,u_int,void*,void*)",os\win32\ngx_service.c,"u_int
service_handler(u_int control, u_int type, void *data, void *ctx)
{
    /* primary thread */

    switch (control) {

    case SERVICE_CONTROL_INTERROGATE:
        status = NGX_IOCP_INTERROGATE;
        break;

    case SERVICE_CONTROL_STOP:
        status = NGX_IOCP_STOP;
        break;

    case SERVICE_CONTROL_PARAMCHANGE:
        status = NGX_IOCP_RECONFIGURE;
        break;

    case NGX_SERVICE_CONTROL_SHUTDOWN:
        status = NGX_IOCP_REOPEN;
        break;

    case NGX_SERVICE_CONTROL_REOPEN:
        status = NGX_IOCP_REOPEN;
        break;

    default:
        return ERROR_CALL_NOT_IMPLEMENTED;
    }

    if (ngx_single) {
        if (PostQueuedCompletionStatus(iocp, ... status, ...) == 0) {
            err = ngx_errno;
            ngx_log_error(NGX_LOG_ALERT, log, err,
                          ""PostQueuedCompletionStatus() failed"");
            return err;
        }

    } else {
        Event
    }

    return NO_ERROR;
}",90.0,134.0,1.0,9.0,45.0,6,1,23,16,0,1,9,5,0,1,,0,0,8,4,4,u_int
6378,426866,ngx_shm_remap,1,ngx_shm_remap,"ngx_int_t ngx_shm_remap (ngx_shm_t*,u_char*)",os\win32\ngx_shmem.c,"ngx_int_t
ngx_shm_remap(ngx_shm_t *shm, u_char *addr)
{
    if (UnmapViewOfFile(shm->addr) == 0) {
        ngx_log_error(NGX_LOG_ALERT, shm->log, ngx_errno,
                      ""UnmapViewOfFile(%p) of file mapping \""%V\"" failed"",
                      shm->addr, &shm->name);
        return NGX_ERROR;
    }

    shm->addr = MapViewOfFileEx(shm->handle, FILE_MAP_WRITE, 0, 0, 0, addr);

    if (shm->addr != NULL) {
        return NGX_OK;
    }

    ngx_log_error(NGX_LOG_ALERT, shm->log, ngx_errno,
                  ""MapViewOfFileEx(%uz, %p) of file mapping \""%V\"" failed"",
                  shm->size, addr, &shm->name);

    return NGX_ERROR;
}",123.0,144.0,1.0,1.0,22.0,15,5,21,8,0,12,3,3,2,2,,0,10,4,2,2,ngx_int_t
6379,427024,ngx_nonblocking,1,ngx_nonblocking,int ngx_nonblocking (ngx_socket_t),os\win32\ngx_socket.c,"int
ngx_nonblocking(ngx_socket_t s)
{
    unsigned long  nb = 1;

    return ioctlsocket(s, FIONBIO, &nb);
}",12.0,18.0,1.0,1.0,7.0,2,2,4,3,4,0,1,1,0,0,,0,0,2,1,1,int
6380,427039,ngx_blocking,1,ngx_blocking,int ngx_blocking (ngx_socket_t),os\win32\ngx_socket.c,"int
ngx_blocking(ngx_socket_t s)
{
    unsigned long  nb = 0;

    return ioctlsocket(s, FIONBIO, &nb);
}",21.0,27.0,1.0,1.0,7.0,2,2,4,3,1,0,1,1,0,0,,0,0,2,1,1,int
6381,427054,ngx_socket_nread,1,ngx_socket_nread,"int ngx_socket_nread (ngx_socket_t,int*)",os\win32\ngx_socket.c,"int
ngx_socket_nread(ngx_socket_t s, int *n)
{
    unsigned long  nread;

    if (ioctlsocket(s, FIONREAD, &nread) == -1) {
        return -1;
    }

    *n = nread;

    return 0;
}",30.0,42.0,1.0,1.0,13.0,6,5,5,4,0,0,2,2,0,0,,0,0,4,2,2,int
6382,427142,ngx_file_type,1,ngx_file_type,"int ngx_file_type (char*,ngx_file_info_t*)",os\win32\ngx_stat.c,"int ngx_file_type(char *file, ngx_file_info_t *sb)
{
    sb->dwFileAttributes = GetFileAttributes(file);

    if (sb->dwFileAttributes == INVALID_FILE_ATTRIBUTES) {
        return -1;
    }

    return 0;
}",12.0,21.0,1.0,1.0,10.0,5,4,4,3,0,0,2,2,0,0,,0,0,4,2,2,int
6383,427175,ngx_create_thread,1,ngx_create_thread,"ngx_err_t ngx_create_thread (ngx_tid_t*,ngx_thread_value_t,void*,ngx_log_t*)",os\win32\ngx_thread.c,"ngx_err_t
ngx_create_thread(ngx_tid_t *tid,
    ngx_thread_value_t (__stdcall *func)(void *arg), void *arg, ngx_log_t *log)
{
    u_long     id;
    ngx_err_t  err;

    *tid = CreateThread(NULL, 0, func, arg, 0, &id);

    if (*tid != NULL) {
        ngx_log_error(NGX_LOG_NOTICE, log, 0,
                      ""create thread "" NGX_TID_T_FMT, id);
        return 0;
    }

    err = ngx_errno;
    ngx_log_error(NGX_LOG_ALERT, log, err, ""CreateThread() failed"");
    return err;
}",12.0,30.0,1.0,24.0,19.0,6,4,13,9,0,1,2,2,0,1,,0,0,8,4,4,ngx_err_t
6384,427243,ngx_gettimeofday,1,ngx_gettimeofday,void ngx_gettimeofday (timeval*),os\win32\ngx_time.c,"void
ngx_gettimeofday(struct timeval *tp)
{
    uint64_t  intervals;
    FILETIME  ft;

    GetSystemTimeAsFileTime(&ft);

    /*
     * A file time is a 64-bit value that represents the number
     * of 100-nanosecond intervals that have elapsed since
     * January 1, 1601 12:00 A.M. UTC.
     *
     * Between January 1, 1970 (Epoch) and January 1, 1601 there were
     * 134774 days,
     * 11644473600 seconds or
     * 11644473600,000,000,0 100-nanosecond intervals.
     *
     * See also MSKB Q167296.
     */

    intervals = ((uint64_t) ft.dwHighDateTime << 32) | ft.dwLowDateTime;
    intervals -= 116444736000000000;

    tp->tv_sec = (long) (intervals / 10000000);
    tp->tv_usec = (long) ((intervals % 10000000) / 10);
}",12.0,38.0,1.0,1.0,27.0,17,10,9,3,2,0,1,1,0,0,,0,0,2,1,1,void
6385,427323,ngx_gettimezone,1,ngx_gettimezone,ngx_int_t ngx_gettimezone (void),os\win32\ngx_time.c,"ngx_int_t
ngx_gettimezone(void)
{
    u_long                 n;
    TIME_ZONE_INFORMATION  tz;

    n = GetTimeZoneInformation(&tz);

    switch (n) {

    case TIME_ZONE_ID_UNKNOWN:
        return -tz.Bias;

    case TIME_ZONE_ID_STANDARD:
        return -(tz.Bias + tz.StandardBias);

    case TIME_ZONE_ID_DAYLIGHT:
        return -(tz.Bias + tz.DaylightBias);

    default: /* TIME_ZONE_ID_INVALID */
        return 0;
    }
}",61.0,83.0,1.0,1.0,23.0,12,5,11,5,0,0,2,2,0,0,,0,0,2,1,1,ngx_int_t
6386,430298,ngx_stream_block,1,ngx_stream_block,"char* ngx_stream_block (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream.c,"static char *
ngx_stream_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                          *rv;
    ngx_uint_t                     i, m, mi, s;
    ngx_conf_t                     pcf;
    ngx_array_t                    ports;
    ngx_stream_listen_t           *listen;
    ngx_stream_module_t           *module;
    ngx_stream_conf_ctx_t         *ctx;
    ngx_stream_core_srv_conf_t   **cscfp;
    ngx_stream_core_main_conf_t   *cmcf;

    if (*(ngx_stream_conf_ctx_t **) conf) {
        return ""is duplicate"";
    }

    /* the main stream context */

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_stream_conf_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    *(ngx_stream_conf_ctx_t **) conf = ctx;

    /* count the number of the stream modules and set up their indices */

    ngx_stream_max_module = ngx_count_modules(cf->cycle, NGX_STREAM_MODULE);


    /* the stream main_conf context, it's the same in the all stream contexts */

    ctx->main_...",73.0,269.0,1.0,1.0,197.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6387,430305,ngx_stream_init_phases,1,ngx_stream_init_phases,"ngx_int_t ngx_stream_init_phases (ngx_conf_t*,ngx_stream_core_main_conf_t*)",stream\ngx_stream.c,"static ngx_int_t
ngx_stream_init_phases(ngx_conf_t *cf, ngx_stream_core_main_conf_t *cmcf)
{
    if (ngx_array_init(&cmcf->phases[NGX_STREAM_POST_ACCEPT_PHASE].handlers,
                       cf->pool, 1, sizeof(ngx_stream_handler_pt))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->phases[NGX_STREAM_PREACCESS_PHASE].handlers,
                       cf->pool, 1, sizeof(ngx_stream_handler_pt))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->phases[NGX_STREAM_ACCESS_PHASE].handlers,
                       cf->pool, 1, sizeof(ngx_stream_handler_pt))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->phases[NGX_STREAM_SSL_PHASE].handlers,
                       cf->pool, 1, sizeof(ngx_stream_handler_pt))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->phases[NGX_STREAM_PREREAD_PHASE].handlers,
                       cf->pool, 1, si...",272.0,318.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6388,430311,ngx_stream_init_phase_handlers,1,ngx_stream_init_phase_handlers,"ngx_int_t ngx_stream_init_phase_handlers (ngx_conf_t*,ngx_stream_core_main_conf_t*)",stream\ngx_stream.c,"static ngx_int_t
ngx_stream_init_phase_handlers(ngx_conf_t *cf,
    ngx_stream_core_main_conf_t *cmcf)
{
    ngx_int_t                     j;
    ngx_uint_t                    i, n;
    ngx_stream_handler_pt        *h;
    ngx_stream_phase_handler_t   *ph;
    ngx_stream_phase_handler_pt   checker;

    n = 1 /* content phase */;

    for (i = 0; i < NGX_STREAM_LOG_PHASE; i++) {
        n += cmcf->phases[i].handlers.nelts;
    }

    ph = ngx_pcalloc(cf->pool,
                     n * sizeof(ngx_stream_phase_handler_t) + sizeof(void *));
    if (ph == NULL) {
        return NGX_ERROR;
    }

    cmcf->phase_engine.handlers = ph;
    n = 0;

    for (i = 0; i < NGX_STREAM_LOG_PHASE; i++) {
        h = cmcf->phases[i].handlers.elts;

        switch (i) {

        case NGX_STREAM_PREREAD_PHASE:
            checker = ngx_stream_core_preread_phase;
            break;

        case NGX_STREAM_CONTENT_PHASE:
            ph->checker = ngx_stream_core_content_phase;
            n++;
        ...",321.0,377.0,1.0,1.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6389,430317,ngx_stream_add_ports,1,ngx_stream_add_ports,"ngx_int_t ngx_stream_add_ports (ngx_conf_t*,ngx_array_t*,ngx_stream_listen_t*)",stream\ngx_stream.c,"static ngx_int_t
ngx_stream_add_ports(ngx_conf_t *cf, ngx_array_t *ports,
    ngx_stream_listen_t *listen)
{
    in_port_t                p;
    ngx_uint_t               i;
    struct sockaddr         *sa;
    ngx_stream_conf_port_t  *port;
    ngx_stream_conf_addr_t  *addr;

    sa = listen->sockaddr;
    p = ngx_inet_get_port(sa);

    port = ports->elts;
    for (i = 0; i < ports->nelts; i++) {

        if (p == port[i].port
            && listen->type == port[i].type
            && sa->sa_family == port[i].family)
        {
            /* a port is already in the port list */

            port = &port[i];
            goto found;
        }
    }

    /* add a port to the port list */

    port = ngx_array_push(ports);
    if (port == NULL) {
        return NGX_ERROR;
    }

    port->family = sa->sa_family;
    port->type = listen->type;
    port->port = p;

    if (ngx_array_init(&port->addrs, cf->temp_pool, 2,
                       sizeof(ngx_stream_conf_addr_t))
        != NG...",380.0,435.0,1.0,1.0,56.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6390,430324,ngx_stream_optimize_servers,1,ngx_stream_optimize_servers,"char* ngx_stream_optimize_servers (ngx_conf_t*,ngx_array_t*)",stream\ngx_stream.c,"static char *
ngx_stream_optimize_servers(ngx_conf_t *cf, ngx_array_t *ports)
{
    ngx_uint_t                   i, p, last, bind_wildcard;
    ngx_listening_t             *ls;
    ngx_stream_port_t           *stport;
    ngx_stream_conf_port_t      *port;
    ngx_stream_conf_addr_t      *addr;
    ngx_stream_core_srv_conf_t  *cscf;

    port = ports->elts;
    for (p = 0; p < ports->nelts; p++) {

        ngx_sort(port[p].addrs.elts, (size_t) port[p].addrs.nelts,
                 sizeof(ngx_stream_conf_addr_t), ngx_stream_cmp_conf_addrs);

        addr = port[p].addrs.elts;
        last = port[p].addrs.nelts;

        /*
         * if there is the binding to the ""*:port"" then we need to bind()
         * to the ""*:port"" only and ignore the other bindings
         */

        if (addr[last - 1].opt.wildcard) {
            addr[last - 1].opt.bind = 1;
            bind_wildcard = 1;

        } else {
            bind_wildcard = 0;
        }

        i = 0;

        while (i < last) {
...",438.0,551.0,1.0,1.0,114.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
6391,430330,ngx_stream_add_addrs,1,ngx_stream_add_addrs,"ngx_int_t ngx_stream_add_addrs (ngx_conf_t*,ngx_stream_port_t*,ngx_stream_conf_addr_t*)",stream\ngx_stream.c,"static ngx_int_t
ngx_stream_add_addrs(ngx_conf_t *cf, ngx_stream_port_t *stport,
    ngx_stream_conf_addr_t *addr)
{
    ngx_uint_t             i;
    struct sockaddr_in    *sin;
    ngx_stream_in_addr_t  *addrs;

    stport->addrs = ngx_pcalloc(cf->pool,
                                stport->naddrs * sizeof(ngx_stream_in_addr_t));
    if (stport->addrs == NULL) {
        return NGX_ERROR;
    }

    addrs = stport->addrs;

    for (i = 0; i < stport->naddrs; i++) {

        sin = (struct sockaddr_in *) addr[i].opt.sockaddr;
        addrs[i].addr = sin->sin_addr.s_addr;

        addrs[i].conf.ctx = addr[i].opt.ctx;
#if (NGX_STREAM_SSL)
        addrs[i].conf.ssl = addr[i].opt.ssl;
#endif
        addrs[i].conf.proxy_protocol = addr[i].opt.proxy_protocol;
        addrs[i].conf.addr_text = addr[i].opt.addr_text;
    }

    return NGX_OK;
}",554.0,584.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6392,430337,ngx_stream_cmp_conf_addrs,1,ngx_stream_cmp_conf_addrs,"ngx_int_t ngx_stream_cmp_conf_addrs (void*,void*)",stream\ngx_stream.c,"static ngx_int_t
ngx_stream_cmp_conf_addrs(const void *one, const void *two)
{
    ngx_stream_conf_addr_t  *first, *second;

    first = (ngx_stream_conf_addr_t *) one;
    second = (ngx_stream_conf_addr_t *) two;

    if (first->opt.wildcard) {
        /* a wildcard must be the last resort, shift it to the end */
        return 1;
    }

    if (second->opt.wildcard) {
        /* a wildcard must be the last resort, shift it to the end */
        return -1;
    }

    if (first->opt.bind && !second->opt.bind) {
        /* shift explicit bind()ed addresses to the start */
        return -1;
    }

    if (!first->opt.bind && second->opt.bind) {
        /* shift explicit bind()ed addresses to the start */
        return 1;
    }

    /* do not sort by default */

    return 0;
}",624.0,655.0,1.0,1.0,32.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6393,432028,ngx_stream_phase_handler_pt,1,ngx_stream_phase_handler_pt,"ngx_int_t ngx_stream_phase_handler_pt (ngx_stream_session_t*,ngx_stream_phase_handler_t*)",stream\ngx_stream.h,"typedef ngx_int_t (*ngx_stream_phase_handler_pt)(ngx_stream_session_t *s,
    ngx_stream_phase_handler_t *ph);",131.0,132.0,19.0,35.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6394,432034,ngx_stream_handler_pt,1,ngx_stream_handler_pt,ngx_int_t ngx_stream_handler_pt (ngx_stream_session_t*),stream\ngx_stream.h,typedef ngx_int_t (*ngx_stream_handler_pt)(ngx_stream_session_t *s);,133.0,133.0,19.0,67.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6395,432039,ngx_stream_content_handler_pt,1,ngx_stream_content_handler_pt,void ngx_stream_content_handler_pt (ngx_stream_session_t*),stream\ngx_stream.h,typedef void (*ngx_stream_content_handler_pt)(ngx_stream_session_t *s);,134.0,134.0,14.0,70.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6396,432112,preconfiguration,1,ngx_stream_module_t.preconfiguration,ngx_int_t ngx_stream_module_t.preconfiguration (ngx_conf_t*),stream\ngx_stream.h,ngx_int_t                    (*preconfiguration)(ngx_conf_t *cf);,238.0,238.0,34.0,68.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6397,432117,postconfiguration,1,ngx_stream_module_t.postconfiguration,ngx_int_t ngx_stream_module_t.postconfiguration (ngx_conf_t*),stream\ngx_stream.h,ngx_int_t                    (*postconfiguration)(ngx_conf_t *cf);,239.0,239.0,34.0,69.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6398,432122,create_main_conf,1,ngx_stream_module_t.create_main_conf,void* ngx_stream_module_t.create_main_conf (ngx_conf_t*),stream\ngx_stream.h,void                        *(*create_main_conf)(ngx_conf_t *cf);,241.0,241.0,33.0,68.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6399,432127,init_main_conf,1,ngx_stream_module_t.init_main_conf,"char* ngx_stream_module_t.init_main_conf (ngx_conf_t*,void*)",stream\ngx_stream.h,"char                        *(*init_main_conf)(ngx_conf_t *cf, void *conf);",242.0,242.0,33.0,78.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
6400,432133,create_srv_conf,1,ngx_stream_module_t.create_srv_conf,void* ngx_stream_module_t.create_srv_conf (ngx_conf_t*),stream\ngx_stream.h,void                        *(*create_srv_conf)(ngx_conf_t *cf);,244.0,244.0,33.0,67.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6401,432138,merge_srv_conf,1,ngx_stream_module_t.merge_srv_conf,"char* ngx_stream_module_t.merge_srv_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream.h,"char                        *(*merge_srv_conf)(ngx_conf_t *cf, void *prev,
                                                   void *conf);",245.0,246.0,33.0,62.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6402,432146,ngx_stream_core_run_phases,1,ngx_stream_core_run_phases,void ngx_stream_core_run_phases (ngx_stream_session_t*),stream\ngx_stream_core_module.c,"void
ngx_stream_core_run_phases(ngx_stream_session_t *s)
{
    ngx_int_t                     rc;
    ngx_stream_phase_handler_t   *ph;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_get_module_main_conf(s, ngx_stream_core_module);

    ph = cmcf->phase_engine.handlers;

    while (ph[s->phase_handler].checker) {

        rc = ph[s->phase_handler].checker(s, &ph[s->phase_handler]);

        if (rc == NGX_OK) {
            return;
        }
    }
}",140.0,159.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6403,432151,ngx_stream_core_generic_phase,1,ngx_stream_core_generic_phase,"ngx_int_t ngx_stream_core_generic_phase (ngx_stream_session_t*,ngx_stream_phase_handler_t*)",stream\ngx_stream_core_module.c,"ngx_int_t
ngx_stream_core_generic_phase(ngx_stream_session_t *s,
    ngx_stream_phase_handler_t *ph)
{
    ngx_int_t  rc;

    /*
     * generic phase checker,
     * used by all phases, except for preread and content
     */

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""generic phase: %ui"", s->phase_handler);

    rc = ph->handler(s);

    if (rc == NGX_OK) {
        s->phase_handler = ph->next;
        return NGX_AGAIN;
    }

    if (rc == NGX_DECLINED) {
        s->phase_handler++;
        return NGX_AGAIN;
    }

    if (rc == NGX_AGAIN || rc == NGX_DONE) {
        return NGX_OK;
    }

    if (rc == NGX_ERROR) {
        rc = NGX_STREAM_INTERNAL_SERVER_ERROR;
    }

    ngx_stream_finalize_session(s, rc);

    return NGX_OK;
}",162.0,199.0,1.0,1.0,38.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6404,432157,ngx_stream_core_preread_phase,1,ngx_stream_core_preread_phase,"ngx_int_t ngx_stream_core_preread_phase (ngx_stream_session_t*,ngx_stream_phase_handler_t*)",stream\ngx_stream_core_module.c,"ngx_int_t
ngx_stream_core_preread_phase(ngx_stream_session_t *s,
    ngx_stream_phase_handler_t *ph)
{
    size_t                       size;
    ssize_t                      n;
    ngx_int_t                    rc;
    ngx_connection_t            *c;
    ngx_stream_core_srv_conf_t  *cscf;

    c = s->connection;

    c->log->action = ""prereading client data"";

    cscf = ngx_stream_get_module_srv_conf(s, ngx_stream_core_module);

    if (c->read->timedout) {
        rc = NGX_STREAM_OK;

    } else if (c->read->timer_set) {
        rc = NGX_AGAIN;

    } else {
        rc = ph->handler(s);
    }

    while (rc == NGX_AGAIN) {

        if (c->buffer == NULL) {
            c->buffer = ngx_create_temp_buf(c->pool, cscf->preread_buffer_size);
            if (c->buffer == NULL) {
                rc = NGX_ERROR;
                break;
            }
        }

        size = c->buffer->end - c->buffer->last;

        if (size == 0) {
            ngx_log_error(NGX_LOG_ERR, c->log, 0, ""prerea...",202.0,311.0,1.0,1.0,110.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6405,432163,ngx_stream_core_content_phase,1,ngx_stream_core_content_phase,"ngx_int_t ngx_stream_core_content_phase (ngx_stream_session_t*,ngx_stream_phase_handler_t*)",stream\ngx_stream_core_module.c,"ngx_int_t
ngx_stream_core_content_phase(ngx_stream_session_t *s,
    ngx_stream_phase_handler_t *ph)
{
    ngx_connection_t            *c;
    ngx_stream_core_srv_conf_t  *cscf;

    c = s->connection;

    c->log->action = NULL;

    cscf = ngx_stream_get_module_srv_conf(s, ngx_stream_core_module);

    if (c->type == SOCK_STREAM
        && cscf->tcp_nodelay
        && ngx_tcp_nodelay(c) != NGX_OK)
    {
        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return NGX_OK;
    }

    cscf->handler(s);

    return NGX_OK;
}",314.0,338.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6406,432169,ngx_stream_init_connection,1,ngx_stream_init_connection,void ngx_stream_init_connection (ngx_connection_t*),stream\ngx_stream_handler.c,"void
ngx_stream_init_connection(ngx_connection_t *c)
{
    u_char                        text[NGX_SOCKADDR_STRLEN];
    size_t                        len;
    ngx_uint_t                    i;
    ngx_time_t                   *tp;
    ngx_event_t                  *rev;
    struct sockaddr              *sa;
    ngx_stream_port_t            *port;
    struct sockaddr_in           *sin;
    ngx_stream_in_addr_t         *addr;
    ngx_stream_session_t         *s;
    ngx_stream_addr_conf_t       *addr_conf;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6          *sin6;
    ngx_stream_in6_addr_t        *addr6;
#endif
    ngx_stream_core_srv_conf_t   *cscf;
    ngx_stream_core_main_conf_t  *cmcf;

    /* find the server configuration for the address:port */

    port = c->listening->servers;

    if (port->naddrs > 1) {

        /*
         * There are several addresses on this port and one of them
         * is the ""*:port"" wildcard so getsockname() is needed to determine
         * the ser...",20.0,202.0,1.0,1.0,183.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6407,432174,ngx_stream_session_handler,1,ngx_stream_session_handler,void ngx_stream_session_handler (ngx_event_t*),stream\ngx_stream_handler.c,"void
ngx_stream_session_handler(ngx_event_t *rev)
{
    ngx_connection_t      *c;
    ngx_stream_session_t  *s;

    c = rev->data;
    s = c->data;

    ngx_stream_core_run_phases(s);
}",283.0,293.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6408,432179,ngx_stream_finalize_session,1,ngx_stream_finalize_session,"void ngx_stream_finalize_session (ngx_stream_session_t*,ngx_uint_t)",stream\ngx_stream_handler.c,"void
ngx_stream_finalize_session(ngx_stream_session_t *s, ngx_uint_t rc)
{
    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""finalize stream session: %i"", rc);

    s->status = rc;

    ngx_stream_log_session(s);

    ngx_stream_close_connection(s->connection);
}",296.0,307.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6409,432188,ngx_stream_filter_pt,1,ngx_stream_filter_pt,"ngx_int_t ngx_stream_filter_pt (ngx_stream_session_t*,ngx_chain_t*,ngx_uint_t)",stream\ngx_stream.h,"typedef ngx_int_t (*ngx_stream_filter_pt)(ngx_stream_session_t *s,
    ngx_chain_t *chain, ngx_uint_t from_upstream);",305.0,306.0,19.0,49.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6410,432217,ngx_stream_access_handler,1,ngx_stream_access_handler,ngx_int_t ngx_stream_access_handler (ngx_stream_session_t*),stream\ngx_stream_access_module.c,"static ngx_int_t
ngx_stream_access_handler(ngx_stream_session_t *s)
{
    struct sockaddr_in            *sin;
    ngx_stream_access_srv_conf_t  *ascf;
#if (NGX_HAVE_INET6)
    u_char                        *p;
    in_addr_t                      addr;
    struct sockaddr_in6           *sin6;
#endif

    ascf = ngx_stream_get_module_srv_conf(s, ngx_stream_access_module);

    switch (s->connection->sockaddr->sa_family) {

    case AF_INET:
        if (ascf->rules) {
            sin = (struct sockaddr_in *) s->connection->sockaddr;
            return ngx_stream_access_inet(s, ascf, sin->sin_addr.s_addr);
        }
        break;

#if (NGX_HAVE_INET6)

    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) s->connection->sockaddr;
        p = sin6->sin6_addr.s6_addr;

        if (ascf->rules && IN6_IS_ADDR_V4MAPPED(&sin6->sin6_addr)) {
            addr = p[12] << 24;
            addr += p[13] << 16;
            addr += p[14] << 8;
            addr += p[15];
            return ngx_str...",118.0,175.0,1.0,1.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6411,432222,ngx_stream_access_inet,1,ngx_stream_access_inet,"ngx_int_t ngx_stream_access_inet (ngx_stream_session_t*,ngx_stream_access_srv_conf_t*,in_addr_t)",stream\ngx_stream_access_module.c,"static ngx_int_t
ngx_stream_access_inet(ngx_stream_session_t *s,
    ngx_stream_access_srv_conf_t *ascf, in_addr_t addr)
{
    ngx_uint_t                 i;
    ngx_stream_access_rule_t  *rule;

    rule = ascf->rules->elts;
    for (i = 0; i < ascf->rules->nelts; i++) {

        ngx_log_debug3(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                       ""access: %08XD %08XD %08XD"",
                       addr, rule[i].mask, rule[i].addr);

        if ((addr & rule[i].mask) == rule[i].addr) {
            return ngx_stream_access_found(s, rule[i].deny);
        }
    }

    return NGX_DECLINED;
}",178.0,198.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6412,432229,ngx_stream_access_found,1,ngx_stream_access_found,"ngx_int_t ngx_stream_access_found (ngx_stream_session_t*,ngx_uint_t)",stream\ngx_stream_access_module.c,"static ngx_int_t
ngx_stream_access_found(ngx_stream_session_t *s, ngx_uint_t deny)
{
    if (deny) {
        ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                      ""access forbidden by rule"");
        return NGX_STREAM_FORBIDDEN;
    }

    return NGX_OK;
}",272.0,282.0,1.0,1.0,11.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6413,432235,ngx_stream_access_rule,1,ngx_stream_access_rule,"char* ngx_stream_access_rule (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_access_module.c,"static char *
ngx_stream_access_rule(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_access_srv_conf_t *ascf = conf;

    ngx_int_t                     rc;
    ngx_uint_t                    all;
    ngx_str_t                    *value;
    ngx_cidr_t                    cidr;
    ngx_stream_access_rule_t     *rule;
#if (NGX_HAVE_INET6)
    ngx_stream_access_rule6_t    *rule6;
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
    ngx_stream_access_rule_un_t  *rule_un;
#endif

    all = 0;
    ngx_memzero(&cidr, sizeof(ngx_cidr_t));

    value = cf->args->elts;

    if (value[1].len == 3 && ngx_strcmp(value[1].data, ""all"") == 0) {
        all = 1;

#if (NGX_HAVE_UNIX_DOMAIN)
    } else if (value[1].len == 5 && ngx_strcmp(value[1].data, ""unix:"") == 0) {
        cidr.family = AF_UNIX;
#endif

    } else {
        rc = ngx_ptocidr(&value[1], &cidr);

        if (rc == NGX_ERROR) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                         ""invalid parameter \""%V\"""", &v...",285.0,393.0,1.0,1.0,109.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6414,432242,ngx_stream_access_create_srv_conf,1,ngx_stream_access_create_srv_conf,void* ngx_stream_access_create_srv_conf (ngx_conf_t*),stream\ngx_stream_access_module.c,"static void *
ngx_stream_access_create_srv_conf(ngx_conf_t *cf)
{
    ngx_stream_access_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_access_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    return conf;
}",396.0,407.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6415,432247,ngx_stream_access_merge_srv_conf,1,ngx_stream_access_merge_srv_conf,"char* ngx_stream_access_merge_srv_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream_access_module.c,"static char *
ngx_stream_access_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_stream_access_srv_conf_t  *prev = parent;
    ngx_stream_access_srv_conf_t  *conf = child;

    if (conf->rules == NULL
#if (NGX_HAVE_INET6)
        && conf->rules6 == NULL
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
        && conf->rules_un == NULL
#endif
    ) {
        conf->rules = prev->rules;
#if (NGX_HAVE_INET6)
        conf->rules6 = prev->rules6;
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
        conf->rules_un = prev->rules_un;
#endif
    }

    return NGX_CONF_OK;
}",410.0,434.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6416,432254,ngx_stream_access_init,1,ngx_stream_access_init,ngx_int_t ngx_stream_access_init (ngx_conf_t*),stream\ngx_stream_access_module.c,"static ngx_int_t
ngx_stream_access_init(ngx_conf_t *cf)
{
    ngx_stream_handler_pt        *h;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_STREAM_ACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_stream_access_handler;

    return NGX_OK;
}",437.0,453.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6417,432746,ngx_stream_core_preconfiguration,1,ngx_stream_core_preconfiguration,ngx_int_t ngx_stream_core_preconfiguration (ngx_conf_t*),stream\ngx_stream_core_module.c,"static ngx_int_t
ngx_stream_core_preconfiguration(ngx_conf_t *cf)
{
    return ngx_stream_variables_add_core_vars(cf);
}",341.0,345.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6418,432751,ngx_stream_core_create_main_conf,1,ngx_stream_core_create_main_conf,void* ngx_stream_core_create_main_conf (ngx_conf_t*),stream\ngx_stream_core_module.c,"static void *
ngx_stream_core_create_main_conf(ngx_conf_t *cf)
{
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_core_main_conf_t));
    if (cmcf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&cmcf->servers, cf->pool, 4,
                       sizeof(ngx_stream_core_srv_conf_t *))
        != NGX_OK)
    {
        return NULL;
    }

    if (ngx_array_init(&cmcf->listen, cf->pool, 4, sizeof(ngx_stream_listen_t))
        != NGX_OK)
    {
        return NULL;
    }

    cmcf->variables_hash_max_size = NGX_CONF_UNSET_UINT;
    cmcf->variables_hash_bucket_size = NGX_CONF_UNSET_UINT;

    return cmcf;
}",348.0,375.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6419,432756,ngx_stream_core_init_main_conf,1,ngx_stream_core_init_main_conf,"char* ngx_stream_core_init_main_conf (ngx_conf_t*,void*)",stream\ngx_stream_core_module.c,"static char *
ngx_stream_core_init_main_conf(ngx_conf_t *cf, void *conf)
{
    ngx_stream_core_main_conf_t *cmcf = conf;

    ngx_conf_init_uint_value(cmcf->variables_hash_max_size, 1024);
    ngx_conf_init_uint_value(cmcf->variables_hash_bucket_size, 64);

    cmcf->variables_hash_bucket_size =
               ngx_align(cmcf->variables_hash_bucket_size, ngx_cacheline_size);

    if (cmcf->ncaptures) {
        cmcf->ncaptures = (cmcf->ncaptures + 1) * 3;
    }

    return NGX_CONF_OK;
}",378.0,394.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
6420,432762,ngx_stream_core_create_srv_conf,1,ngx_stream_core_create_srv_conf,void* ngx_stream_core_create_srv_conf (ngx_conf_t*),stream\ngx_stream_core_module.c,"static void *
ngx_stream_core_create_srv_conf(ngx_conf_t *cf)
{
    ngx_stream_core_srv_conf_t  *cscf;

    cscf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_core_srv_conf_t));
    if (cscf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     cscf->handler = NULL;
     *     cscf->error_log = NULL;
     */

    cscf->file_name = cf->conf_file->file.name.data;
    cscf->line = cf->conf_file->line;
    cscf->resolver_timeout = NGX_CONF_UNSET_MSEC;
    cscf->proxy_protocol_timeout = NGX_CONF_UNSET_MSEC;
    cscf->tcp_nodelay = NGX_CONF_UNSET;
    cscf->preread_buffer_size = NGX_CONF_UNSET_SIZE;
    cscf->preread_timeout = NGX_CONF_UNSET_MSEC;

    return cscf;
}",397.0,423.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6421,432767,ngx_stream_core_merge_srv_conf,1,ngx_stream_core_merge_srv_conf,"char* ngx_stream_core_merge_srv_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream_core_module.c,"static char *
ngx_stream_core_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_stream_core_srv_conf_t *prev = parent;
    ngx_stream_core_srv_conf_t *conf = child;

    ngx_conf_merge_msec_value(conf->resolver_timeout,
                              prev->resolver_timeout, 30000);

    if (conf->resolver == NULL) {

        if (prev->resolver == NULL) {

            /*
             * create dummy resolver in stream {} context
             * to inherit it in all servers
             */

            prev->resolver = ngx_resolver_create(cf, NULL, 0);
            if (prev->resolver == NULL) {
                return NGX_CONF_ERROR;
            }
        }

        conf->resolver = prev->resolver;
    }

    if (conf->handler == NULL) {
        ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
                      ""no handler for server in %s:%ui"",
                      conf->file_name, conf->line);
        return NGX_CONF_ERROR;
    }

    if (conf->error_log == NULL) {
       ...",426.0,480.0,1.0,1.0,55.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6422,432774,ngx_stream_core_error_log,1,ngx_stream_core_error_log,"char* ngx_stream_core_error_log (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_core_module.c,"static char *
ngx_stream_core_error_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_core_srv_conf_t  *cscf = conf;

    return ngx_log_set_log(cf, &cscf->error_log);
}",483.0,489.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6423,432781,ngx_stream_core_server,1,ngx_stream_core_server,"char* ngx_stream_core_server (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_core_module.c,"static char *
ngx_stream_core_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                         *rv;
    void                         *mconf;
    ngx_uint_t                    m;
    ngx_conf_t                    pcf;
    ngx_stream_module_t          *module;
    ngx_stream_conf_ctx_t        *ctx, *stream_ctx;
    ngx_stream_core_srv_conf_t   *cscf, **cscfp;
    ngx_stream_core_main_conf_t  *cmcf;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_stream_conf_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    stream_ctx = cf->ctx;
    ctx->main_conf = stream_ctx->main_conf;

    /* the server{}'s srv_conf */

    ctx->srv_conf = ngx_pcalloc(cf->pool,
                                sizeof(void *) * ngx_stream_max_module);
    if (ctx->srv_conf == NULL) {
        return NGX_CONF_ERROR;
    }

    for (m = 0; cf->cycle->modules[m]; m++) {
        if (cf->cycle->modules[m]->type != NGX_STREAM_MODULE) {
            continue;
        }

        mod...",492.0,570.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6424,432788,ngx_stream_core_listen,1,ngx_stream_core_listen,"char* ngx_stream_core_listen (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_core_module.c,"static char *
ngx_stream_core_listen(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_core_srv_conf_t  *cscf = conf;

    ngx_str_t                    *value, size;
    ngx_url_t                     u;
    ngx_uint_t                    i, n, backlog;
    ngx_stream_listen_t          *ls, *als;
    ngx_stream_core_main_conf_t  *cmcf;

    cscf->listen = 1;

    value = cf->args->elts;

    ngx_memzero(&u, sizeof(ngx_url_t));

    u.url = value[1];
    u.listen = 1;

    if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
        if (u.err) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""%s in \""%V\"" of the \""listen\"" directive"",
                               u.err, &u.url);
        }

        return NGX_CONF_ERROR;
    }

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    ls = ngx_array_push_n(&cmcf->listen, u.naddrs);
    if (ls == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_memzero(ls, sizeof(...",573.0,919.0,1.0,1.0,347.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6425,432795,ngx_stream_core_resolver,1,ngx_stream_core_resolver,"char* ngx_stream_core_resolver (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_core_module.c,"static char *
ngx_stream_core_resolver(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_core_srv_conf_t  *cscf = conf;

    ngx_str_t  *value;

    if (cscf->resolver) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    cscf->resolver = ngx_resolver_create(cf, &value[1], cf->args->nelts - 1);
    if (cscf->resolver == NULL) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",922.0,941.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6426,434847,ngx_stream_geo_addr,1,ngx_stream_geo_addr,"ngx_int_t ngx_stream_geo_addr (ngx_stream_session_t*,ngx_stream_geo_ctx_t*,ngx_addr_t*)",stream\ngx_stream_geo_module.c,"static ngx_int_t
ngx_stream_geo_addr(ngx_stream_session_t *s, ngx_stream_geo_ctx_t *ctx,
    ngx_addr_t *addr)
{
    ngx_stream_variable_value_t  *v;

    if (ctx->index == -1) {
        ngx_log_debug1(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                       ""stream geo started: %V"", &s->connection->addr_text);

        addr->sockaddr = s->connection->sockaddr;
        addr->socklen = s->connection->socklen;
        /* addr->name = s->connection->addr_text; */

        return NGX_OK;
    }

    v = ngx_stream_get_flushed_variable(s, ctx->index);

    if (v == NULL || v->not_found) {
        ngx_log_debug0(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                       ""stream geo not found"");

        return NGX_ERROR;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""stream geo started: %v"", v);

    if (ngx_parse_addr(s->connection->pool, addr, v->data, v->len) == NGX_OK) {
        return NGX_OK;
    }

    return NGX_ERROR;
}",317.0,351.0,1.0,1.0,35.0,0,0,0,0,2,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6427,434854,ngx_stream_geo_block,1,ngx_stream_geo_block,"char* ngx_stream_geo_block (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_geo_module.c,"static char *
ngx_stream_geo_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                       *rv;
    size_t                      len;
    ngx_str_t                  *value, name;
    ngx_uint_t                  i;
    ngx_conf_t                  save;
    ngx_pool_t                 *pool;
    ngx_array_t                *a;
    ngx_stream_variable_t      *var;
    ngx_stream_geo_ctx_t       *geo;
    ngx_stream_geo_conf_ctx_t   ctx;
#if (NGX_HAVE_INET6)
    static struct in6_addr      zero;
#endif

    value = cf->args->elts;

    geo = ngx_palloc(cf->pool, sizeof(ngx_stream_geo_ctx_t));
    if (geo == NULL) {
        return NGX_CONF_ERROR;
    }

    name = value[1];

    if (name.data[0] != '$') {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""%V\"""", &name);
        return NGX_CONF_ERROR;
    }

    name.len--;
    name.data++;

    if (cf->args->nelts == 3) {

        geo->index = ngx_stream_get_variable...",354.0,550.0,1.0,1.0,197.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6428,434861,ngx_stream_geo,1,ngx_stream_geo,"char* ngx_stream_geo (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_geo_module.c,"static char *
ngx_stream_geo(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
{
    char                       *rv;
    ngx_str_t                  *value;
    ngx_stream_geo_conf_ctx_t  *ctx;

    ctx = cf->ctx;

    value = cf->args->elts;

    if (cf->args->nelts == 1) {

        if (ngx_strcmp(value[0].data, ""ranges"") == 0) {

            if (ctx->tree
#if (NGX_HAVE_INET6)
                || ctx->tree6
#endif
               )
            {
                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                   ""the \""ranges\"" directive must be ""
                                   ""the first directive inside \""geo\"" block"");
                goto failed;
            }

            ctx->ranges = 1;

            rv = NGX_CONF_OK;

            goto done;
        }
    }

    if (cf->args->nelts != 2) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid number of the geo parameters"");
        goto failed;
    }

    if (ngx_strcmp(...",553.0,619.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6429,434868,ngx_stream_geo_range,1,ngx_stream_geo_range,"char* ngx_stream_geo_range (ngx_conf_t*,ngx_stream_geo_conf_ctx_t*,ngx_str_t*)",stream\ngx_stream_geo_module.c,"static char *
ngx_stream_geo_range(ngx_conf_t *cf, ngx_stream_geo_conf_ctx_t *ctx,
    ngx_str_t *value)
{
    u_char      *p, *last;
    in_addr_t    start, end;
    ngx_str_t   *net;
    ngx_uint_t   del;

    if (ngx_strcmp(value[0].data, ""default"") == 0) {

        if (ctx->high.default_value) {
            ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                ""duplicate default geo range value: \""%V\"", old value: \""%v\"""",
                &value[1], ctx->high.default_value);
        }

        ctx->high.default_value = ngx_stream_geo_value(cf, ctx, &value[1]);
        if (ctx->high.default_value == NULL) {
            return NGX_CONF_ERROR;
        }

        return NGX_CONF_OK;
    }

    if (ctx->binary_include) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
            ""binary geo range base \""%s\"" cannot be mixed with usual entries"",
            ctx->include_name.data);
        return NGX_CONF_ERROR;
    }

    if (ctx->high.low == NULL) {
        ctx->high.low = ngx_p...",622.0,728.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6430,434875,ngx_stream_geo_add_range,1,ngx_stream_geo_add_range,"char* ngx_stream_geo_add_range (ngx_conf_t*,ngx_stream_geo_conf_ctx_t*,in_addr_t,in_addr_t)",stream\ngx_stream_geo_module.c,"static char *
ngx_stream_geo_add_range(ngx_conf_t *cf, ngx_stream_geo_conf_ctx_t *ctx,
    in_addr_t start, in_addr_t end)
{
    in_addr_t                n;
    ngx_uint_t               h, i, s, e;
    ngx_array_t             *a;
    ngx_stream_geo_range_t  *range;

    for (n = start; n <= end; n = (n + 0x10000) & 0xffff0000) {

        h = n >> 16;

        if (n == start) {
            s = n & 0xffff;
        } else {
            s = 0;
        }

        if ((n | 0xffff) > end) {
            e = end & 0xffff;

        } else {
            e = 0xffff;
        }

        a = (ngx_array_t *) ctx->high.low[h];

        if (a == NULL) {
            a = ngx_array_create(ctx->temp_pool, 64,
                                 sizeof(ngx_stream_geo_range_t));
            if (a == NULL) {
                return NGX_CONF_ERROR;
            }

            ctx->high.low[h] = (ngx_stream_geo_range_t *) a;
        }

        i = a->nelts;
        range = a->elts;

        while (i) {

          ...",733.0,932.0,1.0,1.0,200.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,char*
6431,434883,ngx_stream_geo_delete_range,1,ngx_stream_geo_delete_range,"ngx_uint_t ngx_stream_geo_delete_range (ngx_conf_t*,ngx_stream_geo_conf_ctx_t*,in_addr_t,in_addr_t)",stream\ngx_stream_geo_module.c,"static ngx_uint_t
ngx_stream_geo_delete_range(ngx_conf_t *cf, ngx_stream_geo_conf_ctx_t *ctx,
    in_addr_t start, in_addr_t end)
{
    in_addr_t                n;
    ngx_uint_t               h, i, s, e, warn;
    ngx_array_t             *a;
    ngx_stream_geo_range_t  *range;

    warn = 0;

    for (n = start; n <= end; n = (n + 0x10000) & 0xffff0000) {

        h = n >> 16;

        if (n == start) {
            s = n & 0xffff;
        } else {
            s = 0;
        }

        if ((n | 0xffff) > end) {
            e = end & 0xffff;

        } else {
            e = 0xffff;
        }

        a = (ngx_array_t *) ctx->high.low[h];

        if (a == NULL || a->nelts == 0) {
            warn = 1;
            goto next;
        }

        range = a->elts;
        for (i = 0; i < a->nelts; i++) {

            if (s == (ngx_uint_t) range[i].start
                && e == (ngx_uint_t) range[i].end)
            {
                ngx_memmove(&range[i], &range[i + 1],
                 ...",935.0,997.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_uint_t
6432,434891,ngx_stream_geo_cidr,1,ngx_stream_geo_cidr,"char* ngx_stream_geo_cidr (ngx_conf_t*,ngx_stream_geo_conf_ctx_t*,ngx_str_t*)",stream\ngx_stream_geo_module.c,"static char *
ngx_stream_geo_cidr(ngx_conf_t *cf, ngx_stream_geo_conf_ctx_t *ctx,
    ngx_str_t *value)
{
    char        *rv;
    ngx_int_t    rc, del;
    ngx_str_t   *net;
    ngx_cidr_t   cidr;

    if (ctx->tree == NULL) {
        ctx->tree = ngx_radix_tree_create(ctx->pool, -1);
        if (ctx->tree == NULL) {
            return NGX_CONF_ERROR;
        }
    }

#if (NGX_HAVE_INET6)
    if (ctx->tree6 == NULL) {
        ctx->tree6 = ngx_radix_tree_create(ctx->pool, -1);
        if (ctx->tree6 == NULL) {
            return NGX_CONF_ERROR;
        }
    }
#endif

    if (ngx_strcmp(value[0].data, ""default"") == 0) {
        cidr.family = AF_INET;
        cidr.u.in.addr = 0;
        cidr.u.in.mask = 0;

        rv = ngx_stream_geo_cidr_add(cf, ctx, &cidr, &value[1], &value[0]);

        if (rv != NGX_CONF_OK) {
            return rv;
        }

#if (NGX_HAVE_INET6)
        cidr.family = AF_INET6;
        ngx_memzero(&cidr.u.in6, sizeof(ngx_in6_cidr_t));

        rv = ngx_stream_ge...",1000.0,1094.0,1.0,1.0,95.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6433,434898,ngx_stream_geo_cidr_add,1,ngx_stream_geo_cidr_add,"char* ngx_stream_geo_cidr_add (ngx_conf_t*,ngx_stream_geo_conf_ctx_t*,ngx_cidr_t*,ngx_str_t*,ngx_str_t*)",stream\ngx_stream_geo_module.c,"static char *
ngx_stream_geo_cidr_add(ngx_conf_t *cf, ngx_stream_geo_conf_ctx_t *ctx,
    ngx_cidr_t *cidr, ngx_str_t *value, ngx_str_t *net)
{
    ngx_int_t                     rc;
    ngx_stream_variable_value_t  *val, *old;

    val = ngx_stream_geo_value(cf, ctx, value);

    if (val == NULL) {
        return NGX_CONF_ERROR;
    }

    switch (cidr->family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        rc = ngx_radix128tree_insert(ctx->tree6, cidr->u.in6.addr.s6_addr,
                                     cidr->u.in6.mask.s6_addr,
                                     (uintptr_t) val);

        if (rc == NGX_OK) {
            return NGX_CONF_OK;
        }

        if (rc == NGX_ERROR) {
            return NGX_CONF_ERROR;
        }

        /* rc == NGX_BUSY */

        old = (ngx_stream_variable_value_t *)
                   ngx_radix128tree_find(ctx->tree6,
                                         cidr->u.in6.addr.s6_addr);

        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
  ...",1097.0,1192.0,1.0,1.0,96.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,char*
6434,434907,ngx_stream_geo_value,1,ngx_stream_geo_value,"ngx_stream_variable_value_t* ngx_stream_geo_value (ngx_conf_t*,ngx_stream_geo_conf_ctx_t*,ngx_str_t*)",stream\ngx_stream_geo_module.c,"static ngx_stream_variable_value_t *
ngx_stream_geo_value(ngx_conf_t *cf, ngx_stream_geo_conf_ctx_t *ctx,
    ngx_str_t *value)
{
    uint32_t                               hash;
    ngx_stream_variable_value_t           *val;
    ngx_stream_geo_variable_value_node_t  *gvvn;

    hash = ngx_crc32_long(value->data, value->len);

    gvvn = (ngx_stream_geo_variable_value_node_t *)
               ngx_str_rbtree_lookup(&ctx->rbtree, value, hash);

    if (gvvn) {
        return gvvn->value;
    }

    val = ngx_palloc(ctx->pool, sizeof(ngx_stream_variable_value_t));
    if (val == NULL) {
        return NULL;
    }

    val->len = value->len;
    val->data = ngx_pstrdup(ctx->pool, value);
    if (val->data == NULL) {
        return NULL;
    }

    val->valid = 1;
    val->no_cacheable = 0;
    val->not_found = 0;

    gvvn = ngx_palloc(ctx->temp_pool,
                      sizeof(ngx_stream_geo_variable_value_node_t));
    if (gvvn == NULL) {
        return NULL;
    }

    gvvn->sn.no...",1195.0,1245.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_stream_variable_value_t
6435,434914,ngx_stream_geo_cidr_value,1,ngx_stream_geo_cidr_value,"ngx_int_t ngx_stream_geo_cidr_value (ngx_conf_t*,ngx_str_t*,ngx_cidr_t*)",stream\ngx_stream_geo_module.c,"static ngx_int_t
ngx_stream_geo_cidr_value(ngx_conf_t *cf, ngx_str_t *net, ngx_cidr_t *cidr)
{
    ngx_int_t  rc;

    if (ngx_strcmp(net->data, ""255.255.255.255"") == 0) {
        cidr->family = AF_INET;
        cidr->u.in.addr = 0xffffffff;
        cidr->u.in.mask = 0xffffffff;

        return NGX_OK;
    }

    rc = ngx_ptocidr(net, cidr);

    if (rc == NGX_ERROR) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, ""invalid network \""%V\"""", net);
        return NGX_ERROR;
    }

    if (rc == NGX_DONE) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""low address bits of %V are meaningless"", net);
    }

    return NGX_OK;
}",1248.0,1274.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6436,434921,ngx_stream_geo_include,1,ngx_stream_geo_include,"char* ngx_stream_geo_include (ngx_conf_t*,ngx_stream_geo_conf_ctx_t*,ngx_str_t*)",stream\ngx_stream_geo_module.c,"static char *
ngx_stream_geo_include(ngx_conf_t *cf, ngx_stream_geo_conf_ctx_t *ctx,
    ngx_str_t *name)
{
    char       *rv;
    ngx_str_t   file;

    file.len = name->len + 4;
    file.data = ngx_pnalloc(ctx->temp_pool, name->len + 5);
    if (file.data == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_sprintf(file.data, ""%V.bin%Z"", name);

    if (ngx_conf_full_name(cf->cycle, &file, 1) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (ctx->ranges) {
        ngx_log_debug1(NGX_LOG_DEBUG_CORE, cf->log, 0, ""include %s"", file.data);

        switch (ngx_stream_geo_include_binary_base(cf, ctx, &file)) {
        case NGX_OK:
            return NGX_CONF_OK;
        case NGX_ERROR:
            return NGX_CONF_ERROR;
        default:
            break;
        }
    }

    file.len -= 4;
    file.data[file.len] = '\0';

    ctx->include_name = file;

    if (ctx->outside_entries) {
        ctx->allow_binary_include = 0;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_CORE, cf-...",1277.0,1326.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6437,434928,ngx_stream_geo_include_binary_base,1,ngx_stream_geo_include_binary_base,"ngx_int_t ngx_stream_geo_include_binary_base (ngx_conf_t*,ngx_stream_geo_conf_ctx_t*,ngx_str_t*)",stream\ngx_stream_geo_module.c,"static ngx_int_t
ngx_stream_geo_include_binary_base(ngx_conf_t *cf,
    ngx_stream_geo_conf_ctx_t *ctx, ngx_str_t *name)
{
    u_char                       *base, ch;
    time_t                        mtime;
    size_t                        size, len;
    ssize_t                       n;
    uint32_t                      crc32;
    ngx_err_t                     err;
    ngx_int_t                     rc;
    ngx_uint_t                    i;
    ngx_file_t                    file;
    ngx_file_info_t               fi;
    ngx_stream_geo_range_t       *range, **ranges;
    ngx_stream_geo_header_t      *header;
    ngx_stream_variable_value_t  *vv;

    ngx_memzero(&file, sizeof(ngx_file_t));
    file.name = *name;
    file.log = cf->log;

    file.fd = ngx_open_file(name->data, NGX_FILE_RDONLY, NGX_FILE_OPEN, 0);

    if (file.fd == NGX_INVALID_FILE) {
        err = ngx_errno;
        if (err != NGX_ENOENT) {
            ngx_conf_log_error(NGX_LOG_CRIT, cf, err,
                      ...",1329.0,1502.0,1.0,1.0,174.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6438,434935,ngx_stream_geo_create_binary_base,1,ngx_stream_geo_create_binary_base,void ngx_stream_geo_create_binary_base (ngx_stream_geo_conf_ctx_t*),stream\ngx_stream_geo_module.c,"static void
ngx_stream_geo_create_binary_base(ngx_stream_geo_conf_ctx_t *ctx)
{
    u_char                                *p;
    uint32_t                               hash;
    ngx_str_t                              s;
    ngx_uint_t                             i;
    ngx_file_mapping_t                     fm;
    ngx_stream_geo_range_t                *r, *range, **ranges;
    ngx_stream_geo_header_t               *header;
    ngx_stream_geo_variable_value_node_t  *gvvn;

    fm.name = ngx_pnalloc(ctx->temp_pool, ctx->include_name.len + 5);
    if (fm.name == NULL) {
        return;
    }

    ngx_sprintf(fm.name, ""%V.bin%Z"", &ctx->include_name);

    fm.size = ctx->data_size;
    fm.log = ctx->pool->log;

    ngx_log_error(NGX_LOG_NOTICE, fm.log, 0,
                  ""creating binary geo range base \""%s\"""", fm.name);

    if (ngx_create_file_mapping(&fm) != NGX_OK) {
        return;
    }

    p = ngx_cpymem(fm.addr, &ngx_stream_geo_header,
                   sizeof(ngx_stream_ge...",1505.0,1580.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6439,434940,ngx_stream_geo_copy_values,1,ngx_stream_geo_copy_values,"u_char* ngx_stream_geo_copy_values (u_char*,u_char*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",stream\ngx_stream_geo_module.c,"static u_char *
ngx_stream_geo_copy_values(u_char *base, u_char *p, ngx_rbtree_node_t *node,
    ngx_rbtree_node_t *sentinel)
{
    ngx_stream_variable_value_t           *vv;
    ngx_stream_geo_variable_value_node_t  *gvvn;

    if (node == sentinel) {
        return p;
    }

    gvvn = (ngx_stream_geo_variable_value_node_t *) node;
    gvvn->offset = p - base;

    vv = (ngx_stream_variable_value_t *) p;
    *vv = *gvvn->value;
    p += sizeof(ngx_stream_variable_value_t);
    vv->data = (u_char *) (p - base);

    p = ngx_cpymem(p, gvvn->sn.str.data, gvvn->sn.str.len);

    p = ngx_align_ptr(p, sizeof(void *));

    p = ngx_stream_geo_copy_values(base, p, node->left, sentinel);

    return ngx_stream_geo_copy_values(base, p, node->right, sentinel);
}",1583.0,1609.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,u_char
6440,435021,ngx_stream_geo_cidr_variable,1,ngx_stream_geo_cidr_variable,"ngx_int_t ngx_stream_geo_cidr_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_geo_module.c,"static ngx_int_t
ngx_stream_geo_cidr_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_stream_geo_ctx_t *ctx = (ngx_stream_geo_ctx_t *) data;

    in_addr_t                     inaddr;
    ngx_addr_t                    addr;
    struct sockaddr_in           *sin;
    ngx_stream_variable_value_t  *vv;
#if (NGX_HAVE_INET6)
    u_char                       *p;
    struct in6_addr              *inaddr6;
#endif

    if (ngx_stream_geo_addr(s, ctx, &addr) != NGX_OK) {
        vv = (ngx_stream_variable_value_t *)
                  ngx_radix32tree_find(ctx->u.trees.tree, INADDR_NONE);
        goto done;
    }

    switch (addr.sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        inaddr6 = &((struct sockaddr_in6 *) addr.sockaddr)->sin6_addr;
        p = inaddr6->s6_addr;

        if (IN6_IS_ADDR_V4MAPPED(inaddr6)) {
            inaddr = p[12] << 24;
            inaddr += p[13] << 16;
            inaddr += p[14] << 8;
          ...",164.0,234.0,1.0,1.0,71.0,27,7,23,11,0,3,5,3,1,3,,0,3,6,3,3,ngx_int_t
6441,435116,ngx_stream_geo_range_variable,1,ngx_stream_geo_range_variable,"ngx_int_t ngx_stream_geo_range_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_geo_module.c,"static ngx_int_t
ngx_stream_geo_range_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_stream_geo_ctx_t *ctx = (ngx_stream_geo_ctx_t *) data;

    in_addr_t                inaddr;
    ngx_addr_t               addr;
    ngx_uint_t               n;
    struct sockaddr_in      *sin;
    ngx_stream_geo_range_t  *range;
#if (NGX_HAVE_INET6)
    u_char                  *p;
    struct in6_addr         *inaddr6;
#endif

    *v = *ctx->u.high.default_value;

    if (ngx_stream_geo_addr(s, ctx, &addr) == NGX_OK) {

        switch (addr.sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
        case AF_INET6:
            inaddr6 = &((struct sockaddr_in6 *) addr.sockaddr)->sin6_addr;

            if (IN6_IS_ADDR_V4MAPPED(inaddr6)) {
                p = inaddr6->s6_addr;

                inaddr = p[12] << 24;
                inaddr += p[13] << 16;
                inaddr += p[14] << 8;
                inaddr += p[15];

            } else {
                ...",237.0,314.0,1.0,1.0,78.0,44,14,31,11,0,4,9,14,3,1,,0,4,6,3,3,ngx_int_t
6442,438929,ngx_stream_geoip_variable_handler_pt,1,ngx_stream_geoip_variable_handler_pt,"char* ngx_stream_geoip_variable_handler_pt (GeoIP*,u_long)",stream\ngx_stream_geoip_module.c,"typedef const char *(*ngx_stream_geoip_variable_handler_pt)(GeoIP *,
    u_long addr);",39.0,40.0,20.0,16.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
6443,438942,ngx_stream_geoip_country_variable,1,ngx_stream_geoip_country_variable,"ngx_int_t ngx_stream_geoip_country_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_geoip_module.c,"static ngx_int_t
ngx_stream_geoip_country_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_stream_geoip_variable_handler_pt     handler =
        ngx_stream_geoip_country_functions[data];
#if (NGX_HAVE_GEOIP_V6)
    ngx_stream_geoip_variable_handler_v6_pt  handler_v6 =
        ngx_stream_geoip_country_v6_functions[data];
#endif

    const char               *val;
    ngx_stream_geoip_conf_t  *gcf;

    gcf = ngx_stream_get_module_main_conf(s, ngx_stream_geoip_module);

    if (gcf->country == NULL) {
        goto not_found;
    }

#if (NGX_HAVE_GEOIP_V6)
    val = gcf->country_v6
              ? handler_v6(gcf->country, ngx_stream_geoip_addr_v6(s, gcf))
              : handler(gcf->country, ngx_stream_geoip_addr(s, gcf));
#else
    val = handler(gcf->country, ngx_stream_geoip_addr(s, gcf));
#endif

    if (val == NULL) {
        goto not_found;
    }

    v->len = ngx_strlen(val);
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_fo...",302.0,347.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6444,438949,ngx_stream_geoip_org_variable,1,ngx_stream_geoip_org_variable,"ngx_int_t ngx_stream_geoip_org_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_geoip_module.c,"static ngx_int_t
ngx_stream_geoip_org_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    size_t                    len;
    char                     *val;
    ngx_stream_geoip_conf_t  *gcf;

    gcf = ngx_stream_get_module_main_conf(s, ngx_stream_geoip_module);

    if (gcf->org == NULL) {
        goto not_found;
    }

#if (NGX_HAVE_GEOIP_V6)
    val = gcf->org_v6
              ? GeoIP_name_by_ipnum_v6(gcf->org,
                                       ngx_stream_geoip_addr_v6(s, gcf))
              : GeoIP_name_by_ipnum(gcf->org,
                                    ngx_stream_geoip_addr(s, gcf));
#else
    val = GeoIP_name_by_ipnum(gcf->org, ngx_stream_geoip_addr(s, gcf));
#endif

    if (val == NULL) {
        goto not_found;
    }

    len = ngx_strlen(val);
    v->data = ngx_pnalloc(s->connection->pool, len);
    if (v->data == NULL) {
        ngx_free(val);
        return NGX_ERROR;
    }

    ngx_memcpy(v->data, val, len);

    v->len = ...",350.0,401.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6445,438956,ngx_stream_geoip_city_variable,1,ngx_stream_geoip_city_variable,"ngx_int_t ngx_stream_geoip_city_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_geoip_module.c,"static ngx_int_t
ngx_stream_geoip_city_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    char         *val;
    size_t        len;
    GeoIPRecord  *gr;

    gr = ngx_stream_geoip_get_city_record(s);
    if (gr == NULL) {
        goto not_found;
    }

    val = *(char **) ((char *) gr + data);
    if (val == NULL) {
        goto no_value;
    }

    len = ngx_strlen(val);
    v->data = ngx_pnalloc(s->connection->pool, len);
    if (v->data == NULL) {
        GeoIPRecord_delete(gr);
        return NGX_ERROR;
    }

    ngx_memcpy(v->data, val, len);

    v->len = len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    GeoIPRecord_delete(gr);

    return NGX_OK;

no_value:

    GeoIPRecord_delete(gr);

not_found:

    v->not_found = 1;

    return NGX_OK;
}",404.0,449.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6446,438963,ngx_stream_geoip_region_name_variable,1,ngx_stream_geoip_region_name_variable,"ngx_int_t ngx_stream_geoip_region_name_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_geoip_module.c,"static ngx_int_t
ngx_stream_geoip_region_name_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    size_t        len;
    const char   *val;
    GeoIPRecord  *gr;

    gr = ngx_stream_geoip_get_city_record(s);
    if (gr == NULL) {
        goto not_found;
    }

    val = GeoIP_region_name_by_code(gr->country_code, gr->region);

    GeoIPRecord_delete(gr);

    if (val == NULL) {
        goto not_found;
    }

    len = ngx_strlen(val);
    v->data = ngx_pnalloc(s->connection->pool, len);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(v->data, val, len);

    v->len = len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    return NGX_OK;

not_found:

    v->not_found = 1;

    return NGX_OK;
}",452.0,493.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6447,438970,ngx_stream_geoip_city_float_variable,1,ngx_stream_geoip_city_float_variable,"ngx_int_t ngx_stream_geoip_city_float_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_geoip_module.c,"static ngx_int_t
ngx_stream_geoip_city_float_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    float         val;
    GeoIPRecord  *gr;

    gr = ngx_stream_geoip_get_city_record(s);
    if (gr == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->data = ngx_pnalloc(s->connection->pool, NGX_INT64_LEN + 5);
    if (v->data == NULL) {
        GeoIPRecord_delete(gr);
        return NGX_ERROR;
    }

    val = *(float *) ((char *) gr + data);

    v->len = ngx_sprintf(v->data, ""%.4f"", val) - v->data;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    GeoIPRecord_delete(gr);

    return NGX_OK;
}",496.0,525.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6448,438977,ngx_stream_geoip_city_int_variable,1,ngx_stream_geoip_city_int_variable,"ngx_int_t ngx_stream_geoip_city_int_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_geoip_module.c,"static ngx_int_t
ngx_stream_geoip_city_int_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    int           val;
    GeoIPRecord  *gr;

    gr = ngx_stream_geoip_get_city_record(s);
    if (gr == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->data = ngx_pnalloc(s->connection->pool, NGX_INT64_LEN);
    if (v->data == NULL) {
        GeoIPRecord_delete(gr);
        return NGX_ERROR;
    }

    val = *(int *) ((char *) gr + data);

    v->len = ngx_sprintf(v->data, ""%d"", val) - v->data;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    GeoIPRecord_delete(gr);

    return NGX_OK;
}",528.0,557.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6449,438984,ngx_stream_geoip_get_city_record,1,ngx_stream_geoip_get_city_record,GeoIPRecord* ngx_stream_geoip_get_city_record (ngx_stream_session_t*),stream\ngx_stream_geoip_module.c,"static GeoIPRecord *
ngx_stream_geoip_get_city_record(ngx_stream_session_t *s)
{
    ngx_stream_geoip_conf_t  *gcf;

    gcf = ngx_stream_get_module_main_conf(s, ngx_stream_geoip_module);

    if (gcf->city) {
#if (NGX_HAVE_GEOIP_V6)
        return gcf->city_v6
                   ? GeoIP_record_by_ipnum_v6(gcf->city,
                                              ngx_stream_geoip_addr_v6(s, gcf))
                   : GeoIP_record_by_ipnum(gcf->city,
                                           ngx_stream_geoip_addr(s, gcf));
#else
        return GeoIP_record_by_ipnum(gcf->city, ngx_stream_geoip_addr(s, gcf));
#endif
    }

    return NULL;
}",560.0,580.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,GeoIPRecord
6450,438989,ngx_stream_geoip_add_variables,1,ngx_stream_geoip_add_variables,ngx_int_t ngx_stream_geoip_add_variables (ngx_conf_t*),stream\ngx_stream_geoip_module.c,"static ngx_int_t
ngx_stream_geoip_add_variables(ngx_conf_t *cf)
{
    ngx_stream_variable_t  *var, *v;

    for (v = ngx_stream_geoip_vars; v->name.len; v++) {
        var = ngx_stream_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",583.0,599.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6451,438994,ngx_stream_geoip_create_conf,1,ngx_stream_geoip_create_conf,void* ngx_stream_geoip_create_conf (ngx_conf_t*),stream\ngx_stream_geoip_module.c,"static void *
ngx_stream_geoip_create_conf(ngx_conf_t *cf)
{
    ngx_pool_cleanup_t       *cln;
    ngx_stream_geoip_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_geoip_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    cln = ngx_pool_cleanup_add(cf->pool, 0);
    if (cln == NULL) {
        return NULL;
    }

    cln->handler = ngx_stream_geoip_cleanup;
    cln->data = conf;

    return conf;
}",602.0,622.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6452,438999,ngx_stream_geoip_country,1,ngx_stream_geoip_country,"char* ngx_stream_geoip_country (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_geoip_module.c,"static char *
ngx_stream_geoip_country(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_geoip_conf_t  *gcf = conf;

    ngx_str_t  *value;

    if (gcf->country) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    gcf->country = GeoIP_open((char *) value[1].data, GEOIP_MEMORY_CACHE);

    if (gcf->country == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""GeoIP_open(\""%V\"") failed"", &value[1]);

        return NGX_CONF_ERROR;
    }

    if (cf->args->nelts == 3) {
        if (ngx_strcmp(value[2].data, ""utf8"") == 0) {
            GeoIP_set_charset(gcf->country, GEOIP_CHARSET_UTF8);

        } else {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid parameter \""%V\"""", &value[2]);
            return NGX_CONF_ERROR;
        }
    }

    switch (gcf->country->databaseType) {

    case GEOIP_COUNTRY_EDITION:

        return NGX_CONF_OK;

#if (NGX_HAVE_GEOIP_V6)
    case GEO...",625.0,677.0,1.0,1.0,53.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6453,439006,ngx_stream_geoip_org,1,ngx_stream_geoip_org,"char* ngx_stream_geoip_org (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_geoip_module.c,"static char *
ngx_stream_geoip_org(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_geoip_conf_t  *gcf = conf;

    ngx_str_t  *value;

    if (gcf->org) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    gcf->org = GeoIP_open((char *) value[1].data, GEOIP_MEMORY_CACHE);

    if (gcf->org == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""GeoIP_open(\""%V\"") failed"", &value[1]);

        return NGX_CONF_ERROR;
    }

    if (cf->args->nelts == 3) {
        if (ngx_strcmp(value[2].data, ""utf8"") == 0) {
            GeoIP_set_charset(gcf->org, GEOIP_CHARSET_UTF8);

        } else {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid parameter \""%V\"""", &value[2]);
            return NGX_CONF_ERROR;
        }
    }

    switch (gcf->org->databaseType) {

    case GEOIP_ISP_EDITION:
    case GEOIP_ORG_EDITION:
    case GEOIP_DOMAIN_EDITION:
    case GEOIP_ASNUM_EDITION:

    ...",680.0,738.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6454,439013,ngx_stream_geoip_city,1,ngx_stream_geoip_city,"char* ngx_stream_geoip_city (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_geoip_module.c,"static char *
ngx_stream_geoip_city(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_geoip_conf_t  *gcf = conf;

    ngx_str_t  *value;

    if (gcf->city) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    gcf->city = GeoIP_open((char *) value[1].data, GEOIP_MEMORY_CACHE);

    if (gcf->city == NULL) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""GeoIP_open(\""%V\"") failed"", &value[1]);

        return NGX_CONF_ERROR;
    }

    if (cf->args->nelts == 3) {
        if (ngx_strcmp(value[2].data, ""utf8"") == 0) {
            GeoIP_set_charset(gcf->city, GEOIP_CHARSET_UTF8);

        } else {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid parameter \""%V\"""", &value[2]);
            return NGX_CONF_ERROR;
        }
    }

    switch (gcf->city->databaseType) {

    case GEOIP_CITY_EDITION_REV0:
    case GEOIP_CITY_EDITION_REV1:

        return NGX_CONF_OK;

#if (NGX_HAVE_GEOI...",741.0,795.0,1.0,1.0,55.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6455,439020,ngx_stream_geoip_cleanup,1,ngx_stream_geoip_cleanup,void ngx_stream_geoip_cleanup (void*),stream\ngx_stream_geoip_module.c,"static void
ngx_stream_geoip_cleanup(void *data)
{
    ngx_stream_geoip_conf_t  *gcf = data;

    if (gcf->country) {
        GeoIP_delete(gcf->country);
    }

    if (gcf->org) {
        GeoIP_delete(gcf->org);
    }

    if (gcf->city) {
        GeoIP_delete(gcf->city);
    }
}",798.0,814.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6456,439248,ngx_stream_geoip_addr,1,ngx_stream_geoip_addr,"u_long ngx_stream_geoip_addr (ngx_stream_session_t*,ngx_stream_geoip_conf_t*)",stream\ngx_stream_geoip_module.c,"static u_long
ngx_stream_geoip_addr(ngx_stream_session_t *s, ngx_stream_geoip_conf_t *gcf)
{
    ngx_addr_t           addr;
    struct sockaddr_in  *sin;

    addr.sockaddr = s->connection->sockaddr;
    addr.socklen = s->connection->socklen;
    /* addr.name = s->connection->addr_text; */

#if (NGX_HAVE_INET6)

    if (addr.sockaddr->sa_family == AF_INET6) {
        u_char           *p;
        in_addr_t         inaddr;
        struct in6_addr  *inaddr6;

        inaddr6 = &((struct sockaddr_in6 *) addr.sockaddr)->sin6_addr;

        if (IN6_IS_ADDR_V4MAPPED(inaddr6)) {
            p = inaddr6->s6_addr;

            inaddr = p[12] << 24;
            inaddr += p[13] << 16;
            inaddr += p[14] << 8;
            inaddr += p[15];

            return inaddr;
        }
    }

#endif

    if (addr.sockaddr->sa_family != AF_INET) {
        return INADDR_NONE;
    }

    sin = (struct sockaddr_in *) addr.sockaddr;
    return ntohl(sin->sin_addr.s_addr);
}",217.0,256.0,1.0,1.0,40.0,16,5,10,5,0,1,2,2,0,0,,0,1,4,2,2,u_long
6457,440418,ngx_stream_log_session,1,ngx_stream_log_session,void ngx_stream_log_session (ngx_stream_session_t*),stream\ngx_stream_handler.c,"static void
ngx_stream_log_session(ngx_stream_session_t *s)
{
    ngx_uint_t                    i, n;
    ngx_stream_handler_pt        *log_handler;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_get_module_main_conf(s, ngx_stream_core_module);

    log_handler = cmcf->phases[NGX_STREAM_LOG_PHASE].handlers.elts;
    n = cmcf->phases[NGX_STREAM_LOG_PHASE].handlers.nelts;

    for (i = 0; i < n; i++) {
        log_handler[i](s);
    }
}",310.0,325.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6458,440423,ngx_stream_close_connection,1,ngx_stream_close_connection,void ngx_stream_close_connection (ngx_connection_t*),stream\ngx_stream_handler.c,"static void
ngx_stream_close_connection(ngx_connection_t *c)
{
    ngx_pool_t  *pool;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, c->log, 0,
                   ""close stream connection: %d"", c->fd);

#if (NGX_STREAM_SSL)

    if (c->ssl) {
        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
            c->ssl->handler = ngx_stream_close_connection;
            return;
        }
    }

#endif

#if (NGX_STAT_STUB)
    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
#endif

    pool = c->pool;

    ngx_close_connection(c);

    ngx_destroy_pool(pool);
}",328.0,356.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6459,440428,ngx_stream_log_error,1,ngx_stream_log_error,"u_char* ngx_stream_log_error (ngx_log_t*,u_char*,size_t)",stream\ngx_stream_handler.c,"static u_char *
ngx_stream_log_error(ngx_log_t *log, u_char *buf, size_t len)
{
    u_char                *p;
    ngx_stream_session_t  *s;

    if (log->action) {
        p = ngx_snprintf(buf, len, "" while %s"", log->action);
        len -= p - buf;
        buf = p;
    }

    s = log->data;

    p = ngx_snprintf(buf, len, "", %sclient: %V, server: %V"",
                     s->connection->type == SOCK_DGRAM ? ""udp "" : """",
                     &s->connection->addr_text,
                     &s->connection->listening->addr_text);
    len -= p - buf;
    buf = p;

    if (s->log_handler) {
        p = s->log_handler(log, buf, len);
    }

    return p;
}",359.0,385.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6460,440435,ngx_stream_proxy_protocol_handler,1,ngx_stream_proxy_protocol_handler,void ngx_stream_proxy_protocol_handler (ngx_event_t*),stream\ngx_stream_handler.c,"static void
ngx_stream_proxy_protocol_handler(ngx_event_t *rev)
{
    u_char                      *p, buf[NGX_PROXY_PROTOCOL_MAX_HEADER];
    size_t                       size;
    ssize_t                      n;
    ngx_err_t                    err;
    ngx_connection_t            *c;
    ngx_stream_session_t        *s;
    ngx_stream_core_srv_conf_t  *cscf;

    c = rev->data;
    s = c->data;

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, c->log, 0,
                   ""stream PROXY protocol handler"");

    if (rev->timedout) {
        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, ""client timed out"");
        ngx_stream_finalize_session(s, NGX_STREAM_OK);
        return;
    }

    n = recv(c->fd, (char *) buf, sizeof(buf), MSG_PEEK);

    err = ngx_socket_errno;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, c->log, 0, ""recv(): %z"", n);

    if (n == -1) {
        if (err == NGX_EAGAIN) {
            rev->ready = 0;

            if (!rev->timer_set) {
                cscf = ngx_stream...",205.0,280.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6461,441283,ngx_stream_limit_conn_lookup,1,ngx_stream_limit_conn_lookup,"ngx_rbtree_node_t* ngx_stream_limit_conn_lookup (ngx_rbtree_t*,ngx_str_t*,uint32_t)",stream\ngx_stream_limit_conn_module.c,"static ngx_rbtree_node_t *
ngx_stream_limit_conn_lookup(ngx_rbtree_t *rbtree, ngx_str_t *key,
    uint32_t hash)
{
    ngx_int_t                      rc;
    ngx_rbtree_node_t             *node, *sentinel;
    ngx_stream_limit_conn_node_t  *lcn;

    node = rbtree->root;
    sentinel = rbtree->sentinel;

    while (node != sentinel) {

        if (hash < node->key) {
            node = node->left;
            continue;
        }

        if (hash > node->key) {
            node = node->right;
            continue;
        }

        /* hash == node->key */

        lcn = (ngx_stream_limit_conn_node_t *) &node->color;

        rc = ngx_memn2cmp(key->data, lcn->data, key->len, (size_t) lcn->len);

        if (rc == 0) {
            return node;
        }

        node = (rc < 0) ? node->left : node->right;
    }

    return NULL;
}",332.0,369.0,1.0,1.0,38.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_rbtree_node_t
6462,441290,ngx_stream_limit_conn_cleanup,1,ngx_stream_limit_conn_cleanup,void ngx_stream_limit_conn_cleanup (void*),stream\ngx_stream_limit_conn_module.c,"static void
ngx_stream_limit_conn_cleanup(void *data)
{
    ngx_stream_limit_conn_cleanup_t  *lccln = data;

    ngx_rbtree_node_t             *node;
    ngx_stream_limit_conn_ctx_t   *ctx;
    ngx_stream_limit_conn_node_t  *lc;

    ctx = lccln->shm_zone->data;
    node = lccln->node;
    lc = (ngx_stream_limit_conn_node_t *) &node->color;

    ngx_shmtx_lock(&ctx->shpool->mutex);

    ngx_log_debug2(NGX_LOG_DEBUG_STREAM, lccln->shm_zone->shm.log, 0,
                   ""limit conn cleanup: %08Xi %d"", node->key, lc->conn);

    lc->conn--;

    if (lc->conn == 0) {
        ngx_rbtree_delete(&ctx->sh->rbtree, node);
        ngx_slab_free_locked(ctx->shpool, node);
    }

    ngx_shmtx_unlock(&ctx->shpool->mutex);
}",372.0,398.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6463,441296,ngx_stream_limit_conn_status_variable,1,ngx_stream_limit_conn_status_variable,"ngx_int_t ngx_stream_limit_conn_status_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_limit_conn_module.c,"static ngx_int_t
ngx_stream_limit_conn_status_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    if (s->limit_conn_status == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->len = ngx_stream_limit_conn_status[s->limit_conn_status - 1].len;
    v->data = ngx_stream_limit_conn_status[s->limit_conn_status - 1].data;

    return NGX_OK;
}",480.0,496.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6464,441303,ngx_stream_limit_conn_create_conf,1,ngx_stream_limit_conn_create_conf,void* ngx_stream_limit_conn_create_conf (ngx_conf_t*),stream\ngx_stream_limit_conn_module.c,"static void *
ngx_stream_limit_conn_create_conf(ngx_conf_t *cf)
{
    ngx_stream_limit_conn_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_limit_conn_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->limits.elts = NULL;
     */

    conf->log_level = NGX_CONF_UNSET_UINT;
    conf->dry_run = NGX_CONF_UNSET;

    return conf;
}",499.0,519.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6465,441308,ngx_stream_limit_conn_merge_conf,1,ngx_stream_limit_conn_merge_conf,"char* ngx_stream_limit_conn_merge_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream_limit_conn_module.c,"static char *
ngx_stream_limit_conn_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_stream_limit_conn_conf_t *prev = parent;
    ngx_stream_limit_conn_conf_t *conf = child;

    if (conf->limits.elts == NULL) {
        conf->limits = prev->limits;
    }

    ngx_conf_merge_uint_value(conf->log_level, prev->log_level, NGX_LOG_ERR);

    ngx_conf_merge_value(conf->dry_run, prev->dry_run, 0);

    return NGX_CONF_OK;
}",522.0,537.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6466,441315,ngx_stream_limit_conn_zone,1,ngx_stream_limit_conn_zone,"char* ngx_stream_limit_conn_zone (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_limit_conn_module.c,"static char *
ngx_stream_limit_conn_zone(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    u_char                              *p;
    ssize_t                              size;
    ngx_str_t                           *value, name, s;
    ngx_uint_t                           i;
    ngx_shm_zone_t                      *shm_zone;
    ngx_stream_limit_conn_ctx_t         *ctx;
    ngx_stream_compile_complex_value_t   ccv;

    value = cf->args->elts;

    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_stream_limit_conn_ctx_t));
    if (ctx == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_memzero(&ccv, sizeof(ngx_stream_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &ctx->key;

    if (ngx_stream_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    size = 0;
    name.len = 0;

    for (i = 2; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""zone="", 5) == 0) {

            name.data = va...",540.0,638.0,1.0,1.0,99.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6467,441322,ngx_stream_limit_conn,1,ngx_stream_limit_conn,"char* ngx_stream_limit_conn (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_limit_conn_module.c,"static char *
ngx_stream_limit_conn(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_shm_zone_t                 *shm_zone;
    ngx_stream_limit_conn_conf_t   *lccf = conf;
    ngx_stream_limit_conn_limit_t  *limit, *limits;

    ngx_str_t   *value;
    ngx_int_t    n;
    ngx_uint_t   i;

    value = cf->args->elts;

    shm_zone = ngx_shared_memory_add(cf, &value[1], 0,
                                     &ngx_stream_limit_conn_module);
    if (shm_zone == NULL) {
        return NGX_CONF_ERROR;
    }

    limits = lccf->limits.elts;

    if (limits == NULL) {
        if (ngx_array_init(&lccf->limits, cf->pool, 1,
                           sizeof(ngx_stream_limit_conn_limit_t))
            != NGX_OK)
        {
            return NGX_CONF_ERROR;
        }
    }

    for (i = 0; i < lccf->limits.nelts; i++) {
        if (shm_zone == limits[i].shm_zone) {
            return ""is duplicate"";
        }
    }

    n = ngx_atoi(value[2].data, value[2].len);
    if (n <= 0) {
    ...",641.0,699.0,1.0,1.0,59.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6468,441329,ngx_stream_limit_conn_add_variables,1,ngx_stream_limit_conn_add_variables,ngx_int_t ngx_stream_limit_conn_add_variables (ngx_conf_t*),stream\ngx_stream_limit_conn_module.c,"static ngx_int_t
ngx_stream_limit_conn_add_variables(ngx_conf_t *cf)
{
    ngx_stream_variable_t  *var, *v;

    for (v = ngx_stream_limit_conn_vars; v->name.len; v++) {
        var = ngx_stream_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",702.0,718.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6469,441334,ngx_stream_limit_conn_init,1,ngx_stream_limit_conn_init,ngx_int_t ngx_stream_limit_conn_init (ngx_conf_t*),stream\ngx_stream_limit_conn_module.c,"static ngx_int_t
ngx_stream_limit_conn_init(ngx_conf_t *cf)
{
    ngx_stream_handler_pt        *h;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_STREAM_PREACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_stream_limit_conn_handler;

    return NGX_OK;
}",721.0,737.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6470,441468,ngx_stream_limit_conn_handler,1,ngx_stream_limit_conn_handler,ngx_int_t ngx_stream_limit_conn_handler (ngx_stream_session_t*),stream\ngx_stream_limit_conn_module.c,"static ngx_int_t
ngx_stream_limit_conn_handler(ngx_stream_session_t *s)
{
    size_t                            n;
    uint32_t                          hash;
    ngx_str_t                         key;
    ngx_uint_t                        i;
    ngx_rbtree_node_t                *node;
    ngx_pool_cleanup_t               *cln;
    ngx_stream_limit_conn_ctx_t      *ctx;
    ngx_stream_limit_conn_node_t     *lc;
    ngx_stream_limit_conn_conf_t     *lccf;
    ngx_stream_limit_conn_limit_t    *limits;
    ngx_stream_limit_conn_cleanup_t  *lccln;

    lccf = ngx_stream_get_module_srv_conf(s, ngx_stream_limit_conn_module);
    limits = lccf->limits.elts;

    for (i = 0; i < lccf->limits.nelts; i++) {
        ctx = limits[i].shm_zone->data;

        if (ngx_stream_complex_value(s, &ctx->key, &key) != NGX_OK) {
            return NGX_ERROR;
        }

        if (key.len == 0) {
            continue;
        }

        if (key.len > 255) {
            ngx_log_error(NGX_LOG_ERR, s->connec...",163.0,288.0,1.0,31.0,126.0,97,12,84,26,0,38,11,19,6,10,,0,33,2,1,1,ngx_int_t
6471,441868,ngx_stream_limit_conn_rbtree_insert_value,1,ngx_stream_limit_conn_rbtree_insert_value,"void ngx_stream_limit_conn_rbtree_insert_value (ngx_rbtree_node_t*,ngx_rbtree_node_t*,ngx_rbtree_node_t*)",stream\ngx_stream_limit_conn_module.c,"static void
ngx_stream_limit_conn_rbtree_insert_value(ngx_rbtree_node_t *temp,
    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
{
    ngx_rbtree_node_t             **p;
    ngx_stream_limit_conn_node_t   *lcn, *lcnt;

    for ( ;; ) {

        if (node->key < temp->key) {

            p = &temp->left;

        } else if (node->key > temp->key) {

            p = &temp->right;

        } else { /* node->key == temp->key */

            lcn = (ngx_stream_limit_conn_node_t *) &node->color;
            lcnt = (ngx_stream_limit_conn_node_t *) &temp->color;

            p = (ngx_memn2cmp(lcn->data, lcnt->data, lcn->len, lcnt->len) < 0)
                ? &temp->left : &temp->right;
        }

        if (*p == sentinel) {
            break;
        }

        temp = *p;
    }

    *p = node;
    node->parent = temp;
    node->left = sentinel;
    node->right = sentinel;
    ngx_rbt_red(node);
}",291.0,329.0,1.0,1.0,39.0,18,6,17,4,0,0,5,6,0,0,,0,0,6,3,3,void
6472,442175,ngx_stream_limit_conn_init_zone,1,ngx_stream_limit_conn_init_zone,"ngx_int_t ngx_stream_limit_conn_init_zone (ngx_shm_zone_t*,void*)",stream\ngx_stream_limit_conn_module.c,"static ngx_int_t
ngx_stream_limit_conn_init_zone(ngx_shm_zone_t *shm_zone, void *data)
{
    ngx_stream_limit_conn_ctx_t  *octx = data;

    size_t                        len;
    ngx_stream_limit_conn_ctx_t  *ctx;

    ctx = shm_zone->data;

    if (octx) {
        if (ctx->key.value.len != octx->key.value.len
            || ngx_strncmp(ctx->key.value.data, octx->key.value.data,
                           ctx->key.value.len)
               != 0)
        {
            ngx_log_error(NGX_LOG_EMERG, shm_zone->shm.log, 0,
                          ""limit_conn_zone \""%V\"" uses the \""%V\"" key ""
                          ""while previously it used the \""%V\"" key"",
                          &shm_zone->shm.name, &ctx->key.value,
                          &octx->key.value);
            return NGX_ERROR;
        }

        ctx->sh = octx->sh;
        ctx->shpool = octx->shpool;

        return NGX_OK;
    }

    ctx->shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;

    if (shm_zone->shm.exists...",417.0,477.0,1.0,1.0,61.0,83,10,48,10,0,30,6,7,7,4,,0,28,4,2,2,ngx_int_t
6473,443123,ngx_stream_log_op_run_pt,1,ngx_stream_log_op_run_pt,"u_char* ngx_stream_log_op_run_pt (ngx_stream_session_t*,u_char*,ngx_stream_log_op_t*)",stream\ngx_stream_log_module.c,"typedef u_char *(*ngx_stream_log_op_run_pt) (ngx_stream_session_t *s,
    u_char *buf, ngx_stream_log_op_t *op);",19.0,20.0,16.0,41.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char*
6474,443130,ngx_stream_log_op_getlen_pt,1,ngx_stream_log_op_getlen_pt,"size_t ngx_stream_log_op_getlen_pt (ngx_stream_session_t*,uintptr_t)",stream\ngx_stream_log_module.c,"typedef size_t (*ngx_stream_log_op_getlen_pt) (ngx_stream_session_t *s,
    uintptr_t data);",22.0,23.0,16.0,19.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,size_t
6475,443182,ngx_stream_log_write,1,ngx_stream_log_write,"void ngx_stream_log_write (ngx_stream_session_t*,ngx_stream_log_t*,u_char*,size_t)",stream\ngx_stream_log_module.c,"static void
ngx_stream_log_write(ngx_stream_session_t *s, ngx_stream_log_t *log,
    u_char *buf, size_t len)
{
    u_char                *name;
    time_t                 now;
    ssize_t                n;
    ngx_err_t              err;
#if (NGX_ZLIB)
    ngx_stream_log_buf_t  *buffer;
#endif

    if (log->script == NULL) {
        name = log->file->name.data;

#if (NGX_ZLIB)
        buffer = log->file->data;

        if (buffer && buffer->gzip) {
            n = ngx_stream_log_gzip(log->file->fd, buf, len, buffer->gzip,
                                    s->connection->log);
        } else {
            n = ngx_write_fd(log->file->fd, buf, len);
        }
#else
        n = ngx_write_fd(log->file->fd, buf, len);
#endif

    } else {
        name = NULL;
        n = ngx_stream_log_script_write(s, log->script, &name, buf, len);
    }

    if (n == (ssize_t) len) {
        return;
    }

    now = ngx_time();

    if (n == -1) {
        err = ngx_errno;

        if (err == NGX_ENOSP...",353.0,416.0,1.0,1.0,64.0,0,0,0,0,2,0,1,1,0,0,,0,0,8,4,4,void
6476,443190,ngx_stream_log_script_write,1,ngx_stream_log_script_write,"ssize_t ngx_stream_log_script_write (ngx_stream_session_t*,ngx_stream_log_script_t*,u_char**,u_char*,size_t)",stream\ngx_stream_log_module.c,"static ssize_t
ngx_stream_log_script_write(ngx_stream_session_t *s,
    ngx_stream_log_script_t *script, u_char **name, u_char *buf, size_t len)
{
    ssize_t                     n;
    ngx_str_t                   log;
    ngx_open_file_info_t        of;
    ngx_stream_log_srv_conf_t  *lscf;

    if (ngx_stream_script_run(s, &log, script->lengths->elts, 1,
                              script->values->elts)
        == NULL)
    {
        /* simulate successful logging */
        return len;
    }

    log.data[log.len - 1] = '\0';
    *name = log.data;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""stream log \""%s\"""", log.data);

    lscf = ngx_stream_get_module_srv_conf(s, ngx_stream_log_module);

    ngx_memzero(&of, sizeof(ngx_open_file_info_t));

    of.log = 1;
    of.valid = lscf->open_file_cache_valid;
    of.min_uses = lscf->open_file_cache_min_uses;
    of.directio = NGX_OPEN_FILE_DIRECTIO_OFF;

    if (ngx_open_cached_file(lscf->open_f...",419.0,472.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,ssize_t
6477,443199,ngx_stream_log_flush,1,ngx_stream_log_flush,"void ngx_stream_log_flush (ngx_open_file_t*,ngx_log_t*)",stream\ngx_stream_log_module.c,"static void
ngx_stream_log_flush(ngx_open_file_t *file, ngx_log_t *log)
{
    size_t                 len;
    ssize_t                n;
    ngx_stream_log_buf_t  *buffer;

    buffer = file->data;

    len = buffer->pos - buffer->start;

    if (len == 0) {
        return;
    }

#if (NGX_ZLIB)
    if (buffer->gzip) {
        n = ngx_stream_log_gzip(file->fd, buffer->start, len, buffer->gzip,
                                log);
    } else {
        n = ngx_write_fd(file->fd, buffer->start, len);
    }
#else
    n = ngx_write_fd(file->fd, buffer->start, len);
#endif

    if (n == -1) {
        ngx_log_error(NGX_LOG_ALERT, log, ngx_errno,
                      ngx_write_fd_n "" to \""%s\"" failed"",
                      file->name.data);

    } else if ((size_t) n != len) {
        ngx_log_error(NGX_LOG_ALERT, log, 0,
                      ngx_write_fd_n "" to \""%s\"" was incomplete: %z of %uz"",
                      file->name.data, n, len);
    }

    buffer->pos = buffer->start;

    ...",610.0,652.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6478,443205,ngx_stream_log_flush_handler,1,ngx_stream_log_flush_handler,void ngx_stream_log_flush_handler (ngx_event_t*),stream\ngx_stream_log_module.c,"static void
ngx_stream_log_flush_handler(ngx_event_t *ev)
{
    ngx_log_debug0(NGX_LOG_DEBUG_EVENT, ev->log, 0,
                   ""stream log buffer flush handler"");

    ngx_stream_log_flush(ev->data, ev->log);
}",655.0,662.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6479,443210,ngx_stream_log_variable_compile,1,ngx_stream_log_variable_compile,"ngx_int_t ngx_stream_log_variable_compile (ngx_conf_t*,ngx_stream_log_op_t*,ngx_str_t*,ngx_uint_t)",stream\ngx_stream_log_module.c,"static ngx_int_t
ngx_stream_log_variable_compile(ngx_conf_t *cf, ngx_stream_log_op_t *op,
    ngx_str_t *value, ngx_uint_t escape)
{
    ngx_int_t  index;

    index = ngx_stream_get_variable_index(cf, value);
    if (index == NGX_ERROR) {
        return NGX_ERROR;
    }

    op->len = 0;

    switch (escape) {
    case NGX_STREAM_LOG_ESCAPE_JSON:
        op->getlen = ngx_stream_log_json_variable_getlen;
        op->run = ngx_stream_log_json_variable;
        break;

    case NGX_STREAM_LOG_ESCAPE_NONE:
        op->getlen = ngx_stream_log_unescaped_variable_getlen;
        op->run = ngx_stream_log_unescaped_variable;
        break;

    default: /* NGX_STREAM_LOG_ESCAPE_DEFAULT */
        op->getlen = ngx_stream_log_variable_getlen;
        op->run = ngx_stream_log_variable;
    }

    op->data = index;

    return NGX_OK;
}",692.0,724.0,1.0,9.0,33.0,0,0,0,0,0,0,1,1,0,0,,0,0,8,4,4,ngx_int_t
6480,443218,ngx_stream_log_variable_getlen,1,ngx_stream_log_variable_getlen,"size_t ngx_stream_log_variable_getlen (ngx_stream_session_t*,uintptr_t)",stream\ngx_stream_log_module.c,"static size_t
ngx_stream_log_variable_getlen(ngx_stream_session_t *s, uintptr_t data)
{
    uintptr_t                     len;
    ngx_stream_variable_value_t  *value;

    value = ngx_stream_get_indexed_variable(s, data);

    if (value == NULL || value->not_found) {
        return 1;
    }

    len = ngx_stream_log_escape(NULL, value->data, value->len);

    value->escape = len ? 1 : 0;

    return value->len + len * 3;
}",727.0,744.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,size_t
6481,443224,ngx_stream_log_variable,1,ngx_stream_log_variable,"u_char* ngx_stream_log_variable (ngx_stream_session_t*,u_char*,ngx_stream_log_op_t*)",stream\ngx_stream_log_module.c,"static u_char *
ngx_stream_log_variable(ngx_stream_session_t *s, u_char *buf,
    ngx_stream_log_op_t *op)
{
    ngx_stream_variable_value_t  *value;

    value = ngx_stream_get_indexed_variable(s, op->data);

    if (value == NULL || value->not_found) {
        *buf = '-';
        return buf + 1;
    }

    if (value->escape == 0) {
        return ngx_cpymem(buf, value->data, value->len);

    } else {
        return (u_char *) ngx_stream_log_escape(buf, value->data, value->len);
    }
}",747.0,766.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6482,443231,ngx_stream_log_escape,1,ngx_stream_log_escape,"uintptr_t ngx_stream_log_escape (u_char*,u_char*,size_t)",stream\ngx_stream_log_module.c,"static uintptr_t
ngx_stream_log_escape(u_char *dst, u_char *src, size_t size)
{
    ngx_uint_t      n;
    static u_char   hex[] = ""0123456789ABCDEF"";

    static uint32_t   escape[] = {
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */

                    /* ?>=< ;:98 7654 3210  /.-, +*)( '&%$ #""!  */
        0x00000004, /* 0000 0000 0000 0000  0000 0000 0000 0100 */

                    /* _^]\ [ZYX WVUT SRQP  ONML KJIH GFED CBA@ */
        0x10000000, /* 0001 0000 0000 0000  0000 0000 0000 0000 */

                    /*  ~}| {zyx wvut srqp  onml kjih gfed cba` */
        0x80000000, /* 1000 0000 0000 0000  0000 0000 0000 0000 */

        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */
        0xffffffff, /* 1111 1111 1111 1111  1111 1111 1111 1111 */
    };


    if (dst == NULL) {

        /* find the number of the ch...",769.0,826.0,1.0,1.0,58.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,uintptr_t
6483,443238,ngx_stream_log_json_variable_getlen,1,ngx_stream_log_json_variable_getlen,"size_t ngx_stream_log_json_variable_getlen (ngx_stream_session_t*,uintptr_t)",stream\ngx_stream_log_module.c,"static size_t
ngx_stream_log_json_variable_getlen(ngx_stream_session_t *s, uintptr_t data)
{
    uintptr_t                     len;
    ngx_stream_variable_value_t  *value;

    value = ngx_stream_get_indexed_variable(s, data);

    if (value == NULL || value->not_found) {
        return 0;
    }

    len = ngx_escape_json(NULL, value->data, value->len);

    value->escape = len ? 1 : 0;

    return value->len + len;
}",829.0,846.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,size_t
6484,443244,ngx_stream_log_json_variable,1,ngx_stream_log_json_variable,"u_char* ngx_stream_log_json_variable (ngx_stream_session_t*,u_char*,ngx_stream_log_op_t*)",stream\ngx_stream_log_module.c,"static u_char *
ngx_stream_log_json_variable(ngx_stream_session_t *s, u_char *buf,
    ngx_stream_log_op_t *op)
{
    ngx_stream_variable_value_t  *value;

    value = ngx_stream_get_indexed_variable(s, op->data);

    if (value == NULL || value->not_found) {
        return buf;
    }

    if (value->escape == 0) {
        return ngx_cpymem(buf, value->data, value->len);

    } else {
        return (u_char *) ngx_escape_json(buf, value->data, value->len);
    }
}",849.0,867.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6485,443251,ngx_stream_log_unescaped_variable_getlen,1,ngx_stream_log_unescaped_variable_getlen,"size_t ngx_stream_log_unescaped_variable_getlen (ngx_stream_session_t*,uintptr_t)",stream\ngx_stream_log_module.c,"static size_t
ngx_stream_log_unescaped_variable_getlen(ngx_stream_session_t *s,
    uintptr_t data)
{
    ngx_stream_variable_value_t  *value;

    value = ngx_stream_get_indexed_variable(s, data);

    if (value == NULL || value->not_found) {
        return 0;
    }

    value->escape = 0;

    return value->len;
}",870.0,885.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,size_t
6486,443257,ngx_stream_log_unescaped_variable,1,ngx_stream_log_unescaped_variable,"u_char* ngx_stream_log_unescaped_variable (ngx_stream_session_t*,u_char*,ngx_stream_log_op_t*)",stream\ngx_stream_log_module.c,"static u_char *
ngx_stream_log_unescaped_variable(ngx_stream_session_t *s, u_char *buf,
                                  ngx_stream_log_op_t *op)
{
    ngx_stream_variable_value_t  *value;

    value = ngx_stream_get_indexed_variable(s, op->data);

    if (value == NULL || value->not_found) {
        return buf;
    }

    return ngx_cpymem(buf, value->data, value->len);
}",888.0,901.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6487,443264,ngx_stream_log_create_main_conf,1,ngx_stream_log_create_main_conf,void* ngx_stream_log_create_main_conf (ngx_conf_t*),stream\ngx_stream_log_module.c,"static void *
ngx_stream_log_create_main_conf(ngx_conf_t *cf)
{
    ngx_stream_log_main_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_log_main_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&conf->formats, cf->pool, 4,
                       sizeof(ngx_stream_log_fmt_t))
        != NGX_OK)
    {
        return NULL;
    }

    return conf;
}",904.0,922.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6488,443269,ngx_stream_log_create_srv_conf,1,ngx_stream_log_create_srv_conf,void* ngx_stream_log_create_srv_conf (ngx_conf_t*),stream\ngx_stream_log_module.c,"static void *
ngx_stream_log_create_srv_conf(ngx_conf_t *cf)
{
    ngx_stream_log_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_log_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->open_file_cache = NGX_CONF_UNSET_PTR;

    return conf;
}",925.0,938.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6489,443274,ngx_stream_log_merge_srv_conf,1,ngx_stream_log_merge_srv_conf,"char* ngx_stream_log_merge_srv_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream_log_module.c,"static char *
ngx_stream_log_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_stream_log_srv_conf_t *prev = parent;
    ngx_stream_log_srv_conf_t *conf = child;

    if (conf->open_file_cache == NGX_CONF_UNSET_PTR) {

        conf->open_file_cache = prev->open_file_cache;
        conf->open_file_cache_valid = prev->open_file_cache_valid;
        conf->open_file_cache_min_uses = prev->open_file_cache_min_uses;

        if (conf->open_file_cache == NGX_CONF_UNSET_PTR) {
            conf->open_file_cache = NULL;
        }
    }

    if (conf->logs || conf->off) {
        return NGX_CONF_OK;
    }

    conf->logs = prev->logs;
    conf->off = prev->off;

    return NGX_CONF_OK;
}",941.0,966.0,1.0,1.0,26.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6490,443281,ngx_stream_log_set_log,1,ngx_stream_log_set_log,"char* ngx_stream_log_set_log (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_log_module.c,"static char *
ngx_stream_log_set_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_log_srv_conf_t *lscf = conf;

    ssize_t                              size;
    ngx_int_t                            gzip;
    ngx_uint_t                           i, n;
    ngx_msec_t                           flush;
    ngx_str_t                           *value, name, s;
    ngx_stream_log_t                    *log;
    ngx_syslog_peer_t                   *peer;
    ngx_stream_log_buf_t                *buffer;
    ngx_stream_log_fmt_t                *fmt;
    ngx_stream_script_compile_t          sc;
    ngx_stream_log_main_conf_t          *lmcf;
    ngx_stream_compile_complex_value_t   ccv;

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""off"") == 0) {
        lscf->off = 1;
        if (cf->args->nelts == 2) {
            return NGX_CONF_OK;
        }

        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid parameter \""%V\"""", &value[2...",969.0,1262.0,1.0,1.0,294.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6491,443288,ngx_stream_log_set_format,1,ngx_stream_log_set_format,"char* ngx_stream_log_set_format (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_log_module.c,"static char *
ngx_stream_log_set_format(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_log_main_conf_t *lmcf = conf;

    ngx_str_t             *value;
    ngx_uint_t             i;
    ngx_stream_log_fmt_t  *fmt;

    value = cf->args->elts;

    fmt = lmcf->formats.elts;
    for (i = 0; i < lmcf->formats.nelts; i++) {
        if (fmt[i].name.len == value[1].len
            && ngx_strcmp(fmt[i].name.data, value[1].data) == 0)
        {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""duplicate \""log_format\"" name \""%V\"""",
                               &value[1]);
            return NGX_CONF_ERROR;
        }
    }

    fmt = ngx_array_push(&lmcf->formats);
    if (fmt == NULL) {
        return NGX_CONF_ERROR;
    }

    fmt->name = value[1];

    fmt->flushes = ngx_array_create(cf->pool, 4, sizeof(ngx_int_t));
    if (fmt->flushes == NULL) {
        return NGX_CONF_ERROR;
    }

    fmt->ops = ngx_array_create(cf->pool, 16, size...",1265.0,1307.0,1.0,1.0,43.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6492,443295,ngx_stream_log_compile_format,1,ngx_stream_log_compile_format,"char* ngx_stream_log_compile_format (ngx_conf_t*,ngx_array_t*,ngx_array_t*,ngx_array_t*,ngx_uint_t)",stream\ngx_stream_log_module.c,"static char *
ngx_stream_log_compile_format(ngx_conf_t *cf, ngx_array_t *flushes,
    ngx_array_t *ops, ngx_array_t *args, ngx_uint_t s)
{
    u_char                *data, *p, ch;
    size_t                 i, len;
    ngx_str_t             *value, var;
    ngx_int_t             *flush;
    ngx_uint_t             bracket, escape;
    ngx_stream_log_op_t   *op;

    escape = NGX_STREAM_LOG_ESCAPE_DEFAULT;
    value = args->elts;

    if (s < args->nelts && ngx_strncmp(value[s].data, ""escape="", 7) == 0) {
        data = value[s].data + 7;

        if (ngx_strcmp(data, ""json"") == 0) {
            escape = NGX_STREAM_LOG_ESCAPE_JSON;

        } else if (ngx_strcmp(data, ""none"") == 0) {
            escape = NGX_STREAM_LOG_ESCAPE_NONE;

        } else if (ngx_strcmp(data, ""default"") != 0) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""unknown log format escaping \""%s\"""", data);
            return NGX_CONF_ERROR;
        }

        s++;
    }

    fo...",1310.0,1469.0,1.0,13.0,160.0,0,0,0,0,0,0,1,1,0,0,,0,0,10,5,5,char*
6493,443304,ngx_stream_log_open_file_cache,1,ngx_stream_log_open_file_cache,"char* ngx_stream_log_open_file_cache (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_log_module.c,"static char *
ngx_stream_log_open_file_cache(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_log_srv_conf_t *lscf = conf;

    time_t       inactive, valid;
    ngx_str_t   *value, s;
    ngx_int_t    max, min_uses;
    ngx_uint_t   i;

    if (lscf->open_file_cache != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    max = 0;
    inactive = 10;
    valid = 60;
    min_uses = 1;

    for (i = 1; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""max="", 4) == 0) {

            max = ngx_atoi(value[i].data + 4, value[i].len - 4);
            if (max == NGX_ERROR) {
                goto failed;
            }

            continue;
        }

        if (ngx_strncmp(value[i].data, ""inactive="", 9) == 0) {

            s.len = value[i].len - 9;
            s.data = value[i].data + 9;

            inactive = ngx_parse_time(&s, 1);
            if (inactive == (time_t) NGX_ERROR) {
                goto failed;
    ...",1472.0,1577.0,1.0,1.0,106.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6494,443311,ngx_stream_log_init,1,ngx_stream_log_init,ngx_int_t ngx_stream_log_init (ngx_conf_t*),stream\ngx_stream_log_module.c,"static ngx_int_t
ngx_stream_log_init(ngx_conf_t *cf)
{
    ngx_stream_handler_pt        *h;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_STREAM_LOG_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_stream_log_handler;

    return NGX_OK;
}",1580.0,1596.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6495,443382,ngx_stream_log_handler,1,ngx_stream_log_handler,ngx_int_t ngx_stream_log_handler (ngx_stream_session_t*),stream\ngx_stream_log_module.c,"static ngx_int_t
ngx_stream_log_handler(ngx_stream_session_t *s)
{
    u_char                     *line, *p;
    size_t                      len, size;
    ssize_t                     n;
    ngx_str_t                   val;
    ngx_uint_t                  i, l;
    ngx_stream_log_t           *log;
    ngx_stream_log_op_t        *op;
    ngx_stream_log_buf_t       *buffer;
    ngx_stream_log_srv_conf_t  *lscf;

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""stream log handler"");

    lscf = ngx_stream_get_module_srv_conf(s, ngx_stream_log_module);

    if (lscf->off || lscf->logs == NULL) {
        return NGX_OK;
    }

    log = lscf->logs->elts;
    for (l = 0; l < lscf->logs->nelts; l++) {

        if (log[l].filter) {
            if (ngx_stream_complex_value(s, log[l].filter, &val) != NGX_OK) {
                return NGX_ERROR;
            }

            if (val.len == 0 || (val.len == 1 && val.data[0] == '0')) {
                continue;
    ...",200.0,350.0,1.0,1.0,151.0,155,17,145,21,0,34,26,50,15,8,,0,30,2,1,1,ngx_int_t
6496,444272,ngx_stream_log_copy_short,1,ngx_stream_log_copy_short,"u_char ngx_stream_log_copy_short (ngx_stream_session_t*,u_char*,ngx_stream_log_op_t*)",stream\ngx_stream_log_module.c,"static u_char *
ngx_stream_log_copy_short(ngx_stream_session_t *s, u_char *buf,
    ngx_stream_log_op_t *op)
{
    size_t     len;
    uintptr_t  data;

    len = op->len;
    data = op->data;

    while (len--) {
        *buf++ = (u_char) (data & 0xff);
        data >>= 8;
    }

    return buf;
}",665.0,681.0,1.0,1.0,17.0,9,6,9,4,0,0,2,2,0,0,,0,0,6,3,3,u_char
6497,444308,ngx_stream_log_copy_long,1,ngx_stream_log_copy_long,"u_char ngx_stream_log_copy_long (ngx_stream_session_t*,u_char*,ngx_stream_log_op_t*)",stream\ngx_stream_log_module.c,"static u_char *
ngx_stream_log_copy_long(ngx_stream_session_t *s, u_char *buf,
    ngx_stream_log_op_t *op)
{
    return ngx_cpymem(buf, (u_char *) op->data, op->len);
}",684.0,689.0,1.0,1.0,6.0,3,2,3,2,0,0,1,1,0,0,,0,0,6,3,3,u_char
6498,446862,ngx_stream_map_create_conf,1,ngx_stream_map_create_conf,void* ngx_stream_map_create_conf (ngx_conf_t*),stream\ngx_stream_map_module.c,"static void *
ngx_stream_map_create_conf(ngx_conf_t *cf)
{
    ngx_stream_map_conf_t  *mcf;

    mcf = ngx_palloc(cf->pool, sizeof(ngx_stream_map_conf_t));
    if (mcf == NULL) {
        return NULL;
    }

    mcf->hash_max_size = NGX_CONF_UNSET_UINT;
    mcf->hash_bucket_size = NGX_CONF_UNSET_UINT;

    return mcf;
}",156.0,170.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6499,446867,ngx_stream_map_block,1,ngx_stream_map_block,"char* ngx_stream_map_block (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_map_module.c,"static char *
ngx_stream_map_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_map_conf_t  *mcf = conf;

    char                                *rv;
    ngx_str_t                           *value, name;
    ngx_conf_t                           save;
    ngx_pool_t                          *pool;
    ngx_hash_init_t                      hash;
    ngx_stream_map_ctx_t                *map;
    ngx_stream_variable_t               *var;
    ngx_stream_map_conf_ctx_t            ctx;
    ngx_stream_compile_complex_value_t   ccv;

    if (mcf->hash_max_size == NGX_CONF_UNSET_UINT) {
        mcf->hash_max_size = 2048;
    }

    if (mcf->hash_bucket_size == NGX_CONF_UNSET_UINT) {
        mcf->hash_bucket_size = ngx_cacheline_size;

    } else {
        mcf->hash_bucket_size = ngx_align(mcf->hash_bucket_size,
                                          ngx_cacheline_size);
    }

    map = ngx_pcalloc(cf->pool, sizeof(ngx_stream_map_ctx_t));
    if (map == NULL) {
        ...",173.0,364.0,1.0,1.0,192.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6500,446874,ngx_stream_map,1,ngx_stream_map,"char* ngx_stream_map (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_map_module.c,"static char *
ngx_stream_map(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
{
    u_char                              *data;
    size_t                               len;
    ngx_int_t                            rv;
    ngx_str_t                           *value, v;
    ngx_uint_t                           i, key;
    ngx_stream_map_conf_ctx_t           *ctx;
    ngx_stream_complex_value_t           cv, *cvp;
    ngx_stream_variable_value_t         *var, **vp;
    ngx_stream_compile_complex_value_t   ccv;

    ctx = cf->ctx;

    value = cf->args->elts;

    if (cf->args->nelts == 1
        && ngx_strcmp(value[0].data, ""hostnames"") == 0)
    {
        ctx->hostnames = 1;
        return NGX_CONF_OK;
    }

    if (cf->args->nelts == 1
        && ngx_strcmp(value[0].data, ""volatile"") == 0)
    {
        ctx->no_cacheable = 1;
        return NGX_CONF_OK;
    }

    if (cf->args->nelts != 2) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid number...",379.0,588.0,1.0,1.0,210.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6501,446949,ngx_stream_map_variable,1,ngx_stream_map_variable,"ngx_int_t ngx_stream_map_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_map_module.c,"static ngx_int_t
ngx_stream_map_variable(ngx_stream_session_t *s, ngx_stream_variable_value_t *v,
    uintptr_t data)
{
    ngx_stream_map_ctx_t  *map = (ngx_stream_map_ctx_t *) data;

    ngx_str_t                     val, str;
    ngx_stream_complex_value_t   *cv;
    ngx_stream_variable_value_t  *value;

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""stream map started"");

    if (ngx_stream_complex_value(s, &map->value, &val) != NGX_OK) {
        return NGX_ERROR;
    }

    if (map->hostnames && val.len > 0 && val.data[val.len - 1] == '.') {
        val.len--;
    }

    value = ngx_stream_map_find(s, &map->map, &val);

    if (value == NULL) {
        value = map->default_value;
    }

    if (!value->valid) {
        cv = (ngx_stream_complex_value_t *) value->data;

        if (ngx_stream_complex_value(s, cv, &str) != NGX_OK) {
            return NGX_ERROR;
        }

        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found ...",105.0,153.0,1.0,1.0,49.0,49,13,42,12,0,13,6,7,7,3,,0,13,6,3,3,ngx_int_t
6502,447718,ngx_stream_map_cmp_dns_wildcards,1,ngx_stream_map_cmp_dns_wildcards,"ANY ngx_stream_map_cmp_dns_wildcards (void*,void*)",stream\ngx_stream_map_module.c,"ngx_stream_map_cmp_dns_wildcards(const void *one, const void *two)
{
    ngx_hash_key_t  *first, *second;

    first = (ngx_hash_key_t *) one;
    second = (ngx_hash_key_t *) two;

    return ngx_dns_strcmp(first->key.data, second->key.data);
}",368.0,376.0,1.0,1.0,9.0,8,4,6,4,0,3,1,1,0,1,,0,2,4,2,2,ANY
6503,448365,ngx_stream_proxy_handler,1,ngx_stream_proxy_handler,void ngx_stream_proxy_handler (ngx_stream_session_t*),stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_handler(ngx_stream_session_t *s)
{
    u_char                           *p;
    ngx_str_t                        *host;
    ngx_uint_t                        i;
    ngx_connection_t                 *c;
    ngx_resolver_ctx_t               *ctx, temp;
    ngx_stream_upstream_t            *u;
    ngx_stream_core_srv_conf_t       *cscf;
    ngx_stream_proxy_srv_conf_t      *pscf;
    ngx_stream_upstream_srv_conf_t   *uscf, **uscfp;
    ngx_stream_upstream_main_conf_t  *umcf;

    c = s->connection;

    pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, c->log, 0,
                   ""proxy connection handler"");

    u = ngx_pcalloc(c->pool, sizeof(ngx_stream_upstream_t));
    if (u == NULL) {
        ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    s->upstream = u;

    s->log_handler = ngx_stream_proxy_log_error;

    u->requests = 1;

    u->peer.log = c->l...",382.0,582.0,1.0,1.0,201.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6504,448370,ngx_stream_proxy_eval,1,ngx_stream_proxy_eval,"ngx_int_t ngx_stream_proxy_eval (ngx_stream_session_t*,ngx_stream_proxy_srv_conf_t*)",stream\ngx_stream_proxy_module.c,"static ngx_int_t
ngx_stream_proxy_eval(ngx_stream_session_t *s,
    ngx_stream_proxy_srv_conf_t *pscf)
{
    ngx_str_t               host;
    ngx_url_t               url;
    ngx_stream_upstream_t  *u;

    if (ngx_stream_complex_value(s, pscf->upstream_value, &host) != NGX_OK) {
        return NGX_ERROR;
    }

    ngx_memzero(&url, sizeof(ngx_url_t));

    url.url = host;
    url.no_resolve = 1;

    if (ngx_parse_url(s->connection->pool, &url) != NGX_OK) {
        if (url.err) {
            ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                          ""%s in upstream \""%V\"""", url.err, &url.url);
        }

        return NGX_ERROR;
    }

    u = s->upstream;

    u->resolved = ngx_pcalloc(s->connection->pool,
                              sizeof(ngx_stream_upstream_resolved_t));
    if (u->resolved == NULL) {
        return NGX_ERROR;
    }

    if (url.addrs) {
        u->resolved->sockaddr = url.addrs[0].sockaddr;
        u->resolved->socklen = url.addrs[0].sock...",585.0,631.0,1.0,1.0,47.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6505,448376,ngx_stream_proxy_set_local,1,ngx_stream_proxy_set_local,"ngx_int_t ngx_stream_proxy_set_local (ngx_stream_session_t*,ngx_stream_upstream_t*,ngx_stream_upstream_local_t*)",stream\ngx_stream_proxy_module.c,"static ngx_int_t
ngx_stream_proxy_set_local(ngx_stream_session_t *s, ngx_stream_upstream_t *u,
    ngx_stream_upstream_local_t *local)
{
    ngx_int_t    rc;
    ngx_str_t    val;
    ngx_addr_t  *addr;

    if (local == NULL) {
        u->peer.local = NULL;
        return NGX_OK;
    }

#if (NGX_HAVE_TRANSPARENT_PROXY)
    u->peer.transparent = local->transparent;
#endif

    if (local->value == NULL) {
        u->peer.local = local->addr;
        return NGX_OK;
    }

    if (ngx_stream_complex_value(s, local->value, &val) != NGX_OK) {
        return NGX_ERROR;
    }

    if (val.len == 0) {
        return NGX_OK;
    }

    addr = ngx_palloc(s->connection->pool, sizeof(ngx_addr_t));
    if (addr == NULL) {
        return NGX_ERROR;
    }

    rc = ngx_parse_addr_port(s->connection->pool, addr, val.data, val.len);
    if (rc == NGX_ERROR) {
        return NGX_ERROR;
    }

    if (rc != NGX_OK) {
        ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                      ""inva...",634.0,684.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6506,448383,ngx_stream_proxy_connect,1,ngx_stream_proxy_connect,void ngx_stream_proxy_connect (ngx_stream_session_t*),stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_connect(ngx_stream_session_t *s)
{
    ngx_int_t                     rc;
    ngx_connection_t             *c, *pc;
    ngx_stream_upstream_t        *u;
    ngx_stream_proxy_srv_conf_t  *pscf;

    c = s->connection;

    c->log->action = ""connecting to upstream"";

    pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);

    u = s->upstream;

    u->connected = 0;
    u->proxy_protocol = pscf->proxy_protocol;

    if (u->state) {
        u->state->response_time = ngx_current_msec - u->start_time;
    }

    u->state = ngx_array_push(s->upstream_states);
    if (u->state == NULL) {
        ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    ngx_memzero(u->state, sizeof(ngx_stream_upstream_state_t));

    u->start_time = ngx_current_msec;

    u->state->connect_time = (ngx_msec_t) -1;
    u->state->first_byte_time = (ngx_msec_t) -1;
    u->state->response_time = (ngx_msec_t) -1;

    rc = ngx_event_conne...",687.0,765.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6507,448388,ngx_stream_proxy_init_upstream,1,ngx_stream_proxy_init_upstream,void ngx_stream_proxy_init_upstream (ngx_stream_session_t*),stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_init_upstream(ngx_stream_session_t *s)
{
    u_char                       *p;
    ngx_chain_t                  *cl;
    ngx_connection_t             *c, *pc;
    ngx_log_handler_pt            handler;
    ngx_stream_upstream_t        *u;
    ngx_stream_core_srv_conf_t   *cscf;
    ngx_stream_proxy_srv_conf_t  *pscf;

    u = s->upstream;
    pc = u->peer.connection;

    cscf = ngx_stream_get_module_srv_conf(s, ngx_stream_core_module);

    if (pc->type == SOCK_STREAM
        && cscf->tcp_nodelay
        && ngx_tcp_nodelay(pc) != NGX_OK)
    {
        ngx_stream_proxy_next_upstream(s);
        return;
    }

    pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);

#if (NGX_STREAM_SSL)

    if (pc->type == SOCK_STREAM && pscf->ssl) {

        if (u->proxy_protocol) {
            if (ngx_stream_proxy_send_proxy_protocol(s) != NGX_OK) {
                return;
            }

            u->proxy_protocol = 0;
        }

        if (pc->ssl ==...",768.0,926.0,1.0,1.0,159.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6508,448393,ngx_stream_proxy_resolve_handler,1,ngx_stream_proxy_resolve_handler,void ngx_stream_proxy_resolve_handler (ngx_resolver_ctx_t*),stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_resolve_handler(ngx_resolver_ctx_t *ctx)
{
    ngx_stream_session_t            *s;
    ngx_stream_upstream_t           *u;
    ngx_stream_proxy_srv_conf_t     *pscf;
    ngx_stream_upstream_resolved_t  *ur;

    s = ctx->data;

    u = s->upstream;
    ur = u->resolved;

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""stream upstream resolve"");

    if (ctx->state) {
        ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                      ""%V could not be resolved (%i: %s)"",
                      &ctx->name, ctx->state,
                      ngx_resolver_strerror(ctx->state));

        ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    ur->naddrs = ctx->naddrs;
    ur->addrs = ctx->addrs;

#if (NGX_DEBUG)
    {
    u_char      text[NGX_SOCKADDR_STRLEN];
    ngx_str_t   addr;
    ngx_uint_t  i;

    addr.data = text;

    for (i = 0; i < ctx->naddrs; i++) {
        addr.len...",1314.0,1380.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6509,448398,ngx_stream_proxy_upstream_handler,1,ngx_stream_proxy_upstream_handler,void ngx_stream_proxy_upstream_handler (ngx_event_t*),stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_upstream_handler(ngx_event_t *ev)
{
    ngx_stream_proxy_process_connection(ev, !ev->write);
}",1383.0,1387.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6510,448403,ngx_stream_proxy_downstream_handler,1,ngx_stream_proxy_downstream_handler,void ngx_stream_proxy_downstream_handler (ngx_event_t*),stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_downstream_handler(ngx_event_t *ev)
{
    ngx_stream_proxy_process_connection(ev, ev->write);
}",1307.0,1311.0,1.0,1.0,5.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6511,448408,ngx_stream_proxy_process_connection,1,ngx_stream_proxy_process_connection,"void ngx_stream_proxy_process_connection (ngx_event_t*,ngx_uint_t)",stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_process_connection(ngx_event_t *ev, ngx_uint_t from_upstream)
{
    ngx_connection_t             *c, *pc;
    ngx_log_handler_pt            handler;
    ngx_stream_session_t         *s;
    ngx_stream_upstream_t        *u;
    ngx_stream_proxy_srv_conf_t  *pscf;

    c = ev->data;
    s = c->data;
    u = s->upstream;

    if (c->close) {
        ngx_log_error(NGX_LOG_INFO, c->log, 0, ""shutdown timeout"");
        ngx_stream_proxy_finalize(s, NGX_STREAM_OK);
        return;
    }

    c = s->connection;
    pc = u->peer.connection;

    pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);

    if (ev->timedout) {
        ev->timedout = 0;

        if (ev->delayed) {
            ev->delayed = 0;

            if (!ev->ready) {
                if (ngx_handle_read_event(ev, 0) != NGX_OK) {
                    ngx_stream_proxy_finalize(s,
                                              NGX_STREAM_INTERNAL_SERVER_ERROR);
                    return;
...",1390.0,1497.0,1.0,1.0,108.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6512,448414,ngx_stream_proxy_connect_handler,1,ngx_stream_proxy_connect_handler,void ngx_stream_proxy_connect_handler (ngx_event_t*),stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_connect_handler(ngx_event_t *ev)
{
    ngx_connection_t      *c;
    ngx_stream_session_t  *s;

    c = ev->data;
    s = c->data;

    if (ev->timedout) {
        ngx_log_error(NGX_LOG_ERR, c->log, NGX_ETIMEDOUT, ""upstream timed out"");
        ngx_stream_proxy_next_upstream(s);
        return;
    }

    ngx_del_timer(c->write);

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, c->log, 0,
                   ""stream proxy connect upstream"");

    if (ngx_stream_proxy_test_connect(c) != NGX_OK) {
        ngx_stream_proxy_next_upstream(s);
        return;
    }

    ngx_stream_proxy_init_upstream(s);
}",1500.0,1526.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6513,448419,ngx_stream_proxy_test_connect,1,ngx_stream_proxy_test_connect,ngx_int_t ngx_stream_proxy_test_connect (ngx_connection_t*),stream\ngx_stream_proxy_module.c,"static ngx_int_t
ngx_stream_proxy_test_connect(ngx_connection_t *c)
{
    int        err;
    socklen_t  len;

#if (NGX_HAVE_KQUEUE)

    if (ngx_event_flags & NGX_USE_KQUEUE_EVENT)  {
        err = c->write->kq_errno ? c->write->kq_errno : c->read->kq_errno;

        if (err) {
            (void) ngx_connection_error(c, err,
                                    ""kevent() reported that connect() failed"");
            return NGX_ERROR;
        }

    } else
#endif
    {
        err = 0;
        len = sizeof(int);

        /*
         * BSDs and Linux return 0 and set a pending error in err
         * Solaris returns -1 and sets errno
         */

        if (getsockopt(c->fd, SOL_SOCKET, SO_ERROR, (void *) &err, &len)
            == -1)
        {
            err = ngx_socket_errno;
        }

        if (err) {
            (void) ngx_connection_error(c, err, ""connect() failed"");
            return NGX_ERROR;
        }
    }

    return NGX_OK;
}",1529.0,1570.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6514,448424,ngx_stream_proxy_process,1,ngx_stream_proxy_process,"void ngx_stream_proxy_process (ngx_stream_session_t*,ngx_uint_t,ngx_uint_t)",stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_process(ngx_stream_session_t *s, ngx_uint_t from_upstream,
    ngx_uint_t do_write)
{
    char                         *recv_action, *send_action;
    off_t                        *received, limit;
    size_t                        size, limit_rate;
    ssize_t                       n;
    ngx_buf_t                    *b;
    ngx_int_t                     rc;
    ngx_uint_t                    flags, *packets;
    ngx_msec_t                    delay;
    ngx_chain_t                  *cl, **ll, **out, **busy;
    ngx_connection_t             *c, *pc, *src, *dst;
    ngx_log_handler_pt            handler;
    ngx_stream_upstream_t        *u;
    ngx_stream_proxy_srv_conf_t  *pscf;

    u = s->upstream;

    c = s->connection;
    pc = u->connected ? u->peer.connection : NULL;

    if (c->type == SOCK_DGRAM && (ngx_terminate || ngx_exiting)) {

        /* socket is already closed on worker shutdown */

        handler = c->log->handler;
        c->log->handl...",1573.0,1770.0,1.0,1.0,198.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
6515,448431,ngx_stream_proxy_test_finalize,1,ngx_stream_proxy_test_finalize,"ngx_int_t ngx_stream_proxy_test_finalize (ngx_stream_session_t*,ngx_uint_t)",stream\ngx_stream_proxy_module.c,"static ngx_int_t
ngx_stream_proxy_test_finalize(ngx_stream_session_t *s,
    ngx_uint_t from_upstream)
{
    ngx_connection_t             *c, *pc;
    ngx_log_handler_pt            handler;
    ngx_stream_upstream_t        *u;
    ngx_stream_proxy_srv_conf_t  *pscf;

    pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);

    c = s->connection;
    u = s->upstream;
    pc = u->connected ? u->peer.connection : NULL;

    if (c->type == SOCK_DGRAM) {

        if (pscf->requests && u->requests < pscf->requests) {
            return NGX_DECLINED;
        }

        if (pscf->requests) {
            ngx_delete_udp_connection(c);
        }

        if (pscf->responses == NGX_MAX_INT32_VALUE
            || u->responses < pscf->responses * u->requests)
        {
            return NGX_DECLINED;
        }

        if (pc == NULL || c->buffered || pc->buffered) {
            return NGX_DECLINED;
        }

        handler = c->log->handler;
        c->log->handler = NULL;

   ...",1773.0,1851.0,1.0,1.0,79.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6516,448437,ngx_stream_proxy_next_upstream,1,ngx_stream_proxy_next_upstream,void ngx_stream_proxy_next_upstream (ngx_stream_session_t*),stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_next_upstream(ngx_stream_session_t *s)
{
    ngx_msec_t                    timeout;
    ngx_connection_t             *pc;
    ngx_stream_upstream_t        *u;
    ngx_stream_proxy_srv_conf_t  *pscf;

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""stream proxy next upstream"");

    u = s->upstream;
    pc = u->peer.connection;

    if (pc && pc->buffered) {
        ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                      ""buffered data on next upstream"");
        ngx_stream_proxy_finalize(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    if (s->connection->type == SOCK_DGRAM) {
        u->upstream_out = NULL;
    }

    if (u->peer.sockaddr) {
        u->peer.free(&u->peer, u->peer.data, NGX_PEER_FAILED);
        u->peer.sockaddr = NULL;
    }

    pscf = ngx_stream_get_module_srv_conf(s, ngx_stream_proxy_module);

    timeout = pscf->next_upstream_timeout;

    if (u->peer.tries == 0
    ...",1854.0,1917.0,1.0,1.0,64.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6517,448442,ngx_stream_proxy_finalize,1,ngx_stream_proxy_finalize,"void ngx_stream_proxy_finalize (ngx_stream_session_t*,ngx_uint_t)",stream\ngx_stream_proxy_module.c,"static void
ngx_stream_proxy_finalize(ngx_stream_session_t *s, ngx_uint_t rc)
{
    ngx_uint_t              state;
    ngx_connection_t       *pc;
    ngx_stream_upstream_t  *u;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""finalize stream proxy: %i"", rc);

    u = s->upstream;

    if (u == NULL) {
        goto noupstream;
    }

    if (u->resolved && u->resolved->ctx) {
        ngx_resolve_name_done(u->resolved->ctx);
        u->resolved->ctx = NULL;
    }

    pc = u->peer.connection;

    if (u->state) {
        if (u->state->response_time == (ngx_msec_t) -1) {
            u->state->response_time = ngx_current_msec - u->start_time;
        }

        if (pc) {
            u->state->bytes_received = u->received;
            u->state->bytes_sent = pc->sent;
        }
    }

    if (u->peer.free && u->peer.sockaddr) {
        state = 0;

        if (pc && pc->type == SOCK_DGRAM
            && (pc->read->error || pc->write->error))
        {
 ...",1920.0,1985.0,1.0,1.0,66.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,void
6518,448448,ngx_stream_proxy_log_error,1,ngx_stream_proxy_log_error,"u_char* ngx_stream_proxy_log_error (ngx_log_t*,u_char*,size_t)",stream\ngx_stream_proxy_module.c,"static u_char *
ngx_stream_proxy_log_error(ngx_log_t *log, u_char *buf, size_t len)
{
    u_char                 *p;
    ngx_connection_t       *pc;
    ngx_stream_session_t   *s;
    ngx_stream_upstream_t  *u;

    s = log->data;

    u = s->upstream;

    p = buf;

    if (u->peer.name) {
        p = ngx_snprintf(p, len, "", upstream: \""%V\"""", u->peer.name);
        len -= p - buf;
    }

    pc = u->peer.connection;

    p = ngx_snprintf(p, len,
                     "", bytes from/to client:%O/%O""
                     "", bytes from/to upstream:%O/%O"",
                     s->received, s->connection->sent,
                     u->received, pc ? pc->sent : 0);

    return p;
}",1988.0,2016.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,u_char
6519,448455,ngx_stream_proxy_create_srv_conf,1,ngx_stream_proxy_create_srv_conf,void* ngx_stream_proxy_create_srv_conf (ngx_conf_t*),stream\ngx_stream_proxy_module.c,"static void *
ngx_stream_proxy_create_srv_conf(ngx_conf_t *cf)
{
    ngx_stream_proxy_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_proxy_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->ssl_protocols = 0;
     *     conf->ssl_ciphers = { 0, NULL };
     *     conf->ssl_trusted_certificate = { 0, NULL };
     *     conf->ssl_crl = { 0, NULL };
     *
     *     conf->ssl = NULL;
     *     conf->upstream = NULL;
     *     conf->upstream_value = NULL;
     */

    conf->connect_timeout = NGX_CONF_UNSET_MSEC;
    conf->timeout = NGX_CONF_UNSET_MSEC;
    conf->next_upstream_timeout = NGX_CONF_UNSET_MSEC;
    conf->buffer_size = NGX_CONF_UNSET_SIZE;
    conf->upload_rate = NGX_CONF_UNSET_PTR;
    conf->download_rate = NGX_CONF_UNSET_PTR;
    conf->requests = NGX_CONF_UNSET_UINT;
    conf->responses = NGX_CONF_UNSET_UINT;
    conf->next_upstream_tries = NGX_CONF_UNSET_UINT;
    conf->ne...",2019.0,2070.0,1.0,1.0,52.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6520,448460,ngx_stream_proxy_merge_srv_conf,1,ngx_stream_proxy_merge_srv_conf,"char* ngx_stream_proxy_merge_srv_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream_proxy_module.c,"static char *
ngx_stream_proxy_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_stream_proxy_srv_conf_t *prev = parent;
    ngx_stream_proxy_srv_conf_t *conf = child;

    ngx_conf_merge_msec_value(conf->connect_timeout,
                              prev->connect_timeout, 60000);

    ngx_conf_merge_msec_value(conf->timeout,
                              prev->timeout, 10 * 60000);

    ngx_conf_merge_msec_value(conf->next_upstream_timeout,
                              prev->next_upstream_timeout, 0);

    ngx_conf_merge_size_value(conf->buffer_size,
                              prev->buffer_size, 16384);

    ngx_conf_merge_ptr_value(conf->upload_rate, prev->upload_rate, NULL);

    ngx_conf_merge_ptr_value(conf->download_rate, prev->download_rate, NULL);

    ngx_conf_merge_uint_value(conf->requests,
                              prev->requests, 0);

    ngx_conf_merge_uint_value(conf->responses,
                              prev->responses, NGX_MAX_INT32_VA...",2073.0,2158.0,1.0,1.0,86.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6521,448467,ngx_stream_proxy_pass,1,ngx_stream_proxy_pass,"char* ngx_stream_proxy_pass (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_proxy_module.c,"static char *
ngx_stream_proxy_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_proxy_srv_conf_t *pscf = conf;

    ngx_url_t                            u;
    ngx_str_t                           *value, *url;
    ngx_stream_complex_value_t           cv;
    ngx_stream_core_srv_conf_t          *cscf;
    ngx_stream_compile_complex_value_t   ccv;

    if (pscf->upstream || pscf->upstream_value) {
        return ""is duplicate"";
    }

    cscf = ngx_stream_conf_get_module_srv_conf(cf, ngx_stream_core_module);

    cscf->handler = ngx_stream_proxy_handler;

    value = cf->args->elts;

    url = &value[1];

    ngx_memzero(&ccv, sizeof(ngx_stream_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = url;
    ccv.complex_value = &cv;

    if (ngx_stream_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    if (cv.lengths) {
        pscf->upstream_value = ngx_palloc(cf->pool,
                                          sizeof(ngx_str...",2261.0,2317.0,1.0,1.0,57.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6522,448474,ngx_stream_proxy_bind,1,ngx_stream_proxy_bind,"char* ngx_stream_proxy_bind (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_proxy_module.c,"static char *
ngx_stream_proxy_bind(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_proxy_srv_conf_t *pscf = conf;

    ngx_int_t                            rc;
    ngx_str_t                           *value;
    ngx_stream_complex_value_t           cv;
    ngx_stream_upstream_local_t         *local;
    ngx_stream_compile_complex_value_t   ccv;

    if (pscf->local != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    if (cf->args->nelts == 2 && ngx_strcmp(value[1].data, ""off"") == 0) {
        pscf->local = NULL;
        return NGX_CONF_OK;
    }

    ngx_memzero(&ccv, sizeof(ngx_stream_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &cv;

    if (ngx_stream_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    local = ngx_pcalloc(cf->pool, sizeof(ngx_stream_upstream_local_t));
    if (local == NULL) {
        return NGX_CONF_ERROR;
    }

    pscf...",2320.0,2414.0,1.0,1.0,95.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6523,452939,ngx_stream_realip_handler,1,ngx_stream_realip_handler,ngx_int_t ngx_stream_realip_handler (ngx_stream_session_t*),stream\ngx_stream_realip_module.c,"static ngx_int_t
ngx_stream_realip_handler(ngx_stream_session_t *s)
{
    ngx_addr_t                     addr;
    ngx_connection_t              *c;
    ngx_stream_realip_srv_conf_t  *rscf;

    rscf = ngx_stream_get_module_srv_conf(s, ngx_stream_realip_module);

    if (rscf->from == NULL) {
        return NGX_DECLINED;
    }

    c = s->connection;

    if (c->proxy_protocol == NULL) {
        return NGX_DECLINED;
    }

    if (ngx_cidr_match(c->sockaddr, rscf->from) != NGX_OK) {
        return NGX_DECLINED;
    }

    if (ngx_parse_addr(c->pool, &addr, c->proxy_protocol->src_addr.data,
                       c->proxy_protocol->src_addr.len)
        != NGX_OK)
    {
        return NGX_DECLINED;
    }

    ngx_inet_set_port(addr.sockaddr, c->proxy_protocol->src_port);

    return ngx_stream_realip_set_addr(s, &addr);
}",96.0,129.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6524,452944,ngx_stream_realip_set_addr,1,ngx_stream_realip_set_addr,"ngx_int_t ngx_stream_realip_set_addr (ngx_stream_session_t*,ngx_addr_t*)",stream\ngx_stream_realip_module.c,"static ngx_int_t
ngx_stream_realip_set_addr(ngx_stream_session_t *s, ngx_addr_t *addr)
{
    size_t                    len;
    u_char                   *p;
    u_char                    text[NGX_SOCKADDR_STRLEN];
    ngx_connection_t         *c;
    ngx_stream_realip_ctx_t  *ctx;

    c = s->connection;

    ctx = ngx_palloc(c->pool, sizeof(ngx_stream_realip_ctx_t));
    if (ctx == NULL) {
        return NGX_ERROR;
    }

    len = ngx_sock_ntop(addr->sockaddr, addr->socklen, text,
                        NGX_SOCKADDR_STRLEN, 0);
    if (len == 0) {
        return NGX_ERROR;
    }

    p = ngx_pnalloc(c->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(p, text, len);

    ngx_stream_set_ctx(s, ctx, ngx_stream_realip_module);

    ctx->sockaddr = c->sockaddr;
    ctx->socklen = c->socklen;
    ctx->addr_text = c->addr_text;

    c->sockaddr = addr->sockaddr;
    c->socklen = addr->socklen;
    c->addr_text.len = len;
    c->addr_text.data = p;

    re...",132.0,173.0,1.0,1.0,42.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6525,452950,ngx_stream_realip_from,1,ngx_stream_realip_from,"char* ngx_stream_realip_from (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_realip_module.c,"static char *
ngx_stream_realip_from(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_realip_srv_conf_t *rscf = conf;

    ngx_int_t             rc;
    ngx_str_t            *value;
    ngx_url_t             u;
    ngx_cidr_t            c, *cidr;
    ngx_uint_t            i;
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    value = cf->args->elts;

    if (rscf->from == NULL) {
        rscf->from = ngx_array_create(cf->pool, 2,
                                      sizeof(ngx_cidr_t));
        if (rscf->from == NULL) {
            return NGX_CONF_ERROR;
        }
    }

#if (NGX_HAVE_UNIX_DOMAIN)

    if (ngx_strcmp(value[1].data, ""unix:"") == 0) {
        cidr = ngx_array_push(rscf->from);
        if (cidr == NULL) {
            return NGX_CONF_ERROR;
        }

        cidr->family = AF_UNIX;
        return NGX_CONF_OK;
    }

#endif

    rc = ngx_ptocidr(&value[1], &c);

    if (rc != NGX_ERROR) {
        if (rc == NGX_...",176.0,276.0,1.0,1.0,101.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6526,452957,ngx_stream_realip_create_srv_conf,1,ngx_stream_realip_create_srv_conf,void* ngx_stream_realip_create_srv_conf (ngx_conf_t*),stream\ngx_stream_realip_module.c,"static void *
ngx_stream_realip_create_srv_conf(ngx_conf_t *cf)
{
    ngx_stream_realip_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_realip_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->from = NULL;
     */

    return conf;
}",279.0,296.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6527,452962,ngx_stream_realip_merge_srv_conf,1,ngx_stream_realip_merge_srv_conf,"char* ngx_stream_realip_merge_srv_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream_realip_module.c,"static char *
ngx_stream_realip_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_stream_realip_srv_conf_t *prev = parent;
    ngx_stream_realip_srv_conf_t *conf = child;

    if (conf->from == NULL) {
        conf->from = prev->from;
    }

    return NGX_CONF_OK;
}",299.0,310.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6528,452969,ngx_stream_realip_add_variables,1,ngx_stream_realip_add_variables,ngx_int_t ngx_stream_realip_add_variables (ngx_conf_t*),stream\ngx_stream_realip_module.c,"static ngx_int_t
ngx_stream_realip_add_variables(ngx_conf_t *cf)
{
    ngx_stream_variable_t  *var, *v;

    for (v = ngx_stream_realip_vars; v->name.len; v++) {
        var = ngx_stream_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",313.0,329.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6529,452974,ngx_stream_realip_init,1,ngx_stream_realip_init,ngx_int_t ngx_stream_realip_init (ngx_conf_t*),stream\ngx_stream_realip_module.c,"static ngx_int_t
ngx_stream_realip_init(ngx_conf_t *cf)
{
    ngx_stream_handler_pt        *h;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_STREAM_POST_ACCEPT_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_stream_realip_handler;

    return NGX_OK;
}",332.0,348.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6530,452979,ngx_stream_realip_remote_addr_variable,1,ngx_stream_realip_remote_addr_variable,"ngx_int_t ngx_stream_realip_remote_addr_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_realip_module.c,"static ngx_int_t
ngx_stream_realip_remote_addr_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_str_t                *addr_text;
    ngx_stream_realip_ctx_t  *ctx;

    ctx = ngx_stream_get_module_ctx(s, ngx_stream_realip_module);

    addr_text = ctx ? &ctx->addr_text : &s->connection->addr_text;

    v->len = addr_text->len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = addr_text->data;

    return NGX_OK;
}",351.0,369.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6531,452986,ngx_stream_realip_remote_port_variable,1,ngx_stream_realip_remote_port_variable,"ngx_int_t ngx_stream_realip_remote_port_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_realip_module.c,"static ngx_int_t
ngx_stream_realip_remote_port_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t                port;
    struct sockaddr          *sa;
    ngx_stream_realip_ctx_t  *ctx;

    ctx = ngx_stream_get_module_ctx(s, ngx_stream_realip_module);

    sa = ctx ? ctx->sockaddr : s->connection->sockaddr;

    v->len = 0;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = ngx_pnalloc(s->connection->pool, sizeof(""65535"") - 1);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    port = ngx_inet_get_port(sa);

    if (port > 0 && port < 65536) {
        v->len = ngx_sprintf(v->data, ""%ui"", port) - v->data;
    }

    return NGX_OK;
}",372.0,401.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6532,453829,ngx_stream_return_handler,1,ngx_stream_return_handler,void ngx_stream_return_handler (ngx_stream_session_t*),stream\ngx_stream_return_module.c,"static void
ngx_stream_return_handler(ngx_stream_session_t *s)
{
    ngx_str_t                      text;
    ngx_buf_t                     *b;
    ngx_connection_t              *c;
    ngx_stream_return_ctx_t       *ctx;
    ngx_stream_return_srv_conf_t  *rscf;

    c = s->connection;

    c->log->action = ""returning text"";

    rscf = ngx_stream_get_module_srv_conf(s, ngx_stream_return_module);

    if (ngx_stream_complex_value(s, &rscf->text, &text) != NGX_OK) {
        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, c->log, 0,
                   ""stream return text: \""%V\"""", &text);

    if (text.len == 0) {
        ngx_stream_finalize_session(s, NGX_STREAM_OK);
        return;
    }

    ctx = ngx_pcalloc(c->pool, sizeof(ngx_stream_return_ctx_t));
    if (ctx == NULL) {
        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    ngx_stream_set_ctx(s, ctx, n...",71.0,130.0,1.0,1.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6533,453834,ngx_stream_return_write_handler,1,ngx_stream_return_write_handler,void ngx_stream_return_write_handler (ngx_event_t*),stream\ngx_stream_return_module.c,"static void
ngx_stream_return_write_handler(ngx_event_t *ev)
{
    ngx_connection_t         *c;
    ngx_stream_session_t     *s;
    ngx_stream_return_ctx_t  *ctx;

    c = ev->data;
    s = c->data;

    if (ev->timedout) {
        ngx_connection_error(c, NGX_ETIMEDOUT, ""connection timed out"");
        ngx_stream_finalize_session(s, NGX_STREAM_OK);
        return;
    }

    ctx = ngx_stream_get_module_ctx(s, ngx_stream_return_module);

    if (ngx_stream_top_filter(s, ctx->out, 1) == NGX_ERROR) {
        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    ctx->out = NULL;

    if (!c->buffered) {
        ngx_log_debug0(NGX_LOG_DEBUG_STREAM, c->log, 0,
                       ""stream return done sending"");
        ngx_stream_finalize_session(s, NGX_STREAM_OK);
        return;
    }

    if (ngx_handle_write_event(ev, 0) != NGX_OK) {
        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    ngx_add_ti...",133.0,171.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6534,453839,ngx_stream_return_create_srv_conf,1,ngx_stream_return_create_srv_conf,void* ngx_stream_return_create_srv_conf (ngx_conf_t*),stream\ngx_stream_return_module.c,"static void *
ngx_stream_return_create_srv_conf(ngx_conf_t *cf)
{
    ngx_stream_return_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_return_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    return conf;
}",174.0,185.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6535,453844,ngx_stream_return,1,ngx_stream_return,"char* ngx_stream_return (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_return_module.c,"static char *
ngx_stream_return(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_return_srv_conf_t *rscf = conf;

    ngx_str_t                           *value;
    ngx_stream_core_srv_conf_t          *cscf;
    ngx_stream_compile_complex_value_t   ccv;

    if (rscf->text.value.data) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_stream_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &rscf->text;

    if (ngx_stream_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    cscf = ngx_stream_conf_get_module_srv_conf(cf, ngx_stream_core_module);

    cscf->handler = ngx_stream_return_handler;

    return NGX_CONF_OK;
}",188.0,218.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6536,454263,ngx_stream_script_init_arrays,1,ngx_stream_script_init_arrays,ngx_int_t ngx_stream_script_init_arrays (ngx_stream_script_compile_t*),stream\ngx_stream_script.c,"static ngx_int_t
ngx_stream_script_init_arrays(ngx_stream_script_compile_t *sc)
{
    ngx_uint_t   n;

    if (sc->flushes && *sc->flushes == NULL) {
        n = sc->variables ? sc->variables : 1;
        *sc->flushes = ngx_array_create(sc->cf->pool, n, sizeof(ngx_uint_t));
        if (*sc->flushes == NULL) {
            return NGX_ERROR;
        }
    }

    if (*sc->lengths == NULL) {
        n = sc->variables * (2 * sizeof(ngx_stream_script_copy_code_t)
                             + sizeof(ngx_stream_script_var_code_t))
            + sizeof(uintptr_t);

        *sc->lengths = ngx_array_create(sc->cf->pool, n, 1);
        if (*sc->lengths == NULL) {
            return NGX_ERROR;
        }
    }

    if (*sc->values == NULL) {
        n = (sc->variables * (2 * sizeof(ngx_stream_script_copy_code_t)
                              + sizeof(ngx_stream_script_var_code_t))
                + sizeof(uintptr_t)
                + sc->source->len
                + sizeof(uintptr_t) - 1)
     ...",557.0,598.0,1.0,1.0,42.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6537,454268,ngx_stream_script_done,1,ngx_stream_script_done,ngx_int_t ngx_stream_script_done (ngx_stream_script_compile_t*),stream\ngx_stream_script.c,"static ngx_int_t
ngx_stream_script_done(ngx_stream_script_compile_t *sc)
{
    ngx_str_t    zero;
    uintptr_t   *code;

    if (sc->zero) {

        zero.len = 1;
        zero.data = (u_char *) ""\0"";

        if (ngx_stream_script_add_copy_code(sc, &zero, 0) != NGX_OK) {
            return NGX_ERROR;
        }
    }

    if (sc->conf_prefix || sc->root_prefix) {
        if (ngx_stream_script_add_full_name_code(sc) != NGX_OK) {
            return NGX_ERROR;
        }
    }

    if (sc->complete_lengths) {
        code = ngx_stream_script_add_code(*sc->lengths, sizeof(uintptr_t),
                                          NULL);
        if (code == NULL) {
            return NGX_ERROR;
        }

        *code = (uintptr_t) NULL;
    }

    if (sc->complete_values) {
        code = ngx_stream_script_add_code(*sc->values, sizeof(uintptr_t),
                                          &sc->main);
        if (code == NULL) {
            return NGX_ERROR;
        }

        *code = (uintpt...",601.0,644.0,1.0,1.0,44.0,0,0,0,0,1,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6538,454273,ngx_stream_script_add_copy_code,1,ngx_stream_script_add_copy_code,"ngx_int_t ngx_stream_script_add_copy_code (ngx_stream_script_compile_t*,ngx_str_t*,ngx_uint_t)",stream\ngx_stream_script.c,"static ngx_int_t
ngx_stream_script_add_copy_code(ngx_stream_script_compile_t *sc,
    ngx_str_t *value, ngx_uint_t last)
{
    u_char                         *p;
    size_t                          size, len, zero;
    ngx_stream_script_copy_code_t  *code;

    zero = (sc->zero && last);
    len = value->len + zero;

    code = ngx_stream_script_add_code(*sc->lengths,
                                      sizeof(ngx_stream_script_copy_code_t),
                                      NULL);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = (ngx_stream_script_code_pt) (void *)
                                               ngx_stream_script_copy_len_code;
    code->len = len;

    size = (sizeof(ngx_stream_script_copy_code_t) + len + sizeof(uintptr_t) - 1)
            & ~(sizeof(uintptr_t) - 1);

    code = ngx_stream_script_add_code(*sc->values, size, &sc->main);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = ngx_stream_script_copy_cod...",671.0,713.0,1.0,1.0,43.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6539,454280,ngx_stream_script_add_var_code,1,ngx_stream_script_add_var_code,"ngx_int_t ngx_stream_script_add_var_code (ngx_stream_script_compile_t*,ngx_str_t*)",stream\ngx_stream_script.c,"static ngx_int_t
ngx_stream_script_add_var_code(ngx_stream_script_compile_t *sc, ngx_str_t *name)
{
    ngx_int_t                      index, *p;
    ngx_stream_script_var_code_t  *code;

    index = ngx_stream_get_variable_index(sc->cf, name);

    if (index == NGX_ERROR) {
        return NGX_ERROR;
    }

    if (sc->flushes) {
        p = ngx_array_push(*sc->flushes);
        if (p == NULL) {
            return NGX_ERROR;
        }

        *p = index;
    }

    code = ngx_stream_script_add_code(*sc->lengths,
                                      sizeof(ngx_stream_script_var_code_t),
                                      NULL);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = (ngx_stream_script_code_pt) (void *)
                                           ngx_stream_script_copy_var_len_code;
    code->index = (uintptr_t) index;

    code = ngx_stream_script_add_code(*sc->values,
                                      sizeof(ngx_stream_script_var_code_t),
 ...",752.0,795.0,1.0,1.0,44.0,0,0,0,0,1,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6540,454286,ngx_stream_script_add_full_name_code,1,ngx_stream_script_add_full_name_code,ngx_int_t ngx_stream_script_add_full_name_code (ngx_stream_script_compile_t*),stream\ngx_stream_script.c,"static ngx_int_t
ngx_stream_script_add_full_name_code(ngx_stream_script_compile_t *sc)
{
    ngx_stream_script_full_name_code_t  *code;

    code = ngx_stream_script_add_code(*sc->lengths,
                                    sizeof(ngx_stream_script_full_name_code_t),
                                    NULL);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = (ngx_stream_script_code_pt) (void *)
                                          ngx_stream_script_full_name_len_code;
    code->conf_prefix = sc->conf_prefix;

    code = ngx_stream_script_add_code(*sc->values,
                        sizeof(ngx_stream_script_full_name_code_t), &sc->main);
    if (code == NULL) {
        return NGX_ERROR;
    }

    code->code = ngx_stream_script_full_name_code;
    code->conf_prefix = sc->conf_prefix;

    return NGX_OK;
}",950.0,976.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6541,454291,ngx_stream_script_full_name_len_code,1,ngx_stream_script_full_name_len_code,size_t ngx_stream_script_full_name_len_code (ngx_stream_script_engine_t*),stream\ngx_stream_script.c,"static size_t
ngx_stream_script_full_name_len_code(ngx_stream_script_engine_t *e)
{
    ngx_stream_script_full_name_code_t  *code;

    code = (ngx_stream_script_full_name_code_t *) e->ip;

    e->ip += sizeof(ngx_stream_script_full_name_code_t);

    return code->conf_prefix ? ngx_cycle->conf_prefix.len:
                               ngx_cycle->prefix.len;
}",979.0,990.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,size_t
6542,454296,ngx_stream_script_full_name_code,1,ngx_stream_script_full_name_code,void ngx_stream_script_full_name_code (ngx_stream_script_engine_t*),stream\ngx_stream_script.c,"static void
ngx_stream_script_full_name_code(ngx_stream_script_engine_t *e)
{
    ngx_stream_script_full_name_code_t  *code;

    ngx_str_t  value, *prefix;

    code = (ngx_stream_script_full_name_code_t *) e->ip;

    value.data = e->buf.data;
    value.len = e->pos - e->buf.data;

    prefix = code->conf_prefix ? (ngx_str_t *) &ngx_cycle->conf_prefix:
                                 (ngx_str_t *) &ngx_cycle->prefix;

    if (ngx_get_full_name(e->session->connection->pool, prefix, &value)
        != NGX_OK)
    {
        e->ip = ngx_stream_script_exit;
        return;
    }

    e->buf = value;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, e->session->connection->log, 0,
                   ""stream script fullname: \""%V\"""", &value);

    e->ip += sizeof(ngx_stream_script_full_name_code_t);
}",993.0,1021.0,1.0,16.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6543,454307,ngx_stream_script_flush_complex_value,1,ngx_stream_script_flush_complex_value,"void ngx_stream_script_flush_complex_value (ngx_stream_session_t*,ngx_stream_complex_value_t*)",stream\ngx_stream_script.c,"void
ngx_stream_script_flush_complex_value(ngx_stream_session_t *s,
    ngx_stream_complex_value_t *val)
{
    ngx_uint_t *index;

    index = val->flushes;

    if (index) {
        while (*index != (ngx_uint_t) -1) {

            if (s->variables[*index].no_cacheable) {
                s->variables[*index].valid = 0;
                s->variables[*index].not_found = 0;
            }

            index++;
        }
    }
}",36.0,55.0,1.0,1.0,20.0,20,8,12,4,1,1,4,7,0,0,,0,1,4,2,2,void
6544,454362,ngx_stream_complex_value,1,ngx_stream_complex_value,"ngx_int_t ngx_stream_complex_value (ngx_stream_session_t*,ngx_stream_complex_value_t*,ngx_str_t*)",stream\ngx_stream_script.c,"ngx_int_t
ngx_stream_complex_value(ngx_stream_session_t *s,
    ngx_stream_complex_value_t *val, ngx_str_t *value)
{
    size_t                         len;
    ngx_stream_script_code_pt      code;
    ngx_stream_script_engine_t     e;
    ngx_stream_script_len_code_pt  lcode;

    if (val->lengths == NULL) {
        *value = val->value;
        return NGX_OK;
    }

    ngx_stream_script_flush_complex_value(s, val);

    ngx_memzero(&e, sizeof(ngx_stream_script_engine_t));

    e.ip = val->lengths;
    e.session = s;
    e.flushed = 1;

    len = 0;

    while (*(uintptr_t *) e.ip) {
        lcode = *(ngx_stream_script_len_code_pt *) e.ip;
        len += lcode(&e);
    }

    value->len = len;
    value->data = ngx_pnalloc(s->connection->pool, len);
    if (value->data == NULL) {
        return NGX_ERROR;
    }

    e.ip = val->values;
    e.pos = value->data;
    e.buf = *value;

    while (*(uintptr_t *) e.ip) {
        code = *(ngx_stream_script_code_pt *) e.ip;
        code((ng...",58.0,105.0,1.0,1.0,48.0,53,9,41,11,6,21,5,5,4,2,,0,20,6,3,3,ngx_int_t
6545,454511,ngx_stream_complex_value_size,1,ngx_stream_complex_value_size,"size_t ngx_stream_complex_value_size (ngx_stream_session_t*,ngx_stream_complex_value_t*,size_t)",stream\ngx_stream_script.c,"size_t
ngx_stream_complex_value_size(ngx_stream_session_t *s,
    ngx_stream_complex_value_t *val, size_t default_value)
{
    size_t     size;
    ngx_str_t  value;

    if (val == NULL) {
        return default_value;
    }

    if (val->lengths == NULL) {
        return val->u.size;
    }

    if (ngx_stream_complex_value(s, val, &value) != NGX_OK) {
        return default_value;
    }

    size = ngx_parse_size(&value);

    if (size == (size_t) NGX_ERROR) {
        ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                      ""invalid size \""%V\"""", &value);
        return default_value;
    }

    return size;
}",108.0,136.0,1.0,1.0,29.0,14,7,20,9,0,4,5,5,2,3,,0,3,6,3,3,size_t
6546,454578,ngx_stream_compile_complex_value,1,ngx_stream_compile_complex_value,ngx_int_t ngx_stream_compile_complex_value (ngx_stream_compile_complex_value_t*),stream\ngx_stream_script.c,"ngx_int_t
ngx_stream_compile_complex_value(ngx_stream_compile_complex_value_t *ccv)
{
    ngx_str_t                    *v;
    ngx_uint_t                    i, n, nv, nc;
    ngx_array_t                   flushes, lengths, values, *pf, *pl, *pv;
    ngx_stream_script_compile_t   sc;

    v = ccv->value;

    nv = 0;
    nc = 0;

    for (i = 0; i < v->len; i++) {
        if (v->data[i] == '$') {
            if (v->data[i + 1] >= '1' && v->data[i + 1] <= '9') {
                nc++;

            } else {
                nv++;
            }
        }
    }

    if ((v->len == 0 || v->data[0] != '$')
        && (ccv->conf_prefix || ccv->root_prefix))
    {
        if (ngx_conf_full_name(ccv->cf->cycle, v, ccv->conf_prefix) != NGX_OK) {
            return NGX_ERROR;
        }

        ccv->conf_prefix = 0;
        ccv->root_prefix = 0;
    }

    ccv->complex_value->value = *v;
    ccv->complex_value->flushes = NULL;
    ccv->complex_value->lengths = NULL;
    ccv->complex_value->values...",139.0,240.0,1.0,1.0,102.0,150,20,107,21,2,49,12,16,19,5,,0,49,2,1,1,ngx_int_t
6547,454975,ngx_stream_set_complex_value_slot,1,ngx_stream_set_complex_value_slot,"char* ngx_stream_set_complex_value_slot (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_script.c,"char *
ngx_stream_set_complex_value_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    char  *p = conf;

    ngx_str_t                            *value;
    ngx_stream_complex_value_t          **cv;
    ngx_stream_compile_complex_value_t    ccv;

    cv = (ngx_stream_complex_value_t **) (p + cmd->offset);

    if (*cv != NGX_CONF_UNSET_PTR && *cv != NULL) {
        return ""is duplicate"";
    }

    *cv = ngx_palloc(cf->pool, sizeof(ngx_stream_complex_value_t));
    if (*cv == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_stream_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = *cv;

    if (ngx_stream_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",243.0,277.0,1.0,1.0,35.0,32,12,29,14,1,5,4,4,1,2,,0,5,6,3,3,char*
6548,455070,ngx_stream_set_complex_value_zero_slot,1,ngx_stream_set_complex_value_zero_slot,"char* ngx_stream_set_complex_value_zero_slot (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_script.c,"char *
ngx_stream_set_complex_value_zero_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    char  *p = conf;

    ngx_str_t                            *value;
    ngx_stream_complex_value_t          **cv;
    ngx_stream_compile_complex_value_t    ccv;

    cv = (ngx_stream_complex_value_t **) (p + cmd->offset);

    if (*cv != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    *cv = ngx_palloc(cf->pool, sizeof(ngx_stream_complex_value_t));
    if (*cv == NULL) {
        return NGX_CONF_ERROR;
    }

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_stream_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = *cv;
    ccv.zero = 1;

    if (ngx_stream_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",280.0,315.0,1.0,1.0,36.0,31,11,28,14,0,6,4,4,1,2,,0,6,6,3,3,char*
6549,455165,ngx_stream_set_complex_value_size_slot,1,ngx_stream_set_complex_value_size_slot,"char* ngx_stream_set_complex_value_size_slot (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_script.c,"char *
ngx_stream_set_complex_value_size_slot(ngx_conf_t *cf, ngx_command_t *cmd,
    void *conf)
{
    char  *p = conf;

    char                        *rv;
    ngx_stream_complex_value_t  *cv;

    rv = ngx_stream_set_complex_value_slot(cf, cmd, conf);

    if (rv != NGX_CONF_OK) {
        return rv;
    }

    cv = *(ngx_stream_complex_value_t **) (p + cmd->offset);

    if (cv->lengths) {
        return NGX_CONF_OK;
    }

    cv->u.size = ngx_parse_size(&cv->value);
    if (cv->u.size == (size_t) NGX_ERROR) {
        return ""invalid value"";
    }

    return NGX_CONF_OK;
}",318.0,345.0,1.0,1.0,28.0,18,9,19,8,0,4,4,4,1,2,,0,4,6,3,3,char*
6550,455234,ngx_stream_script_variables_count,1,ngx_stream_script_variables_count,ngx_uint_t ngx_stream_script_variables_count (ngx_str_t*),stream\ngx_stream_script.c,"ngx_uint_t
ngx_stream_script_variables_count(ngx_str_t *value)
{
    ngx_uint_t  i, n;

    for (n = 0, i = 0; i < value->len; i++) {
        if (value->data[i] == '$') {
            n++;
        }
    }

    return n;
}",348.0,360.0,1.0,1.0,13.0,9,7,8,3,0,2,3,4,2,0,,0,2,2,1,1,ngx_uint_t
6551,455271,ngx_stream_script_compile,1,ngx_stream_script_compile,ngx_int_t ngx_stream_script_compile (ngx_stream_script_compile_t*),stream\ngx_stream_script.c,"ngx_int_t
ngx_stream_script_compile(ngx_stream_script_compile_t *sc)
{
    u_char       ch;
    ngx_str_t    name;
    ngx_uint_t   i, bracket;

    if (ngx_stream_script_init_arrays(sc) != NGX_OK) {
        return NGX_ERROR;
    }

    for (i = 0; i < sc->source->len; /* void */ ) {

        name.len = 0;

        if (sc->source->data[i] == '$') {

            if (++i == sc->source->len) {
                goto invalid_variable;
            }

            if (sc->source->data[i] >= '1' && sc->source->data[i] <= '9') {
#if (NGX_PCRE)
                ngx_uint_t  n;

                n = sc->source->data[i] - '0';

                if (ngx_stream_script_add_capture_code(sc, n) != NGX_OK) {
                    return NGX_ERROR;
                }

                i++;

                continue;
#else
                ngx_conf_log_error(NGX_LOG_EMERG, sc->cf, 0,
                                   ""using variable \""$%c\"" requires ""
                                   ""PCRE library"", sc->source...",363.0,487.0,1.0,1.0,125.0,100,15,76,8,1,33,25,45,15,7,,0,29,2,1,1,ngx_int_t
6552,455602,ngx_stream_script_run,1,ngx_stream_script_run,"u_char ngx_stream_script_run (ngx_stream_session_t*,ngx_str_t*,void*,size_t,void*)",stream\ngx_stream_script.c,"u_char *
ngx_stream_script_run(ngx_stream_session_t *s, ngx_str_t *value,
    void *code_lengths, size_t len, void *code_values)
{
    ngx_uint_t                      i;
    ngx_stream_script_code_pt       code;
    ngx_stream_script_engine_t      e;
    ngx_stream_core_main_conf_t    *cmcf;
    ngx_stream_script_len_code_pt   lcode;

    cmcf = ngx_stream_get_module_main_conf(s, ngx_stream_core_module);

    for (i = 0; i < cmcf->variables.nelts; i++) {
        if (s->variables[i].no_cacheable) {
            s->variables[i].valid = 0;
            s->variables[i].not_found = 0;
        }
    }

    ngx_memzero(&e, sizeof(ngx_stream_script_engine_t));

    e.ip = code_lengths;
    e.session = s;
    e.flushed = 1;

    while (*(uintptr_t *) e.ip) {
        lcode = *(ngx_stream_script_len_code_pt *) e.ip;
        len += lcode(&e);
    }


    value->len = len;
    value->data = ngx_pnalloc(s->connection->pool, len);
    if (value->data == NULL) {
        return NULL;
    }

    e.ip =...",490.0,536.0,1.0,1.0,47.0,56,11,41,13,0,16,6,7,4,1,,0,16,10,5,5,u_char
6553,455766,ngx_stream_script_flush_no_cacheable_variables,1,ngx_stream_script_flush_no_cacheable_variables,"void ngx_stream_script_flush_no_cacheable_variables (ngx_stream_session_t*,ngx_array_t*)",stream\ngx_stream_script.c,"void
ngx_stream_script_flush_no_cacheable_variables(ngx_stream_session_t *s,
    ngx_array_t *indices)
{
    ngx_uint_t  n, *index;

    if (indices) {
        index = indices->elts;
        for (n = 0; n < indices->nelts; n++) {
            if (s->variables[index[n]].no_cacheable) {
                s->variables[index[n]].valid = 0;
                s->variables[index[n]].not_found = 0;
            }
        }
    }
}",539.0,554.0,1.0,1.0,16.0,19,5,15,4,1,2,4,7,1,0,,0,2,4,2,2,void
6554,456111,ngx_stream_script_add_code,1,ngx_stream_script_add_code,"void* ngx_stream_script_add_code (ngx_array_t*,size_t,void*)",stream\ngx_stream_script.c,"void *
ngx_stream_script_add_code(ngx_array_t *codes, size_t size, void *code)
{
    u_char  *elts, **p;
    void    *new;

    elts = codes->elts;

    new = ngx_array_push_n(codes, size);
    if (new == NULL) {
        return NULL;
    }

    if (code) {
        if (elts != codes->elts) {
            p = code;
            *p += (u_char *) codes->elts - elts;
        }
    }

    return new;
}",647.0,668.0,1.0,1.0,22.0,12,8,17,7,0,4,4,5,1,1,,0,4,6,3,3,void*
6555,456295,ngx_stream_script_copy_len_code,1,ngx_stream_script_copy_len_code,size_t ngx_stream_script_copy_len_code (ngx_stream_script_engine_t*),stream\ngx_stream_script.c,"size_t
ngx_stream_script_copy_len_code(ngx_stream_script_engine_t *e)
{
    ngx_stream_script_copy_code_t  *code;

    code = (ngx_stream_script_copy_code_t *) e->ip;

    e->ip += sizeof(ngx_stream_script_copy_code_t);

    return code->len;
}",716.0,726.0,1.0,1.0,11.0,7,5,5,3,0,3,1,1,0,0,,0,3,2,1,1,size_t
6556,456318,ngx_stream_script_copy_code,1,ngx_stream_script_copy_code,void ngx_stream_script_copy_code (ngx_stream_script_engine_t*),stream\ngx_stream_script.c,"void
ngx_stream_script_copy_code(ngx_stream_script_engine_t *e)
{
    u_char                         *p;
    ngx_stream_script_copy_code_t  *code;

    code = (ngx_stream_script_copy_code_t *) e->ip;

    p = e->pos;

    if (!e->skip) {
        e->pos = ngx_copy(p, e->ip + sizeof(ngx_stream_script_copy_code_t),
                          code->len);
    }

    e->ip += sizeof(ngx_stream_script_copy_code_t)
          + ((code->len + sizeof(uintptr_t) - 1) & ~(sizeof(uintptr_t) - 1));

    ngx_log_debug2(NGX_LOG_DEBUG_STREAM, e->session->connection->log, 0,
                   ""stream script copy: \""%*s\"""", e->pos - p, p);
}",729.0,749.0,1.0,1.0,21.0,30,10,20,6,0,10,2,2,1,0,,0,10,2,1,1,void
6557,456509,ngx_stream_script_copy_var_len_code,1,ngx_stream_script_copy_var_len_code,size_t ngx_stream_script_copy_var_len_code (ngx_stream_script_engine_t*),stream\ngx_stream_script.c,"size_t
ngx_stream_script_copy_var_len_code(ngx_stream_script_engine_t *e)
{
    ngx_stream_variable_value_t   *value;
    ngx_stream_script_var_code_t  *code;

    code = (ngx_stream_script_var_code_t *) e->ip;

    e->ip += sizeof(ngx_stream_script_var_code_t);

    if (e->flushed) {
        value = ngx_stream_get_indexed_variable(e->session, code->index);

    } else {
        value = ngx_stream_get_flushed_variable(e->session, code->index);
    }

    if (value && !value->not_found) {
        return value->len;
    }

    return 0;
}",798.0,820.0,1.0,1.0,23.0,14,7,11,4,0,6,3,3,1,1,,0,6,2,1,1,size_t
6558,456568,ngx_stream_script_copy_var_code,1,ngx_stream_script_copy_var_code,void ngx_stream_script_copy_var_code (ngx_stream_script_engine_t*),stream\ngx_stream_script.c,"void
ngx_stream_script_copy_var_code(ngx_stream_script_engine_t *e)
{
    u_char                        *p;
    ngx_stream_variable_value_t   *value;
    ngx_stream_script_var_code_t  *code;

    code = (ngx_stream_script_var_code_t *) e->ip;

    e->ip += sizeof(ngx_stream_script_var_code_t);

    if (!e->skip) {

        if (e->flushed) {
            value = ngx_stream_get_indexed_variable(e->session, code->index);

        } else {
            value = ngx_stream_get_flushed_variable(e->session, code->index);
        }

        if (value && !value->not_found) {
            p = e->pos;
            e->pos = ngx_copy(p, value->data, value->len);

            ngx_log_debug2(NGX_LOG_DEBUG_STREAM,
                           e->session->connection->log, 0,
                           ""stream script var: \""%*s\"""", e->pos - p, p);
        }
    }
}",823.0,852.0,1.0,1.0,30.0,26,8,22,6,0,11,4,6,2,1,,0,11,2,1,1,void
6559,456928,ngx_stream_script_code_pt,1,ngx_stream_script_code_pt,void ngx_stream_script_code_pt (ngx_stream_script_engine_t*),stream\ngx_stream_script.h,typedef void (*ngx_stream_script_code_pt) (ngx_stream_script_engine_t *e);,77.0,77.0,14.0,73.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6560,456933,ngx_stream_script_len_code_pt,1,ngx_stream_script_len_code_pt,size_t ngx_stream_script_len_code_pt (ngx_stream_script_engine_t*),stream\ngx_stream_script.h,typedef size_t (*ngx_stream_script_len_code_pt) (ngx_stream_script_engine_t *e);,78.0,78.0,16.0,79.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,size_t
6561,457052,ngx_stream_script_copy_capture_len_code,1,ngx_stream_script_copy_capture_len_code,size_t ngx_stream_script_copy_capture_len_code (ngx_stream_script_engine_t*),stream\ngx_stream_script.h,size_t ngx_stream_script_copy_capture_len_code(ngx_stream_script_engine_t *e);,134.0,134.0,8.0,77.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,size_t
6562,457057,ngx_stream_script_copy_capture_code,1,ngx_stream_script_copy_capture_code,void ngx_stream_script_copy_capture_code (ngx_stream_script_engine_t*),stream\ngx_stream_script.h,void ngx_stream_script_copy_capture_code(ngx_stream_script_engine_t *e);,135.0,135.0,6.0,71.0,1.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6563,457082,ngx_stream_set_handler,1,ngx_stream_set_handler,ngx_int_t ngx_stream_set_handler (ngx_stream_session_t*),stream\ngx_stream_set_module.c,"static ngx_int_t
ngx_stream_set_handler(ngx_stream_session_t *s)
{
    ngx_str_t                     str;
    ngx_uint_t                    i;
    ngx_stream_set_cmd_t         *cmds;
    ngx_stream_set_srv_conf_t    *scf;
    ngx_stream_variable_value_t   vv;

    scf = ngx_stream_get_module_srv_conf(s, ngx_stream_set_module);
    cmds = scf->commands.elts;
    vv = ngx_stream_variable_null_value;

    for (i = 0; i < scf->commands.nelts; i++) {
        if (ngx_stream_complex_value(s, &cmds[i].value, &str) != NGX_OK) {
            return NGX_ERROR;
        }

        if (cmds[i].set_handler != NULL) {
            vv.len = str.len;
            vv.data = str.data;
            cmds[i].set_handler(s, &vv, cmds[i].data);

        } else {
            s->variables[cmds[i].index].len = str.len;
            s->variables[cmds[i].index].valid = 1;
            s->variables[cmds[i].index].no_cacheable = 0;
            s->variables[cmds[i].index].not_found = 0;
            s->variables[cmds[i].i...",75.0,108.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6564,457087,ngx_stream_set_var,1,ngx_stream_set_var,"ngx_int_t ngx_stream_set_var (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_set_module.c,"static ngx_int_t
ngx_stream_set_var(ngx_stream_session_t *s, ngx_stream_variable_value_t *v,
    uintptr_t data)
{
    *v = ngx_stream_variable_null_value;

    return NGX_OK;
}",111.0,118.0,1.0,1.0,8.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6565,457094,ngx_stream_set_init,1,ngx_stream_set_init,ngx_int_t ngx_stream_set_init (ngx_conf_t*),stream\ngx_stream_set_module.c,"static ngx_int_t
ngx_stream_set_init(ngx_conf_t *cf)
{
    ngx_stream_handler_pt        *h;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_STREAM_PREACCESS_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_stream_set_handler;

    return NGX_OK;
}",121.0,137.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6566,457099,ngx_stream_set_create_srv_conf,1,ngx_stream_set_create_srv_conf,void* ngx_stream_set_create_srv_conf (ngx_conf_t*),stream\ngx_stream_set_module.c,"static void *
ngx_stream_set_create_srv_conf(ngx_conf_t *cf)
{
    ngx_stream_set_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_set_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->commands = { NULL };
     */

    return conf;
}",140.0,157.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6567,457104,ngx_stream_set,1,ngx_stream_set,"char* ngx_stream_set (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_set_module.c,"static char *
ngx_stream_set(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_set_srv_conf_t  *scf = conf;

    ngx_str_t                           *args;
    ngx_int_t                            index;
    ngx_stream_set_cmd_t                *set_cmd;
    ngx_stream_variable_t               *v;
    ngx_stream_compile_complex_value_t   ccv;

    args = cf->args->elts;

    if (args[1].data[0] != '$') {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""%V\"""", &args[1]);
        return NGX_CONF_ERROR;
    }

    args[1].len--;
    args[1].data++;

    v = ngx_stream_add_variable(cf, &args[1],
                                NGX_STREAM_VAR_CHANGEABLE|NGX_STREAM_VAR_WEAK);
    if (v == NULL) {
        return NGX_CONF_ERROR;
    }

    index = ngx_stream_get_variable_index(cf, &args[1]);
    if (index == NGX_ERROR) {
        return NGX_CONF_ERROR;
    }

    if (v->get_handler == NULL) {
        v->get_handler = ngx_strea...",160.0,226.0,1.0,1.0,67.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6568,457615,ngx_stream_split_clients,1,ngx_stream_split_clients,"char* ngx_stream_split_clients (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_split_clients_module.c,"static char *
ngx_stream_split_clients(ngx_conf_t *cf, ngx_command_t *dummy, void *conf)
{
    ngx_int_t                         n;
    ngx_str_t                        *value;
    ngx_stream_split_clients_ctx_t   *ctx;
    ngx_stream_split_clients_part_t  *part;

    ctx = cf->ctx;
    value = cf->args->elts;

    part = ngx_array_push(&ctx->parts);
    if (part == NULL) {
        return NGX_CONF_ERROR;
    }

    if (value[0].len == 1 && value[0].data[0] == '*') {
        part->percent = 0;

    } else {
        if (value[0].len == 0 || value[0].data[value[0].len - 1] != '%') {
            goto invalid;
        }

        n = ngx_atofp(value[0].data, value[0].len - 1, 2);
        if (n == NGX_ERROR || n == 0) {
            goto invalid;
        }

        part->percent = (uint32_t) n;
    }

    part->value.len = value[1].len;
    part->value.valid = 1;
    part->value.no_cacheable = 0;
    part->value.not_found = 0;
    part->value.data = value[1].data;

    return NGX_CONF_OK;

...",199.0,244.0,1.0,1.0,46.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6569,457666,ngx_stream_split_clients_variable,1,ngx_stream_split_clients_variable,"ngx_int_t ngx_stream_split_clients_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_split_clients_module.c,"static ngx_int_t
ngx_stream_split_clients_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_stream_split_clients_ctx_t *ctx =
                                       (ngx_stream_split_clients_ctx_t *) data;

    uint32_t                          hash;
    ngx_str_t                         val;
    ngx_uint_t                        i;
    ngx_stream_split_clients_part_t  *part;

    *v = ngx_stream_variable_null_value;

    if (ngx_stream_complex_value(s, &ctx->value, &val) != NGX_OK) {
        return NGX_OK;
    }

    hash = ngx_murmur_hash2(val.data, val.len);

    part = ctx->parts.elts;

    for (i = 0; i < ctx->parts.nelts; i++) {

        ngx_log_debug2(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                       ""stream split: %uD %uD"", hash, part[i].percent);

        if (hash < part[i].percent || part[i].percent == 0) {
            *v = part[i].value;
            return NGX_OK;
        }
    }

    return NGX_OK;
}",71.0,105.0,1.0,1.0,35.0,33,11,32,11,0,7,4,5,3,2,,0,7,6,3,3,ngx_int_t
6570,458242,ngx_stream_ssl_handler,1,ngx_stream_ssl_handler,ngx_int_t ngx_stream_ssl_handler (ngx_stream_session_t*),stream\ngx_stream_ssl_module.c,"static ngx_int_t
ngx_stream_ssl_handler(ngx_stream_session_t *s)
{
    long                    rc;
    X509                   *cert;
    ngx_int_t               rv;
    ngx_connection_t       *c;
    ngx_stream_ssl_conf_t  *sslcf;

    if (!s->ssl) {
        return NGX_OK;
    }

    c = s->connection;

    sslcf = ngx_stream_get_module_srv_conf(s, ngx_stream_ssl_module);

    if (c->ssl == NULL) {
        c->log->action = ""SSL handshaking"";

        rv = ngx_stream_ssl_init_connection(&sslcf->ssl, c);

        if (rv != NGX_OK) {
            return rv;
        }
    }

    if (sslcf->verify) {
        rc = SSL_get_verify_result(c->ssl->connection);

        if (rc != X509_V_OK
            && (sslcf->verify != 3 || !ngx_ssl_verify_error_optional(rc)))
        {
            ngx_log_error(NGX_LOG_INFO, c->log, 0,
                          ""client SSL certificate verify error: (%l:%s)"",
                          rc, X509_verify_cert_error_string(rc));

            ngx_ssl_remove_cached...",311.0,370.0,1.0,1.0,60.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6571,458247,ngx_stream_ssl_init_connection,1,ngx_stream_ssl_init_connection,"ngx_int_t ngx_stream_ssl_init_connection (ngx_ssl_t*,ngx_connection_t*)",stream\ngx_stream_ssl_module.c,"static ngx_int_t
ngx_stream_ssl_init_connection(ngx_ssl_t *ssl, ngx_connection_t *c)
{
    ngx_int_t                    rc;
    ngx_stream_session_t        *s;
    ngx_stream_ssl_conf_t       *sslcf;
    ngx_stream_core_srv_conf_t  *cscf;

    s = c->data;

    cscf = ngx_stream_get_module_srv_conf(s, ngx_stream_core_module);

    if (cscf->tcp_nodelay && ngx_tcp_nodelay(c) != NGX_OK) {
        return NGX_ERROR;
    }

    if (ngx_ssl_create_connection(ssl, c, 0) != NGX_OK) {
        return NGX_ERROR;
    }

    rc = ngx_ssl_handshake(c);

    if (rc == NGX_ERROR) {
        return NGX_ERROR;
    }

    if (rc == NGX_AGAIN) {
        sslcf = ngx_stream_get_module_srv_conf(s, ngx_stream_ssl_module);

        ngx_add_timer(c->read, sslcf->handshake_timeout);

        c->ssl->handler = ngx_stream_ssl_handshake_handler;

        return NGX_AGAIN;
    }

    /* rc == NGX_OK */

    return NGX_OK;
}",373.0,412.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6572,458253,ngx_stream_ssl_handshake_handler,1,ngx_stream_ssl_handshake_handler,void ngx_stream_ssl_handshake_handler (ngx_connection_t*),stream\ngx_stream_ssl_module.c,"static void
ngx_stream_ssl_handshake_handler(ngx_connection_t *c)
{
    ngx_stream_session_t  *s;

    s = c->data;

    if (!c->ssl->handshaked) {
        ngx_stream_finalize_session(s, NGX_STREAM_INTERNAL_SERVER_ERROR);
        return;
    }

    if (c->read->timer_set) {
        ngx_del_timer(c->read);
    }

    ngx_stream_core_run_phases(s);
}",415.0,432.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void
6573,458258,ngx_stream_ssl_static_variable,1,ngx_stream_ssl_static_variable,"ngx_int_t ngx_stream_ssl_static_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_ssl_module.c,"static ngx_int_t
ngx_stream_ssl_static_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_ssl_variable_handler_pt  handler = (ngx_ssl_variable_handler_pt) data;

    size_t     len;
    ngx_str_t  str;

    if (s->connection->ssl) {

        (void) handler(s->connection, NULL, &str);

        v->data = str.data;

        for (len = 0; v->data[len]; len++) { /* void */ }

        v->len = len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;

        return NGX_OK;
    }

    v->not_found = 1;

    return NGX_OK;
}",502.0,530.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6574,458265,ngx_stream_ssl_variable,1,ngx_stream_ssl_variable,"ngx_int_t ngx_stream_ssl_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_ssl_module.c,"static ngx_int_t
ngx_stream_ssl_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_ssl_variable_handler_pt  handler = (ngx_ssl_variable_handler_pt) data;

    ngx_str_t  str;

    if (s->connection->ssl) {

        if (handler(s->connection, s->connection->pool, &str) != NGX_OK) {
            return NGX_ERROR;
        }

        v->len = str.len;
        v->data = str.data;

        if (v->len) {
            v->valid = 1;
            v->no_cacheable = 0;
            v->not_found = 0;

            return NGX_OK;
        }
    }

    v->not_found = 1;

    return NGX_OK;
}",533.0,562.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6575,458272,ngx_stream_ssl_add_variables,1,ngx_stream_ssl_add_variables,ngx_int_t ngx_stream_ssl_add_variables (ngx_conf_t*),stream\ngx_stream_ssl_module.c,"static ngx_int_t
ngx_stream_ssl_add_variables(ngx_conf_t *cf)
{
    ngx_stream_variable_t  *var, *v;

    for (v = ngx_stream_ssl_vars; v->name.len; v++) {
        var = ngx_stream_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",565.0,581.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6576,458277,ngx_stream_ssl_create_conf,1,ngx_stream_ssl_create_conf,void* ngx_stream_ssl_create_conf (ngx_conf_t*),stream\ngx_stream_ssl_module.c,"static void *
ngx_stream_ssl_create_conf(ngx_conf_t *cf)
{
    ngx_stream_ssl_conf_t  *scf;

    scf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_ssl_conf_t));
    if (scf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     scf->listen = 0;
     *     scf->protocols = 0;
     *     scf->certificate_values = NULL;
     *     scf->dhparam = { 0, NULL };
     *     scf->ecdh_curve = { 0, NULL };
     *     scf->client_certificate = { 0, NULL };
     *     scf->trusted_certificate = { 0, NULL };
     *     scf->crl = { 0, NULL };
     *     scf->ciphers = { 0, NULL };
     *     scf->shm_zone = NULL;
     */

    scf->handshake_timeout = NGX_CONF_UNSET_MSEC;
    scf->certificates = NGX_CONF_UNSET_PTR;
    scf->certificate_keys = NGX_CONF_UNSET_PTR;
    scf->passwords = NGX_CONF_UNSET_PTR;
    scf->conf_commands = NGX_CONF_UNSET_PTR;
    scf->prefer_server_ciphers = NGX_CONF_UNSET;
    scf->verify = NGX_CONF_UNSET_UINT;
    scf->verify_depth = NGX_CO...",584.0,623.0,1.0,1.0,40.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6577,458282,ngx_stream_ssl_merge_conf,1,ngx_stream_ssl_merge_conf,"char* ngx_stream_ssl_merge_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream_ssl_module.c,"static char *
ngx_stream_ssl_merge_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_stream_ssl_conf_t *prev = parent;
    ngx_stream_ssl_conf_t *conf = child;

    ngx_pool_cleanup_t  *cln;

    ngx_conf_merge_msec_value(conf->handshake_timeout,
                         prev->handshake_timeout, 60000);

    ngx_conf_merge_value(conf->session_timeout,
                         prev->session_timeout, 300);

    ngx_conf_merge_value(conf->prefer_server_ciphers,
                         prev->prefer_server_ciphers, 0);

    ngx_conf_merge_bitmask_value(conf->protocols, prev->protocols,
                         (NGX_CONF_BITMASK_SET|NGX_SSL_TLSv1
                          |NGX_SSL_TLSv1_1|NGX_SSL_TLSv1_2));

    ngx_conf_merge_uint_value(conf->verify, prev->verify, 0);
    ngx_conf_merge_uint_value(conf->verify_depth, prev->verify_depth, 1);

    ngx_conf_merge_ptr_value(conf->certificates, prev->certificates, NULL);
    ngx_conf_merge_ptr_value(conf->certificate_keys, prev->cert...",626.0,837.0,1.0,25.0,212.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6578,458289,ngx_stream_ssl_compile_certificates,1,ngx_stream_ssl_compile_certificates,"ngx_int_t ngx_stream_ssl_compile_certificates (ngx_conf_t*,ngx_stream_ssl_conf_t*)",stream\ngx_stream_ssl_module.c,"static ngx_int_t
ngx_stream_ssl_compile_certificates(ngx_conf_t *cf,
    ngx_stream_ssl_conf_t *conf)
{
    ngx_str_t                           *cert, *key;
    ngx_uint_t                           i, nelts;
    ngx_stream_complex_value_t          *cv;
    ngx_stream_compile_complex_value_t   ccv;

    cert = conf->certificates->elts;
    key = conf->certificate_keys->elts;
    nelts = conf->certificates->nelts;

    for (i = 0; i < nelts; i++) {

        if (ngx_stream_script_variables_count(&cert[i])) {
            goto found;
        }

        if (ngx_stream_script_variables_count(&key[i])) {
            goto found;
        }
    }

    return NGX_OK;

found:

    conf->certificate_values = ngx_array_create(cf->pool, nelts,
                                           sizeof(ngx_stream_complex_value_t));
    if (conf->certificate_values == NULL) {
        return NGX_ERROR;
    }

    conf->certificate_key_values = ngx_array_create(cf->pool, nelts,
                                 ...",840.0,921.0,1.0,1.0,82.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6579,458295,ngx_stream_ssl_password_file,1,ngx_stream_ssl_password_file,"char* ngx_stream_ssl_password_file (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_ssl_module.c,"static char *
ngx_stream_ssl_password_file(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_ssl_conf_t  *scf = conf;

    ngx_str_t  *value;

    if (scf->passwords != NGX_CONF_UNSET_PTR) {
        return ""is duplicate"";
    }

    value = cf->args->elts;

    scf->passwords = ngx_ssl_read_password_file(cf, &value[1]);

    if (scf->passwords == NULL) {
        return NGX_CONF_ERROR;
    }

    return NGX_CONF_OK;
}",924.0,944.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6580,458302,ngx_stream_ssl_session_cache,1,ngx_stream_ssl_session_cache,"char* ngx_stream_ssl_session_cache (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_ssl_module.c,"static char *
ngx_stream_ssl_session_cache(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_ssl_conf_t  *scf = conf;

    size_t       len;
    ngx_str_t   *value, name, size;
    ngx_int_t    n;
    ngx_uint_t   i, j;

    value = cf->args->elts;

    for (i = 1; i < cf->args->nelts; i++) {

        if (ngx_strcmp(value[i].data, ""off"") == 0) {
            scf->builtin_session_cache = NGX_SSL_NO_SCACHE;
            continue;
        }

        if (ngx_strcmp(value[i].data, ""none"") == 0) {
            scf->builtin_session_cache = NGX_SSL_NONE_SCACHE;
            continue;
        }

        if (ngx_strcmp(value[i].data, ""builtin"") == 0) {
            scf->builtin_session_cache = NGX_SSL_DFLT_BUILTIN_SCACHE;
            continue;
        }

        if (value[i].len > sizeof(""builtin:"") - 1
            && ngx_strncmp(value[i].data, ""builtin:"", sizeof(""builtin:"") - 1)
               == 0)
        {
            n = ngx_atoi(value[i].data + sizeof(""builtin:"") - 1,
        ...",947.0,1056.0,1.0,1.0,110.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6581,458309,ngx_stream_ssl_conf_command_check,1,ngx_stream_ssl_conf_command_check,"char* ngx_stream_ssl_conf_command_check (ngx_conf_t*,void*,void*)",stream\ngx_stream_ssl_module.c,"static char *
ngx_stream_ssl_conf_command_check(ngx_conf_t *cf, void *post, void *data)
{
#ifndef SSL_CONF_FLAG_FILE
    return ""is not supported on this platform"";
#else
    return NGX_CONF_OK;
#endif
}",1059.0,1067.0,1.0,1.0,9.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6582,458316,ngx_stream_ssl_init,1,ngx_stream_ssl_init,ngx_int_t ngx_stream_ssl_init (ngx_conf_t*),stream\ngx_stream_ssl_module.c,"static ngx_int_t
ngx_stream_ssl_init(ngx_conf_t *cf)
{
    ngx_stream_handler_pt        *h;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_STREAM_SSL_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_stream_ssl_handler;

    return NGX_OK;
}",1070.0,1086.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6583,460771,ngx_stream_ssl_preread_handler,1,ngx_stream_ssl_preread_handler,ngx_int_t ngx_stream_ssl_preread_handler (ngx_stream_session_t*),stream\ngx_stream_ssl_preread_module.c,"static ngx_int_t
ngx_stream_ssl_preread_handler(ngx_stream_session_t *s)
{
    u_char                             *last, *p;
    size_t                              len;
    ngx_int_t                           rc;
    ngx_connection_t                   *c;
    ngx_stream_ssl_preread_ctx_t       *ctx;
    ngx_stream_ssl_preread_srv_conf_t  *sscf;

    c = s->connection;

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, c->log, 0, ""ssl preread handler"");

    sscf = ngx_stream_get_module_srv_conf(s, ngx_stream_ssl_preread_module);

    if (!sscf->enabled) {
        return NGX_DECLINED;
    }

    if (c->type != SOCK_STREAM) {
        return NGX_DECLINED;
    }

    if (c->buffer == NULL) {
        return NGX_AGAIN;
    }

    ctx = ngx_stream_get_module_ctx(s, ngx_stream_ssl_preread_module);
    if (ctx == NULL) {
        ctx = ngx_pcalloc(c->pool, sizeof(ngx_stream_ssl_preread_ctx_t));
        if (ctx == NULL) {
            return NGX_ERROR;
        }

        ngx_stream_set_ctx(s, ctx, ngx_...",105.0,200.0,1.0,1.0,96.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6584,460776,ngx_stream_ssl_preread_parse_record,1,ngx_stream_ssl_preread_parse_record,"ngx_int_t ngx_stream_ssl_preread_parse_record (ngx_stream_ssl_preread_ctx_t*,u_char*,u_char*)",stream\ngx_stream_ssl_preread_module.c,"static ngx_int_t
ngx_stream_ssl_preread_parse_record(ngx_stream_ssl_preread_ctx_t *ctx,
    u_char *pos, u_char *last)
{
    size_t   left, n, size, ext;
    u_char  *dst, *p;

    enum {
        sw_start = 0,
        sw_header,          /* handshake msg_type, length */
        sw_version,         /* client_version */
        sw_random,          /* random */
        sw_sid_len,         /* session_id length */
        sw_sid,             /* session_id */
        sw_cs_len,          /* cipher_suites length */
        sw_cs,              /* cipher_suites */
        sw_cm_len,          /* compression_methods length */
        sw_cm,              /* compression_methods */
        sw_ext,             /* extension */
        sw_ext_header,      /* extension_type, extension_data length */
        sw_sni_len,         /* SNI length */
        sw_sni_host_head,   /* SNI name_type, host_name length */
        sw_sni_host,        /* SNI host_name */
        sw_alpn_len,        /* ALPN length */
...",203.0,496.0,1.0,1.0,294.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6585,460783,ngx_stream_ssl_preread_protocol_variable,1,ngx_stream_ssl_preread_protocol_variable,"ngx_int_t ngx_stream_ssl_preread_protocol_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_ssl_preread_module.c,"static ngx_int_t
ngx_stream_ssl_preread_protocol_variable(ngx_stream_session_t *s,
    ngx_variable_value_t *v, uintptr_t data)
{
    ngx_str_t                      version;
    ngx_stream_ssl_preread_ctx_t  *ctx;

    ctx = ngx_stream_get_module_ctx(s, ngx_stream_ssl_preread_module);

    if (ctx == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    /* SSL_get_version() format */

    ngx_str_null(&version);

    switch (ctx->version[0]) {
    case 0:
        switch (ctx->version[1]) {
        case 2:
            ngx_str_set(&version, ""SSLv2"");
            break;
        }
        break;
    case 3:
        switch (ctx->version[1]) {
        case 0:
            ngx_str_set(&version, ""SSLv3"");
            break;
        case 1:
            ngx_str_set(&version, ""TLSv1"");
            break;
        case 2:
            ngx_str_set(&version, ""TLSv1.1"");
            break;
        case 3:
            ngx_str_set(&version, ""TLSv1.2"");
            break;
        case 4:
 ...",499.0,552.0,1.0,1.0,54.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6586,460790,ngx_stream_ssl_preread_server_name_variable,1,ngx_stream_ssl_preread_server_name_variable,"ngx_int_t ngx_stream_ssl_preread_server_name_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_ssl_preread_module.c,"static ngx_int_t
ngx_stream_ssl_preread_server_name_variable(ngx_stream_session_t *s,
    ngx_variable_value_t *v, uintptr_t data)
{
    ngx_stream_ssl_preread_ctx_t  *ctx;

    ctx = ngx_stream_get_module_ctx(s, ngx_stream_ssl_preread_module);

    if (ctx == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->len = ctx->host.len;
    v->data = ctx->host.data;

    return NGX_OK;
}",555.0,575.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6587,460797,ngx_stream_ssl_preread_alpn_protocols_variable,1,ngx_stream_ssl_preread_alpn_protocols_variable,"ngx_int_t ngx_stream_ssl_preread_alpn_protocols_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_ssl_preread_module.c,"static ngx_int_t
ngx_stream_ssl_preread_alpn_protocols_variable(ngx_stream_session_t *s,
    ngx_variable_value_t *v, uintptr_t data)
{
    ngx_stream_ssl_preread_ctx_t  *ctx;

    ctx = ngx_stream_get_module_ctx(s, ngx_stream_ssl_preread_module);

    if (ctx == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->len = ctx->alpn.len;
    v->data = ctx->alpn.data;

    return NGX_OK;
}",578.0,598.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6588,460804,ngx_stream_ssl_preread_add_variables,1,ngx_stream_ssl_preread_add_variables,ngx_int_t ngx_stream_ssl_preread_add_variables (ngx_conf_t*),stream\ngx_stream_ssl_preread_module.c,"static ngx_int_t
ngx_stream_ssl_preread_add_variables(ngx_conf_t *cf)
{
    ngx_stream_variable_t  *var, *v;

    for (v = ngx_stream_ssl_preread_vars; v->name.len; v++) {
        var = ngx_stream_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",601.0,617.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6589,460809,ngx_stream_ssl_preread_create_srv_conf,1,ngx_stream_ssl_preread_create_srv_conf,void* ngx_stream_ssl_preread_create_srv_conf (ngx_conf_t*),stream\ngx_stream_ssl_preread_module.c,"static void *
ngx_stream_ssl_preread_create_srv_conf(ngx_conf_t *cf)
{
    ngx_stream_ssl_preread_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_ssl_preread_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->enabled = NGX_CONF_UNSET;

    return conf;
}",620.0,633.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6590,460814,ngx_stream_ssl_preread_merge_srv_conf,1,ngx_stream_ssl_preread_merge_srv_conf,"char* ngx_stream_ssl_preread_merge_srv_conf (ngx_conf_t*,void*,void*)",stream\ngx_stream_ssl_preread_module.c,"static char *
ngx_stream_ssl_preread_merge_srv_conf(ngx_conf_t *cf, void *parent, void *child)
{
    ngx_stream_ssl_preread_srv_conf_t *prev = parent;
    ngx_stream_ssl_preread_srv_conf_t *conf = child;

    ngx_conf_merge_value(conf->enabled, prev->enabled, 0);

    return NGX_CONF_OK;
}",636.0,645.0,1.0,1.0,10.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6591,460821,ngx_stream_ssl_preread_init,1,ngx_stream_ssl_preread_init,ngx_int_t ngx_stream_ssl_preread_init (ngx_conf_t*),stream\ngx_stream_ssl_preread_module.c,"static ngx_int_t
ngx_stream_ssl_preread_init(ngx_conf_t *cf)
{
    ngx_stream_handler_pt        *h;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    h = ngx_array_push(&cmcf->phases[NGX_STREAM_PREREAD_PHASE].handlers);
    if (h == NULL) {
        return NGX_ERROR;
    }

    *h = ngx_stream_ssl_preread_handler;

    return NGX_OK;
}",648.0,664.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6592,462361,ngx_stream_upstream_add_variables,1,ngx_stream_upstream_add_variables,ngx_int_t ngx_stream_upstream_add_variables (ngx_conf_t*),stream\ngx_stream_upstream.c,"static ngx_int_t
ngx_stream_upstream_add_variables(ngx_conf_t *cf)
{
    ngx_stream_variable_t  *var, *v;

    for (v = ngx_stream_upstream_vars; v->name.len; v++) {
        var = ngx_stream_add_variable(cf, &v->name, v->flags);
        if (var == NULL) {
            return NGX_ERROR;
        }

        var->get_handler = v->get_handler;
        var->data = v->data;
    }

    return NGX_OK;
}",107.0,123.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6593,462366,ngx_stream_upstream_addr_variable,1,ngx_stream_upstream_addr_variable,"ngx_int_t ngx_stream_upstream_addr_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_upstream.c,"static ngx_int_t
ngx_stream_upstream_addr_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char                       *p;
    size_t                        len;
    ngx_uint_t                    i;
    ngx_stream_upstream_state_t  *state;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (s->upstream_states == NULL || s->upstream_states->nelts == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    len = 0;
    state = s->upstream_states->elts;

    for (i = 0; i < s->upstream_states->nelts; i++) {
        if (state[i].peer) {
            len += state[i].peer->len;
        }

        len += 2;
    }

    p = ngx_pnalloc(s->connection->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->data = p;

    i = 0;

    for ( ;; ) {
        if (state[i].peer) {
            p = ngx_cpymem(p, state[i].peer->data, state[i].peer->len);
        }

        if (++i == s->upstream_states->nelts) {
...",126.0,180.0,1.0,1.0,55.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6594,462373,ngx_stream_upstream_response_time_variable,1,ngx_stream_upstream_response_time_variable,"ngx_int_t ngx_stream_upstream_response_time_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_upstream.c,"static ngx_int_t
ngx_stream_upstream_response_time_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char                       *p;
    size_t                        len;
    ngx_uint_t                    i;
    ngx_msec_int_t                ms;
    ngx_stream_upstream_state_t  *state;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (s->upstream_states == NULL || s->upstream_states->nelts == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    len = s->upstream_states->nelts * (NGX_TIME_T_LEN + 4 + 2);

    p = ngx_pnalloc(s->connection->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->data = p;

    i = 0;
    state = s->upstream_states->elts;

    for ( ;; ) {

        if (data == 1) {
            ms = state[i].first_byte_time;

        } else if (data == 2) {
            ms = state[i].connect_time;

        } else {
            ms = state[i].response_time;
        }

        ...",236.0,298.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6595,462380,ngx_stream_upstream_bytes_variable,1,ngx_stream_upstream_bytes_variable,"ngx_int_t ngx_stream_upstream_bytes_variable (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_upstream.c,"static ngx_int_t
ngx_stream_upstream_bytes_variable(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char                       *p;
    size_t                        len;
    ngx_uint_t                    i;
    ngx_stream_upstream_state_t  *state;

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (s->upstream_states == NULL || s->upstream_states->nelts == 0) {
        v->not_found = 1;
        return NGX_OK;
    }

    len = s->upstream_states->nelts * (NGX_OFF_T_LEN + 2);

    p = ngx_pnalloc(s->connection->pool, len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->data = p;

    i = 0;
    state = s->upstream_states->elts;

    for ( ;; ) {

        if (data == 1) {
            p = ngx_sprintf(p, ""%O"", state[i].bytes_received);

        } else {
            p = ngx_sprintf(p, ""%O"", state[i].bytes_sent);
        }

        if (++i == s->upstream_states->nelts) {
            break;
        }

        *p++ = '...",183.0,233.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6596,462387,ngx_stream_upstream,1,ngx_stream_upstream,"char* ngx_stream_upstream (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_upstream.c,"static char *
ngx_stream_upstream(ngx_conf_t *cf, ngx_command_t *cmd, void *dummy)
{
    char                            *rv;
    void                            *mconf;
    ngx_str_t                       *value;
    ngx_url_t                        u;
    ngx_uint_t                       m;
    ngx_conf_t                       pcf;
    ngx_stream_module_t             *module;
    ngx_stream_conf_ctx_t           *ctx, *stream_ctx;
    ngx_stream_upstream_srv_conf_t  *uscf;

    ngx_memzero(&u, sizeof(ngx_url_t));

    value = cf->args->elts;
    u.host = value[1];
    u.no_resolve = 1;
    u.no_port = 1;

    uscf = ngx_stream_upstream_add(cf, &u, NGX_STREAM_UPSTREAM_CREATE
                                           |NGX_STREAM_UPSTREAM_WEIGHT
                                           |NGX_STREAM_UPSTREAM_MAX_CONNS
                                           |NGX_STREAM_UPSTREAM_MAX_FAILS
                                           |NGX_STREAM_UPSTREAM_FAIL_TIMEOUT
                 ...",301.0,398.0,1.0,1.0,98.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6597,462394,ngx_stream_upstream_server,1,ngx_stream_upstream_server,"char* ngx_stream_upstream_server (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_upstream.c,"static char *
ngx_stream_upstream_server(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_upstream_srv_conf_t  *uscf = conf;

    time_t                         fail_timeout;
    ngx_str_t                     *value, s;
    ngx_url_t                      u;
    ngx_int_t                      weight, max_conns, max_fails;
    ngx_uint_t                     i;
    ngx_stream_upstream_server_t  *us;

    us = ngx_array_push(uscf->servers);
    if (us == NULL) {
        return NGX_CONF_ERROR;
    }

    ngx_memzero(us, sizeof(ngx_stream_upstream_server_t));

    value = cf->args->elts;

    weight = 1;
    max_conns = 0;
    max_fails = 1;
    fail_timeout = 10;

    for (i = 2; i < cf->args->nelts; i++) {

        if (ngx_strncmp(value[i].data, ""weight="", 7) == 0) {

            if (!(uscf->flags & NGX_STREAM_UPSTREAM_WEIGHT)) {
                goto not_supported;
            }

            weight = ngx_atoi(&value[i].data[7], value[i].len - 7);

            if (weight ...",401.0,560.0,1.0,1.0,160.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6598,462401,ngx_stream_upstream_create_main_conf,1,ngx_stream_upstream_create_main_conf,void* ngx_stream_upstream_create_main_conf (ngx_conf_t*),stream\ngx_stream_upstream.c,"static void *
ngx_stream_upstream_create_main_conf(ngx_conf_t *cf)
{
    ngx_stream_upstream_main_conf_t  *umcf;

    umcf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_upstream_main_conf_t));
    if (umcf == NULL) {
        return NULL;
    }

    if (ngx_array_init(&umcf->upstreams, cf->pool, 4,
                       sizeof(ngx_stream_upstream_srv_conf_t *))
        != NGX_OK)
    {
        return NULL;
    }

    return umcf;
}",671.0,689.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6599,462406,ngx_stream_upstream_init_main_conf,1,ngx_stream_upstream_init_main_conf,"char* ngx_stream_upstream_init_main_conf (ngx_conf_t*,void*)",stream\ngx_stream_upstream.c,"static char *
ngx_stream_upstream_init_main_conf(ngx_conf_t *cf, void *conf)
{
    ngx_stream_upstream_main_conf_t *umcf = conf;

    ngx_uint_t                        i;
    ngx_stream_upstream_init_pt       init;
    ngx_stream_upstream_srv_conf_t  **uscfp;

    uscfp = umcf->upstreams.elts;

    for (i = 0; i < umcf->upstreams.nelts; i++) {

        init = uscfp[i]->peer.init_upstream
                                         ? uscfp[i]->peer.init_upstream
                                         : ngx_stream_upstream_init_round_robin;

        if (init(cf, uscfp[i]) != NGX_OK) {
            return NGX_CONF_ERROR;
        }
    }

    return NGX_CONF_OK;
}",692.0,715.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,char*
6600,463822,ngx_stream_upstream_add,1,ngx_stream_upstream_add,"ngx_stream_upstream_srv_conf_t ngx_stream_upstream_add (ngx_conf_t*,ngx_url_t*,ngx_uint_t)",stream\ngx_stream_upstream.c,"ngx_stream_upstream_srv_conf_t *
ngx_stream_upstream_add(ngx_conf_t *cf, ngx_url_t *u, ngx_uint_t flags)
{
    ngx_uint_t                        i;
    ngx_stream_upstream_server_t     *us;
    ngx_stream_upstream_srv_conf_t   *uscf, **uscfp;
    ngx_stream_upstream_main_conf_t  *umcf;

    if (!(flags & NGX_STREAM_UPSTREAM_CREATE)) {

        if (ngx_parse_url(cf->pool, u) != NGX_OK) {
            if (u->err) {
                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                                   ""%s in upstream \""%V\"""", u->err, &u->url);
            }

            return NULL;
        }
    }

    umcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_upstream_module);

    uscfp = umcf->upstreams.elts;

    for (i = 0; i < umcf->upstreams.nelts; i++) {

        if (uscfp[i]->host.len != u->host.len
            || ngx_strncasecmp(uscfp[i]->host.data, u->host.data, u->host.len)
               != 0)
        {
            continue;
        }

        if ((flags & NGX_STREAM_...",563.0,668.0,1.0,1.0,106.0,123,14,114,16,0,35,18,27,12,10,,0,31,6,3,3,ngx_stream_upstream_srv_conf_t
6601,464325,ngx_stream_upstream_init_pt,1,ngx_stream_upstream_init_pt,"ngx_int_t ngx_stream_upstream_init_pt (ngx_conf_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream.h,"typedef ngx_int_t (*ngx_stream_upstream_init_pt)(ngx_conf_t *cf,
    ngx_stream_upstream_srv_conf_t *us);",39.0,40.0,19.0,39.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6602,464331,ngx_stream_upstream_init_peer_pt,1,ngx_stream_upstream_init_peer_pt,"ngx_int_t ngx_stream_upstream_init_peer_pt (ngx_stream_session_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream.h,"typedef ngx_int_t (*ngx_stream_upstream_init_peer_pt)(ngx_stream_session_t *s,
    ngx_stream_upstream_srv_conf_t *us);",41.0,42.0,19.0,39.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6603,464455,ngx_stream_upstream_init_hash,1,ngx_stream_upstream_init_hash,"ngx_int_t ngx_stream_upstream_init_hash (ngx_conf_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_hash_module.c,"static ngx_int_t
ngx_stream_upstream_init_hash(ngx_conf_t *cf,
    ngx_stream_upstream_srv_conf_t *us)
{
    if (ngx_stream_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_stream_upstream_init_hash_peer;

    return NGX_OK;
}",107.0,118.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6604,464461,ngx_stream_upstream_init_hash_peer,1,ngx_stream_upstream_init_hash_peer,"ngx_int_t ngx_stream_upstream_init_hash_peer (ngx_stream_session_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_hash_module.c,"static ngx_int_t
ngx_stream_upstream_init_hash_peer(ngx_stream_session_t *s,
    ngx_stream_upstream_srv_conf_t *us)
{
    ngx_stream_upstream_hash_srv_conf_t   *hcf;
    ngx_stream_upstream_hash_peer_data_t  *hp;

    hp = ngx_palloc(s->connection->pool,
                    sizeof(ngx_stream_upstream_hash_peer_data_t));
    if (hp == NULL) {
        return NGX_ERROR;
    }

    s->upstream->peer.data = &hp->rrp;

    if (ngx_stream_upstream_init_round_robin_peer(s, us) != NGX_OK) {
        return NGX_ERROR;
    }

    s->upstream->peer.get = ngx_stream_upstream_get_hash_peer;

    hcf = ngx_stream_conf_upstream_srv_conf(us,
                                            ngx_stream_upstream_hash_module);

    if (ngx_stream_complex_value(s, &hcf->key, &hp->key) != NGX_OK) {
        return NGX_ERROR;
    }

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""upstream hash key:\""%V\"""", &hp->key);

    hp->conf = hcf;
    hp->tries = 0;
    hp->rehash = 0;
...",121.0,159.0,1.0,1.0,39.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6605,464467,ngx_stream_upstream_get_hash_peer,1,ngx_stream_upstream_get_hash_peer,"ngx_int_t ngx_stream_upstream_get_hash_peer (ngx_peer_connection_t*,void*)",stream\ngx_stream_upstream_hash_module.c,"static ngx_int_t
ngx_stream_upstream_get_hash_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_stream_upstream_hash_peer_data_t *hp = data;

    time_t                          now;
    u_char                          buf[NGX_INT_T_LEN];
    size_t                          size;
    uint32_t                        hash;
    ngx_int_t                       w;
    uintptr_t                       m;
    ngx_uint_t                      n, p;
    ngx_stream_upstream_rr_peer_t  *peer;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
                   ""get hash peer, try: %ui"", pc->tries);

    ngx_stream_upstream_rr_peers_rlock(hp->rrp.peers);

    if (hp->tries > 20 || hp->rrp.peers->single || hp->key.len == 0) {
        ngx_stream_upstream_rr_peers_unlock(hp->rrp.peers);
        return hp->get_rr_peer(pc, &hp->rrp);
    }

    now = ngx_time();

    pc->connection = NULL;

    for ( ;; ) {

        /*
         * Hash expression is compatible with Cache::Memcached:
         * ...",162.0,281.0,1.0,1.0,120.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6606,464473,ngx_stream_upstream_init_chash,1,ngx_stream_upstream_init_chash,"ngx_int_t ngx_stream_upstream_init_chash (ngx_conf_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_hash_module.c,"static ngx_int_t
ngx_stream_upstream_init_chash(ngx_conf_t *cf,
    ngx_stream_upstream_srv_conf_t *us)
{
    u_char                               *host, *port, c;
    size_t                                host_len, port_len, size;
    uint32_t                              hash, base_hash;
    ngx_str_t                            *server;
    ngx_uint_t                            npoints, i, j;
    ngx_stream_upstream_rr_peer_t        *peer;
    ngx_stream_upstream_rr_peers_t       *peers;
    ngx_stream_upstream_chash_points_t   *points;
    ngx_stream_upstream_hash_srv_conf_t  *hcf;
    union {
        uint32_t                          value;
        u_char                            byte[4];
    } prev_hash;

    if (ngx_stream_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_stream_upstream_init_chash_peer;

    peers = us->peer.data;
    npoints = peers->total_weight * 160;

    size = sizeof(ngx_stream_upstream_chash_point...",284.0,409.0,1.0,1.0,126.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6607,464481,ngx_stream_upstream_chash_cmp_points,1,ngx_stream_upstream_chash_cmp_points,"ANY ngx_stream_upstream_chash_cmp_points (void*,void*)",stream\ngx_stream_upstream_hash_module.c,"ngx_stream_upstream_chash_cmp_points(const void *one, const void *two)
{
    ngx_stream_upstream_chash_point_t *first =
                                     (ngx_stream_upstream_chash_point_t *) one;
    ngx_stream_upstream_chash_point_t *second =
                                     (ngx_stream_upstream_chash_point_t *) two;

    if (first->hash < second->hash) {
        return -1;

    } else if (first->hash > second->hash) {
        return 1;

    } else {
        return 0;
    }
}",413.0,429.0,1.0,1.0,17.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ANY
6608,464487,ngx_stream_upstream_find_chash_point,1,ngx_stream_upstream_find_chash_point,"ngx_uint_t ngx_stream_upstream_find_chash_point (ngx_stream_upstream_chash_points_t*,uint32_t)",stream\ngx_stream_upstream_hash_module.c,"static ngx_uint_t
ngx_stream_upstream_find_chash_point(ngx_stream_upstream_chash_points_t *points,
    uint32_t hash)
{
    ngx_uint_t                          i, j, k;
    ngx_stream_upstream_chash_point_t  *point;

    /* find first point >= hash */

    point = &points->point[0];

    i = 0;
    j = points->number;

    while (i < j) {
        k = (i + j) / 2;

        if (hash > point[k].hash) {
            i = k + 1;

        } else if (hash < point[k].hash) {
            j = k;

        } else {
            return k;
        }
    }

    return i;
}",432.0,461.0,1.0,1.0,30.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
6609,464493,ngx_stream_upstream_init_chash_peer,1,ngx_stream_upstream_init_chash_peer,"ngx_int_t ngx_stream_upstream_init_chash_peer (ngx_stream_session_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_hash_module.c,"static ngx_int_t
ngx_stream_upstream_init_chash_peer(ngx_stream_session_t *s,
    ngx_stream_upstream_srv_conf_t *us)
{
    uint32_t                               hash;
    ngx_stream_upstream_hash_srv_conf_t   *hcf;
    ngx_stream_upstream_hash_peer_data_t  *hp;

    if (ngx_stream_upstream_init_hash_peer(s, us) != NGX_OK) {
        return NGX_ERROR;
    }

    s->upstream->peer.get = ngx_stream_upstream_get_chash_peer;

    hp = s->upstream->peer.data;
    hcf = ngx_stream_conf_upstream_srv_conf(us,
                                            ngx_stream_upstream_hash_module);

    hash = ngx_crc32_long(hp->key.data, hp->key.len);

    ngx_stream_upstream_rr_peers_rlock(hp->rrp.peers);

    hp->hash = ngx_stream_upstream_find_chash_point(hcf->points, hash);

    ngx_stream_upstream_rr_peers_unlock(hp->rrp.peers);

    return NGX_OK;
}",464.0,491.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6610,464499,ngx_stream_upstream_get_chash_peer,1,ngx_stream_upstream_get_chash_peer,"ngx_int_t ngx_stream_upstream_get_chash_peer (ngx_peer_connection_t*,void*)",stream\ngx_stream_upstream_hash_module.c,"static ngx_int_t
ngx_stream_upstream_get_chash_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_stream_upstream_hash_peer_data_t *hp = data;

    time_t                                now;
    intptr_t                              m;
    ngx_str_t                            *server;
    ngx_int_t                             total;
    ngx_uint_t                            i, n, best_i;
    ngx_stream_upstream_rr_peer_t        *peer, *best;
    ngx_stream_upstream_chash_point_t    *point;
    ngx_stream_upstream_chash_points_t   *points;
    ngx_stream_upstream_hash_srv_conf_t  *hcf;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
                   ""get consistent hash peer, try: %ui"", pc->tries);

    ngx_stream_upstream_rr_peers_wlock(hp->rrp.peers);

    if (hp->tries > 20 || hp->rrp.peers->single || hp->key.len == 0) {
        ngx_stream_upstream_rr_peers_unlock(hp->rrp.peers);
        return hp->get_rr_peer(pc, &hp->rrp);
    }

    pc->connection = NULL;

    now = ...",494.0,618.0,1.0,1.0,125.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6611,464505,ngx_stream_upstream_hash_create_conf,1,ngx_stream_upstream_hash_create_conf,void* ngx_stream_upstream_hash_create_conf (ngx_conf_t*),stream\ngx_stream_upstream_hash_module.c,"static void *
ngx_stream_upstream_hash_create_conf(ngx_conf_t *cf)
{
    ngx_stream_upstream_hash_srv_conf_t  *conf;

    conf = ngx_palloc(cf->pool, sizeof(ngx_stream_upstream_hash_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    conf->points = NULL;

    return conf;
}",621.0,634.0,1.0,1.0,14.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6612,464510,ngx_stream_upstream_hash,1,ngx_stream_upstream_hash,"char* ngx_stream_upstream_hash (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_upstream_hash_module.c,"static char *
ngx_stream_upstream_hash(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_upstream_hash_srv_conf_t  *hcf = conf;

    ngx_str_t                           *value;
    ngx_stream_upstream_srv_conf_t      *uscf;
    ngx_stream_compile_complex_value_t   ccv;

    value = cf->args->elts;

    ngx_memzero(&ccv, sizeof(ngx_stream_compile_complex_value_t));

    ccv.cf = cf;
    ccv.value = &value[1];
    ccv.complex_value = &hcf->key;

    if (ngx_stream_compile_complex_value(&ccv) != NGX_OK) {
        return NGX_CONF_ERROR;
    }

    uscf = ngx_stream_conf_get_module_srv_conf(cf, ngx_stream_upstream_module);

    if (uscf->peer.init_upstream) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""load balancing method redefined"");
    }

    uscf->flags = NGX_STREAM_UPSTREAM_CREATE
                  |NGX_STREAM_UPSTREAM_WEIGHT
                  |NGX_STREAM_UPSTREAM_MAX_CONNS
                  |NGX_STREAM_UPSTREAM_MAX_FAILS
            ...",637.0,685.0,1.0,1.0,49.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6613,466340,ngx_stream_upstream_init_least_conn_peer,1,ngx_stream_upstream_init_least_conn_peer,"ngx_int_t ngx_stream_upstream_init_least_conn_peer (ngx_stream_session_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_least_conn_module.c,"static ngx_int_t
ngx_stream_upstream_init_least_conn_peer(ngx_stream_session_t *s,
    ngx_stream_upstream_srv_conf_t *us)
{
    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""init least conn peer"");

    if (ngx_stream_upstream_init_round_robin_peer(s, us) != NGX_OK) {
        return NGX_ERROR;
    }

    s->upstream->peer.get = ngx_stream_upstream_get_least_conn_peer;

    return NGX_OK;
}",79.0,93.0,1.0,1.0,15.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6614,466346,ngx_stream_upstream_get_least_conn_peer,1,ngx_stream_upstream_get_least_conn_peer,"ngx_int_t ngx_stream_upstream_get_least_conn_peer (ngx_peer_connection_t*,void*)",stream\ngx_stream_upstream_least_conn_module.c,"static ngx_int_t
ngx_stream_upstream_get_least_conn_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_stream_upstream_rr_peer_data_t *rrp = data;

    time_t                           now;
    uintptr_t                        m;
    ngx_int_t                        rc, total;
    ngx_uint_t                       i, n, p, many;
    ngx_stream_upstream_rr_peer_t   *peer, *best;
    ngx_stream_upstream_rr_peers_t  *peers;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
                   ""get least conn peer, try: %ui"", pc->tries);

    if (rrp->peers->single) {
        return ngx_stream_upstream_get_round_robin_peer(pc, rrp);
    }

    pc->connection = NULL;

    now = ngx_time();

    peers = rrp->peers;

    ngx_stream_upstream_rr_peers_wlock(peers);

    best = NULL;
    total = 0;

#if (NGX_SUPPRESS_WARN)
    many = 0;
    p = 0;
#endif

    for (peer = peers->peer, i = 0;
         peer;
         peer = peer->next, i++)
    {
        n = i / (8 * sizeof(uintptr_t));
   ...",96.0,284.0,1.0,1.0,189.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6615,466352,ngx_stream_upstream_least_conn,1,ngx_stream_upstream_least_conn,"char* ngx_stream_upstream_least_conn (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_upstream_least_conn_module.c,"static char *
ngx_stream_upstream_least_conn(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_upstream_srv_conf_t  *uscf;

    uscf = ngx_stream_conf_get_module_srv_conf(cf, ngx_stream_upstream_module);

    if (uscf->peer.init_upstream) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""load balancing method redefined"");
    }

    uscf->peer.init_upstream = ngx_stream_upstream_init_least_conn;

    uscf->flags = NGX_STREAM_UPSTREAM_CREATE
                  |NGX_STREAM_UPSTREAM_WEIGHT
                  |NGX_STREAM_UPSTREAM_MAX_CONNS
                  |NGX_STREAM_UPSTREAM_MAX_FAILS
                  |NGX_STREAM_UPSTREAM_FAIL_TIMEOUT
                  |NGX_STREAM_UPSTREAM_DOWN
                  |NGX_STREAM_UPSTREAM_BACKUP;

    return NGX_CONF_OK;
}",287.0,310.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6616,466401,ngx_stream_upstream_init_least_conn,1,ngx_stream_upstream_init_least_conn,"ngx_int_t ngx_stream_upstream_init_least_conn (ngx_conf_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_least_conn_module.c,"static ngx_int_t
ngx_stream_upstream_init_least_conn(ngx_conf_t *cf,
    ngx_stream_upstream_srv_conf_t *us)
{
    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, cf->log, 0,
                   ""init least conn"");

    if (ngx_stream_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_stream_upstream_init_least_conn_peer;

    return NGX_OK;
}",62.0,76.0,1.0,1.0,15.0,5,4,9,6,0,1,2,2,1,1,,0,1,4,2,2,ngx_int_t
6617,467093,ngx_stream_upstream_init_random,1,ngx_stream_upstream_init_random,"ngx_int_t ngx_stream_upstream_init_random (ngx_conf_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_random_module.c,"static ngx_int_t
ngx_stream_upstream_init_random(ngx_conf_t *cf,
    ngx_stream_upstream_srv_conf_t *us)
{
    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, cf->log, 0, ""init random"");

    if (ngx_stream_upstream_init_round_robin(cf, us) != NGX_OK) {
        return NGX_ERROR;
    }

    us->peer.init = ngx_stream_upstream_init_random_peer;

#if (NGX_STREAM_UPSTREAM_ZONE)
    if (us->shm_zone) {
        return NGX_OK;
    }
#endif

    return ngx_stream_upstream_update_random(cf->pool, us);
}",93.0,112.0,1.0,1.0,20.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6618,467099,ngx_stream_upstream_update_random,1,ngx_stream_upstream_update_random,"ngx_int_t ngx_stream_upstream_update_random (ngx_pool_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_random_module.c,"static ngx_int_t
ngx_stream_upstream_update_random(ngx_pool_t *pool,
    ngx_stream_upstream_srv_conf_t *us)
{
    size_t                                  size;
    ngx_uint_t                              i, total_weight;
    ngx_stream_upstream_rr_peer_t          *peer;
    ngx_stream_upstream_rr_peers_t         *peers;
    ngx_stream_upstream_random_range_t     *ranges;
    ngx_stream_upstream_random_srv_conf_t  *rcf;

    rcf = ngx_stream_conf_upstream_srv_conf(us,
                                            ngx_stream_upstream_random_module);
    peers = us->peer.data;

    size = peers->number * sizeof(ngx_stream_upstream_random_range_t);

    ranges = pool ? ngx_palloc(pool, size) : ngx_alloc(size, ngx_cycle->log);
    if (ranges == NULL) {
        return NGX_ERROR;
    }

    total_weight = 0;

    for (peer = peers->peer, i = 0; peer; peer = peer->next, i++) {
        ranges[i].peer = peer;
        ranges[i].range = total_weight;
        total_weight += peer->weight;
    }

...",115.0,148.0,1.0,1.0,34.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6619,467105,ngx_stream_upstream_init_random_peer,1,ngx_stream_upstream_init_random_peer,"ngx_int_t ngx_stream_upstream_init_random_peer (ngx_stream_session_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_random_module.c,"static ngx_int_t
ngx_stream_upstream_init_random_peer(ngx_stream_session_t *s,
    ngx_stream_upstream_srv_conf_t *us)
{
    ngx_stream_upstream_random_srv_conf_t   *rcf;
    ngx_stream_upstream_random_peer_data_t  *rp;

    ngx_log_debug0(NGX_LOG_DEBUG_STREAM, s->connection->log, 0,
                   ""init random peer"");

    rcf = ngx_stream_conf_upstream_srv_conf(us,
                                            ngx_stream_upstream_random_module);

    rp = ngx_palloc(s->connection->pool,
                    sizeof(ngx_stream_upstream_random_peer_data_t));
    if (rp == NULL) {
        return NGX_ERROR;
    }

    s->upstream->peer.data = &rp->rrp;

    if (ngx_stream_upstream_init_round_robin_peer(s, us) != NGX_OK) {
        return NGX_ERROR;
    }

    if (rcf->two) {
        s->upstream->peer.get = ngx_stream_upstream_get_random2_peer;

    } else {
        s->upstream->peer.get = ngx_stream_upstream_get_random_peer;
    }

    rp->conf = rcf;
    rp->tries = 0;

    ngx_stream...",151.0,200.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6620,467111,ngx_stream_upstream_get_random_peer,1,ngx_stream_upstream_get_random_peer,"ngx_int_t ngx_stream_upstream_get_random_peer (ngx_peer_connection_t*,void*)",stream\ngx_stream_upstream_random_module.c,"static ngx_int_t
ngx_stream_upstream_get_random_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_stream_upstream_random_peer_data_t  *rp = data;

    time_t                               now;
    uintptr_t                            m;
    ngx_uint_t                           i, n;
    ngx_stream_upstream_rr_peer_t       *peer;
    ngx_stream_upstream_rr_peers_t      *peers;
    ngx_stream_upstream_rr_peer_data_t  *rrp;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
                   ""get random peer, try: %ui"", pc->tries);

    rrp = &rp->rrp;
    peers = rrp->peers;

    ngx_stream_upstream_rr_peers_rlock(peers);

    if (rp->tries > 20 || peers->single) {
        ngx_stream_upstream_rr_peers_unlock(peers);
        return ngx_stream_upstream_get_round_robin_peer(pc, rrp);
    }

    pc->cached = 0;
    pc->connection = NULL;

    now = ngx_time();

    for ( ;; ) {

        i = ngx_stream_upstream_peek_random_peer(peers, rp);

        peer = rp->conf->ranges[i].peer;
...",203.0,294.0,1.0,1.0,92.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6621,467117,ngx_stream_upstream_get_random2_peer,1,ngx_stream_upstream_get_random2_peer,"ngx_int_t ngx_stream_upstream_get_random2_peer (ngx_peer_connection_t*,void*)",stream\ngx_stream_upstream_random_module.c,"static ngx_int_t
ngx_stream_upstream_get_random2_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_stream_upstream_random_peer_data_t  *rp = data;

    time_t                               now;
    uintptr_t                            m;
    ngx_uint_t                           i, n, p;
    ngx_stream_upstream_rr_peer_t       *peer, *prev;
    ngx_stream_upstream_rr_peers_t      *peers;
    ngx_stream_upstream_rr_peer_data_t  *rrp;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
                   ""get random2 peer, try: %ui"", pc->tries);

    rrp = &rp->rrp;
    peers = rrp->peers;

    ngx_stream_upstream_rr_peers_wlock(peers);

    if (rp->tries > 20 || peers->single) {
        ngx_stream_upstream_rr_peers_unlock(peers);
        return ngx_stream_upstream_get_round_robin_peer(pc, rrp);
    }

    pc->cached = 0;
    pc->connection = NULL;

    now = ngx_time();

    prev = NULL;

#if (NGX_SUPPRESS_WARN)
    p = 0;
#endif

    for ( ;; ) {

        i = ngx_stream_upstrea...",297.0,403.0,1.0,1.0,107.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6622,467123,ngx_stream_upstream_peek_random_peer,1,ngx_stream_upstream_peek_random_peer,"ngx_uint_t ngx_stream_upstream_peek_random_peer (ngx_stream_upstream_rr_peers_t*,ngx_stream_upstream_random_peer_data_t*)",stream\ngx_stream_upstream_random_module.c,"static ngx_uint_t
ngx_stream_upstream_peek_random_peer(ngx_stream_upstream_rr_peers_t *peers,
    ngx_stream_upstream_random_peer_data_t *rp)
{
    ngx_uint_t  i, j, k, x;

    x = ngx_random() % peers->total_weight;

    i = 0;
    j = peers->number;

    while (j - i > 1) {
        k = (i + j) / 2;

        if (x < rp->conf->ranges[k].range) {
            j = k;

        } else {
            i = k;
        }
    }

    return i;
}",406.0,429.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_uint_t
6623,467129,ngx_stream_upstream_random_create_conf,1,ngx_stream_upstream_random_create_conf,void* ngx_stream_upstream_random_create_conf (ngx_conf_t*),stream\ngx_stream_upstream_random_module.c,"static void *
ngx_stream_upstream_random_create_conf(ngx_conf_t *cf)
{
    ngx_stream_upstream_random_srv_conf_t  *conf;

    conf = ngx_pcalloc(cf->pool, sizeof(ngx_stream_upstream_random_srv_conf_t));
    if (conf == NULL) {
        return NULL;
    }

    /*
     * set by ngx_pcalloc():
     *
     *     conf->two = 0;
     */

    return conf;
}",432.0,449.0,1.0,1.0,18.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,void*
6624,467134,ngx_stream_upstream_random,1,ngx_stream_upstream_random,"char* ngx_stream_upstream_random (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_upstream_random_module.c,"static char *
ngx_stream_upstream_random(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ngx_stream_upstream_random_srv_conf_t  *rcf = conf;

    ngx_str_t                       *value;
    ngx_stream_upstream_srv_conf_t  *uscf;

    uscf = ngx_stream_conf_get_module_srv_conf(cf, ngx_stream_upstream_module);

    if (uscf->peer.init_upstream) {
        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
                           ""load balancing method redefined"");
    }

    uscf->peer.init_upstream = ngx_stream_upstream_init_random;

    uscf->flags = NGX_STREAM_UPSTREAM_CREATE
                  |NGX_STREAM_UPSTREAM_WEIGHT
                  |NGX_STREAM_UPSTREAM_MAX_CONNS
                  |NGX_STREAM_UPSTREAM_MAX_FAILS
                  |NGX_STREAM_UPSTREAM_FAIL_TIMEOUT
                  |NGX_STREAM_UPSTREAM_DOWN;

    if (cf->args->nelts == 1) {
        return NGX_CONF_OK;
    }

    value = cf->args->elts;

    if (ngx_strcmp(value[1].data, ""two"") == 0) {
        rcf->two = 1;

    } ...",452.0,502.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6625,468210,ngx_stream_upstream_get_peer,1,ngx_stream_upstream_get_peer,ngx_stream_upstream_rr_peer_t* ngx_stream_upstream_get_peer (ngx_stream_upstream_rr_peer_data_t*),stream\ngx_stream_upstream_round_robin.c,"static ngx_stream_upstream_rr_peer_t *
ngx_stream_upstream_get_peer(ngx_stream_upstream_rr_peer_data_t *rrp)
{
    time_t                          now;
    uintptr_t                       m;
    ngx_int_t                       total;
    ngx_uint_t                      i, n, p;
    ngx_stream_upstream_rr_peer_t  *peer, *best;

    now = ngx_time();

    best = NULL;
    total = 0;

#if (NGX_SUPPRESS_WARN)
    p = 0;
#endif

    for (peer = rrp->peers->peer, i = 0;
         peer;
         peer = peer->next, i++)
    {
        n = i / (8 * sizeof(uintptr_t));
        m = (uintptr_t) 1 << i % (8 * sizeof(uintptr_t));

        if (rrp->tried[n] & m) {
            continue;
        }

        if (peer->down) {
            continue;
        }

        if (peer->max_fails
            && peer->fails >= peer->max_fails
            && now - peer->checked <= peer->fail_timeout)
        {
            continue;
        }

        if (peer->max_conns && peer->conns >= peer->max_conns) {
         ...",530.0,605.0,1.0,1.0,76.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_stream_upstream_rr_peer_t
6626,468215,ngx_stream_upstream_notify_round_robin_peer,1,ngx_stream_upstream_notify_round_robin_peer,"void ngx_stream_upstream_notify_round_robin_peer (ngx_peer_connection_t*,void*,ngx_uint_t)",stream\ngx_stream_upstream_round_robin.c,"static void
ngx_stream_upstream_notify_round_robin_peer(ngx_peer_connection_t *pc,
    void *data, ngx_uint_t type)
{
    ngx_stream_upstream_rr_peer_data_t  *rrp = data;

    ngx_stream_upstream_rr_peer_t  *peer;

    peer = rrp->current;

    if (type == NGX_STREAM_UPSTREAM_NOTIFY_CONNECT
        && pc->connection->type == SOCK_STREAM)
    {
        ngx_stream_upstream_rr_peers_rlock(rrp->peers);
        ngx_stream_upstream_rr_peer_lock(rrp->peers, peer);

        if (peer->accessed < peer->checked) {
            peer->fails = 0;
        }

        ngx_stream_upstream_rr_peer_unlock(rrp->peers, peer);
        ngx_stream_upstream_rr_peers_unlock(rrp->peers);
    }
}",679.0,702.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
6627,468222,ngx_stream_upstream_init_round_robin,1,ngx_stream_upstream_init_round_robin,"ngx_int_t ngx_stream_upstream_init_round_robin (ngx_conf_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_round_robin.c,"ngx_int_t
ngx_stream_upstream_init_round_robin(ngx_conf_t *cf,
    ngx_stream_upstream_srv_conf_t *us)
{
    ngx_url_t                        u;
    ngx_uint_t                       i, j, n, w, t;
    ngx_stream_upstream_server_t    *server;
    ngx_stream_upstream_rr_peer_t   *peer, **peerp;
    ngx_stream_upstream_rr_peers_t  *peers, *backup;

    us->peer.init = ngx_stream_upstream_init_round_robin_peer;

    if (us->servers) {
        server = us->servers->elts;

        n = 0;
        w = 0;
        t = 0;

        for (i = 0; i < us->servers->nelts; i++) {
            if (server[i].backup) {
                continue;
            }

            n += server[i].naddrs;
            w += server[i].naddrs * server[i].weight;

            if (!server[i].down) {
                t += server[i].naddrs;
            }
        }

        if (n == 0) {
            ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
                          ""no servers in upstream \""%V\"" in %s:%ui"",
                  ...",36.0,259.0,1.0,1.0,224.0,388,14,328,20,1,19,30,53,3,10,,0,16,4,2,2,ngx_int_t
6628,469244,ngx_stream_upstream_init_round_robin_peer,1,ngx_stream_upstream_init_round_robin_peer,"ngx_int_t ngx_stream_upstream_init_round_robin_peer (ngx_stream_session_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_round_robin.c,"ngx_int_t
ngx_stream_upstream_init_round_robin_peer(ngx_stream_session_t *s,
    ngx_stream_upstream_srv_conf_t *us)
{
    ngx_uint_t                           n;
    ngx_stream_upstream_rr_peer_data_t  *rrp;

    rrp = s->upstream->peer.data;

    if (rrp == NULL) {
        rrp = ngx_palloc(s->connection->pool,
                         sizeof(ngx_stream_upstream_rr_peer_data_t));
        if (rrp == NULL) {
            return NGX_ERROR;
        }

        s->upstream->peer.data = rrp;
    }

    rrp->peers = us->peer.data;
    rrp->current = NULL;
    rrp->config = 0;

    n = rrp->peers->number;

    if (rrp->peers->next && rrp->peers->next->number > n) {
        n = rrp->peers->next->number;
    }

    if (n <= 8 * sizeof(uintptr_t)) {
        rrp->tried = &rrp->data;
        rrp->data = 0;

    } else {
        n = (n + (8 * sizeof(uintptr_t) - 1)) / (8 * sizeof(uintptr_t));

        rrp->tried = ngx_pcalloc(s->connection->pool, n * sizeof(uintptr_t));
        if (rrp->tried == N...",262.0,316.0,1.0,30.0,55.0,71,12,39,10,0,15,5,6,2,1,,0,15,4,2,2,ngx_int_t
6629,469467,ngx_stream_upstream_create_round_robin_peer,1,ngx_stream_upstream_create_round_robin_peer,"ngx_int_t ngx_stream_upstream_create_round_robin_peer (ngx_stream_session_t*,ngx_stream_upstream_resolved_t*)",stream\ngx_stream_upstream_round_robin.c,"ngx_int_t
ngx_stream_upstream_create_round_robin_peer(ngx_stream_session_t *s,
    ngx_stream_upstream_resolved_t *ur)
{
    u_char                              *p;
    size_t                               len;
    socklen_t                            socklen;
    ngx_uint_t                           i, n;
    struct sockaddr                     *sockaddr;
    ngx_stream_upstream_rr_peer_t       *peer, **peerp;
    ngx_stream_upstream_rr_peers_t      *peers;
    ngx_stream_upstream_rr_peer_data_t  *rrp;

    rrp = s->upstream->peer.data;

    if (rrp == NULL) {
        rrp = ngx_palloc(s->connection->pool,
                         sizeof(ngx_stream_upstream_rr_peer_data_t));
        if (rrp == NULL) {
            return NGX_ERROR;
        }

        s->upstream->peer.data = rrp;
    }

    peers = ngx_pcalloc(s->connection->pool,
                        sizeof(ngx_stream_upstream_rr_peers_t));
    if (peers == NULL) {
        return NGX_ERROR;
    }

    peer = ngx_pcalloc(s->connec...",319.0,437.0,1.0,30.0,119.0,112,11,66,12,0,21,7,8,1,3,,0,21,4,2,2,ngx_int_t
6630,469982,ngx_stream_upstream_get_round_robin_peer,1,ngx_stream_upstream_get_round_robin_peer,"ngx_int_t ngx_stream_upstream_get_round_robin_peer (ngx_peer_connection_t*,void*)",stream\ngx_stream_upstream_round_robin.c,"ngx_int_t
ngx_stream_upstream_get_round_robin_peer(ngx_peer_connection_t *pc, void *data)
{
    ngx_stream_upstream_rr_peer_data_t *rrp = data;

    ngx_int_t                        rc;
    ngx_uint_t                       i, n;
    ngx_stream_upstream_rr_peer_t   *peer;
    ngx_stream_upstream_rr_peers_t  *peers;

    ngx_log_debug1(NGX_LOG_DEBUG_STREAM, pc->log, 0,
                   ""get rr peer, try: %ui"", pc->tries);

    pc->connection = NULL;

    peers = rrp->peers;
    ngx_stream_upstream_rr_peers_wlock(peers);

    if (peers->single) {
        peer = peers->peer;

        if (peer->down) {
            goto failed;
        }

        if (peer->max_conns && peer->conns >= peer->max_conns) {
            goto failed;
        }

        rrp->current = peer;

    } else {

        /* there are several peers */

        peer = ngx_stream_upstream_get_peer(rrp);

        if (peer == NULL) {
            goto failed;
        }

        ngx_log_debug2(NGX_LOG_DEBUG_STREAM, pc->log, 0...",440.0,527.0,1.0,1.0,88.0,55,14,54,13,0,5,9,11,0,0,,0,5,4,2,2,ngx_int_t
6631,470416,ngx_stream_upstream_free_round_robin_peer,1,ngx_stream_upstream_free_round_robin_peer,"void ngx_stream_upstream_free_round_robin_peer (ngx_peer_connection_t*,void*,ngx_uint_t)",stream\ngx_stream_upstream_round_robin.c,"void
ngx_stream_upstream_free_round_robin_peer(ngx_peer_connection_t *pc, void *data,
    ngx_uint_t state)
{
    ngx_stream_upstream_rr_peer_data_t  *rrp = data;

    time_t                          now;
    ngx_stream_upstream_rr_peer_t  *peer;

    ngx_log_debug2(NGX_LOG_DEBUG_STREAM, pc->log, 0,
                   ""free rr peer %ui %ui"", pc->tries, state);

    peer = rrp->current;

    ngx_stream_upstream_rr_peers_rlock(rrp->peers);
    ngx_stream_upstream_rr_peer_lock(rrp->peers, peer);

    if (rrp->peers->single) {
        peer->conns--;

        ngx_stream_upstream_rr_peer_unlock(rrp->peers, peer);
        ngx_stream_upstream_rr_peers_unlock(rrp->peers);

        pc->tries = 0;
        return;
    }

    if (state & NGX_PEER_FAILED) {
        now = ngx_time();

        peer->fails++;
        peer->accessed = now;
        peer->checked = now;

        if (peer->max_fails) {
            peer->effective_weight -= peer->weight / peer->max_fails;

            if (peer->fails >= ...",608.0,676.0,1.0,1.0,69.0,46,9,45,9,0,9,7,11,1,1,,0,8,6,3,3,void
6632,470757,ngx_stream_upstream_zone,1,ngx_stream_upstream_zone,"char* ngx_stream_upstream_zone (ngx_conf_t*,ngx_command_t*,void*)",stream\ngx_stream_upstream_zone_module.c,"static char *
ngx_stream_upstream_zone(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    ssize_t                           size;
    ngx_str_t                        *value;
    ngx_stream_upstream_srv_conf_t   *uscf;
    ngx_stream_upstream_main_conf_t  *umcf;

    uscf = ngx_stream_conf_get_module_srv_conf(cf, ngx_stream_upstream_module);
    umcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_upstream_module);

    value = cf->args->elts;

    if (!value[1].len) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid zone name \""%V\"""", &value[1]);
        return NGX_CONF_ERROR;
    }

    if (cf->args->nelts == 3) {
        size = ngx_parse_size(&value[2]);

        if (size == NGX_ERROR) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""invalid zone size \""%V\"""", &value[2]);
            return NGX_CONF_ERROR;
        }

        if (size < (ssize_t) (8 * ngx_pagesize)) {
            ngx_conf_log_error(...",64.0,114.0,1.0,1.0,51.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,char*
6633,470764,ngx_stream_upstream_init_zone,1,ngx_stream_upstream_init_zone,"ngx_int_t ngx_stream_upstream_init_zone (ngx_shm_zone_t*,void*)",stream\ngx_stream_upstream_zone_module.c,"static ngx_int_t
ngx_stream_upstream_init_zone(ngx_shm_zone_t *shm_zone, void *data)
{
    size_t                            len;
    ngx_uint_t                        i;
    ngx_slab_pool_t                  *shpool;
    ngx_stream_upstream_rr_peers_t   *peers, **peersp;
    ngx_stream_upstream_srv_conf_t   *uscf, **uscfp;
    ngx_stream_upstream_main_conf_t  *umcf;

    shpool = (ngx_slab_pool_t *) shm_zone->shm.addr;
    umcf = shm_zone->data;
    uscfp = umcf->upstreams.elts;

    if (shm_zone->shm.exists) {
        peers = shpool->data;

        for (i = 0; i < umcf->upstreams.nelts; i++) {
            uscf = uscfp[i];

            if (uscf->shm_zone != shm_zone) {
                continue;
            }

            uscf->peer.data = peers;
            peers = peers->zone_next;
        }

        return NGX_OK;
    }

    len = sizeof("" in upstream zone \""\"""") + shm_zone->shm.name.len;

    shpool->log_ctx = ngx_slab_alloc(shpool, len);
    if (shpool->log_ctx == NULL) {
      ...",117.0,180.0,1.0,1.0,64.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_int_t
6634,470770,ngx_stream_upstream_zone_copy_peers,1,ngx_stream_upstream_zone_copy_peers,"ngx_stream_upstream_rr_peers_t* ngx_stream_upstream_zone_copy_peers (ngx_slab_pool_t*,ngx_stream_upstream_srv_conf_t*)",stream\ngx_stream_upstream_zone_module.c,"static ngx_stream_upstream_rr_peers_t *
ngx_stream_upstream_zone_copy_peers(ngx_slab_pool_t *shpool,
    ngx_stream_upstream_srv_conf_t *uscf)
{
    ngx_str_t                       *name;
    ngx_stream_upstream_rr_peer_t   *peer, **peerp;
    ngx_stream_upstream_rr_peers_t  *peers, *backup;

    peers = ngx_slab_alloc(shpool, sizeof(ngx_stream_upstream_rr_peers_t));
    if (peers == NULL) {
        return NULL;
    }

    ngx_memcpy(peers, uscf->peer.data, sizeof(ngx_stream_upstream_rr_peers_t));

    name = ngx_slab_alloc(shpool, sizeof(ngx_str_t));
    if (name == NULL) {
        return NULL;
    }

    name->data = ngx_slab_alloc(shpool, peers->name->len);
    if (name->data == NULL) {
        return NULL;
    }

    ngx_memcpy(name->data, peers->name->data, peers->name->len);
    name->len = peers->name->len;

    peers->name = name;

    peers->shpool = shpool;

    for (peerp = &peers->peer; *peerp; peerp = &peer->next) {
        /* pool is unlocked */
        peer = ngx_stre...",183.0,257.0,1.0,1.0,75.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_stream_upstream_rr_peers_t
6635,470776,ngx_stream_upstream_zone_copy_peer,1,ngx_stream_upstream_zone_copy_peer,"ngx_stream_upstream_rr_peer_t* ngx_stream_upstream_zone_copy_peer (ngx_stream_upstream_rr_peers_t*,ngx_stream_upstream_rr_peer_t*)",stream\ngx_stream_upstream_zone_module.c,"static ngx_stream_upstream_rr_peer_t *
ngx_stream_upstream_zone_copy_peer(ngx_stream_upstream_rr_peers_t *peers,
    ngx_stream_upstream_rr_peer_t *src)
{
    ngx_slab_pool_t                *pool;
    ngx_stream_upstream_rr_peer_t  *dst;

    pool = peers->shpool;

    dst = ngx_slab_calloc_locked(pool, sizeof(ngx_stream_upstream_rr_peer_t));
    if (dst == NULL) {
        return NULL;
    }

    if (src) {
        ngx_memcpy(dst, src, sizeof(ngx_stream_upstream_rr_peer_t));
        dst->sockaddr = NULL;
        dst->name.data = NULL;
        dst->server.data = NULL;
    }

    dst->sockaddr = ngx_slab_calloc_locked(pool, sizeof(ngx_sockaddr_t));
    if (dst->sockaddr == NULL) {
        goto failed;
    }

    dst->name.data = ngx_slab_calloc_locked(pool, NGX_SOCKADDR_STRLEN);
    if (dst->name.data == NULL) {
        goto failed;
    }

    if (src) {
        ngx_memcpy(dst->sockaddr, src->sockaddr, src->socklen);
        ngx_memcpy(dst->name.data, src->name.data, src->name.len);

...",260.0,322.0,1.0,1.0,63.0,0,0,0,0,0,0,1,1,0,0,,0,0,4,2,2,ngx_stream_upstream_rr_peer_t
6636,471597,ngx_stream_add_prefix_variable,1,ngx_stream_add_prefix_variable,"ngx_stream_variable_t* ngx_stream_add_prefix_variable (ngx_conf_t*,ngx_str_t*,ngx_uint_t)",stream\ngx_stream_variables.c,"static ngx_stream_variable_t *
ngx_stream_add_prefix_variable(ngx_conf_t *cf, ngx_str_t *name,
    ngx_uint_t flags)
{
    ngx_uint_t                    i;
    ngx_stream_variable_t        *v;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    v = cmcf->prefix_variables.elts;
    for (i = 0; i < cmcf->prefix_variables.nelts; i++) {
        if (name->len != v[i].name.len
            || ngx_strncasecmp(name->data, v[i].name.data, name->len) != 0)
        {
            continue;
        }

        v = &v[i];

        if (!(v->flags & NGX_STREAM_VAR_CHANGEABLE)) {
            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                               ""the duplicate \""%V\"" variable"", name);
            return NULL;
        }

        if (!(flags & NGX_STREAM_VAR_WEAK)) {
            v->flags &= ~NGX_STREAM_VAR_WEAK;
        }

        return v;
    }

    v = ngx_array_push(&cmcf->prefix_variables);
    if (v == NULL) {
...",216.0,269.0,1.0,1.0,54.0,0,0,0,0,1,0,1,1,0,0,,0,0,6,3,3,ngx_stream_variable_t
6637,471604,ngx_stream_variable_binary_remote_addr,1,ngx_stream_variable_binary_remote_addr,"ngx_int_t ngx_stream_variable_binary_remote_addr (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_binary_remote_addr(ngx_stream_session_t *s,
     ngx_stream_variable_value_t *v, uintptr_t data)
{
    struct sockaddr_in   *sin;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6  *sin6;
#endif

    switch (s->connection->sockaddr->sa_family) {

#if (NGX_HAVE_INET6)
    case AF_INET6:
        sin6 = (struct sockaddr_in6 *) s->connection->sockaddr;

        v->len = sizeof(struct in6_addr);
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = sin6->sin6_addr.s6_addr;

        break;
#endif

#if (NGX_HAVE_UNIX_DOMAIN)
    case AF_UNIX:

        v->len = s->connection->addr_text.len;
        v->valid = 1;
        v->no_cacheable = 0;
        v->not_found = 0;
        v->data = s->connection->addr_text.data;

        break;
#endif

    default: /* AF_INET */
        sin = (struct sockaddr_in *) s->connection->sockaddr;

        v->len = sizeof(in_addr_t);
        v->valid = 1;
        v->no_cacheable = 0;
       ...",474.0,523.0,1.0,1.0,50.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6638,471611,ngx_stream_variable_remote_addr,1,ngx_stream_variable_remote_addr,"ngx_int_t ngx_stream_variable_remote_addr (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_remote_addr(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    v->len = s->connection->addr_text.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = s->connection->addr_text.data;

    return NGX_OK;
}",526.0,537.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6639,471618,ngx_stream_variable_remote_port,1,ngx_stream_variable_remote_port,"ngx_int_t ngx_stream_variable_remote_port (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_remote_port(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t  port;

    v->len = 0;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = ngx_pnalloc(s->connection->pool, sizeof(""65535"") - 1);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    port = ngx_inet_get_port(s->connection->sockaddr);

    if (port > 0 && port < 65536) {
        v->len = ngx_sprintf(v->data, ""%ui"", port) - v->data;
    }

    return NGX_OK;
}",540.0,563.0,1.0,1.0,24.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6640,471625,ngx_stream_variable_proxy_protocol_addr,1,ngx_stream_variable_proxy_protocol_addr,"ngx_int_t ngx_stream_variable_proxy_protocol_addr (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_proxy_protocol_addr(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_str_t             *addr;
    ngx_proxy_protocol_t  *pp;

    pp = s->connection->proxy_protocol;
    if (pp == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    addr = (ngx_str_t *) ((char *) pp + data);

    v->len = addr->len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = addr->data;

    return NGX_OK;
}",566.0,588.0,1.0,1.0,23.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6641,471632,ngx_stream_variable_proxy_protocol_port,1,ngx_stream_variable_proxy_protocol_port,"ngx_int_t ngx_stream_variable_proxy_protocol_port (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_proxy_protocol_port(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t             port;
    ngx_proxy_protocol_t  *pp;

    pp = s->connection->proxy_protocol;
    if (pp == NULL) {
        v->not_found = 1;
        return NGX_OK;
    }

    v->len = 0;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    v->data = ngx_pnalloc(s->connection->pool, sizeof(""65535"") - 1);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    port = *(in_port_t *) ((char *) pp + data);

    if (port > 0 && port < 65536) {
        v->len = ngx_sprintf(v->data, ""%ui"", port) - v->data;
    }

    return NGX_OK;
}",591.0,621.0,1.0,1.0,31.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6642,471639,ngx_stream_variable_server_addr,1,ngx_stream_variable_server_addr,"ngx_int_t ngx_stream_variable_server_addr (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_server_addr(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_str_t  str;
    u_char     addr[NGX_SOCKADDR_STRLEN];

    str.len = NGX_SOCKADDR_STRLEN;
    str.data = addr;

    if (ngx_connection_local_sockaddr(s->connection, &str, 0) != NGX_OK) {
        return NGX_ERROR;
    }

    str.data = ngx_pnalloc(s->connection->pool, str.len);
    if (str.data == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(str.data, addr, str.len);

    v->len = str.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = str.data;

    return NGX_OK;
}",624.0,652.0,1.0,1.0,29.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6643,471646,ngx_stream_variable_server_port,1,ngx_stream_variable_server_port,"ngx_int_t ngx_stream_variable_server_port (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_server_port(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    ngx_uint_t  port;

    v->len = 0;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    if (ngx_connection_local_sockaddr(s->connection, NULL, 0) != NGX_OK) {
        return NGX_ERROR;
    }

    v->data = ngx_pnalloc(s->connection->pool, sizeof(""65535"") - 1);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    port = ngx_inet_get_port(s->connection->local_sockaddr);

    if (port > 0 && port < 65536) {
        v->len = ngx_sprintf(v->data, ""%ui"", port) - v->data;
    }

    return NGX_OK;
}",655.0,682.0,1.0,1.0,28.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6644,471653,ngx_stream_variable_bytes,1,ngx_stream_variable_bytes,"ngx_int_t ngx_stream_variable_bytes (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_bytes(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(s->connection->pool, NGX_OFF_T_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    if (data == 1) {
        v->len = ngx_sprintf(p, ""%O"", s->received) - p;

    } else {
        v->len = ngx_sprintf(p, ""%O"", s->connection->sent) - p;
    }

    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",685.0,709.0,1.0,1.0,25.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6645,471660,ngx_stream_variable_session_time,1,ngx_stream_variable_session_time,"ngx_int_t ngx_stream_variable_session_time (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_session_time(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char          *p;
    ngx_time_t      *tp;
    ngx_msec_int_t   ms;

    p = ngx_pnalloc(s->connection->pool, NGX_TIME_T_LEN + 4);
    if (p == NULL) {
        return NGX_ERROR;
    }

    tp = ngx_timeofday();

    ms = (ngx_msec_int_t)
             ((tp->sec - s->start_sec) * 1000 + (tp->msec - s->start_msec));
    ms = ngx_max(ms, 0);

    v->len = ngx_sprintf(p, ""%T.%03M"", (time_t) ms / 1000, ms % 1000) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",712.0,738.0,1.0,1.0,27.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6646,471667,ngx_stream_variable_status,1,ngx_stream_variable_status,"ngx_int_t ngx_stream_variable_status (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_status(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    v->data = ngx_pnalloc(s->connection->pool, NGX_INT_T_LEN);
    if (v->data == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(v->data, ""%03ui"", s->status) - v->data;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;

    return NGX_OK;
}",741.0,756.0,1.0,1.0,16.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6647,471674,ngx_stream_variable_connection,1,ngx_stream_variable_connection,"ngx_int_t ngx_stream_variable_connection (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_connection(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(s->connection->pool, NGX_ATOMIC_T_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(p, ""%uA"", s->connection->number) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",759.0,777.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6648,471681,ngx_stream_variable_nginx_version,1,ngx_stream_variable_nginx_version,"ngx_int_t ngx_stream_variable_nginx_version (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_nginx_version(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    v->len = sizeof(NGINX_VERSION) - 1;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = (u_char *) NGINX_VERSION;

    return NGX_OK;
}",780.0,791.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6649,471688,ngx_stream_variable_hostname,1,ngx_stream_variable_hostname,"ngx_int_t ngx_stream_variable_hostname (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_hostname(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    v->len = ngx_cycle->hostname.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = ngx_cycle->hostname.data;

    return NGX_OK;
}",794.0,805.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6650,471695,ngx_stream_variable_pid,1,ngx_stream_variable_pid,"ngx_int_t ngx_stream_variable_pid (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_pid(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(s->connection->pool, NGX_INT64_LEN);
    if (p == NULL) {
        return NGX_ERROR;
    }

    v->len = ngx_sprintf(p, ""%P"", ngx_pid) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",808.0,826.0,1.0,1.0,19.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6651,471702,ngx_stream_variable_msec,1,ngx_stream_variable_msec,"ngx_int_t ngx_stream_variable_msec (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_msec(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char      *p;
    ngx_time_t  *tp;

    p = ngx_pnalloc(s->connection->pool, NGX_TIME_T_LEN + 4);
    if (p == NULL) {
        return NGX_ERROR;
    }

    tp = ngx_timeofday();

    v->len = ngx_sprintf(p, ""%T.%03M"", tp->sec, tp->msec) - p;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",829.0,850.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6652,471709,ngx_stream_variable_time_iso8601,1,ngx_stream_variable_time_iso8601,"ngx_int_t ngx_stream_variable_time_iso8601 (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_time_iso8601(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(s->connection->pool, ngx_cached_http_log_iso8601.len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(p, ngx_cached_http_log_iso8601.data,
               ngx_cached_http_log_iso8601.len);

    v->len = ngx_cached_http_log_iso8601.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",853.0,874.0,1.0,1.0,22.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6653,471716,ngx_stream_variable_time_local,1,ngx_stream_variable_time_local,"ngx_int_t ngx_stream_variable_time_local (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_time_local(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    u_char  *p;

    p = ngx_pnalloc(s->connection->pool, ngx_cached_http_log_time.len);
    if (p == NULL) {
        return NGX_ERROR;
    }

    ngx_memcpy(p, ngx_cached_http_log_time.data, ngx_cached_http_log_time.len);

    v->len = ngx_cached_http_log_time.len;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = p;

    return NGX_OK;
}",877.0,897.0,1.0,1.0,21.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6654,471723,ngx_stream_variable_protocol,1,ngx_stream_variable_protocol,"ngx_int_t ngx_stream_variable_protocol (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.c,"static ngx_int_t
ngx_stream_variable_protocol(ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data)
{
    v->len = 3;
    v->valid = 1;
    v->no_cacheable = 0;
    v->not_found = 0;
    v->data = (u_char *) (s->connection->type == SOCK_DGRAM ? ""UDP"" : ""TCP"");

    return NGX_OK;
}",900.0,911.0,1.0,1.0,12.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6655,471925,ngx_stream_add_variable,1,ngx_stream_add_variable,"ngx_stream_variable_t ngx_stream_add_variable (ngx_conf_t*,ngx_str_t*,ngx_uint_t)",stream\ngx_stream_variables.c,"ngx_stream_variable_t *
ngx_stream_add_variable(ngx_conf_t *cf, ngx_str_t *name, ngx_uint_t flags)
{
    ngx_int_t                     rc;
    ngx_uint_t                    i;
    ngx_hash_key_t               *key;
    ngx_stream_variable_t        *v;
    ngx_stream_core_main_conf_t  *cmcf;

    if (name->len == 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""$\"""");
        return NULL;
    }

    if (flags & NGX_STREAM_VAR_PREFIX) {
        return ngx_stream_add_prefix_variable(cf, name, flags);
    }

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    key = cmcf->variables_keys->keys.elts;
    for (i = 0; i < cmcf->variables_keys->keys.nelts; i++) {
        if (name->len != key[i].key.len
            || ngx_strncasecmp(name->data, key[i].key.data, name->len) != 0)
        {
            continue;
        }

        v = key[i].value;

        if (!(v->flags & NGX_STREAM_VAR_CHANGEABLE)) {
      ...",137.0,213.0,1.0,1.0,77.0,71,13,77,17,1,20,12,14,6,9,,0,15,6,3,3,ngx_stream_variable_t
6656,472369,ngx_stream_get_variable_index,1,ngx_stream_get_variable_index,"ngx_int_t ngx_stream_get_variable_index (ngx_conf_t*,ngx_str_t*)",stream\ngx_stream_variables.c,"ngx_int_t
ngx_stream_get_variable_index(ngx_conf_t *cf, ngx_str_t *name)
{
    ngx_uint_t                    i;
    ngx_stream_variable_t        *v;
    ngx_stream_core_main_conf_t  *cmcf;

    if (name->len == 0) {
        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
                           ""invalid variable name \""$\"""");
        return NGX_ERROR;
    }

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    v = cmcf->variables.elts;

    if (v == NULL) {
        if (ngx_array_init(&cmcf->variables, cf->pool, 4,
                           sizeof(ngx_stream_variable_t))
            != NGX_OK)
        {
            return NGX_ERROR;
        }

    } else {
        for (i = 0; i < cmcf->variables.nelts; i++) {
            if (name->len != v[i].name.len
                || ngx_strncasecmp(name->data, v[i].name.data, name->len) != 0)
            {
                continue;
            }

            return i;
        }
    }

    v = ngx_array_push(&cmcf->variab...",272.0,329.0,1.0,1.0,58.0,46,8,41,10,0,14,6,7,3,5,,0,12,4,2,2,ngx_int_t
6657,472570,ngx_stream_get_indexed_variable,1,ngx_stream_get_indexed_variable,"ngx_stream_variable_value_t ngx_stream_get_indexed_variable (ngx_stream_session_t*,ngx_uint_t)",stream\ngx_stream_variables.c,"ngx_stream_variable_value_t *
ngx_stream_get_indexed_variable(ngx_stream_session_t *s, ngx_uint_t index)
{
    ngx_stream_variable_t        *v;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_get_module_main_conf(s, ngx_stream_core_module);

    if (cmcf->variables.nelts <= index) {
        ngx_log_error(NGX_LOG_ALERT, s->connection->log, 0,
                      ""unknown variable index: %ui"", index);
        return NULL;
    }

    if (s->variables[index].not_found || s->variables[index].valid) {
        return &s->variables[index];
    }

    v = cmcf->variables.elts;

    if (ngx_stream_variable_depth == 0) {
        ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                      ""cycle while evaluating variable \""%V\"""",
                      &v[index].name);
        return NULL;
    }

    ngx_stream_variable_depth--;

    if (v[index].get_handler(s, &s->variables[index], v[index].data)
        == NGX_OK)
    {
        ngx_stream_variable_depth++;

       ...",332.0,379.0,1.0,1.0,48.0,54,11,46,11,3,8,6,7,2,2,,0,6,4,2,2,ngx_stream_variable_value_t
6658,472730,ngx_stream_get_flushed_variable,1,ngx_stream_get_flushed_variable,"ngx_stream_variable_value_t ngx_stream_get_flushed_variable (ngx_stream_session_t*,ngx_uint_t)",stream\ngx_stream_variables.c,"ngx_stream_variable_value_t *
ngx_stream_get_flushed_variable(ngx_stream_session_t *s, ngx_uint_t index)
{
    ngx_stream_variable_value_t  *v;

    v = &s->variables[index];

    if (v->valid || v->not_found) {
        if (!v->no_cacheable) {
            return v;
        }

        v->valid = 0;
        v->not_found = 0;
    }

    return ngx_stream_get_indexed_variable(s, index);
}",382.0,399.0,1.0,1.0,18.0,13,6,11,3,1,1,3,4,0,1,,0,0,4,2,2,ngx_stream_variable_value_t
6659,472776,ngx_stream_get_variable,1,ngx_stream_get_variable,"ngx_stream_variable_value_t ngx_stream_get_variable (ngx_stream_session_t*,ngx_str_t*,ngx_uint_t)",stream\ngx_stream_variables.c,"ngx_stream_variable_value_t *
ngx_stream_get_variable(ngx_stream_session_t *s, ngx_str_t *name,
    ngx_uint_t key)
{
    size_t                        len;
    ngx_uint_t                    i, n;
    ngx_stream_variable_t        *v;
    ngx_stream_variable_value_t  *vv;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_get_module_main_conf(s, ngx_stream_core_module);

    v = ngx_hash_find(&cmcf->variables_hash, key, name->data, name->len);

    if (v) {
        if (v->flags & NGX_STREAM_VAR_INDEXED) {
            return ngx_stream_get_flushed_variable(s, v->index);
        }

        if (ngx_stream_variable_depth == 0) {
            ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
                          ""cycle while evaluating variable \""%V\"""", name);
            return NULL;
        }

        ngx_stream_variable_depth--;

        vv = ngx_palloc(s->connection->pool,
                        sizeof(ngx_stream_variable_value_t));

        if (vv && v->get_handler(s...",402.0,471.0,1.0,1.0,70.0,70,16,73,16,0,19,10,15,6,5,,0,17,6,3,3,ngx_stream_variable_value_t
6660,474235,ngx_stream_map_find,1,ngx_stream_map_find,"void* ngx_stream_map_find (ngx_stream_session_t*,ngx_stream_map_t*,ngx_str_t*)",stream\ngx_stream_variables.c,"void *
ngx_stream_map_find(ngx_stream_session_t *s, ngx_stream_map_t *map,
    ngx_str_t *match)
{
    void        *value;
    u_char      *low;
    size_t       len;
    ngx_uint_t   key;

    len = match->len;

    if (len) {
        low = ngx_pnalloc(s->connection->pool, len);
        if (low == NULL) {
            return NULL;
        }

    } else {
        low = NULL;
    }

    key = ngx_hash_strlow(low, match->data, len);

    value = ngx_hash_find_combined(&map->hash, key, low, len);
    if (value) {
        return value;
    }

#if (NGX_PCRE)

    if (len && map->nregex) {
        ngx_int_t                n;
        ngx_uint_t               i;
        ngx_stream_map_regex_t  *reg;

        reg = map->regex;

        for (i = 0; i < map->nregex; i++) {

            n = ngx_stream_regex_exec(s, reg[i].regex, match);

            if (n == NGX_OK) {
                return reg[i].value;
            }

            if (n == NGX_DECLINED) {
                continue;
            }
...",914.0,972.0,1.0,1.0,59.0,11,4,21,8,1,6,4,5,0,3,,0,6,6,3,3,void*
6661,474300,ngx_stream_variables_add_core_vars,1,ngx_stream_variables_add_core_vars,ngx_int_t ngx_stream_variables_add_core_vars (ngx_conf_t*),stream\ngx_stream_variables.c,"ngx_int_t
ngx_stream_variables_add_core_vars(ngx_conf_t *cf)
{
    ngx_stream_variable_t        *cv, *v;
    ngx_stream_core_main_conf_t  *cmcf;

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    cmcf->variables_keys = ngx_pcalloc(cf->temp_pool,
                                       sizeof(ngx_hash_keys_arrays_t));
    if (cmcf->variables_keys == NULL) {
        return NGX_ERROR;
    }

    cmcf->variables_keys->pool = cf->pool;
    cmcf->variables_keys->temp_pool = cf->pool;

    if (ngx_hash_keys_array_init(cmcf->variables_keys, NGX_HASH_SMALL)
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    if (ngx_array_init(&cmcf->prefix_variables, cf->pool, 8,
                       sizeof(ngx_stream_variable_t))
        != NGX_OK)
    {
        return NGX_ERROR;
    }

    for (cv = ngx_stream_core_variables; cv->name.len; cv++) {
        v = ngx_stream_add_variable(cf, &cv->name, cv->flags);
        if (v == NULL) {
            return NGX_ERROR;...",1130.0,1170.0,1.0,1.0,41.0,33,8,35,12,0,11,6,7,5,4,,0,11,2,1,1,ngx_int_t
6662,474416,ngx_stream_variables_init_vars,1,ngx_stream_variables_init_vars,ngx_int_t ngx_stream_variables_init_vars (ngx_conf_t*),stream\ngx_stream_variables.c,"ngx_int_t
ngx_stream_variables_init_vars(ngx_conf_t *cf)
{
    size_t                        len;
    ngx_uint_t                    i, n;
    ngx_hash_key_t               *key;
    ngx_hash_init_t               hash;
    ngx_stream_variable_t        *v, *av, *pv;
    ngx_stream_core_main_conf_t  *cmcf;

    /* set the handlers for the indexed stream variables */

    cmcf = ngx_stream_conf_get_module_main_conf(cf, ngx_stream_core_module);

    v = cmcf->variables.elts;
    pv = cmcf->prefix_variables.elts;
    key = cmcf->variables_keys->keys.elts;

    for (i = 0; i < cmcf->variables.nelts; i++) {

        for (n = 0; n < cmcf->variables_keys->keys.nelts; n++) {

            av = key[n].value;

            if (v[i].name.len == key[n].key.len
                && ngx_strncmp(v[i].name.data, key[n].key.data, v[i].name.len)
                   == 0)
            {
                v[i].get_handler = av->get_handler;
                v[i].data = av->data;

                av->flags |= NGX_ST...",1173.0,1278.0,1.0,1.0,106.0,161,13,122,20,0,22,16,24,7,2,,0,21,2,1,1,ngx_int_t
6663,474868,ngx_stream_set_variable_pt,1,ngx_stream_set_variable_pt,"void ngx_stream_set_variable_pt (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.h,"typedef void (*ngx_stream_set_variable_pt) (ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data);",23.0,24.0,14.0,51.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,void
6664,474875,ngx_stream_get_variable_pt,1,ngx_stream_get_variable_pt,"ngx_int_t ngx_stream_get_variable_pt (ngx_stream_session_t*,ngx_stream_variable_value_t*,uintptr_t)",stream\ngx_stream_variables.h,"typedef ngx_int_t (*ngx_stream_get_variable_pt) (ngx_stream_session_t *s,
    ngx_stream_variable_value_t *v, uintptr_t data);",25.0,26.0,19.0,51.0,2.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6665,474960,ngx_stream_write_filter,1,ngx_stream_write_filter,"ngx_int_t ngx_stream_write_filter (ngx_stream_session_t*,ngx_chain_t*,ngx_uint_t)",stream\ngx_stream_write_filter_module.c,"static ngx_int_t
ngx_stream_write_filter(ngx_stream_session_t *s, ngx_chain_t *in,
    ngx_uint_t from_upstream)
{
    off_t                           size;
    ngx_uint_t                      last, flush, sync;
    ngx_chain_t                    *cl, *ln, **ll, **out, *chain;
    ngx_connection_t               *c;
    ngx_stream_write_filter_ctx_t  *ctx;

    ctx = ngx_stream_get_module_ctx(s, ngx_stream_write_filter_module);

    if (ctx == NULL) {
        ctx = ngx_pcalloc(s->connection->pool,
                          sizeof(ngx_stream_write_filter_ctx_t));
        if (ctx == NULL) {
            return NGX_ERROR;
        }

        ngx_stream_set_ctx(s, ctx, ngx_stream_write_filter_module);
    }

    if (from_upstream) {
        c = s->connection;
        out = &ctx->from_upstream;

    } else {
        c = s->upstream->peer.connection;
        out = &ctx->from_downstream;
    }

    if (c->error) {
        return NGX_ERROR;
    }

    size = 0;
    flush = 0;
    sync = 0;
   ...",52.0,297.0,1.0,1.0,246.0,0,0,0,0,0,0,1,1,0,0,,0,0,6,3,3,ngx_int_t
6666,474967,ngx_stream_write_filter_init,1,ngx_stream_write_filter_init,ngx_int_t ngx_stream_write_filter_init (ngx_conf_t*),stream\ngx_stream_write_filter_module.c,"static ngx_int_t
ngx_stream_write_filter_init(ngx_conf_t *cf)
{
    ngx_stream_top_filter = ngx_stream_write_filter;

    return NGX_OK;
}",300.0,306.0,1.0,1.0,7.0,0,0,0,0,0,0,1,1,0,0,,0,0,2,1,1,ngx_int_t
6667,3523,ngx_array_t,4,ngx_array_t,,core\ngx_array.h,"typedef struct {
    void        *elts;
    ngx_uint_t   nelts;
    size_t       size;
    ngx_uint_t   nalloc;
    ngx_pool_t  *pool;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6668,4367,ngx_buf_tag_t,4,ngx_buf_tag_t,,core\ngx_buf.h,typedef void *            ngx_buf_tag_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6669,4368,ngx_buf_s,4,ngx_buf_s,,core\ngx_buf.h,typedef struct ngx_buf_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6670,4369,ngx_buf_t,4,ngx_buf_t,,core\ngx_buf.h,typedef struct ngx_buf_s  ngx_buf_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6671,4370,ngx_buf_s,4,ngx_buf_s,,core\ngx_buf.h,"struct ngx_buf_s {
    u_char          *pos;
    u_char          *last;
    off_t            file_pos;
    off_t            file_last;

    u_char          *start;         /* start of buffer */
    u_char          *end;           /* end of buffer */
    ngx_buf_tag_t    tag;
    ngx_file_t      *file;
    ngx_buf_t       *shadow;


    /* the buf's content could be changed */
    unsigned         temporary:1;

    /*
     * the buf's content is in a memory cache or in a read only memory
     * and must not be changed
     */
    unsigned         memory:1;

    /* the buf's content is mmap()ed and must not be changed */
    unsigned         mmap:1;

    unsigned         recycled:1;
    unsigned         in_file:1;
    unsigned         flush:1;
    unsigned         sync:1;
    unsigned         last_buf:1;
    unsigned         last_in_chain:1;

    unsigned         last_shadow:1;
    unsigned         temp_file:1;

    /* STUB */ int   num;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6672,4392,ngx_chain_s,4,ngx_chain_s,,core\ngx_buf.h,"struct ngx_chain_s {
    ngx_buf_t    *buf;
    ngx_chain_t  *next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6673,4395,ngx_bufs_t,4,ngx_bufs_t,,core\ngx_buf.h,"typedef struct {
    ngx_int_t    num;
    size_t       size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6674,4399,ngx_output_chain_ctx_s,4,ngx_output_chain_ctx_s,,core\ngx_buf.h,typedef struct ngx_output_chain_ctx_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6675,4400,ngx_output_chain_ctx_t,4,ngx_output_chain_ctx_t,,core\ngx_buf.h,typedef struct ngx_output_chain_ctx_s  ngx_output_chain_ctx_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6676,4413,ngx_output_chain_ctx_s,4,ngx_output_chain_ctx_s,,core\ngx_buf.h,"struct ngx_output_chain_ctx_s {
    ngx_buf_t                   *buf;
    ngx_chain_t                 *in;
    ngx_chain_t                 *free;
    ngx_chain_t                 *busy;

    unsigned                     sendfile:1;
    unsigned                     directio:1;
    unsigned                     unaligned:1;
    unsigned                     need_in_memory:1;
    unsigned                     need_in_temp:1;
    unsigned                     aio:1;

#if (NGX_HAVE_FILE_AIO || NGX_COMPAT)
    ngx_output_chain_aio_pt      aio_handler;
#if (NGX_HAVE_AIO_SENDFILE || NGX_COMPAT)
    ssize_t                    (*aio_preload)(ngx_buf_t *file);
#endif
#endif

#if (NGX_THREADS || NGX_COMPAT)
    ngx_int_t                  (*thread_handler)(ngx_thread_task_t *task,
                                                 ngx_file_t *file);
    ngx_thread_task_t           *thread_task;
#endif

    off_t                        alignment;

    ngx_pool_t                  *pool;
    ngx_int_t    ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6677,4444,ngx_chain_writer_ctx_t,4,ngx_chain_writer_ctx_t,,core\ngx_buf.h,"typedef struct {
    ngx_chain_t                 *out;
    ngx_chain_t                **last;
    ngx_connection_t            *connection;
    ngx_pool_t                  *pool;
    off_t                        limit;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6678,8319,ngx_command_s,4,ngx_command_s,,core\ngx_conf_file.h,"struct ngx_command_s {
    ngx_str_t             name;
    ngx_uint_t            type;
    char               *(*set)(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
    ngx_uint_t            conf;
    ngx_uint_t            offset;
    void                 *post;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6679,8332,ngx_open_file_s,4,ngx_open_file_s,,core\ngx_conf_file.h,"struct ngx_open_file_s {
    ngx_fd_t              fd;
    ngx_str_t             name;

    void                (*flush)(ngx_open_file_t *file, ngx_log_t *log);
    void                 *data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6680,8342,ngx_conf_file_t,4,ngx_conf_file_t,,core\ngx_conf_file.h,"typedef struct {
    ngx_file_t            file;
    ngx_buf_t            *buffer;
    ngx_buf_t            *dump;
    ngx_uint_t            line;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6681,8348,ngx_conf_dump_t,4,ngx_conf_dump_t,,core\ngx_conf_file.h,"typedef struct {
    ngx_str_t             name;
    ngx_buf_t            *buffer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6682,8359,ngx_conf_s,4,ngx_conf_s,,core\ngx_conf_file.h,"struct ngx_conf_s {
    char                 *name;
    ngx_array_t          *args;

    ngx_cycle_t          *cycle;
    ngx_pool_t           *pool;
    ngx_pool_t           *temp_pool;
    ngx_conf_file_t      *conf_file;
    ngx_log_t            *log;

    void                 *ctx;
    ngx_uint_t            module_type;
    ngx_uint_t            cmd_type;

    ngx_conf_handler_pt   handler;
    void                 *handler_conf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6683,8379,ngx_conf_post_t,4,ngx_conf_post_t,,core\ngx_conf_file.h,"typedef struct {
    ngx_conf_post_handler_pt  post_handler;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6684,8382,ngx_conf_deprecated_t,4,ngx_conf_deprecated_t,,core\ngx_conf_file.h,"typedef struct {
    ngx_conf_post_handler_pt  post_handler;
    char                     *old_name;
    char                     *new_name;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6685,8387,ngx_conf_num_bounds_t,4,ngx_conf_num_bounds_t,,core\ngx_conf_file.h,"typedef struct {
    ngx_conf_post_handler_pt  post_handler;
    ngx_int_t                 low;
    ngx_int_t                 high;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6686,8392,ngx_conf_enum_t,4,ngx_conf_enum_t,,core\ngx_conf_file.h,"typedef struct {
    ngx_str_t                 name;
    ngx_uint_t                value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6687,8396,ngx_conf_bitmask_t,4,ngx_conf_bitmask_t,,core\ngx_conf_file.h,"typedef struct {
    ngx_str_t                 name;
    ngx_uint_t                mask;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6688,8549,ngx_int_t,4,ngx_int_t,,core\ngx_config.h,typedef intptr_t        ngx_int_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6689,8550,ngx_uint_t,4,ngx_uint_t,,core\ngx_config.h,typedef uintptr_t       ngx_uint_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6690,8551,ngx_flag_t,4,ngx_flag_t,,core\ngx_config.h,typedef intptr_t        ngx_flag_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6691,10865,ngx_listening_s,4,ngx_listening_s,,core\ngx_connection.h,typedef struct ngx_listening_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6692,10866,ngx_listening_t,4,ngx_listening_t,,core\ngx_connection.h,typedef struct ngx_listening_s  ngx_listening_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6693,10867,ngx_listening_s,4,ngx_listening_s,,core\ngx_connection.h,"struct ngx_listening_s {
    ngx_socket_t        fd;

    struct sockaddr    *sockaddr;
    socklen_t           socklen;    /* size of sockaddr */
    size_t              addr_text_max_len;
    ngx_str_t           addr_text;

    int                 type;

    int                 backlog;
    int                 rcvbuf;
    int                 sndbuf;
#if (NGX_HAVE_KEEPALIVE_TUNABLE)
    int                 keepidle;
    int                 keepintvl;
    int                 keepcnt;
#endif

    /* handler of accepted connection */
    ngx_connection_handler_pt   handler;

    void               *servers;  /* array of ngx_http_in_addr_t, for example */

    ngx_log_t           log;
    ngx_log_t          *logp;

    size_t              pool_size;
    /* should be here because of the AcceptEx() preread */
    size_t              post_accept_buffer_size;

    ngx_listening_t    *previous;
    ngx_connection_t   *connection;

    ngx_rbtree_t        rbtree;
    ngx_rbtree_node_t   sent...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6694,10869,sockaddr,4,ngx_listening_s.sockaddr,,core\ngx_connection.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6695,10913,ngx_connection_log_error_e,4,ngx_connection_log_error_e,,core\ngx_connection.h,"typedef enum {
    NGX_ERROR_ALERT = 0,
    NGX_ERROR_ERR,
    NGX_ERROR_INFO,
    NGX_ERROR_IGNORE_ECONNRESET,
    NGX_ERROR_IGNORE_EINVAL
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6696,10927,ngx_connection_tcp_nodelay_e,4,ngx_connection_tcp_nodelay_e,,core\ngx_connection.h,"typedef enum {
    NGX_TCP_NODELAY_UNSET = 0,
    NGX_TCP_NODELAY_SET,
    NGX_TCP_NODELAY_DISABLED
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6697,10939,ngx_connection_tcp_nopush_e,4,ngx_connection_tcp_nopush_e,,core\ngx_connection.h,"typedef enum {
    NGX_TCP_NOPUSH_UNSET = 0,
    NGX_TCP_NOPUSH_SET,
    NGX_TCP_NOPUSH_DISABLED
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6698,10951,ngx_connection_s,4,ngx_connection_s,,core\ngx_connection.h,"struct ngx_connection_s {
    void               *data;
    ngx_event_t        *read;
    ngx_event_t        *write;

    ngx_socket_t        fd;

    ngx_recv_pt         recv;
    ngx_send_pt         send;
    ngx_recv_chain_pt   recv_chain;
    ngx_send_chain_pt   send_chain;

    ngx_listening_t    *listening;

    off_t               sent;

    ngx_log_t          *log;

    ngx_pool_t         *pool;

    int                 type;

    struct sockaddr    *sockaddr;
    socklen_t           socklen;
    ngx_str_t           addr_text;

    ngx_proxy_protocol_t  *proxy_protocol;

#if (NGX_SSL || NGX_COMPAT)
    ngx_ssl_connection_t  *ssl;
#endif

    ngx_udp_connection_t  *udp;

    struct sockaddr    *local_sockaddr;
    socklen_t           local_socklen;

    ngx_buf_t          *buffer;

    ngx_queue_t         queue;

    ngx_atomic_uint_t   number;

    ngx_msec_t          start_time;
    ngx_uint_t          requests;

    unsigned            buffered:8;

    unsigned            ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6699,10965,sockaddr,4,ngx_connection_s.sockaddr,,core\ngx_connection.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6700,10972,sockaddr,4,ngx_connection_s.sockaddr,,core\ngx_connection.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6701,11170,ngx_module_s,4,ngx_module_s,,core\ngx_core.h,typedef struct ngx_module_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6702,11171,ngx_module_t,4,ngx_module_t,,core\ngx_core.h,typedef struct ngx_module_s          ngx_module_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6703,11172,ngx_conf_s,4,ngx_conf_s,,core\ngx_core.h,typedef struct ngx_conf_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6704,11173,ngx_conf_t,4,ngx_conf_t,,core\ngx_core.h,typedef struct ngx_conf_s            ngx_conf_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6705,11174,ngx_cycle_s,4,ngx_cycle_s,,core\ngx_core.h,typedef struct ngx_cycle_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6706,11175,ngx_cycle_t,4,ngx_cycle_t,,core\ngx_core.h,typedef struct ngx_cycle_s           ngx_cycle_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6707,11176,ngx_pool_s,4,ngx_pool_s,,core\ngx_core.h,typedef struct ngx_pool_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6708,11177,ngx_pool_t,4,ngx_pool_t,,core\ngx_core.h,typedef struct ngx_pool_s            ngx_pool_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6709,11178,ngx_chain_s,4,ngx_chain_s,,core\ngx_core.h,typedef struct ngx_chain_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6710,11179,ngx_chain_t,4,ngx_chain_t,,core\ngx_core.h,typedef struct ngx_chain_s           ngx_chain_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6711,11180,ngx_log_s,4,ngx_log_s,,core\ngx_core.h,typedef struct ngx_log_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6712,11181,ngx_log_t,4,ngx_log_t,,core\ngx_core.h,typedef struct ngx_log_s             ngx_log_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6713,11182,ngx_open_file_s,4,ngx_open_file_s,,core\ngx_core.h,typedef struct ngx_open_file_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6714,11183,ngx_open_file_t,4,ngx_open_file_t,,core\ngx_core.h,typedef struct ngx_open_file_s       ngx_open_file_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6715,11184,ngx_command_s,4,ngx_command_s,,core\ngx_core.h,typedef struct ngx_command_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6716,11185,ngx_command_t,4,ngx_command_t,,core\ngx_core.h,typedef struct ngx_command_s         ngx_command_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6717,11186,ngx_file_s,4,ngx_file_s,,core\ngx_core.h,typedef struct ngx_file_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6718,11187,ngx_file_t,4,ngx_file_t,,core\ngx_core.h,typedef struct ngx_file_s            ngx_file_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6719,11188,ngx_event_s,4,ngx_event_s,,core\ngx_core.h,typedef struct ngx_event_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6720,11189,ngx_event_t,4,ngx_event_t,,core\ngx_core.h,typedef struct ngx_event_s           ngx_event_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6721,11190,ngx_event_aio_s,4,ngx_event_aio_s,,core\ngx_core.h,typedef struct ngx_event_aio_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6722,11191,ngx_event_aio_t,4,ngx_event_aio_t,,core\ngx_core.h,typedef struct ngx_event_aio_s       ngx_event_aio_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6723,11192,ngx_connection_s,4,ngx_connection_s,,core\ngx_core.h,typedef struct ngx_connection_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6724,11193,ngx_connection_t,4,ngx_connection_t,,core\ngx_core.h,typedef struct ngx_connection_s      ngx_connection_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6725,11194,ngx_thread_task_s,4,ngx_thread_task_s,,core\ngx_core.h,typedef struct ngx_thread_task_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6726,11195,ngx_thread_task_t,4,ngx_thread_task_t,,core\ngx_core.h,typedef struct ngx_thread_task_s     ngx_thread_task_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6727,11196,ngx_ssl_s,4,ngx_ssl_s,,core\ngx_core.h,typedef struct ngx_ssl_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6728,11197,ngx_ssl_t,4,ngx_ssl_t,,core\ngx_core.h,typedef struct ngx_ssl_s             ngx_ssl_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6729,11198,ngx_proxy_protocol_s,4,ngx_proxy_protocol_s,,core\ngx_core.h,typedef struct ngx_proxy_protocol_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6730,11199,ngx_proxy_protocol_t,4,ngx_proxy_protocol_t,,core\ngx_core.h,typedef struct ngx_proxy_protocol_s  ngx_proxy_protocol_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6731,11200,ngx_ssl_connection_s,4,ngx_ssl_connection_s,,core\ngx_core.h,typedef struct ngx_ssl_connection_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6732,11201,ngx_ssl_connection_t,4,ngx_ssl_connection_t,,core\ngx_core.h,typedef struct ngx_ssl_connection_s  ngx_ssl_connection_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6733,11202,ngx_udp_connection_s,4,ngx_udp_connection_s,,core\ngx_core.h,typedef struct ngx_udp_connection_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6734,11203,ngx_udp_connection_t,4,ngx_udp_connection_t,,core\ngx_core.h,typedef struct ngx_udp_connection_s  ngx_udp_connection_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6735,15809,ngx_shm_zone_s,4,ngx_shm_zone_s,,core\ngx_cycle.h,typedef struct ngx_shm_zone_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6736,15810,ngx_shm_zone_t,4,ngx_shm_zone_t,,core\ngx_cycle.h,typedef struct ngx_shm_zone_s  ngx_shm_zone_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6737,15817,ngx_shm_zone_s,4,ngx_shm_zone_s,,core\ngx_cycle.h,"struct ngx_shm_zone_s {
    void                     *data;
    ngx_shm_t                 shm;
    ngx_shm_zone_init_pt      init;
    void                     *tag;
    void                     *sync;
    ngx_uint_t                noreuse;  /* unsigned  noreuse:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6738,15824,ngx_cycle_s,4,ngx_cycle_s,,core\ngx_cycle.h,"struct ngx_cycle_s {
    void                  ****conf_ctx;
    ngx_pool_t               *pool;

    ngx_log_t                *log;
    ngx_log_t                 new_log;

    ngx_uint_t                log_use_stderr;  /* unsigned  log_use_stderr:1; */

    ngx_connection_t        **files;
    ngx_connection_t         *free_connections;
    ngx_uint_t                free_connection_n;

    ngx_module_t            **modules;
    ngx_uint_t                modules_n;
    ngx_uint_t                modules_used;    /* unsigned  modules_used:1; */

    ngx_queue_t               reusable_connections_queue;
    ngx_uint_t                reusable_connections_n;
    time_t                    connections_reuse_time;

    ngx_array_t               listening;
    ngx_array_t               paths;

    ngx_array_t               config_dump;
    ngx_rbtree_t              config_dump_rbtree;
    ngx_rbtree_node_t         config_dump_sentinel;

    ngx_list_t                open_files;
    ngx_list_...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6739,15859,ngx_core_conf_t,4,ngx_core_conf_t,,core\ngx_cycle.h,"typedef struct {
    ngx_flag_t                daemon;
    ngx_flag_t                master;

    ngx_msec_t                timer_resolution;
    ngx_msec_t                shutdown_timeout;

    ngx_int_t                 worker_processes;
    ngx_int_t                 debug_points;

    ngx_int_t                 rlimit_nofile;
    off_t                     rlimit_core;

    int                       priority;

    ngx_uint_t                cpu_affinity_auto;
    ngx_uint_t                cpu_affinity_n;
    ngx_cpuset_t             *cpu_affinity;

    char                     *username;
    ngx_uid_t                 user;
    ngx_gid_t                 group;

    ngx_str_t                 working_directory;
    ngx_str_t                 lock_file;

    ngx_str_t                 pid;
    ngx_str_t                 oldpid;

    ngx_array_t               env;
    char                    **environment;

    ngx_uint_t                transparent;  /* unsigned  transparent:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6740,18709,ngx_file_s,4,ngx_file_s,,core\ngx_file.h,"struct ngx_file_s {
    ngx_fd_t                   fd;
    ngx_str_t                  name;
    ngx_file_info_t            info;

    off_t                      offset;
    off_t                      sys_offset;

    ngx_log_t                 *log;

#if (NGX_THREADS || NGX_COMPAT)
    ngx_int_t                (*thread_handler)(ngx_thread_task_t *task,
                                               ngx_file_t *file);
    void                      *thread_ctx;
    ngx_thread_task_t         *thread_task;
#endif

#if (NGX_HAVE_FILE_AIO || NGX_COMPAT)
    ngx_event_aio_t           *aio;
#endif

    unsigned                   valid_info:1;
    unsigned                   directio:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6741,18742,ngx_path_t,4,ngx_path_t,,core\ngx_file.h,"typedef struct {
    ngx_str_t                  name;
    size_t                     len;
    size_t                     level[NGX_MAX_PATH_LEVEL];

    ngx_path_manager_pt        manager;
    ngx_path_purger_pt         purger;
    ngx_path_loader_pt         loader;
    void                      *data;

    u_char                    *conf_file;
    ngx_uint_t                 line;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6742,18761,ngx_path_init_t,4,ngx_path_init_t,,core\ngx_file.h,"typedef struct {
    ngx_str_t                  name;
    size_t                     level[NGX_MAX_PATH_LEVEL];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6743,18773,ngx_temp_file_t,4,ngx_temp_file_t,,core\ngx_file.h,"typedef struct {
    ngx_file_t                 file;
    off_t                      offset;
    ngx_path_t                *path;
    ngx_pool_t                *pool;
    char                      *warn;

    ngx_uint_t                 access;

    unsigned                   log_level:8;
    unsigned                   persistent:1;
    unsigned                   clean:1;
    unsigned                   thread_write:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6744,18785,ngx_ext_rename_file_t,4,ngx_ext_rename_file_t,,core\ngx_file.h,"typedef struct {
    ngx_uint_t                 access;
    ngx_uint_t                 path_access;
    time_t                     time;
    ngx_fd_t                   fd;

    unsigned                   create_path:1;
    unsigned                   delete_file:1;

    ngx_log_t                 *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6745,18794,ngx_copy_file_t,4,ngx_copy_file_t,,core\ngx_file.h,"typedef struct {
    off_t                      size;
    size_t                     buf_size;

    ngx_uint_t                 access;
    time_t                     time;

    ngx_log_t                 *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6746,18801,ngx_tree_ctx_s,4,ngx_tree_ctx_s,,core\ngx_file.h,typedef struct ngx_tree_ctx_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6747,18802,ngx_tree_ctx_t,4,ngx_tree_ctx_t,,core\ngx_file.h,typedef struct ngx_tree_ctx_s  ngx_tree_ctx_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6748,18815,ngx_tree_ctx_s,4,ngx_tree_ctx_s,,core\ngx_file.h,"struct ngx_tree_ctx_s {
    off_t                      size;
    off_t                      fs_size;
    ngx_uint_t                 access;
    time_t                     mtime;

    ngx_tree_init_handler_pt   init_handler;
    ngx_tree_handler_pt        file_handler;
    ngx_tree_handler_pt        pre_tree_handler;
    ngx_tree_handler_pt        post_tree_handler;
    ngx_tree_handler_pt        spec_handler;

    void                      *data;
    size_t                     alloc;

    ngx_log_t                 *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6749,21734,ngx_hash_elt_t,4,ngx_hash_elt_t,,core\ngx_hash.h,"typedef struct {
    void             *value;
    u_short           len;
    u_char            name[1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6750,21745,ngx_hash_t,4,ngx_hash_t,,core\ngx_hash.h,"typedef struct {
    ngx_hash_elt_t  **buckets;
    ngx_uint_t        size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6751,21749,ngx_hash_wildcard_t,4,ngx_hash_wildcard_t,,core\ngx_hash.h,"typedef struct {
    ngx_hash_t        hash;
    void             *value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6752,21753,ngx_hash_key_t,4,ngx_hash_key_t,,core\ngx_hash.h,"typedef struct {
    ngx_str_t         key;
    ngx_uint_t        key_hash;
    void             *value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6753,21764,ngx_hash_combined_t,4,ngx_hash_combined_t,,core\ngx_hash.h,"typedef struct {
    ngx_hash_t            hash;
    ngx_hash_wildcard_t  *wc_head;
    ngx_hash_wildcard_t  *wc_tail;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6754,21769,ngx_hash_init_t,4,ngx_hash_init_t,,core\ngx_hash.h,"typedef struct {
    ngx_hash_t       *hash;
    ngx_hash_key_pt   key;

    ngx_uint_t        max_size;
    ngx_uint_t        bucket_size;

    char             *name;
    ngx_pool_t       *pool;
    ngx_pool_t       *temp_pool;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6755,21778,ngx_hash_keys_arrays_t,4,ngx_hash_keys_arrays_t,,core\ngx_hash.h,"typedef struct {
    ngx_uint_t        hsize;

    ngx_pool_t       *pool;
    ngx_pool_t       *temp_pool;

    ngx_array_t       keys;
    ngx_array_t      *keys_hash;

    ngx_array_t       dns_wc_head;
    ngx_array_t      *dns_wc_head_hash;

    ngx_array_t       dns_wc_tail;
    ngx_array_t      *dns_wc_tail_hash;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6756,21789,ngx_table_elt_t,4,ngx_table_elt_t,,core\ngx_hash.h,"typedef struct {
    ngx_uint_t        hash;
    ngx_str_t         key;
    ngx_str_t         value;
    u_char           *lowcase_key;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6757,23852,ngx_sockaddr_t,4,ngx_sockaddr_t,,core\ngx_inet.h,"typedef union {
    struct sockaddr           sockaddr;
    struct sockaddr_in        sockaddr_in;
#if (NGX_HAVE_INET6)
    struct sockaddr_in6       sockaddr_in6;
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
    struct sockaddr_un        sockaddr_un;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6758,23853,sockaddr,4,ngx_sockaddr_t.sockaddr,,core\ngx_inet.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6759,23855,sockaddr_in,4,ngx_sockaddr_t.sockaddr_in,,core\ngx_inet.h,struct sockaddr_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6760,23857,sockaddr_in6,4,ngx_sockaddr_t.sockaddr_in6,,core\ngx_inet.h,struct sockaddr_in6,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6761,23859,sockaddr_un,4,ngx_sockaddr_t.sockaddr_un,,core\ngx_inet.h,struct sockaddr_un,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6762,23862,ngx_in_cidr_t,4,ngx_in_cidr_t,,core\ngx_inet.h,"typedef struct {
    in_addr_t                 addr;
    in_addr_t                 mask;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6763,23866,ngx_cidr_t,4,ngx_cidr_t,,core\ngx_inet.h,"typedef struct {
    ngx_uint_t                family;
    union {
        ngx_in_cidr_t         in;
#if (NGX_HAVE_INET6)
        ngx_in6_cidr_t        in6;
#endif
    } u;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6764,23868,ngx_cidr_t.u,4,ngx_cidr_t.u,,core\ngx_inet.h,"union {
        ngx_in_cidr_t         in;
#if (NGX_HAVE_INET6)
        ngx_in6_cidr_t        in6;
#endif
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6765,23873,ngx_addr_t,4,ngx_addr_t,,core\ngx_inet.h,"typedef struct {
    struct sockaddr          *sockaddr;
    socklen_t                 socklen;
    ngx_str_t                 name;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6766,23874,sockaddr,4,ngx_addr_t.sockaddr,,core\ngx_inet.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6767,23879,ngx_url_t,4,ngx_url_t,,core\ngx_inet.h,"typedef struct {
    ngx_str_t                 url;
    ngx_str_t                 host;
    ngx_str_t                 port_text;
    ngx_str_t                 uri;

    in_port_t                 port;
    in_port_t                 default_port;
    in_port_t                 last_port;
    int                       family;

    unsigned                  listen:1;
    unsigned                  uri_part:1;
    unsigned                  no_resolve:1;

    unsigned                  no_port:1;
    unsigned                  wildcard:1;

    socklen_t                 socklen;
    ngx_sockaddr_t            sockaddr;

    ngx_addr_t               *addrs;
    ngx_uint_t                naddrs;

    char                     *err;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6768,24142,ngx_list_part_s,4,ngx_list_part_s,,core\ngx_list.h,typedef struct ngx_list_part_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6769,24143,ngx_list_part_t,4,ngx_list_part_t,,core\ngx_list.h,typedef struct ngx_list_part_s  ngx_list_part_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6770,24144,ngx_list_part_s,4,ngx_list_part_s,,core\ngx_list.h,"struct ngx_list_part_s {
    void             *elts;
    ngx_uint_t        nelts;
    ngx_list_part_t  *next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6771,24148,ngx_list_t,4,ngx_list_t,,core\ngx_list.h,"typedef struct {
    ngx_list_part_t  *last;
    ngx_list_part_t   part;
    size_t            size;
    ngx_uint_t        nalloc;
    ngx_pool_t       *pool;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6772,25632,ngx_log_s,4,ngx_log_s,,core\ngx_log.h,"struct ngx_log_s {
    ngx_uint_t           log_level;
    ngx_open_file_t     *file;

    ngx_atomic_uint_t    connection;

    time_t               disk_full_time;

    ngx_log_handler_pt   handler;
    void                *data;

    ngx_log_writer_pt    writer;
    void                *wdata;

    /*
     * we declare ""action"" as ""char *"" because the actions are usually
     * the static strings and in the ""u_char *"" case we have to override
     * their types all the time
     */

    char                *action;

    ngx_log_t           *next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6773,29366,ngx_md5_t,4,ngx_md5_t,,core\ngx_md5.h,"typedef struct {
    uint64_t  bytes;
    uint32_t  a, b, c, d;
    u_char    buffer[64];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6774,30248,ngx_module_s,4,ngx_module_s,,core\ngx_module.h,"struct ngx_module_s {
    ngx_uint_t            ctx_index;
    ngx_uint_t            index;

    char                 *name;

    ngx_uint_t            spare0;
    ngx_uint_t            spare1;

    ngx_uint_t            version;
    const char           *signature;

    void                 *ctx;
    ngx_command_t        *commands;
    ngx_uint_t            type;

    ngx_int_t           (*init_master)(ngx_log_t *log);

    ngx_int_t           (*init_module)(ngx_cycle_t *cycle);

    ngx_int_t           (*init_process)(ngx_cycle_t *cycle);
    ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);
    void                (*exit_thread)(ngx_cycle_t *cycle);
    void                (*exit_process)(ngx_cycle_t *cycle);

    void                (*exit_master)(ngx_cycle_t *cycle);

    uintptr_t             spare_hook0;
    uintptr_t             spare_hook1;
    uintptr_t             spare_hook2;
    uintptr_t             spare_hook3;
    uintptr_t             spare_hook4;
    uintptr_...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6775,30302,ngx_core_module_t,4,ngx_core_module_t,,core\ngx_module.h,"typedef struct {
    ngx_str_t             name;
    void               *(*create_conf)(ngx_cycle_t *cycle);
    char               *(*init_conf)(ngx_cycle_t *cycle, void *conf);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6776,32831,ngx_open_file_info_t,4,ngx_open_file_info_t,,core\ngx_open_file_cache.h,"typedef struct {
    ngx_fd_t                 fd;
    ngx_file_uniq_t          uniq;
    time_t                   mtime;
    off_t                    size;
    off_t                    fs_size;
    off_t                    directio;
    size_t                   read_ahead;

    ngx_err_t                err;
    char                    *failed;

    time_t                   valid;

    ngx_uint_t               min_uses;

#if (NGX_HAVE_OPENAT)
    size_t                   disable_symlinks_from;
    unsigned                 disable_symlinks:2;
#endif

    unsigned                 test_dir:1;
    unsigned                 test_only:1;
    unsigned                 log:1;
    unsigned                 errors:1;
    unsigned                 events:1;

    unsigned                 is_dir:1;
    unsigned                 is_file:1;
    unsigned                 is_link:1;
    unsigned                 is_exec:1;
    unsigned                 is_directio:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6777,32856,ngx_cached_open_file_s,4,ngx_cached_open_file_s,,core\ngx_open_file_cache.h,typedef struct ngx_cached_open_file_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6778,32857,ngx_cached_open_file_t,4,ngx_cached_open_file_t,,core\ngx_open_file_cache.h,typedef struct ngx_cached_open_file_s  ngx_cached_open_file_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6779,32858,ngx_cached_open_file_s,4,ngx_cached_open_file_s,,core\ngx_open_file_cache.h,"struct ngx_cached_open_file_s {
    ngx_rbtree_node_t        node;
    ngx_queue_t              queue;

    u_char                  *name;
    time_t                   created;
    time_t                   accessed;

    ngx_fd_t                 fd;
    ngx_file_uniq_t          uniq;
    time_t                   mtime;
    off_t                    size;
    ngx_err_t                err;

    uint32_t                 uses;

#if (NGX_HAVE_OPENAT)
    size_t                   disable_symlinks_from;
    unsigned                 disable_symlinks:2;
#endif

    unsigned                 count:24;
    unsigned                 close:1;
    unsigned                 use_event:1;

    unsigned                 is_dir:1;
    unsigned                 is_file:1;
    unsigned                 is_link:1;
    unsigned                 is_exec:1;
    unsigned                 is_directio:1;

    ngx_event_t             *event;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6780,32881,ngx_open_file_cache_t,4,ngx_open_file_cache_t,,core\ngx_open_file_cache.h,"typedef struct {
    ngx_rbtree_t             rbtree;
    ngx_rbtree_node_t        sentinel;
    ngx_queue_t              expire_queue;

    ngx_uint_t               current;
    ngx_uint_t               max;
    time_t                   inactive;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6781,32889,ngx_open_file_cache_cleanup_t,4,ngx_open_file_cache_cleanup_t,,core\ngx_open_file_cache.h,"typedef struct {
    ngx_open_file_cache_t   *cache;
    ngx_cached_open_file_t  *file;
    ngx_uint_t               min_uses;
    ngx_log_t               *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6782,32895,ngx_open_file_cache_event_t,4,ngx_open_file_cache_event_t,,core\ngx_open_file_cache.h,"typedef struct {

    /* ngx_connection_t stub to allow use c->fd as event ident */
    void                    *data;
    ngx_event_t             *read;
    ngx_event_t             *write;
    ngx_fd_t                 fd;

    ngx_cached_open_file_t  *file;
    ngx_open_file_cache_t   *cache;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6783,35647,ngx_pool_cleanup_s,4,ngx_pool_cleanup_s,,core\ngx_palloc.h,typedef struct ngx_pool_cleanup_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6784,35648,ngx_pool_cleanup_t,4,ngx_pool_cleanup_t,,core\ngx_palloc.h,typedef struct ngx_pool_cleanup_s  ngx_pool_cleanup_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6785,35649,ngx_pool_cleanup_s,4,ngx_pool_cleanup_s,,core\ngx_palloc.h,"struct ngx_pool_cleanup_s {
    ngx_pool_cleanup_pt   handler;
    void                 *data;
    ngx_pool_cleanup_t   *next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6786,35653,ngx_pool_large_s,4,ngx_pool_large_s,,core\ngx_palloc.h,typedef struct ngx_pool_large_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6787,35654,ngx_pool_large_t,4,ngx_pool_large_t,,core\ngx_palloc.h,typedef struct ngx_pool_large_s  ngx_pool_large_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6788,35655,ngx_pool_large_s,4,ngx_pool_large_s,,core\ngx_palloc.h,"struct ngx_pool_large_s {
    ngx_pool_large_t     *next;
    void                 *alloc;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6789,35658,ngx_pool_data_t,4,ngx_pool_data_t,,core\ngx_palloc.h,"typedef struct {
    u_char               *last;
    u_char               *end;
    ngx_pool_t           *next;
    ngx_uint_t            failed;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6790,35664,ngx_pool_s,4,ngx_pool_s,,core\ngx_palloc.h,"struct ngx_pool_s {
    ngx_pool_data_t       d;
    size_t                max;
    ngx_pool_t           *current;
    ngx_chain_t          *chain;
    ngx_pool_large_t     *large;
    ngx_pool_cleanup_t   *cleanup;
    ngx_log_t            *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6791,35672,ngx_pool_cleanup_file_t,4,ngx_pool_cleanup_file_t,,core\ngx_palloc.h,"typedef struct {
    ngx_fd_t              fd;
    u_char               *name;
    ngx_log_t            *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6792,37380,ngx_proxy_protocol_header_t,4,ngx_proxy_protocol_header_t,,core\ngx_proxy_protocol.c,"typedef struct {
    u_char                                  signature[12];
    u_char                                  version_command;
    u_char                                  family_transport;
    u_char                                  len[2];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6793,37394,ngx_proxy_protocol_inet_addrs_t,4,ngx_proxy_protocol_inet_addrs_t,,core\ngx_proxy_protocol.c,"typedef struct {
    u_char                                  src_addr[4];
    u_char                                  dst_addr[4];
    u_char                                  src_port[2];
    u_char                                  dst_port[2];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6794,37412,ngx_proxy_protocol_inet6_addrs_t,4,ngx_proxy_protocol_inet6_addrs_t,,core\ngx_proxy_protocol.c,"typedef struct {
    u_char                                  src_addr[16];
    u_char                                  dst_addr[16];
    u_char                                  src_port[2];
    u_char                                  dst_port[2];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6795,38431,ngx_proxy_protocol_s,4,ngx_proxy_protocol_s,,core\ngx_proxy_protocol.h,"struct ngx_proxy_protocol_s {
    ngx_str_t           src_addr;
    ngx_str_t           dst_addr;
    in_port_t           src_port;
    in_port_t           dst_port;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6796,38587,ngx_queue_s,4,ngx_queue_s,,core\ngx_queue.h,typedef struct ngx_queue_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6797,38588,ngx_queue_t,4,ngx_queue_t,,core\ngx_queue.h,typedef struct ngx_queue_s  ngx_queue_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6798,38589,ngx_queue_s,4,ngx_queue_s,,core\ngx_queue.h,"struct ngx_queue_s {
    ngx_queue_t  *prev;
    ngx_queue_t  *next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6799,39217,ngx_radix_node_s,4,ngx_radix_node_s,,core\ngx_radix_tree.h,typedef struct ngx_radix_node_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6800,39218,ngx_radix_node_t,4,ngx_radix_node_t,,core\ngx_radix_tree.h,typedef struct ngx_radix_node_s  ngx_radix_node_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6801,39219,ngx_radix_node_s,4,ngx_radix_node_s,,core\ngx_radix_tree.h,"struct ngx_radix_node_s {
    ngx_radix_node_t  *right;
    ngx_radix_node_t  *left;
    ngx_radix_node_t  *parent;
    uintptr_t          value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6802,39224,ngx_radix_tree_t,4,ngx_radix_tree_t,,core\ngx_radix_tree.h,"typedef struct {
    ngx_radix_node_t  *root;
    ngx_pool_t        *pool;
    ngx_radix_node_t  *free;
    char              *start;
    size_t             size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6803,40182,ngx_rbtree_key_t,4,ngx_rbtree_key_t,,core\ngx_rbtree.h,typedef ngx_uint_t  ngx_rbtree_key_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6804,40183,ngx_rbtree_key_int_t,4,ngx_rbtree_key_int_t,,core\ngx_rbtree.h,typedef ngx_int_t   ngx_rbtree_key_int_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6805,40184,ngx_rbtree_node_s,4,ngx_rbtree_node_s,,core\ngx_rbtree.h,typedef struct ngx_rbtree_node_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6806,40185,ngx_rbtree_node_t,4,ngx_rbtree_node_t,,core\ngx_rbtree.h,typedef struct ngx_rbtree_node_s  ngx_rbtree_node_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6807,40186,ngx_rbtree_node_s,4,ngx_rbtree_node_s,,core\ngx_rbtree.h,"struct ngx_rbtree_node_s {
    ngx_rbtree_key_t       key;
    ngx_rbtree_node_t     *left;
    ngx_rbtree_node_t     *right;
    ngx_rbtree_node_t     *parent;
    u_char                 color;
    u_char                 data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6808,40193,ngx_rbtree_s,4,ngx_rbtree_s,,core\ngx_rbtree.h,typedef struct ngx_rbtree_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6809,40194,ngx_rbtree_t,4,ngx_rbtree_t,,core\ngx_rbtree.h,typedef struct ngx_rbtree_s  ngx_rbtree_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6810,40202,ngx_rbtree_s,4,ngx_rbtree_s,,core\ngx_rbtree.h,"struct ngx_rbtree_s {
    ngx_rbtree_node_t     *root;
    ngx_rbtree_node_t     *sentinel;
    ngx_rbtree_insert_pt   insert;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6811,40248,ngx_regex_conf_t,4,ngx_regex_conf_t,,core\ngx_regex.c,"typedef struct {
    ngx_flag_t  pcre_jit;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6812,40971,ngx_regex_t,4,ngx_regex_t,,core\ngx_regex.h,"typedef struct {
    pcre        *code;
    pcre_extra  *extra;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6813,40975,ngx_regex_compile_t,4,ngx_regex_compile_t,,core\ngx_regex.h,"typedef struct {
    ngx_str_t     pattern;
    ngx_pool_t   *pool;
    ngx_int_t     options;

    ngx_regex_t  *regex;
    int           captures;
    int           named_captures;
    int           name_size;
    u_char       *names;
    ngx_str_t     err;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6814,40986,ngx_regex_elt_t,4,ngx_regex_elt_t,,core\ngx_regex.h,"typedef struct {
    ngx_regex_t  *regex;
    u_char       *name;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6815,41018,ngx_resolver_hdr_t,4,ngx_resolver_hdr_t,,core\ngx_resolver.c,"typedef struct {
    u_char  ident_hi;
    u_char  ident_lo;
    u_char  flags_hi;
    u_char  flags_lo;
    u_char  nqs_hi;
    u_char  nqs_lo;
    u_char  nan_hi;
    u_char  nan_lo;
    u_char  nns_hi;
    u_char  nns_lo;
    u_char  nar_hi;
    u_char  nar_lo;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6816,41032,ngx_resolver_qs_t,4,ngx_resolver_qs_t,,core\ngx_resolver.c,"typedef struct {
    u_char  type_hi;
    u_char  type_lo;
    u_char  class_hi;
    u_char  class_lo;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6817,41038,ngx_resolver_an_t,4,ngx_resolver_an_t,,core\ngx_resolver.c,"typedef struct {
    u_char  type_hi;
    u_char  type_lo;
    u_char  class_hi;
    u_char  class_lo;
    u_char  ttl[4];
    u_char  len_hi;
    u_char  len_lo;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6818,52365,ngx_resolver_s,4,ngx_resolver_s,,core\ngx_resolver.h,typedef struct ngx_resolver_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6819,52366,ngx_resolver_t,4,ngx_resolver_t,,core\ngx_resolver.h,typedef struct ngx_resolver_s  ngx_resolver_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6820,52367,ngx_resolver_connection_t,4,ngx_resolver_connection_t,,core\ngx_resolver.h,"typedef struct {
    ngx_connection_t         *udp;
    ngx_connection_t         *tcp;
    struct sockaddr          *sockaddr;
    socklen_t                 socklen;
    ngx_str_t                 server;
    ngx_log_t                 log;
    ngx_buf_t                *read_buf;
    ngx_buf_t                *write_buf;
    ngx_resolver_t           *resolver;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6821,52370,sockaddr,4,ngx_resolver_connection_t.sockaddr,,core\ngx_resolver.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6822,52379,ngx_resolver_ctx_s,4,ngx_resolver_ctx_s,,core\ngx_resolver.h,typedef struct ngx_resolver_ctx_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6823,52380,ngx_resolver_ctx_t,4,ngx_resolver_ctx_t,,core\ngx_resolver.h,typedef struct ngx_resolver_ctx_s  ngx_resolver_ctx_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6824,52386,ngx_resolver_addr_t,4,ngx_resolver_addr_t,,core\ngx_resolver.h,"typedef struct {
    struct sockaddr          *sockaddr;
    socklen_t                 socklen;
    ngx_str_t                 name;
    u_short                   priority;
    u_short                   weight;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6825,52387,sockaddr,4,ngx_resolver_addr_t.sockaddr,,core\ngx_resolver.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6826,52394,ngx_resolver_srv_t,4,ngx_resolver_srv_t,,core\ngx_resolver.h,"typedef struct {
    ngx_str_t                 name;
    u_short                   priority;
    u_short                   weight;
    u_short                   port;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6827,52400,ngx_resolver_srv_name_t,4,ngx_resolver_srv_name_t,,core\ngx_resolver.h,"typedef struct {
    ngx_str_t                 name;
    u_short                   priority;
    u_short                   weight;
    u_short                   port;

    ngx_resolver_ctx_t       *ctx;
    ngx_int_t                 state;

    ngx_uint_t                naddrs;
    ngx_addr_t               *addrs;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6828,52410,ngx_resolver_node_t,4,ngx_resolver_node_t,,core\ngx_resolver.h,"typedef struct {
    ngx_rbtree_node_t         node;
    ngx_queue_t               queue;

    /* PTR: resolved name, A: name to resolve */
    u_char                   *name;

#if (NGX_HAVE_INET6)
    /* PTR: IPv6 address to resolve (IPv4 address is in rbtree node key) */
    struct in6_addr           addr6;
#endif

    u_short                   nlen;
    u_short                   qlen;

    u_char                   *query;
#if (NGX_HAVE_INET6)
    u_char                   *query6;
#endif

    union {
        in_addr_t             addr;
        in_addr_t            *addrs;
        u_char               *cname;
        ngx_resolver_srv_t   *srvs;
    } u;

    u_char                    code;
    u_short                   naddrs;
    u_short                   nsrvs;
    u_short                   cnlen;

#if (NGX_HAVE_INET6)
    union {
        struct in6_addr       addr6;
        struct in6_addr      *addrs6;
    } u6;

    u_short                   naddrs6;
#endif

    time_t        ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6829,52414,in6_addr,4,ngx_resolver_node_t.in6_addr,,core\ngx_resolver.h,struct in6_addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6830,52420,ngx_resolver_node_t.u,4,ngx_resolver_node_t.u,,core\ngx_resolver.h,"union {
        in_addr_t             addr;
        in_addr_t            *addrs;
        u_char               *cname;
        ngx_resolver_srv_t   *srvs;
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6831,52430,ngx_resolver_node_t.u6,4,ngx_resolver_node_t.u6,,core\ngx_resolver.h,"union {
        struct in6_addr       addr6;
        struct in6_addr      *addrs6;
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6832,52431,in6_addr,4,ngx_resolver_node_t.u6.in6_addr,,core\ngx_resolver.h,struct in6_addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6833,52433,in6_addr,4,ngx_resolver_node_t.u6.in6_addr,,core\ngx_resolver.h,struct in6_addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6834,52445,ngx_resolver_s,4,ngx_resolver_s,,core\ngx_resolver.h,"struct ngx_resolver_s {
    /* has to be pointer because of ""incomplete type"" */
    ngx_event_t              *event;
    void                     *dummy;
    ngx_log_t                *log;

    /* event ident must be after 3 pointers as in ngx_connection_t */
    ngx_int_t                 ident;

    /* simple round robin DNS peers balancer */
    ngx_array_t               connections;
    ngx_uint_t                last_connection;

    ngx_rbtree_t              name_rbtree;
    ngx_rbtree_node_t         name_sentinel;

    ngx_rbtree_t              srv_rbtree;
    ngx_rbtree_node_t         srv_sentinel;

    ngx_rbtree_t              addr_rbtree;
    ngx_rbtree_node_t         addr_sentinel;

    ngx_queue_t               name_resend_queue;
    ngx_queue_t               srv_resend_queue;
    ngx_queue_t               addr_resend_queue;

    ngx_queue_t               name_expire_queue;
    ngx_queue_t               srv_expire_queue;
    ngx_queue_t               addr_expire_queue;

...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6835,52474,ngx_resolver_ctx_s,4,ngx_resolver_ctx_s,,core\ngx_resolver.h,"struct ngx_resolver_ctx_s {
    ngx_resolver_ctx_t       *next;
    ngx_resolver_t           *resolver;
    ngx_resolver_node_t      *node;

    /* event ident must be after 3 pointers as in ngx_connection_t */
    ngx_int_t                 ident;

    ngx_int_t                 state;
    ngx_str_t                 name;
    ngx_str_t                 service;

    time_t                    valid;
    ngx_uint_t                naddrs;
    ngx_resolver_addr_t      *addrs;
    ngx_resolver_addr_t       addr;
    struct sockaddr_in        sin;

    ngx_uint_t                count;
    ngx_uint_t                nsrvs;
    ngx_resolver_srv_name_t  *srvs;

    ngx_resolver_handler_pt   handler;
    void                     *data;
    ngx_msec_t                timeout;

    unsigned                  quick:1;
    unsigned                  async:1;
    unsigned                  cancelable:1;
    ngx_uint_t                recursion;
    ngx_event_t              *event;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6836,52486,sockaddr_in,4,ngx_resolver_ctx_s.sockaddr_in,,core\ngx_resolver.h,struct sockaddr_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6837,58254,ngx_sha1_t,4,ngx_sha1_t,,core\ngx_sha1.h,"typedef struct {
    uint64_t  bytes;
    uint32_t  a, b, c, d, e, f;
    u_char    buffer[64];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6838,58458,ngx_shmtx_sh_t,4,ngx_shmtx_sh_t,,core\ngx_shmtx.h,"typedef struct {
    ngx_atomic_t   lock;
#if (NGX_HAVE_POSIX_SEM)
    ngx_atomic_t   wait;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6839,58462,ngx_shmtx_t,4,ngx_shmtx_t,,core\ngx_shmtx.h,"typedef struct {
#if (NGX_HAVE_ATOMIC_OPS)
    ngx_atomic_t  *lock;
#if (NGX_HAVE_POSIX_SEM)
    ngx_atomic_t  *wait;
    ngx_uint_t     semaphore;
    sem_t          sem;
#endif
#else
    ngx_fd_t       fd;
    u_char        *name;
#endif
    ngx_uint_t     spin;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6840,61187,ngx_slab_page_s,4,ngx_slab_page_s,,core\ngx_slab.h,typedef struct ngx_slab_page_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6841,61188,ngx_slab_page_t,4,ngx_slab_page_t,,core\ngx_slab.h,typedef struct ngx_slab_page_s  ngx_slab_page_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6842,61189,ngx_slab_page_s,4,ngx_slab_page_s,,core\ngx_slab.h,"struct ngx_slab_page_s {
    uintptr_t         slab;
    ngx_slab_page_t  *next;
    uintptr_t         prev;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6843,61193,ngx_slab_stat_t,4,ngx_slab_stat_t,,core\ngx_slab.h,"typedef struct {
    ngx_uint_t        total;
    ngx_uint_t        used;

    ngx_uint_t        reqs;
    ngx_uint_t        fails;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6844,61199,ngx_slab_pool_t,4,ngx_slab_pool_t,,core\ngx_slab.h,"typedef struct {
    ngx_shmtx_sh_t    lock;

    size_t            min_size;
    size_t            min_shift;

    ngx_slab_page_t  *pages;
    ngx_slab_page_t  *last;
    ngx_slab_page_t   free;

    ngx_slab_stat_t  *stats;
    ngx_uint_t        pfree;

    u_char           *start;
    u_char           *end;

    ngx_shmtx_t       mutex;

    u_char           *log_ctx;
    u_char            zero;

    unsigned          log_nomem:1;

    void             *data;
    void             *addr;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6845,66403,ngx_str_t,4,ngx_str_t,,core\ngx_string.h,"typedef struct {
    size_t      len;
    u_char     *data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6846,66407,ngx_keyval_t,4,ngx_keyval_t,,core\ngx_string.h,"typedef struct {
    ngx_str_t   key;
    ngx_str_t   value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6847,66411,ngx_variable_value_t,4,ngx_variable_value_t,,core\ngx_string.h,"typedef struct {
    unsigned    len:28;

    unsigned    valid:1;
    unsigned    no_cacheable:1;
    unsigned    not_found:1;
    unsigned    escape:1;

    u_char     *data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6848,66658,ngx_str_node_t,4,ngx_str_node_t,,core\ngx_string.h,"typedef struct {
    ngx_rbtree_node_t         node;
    ngx_str_t                 str;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6849,67717,ngx_syslog_peer_t,4,ngx_syslog_peer_t,,core\ngx_syslog.h,"typedef struct {
    ngx_uint_t        facility;
    ngx_uint_t        severity;
    ngx_str_t         tag;

    ngx_addr_t        server;
    ngx_connection_t  conn;
    unsigned          busy:1;
    unsigned          nohostname:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6850,67764,ngx_thread_pool_conf_t,4,ngx_thread_pool_conf_t,,core\ngx_thread_pool.c,"typedef struct {
    ngx_array_t               pools;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6851,67767,ngx_thread_pool_queue_t,4,ngx_thread_pool_queue_t,,core\ngx_thread_pool.c,"typedef struct {
    ngx_thread_task_t        *first;
    ngx_thread_task_t       **last;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6852,67771,ngx_thread_pool_s,4,ngx_thread_pool_s,,core\ngx_thread_pool.c,"struct ngx_thread_pool_s {
    ngx_thread_mutex_t        mtx;
    ngx_thread_pool_queue_t   queue;
    ngx_int_t                 waiting;
    ngx_thread_cond_t         cond;

    ngx_log_t                *log;

    ngx_str_t                 name;
    ngx_uint_t                threads;
    ngx_int_t                 max_queue;

    u_char                   *file;
    ngx_uint_t                line;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6853,69354,ngx_thread_task_s,4,ngx_thread_task_s,,core\ngx_thread_pool.h,"struct ngx_thread_task_s {
    ngx_thread_task_t   *next;
    ngx_uint_t           id;
    void                *ctx;
    void               (*handler)(void *data, ngx_log_t *log);
    ngx_event_t          event;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6854,69365,ngx_thread_pool_s,4,ngx_thread_pool_s,,core\ngx_thread_pool.h,typedef struct ngx_thread_pool_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6855,69366,ngx_thread_pool_t,4,ngx_thread_pool_t,,core\ngx_thread_pool.h,typedef struct ngx_thread_pool_s  ngx_thread_pool_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6856,70490,ngx_time_t,4,ngx_time_t,,core\ngx_times.h,"typedef struct {
    time_t      sec;
    ngx_uint_t  msec;
    ngx_int_t   gmtoff;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6857,70551,ngx_devpoll_conf_t,4,ngx_devpoll_conf_t,,event\modules\ngx_devpoll_module.c,"typedef struct {
    ngx_uint_t      changes;
    ngx_uint_t      events;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6858,70610,pollfd,4,pollfd,,event\modules\ngx_devpoll_module.c,static struct pollfd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6859,71748,ngx_epoll_conf_t,4,ngx_epoll_conf_t,,event\modules\ngx_epoll_module.c,"typedef struct {
    ngx_uint_t  events;
    ngx_uint_t  aio_requests;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6860,71811,epoll_event,4,epoll_event,,event\modules\ngx_epoll_module.c,static struct epoll_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6861,72871,ngx_eventport_conf_t,4,ngx_eventport_conf_t,,event\modules\ngx_eventport_module.c,"typedef struct {
    ngx_uint_t  events;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6862,74767,ngx_iocp_conf_t,4,ngx_iocp_conf_t,,event\modules\ngx_iocp_module.h,"typedef struct {
    int  threads;
    int  post_acceptex;
    int  acceptex_read;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6863,74784,ngx_kqueue_conf_t,4,ngx_kqueue_conf_t,,event\modules\ngx_kqueue_module.c,"typedef struct {
    ngx_uint_t  changes;
    ngx_uint_t  events;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6864,74844,kevent,4,kevent,,event\modules\ngx_kqueue_module.c,static struct kevent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6865,74846,kevent,4,kevent,,event\modules\ngx_kqueue_module.c,static struct kevent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6866,76017,pollfd,4,pollfd,,event\modules\ngx_poll_module.c,static struct pollfd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6867,77897,pollfd,4,pollfd,,event\modules\ngx_win32_poll_module.c,static struct pollfd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6868,82181,ngx_event_s,4,ngx_event_s,,event\ngx_event.h,"struct ngx_event_s {
    void            *data;

    unsigned         write:1;

    unsigned         accept:1;

    /* used to detect the stale events in kqueue and epoll */
    unsigned         instance:1;

    /*
     * the event was passed or would be passed to a kernel;
     * in aio mode - operation was posted.
     */
    unsigned         active:1;

    unsigned         disabled:1;

    /* the ready event; in aio mode 0 means that no operation can be posted */
    unsigned         ready:1;

    unsigned         oneshot:1;

    /* aio operation is complete */
    unsigned         complete:1;

    unsigned         eof:1;
    unsigned         error:1;

    unsigned         timedout:1;
    unsigned         timer_set:1;

    unsigned         delayed:1;

    unsigned         deferred_accept:1;

    /* the pending eof reported by kqueue, epoll or in aio chain operation */
    unsigned         pending_eof:1;

    unsigned         posted:1;

    unsigned         closed:1;

    /* to te...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6869,82220,ngx_event_actions_t,4,ngx_event_actions_t,,event\ngx_event.h,"typedef struct {
    ngx_int_t  (*add)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);
    ngx_int_t  (*del)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);

    ngx_int_t  (*enable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);
    ngx_int_t  (*disable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);

    ngx_int_t  (*add_conn)(ngx_connection_t *c);
    ngx_int_t  (*del_conn)(ngx_connection_t *c, ngx_uint_t flags);

    ngx_int_t  (*notify)(ngx_event_handler_pt handler);

    ngx_int_t  (*process_events)(ngx_cycle_t *cycle, ngx_msec_t timer,
                                 ngx_uint_t flags);

    ngx_int_t  (*init)(ngx_cycle_t *cycle, ngx_msec_t timer);
    void       (*done)(ngx_cycle_t *cycle);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6870,82286,ngx_event_conf_t,4,ngx_event_conf_t,,event\ngx_event.h,"typedef struct {
    ngx_uint_t    connections;
    ngx_uint_t    use;

    ngx_flag_t    multi_accept;
    ngx_flag_t    accept_mutex;

    ngx_msec_t    accept_mutex_delay;

    u_char       *name;

#if (NGX_DEBUG)
    ngx_array_t   debug_connection;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6871,82295,ngx_event_module_t,4,ngx_event_module_t,,event\ngx_event.h,"typedef struct {
    ngx_str_t              *name;

    void                 *(*create_conf)(ngx_cycle_t *cycle);
    char                 *(*init_conf)(ngx_cycle_t *cycle, void *conf);

    ngx_event_actions_t     actions;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6872,84476,ngx_peer_connection_s,4,ngx_peer_connection_s,,event\ngx_event_connect.h,typedef struct ngx_peer_connection_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6873,84477,ngx_peer_connection_t,4,ngx_peer_connection_t,,event\ngx_event_connect.h,typedef struct ngx_peer_connection_s  ngx_peer_connection_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6874,84510,ngx_peer_connection_s,4,ngx_peer_connection_s,,event\ngx_event_connect.h,"struct ngx_peer_connection_s {
    ngx_connection_t                *connection;

    struct sockaddr                 *sockaddr;
    socklen_t                        socklen;
    ngx_str_t                       *name;

    ngx_uint_t                       tries;
    ngx_msec_t                       start_time;

    ngx_event_get_peer_pt            get;
    ngx_event_free_peer_pt           free;
    ngx_event_notify_peer_pt         notify;
    void                            *data;

#if (NGX_SSL || NGX_COMPAT)
    ngx_event_set_peer_session_pt    set_session;
    ngx_event_save_peer_session_pt   save_session;
#endif

    ngx_addr_t                      *local;

    int                              type;
    int                              rcvbuf;

    ngx_log_t                       *log;

    unsigned                         cached:1;
    unsigned                         transparent:1;
    unsigned                         so_keepalive:1;
    unsigned                         down:1;
...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6875,84512,sockaddr,4,ngx_peer_connection_s.sockaddr,,event\ngx_event_connect.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6876,85021,ngx_openssl_conf_t,4,ngx_openssl_conf_t,,event\ngx_event_openssl.c,"typedef struct {
    ngx_uint_t  engine;   /* unsigned  engine:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6877,94034,ngx_ssl_ocsp_s,4,ngx_ssl_ocsp_s,,event\ngx_event_openssl.h,typedef struct ngx_ssl_ocsp_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6878,94035,ngx_ssl_ocsp_t,4,ngx_ssl_ocsp_t,,event\ngx_event_openssl.h,typedef struct ngx_ssl_ocsp_s  ngx_ssl_ocsp_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6879,94036,ngx_ssl_s,4,ngx_ssl_s,,event\ngx_event_openssl.h,"struct ngx_ssl_s {
    SSL_CTX                    *ctx;
    ngx_log_t                  *log;
    size_t                      buffer_size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6880,94040,ngx_ssl_connection_s,4,ngx_ssl_connection_s,,event\ngx_event_openssl.h,"struct ngx_ssl_connection_s {
    ngx_ssl_conn_t             *connection;
    SSL_CTX                    *session_ctx;

    ngx_int_t                   last;
    ngx_buf_t                  *buf;
    size_t                      buffer_size;

    ngx_connection_handler_pt   handler;

    ngx_ssl_session_t          *session;
    ngx_connection_handler_pt   save_session;

    ngx_event_handler_pt        saved_read_handler;
    ngx_event_handler_pt        saved_write_handler;

    ngx_ssl_ocsp_t             *ocsp;

    u_char                      early_buf;

    unsigned                    handshaked:1;
    unsigned                    handshake_rejected:1;
    unsigned                    renegotiation:1;
    unsigned                    buffer:1;
    unsigned                    no_wait_shutdown:1;
    unsigned                    no_send_shutdown:1;
    unsigned                    shutdown_without_free:1;
    unsigned                    handshake_buffer_set:1;
    unsigned                 ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6881,94066,ngx_ssl_sess_id_s,4,ngx_ssl_sess_id_s,,event\ngx_event_openssl.h,typedef struct ngx_ssl_sess_id_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6882,94067,ngx_ssl_sess_id_t,4,ngx_ssl_sess_id_t,,event\ngx_event_openssl.h,typedef struct ngx_ssl_sess_id_s  ngx_ssl_sess_id_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6883,94068,ngx_ssl_sess_id_s,4,ngx_ssl_sess_id_s,,event\ngx_event_openssl.h,"struct ngx_ssl_sess_id_s {
    ngx_rbtree_node_t           node;
    u_char                     *id;
    size_t                      len;
    u_char                     *session;
    ngx_queue_t                 queue;
    time_t                      expire;
#if (NGX_PTR_SIZE == 8)
    void                       *stub;
    u_char                      sess_id[32];
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6884,94083,ngx_ssl_session_cache_t,4,ngx_ssl_session_cache_t,,event\ngx_event_openssl.h,"typedef struct {
    ngx_rbtree_t                session_rbtree;
    ngx_rbtree_node_t           sentinel;
    ngx_queue_t                 expire_queue;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6885,97481,ngx_event_pipe_s,4,ngx_event_pipe_s,,event\ngx_event_pipe.h,typedef struct ngx_event_pipe_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6886,97482,ngx_event_pipe_t,4,ngx_event_pipe_t,,event\ngx_event_pipe.h,typedef struct ngx_event_pipe_s  ngx_event_pipe_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6887,97495,ngx_event_pipe_s,4,ngx_event_pipe_s,,event\ngx_event_pipe.h,"struct ngx_event_pipe_s {
    ngx_connection_t  *upstream;
    ngx_connection_t  *downstream;

    ngx_chain_t       *free_raw_bufs;
    ngx_chain_t       *in;
    ngx_chain_t      **last_in;

    ngx_chain_t       *writing;

    ngx_chain_t       *out;
    ngx_chain_t       *free;
    ngx_chain_t       *busy;

    /*
     * the input filter i.e. that moves HTTP/1.1 chunks
     * from the raw bufs to an incoming chain
     */

    ngx_event_pipe_input_filter_pt    input_filter;
    void                             *input_ctx;

    ngx_event_pipe_output_filter_pt   output_filter;
    void                             *output_ctx;

#if (NGX_THREADS || NGX_COMPAT)
    ngx_int_t                       (*thread_handler)(ngx_thread_task_t *task,
                                                      ngx_file_t *file);
    void                             *thread_ctx;
    ngx_thread_task_t                *thread_task;
#endif

    unsigned           read:1;
    unsigned           cacheable:1;
...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6888,97967,ngx_udp_connection_s,4,ngx_udp_connection_s,,event\ngx_event_udp.c,"struct ngx_udp_connection_s {
    ngx_rbtree_node_t   node;
    ngx_connection_t   *connection;
    ngx_buf_t          *buffer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6889,99233,ngx_http_access_rule_t,4,ngx_http_access_rule_t,,http\modules\ngx_http_access_module.c,"typedef struct {
    in_addr_t         mask;
    in_addr_t         addr;
    ngx_uint_t        deny;      /* unsigned  deny:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6890,99238,ngx_http_access_loc_conf_t,4,ngx_http_access_loc_conf_t,,http\modules\ngx_http_access_module.c,"typedef struct {
    ngx_array_t      *rules;     /* array of ngx_http_access_rule_t */
#if (NGX_HAVE_INET6)
    ngx_array_t      *rules6;    /* array of ngx_http_access_rule6_t */
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
    ngx_array_t      *rules_un;  /* array of ngx_http_access_rule_un_t */
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6891,99795,ngx_http_addition_conf_t,4,ngx_http_addition_conf_t,,http\modules\ngx_http_addition_filter_module.c,"typedef struct {
    ngx_str_t     before_body;
    ngx_str_t     after_body;

    ngx_hash_t    types;
    ngx_array_t  *types_keys;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6892,99801,ngx_http_addition_ctx_t,4,ngx_http_addition_ctx_t,,http\modules\ngx_http_addition_filter_module.c,"typedef struct {
    ngx_uint_t    before_body_sent;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6893,100307,ngx_http_auth_basic_loc_conf_t,4,ngx_http_auth_basic_loc_conf_t,,http\modules\ngx_http_auth_basic_module.c,"typedef struct {
    ngx_http_complex_value_t  *realm;
    ngx_http_complex_value_t  *user_file;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6894,101374,ngx_http_auth_request_conf_t,4,ngx_http_auth_request_conf_t,,http\modules\ngx_http_auth_request_module.c,"typedef struct {
    ngx_str_t                 uri;
    ngx_array_t              *vars;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6895,101378,ngx_http_auth_request_ctx_t,4,ngx_http_auth_request_ctx_t,,http\modules\ngx_http_auth_request_module.c,"typedef struct {
    ngx_uint_t                done;
    ngx_uint_t                status;
    ngx_http_request_t       *subrequest;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6896,101383,ngx_http_auth_request_variable_t,4,ngx_http_auth_request_variable_t,,http\modules\ngx_http_auth_request_module.c,"typedef struct {
    ngx_int_t                 index;
    ngx_http_complex_value_t  value;
    ngx_http_set_variable_pt  set_handler;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6897,102344,ngx_http_autoindex_entry_t,4,ngx_http_autoindex_entry_t,,http\modules\ngx_http_autoindex_module.c,"typedef struct {
    ngx_str_t      name;
    size_t         utf_len;
    size_t         escape;
    size_t         escape_html;

    unsigned       dir:1;
    unsigned       file:1;

    time_t         mtime;
    off_t          size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6898,102354,ngx_http_autoindex_loc_conf_t,4,ngx_http_autoindex_loc_conf_t,,http\modules\ngx_http_autoindex_module.c,"typedef struct {
    ngx_flag_t     enable;
    ngx_uint_t     format;
    ngx_flag_t     localtime;
    ngx_flag_t     exact_size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6899,105601,ngx_http_modern_browser_mask_t,4,ngx_http_modern_browser_mask_t,,http\modules\ngx_http_browser_module.c,"typedef struct {
    u_char                      browser[12];
    size_t                      skip;
    size_t                      add;
    u_char                      name[12];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6900,105615,ngx_http_modern_browser_t,4,ngx_http_modern_browser_t,,http\modules\ngx_http_browser_module.c,"typedef struct {
    ngx_uint_t                  version;
    size_t                      skip;
    size_t                      add;
    u_char                      name[12];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6901,105627,ngx_http_browser_conf_t,4,ngx_http_browser_conf_t,,http\modules\ngx_http_browser_module.c,"typedef struct {
    ngx_array_t                *modern_browsers;
    ngx_array_t                *ancient_browsers;
    ngx_http_variable_value_t  *modern_browser_value;
    ngx_http_variable_value_t  *ancient_browser_value;

    unsigned                    modern_unlisted_browsers:1;
    unsigned                    netscape4:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6902,107271,ngx_http_charset_t,4,ngx_http_charset_t,,http\modules\ngx_http_charset_filter_module.c,"typedef struct {
    u_char                    **tables;
    ngx_str_t                   name;

    unsigned                    length:16;
    unsigned                    utf8:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6903,107277,ngx_http_charset_recode_t,4,ngx_http_charset_recode_t,,http\modules\ngx_http_charset_filter_module.c,"typedef struct {
    ngx_int_t                   src;
    ngx_int_t                   dst;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6904,107281,ngx_http_charset_tables_t,4,ngx_http_charset_tables_t,,http\modules\ngx_http_charset_filter_module.c,"typedef struct {
    ngx_int_t                   src;
    ngx_int_t                   dst;
    u_char                     *src2dst;
    u_char                     *dst2src;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6905,107287,ngx_http_charset_main_conf_t,4,ngx_http_charset_main_conf_t,,http\modules\ngx_http_charset_filter_module.c,"typedef struct {
    ngx_array_t                 charsets;       /* ngx_http_charset_t */
    ngx_array_t                 tables;         /* ngx_http_charset_tables_t */
    ngx_array_t                 recodes;        /* ngx_http_charset_recode_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6906,107292,ngx_http_charset_loc_conf_t,4,ngx_http_charset_loc_conf_t,,http\modules\ngx_http_charset_filter_module.c,"typedef struct {
    ngx_int_t                   charset;
    ngx_int_t                   source_charset;
    ngx_flag_t                  override_charset;

    ngx_hash_t                  types;
    ngx_array_t                *types_keys;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6907,107299,ngx_http_charset_ctx_t,4,ngx_http_charset_ctx_t,,http\modules\ngx_http_charset_filter_module.c,"typedef struct {
    u_char                     *table;
    ngx_int_t                   charset;
    ngx_str_t                   charset_name;

    ngx_chain_t                *busy;
    ngx_chain_t                *free_bufs;
    ngx_chain_t                *free_buffers;

    size_t                      saved_len;
    u_char                      saved[NGX_UTF_LEN];

    unsigned                    length:16;
    unsigned                    from_utf8:1;
    unsigned                    to_utf8:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6908,107320,ngx_http_charset_conf_ctx_t,4,ngx_http_charset_conf_ctx_t,,http\modules\ngx_http_charset_filter_module.c,"typedef struct {
    ngx_http_charset_tables_t  *table;
    ngx_http_charset_t         *charset;
    ngx_uint_t                  characters;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6909,111938,ngx_http_chunked_filter_ctx_t,4,ngx_http_chunked_filter_ctx_t,,http\modules\ngx_http_chunked_filter_module.c,"typedef struct {
    ngx_chain_t         *free;
    ngx_chain_t         *busy;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6910,112897,ngx_http_dav_loc_conf_t,4,ngx_http_dav_loc_conf_t,,http\modules\ngx_http_dav_module.c,"typedef struct {
    ngx_uint_t  methods;
    ngx_uint_t  access;
    ngx_uint_t  min_delete_depth;
    ngx_flag_t  create_full_put_path;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6911,112903,ngx_http_dav_copy_ctx_t,4,ngx_http_dav_copy_ctx_t,,http\modules\ngx_http_dav_module.c,"typedef struct {
    ngx_str_t   path;
    size_t      len;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6912,116068,ngx_http_degradation_main_conf_t,4,ngx_http_degradation_main_conf_t,,http\modules\ngx_http_degradation_module.c,"typedef struct {
    size_t      sbrk_size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6913,116071,ngx_http_degradation_loc_conf_t,4,ngx_http_degradation_loc_conf_t,,http\modules\ngx_http_degradation_module.c,"typedef struct {
    ngx_uint_t  degrade;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6914,116686,ngx_http_fastcgi_main_conf_t,4,ngx_http_fastcgi_main_conf_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    ngx_array_t                    caches;  /* ngx_http_file_cache_t * */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6915,116689,ngx_http_fastcgi_params_t,4,ngx_http_fastcgi_params_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    ngx_array_t                   *flushes;
    ngx_array_t                   *lengths;
    ngx_array_t                   *values;
    ngx_uint_t                     number;
    ngx_hash_t                     hash;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6916,116696,ngx_http_fastcgi_loc_conf_t,4,ngx_http_fastcgi_loc_conf_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    ngx_http_upstream_conf_t       upstream;

    ngx_str_t                      index;

    ngx_http_fastcgi_params_t      params;
#if (NGX_HTTP_CACHE)
    ngx_http_fastcgi_params_t      params_cache;
#endif

    ngx_array_t                   *params_source;
    ngx_array_t                   *catch_stderr;

    ngx_array_t                   *fastcgi_lengths;
    ngx_array_t                   *fastcgi_values;

    ngx_flag_t                     keep_conn;

#if (NGX_HTTP_CACHE)
    ngx_http_complex_value_t       cache_key;
#endif

#if (NGX_PCRE)
    ngx_regex_t                   *split_regex;
    ngx_str_t                      split_name;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6917,116710,ngx_http_fastcgi_state_e,4,ngx_http_fastcgi_state_e,,http\modules\ngx_http_fastcgi_module.c,"typedef enum {
    ngx_http_fastcgi_st_version = 0,
    ngx_http_fastcgi_st_type,
    ngx_http_fastcgi_st_request_id_hi,
    ngx_http_fastcgi_st_request_id_lo,
    ngx_http_fastcgi_st_content_length_hi,
    ngx_http_fastcgi_st_content_length_lo,
    ngx_http_fastcgi_st_padding_length,
    ngx_http_fastcgi_st_reserved,
    ngx_http_fastcgi_st_data,
    ngx_http_fastcgi_st_padding
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6918,116729,ngx_http_fastcgi_split_part_t,4,ngx_http_fastcgi_split_part_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    u_char                        *start;
    u_char                        *end;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6919,116733,ngx_http_fastcgi_ctx_t,4,ngx_http_fastcgi_ctx_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    ngx_http_fastcgi_state_e       state;
    u_char                        *pos;
    u_char                        *last;
    ngx_uint_t                     type;
    size_t                         length;
    size_t                         padding;

    off_t                          rest;

    ngx_chain_t                   *free;
    ngx_chain_t                   *busy;

    unsigned                       fastcgi_stdout:1;
    unsigned                       large_stderr:1;
    unsigned                       header_sent:1;
    unsigned                       closed:1;

    ngx_array_t                   *split_parts;

    ngx_str_t                      script_name;
    ngx_str_t                      path_info;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6920,116751,ngx_http_fastcgi_header_t,4,ngx_http_fastcgi_header_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    u_char  version;
    u_char  type;
    u_char  request_id_hi;
    u_char  request_id_lo;
    u_char  content_length_hi;
    u_char  content_length_lo;
    u_char  padding_length;
    u_char  reserved;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6921,116761,ngx_http_fastcgi_begin_request_t,4,ngx_http_fastcgi_begin_request_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    u_char  role_hi;
    u_char  role_lo;
    u_char  flags;
    u_char  reserved[5];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6922,116773,ngx_http_fastcgi_header_small_t,4,ngx_http_fastcgi_header_small_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    u_char  version;
    u_char  type;
    u_char  request_id_hi;
    u_char  request_id_lo;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6923,116779,ngx_http_fastcgi_request_start_t,4,ngx_http_fastcgi_request_start_t,,http\modules\ngx_http_fastcgi_module.c,"typedef struct {
    ngx_http_fastcgi_header_t         h0;
    ngx_http_fastcgi_begin_request_t  br;
    ngx_http_fastcgi_header_small_t   h1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6924,127372,ngx_http_geo_range_t,4,ngx_http_geo_range_t,,http\modules\ngx_http_geo_module.c,"typedef struct {
    ngx_http_variable_value_t       *value;
    u_short                          start;
    u_short                          end;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6925,127377,ngx_http_geo_trees_t,4,ngx_http_geo_trees_t,,http\modules\ngx_http_geo_module.c,"typedef struct {
    ngx_radix_tree_t                *tree;
#if (NGX_HAVE_INET6)
    ngx_radix_tree_t                *tree6;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6926,127381,ngx_http_geo_high_ranges_t,4,ngx_http_geo_high_ranges_t,,http\modules\ngx_http_geo_module.c,"typedef struct {
    ngx_http_geo_range_t           **low;
    ngx_http_variable_value_t       *default_value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6927,127385,ngx_http_geo_variable_value_node_t,4,ngx_http_geo_variable_value_node_t,,http\modules\ngx_http_geo_module.c,"typedef struct {
    ngx_str_node_t                   sn;
    ngx_http_variable_value_t       *value;
    size_t                           offset;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6928,127390,ngx_http_geo_conf_ctx_t,4,ngx_http_geo_conf_ctx_t,,http\modules\ngx_http_geo_module.c,"typedef struct {
    ngx_http_variable_value_t       *value;
    ngx_str_t                       *net;
    ngx_http_geo_high_ranges_t       high;
    ngx_radix_tree_t                *tree;
#if (NGX_HAVE_INET6)
    ngx_radix_tree_t                *tree6;
#endif
    ngx_rbtree_t                     rbtree;
    ngx_rbtree_node_t                sentinel;
    ngx_array_t                     *proxies;
    ngx_pool_t                      *pool;
    ngx_pool_t                      *temp_pool;

    size_t                           data_size;

    ngx_str_t                        include_name;
    ngx_uint_t                       includes;
    ngx_uint_t                       entries;

    unsigned                         ranges:1;
    unsigned                         outside_entries:1;
    unsigned                         allow_binary_include:1;
    unsigned                         binary_include:1;
    unsigned                         proxy_recursive:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6929,127411,ngx_http_geo_ctx_t,4,ngx_http_geo_ctx_t,,http\modules\ngx_http_geo_module.c,"typedef struct {
    union {
        ngx_http_geo_trees_t         trees;
        ngx_http_geo_high_ranges_t   high;
    } u;

    ngx_array_t                     *proxies;
    unsigned                         proxy_recursive:1;

    ngx_int_t                        index;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6930,127412,ngx_http_geo_ctx_t.u,4,ngx_http_geo_ctx_t.u,,http\modules\ngx_http_geo_module.c,"union {
        ngx_http_geo_trees_t         trees;
        ngx_http_geo_high_ranges_t   high;
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6931,127581,ngx_http_geo_header_t,4,ngx_http_geo_header_t,,http\modules\ngx_http_geo_module.c,"typedef struct {
    u_char    GEORNG[6];
    u_char    version;
    u_char    ptr_size;
    uint32_t  endianness;
    uint32_t  crc32;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6932,131684,ngx_http_geoip_conf_t,4,ngx_http_geoip_conf_t,,http\modules\ngx_http_geoip_module.c,"typedef struct {
    GeoIP        *country;
    GeoIP        *org;
    GeoIP        *city;
    ngx_array_t  *proxies;    /* array of ngx_cidr_t */
    ngx_flag_t    proxy_recursive;
#if (NGX_HAVE_GEOIP_V6)
    unsigned      country_v6:1;
    unsigned      org_v6:1;
    unsigned      city_v6:1;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6933,131694,ngx_http_geoip_var_t,4,ngx_http_geoip_var_t,,http\modules\ngx_http_geoip_module.c,"typedef struct {
    ngx_str_t    *name;
    uintptr_t     data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6934,133431,ngx_http_grpc_headers_t,4,ngx_http_grpc_headers_t,,http\modules\ngx_http_grpc_module.c,"typedef struct {
    ngx_array_t               *flushes;
    ngx_array_t               *lengths;
    ngx_array_t               *values;
    ngx_hash_t                 hash;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6935,133437,ngx_http_grpc_loc_conf_t,4,ngx_http_grpc_loc_conf_t,,http\modules\ngx_http_grpc_module.c,"typedef struct {
    ngx_http_upstream_conf_t   upstream;

    ngx_http_grpc_headers_t    headers;
    ngx_array_t               *headers_source;

    ngx_str_t                  host;
    ngx_uint_t                 host_set;

    ngx_array_t               *grpc_lengths;
    ngx_array_t               *grpc_values;

#if (NGX_HTTP_SSL)
    ngx_uint_t                 ssl;
    ngx_uint_t                 ssl_protocols;
    ngx_str_t                  ssl_ciphers;
    ngx_uint_t                 ssl_verify_depth;
    ngx_str_t                  ssl_trusted_certificate;
    ngx_str_t                  ssl_crl;
    ngx_array_t               *ssl_conf_commands;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6936,133453,ngx_http_grpc_state_e,4,ngx_http_grpc_state_e,,http\modules\ngx_http_grpc_module.c,"typedef enum {
    ngx_http_grpc_st_start = 0,
    ngx_http_grpc_st_length_2,
    ngx_http_grpc_st_length_3,
    ngx_http_grpc_st_type,
    ngx_http_grpc_st_flags,
    ngx_http_grpc_st_stream_id,
    ngx_http_grpc_st_stream_id_2,
    ngx_http_grpc_st_stream_id_3,
    ngx_http_grpc_st_stream_id_4,
    ngx_http_grpc_st_payload,
    ngx_http_grpc_st_padding
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6937,133473,ngx_http_grpc_conn_t,4,ngx_http_grpc_conn_t,,http\modules\ngx_http_grpc_module.c,"typedef struct {
    size_t                     init_window;
    size_t                     send_window;
    size_t                     recv_window;
    ngx_uint_t                 last_stream_id;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6938,133479,ngx_http_grpc_ctx_t,4,ngx_http_grpc_ctx_t,,http\modules\ngx_http_grpc_module.c,"typedef struct {
    ngx_http_grpc_state_e      state;
    ngx_uint_t                 frame_state;
    ngx_uint_t                 fragment_state;

    ngx_chain_t               *in;
    ngx_chain_t               *out;
    ngx_chain_t               *free;
    ngx_chain_t               *busy;

    ngx_http_grpc_conn_t      *connection;

    ngx_uint_t                 id;

    ngx_uint_t                 pings;
    ngx_uint_t                 settings;

    off_t                      length;

    ssize_t                    send_window;
    size_t                     recv_window;

    size_t                     rest;
    ngx_uint_t                 stream_id;
    u_char                     type;
    u_char                     flags;
    u_char                     padding;

    ngx_uint_t                 error;
    ngx_uint_t                 window_update;

    ngx_uint_t                 setting_id;
    ngx_uint_t                 setting_value;

    u_char                     ping_data[8];
...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6939,133531,ngx_http_grpc_frame_t,4,ngx_http_grpc_frame_t,,http\modules\ngx_http_grpc_module.c,"typedef struct {
    u_char                     length_0;
    u_char                     length_1;
    u_char                     length_2;
    u_char                     type;
    u_char                     flags;
    u_char                     stream_id_0;
    u_char                     stream_id_1;
    u_char                     stream_id_2;
    u_char                     stream_id_3;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6940,146085,ngx_http_gunzip_conf_t,4,ngx_http_gunzip_conf_t,,http\modules\ngx_http_gunzip_filter_module.c,"typedef struct {
    ngx_flag_t           enable;
    ngx_bufs_t           bufs;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6941,146089,ngx_http_gunzip_ctx_t,4,ngx_http_gunzip_ctx_t,,http\modules\ngx_http_gunzip_filter_module.c,"typedef struct {
    ngx_chain_t         *in;
    ngx_chain_t         *free;
    ngx_chain_t         *busy;
    ngx_chain_t         *out;
    ngx_chain_t        **last_out;

    ngx_buf_t           *in_buf;
    ngx_buf_t           *out_buf;
    ngx_int_t            bufs;

    unsigned             started:1;
    unsigned             flush:4;
    unsigned             redo:1;
    unsigned             done:1;
    unsigned             nomem:1;

    z_stream             zstream;
    ngx_http_request_t  *request;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6942,147785,ngx_http_gzip_conf_t,4,ngx_http_gzip_conf_t,,http\modules\ngx_http_gzip_filter_module.c,"typedef struct {
    ngx_flag_t           enable;
    ngx_flag_t           no_buffer;

    ngx_hash_t           types;

    ngx_bufs_t           bufs;

    size_t               postpone_gzipping;
    ngx_int_t            level;
    size_t               wbits;
    size_t               memlevel;
    ssize_t              min_length;

    ngx_array_t         *types_keys;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6943,147797,ngx_http_gzip_ctx_t,4,ngx_http_gzip_ctx_t,,http\modules\ngx_http_gzip_filter_module.c,"typedef struct {
    ngx_chain_t         *in;
    ngx_chain_t         *free;
    ngx_chain_t         *busy;
    ngx_chain_t         *out;
    ngx_chain_t        **last_out;

    ngx_chain_t         *copied;
    ngx_chain_t         *copy_buf;

    ngx_buf_t           *in_buf;
    ngx_buf_t           *out_buf;
    ngx_int_t            bufs;

    void                *preallocated;
    char                *free_mem;
    ngx_uint_t           allocated;

    int                  wbits;
    int                  memlevel;

    unsigned             flush:4;
    unsigned             redo:1;
    unsigned             done:1;
    unsigned             nomem:1;
    unsigned             buffering:1;
    unsigned             zlib_ng:1;

    size_t               zin;
    size_t               zout;

    z_stream             zstream;
    ngx_http_request_t  *request;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6944,150659,ngx_http_gzip_static_conf_t,4,ngx_http_gzip_static_conf_t,,http\modules\ngx_http_gzip_static_module.c,"typedef struct {
    ngx_uint_t  enable;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6945,151440,ngx_http_header_val_s,4,ngx_http_header_val_s,,http\modules\ngx_http_headers_filter_module.c,typedef struct ngx_http_header_val_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6946,151441,ngx_http_header_val_t,4,ngx_http_header_val_t,,http\modules\ngx_http_headers_filter_module.c,typedef struct ngx_http_header_val_s  ngx_http_header_val_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6947,151449,ngx_http_set_header_t,4,ngx_http_set_header_t,,http\modules\ngx_http_headers_filter_module.c,"typedef struct {
    ngx_str_t                  name;
    ngx_uint_t                 offset;
    ngx_http_set_header_pt     handler;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6948,151454,ngx_http_header_val_s,4,ngx_http_header_val_s,,http\modules\ngx_http_headers_filter_module.c,"struct ngx_http_header_val_s {
    ngx_http_complex_value_t   value;
    ngx_str_t                  key;
    ngx_http_set_header_pt     handler;
    ngx_uint_t                 offset;
    ngx_uint_t                 always;  /* unsigned  always:1 */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6949,151460,ngx_http_expires_t,4,ngx_http_expires_t,,http\modules\ngx_http_headers_filter_module.c,"typedef enum {
    NGX_HTTP_EXPIRES_OFF,
    NGX_HTTP_EXPIRES_EPOCH,
    NGX_HTTP_EXPIRES_MAX,
    NGX_HTTP_EXPIRES_ACCESS,
    NGX_HTTP_EXPIRES_MODIFIED,
    NGX_HTTP_EXPIRES_DAILY,
    NGX_HTTP_EXPIRES_UNSET
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6950,151469,ngx_http_headers_conf_t,4,ngx_http_headers_conf_t,,http\modules\ngx_http_headers_filter_module.c,"typedef struct {
    ngx_http_expires_t         expires;
    time_t                     expires_time;
    ngx_http_complex_value_t  *expires_value;
    ngx_array_t               *headers;
    ngx_array_t               *trailers;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6951,153648,ngx_http_image_filter_conf_t,4,ngx_http_image_filter_conf_t,,http\modules\ngx_http_image_filter_module.c,"typedef struct {
    ngx_uint_t                   filter;
    ngx_uint_t                   width;
    ngx_uint_t                   height;
    ngx_uint_t                   angle;
    ngx_uint_t                   jpeg_quality;
    ngx_uint_t                   webp_quality;
    ngx_uint_t                   sharpen;

    ngx_flag_t                   transparency;
    ngx_flag_t                   interlace;

    ngx_http_complex_value_t    *wcv;
    ngx_http_complex_value_t    *hcv;
    ngx_http_complex_value_t    *acv;
    ngx_http_complex_value_t    *jqcv;
    ngx_http_complex_value_t    *wqcv;
    ngx_http_complex_value_t    *shcv;

    size_t                       buffer_size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6952,153666,ngx_http_image_filter_ctx_t,4,ngx_http_image_filter_ctx_t,,http\modules\ngx_http_image_filter_module.c,"typedef struct {
    u_char                      *image;
    u_char                      *last;

    size_t                       length;

    ngx_uint_t                   width;
    ngx_uint_t                   height;
    ngx_uint_t                   max_width;
    ngx_uint_t                   max_height;
    ngx_uint_t                   angle;

    ngx_uint_t                   phase;
    ngx_uint_t                   type;
    ngx_uint_t                   force;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6953,158076,ngx_http_index_t,4,ngx_http_index_t,,http\modules\ngx_http_index_module.c,"typedef struct {
    ngx_str_t                name;
    ngx_array_t             *lengths;
    ngx_array_t             *values;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6954,158081,ngx_http_index_loc_conf_t,4,ngx_http_index_loc_conf_t,,http\modules\ngx_http_index_module.c,"typedef struct {
    ngx_array_t             *indices;    /* array of ngx_http_index_t */
    size_t                   max_index_len;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6955,159527,ngx_http_limit_conn_node_t,4,ngx_http_limit_conn_node_t,,http\modules\ngx_http_limit_conn_module.c,"typedef struct {
    u_char                        color;
    u_char                        len;
    u_short                       conn;
    u_char                        data[1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6956,159539,ngx_http_limit_conn_cleanup_t,4,ngx_http_limit_conn_cleanup_t,,http\modules\ngx_http_limit_conn_module.c,"typedef struct {
    ngx_shm_zone_t               *shm_zone;
    ngx_rbtree_node_t            *node;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6957,159543,ngx_http_limit_conn_shctx_t,4,ngx_http_limit_conn_shctx_t,,http\modules\ngx_http_limit_conn_module.c,"typedef struct {
    ngx_rbtree_t                  rbtree;
    ngx_rbtree_node_t             sentinel;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6958,159547,ngx_http_limit_conn_ctx_t,4,ngx_http_limit_conn_ctx_t,,http\modules\ngx_http_limit_conn_module.c,"typedef struct {
    ngx_http_limit_conn_shctx_t  *sh;
    ngx_slab_pool_t              *shpool;
    ngx_http_complex_value_t      key;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6959,159552,ngx_http_limit_conn_limit_t,4,ngx_http_limit_conn_limit_t,,http\modules\ngx_http_limit_conn_module.c,"typedef struct {
    ngx_shm_zone_t               *shm_zone;
    ngx_uint_t                    conn;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6960,159556,ngx_http_limit_conn_conf_t,4,ngx_http_limit_conn_conf_t,,http\modules\ngx_http_limit_conn_module.c,"typedef struct {
    ngx_array_t                   limits;
    ngx_uint_t                    log_level;
    ngx_uint_t                    status_code;
    ngx_flag_t                    dry_run;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6961,161466,ngx_http_limit_req_node_t,4,ngx_http_limit_req_node_t,,http\modules\ngx_http_limit_req_module.c,"typedef struct {
    u_char                       color;
    u_char                       dummy;
    u_short                      len;
    ngx_queue_t                  queue;
    ngx_msec_t                   last;
    /* integer value, 1 corresponds to 0.001 r/s */
    ngx_uint_t                   excess;
    ngx_uint_t                   count;
    u_char                       data[1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6962,161482,ngx_http_limit_req_shctx_t,4,ngx_http_limit_req_shctx_t,,http\modules\ngx_http_limit_req_module.c,"typedef struct {
    ngx_rbtree_t                  rbtree;
    ngx_rbtree_node_t             sentinel;
    ngx_queue_t                   queue;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6963,161487,ngx_http_limit_req_ctx_t,4,ngx_http_limit_req_ctx_t,,http\modules\ngx_http_limit_req_module.c,"typedef struct {
    ngx_http_limit_req_shctx_t  *sh;
    ngx_slab_pool_t             *shpool;
    /* integer value, 1 corresponds to 0.001 r/s */
    ngx_uint_t                   rate;
    ngx_http_complex_value_t     key;
    ngx_http_limit_req_node_t   *node;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6964,161494,ngx_http_limit_req_limit_t,4,ngx_http_limit_req_limit_t,,http\modules\ngx_http_limit_req_module.c,"typedef struct {
    ngx_shm_zone_t              *shm_zone;
    /* integer value, 1 corresponds to 0.001 r/s */
    ngx_uint_t                   burst;
    ngx_uint_t                   delay;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6965,161499,ngx_http_limit_req_conf_t,4,ngx_http_limit_req_conf_t,,http\modules\ngx_http_limit_req_module.c,"typedef struct {
    ngx_array_t                  limits;
    ngx_uint_t                   limit_log_level;
    ngx_uint_t                   delay_log_level;
    ngx_uint_t                   status_code;
    ngx_flag_t                   dry_run;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6966,164384,ngx_http_log_op_s,4,ngx_http_log_op_s,,http\modules\ngx_http_log_module.c,typedef struct ngx_http_log_op_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6967,164385,ngx_http_log_op_t,4,ngx_http_log_op_t,,http\modules\ngx_http_log_module.c,typedef struct ngx_http_log_op_s  ngx_http_log_op_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6968,164399,ngx_http_log_op_s,4,ngx_http_log_op_s,,http\modules\ngx_http_log_module.c,"struct ngx_http_log_op_s {
    size_t                      len;
    ngx_http_log_op_getlen_pt   getlen;
    ngx_http_log_op_run_pt      run;
    uintptr_t                   data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6969,164404,ngx_http_log_fmt_t,4,ngx_http_log_fmt_t,,http\modules\ngx_http_log_module.c,"typedef struct {
    ngx_str_t                   name;
    ngx_array_t                *flushes;
    ngx_array_t                *ops;        /* array of ngx_http_log_op_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6970,164409,ngx_http_log_main_conf_t,4,ngx_http_log_main_conf_t,,http\modules\ngx_http_log_module.c,"typedef struct {
    ngx_array_t                 formats;    /* array of ngx_http_log_fmt_t */
    ngx_uint_t                  combined_used; /* unsigned  combined_used:1 */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6971,164413,ngx_http_log_buf_t,4,ngx_http_log_buf_t,,http\modules\ngx_http_log_module.c,"typedef struct {
    u_char                     *start;
    u_char                     *pos;
    u_char                     *last;

    ngx_event_t                *event;
    ngx_msec_t                  flush;
    ngx_int_t                   gzip;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6972,164421,ngx_http_log_script_t,4,ngx_http_log_script_t,,http\modules\ngx_http_log_module.c,"typedef struct {
    ngx_array_t                *lengths;
    ngx_array_t                *values;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6973,164425,ngx_http_log_t,4,ngx_http_log_t,,http\modules\ngx_http_log_module.c,"typedef struct {
    ngx_open_file_t            *file;
    ngx_http_log_script_t      *script;
    time_t                      disk_full_time;
    time_t                      error_log_time;
    ngx_syslog_peer_t          *syslog_peer;
    ngx_http_log_fmt_t         *format;
    ngx_http_complex_value_t   *filter;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6974,164434,ngx_http_log_loc_conf_t,4,ngx_http_log_loc_conf_t,,http\modules\ngx_http_log_module.c,"typedef struct {
    ngx_array_t                *logs;       /* array of ngx_http_log_t */

    ngx_open_file_cache_t      *open_file_cache;
    time_t                      open_file_cache_valid;
    ngx_uint_t                  open_file_cache_min_uses;

    ngx_uint_t                  off;        /* unsigned  off:1 */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6975,164441,ngx_http_log_var_t,4,ngx_http_log_var_t,,http\modules\ngx_http_log_module.c,"typedef struct {
    ngx_str_t                   name;
    size_t                      len;
    ngx_http_log_op_run_pt      run;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6976,168946,ngx_http_map_conf_t,4,ngx_http_map_conf_t,,http\modules\ngx_http_map_module.c,"typedef struct {
    ngx_uint_t                  hash_max_size;
    ngx_uint_t                  hash_bucket_size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6977,168950,ngx_http_map_conf_ctx_t,4,ngx_http_map_conf_ctx_t,,http\modules\ngx_http_map_module.c,"typedef struct {
    ngx_hash_keys_arrays_t      keys;

    ngx_array_t                *values_hash;
#if (NGX_PCRE)
    ngx_array_t                 regexes;
#endif

    ngx_http_variable_value_t  *default_value;
    ngx_conf_t                 *cf;
    unsigned                    hostnames:1;
    unsigned                    no_cacheable:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6978,168959,ngx_http_map_ctx_t,4,ngx_http_map_ctx_t,,http\modules\ngx_http_map_module.c,"typedef struct {
    ngx_http_map_t              map;
    ngx_http_complex_value_t    value;
    ngx_http_variable_value_t  *default_value;
    ngx_uint_t                  hostnames;      /* unsigned  hostnames:1 */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6979,170434,ngx_http_memcached_loc_conf_t,4,ngx_http_memcached_loc_conf_t,,http\modules\ngx_http_memcached_module.c,"typedef struct {
    ngx_http_upstream_conf_t   upstream;
    ngx_int_t                  index;
    ngx_uint_t                 gzip_flag;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6980,170439,ngx_http_memcached_ctx_t,4,ngx_http_memcached_ctx_t,,http\modules\ngx_http_memcached_module.c,"typedef struct {
    size_t                     rest;
    ngx_http_request_t        *request;
    ngx_str_t                  key;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6981,172568,ngx_http_mirror_loc_conf_t,4,ngx_http_mirror_loc_conf_t,,http\modules\ngx_http_mirror_module.c,"typedef struct {
    ngx_array_t  *mirror;
    ngx_flag_t    request_body;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6982,172572,ngx_http_mirror_ctx_t,4,ngx_http_mirror_ctx_t,,http\modules\ngx_http_mirror_module.c,"typedef struct {
    ngx_int_t     status;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6983,173102,ngx_http_mp4_conf_t,4,ngx_http_mp4_conf_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    size_t                buffer_size;
    size_t                max_buffer_size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6984,173106,ngx_mp4_stsc_entry_t,4,ngx_mp4_stsc_entry_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char                chunk[4];
    u_char                samples[4];
    u_char                id[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6985,173121,ngx_http_mp4_trak_t,4,ngx_http_mp4_trak_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    uint32_t              timescale;
    uint32_t              time_to_sample_entries;
    uint32_t              sample_to_chunk_entries;
    uint32_t              sync_samples_entries;
    uint32_t              composition_offset_entries;
    uint32_t              sample_sizes_entries;
    uint32_t              chunks;

    ngx_uint_t            start_sample;
    ngx_uint_t            end_sample;
    ngx_uint_t            start_chunk;
    ngx_uint_t            end_chunk;
    ngx_uint_t            start_chunk_samples;
    ngx_uint_t            end_chunk_samples;
    uint64_t              start_chunk_samples_size;
    uint64_t              end_chunk_samples_size;
    off_t                 start_offset;
    off_t                 end_offset;

    size_t                tkhd_size;
    size_t                mdhd_size;
    size_t                hdlr_size;
    size_t                vmhd_size;
    size_t                smhd_size;
    size_t                dinf_size;
    size...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6986,173187,ngx_http_mp4_file_t,4,ngx_http_mp4_file_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    ngx_file_t            file;

    u_char               *buffer;
    u_char               *buffer_start;
    u_char               *buffer_pos;
    u_char               *buffer_end;
    size_t                buffer_size;

    off_t                 offset;
    off_t                 end;
    off_t                 content_length;
    ngx_uint_t            start;
    ngx_uint_t            length;
    uint32_t              timescale;
    ngx_http_request_t   *request;
    ngx_array_t           trak;
    ngx_http_mp4_trak_t   traks[2];

    size_t                ftyp_size;
    size_t                moov_size;

    ngx_chain_t          *out;
    ngx_chain_t           ftyp_atom;
    ngx_chain_t           moov_atom;
    ngx_chain_t           mvhd_atom;
    ngx_chain_t           mdat_atom;
    ngx_chain_t           mdat_data;

    ngx_buf_t             ftyp_atom_buf;
    ngx_buf_t             moov_atom_buf;
    ngx_buf_t             mvhd_atom_buf;
    ngx_buf_t             m...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6987,173229,ngx_http_mp4_atom_handler_t,4,ngx_http_mp4_atom_handler_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    char                 *name;
    ngx_int_t           (*handler)(ngx_http_mp4_file_t *mp4,
                                   uint64_t atom_data_size);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6988,175289,ngx_mp4_atom_header_t,4,ngx_mp4_atom_header_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6989,175301,ngx_mp4_atom_header64_t,4,ngx_mp4_atom_header64_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    size64[8];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6990,176935,ngx_mp4_mvhd_atom_t,4,ngx_mp4_mvhd_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    creation_time[4];
    u_char    modification_time[4];
    u_char    timescale[4];
    u_char    duration[4];
    u_char    rate[4];
    u_char    volume[2];
    u_char    reserved[10];
    u_char    matrix[36];
    u_char    preview_time[4];
    u_char    preview_duration[4];
    u_char    poster_time[4];
    u_char    selection_time[4];
    u_char    selection_duration[4];
    u_char    current_time[4];
    u_char    next_track_id[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6991,176998,ngx_mp4_mvhd64_atom_t,4,ngx_mp4_mvhd64_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    creation_time[8];
    u_char    modification_time[8];
    u_char    timescale[4];
    u_char    duration[8];
    u_char    rate[4];
    u_char    volume[2];
    u_char    reserved[10];
    u_char    matrix[36];
    u_char    preview_time[4];
    u_char    preview_duration[4];
    u_char    poster_time[4];
    u_char    selection_time[4];
    u_char    selection_duration[4];
    u_char    current_time[4];
    u_char    next_track_id[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6992,178107,ngx_mp4_tkhd_atom_t,4,ngx_mp4_tkhd_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    creation_time[4];
    u_char    modification_time[4];
    u_char    track_id[4];
    u_char    reserved1[4];
    u_char    duration[4];
    u_char    reserved2[8];
    u_char    layer[2];
    u_char    group[2];
    u_char    volume[2];
    u_char    reserved3[2];
    u_char    matrix[36];
    u_char    width[4];
    u_char    height[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6993,178164,ngx_mp4_tkhd64_atom_t,4,ngx_mp4_tkhd64_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    creation_time[8];
    u_char    modification_time[8];
    u_char    track_id[4];
    u_char    reserved1[4];
    u_char    duration[8];
    u_char    reserved2[8];
    u_char    layer[2];
    u_char    group[2];
    u_char    volume[2];
    u_char    reserved3[2];
    u_char    matrix[36];
    u_char    width[4];
    u_char    height[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6994,179122,ngx_mp4_mdhd_atom_t,4,ngx_mp4_mdhd_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    creation_time[4];
    u_char    modification_time[4];
    u_char    timescale[4];
    u_char    duration[4];
    u_char    language[2];
    u_char    quality[2];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6995,179158,ngx_mp4_mdhd64_atom_t,4,ngx_mp4_mdhd64_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    creation_time[8];
    u_char    modification_time[8];
    u_char    timescale[4];
    u_char    duration[8];
    u_char    language[2];
    u_char    quality[2];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6996,181238,ngx_mp4_stsd_atom_t,4,ngx_mp4_stsd_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    entries[4];

    u_char    media_size[4];
    u_char    media_name[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6997,181584,ngx_mp4_stts_atom_t,4,ngx_mp4_stts_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    entries[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6998,181605,ngx_mp4_stts_entry_t,4,ngx_mp4_stts_entry_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    count[4];
    u_char    duration[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
6999,182668,ngx_http_mp4_stss_atom_t,4,ngx_http_mp4_stss_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    entries[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7000,183549,ngx_mp4_ctts_atom_t,4,ngx_mp4_ctts_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    entries[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7001,183570,ngx_mp4_ctts_entry_t,4,ngx_mp4_ctts_entry_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    count[4];
    u_char    offset[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7002,184529,ngx_mp4_stsc_atom_t,4,ngx_mp4_stsc_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    entries[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7003,186706,ngx_mp4_stsz_atom_t,4,ngx_mp4_stsz_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    uniform_size[4];
    u_char    entries[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7004,187651,ngx_mp4_stco_atom_t,4,ngx_mp4_stco_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    entries[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7005,188745,ngx_mp4_co64_atom_t,4,ngx_mp4_co64_atom_t,,http\modules\ngx_http_mp4_module.c,"typedef struct {
    u_char    size[4];
    u_char    name[4];
    u_char    version[1];
    u_char    flags[3];
    u_char    entries[4];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7006,190833,ngx_http_proxy_main_conf_t,4,ngx_http_proxy_main_conf_t,,http\modules\ngx_http_proxy_module.c,"typedef struct {
    ngx_array_t                    caches;  /* ngx_http_file_cache_t * */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7007,190836,ngx_http_proxy_rewrite_s,4,ngx_http_proxy_rewrite_s,,http\modules\ngx_http_proxy_module.c,typedef struct ngx_http_proxy_rewrite_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7008,190837,ngx_http_proxy_rewrite_t,4,ngx_http_proxy_rewrite_t,,http\modules\ngx_http_proxy_module.c,typedef struct ngx_http_proxy_rewrite_s  ngx_http_proxy_rewrite_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7009,190847,ngx_http_proxy_rewrite_s,4,ngx_http_proxy_rewrite_s,,http\modules\ngx_http_proxy_module.c,"struct ngx_http_proxy_rewrite_s {
    ngx_http_proxy_rewrite_pt      handler;

    union {
        ngx_http_complex_value_t   complex;
#if (NGX_PCRE)
        ngx_http_regex_t          *regex;
#endif
    } pattern;

    ngx_http_complex_value_t       replacement;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7010,190849,ngx_http_proxy_rewrite_s.pattern,4,ngx_http_proxy_rewrite_s.pattern,,http\modules\ngx_http_proxy_module.c,"union {
        ngx_http_complex_value_t   complex;
#if (NGX_PCRE)
        ngx_http_regex_t          *regex;
#endif
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7011,190854,ngx_http_proxy_cookie_flags_t,4,ngx_http_proxy_cookie_flags_t,,http\modules\ngx_http_proxy_module.c,"typedef struct {
    union {
        ngx_http_complex_value_t   complex;
#if (NGX_PCRE)
        ngx_http_regex_t          *regex;
#endif
    } cookie;

    ngx_array_t                    flags_values;
    ngx_uint_t                     regex;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7012,190855,ngx_http_proxy_cookie_flags_t.cookie,4,ngx_http_proxy_cookie_flags_t.cookie,,http\modules\ngx_http_proxy_module.c,"union {
        ngx_http_complex_value_t   complex;
#if (NGX_PCRE)
        ngx_http_regex_t          *regex;
#endif
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7013,190862,ngx_http_proxy_vars_t,4,ngx_http_proxy_vars_t,,http\modules\ngx_http_proxy_module.c,"typedef struct {
    ngx_str_t                      key_start;
    ngx_str_t                      schema;
    ngx_str_t                      host_header;
    ngx_str_t                      port;
    ngx_str_t                      uri;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7014,190869,ngx_http_proxy_headers_t,4,ngx_http_proxy_headers_t,,http\modules\ngx_http_proxy_module.c,"typedef struct {
    ngx_array_t                   *flushes;
    ngx_array_t                   *lengths;
    ngx_array_t                   *values;
    ngx_hash_t                     hash;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7015,190875,ngx_http_proxy_loc_conf_t,4,ngx_http_proxy_loc_conf_t,,http\modules\ngx_http_proxy_module.c,"typedef struct {
    ngx_http_upstream_conf_t       upstream;

    ngx_array_t                   *body_flushes;
    ngx_array_t                   *body_lengths;
    ngx_array_t                   *body_values;
    ngx_str_t                      body_source;

    ngx_http_proxy_headers_t       headers;
#if (NGX_HTTP_CACHE)
    ngx_http_proxy_headers_t       headers_cache;
#endif
    ngx_array_t                   *headers_source;

    ngx_array_t                   *proxy_lengths;
    ngx_array_t                   *proxy_values;

    ngx_array_t                   *redirects;
    ngx_array_t                   *cookie_domains;
    ngx_array_t                   *cookie_paths;
    ngx_array_t                   *cookie_flags;

    ngx_http_complex_value_t      *method;
    ngx_str_t                      location;
    ngx_str_t                      url;

#if (NGX_HTTP_CACHE)
    ngx_http_complex_value_t       cache_key;
#endif

    ngx_http_proxy_vars_t          vars;

    ngx_flag_t         ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7016,190907,ngx_http_proxy_ctx_t,4,ngx_http_proxy_ctx_t,,http\modules\ngx_http_proxy_module.c,"typedef struct {
    ngx_http_status_t              status;
    ngx_http_chunked_t             chunked;
    ngx_http_proxy_vars_t          vars;
    off_t                          internal_body_length;

    ngx_chain_t                   *free;
    ngx_chain_t                   *busy;

    unsigned                       head:1;
    unsigned                       internal_chunked:1;
    unsigned                       header_sent:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7017,203372,ngx_http_random_index_loc_conf_t,4,ngx_http_random_index_loc_conf_t,,http\modules\ngx_http_random_index_module.c,"typedef struct {
    ngx_flag_t  enable;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7018,204118,ngx_http_range_t,4,ngx_http_range_t,,http\modules\ngx_http_range_filter_module.c,"typedef struct {
    off_t        start;
    off_t        end;
    ngx_str_t    content_range;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7019,204123,ngx_http_range_filter_ctx_t,4,ngx_http_range_filter_ctx_t,,http\modules\ngx_http_range_filter_module.c,"typedef struct {
    off_t        offset;
    ngx_str_t    boundary_header;
    ngx_array_t  ranges;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7020,206631,ngx_http_realip_loc_conf_t,4,ngx_http_realip_loc_conf_t,,http\modules\ngx_http_realip_module.c,"typedef struct {
    ngx_array_t       *from;     /* array of ngx_cidr_t */
    ngx_uint_t         type;
    ngx_uint_t         hash;
    ngx_str_t          header;
    ngx_flag_t         recursive;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7021,206638,ngx_http_realip_ctx_t,4,ngx_http_realip_ctx_t,,http\modules\ngx_http_realip_module.c,"typedef struct {
    ngx_connection_t  *connection;
    struct sockaddr   *sockaddr;
    socklen_t          socklen;
    ngx_str_t          addr_text;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7022,206640,sockaddr,4,ngx_http_realip_ctx_t.sockaddr,,http\modules\ngx_http_realip_module.c,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7023,208096,ngx_http_referer_conf_t,4,ngx_http_referer_conf_t,,http\modules\ngx_http_referer_module.c,"typedef struct {
    ngx_hash_combined_t      hash;

#if (NGX_PCRE)
    ngx_array_t             *regex;
    ngx_array_t             *server_name_regex;
#endif

    ngx_flag_t               no_referer;
    ngx_flag_t               blocked_referer;
    ngx_flag_t               server_names;

    ngx_hash_keys_arrays_t  *keys;

    ngx_uint_t               referer_hash_max_size;
    ngx_uint_t               referer_hash_bucket_size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7024,209430,ngx_http_rewrite_loc_conf_t,4,ngx_http_rewrite_loc_conf_t,,http\modules\ngx_http_rewrite_module.c,"typedef struct {
    ngx_array_t  *codes;        /* uintptr_t */

    ngx_uint_t    stack_size;

    ngx_flag_t    log;
    ngx_flag_t    uninitialized_variable_warn;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7025,212412,ngx_http_scgi_main_conf_t,4,ngx_http_scgi_main_conf_t,,http\modules\ngx_http_scgi_module.c,"typedef struct {
    ngx_array_t                caches;  /* ngx_http_file_cache_t * */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7026,212415,ngx_http_scgi_params_t,4,ngx_http_scgi_params_t,,http\modules\ngx_http_scgi_module.c,"typedef struct {
    ngx_array_t               *flushes;
    ngx_array_t               *lengths;
    ngx_array_t               *values;
    ngx_uint_t                 number;
    ngx_hash_t                 hash;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7027,212422,ngx_http_scgi_loc_conf_t,4,ngx_http_scgi_loc_conf_t,,http\modules\ngx_http_scgi_module.c,"typedef struct {
    ngx_http_upstream_conf_t   upstream;

    ngx_http_scgi_params_t     params;
#if (NGX_HTTP_CACHE)
    ngx_http_scgi_params_t     params_cache;
#endif
    ngx_array_t               *params_source;

    ngx_array_t               *scgi_lengths;
    ngx_array_t               *scgi_values;

#if (NGX_HTTP_CACHE)
    ngx_http_complex_value_t   cache_key;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7028,217582,ngx_http_secure_link_conf_t,4,ngx_http_secure_link_conf_t,,http\modules\ngx_http_secure_link_module.c,"typedef struct {
    ngx_http_complex_value_t  *variable;
    ngx_http_complex_value_t  *md5;
    ngx_str_t                  secret;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7029,217587,ngx_http_secure_link_ctx_t,4,ngx_http_secure_link_ctx_t,,http\modules\ngx_http_secure_link_module.c,"typedef struct {
    ngx_str_t                  expires;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7030,218416,ngx_http_slice_loc_conf_t,4,ngx_http_slice_loc_conf_t,,http\modules\ngx_http_slice_filter_module.c,"typedef struct {
    size_t               size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7031,218419,ngx_http_slice_ctx_t,4,ngx_http_slice_ctx_t,,http\modules\ngx_http_slice_filter_module.c,"typedef struct {
    off_t                start;
    off_t                end;
    ngx_str_t            range;
    ngx_str_t            etag;
    unsigned             last:1;
    unsigned             active:1;
    ngx_http_request_t  *sr;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7032,218428,ngx_http_slice_content_range_t,4,ngx_http_slice_content_range_t,,http\modules\ngx_http_slice_filter_module.c,"typedef struct {
    off_t                start;
    off_t                end;
    off_t                complete_length;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7033,219973,ngx_http_split_clients_part_t,4,ngx_http_split_clients_part_t,,http\modules\ngx_http_split_clients_module.c,"typedef struct {
    uint32_t                    percent;
    ngx_http_variable_value_t   value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7034,219977,ngx_http_split_clients_ctx_t,4,ngx_http_split_clients_ctx_t,,http\modules\ngx_http_split_clients_module.c,"typedef struct {
    ngx_http_complex_value_t    value;
    ngx_array_t                 parts;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7035,220610,ngx_http_ssi_loc_conf_t,4,ngx_http_ssi_loc_conf_t,,http\modules\ngx_http_ssi_filter_module.c,"typedef struct {
    ngx_flag_t    enable;
    ngx_flag_t    silent_errors;
    ngx_flag_t    ignore_recycled_buffers;
    ngx_flag_t    last_modified;

    ngx_hash_t    types;

    size_t        min_file_chunk;
    size_t        value_len;

    ngx_array_t  *types_keys;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7036,220620,ngx_http_ssi_var_t,4,ngx_http_ssi_var_t,,http\modules\ngx_http_ssi_filter_module.c,"typedef struct {
    ngx_str_t     name;
    ngx_uint_t    key;
    ngx_str_t     value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7037,220625,ngx_http_ssi_block_t,4,ngx_http_ssi_block_t,,http\modules\ngx_http_ssi_filter_module.c,"typedef struct {
    ngx_str_t     name;
    ngx_chain_t  *bufs;
    ngx_uint_t    count;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7038,220630,ngx_http_ssi_state_e,4,ngx_http_ssi_state_e,,http\modules\ngx_http_ssi_filter_module.c,"typedef enum {
    ssi_start_state = 0,
    ssi_tag_state,
    ssi_comment0_state,
    ssi_comment1_state,
    ssi_sharp_state,
    ssi_precommand_state,
    ssi_command_state,
    ssi_preparam_state,
    ssi_param_state,
    ssi_preequal_state,
    ssi_prevalue_state,
    ssi_double_quoted_value_state,
    ssi_quoted_value_state,
    ssi_quoted_symbol_state,
    ssi_postparam_state,
    ssi_comment_end0_state,
    ssi_comment_end1_state,
    ssi_error_state,
    ssi_error_end0_state,
    ssi_error_end1_state
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7039,228660,ngx_http_ssi_main_conf_t,4,ngx_http_ssi_main_conf_t,,http\modules\ngx_http_ssi_filter_module.h,"typedef struct {
    ngx_hash_t                hash;
    ngx_hash_keys_arrays_t    commands;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7040,228664,ngx_http_ssi_ctx_t,4,ngx_http_ssi_ctx_t,,http\modules\ngx_http_ssi_filter_module.h,"typedef struct {
    ngx_buf_t                *buf;

    u_char                   *pos;
    u_char                   *copy_start;
    u_char                   *copy_end;

    ngx_uint_t                key;
    ngx_str_t                 command;
    ngx_array_t               params;
    ngx_table_elt_t          *param;
    ngx_table_elt_t           params_array[NGX_HTTP_SSI_PARAMS_N];

    ngx_chain_t              *in;
    ngx_chain_t              *out;
    ngx_chain_t             **last_out;
    ngx_chain_t              *busy;
    ngx_chain_t              *free;

    ngx_uint_t                state;
    ngx_uint_t                saved_state;
    size_t                    saved;
    size_t                    looked;

    size_t                    value_len;

    ngx_list_t               *variables;
    ngx_array_t              *blocks;

#if (NGX_PCRE)
    ngx_uint_t                ncaptures;
    int                      *captures;
    u_char                   *captures_data;
#endif

...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7041,228714,ngx_http_ssi_param_t,4,ngx_http_ssi_param_t,,http\modules\ngx_http_ssi_filter_module.h,"typedef struct {
    ngx_str_t                 name;
    ngx_uint_t                index;

    unsigned                  mandatory:1;
    unsigned                  multiple:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7042,228720,ngx_http_ssi_command_t,4,ngx_http_ssi_command_t,,http\modules\ngx_http_ssi_filter_module.h,"typedef struct {
    ngx_str_t                 name;
    ngx_http_ssi_command_pt   handler;
    ngx_http_ssi_param_t     *params;

    unsigned                  conditional:2;
    unsigned                  block:1;
    unsigned                  flush:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7043,232009,ngx_http_ssl_srv_conf_t,4,ngx_http_ssl_srv_conf_t,,http\modules\ngx_http_ssl_module.h,"typedef struct {
    ngx_flag_t                      enable;

    ngx_ssl_t                       ssl;

    ngx_flag_t                      prefer_server_ciphers;
    ngx_flag_t                      early_data;
    ngx_flag_t                      reject_handshake;

    ngx_uint_t                      protocols;

    ngx_uint_t                      verify;
    ngx_uint_t                      verify_depth;

    size_t                          buffer_size;

    ssize_t                         builtin_session_cache;

    time_t                          session_timeout;

    ngx_array_t                    *certificates;
    ngx_array_t                    *certificate_keys;

    ngx_array_t                    *certificate_values;
    ngx_array_t                    *certificate_key_values;

    ngx_str_t                       dhparam;
    ngx_str_t                       ecdh_curve;
    ngx_str_t                       client_certificate;
    ngx_str_t                       trusted_certifica...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7044,233411,ngx_http_sub_pair_t,4,ngx_http_sub_pair_t,,http\modules\ngx_http_sub_filter_module.c,"typedef struct {
    ngx_http_complex_value_t   match;
    ngx_http_complex_value_t   value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7045,233415,ngx_http_sub_match_t,4,ngx_http_sub_match_t,,http\modules\ngx_http_sub_filter_module.c,"typedef struct {
    ngx_str_t                  match;
    ngx_http_complex_value_t  *value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7046,233419,ngx_http_sub_tables_t,4,ngx_http_sub_tables_t,,http\modules\ngx_http_sub_filter_module.c,"typedef struct {
    ngx_uint_t                 min_match_len;
    ngx_uint_t                 max_match_len;

    u_char                     index[257];
    u_char                     shift[256];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7047,233433,ngx_http_sub_loc_conf_t,4,ngx_http_sub_loc_conf_t,,http\modules\ngx_http_sub_filter_module.c,"typedef struct {
    ngx_uint_t                 dynamic; /* unsigned dynamic:1; */

    ngx_array_t               *pairs;

    ngx_http_sub_tables_t     *tables;

    ngx_hash_t                 types;

    ngx_flag_t                 once;
    ngx_flag_t                 last_modified;

    ngx_array_t               *types_keys;
    ngx_array_t               *matches;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7048,233443,ngx_http_sub_ctx_t,4,ngx_http_sub_ctx_t,,http\modules\ngx_http_sub_filter_module.c,"typedef struct {
    ngx_str_t                  saved;
    ngx_str_t                  looked;

    ngx_uint_t                 once;   /* unsigned  once:1 */

    ngx_buf_t                 *buf;

    u_char                    *pos;
    u_char                    *copy_start;
    u_char                    *copy_end;

    ngx_chain_t               *in;
    ngx_chain_t               *out;
    ngx_chain_t              **last_out;
    ngx_chain_t               *busy;
    ngx_chain_t               *free;

    ngx_str_t                 *sub;
    ngx_uint_t                 applied;

    ngx_int_t                  offset;
    ngx_uint_t                 index;

    ngx_http_sub_tables_t     *tables;
    ngx_array_t               *matches;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7049,236473,ngx_http_try_file_t,4,ngx_http_try_file_t,,http\modules\ngx_http_try_files_module.c,"typedef struct {
    ngx_array_t           *lengths;
    ngx_array_t           *values;
    ngx_str_t              name;

    unsigned               code:10;
    unsigned               test_dir:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7050,236480,ngx_http_try_files_loc_conf_t,4,ngx_http_try_files_loc_conf_t,,http\modules\ngx_http_try_files_module.c,"typedef struct {
    ngx_http_try_file_t   *try_files;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7051,237655,ngx_http_upstream_chash_point_t,4,ngx_http_upstream_chash_point_t,,http\modules\ngx_http_upstream_hash_module.c,"typedef struct {
    uint32_t                            hash;
    ngx_str_t                          *server;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7052,237659,ngx_http_upstream_chash_points_t,4,ngx_http_upstream_chash_points_t,,http\modules\ngx_http_upstream_hash_module.c,"typedef struct {
    ngx_uint_t                          number;
    ngx_http_upstream_chash_point_t     point[1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7053,237669,ngx_http_upstream_hash_srv_conf_t,4,ngx_http_upstream_hash_srv_conf_t,,http\modules\ngx_http_upstream_hash_module.c,"typedef struct {
    ngx_http_complex_value_t            key;
    ngx_http_upstream_chash_points_t   *points;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7054,237673,ngx_http_upstream_hash_peer_data_t,4,ngx_http_upstream_hash_peer_data_t,,http\modules\ngx_http_upstream_hash_module.c,"typedef struct {
    /* the round robin data must be first */
    ngx_http_upstream_rr_peer_data_t    rrp;
    ngx_http_upstream_hash_srv_conf_t  *conf;
    ngx_str_t                           key;
    ngx_uint_t                          tries;
    ngx_uint_t                          rehash;
    uint32_t                            hash;
    ngx_event_get_peer_pt               get_rr_peer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7055,239578,ngx_http_upstream_ip_hash_peer_data_t,4,ngx_http_upstream_ip_hash_peer_data_t,,http\modules\ngx_http_upstream_ip_hash_module.c,"typedef struct {
    /* the round robin data must be first */
    ngx_http_upstream_rr_peer_data_t   rrp;

    ngx_uint_t                         hash;

    u_char                             addrlen;
    u_char                            *addr;

    u_char                             tries;

    ngx_event_get_peer_pt              get_rr_peer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7056,240230,ngx_http_upstream_keepalive_srv_conf_t,4,ngx_http_upstream_keepalive_srv_conf_t,,http\modules\ngx_http_upstream_keepalive_module.c,"typedef struct {
    ngx_uint_t                         max_cached;
    ngx_uint_t                         requests;
    ngx_msec_t                         time;
    ngx_msec_t                         timeout;

    ngx_queue_t                        cache;
    ngx_queue_t                        free;

    ngx_http_upstream_init_pt          original_init_upstream;
    ngx_http_upstream_init_peer_pt     original_init_peer;

}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7057,240240,ngx_http_upstream_keepalive_cache_t,4,ngx_http_upstream_keepalive_cache_t,,http\modules\ngx_http_upstream_keepalive_module.c,"typedef struct {
    ngx_http_upstream_keepalive_srv_conf_t  *conf;

    ngx_queue_t                        queue;
    ngx_connection_t                  *connection;

    socklen_t                          socklen;
    ngx_sockaddr_t                     sockaddr;

}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7058,240247,ngx_http_upstream_keepalive_peer_data_t,4,ngx_http_upstream_keepalive_peer_data_t,,http\modules\ngx_http_upstream_keepalive_module.c,"typedef struct {
    ngx_http_upstream_keepalive_srv_conf_t  *conf;

    ngx_http_upstream_t               *upstream;

    void                              *data;

    ngx_event_get_peer_pt              original_get_peer;
    ngx_event_free_peer_pt             original_free_peer;

#if (NGX_HTTP_SSL)
    ngx_event_set_peer_session_pt      original_set_session;
    ngx_event_save_peer_session_pt     original_save_session;
#endif

}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7059,242162,ngx_http_upstream_random_range_t,4,ngx_http_upstream_random_range_t,,http\modules\ngx_http_upstream_random_module.c,"typedef struct {
    ngx_http_upstream_rr_peer_t          *peer;
    ngx_uint_t                            range;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7060,242166,ngx_http_upstream_random_srv_conf_t,4,ngx_http_upstream_random_srv_conf_t,,http\modules\ngx_http_upstream_random_module.c,"typedef struct {
    ngx_uint_t                            two;
    ngx_http_upstream_random_range_t     *ranges;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7061,242170,ngx_http_upstream_random_peer_data_t,4,ngx_http_upstream_random_peer_data_t,,http\modules\ngx_http_upstream_random_module.c,"typedef struct {
    /* the round robin data must be first */
    ngx_http_upstream_rr_peer_data_t      rrp;

    ngx_http_upstream_random_srv_conf_t  *conf;
    u_char                                tries;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7062,244132,ngx_http_userid_conf_t,4,ngx_http_userid_conf_t,,http\modules\ngx_http_userid_filter_module.c,"typedef struct {
    ngx_uint_t  enable;
    ngx_uint_t  flags;

    ngx_int_t   service;

    ngx_str_t   name;
    ngx_str_t   domain;
    ngx_str_t   path;
    ngx_str_t   p3p;

    time_t      expires;

    u_char      mark;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7063,244143,ngx_http_userid_ctx_t,4,ngx_http_userid_ctx_t,,http\modules\ngx_http_userid_filter_module.c,"typedef struct {
    uint32_t    uid_got[4];
    uint32_t    uid_set[4];
    ngx_str_t   cookie;
    ngx_uint_t  reset;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7064,246662,ngx_http_uwsgi_main_conf_t,4,ngx_http_uwsgi_main_conf_t,,http\modules\ngx_http_uwsgi_module.c,"typedef struct {
    ngx_array_t                caches;  /* ngx_http_file_cache_t * */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7065,246665,ngx_http_uwsgi_params_t,4,ngx_http_uwsgi_params_t,,http\modules\ngx_http_uwsgi_module.c,"typedef struct {
    ngx_array_t               *flushes;
    ngx_array_t               *lengths;
    ngx_array_t               *values;
    ngx_uint_t                 number;
    ngx_hash_t                 hash;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7066,246672,ngx_http_uwsgi_loc_conf_t,4,ngx_http_uwsgi_loc_conf_t,,http\modules\ngx_http_uwsgi_module.c,"typedef struct {
    ngx_http_upstream_conf_t   upstream;

    ngx_http_uwsgi_params_t    params;
#if (NGX_HTTP_CACHE)
    ngx_http_uwsgi_params_t    params_cache;
#endif
    ngx_array_t               *params_source;

    ngx_array_t               *uwsgi_lengths;
    ngx_array_t               *uwsgi_values;

#if (NGX_HTTP_CACHE)
    ngx_http_complex_value_t   cache_key;
#endif

    ngx_str_t                  uwsgi_string;

    ngx_uint_t                 modifier1;
    ngx_uint_t                 modifier2;

#if (NGX_HTTP_SSL)
    ngx_uint_t                 ssl;
    ngx_uint_t                 ssl_protocols;
    ngx_str_t                  ssl_ciphers;
    ngx_uint_t                 ssl_verify_depth;
    ngx_str_t                  ssl_trusted_certificate;
    ngx_str_t                  ssl_crl;
    ngx_array_t               *ssl_conf_commands;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7067,252228,ngx_http_xslt_file_t,4,ngx_http_xslt_file_t,,http\modules\ngx_http_xslt_filter_module.c,"typedef struct {
    u_char                    *name;
    void                      *data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7068,252232,ngx_http_xslt_filter_main_conf_t,4,ngx_http_xslt_filter_main_conf_t,,http\modules\ngx_http_xslt_filter_module.c,"typedef struct {
    ngx_array_t                dtd_files;    /* ngx_http_xslt_file_t */
    ngx_array_t                sheet_files;  /* ngx_http_xslt_file_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7069,252236,ngx_http_xslt_param_t,4,ngx_http_xslt_param_t,,http\modules\ngx_http_xslt_filter_module.c,"typedef struct {
    u_char                    *name;
    ngx_http_complex_value_t   value;
    ngx_uint_t                 quote;        /* unsigned  quote:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7070,252241,ngx_http_xslt_sheet_t,4,ngx_http_xslt_sheet_t,,http\modules\ngx_http_xslt_filter_module.c,"typedef struct {
    xsltStylesheetPtr          stylesheet;
    ngx_array_t                params;       /* ngx_http_xslt_param_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7071,252245,ngx_http_xslt_filter_loc_conf_t,4,ngx_http_xslt_filter_loc_conf_t,,http\modules\ngx_http_xslt_filter_module.c,"typedef struct {
    xmlDtdPtr                  dtd;
    ngx_array_t                sheets;       /* ngx_http_xslt_sheet_t */
    ngx_hash_t                 types;
    ngx_array_t               *types_keys;
    ngx_array_t               *params;       /* ngx_http_xslt_param_t */
    ngx_flag_t                 last_modified;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7072,252253,ngx_http_xslt_filter_ctx_t,4,ngx_http_xslt_filter_ctx_t,,http\modules\ngx_http_xslt_filter_module.c,"typedef struct {
    xmlDocPtr                  doc;
    xmlParserCtxtPtr           ctxt;
    xsltTransformContextPtr    transform;
    ngx_http_request_t        *request;
    ngx_array_t                params;

    ngx_uint_t                 done;         /* unsigned  done:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7073,254996,ngx_http_perl_main_conf_t,4,ngx_http_perl_main_conf_t,,http\modules\perl\ngx_http_perl_module.c,"typedef struct {
    PerlInterpreter   *perl;
    HV                *nginx;
    ngx_array_t       *modules;
    ngx_array_t       *requires;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7074,255002,ngx_http_perl_loc_conf_t,4,ngx_http_perl_loc_conf_t,,http\modules\perl\ngx_http_perl_module.c,"typedef struct {
    SV                *sub;
    ngx_str_t          handler;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7075,255006,ngx_http_perl_variable_t,4,ngx_http_perl_variable_t,,http\modules\perl\ngx_http_perl_module.c,"typedef struct {
    SV                *sub;
    ngx_str_t          handler;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7076,256575,nginx,4,nginx,,http\modules\perl\ngx_http_perl_module.h,typedef ngx_http_request_t   *nginx;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7077,256576,ngx_http_perl_ctx_t,4,ngx_http_perl_ctx_t,,http\modules\perl\ngx_http_perl_module.h,"typedef struct {
    ngx_http_request_t       *request;

    ngx_str_t                 filename;
    ngx_str_t                 redirect_uri;

    SV                       *next;

    ngx_int_t                 status;

    unsigned                  done:1;
    unsigned                  error:1;
    unsigned                  variable:1;
    unsigned                  header_sent:1;

    ngx_array_t              *variables;  /* array of ngx_http_perl_var_t */

#if (NGX_HTTP_SSI)
    ngx_http_ssi_ctx_t       *ssi;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7078,256589,ngx_http_perl_var_t,4,ngx_http_perl_var_t,,http\modules\perl\ngx_http_perl_module.h,"typedef struct {
    ngx_uint_t    hash;
    ngx_str_t     name;
    ngx_str_t     value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7079,261678,ngx_http_request_s,4,ngx_http_request_s,,http\ngx_http.h,typedef struct ngx_http_request_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7080,261679,ngx_http_request_t,4,ngx_http_request_t,,http\ngx_http.h,typedef struct ngx_http_request_s     ngx_http_request_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7081,261680,ngx_http_upstream_s,4,ngx_http_upstream_s,,http\ngx_http.h,typedef struct ngx_http_upstream_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7082,261681,ngx_http_upstream_t,4,ngx_http_upstream_t,,http\ngx_http.h,typedef struct ngx_http_upstream_s    ngx_http_upstream_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7083,261682,ngx_http_cache_s,4,ngx_http_cache_s,,http\ngx_http.h,typedef struct ngx_http_cache_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7084,261683,ngx_http_cache_t,4,ngx_http_cache_t,,http\ngx_http.h,typedef struct ngx_http_cache_s       ngx_http_cache_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7085,261684,ngx_http_file_cache_s,4,ngx_http_file_cache_s,,http\ngx_http.h,typedef struct ngx_http_file_cache_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7086,261685,ngx_http_file_cache_t,4,ngx_http_file_cache_t,,http\ngx_http.h,typedef struct ngx_http_file_cache_s  ngx_http_file_cache_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7087,261686,ngx_http_log_ctx_s,4,ngx_http_log_ctx_s,,http\ngx_http.h,typedef struct ngx_http_log_ctx_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7088,261687,ngx_http_log_ctx_t,4,ngx_http_log_ctx_t,,http\ngx_http.h,typedef struct ngx_http_log_ctx_s     ngx_http_log_ctx_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7089,261688,ngx_http_chunked_s,4,ngx_http_chunked_s,,http\ngx_http.h,typedef struct ngx_http_chunked_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7090,261689,ngx_http_chunked_t,4,ngx_http_chunked_t,,http\ngx_http.h,typedef struct ngx_http_chunked_s     ngx_http_chunked_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7091,261690,ngx_http_v2_stream_s,4,ngx_http_v2_stream_s,,http\ngx_http.h,typedef struct ngx_http_v2_stream_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7092,261691,ngx_http_v2_stream_t,4,ngx_http_v2_stream_t,,http\ngx_http.h,typedef struct ngx_http_v2_stream_s   ngx_http_v2_stream_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7093,261707,ngx_http_log_ctx_s,4,ngx_http_log_ctx_s,,http\ngx_http.h,"struct ngx_http_log_ctx_s {
    ngx_connection_t    *connection;
    ngx_http_request_t  *request;
    ngx_http_request_t  *current_request;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7094,261711,ngx_http_chunked_s,4,ngx_http_chunked_s,,http\ngx_http.h,"struct ngx_http_chunked_s {
    ngx_uint_t           state;
    off_t                size;
    off_t                length;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7095,261715,ngx_http_status_t,4,ngx_http_status_t,,http\ngx_http.h,"typedef struct {
    ngx_uint_t           http_version;
    ngx_uint_t           code;
    ngx_uint_t           count;
    u_char              *start;
    u_char              *end;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7096,261985,ngx_http_cache_valid_t,4,ngx_http_cache_valid_t,,http\ngx_http_cache.h,"typedef struct {
    ngx_uint_t                       status;
    time_t                           valid;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7097,261989,ngx_http_file_cache_node_t,4,ngx_http_file_cache_node_t,,http\ngx_http_cache.h,"typedef struct {
    ngx_rbtree_node_t                node;
    ngx_queue_t                      queue;

    u_char                           key[NGX_HTTP_CACHE_KEY_LEN
                                         - sizeof(ngx_rbtree_key_t)];

    unsigned                         count:20;
    unsigned                         uses:10;
    unsigned                         valid_msec:10;
    unsigned                         error:10;
    unsigned                         exists:1;
    unsigned                         updating:1;
    unsigned                         deleting:1;
    unsigned                         purged:1;
                                     /* 10 unused bits */

    ngx_file_uniq_t                  uniq;
    time_t                           expire;
    time_t                           valid_sec;
    size_t                           body_start;
    off_t                            fs_size;
    ngx_msec_t                       lock_time;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7098,262019,ngx_http_cache_s,4,ngx_http_cache_s,,http\ngx_http_cache.h,"struct ngx_http_cache_s {
    ngx_file_t                       file;
    ngx_array_t                      keys;
    uint32_t                         crc32;
    u_char                           key[NGX_HTTP_CACHE_KEY_LEN];
    u_char                           main[NGX_HTTP_CACHE_KEY_LEN];

    ngx_file_uniq_t                  uniq;
    time_t                           valid_sec;
    time_t                           updating_sec;
    time_t                           error_sec;
    time_t                           last_modified;
    time_t                           date;

    ngx_str_t                        etag;
    ngx_str_t                        vary;
    u_char                           variant[NGX_HTTP_CACHE_KEY_LEN];

    size_t                           buffer_size;
    size_t                           header_start;
    size_t                           body_start;
    off_t                            length;
    off_t                            fs_size;

    ngx_uint_t        ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7099,262081,ngx_http_file_cache_header_t,4,ngx_http_file_cache_header_t,,http\ngx_http_cache.h,"typedef struct {
    ngx_uint_t                       version;
    time_t                           valid_sec;
    time_t                           updating_sec;
    time_t                           error_sec;
    time_t                           last_modified;
    time_t                           date;
    uint32_t                         crc32;
    u_short                          valid_msec;
    u_short                          header_start;
    u_short                          body_start;
    u_char                           etag_len;
    u_char                           etag[NGX_HTTP_CACHE_ETAG_LEN];
    u_char                           vary_len;
    u_char                           vary[NGX_HTTP_CACHE_VARY_LEN];
    u_char                           variant[NGX_HTTP_CACHE_KEY_LEN];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7100,262114,ngx_http_file_cache_sh_t,4,ngx_http_file_cache_sh_t,,http\ngx_http_cache.h,"typedef struct {
    ngx_rbtree_t                     rbtree;
    ngx_rbtree_node_t                sentinel;
    ngx_queue_t                      queue;
    ngx_atomic_t                     cold;
    ngx_atomic_t                     loading;
    off_t                            size;
    ngx_uint_t                       count;
    ngx_uint_t                       watermark;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7101,262124,ngx_http_file_cache_s,4,ngx_http_file_cache_s,,http\ngx_http_cache.h,"struct ngx_http_file_cache_s {
    ngx_http_file_cache_sh_t        *sh;
    ngx_slab_pool_t                 *shpool;

    ngx_path_t                      *path;

    off_t                            min_free;
    off_t                            max_size;
    size_t                           bsize;

    time_t                           inactive;

    time_t                           fail_time;

    ngx_uint_t                       files;
    ngx_uint_t                       loader_files;
    ngx_msec_t                       last;
    ngx_msec_t                       loader_sleep;
    ngx_msec_t                       loader_threshold;

    ngx_uint_t                       manager_files;
    ngx_msec_t                       manager_sleep;
    ngx_msec_t                       manager_threshold;

    ngx_shm_zone_t                  *shm_zone;

    ngx_uint_t                       use_temp_path;
                                     /* unsigned use_temp_path:1 */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7102,262224,ngx_http_conf_ctx_t,4,ngx_http_conf_ctx_t,,http\ngx_http_config.h,"typedef struct {
    void        **main_conf;
    void        **srv_conf;
    void        **loc_conf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7103,262229,ngx_http_module_t,4,ngx_http_module_t,,http\ngx_http_config.h,"typedef struct {
    ngx_int_t   (*preconfiguration)(ngx_conf_t *cf);
    ngx_int_t   (*postconfiguration)(ngx_conf_t *cf);

    void       *(*create_main_conf)(ngx_conf_t *cf);
    char       *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    void       *(*create_srv_conf)(ngx_conf_t *cf);
    char       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev, void *conf);

    void       *(*create_loc_conf)(ngx_conf_t *cf);
    char       *(*merge_loc_conf)(ngx_conf_t *cf, void *prev, void *conf);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7104,262287,ngx_http_copy_filter_conf_t,4,ngx_http_copy_filter_conf_t,,http\ngx_http_copy_filter_module.c,"typedef struct {
    ngx_bufs_t  bufs;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7105,262633,ngx_http_method_name_t,4,ngx_http_method_name_t,,http\ngx_http_core_module.c,"typedef struct {
    u_char    *name;
    uint32_t   method;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7106,274425,ngx_http_location_tree_node_s,4,ngx_http_location_tree_node_s,,http\ngx_http_core_module.h,typedef struct ngx_http_location_tree_node_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7107,274426,ngx_http_location_tree_node_t,4,ngx_http_location_tree_node_t,,http\ngx_http_core_module.h,typedef struct ngx_http_location_tree_node_s  ngx_http_location_tree_node_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7108,274427,ngx_http_core_loc_conf_s,4,ngx_http_core_loc_conf_s,,http\ngx_http_core_module.h,typedef struct ngx_http_core_loc_conf_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7109,274428,ngx_http_core_loc_conf_t,4,ngx_http_core_loc_conf_t,,http\ngx_http_core_module.h,typedef struct ngx_http_core_loc_conf_s  ngx_http_core_loc_conf_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7110,274429,ngx_http_listen_opt_t,4,ngx_http_listen_opt_t,,http\ngx_http_core_module.h,"typedef struct {
    struct sockaddr           *sockaddr;
    socklen_t                  socklen;
    ngx_str_t                  addr_text;

    unsigned                   set:1;
    unsigned                   default_server:1;
    unsigned                   bind:1;
    unsigned                   wildcard:1;
    unsigned                   ssl:1;
    unsigned                   http2:1;
#if (NGX_HAVE_INET6)
    unsigned                   ipv6only:1;
#endif
    unsigned                   deferred_accept:1;
    unsigned                   reuseport:1;
    unsigned                   so_keepalive:2;
    unsigned                   proxy_protocol:1;

    int                        backlog;
    int                        rcvbuf;
    int                        sndbuf;
#if (NGX_HAVE_SETFIB)
    int                        setfib;
#endif
#if (NGX_HAVE_TCP_FASTOPEN)
    int                        fastopen;
#endif
#if (NGX_HAVE_KEEPALIVE_TUNABLE)
    int                        tcp_keepidle;
    int...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7111,274430,sockaddr,4,ngx_http_listen_opt_t.sockaddr,,http\ngx_http_core_module.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7112,274455,ngx_http_phases,4,ngx_http_phases,,http\ngx_http_core_module.h,"typedef enum {
    NGX_HTTP_POST_READ_PHASE = 0,

    NGX_HTTP_SERVER_REWRITE_PHASE,

    NGX_HTTP_FIND_CONFIG_PHASE,
    NGX_HTTP_REWRITE_PHASE,
    NGX_HTTP_POST_REWRITE_PHASE,

    NGX_HTTP_PREACCESS_PHASE,

    NGX_HTTP_ACCESS_PHASE,
    NGX_HTTP_POST_ACCESS_PHASE,

    NGX_HTTP_PRECONTENT_PHASE,

    NGX_HTTP_CONTENT_PHASE,

    NGX_HTTP_LOG_PHASE
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7113,274475,ngx_http_phase_handler_s,4,ngx_http_phase_handler_s,,http\ngx_http_core_module.h,typedef struct ngx_http_phase_handler_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7114,274476,ngx_http_phase_handler_t,4,ngx_http_phase_handler_t,,http\ngx_http_core_module.h,typedef struct ngx_http_phase_handler_s  ngx_http_phase_handler_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7115,274483,ngx_http_phase_handler_s,4,ngx_http_phase_handler_s,,http\ngx_http_core_module.h,"struct ngx_http_phase_handler_s {
    ngx_http_phase_handler_pt  checker;
    ngx_http_handler_pt        handler;
    ngx_uint_t                 next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7116,274487,ngx_http_phase_engine_t,4,ngx_http_phase_engine_t,,http\ngx_http_core_module.h,"typedef struct {
    ngx_http_phase_handler_t  *handlers;
    ngx_uint_t                 server_rewrite_index;
    ngx_uint_t                 location_rewrite_index;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7117,274492,ngx_http_phase_t,4,ngx_http_phase_t,,http\ngx_http_core_module.h,"typedef struct {
    ngx_array_t                handlers;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7118,274495,ngx_http_core_main_conf_t,4,ngx_http_core_main_conf_t,,http\ngx_http_core_module.h,"typedef struct {
    ngx_array_t                servers;         /* ngx_http_core_srv_conf_t */

    ngx_http_phase_engine_t    phase_engine;

    ngx_hash_t                 headers_in_hash;

    ngx_hash_t                 variables_hash;

    ngx_array_t                variables;         /* ngx_http_variable_t */
    ngx_array_t                prefix_variables;  /* ngx_http_variable_t */
    ngx_uint_t                 ncaptures;

    ngx_uint_t                 server_names_hash_max_size;
    ngx_uint_t                 server_names_hash_bucket_size;

    ngx_uint_t                 variables_hash_max_size;
    ngx_uint_t                 variables_hash_bucket_size;

    ngx_hash_keys_arrays_t    *variables_keys;

    ngx_array_t               *ports;

    ngx_http_phase_t           phases[NGX_HTTP_LOG_PHASE + 1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7119,274519,ngx_http_core_srv_conf_t,4,ngx_http_core_srv_conf_t,,http\ngx_http_core_module.h,"typedef struct {
    /* array of the ngx_http_server_name_t, ""server_name"" directive */
    ngx_array_t                 server_names;

    /* server ctx */
    ngx_http_conf_ctx_t        *ctx;

    u_char                     *file_name;
    ngx_uint_t                  line;

    ngx_str_t                   server_name;

    size_t                      connection_pool_size;
    size_t                      request_pool_size;
    size_t                      client_header_buffer_size;

    ngx_bufs_t                  large_client_header_buffers;

    ngx_msec_t                  client_header_timeout;

    ngx_flag_t                  ignore_invalid_headers;
    ngx_flag_t                  merge_slashes;
    ngx_flag_t                  underscores_in_headers;

    unsigned                    listen:1;
#if (NGX_PCRE)
    unsigned                    captures:1;
#endif

    ngx_http_core_loc_conf_t  **named_locations;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7120,274537,ngx_http_server_name_t,4,ngx_http_server_name_t,,http\ngx_http_core_module.h,"typedef struct {
#if (NGX_PCRE)
    ngx_http_regex_t          *regex;
#endif
    ngx_http_core_srv_conf_t  *server;   /* virtual name server conf */
    ngx_str_t                  name;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7121,274542,ngx_http_virtual_names_t,4,ngx_http_virtual_names_t,,http\ngx_http_core_module.h,"typedef struct {
    ngx_hash_combined_t        names;

    ngx_uint_t                 nregex;
    ngx_http_server_name_t    *regex;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7122,274547,ngx_http_addr_conf_s,4,ngx_http_addr_conf_s,,http\ngx_http_core_module.h,"struct ngx_http_addr_conf_s {
    /* the default server configuration for this address:port */
    ngx_http_core_srv_conf_t  *default_server;

    ngx_http_virtual_names_t  *virtual_names;

    unsigned                   ssl:1;
    unsigned                   http2:1;
    unsigned                   proxy_protocol:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7123,274553,ngx_http_in_addr_t,4,ngx_http_in_addr_t,,http\ngx_http_core_module.h,"typedef struct {
    in_addr_t                  addr;
    ngx_http_addr_conf_t       conf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7124,274557,ngx_http_port_t,4,ngx_http_port_t,,http\ngx_http_core_module.h,"typedef struct {
    /* ngx_http_in_addr_t or ngx_http_in6_addr_t */
    void                      *addrs;
    ngx_uint_t                 naddrs;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7125,274561,ngx_http_conf_port_t,4,ngx_http_conf_port_t,,http\ngx_http_core_module.h,"typedef struct {
    ngx_int_t                  family;
    in_port_t                  port;
    ngx_array_t                addrs;     /* array of ngx_http_conf_addr_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7126,274566,ngx_http_conf_addr_t,4,ngx_http_conf_addr_t,,http\ngx_http_core_module.h,"typedef struct {
    ngx_http_listen_opt_t      opt;

    ngx_hash_t                 hash;
    ngx_hash_wildcard_t       *wc_head;
    ngx_hash_wildcard_t       *wc_tail;

#if (NGX_PCRE)
    ngx_uint_t                 nregex;
    ngx_http_server_name_t    *regex;
#endif

    /* the default server configuration for this address:port */
    ngx_http_core_srv_conf_t  *default_server;
    ngx_array_t                servers;  /* array of ngx_http_core_srv_conf_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7127,274576,ngx_http_err_page_t,4,ngx_http_err_page_t,,http\ngx_http_core_module.h,"typedef struct {
    ngx_int_t                  status;
    ngx_int_t                  overwrite;
    ngx_http_complex_value_t   value;
    ngx_str_t                  args;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7128,274582,ngx_http_core_loc_conf_s,4,ngx_http_core_loc_conf_s,,http\ngx_http_core_module.h,"struct ngx_http_core_loc_conf_s {
    ngx_str_t     name;          /* location name */
    ngx_str_t     escaped_name;

#if (NGX_PCRE)
    ngx_http_regex_t  *regex;
#endif

    unsigned      noname:1;   /* ""if () {}"" block or limit_except */
    unsigned      lmt_excpt:1;
    unsigned      named:1;

    unsigned      exact_match:1;
    unsigned      noregex:1;

    unsigned      auto_redirect:1;
#if (NGX_HTTP_GZIP)
    unsigned      gzip_disable_msie6:2;
    unsigned      gzip_disable_degradation:2;
#endif

    ngx_http_location_tree_node_t   *static_locations;
#if (NGX_PCRE)
    ngx_http_core_loc_conf_t       **regex_locations;
#endif

    /* pointer to the modules' loc_conf */
    void        **loc_conf;

    uint32_t      limit_except;
    void        **limit_except_loc_conf;

    ngx_http_handler_pt  handler;

    /* location name length for inclusive location with inherited alias */
    size_t        alias;
    ngx_str_t     root;                    /* root, alias */
    ngx_st...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7129,274675,ngx_http_location_queue_t,4,ngx_http_location_queue_t,,http\ngx_http_core_module.h,"typedef struct {
    ngx_queue_t                      queue;
    ngx_http_core_loc_conf_t        *exact;
    ngx_http_core_loc_conf_t        *inclusive;
    ngx_str_t                       *name;
    u_char                          *file_name;
    ngx_uint_t                       line;
    ngx_queue_t                      list;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7130,274684,ngx_http_location_tree_node_s,4,ngx_http_location_tree_node_s,,http\ngx_http_core_module.h,"struct ngx_http_location_tree_node_s {
    ngx_http_location_tree_node_t   *left;
    ngx_http_location_tree_node_t   *right;
    ngx_http_location_tree_node_t   *tree;

    ngx_http_core_loc_conf_t        *exact;
    ngx_http_core_loc_conf_t        *inclusive;

    u_char                           auto_redirect;
    u_char                           len;
    u_char                           name[1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7131,299268,ngx_http_state_e,4,ngx_http_state_e,,http\ngx_http_request.h,"typedef enum {
    NGX_HTTP_INITING_REQUEST_STATE = 0,
    NGX_HTTP_READING_REQUEST_STATE,
    NGX_HTTP_PROCESS_REQUEST_STATE,

    NGX_HTTP_CONNECT_UPSTREAM_STATE,
    NGX_HTTP_WRITING_UPSTREAM_STATE,
    NGX_HTTP_READING_UPSTREAM_STATE,

    NGX_HTTP_WRITING_REQUEST_STATE,
    NGX_HTTP_LINGERING_CLOSE_STATE,
    NGX_HTTP_KEEPALIVE_STATE
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7132,299286,ngx_http_header_t,4,ngx_http_header_t,,http\ngx_http_request.h,"typedef struct {
    ngx_str_t                         name;
    ngx_uint_t                        offset;
    ngx_http_header_handler_pt        handler;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7133,299291,ngx_http_header_out_t,4,ngx_http_header_out_t,,http\ngx_http_request.h,"typedef struct {
    ngx_str_t                         name;
    ngx_uint_t                        offset;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7134,299295,ngx_http_headers_in_t,4,ngx_http_headers_in_t,,http\ngx_http_request.h,"typedef struct {
    ngx_list_t                        headers;

    ngx_table_elt_t                  *host;
    ngx_table_elt_t                  *connection;
    ngx_table_elt_t                  *if_modified_since;
    ngx_table_elt_t                  *if_unmodified_since;
    ngx_table_elt_t                  *if_match;
    ngx_table_elt_t                  *if_none_match;
    ngx_table_elt_t                  *user_agent;
    ngx_table_elt_t                  *referer;
    ngx_table_elt_t                  *content_length;
    ngx_table_elt_t                  *content_range;
    ngx_table_elt_t                  *content_type;

    ngx_table_elt_t                  *range;
    ngx_table_elt_t                  *if_range;

    ngx_table_elt_t                  *transfer_encoding;
    ngx_table_elt_t                  *te;
    ngx_table_elt_t                  *expect;
    ngx_table_elt_t                  *upgrade;

#if (NGX_HTTP_GZIP || NGX_HTTP_HEADERS)
    ngx_table_elt_t                  ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7135,299342,ngx_http_headers_out_t,4,ngx_http_headers_out_t,,http\ngx_http_request.h,"typedef struct {
    ngx_list_t                        headers;
    ngx_list_t                        trailers;

    ngx_uint_t                        status;
    ngx_str_t                         status_line;

    ngx_table_elt_t                  *server;
    ngx_table_elt_t                  *date;
    ngx_table_elt_t                  *content_length;
    ngx_table_elt_t                  *content_encoding;
    ngx_table_elt_t                  *location;
    ngx_table_elt_t                  *refresh;
    ngx_table_elt_t                  *last_modified;
    ngx_table_elt_t                  *content_range;
    ngx_table_elt_t                  *accept_ranges;
    ngx_table_elt_t                  *www_authenticate;
    ngx_table_elt_t                  *expires;
    ngx_table_elt_t                  *etag;

    ngx_str_t                        *override_charset;

    size_t                            content_type_len;
    ngx_str_t                         content_type;
    ngx_str_t      ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7136,299377,ngx_http_request_body_t,4,ngx_http_request_body_t,,http\ngx_http_request.h,"typedef struct {
    ngx_temp_file_t                  *temp_file;
    ngx_chain_t                      *bufs;
    ngx_buf_t                        *buf;
    off_t                             rest;
    off_t                             received;
    ngx_chain_t                      *free;
    ngx_chain_t                      *busy;
    ngx_http_chunked_t               *chunked;
    ngx_http_client_body_handler_pt   post_handler;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7137,299388,ngx_http_addr_conf_s,4,ngx_http_addr_conf_s,,http\ngx_http_request.h,typedef struct ngx_http_addr_conf_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7138,299389,ngx_http_addr_conf_t,4,ngx_http_addr_conf_t,,http\ngx_http_request.h,typedef struct ngx_http_addr_conf_s  ngx_http_addr_conf_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7139,299390,ngx_http_connection_t,4,ngx_http_connection_t,,http\ngx_http_request.h,"typedef struct {
    ngx_http_addr_conf_t             *addr_conf;
    ngx_http_conf_ctx_t              *conf_ctx;

#if (NGX_HTTP_SSL || NGX_COMPAT)
    ngx_str_t                        *ssl_servername;
#if (NGX_PCRE)
    ngx_http_regex_t                 *ssl_servername_regex;
#endif
#endif

    ngx_chain_t                      *busy;
    ngx_int_t                         nbusy;

    ngx_chain_t                      *free;

    unsigned                          ssl:1;
    unsigned                          proxy_protocol:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7140,299406,ngx_http_cleanup_s,4,ngx_http_cleanup_s,,http\ngx_http_request.h,typedef struct ngx_http_cleanup_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7141,299407,ngx_http_cleanup_t,4,ngx_http_cleanup_t,,http\ngx_http_request.h,typedef struct ngx_http_cleanup_s  ngx_http_cleanup_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7142,299408,ngx_http_cleanup_s,4,ngx_http_cleanup_s,,http\ngx_http_request.h,"struct ngx_http_cleanup_s {
    ngx_http_cleanup_pt               handler;
    void                             *data;
    ngx_http_cleanup_t               *next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7143,299419,ngx_http_post_subrequest_t,4,ngx_http_post_subrequest_t,,http\ngx_http_request.h,"typedef struct {
    ngx_http_post_subrequest_pt       handler;
    void                             *data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7144,299423,ngx_http_postponed_request_s,4,ngx_http_postponed_request_s,,http\ngx_http_request.h,typedef struct ngx_http_postponed_request_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7145,299424,ngx_http_postponed_request_t,4,ngx_http_postponed_request_t,,http\ngx_http_request.h,typedef struct ngx_http_postponed_request_s  ngx_http_postponed_request_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7146,299425,ngx_http_postponed_request_s,4,ngx_http_postponed_request_s,,http\ngx_http_request.h,"struct ngx_http_postponed_request_s {
    ngx_http_request_t               *request;
    ngx_chain_t                      *out;
    ngx_http_postponed_request_t     *next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7147,299429,ngx_http_posted_request_s,4,ngx_http_posted_request_s,,http\ngx_http_request.h,typedef struct ngx_http_posted_request_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7148,299430,ngx_http_posted_request_t,4,ngx_http_posted_request_t,,http\ngx_http_request.h,typedef struct ngx_http_posted_request_s  ngx_http_posted_request_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7149,299431,ngx_http_posted_request_s,4,ngx_http_posted_request_s,,http\ngx_http_request.h,"struct ngx_http_posted_request_s {
    ngx_http_request_t               *request;
    ngx_http_posted_request_t        *next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7150,299444,ngx_http_request_s,4,ngx_http_request_s,,http\ngx_http_request.h,"struct ngx_http_request_s {
    uint32_t                          signature;         /* ""HTTP"" */

    ngx_connection_t                 *connection;

    void                            **ctx;
    void                            **main_conf;
    void                            **srv_conf;
    void                            **loc_conf;

    ngx_http_event_handler_pt         read_event_handler;
    ngx_http_event_handler_pt         write_event_handler;

#if (NGX_HTTP_CACHE)
    ngx_http_cache_t                 *cache;
#endif

    ngx_http_upstream_t              *upstream;
    ngx_array_t                      *upstream_states;
                                         /* of ngx_http_upstream_state_t */

    ngx_pool_t                       *pool;
    ngx_buf_t                        *header_in;

    ngx_http_headers_in_t             headers_in;
    ngx_http_headers_out_t            headers_out;

    ngx_http_request_body_t          *request_body;

    time_t                           ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7151,299597,ngx_http_ephemeral_t,4,ngx_http_ephemeral_t,,http\ngx_http_request.h,"typedef struct {
    ngx_http_posted_request_t         terminal_posted_request;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7152,307252,ngx_http_script_engine_t,4,ngx_http_script_engine_t,,http\ngx_http_script.h,"typedef struct {
    u_char                     *ip;
    u_char                     *pos;
    ngx_http_variable_value_t  *sp;

    ngx_str_t                   buf;
    ngx_str_t                   line;

    /* the start of the rewritten arguments */
    u_char                     *args;

    unsigned                    flushed:1;
    unsigned                    skip:1;
    unsigned                    quote:1;
    unsigned                    is_args:1;
    unsigned                    log:1;

    ngx_int_t                   status;
    ngx_http_request_t         *request;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7153,307267,ngx_http_script_compile_t,4,ngx_http_script_compile_t,,http\ngx_http_script.h,"typedef struct {
    ngx_conf_t                 *cf;
    ngx_str_t                  *source;

    ngx_array_t               **flushes;
    ngx_array_t               **lengths;
    ngx_array_t               **values;

    ngx_uint_t                  variables;
    ngx_uint_t                  ncaptures;
    ngx_uint_t                  captures_mask;
    ngx_uint_t                  size;

    void                       *main;

    unsigned                    compile_args:1;
    unsigned                    complete_lengths:1;
    unsigned                    complete_values:1;
    unsigned                    zero:1;
    unsigned                    conf_prefix:1;
    unsigned                    root_prefix:1;

    unsigned                    dup_capture:1;
    unsigned                    args:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7154,307287,ngx_http_complex_value_t,4,ngx_http_complex_value_t,,http\ngx_http_script.h,"typedef struct {
    ngx_str_t                   value;
    ngx_uint_t                 *flushes;
    void                       *lengths;
    void                       *values;

    union {
        size_t                  size;
    } u;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7155,307292,ngx_http_complex_value_t.u,4,ngx_http_complex_value_t.u,,http\ngx_http_script.h,"union {
        size_t                  size;
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7156,307296,ngx_http_compile_complex_value_t,4,ngx_http_compile_complex_value_t,,http\ngx_http_script.h,"typedef struct {
    ngx_conf_t                 *cf;
    ngx_str_t                  *value;
    ngx_http_complex_value_t   *complex_value;

    unsigned                    zero:1;
    unsigned                    conf_prefix:1;
    unsigned                    root_prefix:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7157,307314,ngx_http_script_copy_code_t,4,ngx_http_script_copy_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    uintptr_t                   len;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7158,307318,ngx_http_script_var_code_t,4,ngx_http_script_var_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    uintptr_t                   index;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7159,307322,ngx_http_script_var_handler_code_t,4,ngx_http_script_var_handler_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    ngx_http_set_variable_pt    handler;
    uintptr_t                   data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7160,307327,ngx_http_script_copy_capture_code_t,4,ngx_http_script_copy_capture_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    uintptr_t                   n;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7161,307331,ngx_http_script_full_name_code_t,4,ngx_http_script_full_name_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    uintptr_t                   conf_prefix;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7162,307335,ngx_http_script_return_code_t,4,ngx_http_script_return_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    uintptr_t                   status;
    ngx_http_complex_value_t    text;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7163,307340,ngx_http_script_file_op_e,4,ngx_http_script_file_op_e,,http\ngx_http_script.h,"typedef enum {
    ngx_http_script_file_plain = 0,
    ngx_http_script_file_not_plain,
    ngx_http_script_file_dir,
    ngx_http_script_file_not_dir,
    ngx_http_script_file_exists,
    ngx_http_script_file_not_exists,
    ngx_http_script_file_exec,
    ngx_http_script_file_not_exec
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7164,307357,ngx_http_script_file_code_t,4,ngx_http_script_file_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    uintptr_t                   op;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7165,307361,ngx_http_script_if_code_t,4,ngx_http_script_if_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    uintptr_t                   next;
    void                      **loc_conf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7166,307366,ngx_http_script_complex_value_code_t,4,ngx_http_script_complex_value_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    ngx_array_t                *lengths;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7167,307370,ngx_http_script_value_code_t,4,ngx_http_script_value_code_t,,http\ngx_http_script.h,"typedef struct {
    ngx_http_script_code_pt     code;
    uintptr_t                   value;
    uintptr_t                   text_len;
    uintptr_t                   text_data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7168,322771,ngx_http_upstream_state_t,4,ngx_http_upstream_state_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_uint_t                       status;
    ngx_msec_t                       response_time;
    ngx_msec_t                       connect_time;
    ngx_msec_t                       header_time;
    ngx_msec_t                       queue_time;
    off_t                            response_length;
    off_t                            bytes_received;
    off_t                            bytes_sent;

    ngx_str_t                       *peer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7169,322782,ngx_http_upstream_main_conf_t,4,ngx_http_upstream_main_conf_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_hash_t                       headers_in_hash;
    ngx_array_t                      upstreams;
                                             /* ngx_http_upstream_srv_conf_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7170,322786,ngx_http_upstream_srv_conf_s,4,ngx_http_upstream_srv_conf_s,,http\ngx_http_upstream.h,typedef struct ngx_http_upstream_srv_conf_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7171,322787,ngx_http_upstream_srv_conf_t,4,ngx_http_upstream_srv_conf_t,,http\ngx_http_upstream.h,typedef struct ngx_http_upstream_srv_conf_s  ngx_http_upstream_srv_conf_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7172,322800,ngx_http_upstream_peer_t,4,ngx_http_upstream_peer_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_http_upstream_init_pt        init_upstream;
    ngx_http_upstream_init_peer_pt   init;
    void                            *data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7173,322805,ngx_http_upstream_server_t,4,ngx_http_upstream_server_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_str_t                        name;
    ngx_addr_t                      *addrs;
    ngx_uint_t                       naddrs;
    ngx_uint_t                       weight;
    ngx_uint_t                       max_conns;
    ngx_uint_t                       max_fails;
    time_t                           fail_timeout;
    ngx_msec_t                       slow_start;
    ngx_uint_t                       down;

    unsigned                         backup:1;

    NGX_COMPAT_BEGIN(6)
    NGX_COMPAT_END
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7174,322818,ngx_http_upstream_srv_conf_s,4,ngx_http_upstream_srv_conf_s,,http\ngx_http_upstream.h,"struct ngx_http_upstream_srv_conf_s {
    ngx_http_upstream_peer_t         peer;
    void                           **srv_conf;

    ngx_array_t                     *servers;  /* ngx_http_upstream_server_t */

    ngx_uint_t                       flags;
    ngx_str_t                        host;
    u_char                          *file_name;
    ngx_uint_t                       line;
    in_port_t                        port;
    ngx_uint_t                       no_port;  /* unsigned no_port:1 */

#if (NGX_HTTP_UPSTREAM_ZONE)
    ngx_shm_zone_t                  *shm_zone;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7175,322829,ngx_http_upstream_local_t,4,ngx_http_upstream_local_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_addr_t                      *addr;
    ngx_http_complex_value_t        *value;
#if (NGX_HAVE_TRANSPARENT_PROXY)
    ngx_uint_t                       transparent; /* unsigned  transparent:1; */
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7176,322834,ngx_http_upstream_conf_t,4,ngx_http_upstream_conf_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_http_upstream_srv_conf_t    *upstream;

    ngx_msec_t                       connect_timeout;
    ngx_msec_t                       send_timeout;
    ngx_msec_t                       read_timeout;
    ngx_msec_t                       next_upstream_timeout;

    size_t                           send_lowat;
    size_t                           buffer_size;
    size_t                           limit_rate;

    size_t                           busy_buffers_size;
    size_t                           max_temp_file_size;
    size_t                           temp_file_write_size;

    size_t                           busy_buffers_size_conf;
    size_t                           max_temp_file_size_conf;
    size_t                           temp_file_write_size_conf;

    ngx_bufs_t                       bufs;

    ngx_uint_t                       ignore_headers;
    ngx_uint_t                       next_upstream;
    ngx_uint_t                       store_access;
    n...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7177,322903,ngx_http_upstream_header_t,4,ngx_http_upstream_header_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_str_t                        name;
    ngx_http_header_handler_pt       handler;
    ngx_uint_t                       offset;
    ngx_http_header_handler_pt       copy_handler;
    ngx_uint_t                       conf;
    ngx_uint_t                       redirect;  /* unsigned   redirect:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7178,322911,ngx_http_upstream_headers_in_t,4,ngx_http_upstream_headers_in_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_list_t                       headers;
    ngx_list_t                       trailers;

    ngx_uint_t                       status_n;
    ngx_str_t                        status_line;

    ngx_table_elt_t                 *status;
    ngx_table_elt_t                 *date;
    ngx_table_elt_t                 *server;
    ngx_table_elt_t                 *connection;

    ngx_table_elt_t                 *expires;
    ngx_table_elt_t                 *etag;
    ngx_table_elt_t                 *x_accel_expires;
    ngx_table_elt_t                 *x_accel_redirect;
    ngx_table_elt_t                 *x_accel_limit_rate;

    ngx_table_elt_t                 *content_type;
    ngx_table_elt_t                 *content_length;

    ngx_table_elt_t                 *last_modified;
    ngx_table_elt_t                 *location;
    ngx_table_elt_t                 *accept_ranges;
    ngx_table_elt_t                 *www_authenticate;
    ngx_table_elt_t                 *t...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7179,322941,ngx_http_upstream_resolved_t,4,ngx_http_upstream_resolved_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_str_t                        host;
    in_port_t                        port;
    ngx_uint_t                       no_port; /* unsigned no_port:1 */

    ngx_uint_t                       naddrs;
    ngx_resolver_addr_t             *addrs;

    struct sockaddr                 *sockaddr;
    socklen_t                        socklen;
    ngx_str_t                        name;

    ngx_resolver_ctx_t              *ctx;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7180,322947,sockaddr,4,ngx_http_upstream_resolved_t.sockaddr,,http\ngx_http_upstream.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7181,322959,ngx_http_upstream_s,4,ngx_http_upstream_s,,http\ngx_http_upstream.h,"struct ngx_http_upstream_s {
    ngx_http_upstream_handler_pt     read_event_handler;
    ngx_http_upstream_handler_pt     write_event_handler;

    ngx_peer_connection_t            peer;

    ngx_event_pipe_t                *pipe;

    ngx_chain_t                     *request_bufs;

    ngx_output_chain_ctx_t           output;
    ngx_chain_writer_ctx_t           writer;

    ngx_http_upstream_conf_t        *conf;
    ngx_http_upstream_srv_conf_t    *upstream;
#if (NGX_HTTP_CACHE)
    ngx_array_t                     *caches;
#endif

    ngx_http_upstream_headers_in_t   headers_in;

    ngx_http_upstream_resolved_t    *resolved;

    ngx_buf_t                        from_client;

    ngx_buf_t                        buffer;
    off_t                            length;

    ngx_chain_t                     *out_bufs;
    ngx_chain_t                     *busy_bufs;
    ngx_chain_t                     *free_bufs;

    ngx_int_t                      (*input_filter_init)(void *data);
    ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7182,323054,ngx_http_upstream_next_t,4,ngx_http_upstream_next_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_uint_t                      status;
    ngx_uint_t                      mask;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7183,323058,ngx_http_upstream_param_t,4,ngx_http_upstream_param_t,,http\ngx_http_upstream.h,"typedef struct {
    ngx_str_t   key;
    ngx_str_t   value;
    ngx_uint_t  skip_empty;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7184,325508,ngx_http_upstream_rr_peer_s,4,ngx_http_upstream_rr_peer_s,,http\ngx_http_upstream_round_robin.h,typedef struct ngx_http_upstream_rr_peer_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7185,325509,ngx_http_upstream_rr_peer_t,4,ngx_http_upstream_rr_peer_t,,http\ngx_http_upstream_round_robin.h,typedef struct ngx_http_upstream_rr_peer_s   ngx_http_upstream_rr_peer_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7186,325510,ngx_http_upstream_rr_peer_s,4,ngx_http_upstream_rr_peer_s,,http\ngx_http_upstream_round_robin.h,"struct ngx_http_upstream_rr_peer_s {
    struct sockaddr                *sockaddr;
    socklen_t                       socklen;
    ngx_str_t                       name;
    ngx_str_t                       server;

    ngx_int_t                       current_weight;
    ngx_int_t                       effective_weight;
    ngx_int_t                       weight;

    ngx_uint_t                      conns;
    ngx_uint_t                      max_conns;

    ngx_uint_t                      fails;
    time_t                          accessed;
    time_t                          checked;

    ngx_uint_t                      max_fails;
    time_t                          fail_timeout;
    ngx_msec_t                      slow_start;
    ngx_msec_t                      start_time;

    ngx_uint_t                      down;

#if (NGX_HTTP_SSL || NGX_COMPAT)
    void                           *ssl_session;
    int                             ssl_session_len;
#endif

#if (NGX_HTTP_UPSTREAM_ZO...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7187,325511,sockaddr,4,ngx_http_upstream_rr_peer_s.sockaddr,,http\ngx_http_upstream_round_robin.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7188,325534,ngx_http_upstream_rr_peers_s,4,ngx_http_upstream_rr_peers_s,,http\ngx_http_upstream_round_robin.h,typedef struct ngx_http_upstream_rr_peers_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7189,325535,ngx_http_upstream_rr_peers_t,4,ngx_http_upstream_rr_peers_t,,http\ngx_http_upstream_round_robin.h,typedef struct ngx_http_upstream_rr_peers_s  ngx_http_upstream_rr_peers_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7190,325536,ngx_http_upstream_rr_peers_s,4,ngx_http_upstream_rr_peers_s,,http\ngx_http_upstream_round_robin.h,"struct ngx_http_upstream_rr_peers_s {
    ngx_uint_t                      number;

#if (NGX_HTTP_UPSTREAM_ZONE)
    ngx_slab_pool_t                *shpool;
    ngx_atomic_t                    rwlock;
    ngx_http_upstream_rr_peers_t   *zone_next;
#endif

    ngx_uint_t                      total_weight;
    ngx_uint_t                      tries;

    unsigned                        single:1;
    unsigned                        weighted:1;

    ngx_str_t                      *name;

    ngx_http_upstream_rr_peers_t   *next;

    ngx_http_upstream_rr_peer_t    *peer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7191,325548,ngx_http_upstream_rr_peer_data_t,4,ngx_http_upstream_rr_peer_data_t,,http\ngx_http_upstream_round_robin.h,"typedef struct {
    ngx_uint_t                      config;
    ngx_http_upstream_rr_peers_t   *peers;
    ngx_http_upstream_rr_peer_t    *current;
    uintptr_t                      *tried;
    uintptr_t                       data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7192,332726,ngx_http_variable_value_t,4,ngx_http_variable_value_t,,http\ngx_http_variables.h,typedef ngx_variable_value_t  ngx_http_variable_value_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7193,332727,ngx_http_variable_s,4,ngx_http_variable_s,,http\ngx_http_variables.h,typedef struct ngx_http_variable_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7194,332728,ngx_http_variable_t,4,ngx_http_variable_t,,http\ngx_http_variables.h,typedef struct ngx_http_variable_s  ngx_http_variable_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7195,332743,ngx_http_variable_s,4,ngx_http_variable_s,,http\ngx_http_variables.h,"struct ngx_http_variable_s {
    ngx_str_t                     name;   /* must be first to build the hash */
    ngx_http_set_variable_pt      set_handler;
    ngx_http_get_variable_pt      get_handler;
    uintptr_t                     data;
    ngx_uint_t                    flags;
    ngx_uint_t                    index;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7196,332790,ngx_http_map_t,4,ngx_http_map_t,,http\ngx_http_variables.h,"typedef struct {
    ngx_hash_combined_t           hash;
#if (NGX_PCRE)
    ngx_http_map_regex_t         *regex;
    ngx_uint_t                    nregex;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7197,333920,ngx_http_v2_parse_header_t,4,ngx_http_v2_parse_header_t,,http\v2\ngx_http_v2.c,"typedef struct {
    ngx_str_t           name;
    ngx_uint_t          offset;
    ngx_uint_t          hash;
    ngx_http_header_t  *hh;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7198,347676,ngx_http_v2_connection_s,4,ngx_http_v2_connection_s,,http\v2\ngx_http_v2.h,typedef struct ngx_http_v2_connection_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7199,347677,ngx_http_v2_connection_t,4,ngx_http_v2_connection_t,,http\v2\ngx_http_v2.h,typedef struct ngx_http_v2_connection_s   ngx_http_v2_connection_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7200,347678,ngx_http_v2_node_s,4,ngx_http_v2_node_s,,http\v2\ngx_http_v2.h,typedef struct ngx_http_v2_node_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7201,347679,ngx_http_v2_node_t,4,ngx_http_v2_node_t,,http\v2\ngx_http_v2.h,typedef struct ngx_http_v2_node_s         ngx_http_v2_node_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7202,347680,ngx_http_v2_out_frame_s,4,ngx_http_v2_out_frame_s,,http\v2\ngx_http_v2.h,typedef struct ngx_http_v2_out_frame_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7203,347681,ngx_http_v2_out_frame_t,4,ngx_http_v2_out_frame_t,,http\v2\ngx_http_v2.h,typedef struct ngx_http_v2_out_frame_s    ngx_http_v2_out_frame_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7204,347689,ngx_http_v2_header_t,4,ngx_http_v2_header_t,,http\v2\ngx_http_v2.h,"typedef struct {
    ngx_str_t                        name;
    ngx_str_t                        value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7205,347693,ngx_http_v2_state_t,4,ngx_http_v2_state_t,,http\v2\ngx_http_v2.h,"typedef struct {
    ngx_uint_t                       sid;
    size_t                           length;
    size_t                           padding;
    unsigned                         flags:8;

    unsigned                         incomplete:1;
    unsigned                         keep_pool:1;

    /* HPACK */
    unsigned                         parse_name:1;
    unsigned                         parse_value:1;
    unsigned                         index:1;
    ngx_http_v2_header_t             header;
    size_t                           header_limit;
    u_char                           field_state;
    u_char                          *field_start;
    u_char                          *field_end;
    size_t                           field_rest;
    ngx_pool_t                      *pool;

    ngx_http_v2_stream_t            *stream;

    u_char                           buffer[NGX_HTTP_V2_STATE_BUFFER_SIZE];
    size_t                           buffer_used;
    ngx_http_v2_handler_...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7206,347723,ngx_http_v2_hpack_t,4,ngx_http_v2_hpack_t,,http\v2\ngx_http_v2.h,"typedef struct {
    ngx_http_v2_header_t           **entries;

    ngx_uint_t                       added;
    ngx_uint_t                       deleted;
    ngx_uint_t                       reused;
    ngx_uint_t                       allocated;

    size_t                           size;
    size_t                           free;
    u_char                          *storage;
    u_char                          *pos;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7207,347734,ngx_http_v2_connection_s,4,ngx_http_v2_connection_s,,http\v2\ngx_http_v2.h,"struct ngx_http_v2_connection_s {
    ngx_connection_t                *connection;
    ngx_http_connection_t           *http_connection;

    off_t                            total_bytes;
    off_t                            payload_bytes;

    ngx_uint_t                       processing;
    ngx_uint_t                       frames;
    ngx_uint_t                       idle;
    ngx_uint_t                       priority_limit;

    ngx_uint_t                       pushing;
    ngx_uint_t                       concurrent_pushes;

    size_t                           send_window;
    size_t                           recv_window;
    size_t                           init_window;

    size_t                           frame_size;

    ngx_queue_t                      waiting;

    ngx_http_v2_state_t              state;

    ngx_http_v2_hpack_t              hpack;

    ngx_pool_t                      *pool;

    ngx_http_v2_out_frame_t         *free_frames;
    ngx_connection_t          ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7208,347768,ngx_http_v2_node_s,4,ngx_http_v2_node_s,,http\v2\ngx_http_v2.h,"struct ngx_http_v2_node_s {
    ngx_uint_t                       id;
    ngx_http_v2_node_t              *index;
    ngx_http_v2_node_t              *parent;
    ngx_queue_t                      queue;
    ngx_queue_t                      children;
    ngx_queue_t                      reuse;
    ngx_uint_t                       rank;
    ngx_uint_t                       weight;
    double                           rel_weight;
    ngx_http_v2_stream_t            *stream;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7209,347779,ngx_http_v2_stream_s,4,ngx_http_v2_stream_s,,http\v2\ngx_http_v2.h,"struct ngx_http_v2_stream_s {
    ngx_http_request_t              *request;
    ngx_http_v2_connection_t        *connection;
    ngx_http_v2_node_t              *node;

    ngx_uint_t                       queued;

    /*
     * A change to SETTINGS_INITIAL_WINDOW_SIZE could cause the
     * send_window to become negative, hence it's signed.
     */
    ssize_t                          send_window;
    size_t                           recv_window;

    ngx_buf_t                       *preread;

    ngx_uint_t                       frames;

    ngx_http_v2_out_frame_t         *free_frames;
    ngx_chain_t                     *free_frame_headers;
    ngx_chain_t                     *free_bufs;

    ngx_queue_t                      queue;

    ngx_array_t                     *cookies;

    ngx_pool_t                      *pool;

    unsigned                         waiting:1;
    unsigned                         blocked:1;
    unsigned                         exhausted:1;
    unsigned ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7210,347802,ngx_http_v2_out_frame_s,4,ngx_http_v2_out_frame_s,,http\v2\ngx_http_v2.h,"struct ngx_http_v2_out_frame_s {
    ngx_http_v2_out_frame_t         *next;
    ngx_chain_t                     *first;
    ngx_chain_t                     *last;
    ngx_int_t                      (*handler)(ngx_http_v2_connection_t *h2c,
                                        ngx_http_v2_out_frame_t *frame);

    ngx_http_v2_stream_t            *stream;
    size_t                           length;

    unsigned                         blocked:1;
    unsigned                         fin:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7211,348058,ngx_http_v2_push_header_t,4,ngx_http_v2_push_header_t,,http\v2\ngx_http_v2_filter_module.c,"typedef struct {
    ngx_str_t      name;
    u_char         index;
    ngx_uint_t     offset;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7212,354347,ngx_http_v2_huff_decode_code_t,4,ngx_http_v2_huff_decode_code_t,,http\v2\ngx_http_v2_huff_decode.c,"typedef struct {
    u_char  next;
    u_char  emit;
    u_char  sym;
    u_char  ending;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7213,375264,ngx_http_v2_huff_encode_code_t,4,ngx_http_v2_huff_encode_code_t,,http\v2\ngx_http_v2_huff_encode.c,"typedef struct {
    uint32_t  code;
    uint32_t  len;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7214,378126,ngx_http_v2_main_conf_t,4,ngx_http_v2_main_conf_t,,http\v2\ngx_http_v2_module.h,"typedef struct {
    size_t                          recv_buffer_size;
    u_char                         *recv_buffer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7215,378130,ngx_http_v2_srv_conf_t,4,ngx_http_v2_srv_conf_t,,http\v2\ngx_http_v2_module.h,"typedef struct {
    size_t                          pool_size;
    ngx_uint_t                      concurrent_streams;
    ngx_uint_t                      concurrent_pushes;
    size_t                          preread_size;
    ngx_uint_t                      streams_index_mask;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7216,378137,ngx_http_v2_loc_conf_t,4,ngx_http_v2_loc_conf_t,,http\v2\ngx_http_v2_module.h,"typedef struct {
    size_t                          chunk_size;

    ngx_flag_t                      push_preload;

    ngx_flag_t                      push;
    ngx_array_t                    *pushes;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7217,380888,ngx_mail_conf_ctx_t,4,ngx_mail_conf_ctx_t,,mail\ngx_mail.h,"typedef struct {
    void                  **main_conf;
    void                  **srv_conf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7218,380892,ngx_mail_listen_t,4,ngx_mail_listen_t,,mail\ngx_mail.h,"typedef struct {
    struct sockaddr        *sockaddr;
    socklen_t               socklen;
    ngx_str_t               addr_text;

    /* server ctx */
    ngx_mail_conf_ctx_t    *ctx;

    unsigned                bind:1;
    unsigned                wildcard:1;
    unsigned                ssl:1;
#if (NGX_HAVE_INET6)
    unsigned                ipv6only:1;
#endif
    unsigned                so_keepalive:2;
    unsigned                proxy_protocol:1;
#if (NGX_HAVE_KEEPALIVE_TUNABLE)
    int                     tcp_keepidle;
    int                     tcp_keepintvl;
    int                     tcp_keepcnt;
#endif
    int                     backlog;
    int                     rcvbuf;
    int                     sndbuf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7219,380893,sockaddr,4,ngx_mail_listen_t.sockaddr,,mail\ngx_mail.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7220,380911,ngx_mail_addr_conf_t,4,ngx_mail_addr_conf_t,,mail\ngx_mail.h,"typedef struct {
    ngx_mail_conf_ctx_t    *ctx;
    ngx_str_t               addr_text;
    unsigned                ssl:1;
    unsigned                proxy_protocol:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7221,380917,ngx_mail_in_addr_t,4,ngx_mail_in_addr_t,,mail\ngx_mail.h,"typedef struct {
    in_addr_t               addr;
    ngx_mail_addr_conf_t    conf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7222,380921,ngx_mail_port_t,4,ngx_mail_port_t,,mail\ngx_mail.h,"typedef struct {
    /* ngx_mail_in_addr_t or ngx_mail_in6_addr_t */
    void                   *addrs;
    ngx_uint_t              naddrs;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7223,380925,ngx_mail_conf_port_t,4,ngx_mail_conf_port_t,,mail\ngx_mail.h,"typedef struct {
    int                     family;
    in_port_t               port;
    ngx_array_t             addrs;       /* array of ngx_mail_conf_addr_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7224,380930,ngx_mail_conf_addr_t,4,ngx_mail_conf_addr_t,,mail\ngx_mail.h,"typedef struct {
    ngx_mail_listen_t       opt;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7225,380933,ngx_mail_core_main_conf_t,4,ngx_mail_core_main_conf_t,,mail\ngx_mail.h,"typedef struct {
    ngx_array_t             servers;     /* ngx_mail_core_srv_conf_t */
    ngx_array_t             listen;      /* ngx_mail_listen_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7226,380937,ngx_mail_protocol_s,4,ngx_mail_protocol_s,,mail\ngx_mail.h,typedef struct ngx_mail_protocol_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7227,380938,ngx_mail_protocol_t,4,ngx_mail_protocol_t,,mail\ngx_mail.h,typedef struct ngx_mail_protocol_s  ngx_mail_protocol_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7228,380939,ngx_mail_core_srv_conf_t,4,ngx_mail_core_srv_conf_t,,mail\ngx_mail.h,"typedef struct {
    ngx_mail_protocol_t    *protocol;

    ngx_msec_t              timeout;
    ngx_msec_t              resolver_timeout;

    ngx_uint_t              max_errors;

    ngx_str_t               server_name;

    u_char                 *file_name;
    ngx_uint_t              line;

    ngx_resolver_t         *resolver;
    ngx_log_t              *error_log;

    /* server ctx */
    ngx_mail_conf_ctx_t    *ctx;

    ngx_uint_t              listen;  /* unsigned  listen:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7229,380952,ngx_pop3_state_e,4,ngx_pop3_state_e,,mail\ngx_mail.h,"typedef enum {
    ngx_pop3_start = 0,
    ngx_pop3_user,
    ngx_pop3_passwd,
    ngx_pop3_auth_login_username,
    ngx_pop3_auth_login_password,
    ngx_pop3_auth_plain,
    ngx_pop3_auth_cram_md5,
    ngx_pop3_auth_external
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7230,380969,ngx_imap_state_e,4,ngx_imap_state_e,,mail\ngx_mail.h,"typedef enum {
    ngx_imap_start = 0,
    ngx_imap_auth_login_username,
    ngx_imap_auth_login_password,
    ngx_imap_auth_plain,
    ngx_imap_auth_cram_md5,
    ngx_imap_auth_external,
    ngx_imap_login,
    ngx_imap_user,
    ngx_imap_passwd
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7231,380987,ngx_smtp_state_e,4,ngx_smtp_state_e,,mail\ngx_mail.h,"typedef enum {
    ngx_smtp_start = 0,
    ngx_smtp_auth_login_username,
    ngx_smtp_auth_login_password,
    ngx_smtp_auth_plain,
    ngx_smtp_auth_cram_md5,
    ngx_smtp_auth_external,
    ngx_smtp_helo,
    ngx_smtp_helo_xclient,
    ngx_smtp_helo_auth,
    ngx_smtp_helo_from,
    ngx_smtp_xclient,
    ngx_smtp_xclient_from,
    ngx_smtp_xclient_helo,
    ngx_smtp_xclient_auth,
    ngx_smtp_from,
    ngx_smtp_to
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7232,381012,ngx_mail_proxy_ctx_t,4,ngx_mail_proxy_ctx_t,,mail\ngx_mail.h,"typedef struct {
    ngx_peer_connection_t   upstream;
    ngx_buf_t              *buffer;
    ngx_uint_t              proxy_protocol;  /* unsigned  proxy_protocol:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7233,381017,ngx_mail_session_t,4,ngx_mail_session_t,,mail\ngx_mail.h,"typedef struct {
    uint32_t                signature;         /* ""MAIL"" */

    ngx_connection_t       *connection;

    ngx_str_t               out;
    ngx_buf_t              *buffer;

    void                  **ctx;
    void                  **main_conf;
    void                  **srv_conf;

    ngx_resolver_ctx_t     *resolver_ctx;

    ngx_mail_proxy_ctx_t   *proxy;

    ngx_uint_t              mail_state;

    unsigned                ssl:1;
    unsigned                protocol:3;
    unsigned                blocked:1;
    unsigned                quit:1;
    unsigned                quoted:1;
    unsigned                backslash:1;
    unsigned                no_sync_literal:1;
    unsigned                starttls:1;
    unsigned                esmtp:1;
    unsigned                auth_method:3;
    unsigned                auth_wait:1;

    ngx_str_t               login;
    ngx_str_t               passwd;

    ngx_str_t               salt;
    ngx_str_t               tag;
...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7234,381061,ngx_mail_log_ctx_t,4,ngx_mail_log_ctx_t,,mail\ngx_mail.h,"typedef struct {
    ngx_str_t              *client;
    ngx_mail_session_t     *session;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7235,381086,ngx_mail_protocol_s,4,ngx_mail_protocol_s,,mail\ngx_mail.h,"struct ngx_mail_protocol_s {
    ngx_str_t                   name;
    in_port_t                   port[4];
    ngx_uint_t                  type;

    ngx_mail_init_session_pt    init_session;
    ngx_mail_init_protocol_pt   init_protocol;
    ngx_mail_parse_command_pt   parse_command;
    ngx_mail_auth_state_pt      auth_state;

    ngx_str_t                   internal_server_error;
    ngx_str_t                   cert_error;
    ngx_str_t                   no_cert;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7236,381103,ngx_mail_module_t,4,ngx_mail_module_t,,mail\ngx_mail.h,"typedef struct {
    ngx_mail_protocol_t        *protocol;

    void                       *(*create_main_conf)(ngx_conf_t *cf);
    char                       *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    void                       *(*create_srv_conf)(ngx_conf_t *cf);
    char                       *(*merge_srv_conf)(ngx_conf_t *cf, void *prev,
                                                  void *conf);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7237,381262,ngx_mail_auth_http_conf_t,4,ngx_mail_auth_http_conf_t,,mail\ngx_mail_auth_http_module.c,"typedef struct {
    ngx_addr_t                     *peer;

    ngx_msec_t                      timeout;
    ngx_flag_t                      pass_client_cert;

    ngx_str_t                       host_header;
    ngx_str_t                       uri;
    ngx_str_t                       header;

    ngx_array_t                    *headers;

    u_char                         *file;
    ngx_uint_t                      line;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7238,381273,ngx_mail_auth_http_ctx_s,4,ngx_mail_auth_http_ctx_s,,mail\ngx_mail_auth_http_module.c,typedef struct ngx_mail_auth_http_ctx_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7239,381274,ngx_mail_auth_http_ctx_t,4,ngx_mail_auth_http_ctx_t,,mail\ngx_mail_auth_http_module.c,typedef struct ngx_mail_auth_http_ctx_s  ngx_mail_auth_http_ctx_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7240,381281,ngx_mail_auth_http_ctx_s,4,ngx_mail_auth_http_ctx_s,,mail\ngx_mail_auth_http_module.c,"struct ngx_mail_auth_http_ctx_s {
    ngx_buf_t                      *request;
    ngx_buf_t                      *response;
    ngx_peer_connection_t           peer;

    ngx_mail_auth_http_handler_pt   handler;

    ngx_uint_t                      state;

    u_char                         *header_name_start;
    u_char                         *header_name_end;
    u_char                         *header_start;
    u_char                         *header_end;

    ngx_str_t                       addr;
    ngx_str_t                       port;
    ngx_str_t                       err;
    ngx_str_t                       errmsg;
    ngx_str_t                       errcode;

    time_t                          sleep;

    ngx_pool_t                     *pool;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7241,391138,ngx_mail_imap_srv_conf_t,4,ngx_mail_imap_srv_conf_t,,mail\ngx_mail_imap_module.h,"typedef struct {
    size_t       client_buffer_size;

    ngx_str_t    capability;
    ngx_str_t    starttls_capability;
    ngx_str_t    starttls_only_capability;

    ngx_uint_t   auth_methods;

    ngx_array_t  capabilities;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7242,396063,ngx_mail_pop3_srv_conf_t,4,ngx_mail_pop3_srv_conf_t,,mail\ngx_mail_pop3_module.h,"typedef struct {
    ngx_str_t    capability;
    ngx_str_t    starttls_capability;
    ngx_str_t    starttls_only_capability;
    ngx_str_t    auth_capability;

    ngx_uint_t   auth_methods;

    ngx_array_t  capabilities;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7243,396108,ngx_mail_proxy_conf_t,4,ngx_mail_proxy_conf_t,,mail\ngx_mail_proxy_module.c,"typedef struct {
    ngx_flag_t  enable;
    ngx_flag_t  pass_error_message;
    ngx_flag_t  xclient;
    ngx_flag_t  smtp_auth;
    ngx_flag_t  proxy_protocol;
    size_t      buffer_size;
    ngx_msec_t  timeout;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7244,400232,ngx_mail_realip_srv_conf_t,4,ngx_mail_realip_srv_conf_t,,mail\ngx_mail_realip_module.c,"typedef struct {
    ngx_array_t       *from;     /* array of ngx_cidr_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7245,403944,ngx_mail_smtp_srv_conf_t,4,ngx_mail_smtp_srv_conf_t,,mail\ngx_mail_smtp_module.h,"typedef struct {
    ngx_msec_t   greeting_delay;

    size_t       client_buffer_size;

    ngx_str_t    capability;
    ngx_str_t    starttls_capability;
    ngx_str_t    starttls_only_capability;

    ngx_str_t    server_name;
    ngx_str_t    greeting;

    ngx_uint_t   auth_methods;

    ngx_array_t  capabilities;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7246,405710,ngx_mail_ssl_conf_t,4,ngx_mail_ssl_conf_t,,mail\ngx_mail_ssl_module.h,"typedef struct {
    ngx_flag_t       enable;
    ngx_flag_t       prefer_server_ciphers;

    ngx_ssl_t        ssl;

    ngx_uint_t       starttls;
    ngx_uint_t       listen;
    ngx_uint_t       protocols;

    ngx_uint_t       verify;
    ngx_uint_t       verify_depth;

    ssize_t          builtin_session_cache;

    time_t           session_timeout;

    ngx_array_t     *certificates;
    ngx_array_t     *certificate_keys;

    ngx_str_t        dhparam;
    ngx_str_t        ecdh_curve;
    ngx_str_t        client_certificate;
    ngx_str_t        trusted_certificate;
    ngx_str_t        crl;

    ngx_str_t        ciphers;

    ngx_array_t     *passwords;
    ngx_array_t     *conf_commands;

    ngx_shm_zone_t  *shm_zone;

    ngx_flag_t       session_tickets;
    ngx_array_t     *session_ticket_keys;

    u_char          *file;
    ngx_uint_t       line;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7247,405810,ngx_google_perftools_conf_t,4,ngx_google_perftools_conf_t,,misc\ngx_google_perftools_module.c,"typedef struct {
    ngx_str_t  profiles;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7248,406071,ngx_atomic_int_t,4,ngx_atomic_int_t,,os\unix\ngx_atomic.h,typedef int32_t                     ngx_atomic_int_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7249,406072,ngx_atomic_uint_t,4,ngx_atomic_uint_t,,os\unix\ngx_atomic.h,typedef uint32_t                    ngx_atomic_uint_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7250,406073,ngx_atomic_t,4,ngx_atomic_t,,os\unix\ngx_atomic.h,typedef volatile ngx_atomic_uint_t  ngx_atomic_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7251,406558,ngx_channel_t,4,ngx_channel_t,,os\unix\ngx_channel.h,"typedef struct {
    ngx_uint_t  command;
    ngx_pid_t   pid;
    ngx_int_t   slot;
    ngx_fd_t    fd;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7252,406854,sysctl_t,4,sysctl_t,,os\unix\ngx_darwin_init.c,"typedef struct {
    char        *name;
    void        *value;
    size_t       size;
    ngx_uint_t   exists;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7253,407827,ngx_err_t,4,ngx_err_t,,os\unix\ngx_errno.h,typedef int               ngx_err_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7254,409543,ngx_fd_t,4,ngx_fd_t,,os\unix\ngx_files.h,typedef int                      ngx_fd_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7255,409544,stat,4,stat,,os\unix\ngx_files.h,typedef struct stat,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7256,409545,ngx_file_info_t,4,ngx_file_info_t,,os\unix\ngx_files.h,typedef struct stat              ngx_file_info_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7257,409546,ngx_file_uniq_t,4,ngx_file_uniq_t,,os\unix\ngx_files.h,typedef ino_t                    ngx_file_uniq_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7258,409547,ngx_file_mapping_t,4,ngx_file_mapping_t,,os\unix\ngx_files.h,"typedef struct {
    u_char                      *name;
    size_t                       size;
    void                        *addr;
    ngx_fd_t                     fd;
    ngx_log_t                   *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7259,409554,ngx_dir_t,4,ngx_dir_t,,os\unix\ngx_files.h,"typedef struct {
    DIR                         *dir;
    struct dirent               *de;
    struct stat                  info;

    unsigned                     type:8;
    unsigned                     valid_info:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7260,409556,dirent,4,ngx_dir_t.dirent,,os\unix\ngx_files.h,struct dirent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7261,409558,stat,4,ngx_dir_t.stat,,os\unix\ngx_files.h,struct stat,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7262,409563,ngx_glob_t,4,ngx_glob_t,,os\unix\ngx_files.h,"typedef struct {
    size_t                       n;
    glob_t                       pglob;
    u_char                      *pattern;
    ngx_log_t                   *log;
    ngx_uint_t                   test;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7263,409853,sysctl_t,4,sysctl_t,,os\unix\ngx_freebsd_init.c,"typedef struct {
    char        *name;
    void        *value;
    size_t       size;
    ngx_uint_t   exists;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7264,412028,ngx_os_io_t,4,ngx_os_io_t,,os\unix\ngx_os.h,"typedef struct {
    ngx_recv_pt        recv;
    ngx_recv_chain_pt  recv_chain;
    ngx_recv_pt        udp_recv;
    ngx_send_pt        send;
    ngx_send_pt        udp_send;
    ngx_send_chain_pt  udp_send_chain;
    ngx_send_chain_pt  send_chain;
    ngx_uint_t         flags;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7265,412119,ngx_iovec_t,4,ngx_iovec_t,,os\unix\ngx_os.h,"typedef struct {
    struct iovec  *iovs;
    ngx_uint_t     count;
    size_t         size;
    ngx_uint_t     nalloc;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7266,412120,iovec,4,ngx_iovec_t.iovec,,os\unix\ngx_os.h,struct iovec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7267,412258,rlimit,4,rlimit,,os\unix\ngx_posix_init.c,struct rlimit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7268,412392,ngx_signal_t,4,ngx_signal_t,,os\unix\ngx_process.c,"typedef struct {
    int     signo;
    char   *signame;
    char   *name;
    void  (*handler)(int signo, siginfo_t *siginfo, void *ucontext);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7269,413797,ngx_pid_t,4,ngx_pid_t,,os\unix\ngx_process.h,typedef pid_t       ngx_pid_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7270,413804,ngx_process_t,4,ngx_process_t,,os\unix\ngx_process.h,"typedef struct {
    ngx_pid_t           pid;
    int                 status;
    ngx_socket_t        channel[2];

    ngx_spawn_proc_pt   proc;
    void               *data;
    char               *name;

    unsigned            respawn:1;
    unsigned            just_spawn:1;
    unsigned            detached:1;
    unsigned            exiting:1;
    unsigned            exited:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7271,413823,ngx_exec_ctx_t,4,ngx_exec_ctx_t,,os\unix\ngx_process.h,"typedef struct {
    char         *path;
    char         *name;
    char *const  *argv;
    char *const  *envp;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7272,416920,ngx_cache_manager_ctx_t,4,ngx_cache_manager_ctx_t,,os\unix\ngx_process_cycle.h,"typedef struct {
    ngx_event_handler_pt       handler;
    char                      *name;
    ngx_msec_t                 delay;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7273,417544,ngx_cpuset_t,4,ngx_cpuset_t,,os\unix\ngx_setaffinity.h,typedef uint64_t  ngx_cpuset_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7274,417581,ngx_shm_t,4,ngx_shm_t,,os\unix\ngx_shmem.h,"typedef struct {
    u_char      *addr;
    size_t       size;
    ngx_str_t    name;
    ngx_log_t   *log;
    ngx_uint_t   exists;   /* unsigned  exists:1;  */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7275,417628,ngx_socket_t,4,ngx_socket_t,,os\unix\ngx_socket.h,typedef int  ngx_socket_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7276,418878,ngx_msec_t,4,ngx_msec_t,,os\unix\ngx_time.h,typedef ngx_rbtree_key_t      ngx_msec_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7277,418879,ngx_msec_int_t,4,ngx_msec_int_t,,os\unix\ngx_time.h,typedef ngx_rbtree_key_int_t  ngx_msec_int_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7278,418880,tm,4,tm,,os\unix\ngx_time.h,typedef struct tm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7279,418881,ngx_tm_t,4,ngx_tm_t,,os\unix\ngx_time.h,typedef struct tm             ngx_tm_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7280,419757,ngx_uid_t,4,ngx_uid_t,,os\unix\ngx_user.h,typedef uid_t  ngx_uid_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7281,419758,ngx_gid_t,4,ngx_gid_t,,os\unix\ngx_user.h,typedef gid_t  ngx_gid_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7282,420374,ngx_atomic_int_t,4,ngx_atomic_int_t,,os\win32\ngx_atomic.h,typedef int32_t                     ngx_atomic_int_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7283,420375,ngx_atomic_uint_t,4,ngx_atomic_uint_t,,os\win32\ngx_atomic.h,typedef uint32_t                    ngx_atomic_uint_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7284,420376,ngx_atomic_t,4,ngx_atomic_t,,os\win32\ngx_atomic.h,typedef volatile ngx_atomic_uint_t  ngx_atomic_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7285,420552,ngx_err_t,4,ngx_err_t,,os\win32\ngx_errno.h,typedef DWORD                      ngx_err_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7286,422911,ngx_fd_t,4,ngx_fd_t,,os\win32\ngx_files.h,typedef HANDLE                      ngx_fd_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7287,422912,ngx_file_info_t,4,ngx_file_info_t,,os\win32\ngx_files.h,typedef BY_HANDLE_FILE_INFORMATION  ngx_file_info_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7288,422913,ngx_file_uniq_t,4,ngx_file_uniq_t,,os\win32\ngx_files.h,typedef uint64_t                    ngx_file_uniq_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7289,422914,ngx_file_mapping_t,4,ngx_file_mapping_t,,os\win32\ngx_files.h,"typedef struct {
    u_char                         *name;
    size_t                          size;
    void                           *addr;
    ngx_fd_t                        fd;
    HANDLE                          handle;
    ngx_log_t                      *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7290,422922,ngx_dir_t,4,ngx_dir_t,,os\win32\ngx_files.h,"typedef struct {
    HANDLE                          dir;
    WIN32_FIND_DATA                 finddata;

    unsigned                        valid_info:1;
    unsigned                        type:1;
    unsigned                        ready:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7291,422929,ngx_glob_t,4,ngx_glob_t,,os\win32\ngx_files.h,"typedef struct {
    HANDLE                          dir;
    WIN32_FIND_DATA                 finddata;

    unsigned                        ready:1;
    unsigned                        test:1;
    unsigned                        no_match:1;

    u_char                         *pattern;
    ngx_str_t                       name;
    size_t                          last;
    ngx_log_t                      *log;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7292,423136,ngx_os_io_t,4,ngx_os_io_t,,os\win32\ngx_os.h,"typedef struct {
    ngx_recv_pt        recv;
    ngx_recv_chain_pt  recv_chain;
    ngx_recv_pt        udp_recv;
    ngx_send_pt        send;
    ngx_send_pt        udp_send;
    ngx_send_chain_pt  udp_send_chain;
    ngx_send_chain_pt  send_chain;
    ngx_uint_t         flags;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7293,423868,ngx_pid_t,4,ngx_pid_t,,os\win32\ngx_process.h,typedef DWORD               ngx_pid_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7294,423869,ngx_cpuset_t,4,ngx_cpuset_t,,os\win32\ngx_process.h,typedef uint64_t            ngx_cpuset_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7295,423870,ngx_process_t,4,ngx_process_t,,os\win32\ngx_process.h,"typedef struct {
    HANDLE                  handle;
    ngx_pid_t               pid;
    char                   *name;

    HANDLE                  term;
    HANDLE                  quit;
    HANDLE                  reopen;

    u_char                  term_event[NGX_PROCESS_SYNC_NAME];
    u_char                  quit_event[NGX_PROCESS_SYNC_NAME];
    u_char                  reopen_event[NGX_PROCESS_SYNC_NAME];

    unsigned                just_spawn:1;
    unsigned                exiting:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7296,423908,ngx_exec_ctx_t,4,ngx_exec_ctx_t,,os\win32\ngx_process.h,"typedef struct {
    char                   *path;
    char                   *name;
    char                   *args;
    char *const            *argv;
    char *const            *envp;
    HANDLE                  child;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7297,426990,ngx_shm_t,4,ngx_shm_t,,os\win32\ngx_shmem.h,"typedef struct {
    u_char      *addr;
    size_t       size;
    ngx_str_t    name;
    HANDLE       handle;
    ngx_log_t   *log;
    ngx_uint_t   exists;   /* unsigned  exists:1;  */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7298,427096,ngx_socket_t,4,ngx_socket_t,,os\win32\ngx_socket.h,typedef SOCKET  ngx_socket_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7299,427097,socklen_t,4,socklen_t,,os\win32\ngx_socket.h,typedef int     socklen_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7300,427224,ngx_tid_t,4,ngx_tid_t,,os\win32\ngx_thread.h,typedef HANDLE  ngx_tid_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7301,427225,ngx_thread_value_t,4,ngx_thread_value_t,,os\win32\ngx_thread.h,typedef DWORD   ngx_thread_value_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7302,427379,ngx_msec_t,4,ngx_msec_t,,os\win32\ngx_time.h,typedef ngx_rbtree_key_t      ngx_msec_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7303,427380,ngx_msec_int_t,4,ngx_msec_int_t,,os\win32\ngx_time.h,typedef ngx_rbtree_key_int_t  ngx_msec_int_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7304,427381,ngx_tm_t,4,ngx_tm_t,,os\win32\ngx_time.h,typedef SYSTEMTIME            ngx_tm_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7305,427382,ngx_mtime_t,4,ngx_mtime_t,,os\win32\ngx_time.h,typedef FILETIME              ngx_mtime_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7306,427837,uint32_t,4,uint32_t,,os\win32\ngx_win32_config.h,typedef unsigned int        uint32_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7307,427838,int32_t,4,int32_t,,os\win32\ngx_win32_config.h,typedef int                 int32_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7308,427839,uint16_t,4,uint16_t,,os\win32\ngx_win32_config.h,typedef unsigned short int  uint16_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7309,427840,int64_t,4,int64_t,,os\win32\ngx_win32_config.h,typedef __int64             int64_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7310,427842,off_t,4,off_t,,os\win32\ngx_win32_config.h,typedef __int64             off_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7311,427843,ssize_t,4,ssize_t,,os\win32\ngx_win32_config.h,typedef int                 ssize_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7312,427844,in_addr_t,4,in_addr_t,,os\win32\ngx_win32_config.h,typedef uint32_t            in_addr_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7313,427845,in_port_t,4,in_port_t,,os\win32\ngx_win32_config.h,typedef u_short             in_port_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7314,427846,sig_atomic_t,4,sig_atomic_t,,os\win32\ngx_win32_config.h,typedef int                 sig_atomic_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7315,427884,ngx_osviex_stub_t,4,ngx_osviex_stub_t,,os\win32\ngx_win32_init.c,"typedef struct {
    WORD  wServicePackMinor;
    WORD  wSuiteMask;
    BYTE  wProductType;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7316,431959,ngx_stream_session_s,4,ngx_stream_session_s,,stream\ngx_stream.h,typedef struct ngx_stream_session_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7317,431960,ngx_stream_session_t,4,ngx_stream_session_t,,stream\ngx_stream.h,typedef struct ngx_stream_session_s  ngx_stream_session_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7318,431961,ngx_stream_conf_ctx_t,4,ngx_stream_conf_ctx_t,,stream\ngx_stream.h,"typedef struct {
    void                         **main_conf;
    void                         **srv_conf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7319,431965,ngx_stream_listen_t,4,ngx_stream_listen_t,,stream\ngx_stream.h,"typedef struct {
    struct sockaddr               *sockaddr;
    socklen_t                      socklen;
    ngx_str_t                      addr_text;

    /* server ctx */
    ngx_stream_conf_ctx_t         *ctx;

    unsigned                       bind:1;
    unsigned                       wildcard:1;
    unsigned                       ssl:1;
#if (NGX_HAVE_INET6)
    unsigned                       ipv6only:1;
#endif
    unsigned                       reuseport:1;
    unsigned                       so_keepalive:2;
    unsigned                       proxy_protocol:1;
#if (NGX_HAVE_KEEPALIVE_TUNABLE)
    int                            tcp_keepidle;
    int                            tcp_keepintvl;
    int                            tcp_keepcnt;
#endif
    int                            backlog;
    int                            rcvbuf;
    int                            sndbuf;
#if (NGX_HAVE_TCP_FASTOPEN)
    int                            fastopen;
#endif
    int                   ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7320,431966,sockaddr,4,ngx_stream_listen_t.sockaddr,,stream\ngx_stream.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7321,431987,ngx_stream_addr_conf_t,4,ngx_stream_addr_conf_t,,stream\ngx_stream.h,"typedef struct {
    ngx_stream_conf_ctx_t         *ctx;
    ngx_str_t                      addr_text;
    unsigned                       ssl:1;
    unsigned                       proxy_protocol:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7322,431993,ngx_stream_in_addr_t,4,ngx_stream_in_addr_t,,stream\ngx_stream.h,"typedef struct {
    in_addr_t                      addr;
    ngx_stream_addr_conf_t         conf;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7323,431997,ngx_stream_port_t,4,ngx_stream_port_t,,stream\ngx_stream.h,"typedef struct {
    /* ngx_stream_in_addr_t or ngx_stream_in6_addr_t */
    void                          *addrs;
    ngx_uint_t                     naddrs;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7324,432001,ngx_stream_conf_port_t,4,ngx_stream_conf_port_t,,stream\ngx_stream.h,"typedef struct {
    int                            family;
    int                            type;
    in_port_t                      port;
    ngx_array_t                    addrs; /* array of ngx_stream_conf_addr_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7325,432007,ngx_stream_conf_addr_t,4,ngx_stream_conf_addr_t,,stream\ngx_stream.h,"typedef struct {
    ngx_stream_listen_t            opt;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7326,432010,ngx_stream_phases,4,ngx_stream_phases,,stream\ngx_stream.h,"typedef enum {
    NGX_STREAM_POST_ACCEPT_PHASE = 0,
    NGX_STREAM_PREACCESS_PHASE,
    NGX_STREAM_ACCESS_PHASE,
    NGX_STREAM_SSL_PHASE,
    NGX_STREAM_PREREAD_PHASE,
    NGX_STREAM_CONTENT_PHASE,
    NGX_STREAM_LOG_PHASE
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7327,432026,ngx_stream_phase_handler_s,4,ngx_stream_phase_handler_s,,stream\ngx_stream.h,typedef struct ngx_stream_phase_handler_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7328,432027,ngx_stream_phase_handler_t,4,ngx_stream_phase_handler_t,,stream\ngx_stream.h,typedef struct ngx_stream_phase_handler_s  ngx_stream_phase_handler_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7329,432044,ngx_stream_phase_handler_s,4,ngx_stream_phase_handler_s,,stream\ngx_stream.h,"struct ngx_stream_phase_handler_s {
    ngx_stream_phase_handler_pt    checker;
    ngx_stream_handler_pt          handler;
    ngx_uint_t                     next;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7330,432048,ngx_stream_phase_engine_t,4,ngx_stream_phase_engine_t,,stream\ngx_stream.h,"typedef struct {
    ngx_stream_phase_handler_t    *handlers;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7331,432051,ngx_stream_phase_t,4,ngx_stream_phase_t,,stream\ngx_stream.h,"typedef struct {
    ngx_array_t                    handlers;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7332,432054,ngx_stream_core_main_conf_t,4,ngx_stream_core_main_conf_t,,stream\ngx_stream.h,"typedef struct {
    ngx_array_t                    servers;     /* ngx_stream_core_srv_conf_t */
    ngx_array_t                    listen;      /* ngx_stream_listen_t */

    ngx_stream_phase_engine_t      phase_engine;

    ngx_hash_t                     variables_hash;

    ngx_array_t                    variables;        /* ngx_stream_variable_t */
    ngx_array_t                    prefix_variables; /* ngx_stream_variable_t */
    ngx_uint_t                     ncaptures;

    ngx_uint_t                     variables_hash_max_size;
    ngx_uint_t                     variables_hash_bucket_size;

    ngx_hash_keys_arrays_t        *variables_keys;

    ngx_stream_phase_t             phases[NGX_STREAM_LOG_PHASE + 1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7333,432075,ngx_stream_core_srv_conf_t,4,ngx_stream_core_srv_conf_t,,stream\ngx_stream.h,"typedef struct {
    ngx_stream_content_handler_pt  handler;

    ngx_stream_conf_ctx_t         *ctx;

    u_char                        *file_name;
    ngx_uint_t                     line;

    ngx_flag_t                     tcp_nodelay;
    size_t                         preread_buffer_size;
    ngx_msec_t                     preread_timeout;

    ngx_log_t                     *error_log;

    ngx_msec_t                     resolver_timeout;
    ngx_resolver_t                *resolver;

    ngx_msec_t                     proxy_protocol_timeout;

    ngx_uint_t                     listen;  /* unsigned  listen:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7334,432089,ngx_stream_session_s,4,ngx_stream_session_s,,stream\ngx_stream.h,"struct ngx_stream_session_s {
    uint32_t                       signature;         /* ""STRM"" */

    ngx_connection_t              *connection;

    off_t                          received;
    time_t                         start_sec;
    ngx_msec_t                     start_msec;

    ngx_log_handler_pt             log_handler;

    void                         **ctx;
    void                         **main_conf;
    void                         **srv_conf;

    ngx_stream_upstream_t         *upstream;
    ngx_array_t                   *upstream_states;
                                           /* of ngx_stream_upstream_state_t */
    ngx_stream_variable_value_t   *variables;

#if (NGX_PCRE)
    ngx_uint_t                     ncaptures;
    int                           *captures;
    u_char                        *captures_data;
#endif

    ngx_int_t                      phase_handler;
    ngx_uint_t                     status;

    unsigned                       ssl:1;

    un...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7335,432111,ngx_stream_module_t,4,ngx_stream_module_t,,stream\ngx_stream.h,"typedef struct {
    ngx_int_t                    (*preconfiguration)(ngx_conf_t *cf);
    ngx_int_t                    (*postconfiguration)(ngx_conf_t *cf);

    void                        *(*create_main_conf)(ngx_conf_t *cf);
    char                        *(*init_main_conf)(ngx_conf_t *cf, void *conf);

    void                        *(*create_srv_conf)(ngx_conf_t *cf);
    char                        *(*merge_srv_conf)(ngx_conf_t *cf, void *prev,
                                                   void *conf);
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7336,432207,ngx_stream_access_rule_t,4,ngx_stream_access_rule_t,,stream\ngx_stream_access_module.c,"typedef struct {
    in_addr_t         mask;
    in_addr_t         addr;
    ngx_uint_t        deny;      /* unsigned  deny:1; */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7337,432212,ngx_stream_access_srv_conf_t,4,ngx_stream_access_srv_conf_t,,stream\ngx_stream_access_module.c,"typedef struct {
    ngx_array_t      *rules;     /* array of ngx_stream_access_rule_t */
#if (NGX_HAVE_INET6)
    ngx_array_t      *rules6;    /* array of ngx_stream_access_rule6_t */
#endif
#if (NGX_HAVE_UNIX_DOMAIN)
    ngx_array_t      *rules_un;  /* array of ngx_stream_access_rule_un_t */
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7338,434803,ngx_stream_geo_range_t,4,ngx_stream_geo_range_t,,stream\ngx_stream_geo_module.c,"typedef struct {
    ngx_stream_variable_value_t       *value;
    u_short                            start;
    u_short                            end;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7339,434808,ngx_stream_geo_trees_t,4,ngx_stream_geo_trees_t,,stream\ngx_stream_geo_module.c,"typedef struct {
    ngx_radix_tree_t                  *tree;
#if (NGX_HAVE_INET6)
    ngx_radix_tree_t                  *tree6;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7340,434812,ngx_stream_geo_high_ranges_t,4,ngx_stream_geo_high_ranges_t,,stream\ngx_stream_geo_module.c,"typedef struct {
    ngx_stream_geo_range_t           **low;
    ngx_stream_variable_value_t       *default_value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7341,434816,ngx_stream_geo_variable_value_node_t,4,ngx_stream_geo_variable_value_node_t,,stream\ngx_stream_geo_module.c,"typedef struct {
    ngx_str_node_t                     sn;
    ngx_stream_variable_value_t       *value;
    size_t                             offset;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7342,434821,ngx_stream_geo_conf_ctx_t,4,ngx_stream_geo_conf_ctx_t,,stream\ngx_stream_geo_module.c,"typedef struct {
    ngx_stream_variable_value_t       *value;
    ngx_str_t                         *net;
    ngx_stream_geo_high_ranges_t       high;
    ngx_radix_tree_t                  *tree;
#if (NGX_HAVE_INET6)
    ngx_radix_tree_t                  *tree6;
#endif
    ngx_rbtree_t                       rbtree;
    ngx_rbtree_node_t                  sentinel;
    ngx_pool_t                        *pool;
    ngx_pool_t                        *temp_pool;

    size_t                             data_size;

    ngx_str_t                          include_name;
    ngx_uint_t                         includes;
    ngx_uint_t                         entries;

    unsigned                           ranges:1;
    unsigned                           outside_entries:1;
    unsigned                           allow_binary_include:1;
    unsigned                           binary_include:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7343,434840,ngx_stream_geo_ctx_t,4,ngx_stream_geo_ctx_t,,stream\ngx_stream_geo_module.c,"typedef struct {
    union {
        ngx_stream_geo_trees_t         trees;
        ngx_stream_geo_high_ranges_t   high;
    } u;

    ngx_int_t                          index;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7344,434841,ngx_stream_geo_ctx_t.u,4,ngx_stream_geo_ctx_t.u,,stream\ngx_stream_geo_module.c,"union {
        ngx_stream_geo_trees_t         trees;
        ngx_stream_geo_high_ranges_t   high;
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7345,434992,ngx_stream_geo_header_t,4,ngx_stream_geo_header_t,,stream\ngx_stream_geo_module.c,"typedef struct {
    u_char    GEORNG[6];
    u_char    version;
    u_char    ptr_size;
    uint32_t  endianness;
    uint32_t  crc32;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7346,438917,ngx_stream_geoip_conf_t,4,ngx_stream_geoip_conf_t,,stream\ngx_stream_geoip_module.c,"typedef struct {
    GeoIP        *country;
    GeoIP        *org;
    GeoIP        *city;
#if (NGX_HAVE_GEOIP_V6)
    unsigned      country_v6:1;
    unsigned      org_v6:1;
    unsigned      city_v6:1;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7347,438925,ngx_stream_geoip_var_t,4,ngx_stream_geoip_var_t,,stream\ngx_stream_geoip_module.c,"typedef struct {
    ngx_str_t    *name;
    uintptr_t     data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7348,441249,ngx_stream_limit_conn_node_t,4,ngx_stream_limit_conn_node_t,,stream\ngx_stream_limit_conn_module.c,"typedef struct {
    u_char                          color;
    u_char                          len;
    u_short                         conn;
    u_char                          data[1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7349,441261,ngx_stream_limit_conn_cleanup_t,4,ngx_stream_limit_conn_cleanup_t,,stream\ngx_stream_limit_conn_module.c,"typedef struct {
    ngx_shm_zone_t                 *shm_zone;
    ngx_rbtree_node_t              *node;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7350,441265,ngx_stream_limit_conn_shctx_t,4,ngx_stream_limit_conn_shctx_t,,stream\ngx_stream_limit_conn_module.c,"typedef struct {
    ngx_rbtree_t                    rbtree;
    ngx_rbtree_node_t               sentinel;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7351,441269,ngx_stream_limit_conn_ctx_t,4,ngx_stream_limit_conn_ctx_t,,stream\ngx_stream_limit_conn_module.c,"typedef struct {
    ngx_stream_limit_conn_shctx_t  *sh;
    ngx_slab_pool_t                *shpool;
    ngx_stream_complex_value_t      key;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7352,441274,ngx_stream_limit_conn_limit_t,4,ngx_stream_limit_conn_limit_t,,stream\ngx_stream_limit_conn_module.c,"typedef struct {
    ngx_shm_zone_t                 *shm_zone;
    ngx_uint_t                      conn;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7353,441278,ngx_stream_limit_conn_conf_t,4,ngx_stream_limit_conn_conf_t,,stream\ngx_stream_limit_conn_module.c,"typedef struct {
    ngx_array_t                     limits;
    ngx_uint_t                      log_level;
    ngx_flag_t                      dry_run;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7354,443121,ngx_stream_log_op_s,4,ngx_stream_log_op_s,,stream\ngx_stream_log_module.c,typedef struct ngx_stream_log_op_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7355,443122,ngx_stream_log_op_t,4,ngx_stream_log_op_t,,stream\ngx_stream_log_module.c,typedef struct ngx_stream_log_op_s  ngx_stream_log_op_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7356,443136,ngx_stream_log_op_s,4,ngx_stream_log_op_s,,stream\ngx_stream_log_module.c,"struct ngx_stream_log_op_s {
    size_t                       len;
    ngx_stream_log_op_getlen_pt  getlen;
    ngx_stream_log_op_run_pt     run;
    uintptr_t                    data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7357,443141,ngx_stream_log_fmt_t,4,ngx_stream_log_fmt_t,,stream\ngx_stream_log_module.c,"typedef struct {
    ngx_str_t                    name;
    ngx_array_t                 *flushes;
    ngx_array_t                 *ops;        /* array of ngx_stream_log_op_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7358,443146,ngx_stream_log_main_conf_t,4,ngx_stream_log_main_conf_t,,stream\ngx_stream_log_module.c,"typedef struct {
    ngx_array_t                  formats;    /* array of ngx_stream_log_fmt_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7359,443149,ngx_stream_log_buf_t,4,ngx_stream_log_buf_t,,stream\ngx_stream_log_module.c,"typedef struct {
    u_char                      *start;
    u_char                      *pos;
    u_char                      *last;

    ngx_event_t                 *event;
    ngx_msec_t                   flush;
    ngx_int_t                    gzip;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7360,443157,ngx_stream_log_script_t,4,ngx_stream_log_script_t,,stream\ngx_stream_log_module.c,"typedef struct {
    ngx_array_t                 *lengths;
    ngx_array_t                 *values;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7361,443161,ngx_stream_log_t,4,ngx_stream_log_t,,stream\ngx_stream_log_module.c,"typedef struct {
    ngx_open_file_t             *file;
    ngx_stream_log_script_t     *script;
    time_t                       disk_full_time;
    time_t                       error_log_time;
    ngx_syslog_peer_t           *syslog_peer;
    ngx_stream_log_fmt_t        *format;
    ngx_stream_complex_value_t  *filter;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7362,443170,ngx_stream_log_srv_conf_t,4,ngx_stream_log_srv_conf_t,,stream\ngx_stream_log_module.c,"typedef struct {
    ngx_array_t                 *logs;       /* array of ngx_stream_log_t */

    ngx_open_file_cache_t       *open_file_cache;
    time_t                       open_file_cache_valid;
    ngx_uint_t                   open_file_cache_min_uses;

    ngx_uint_t                   off;        /* unsigned  off:1 */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7363,443177,ngx_stream_log_var_t,4,ngx_stream_log_var_t,,stream\ngx_stream_log_module.c,"typedef struct {
    ngx_str_t                    name;
    size_t                       len;
    ngx_stream_log_op_run_pt     run;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7364,446842,ngx_stream_map_conf_t,4,ngx_stream_map_conf_t,,stream\ngx_stream_map_module.c,"typedef struct {
    ngx_uint_t                    hash_max_size;
    ngx_uint_t                    hash_bucket_size;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7365,446846,ngx_stream_map_conf_ctx_t,4,ngx_stream_map_conf_ctx_t,,stream\ngx_stream_map_module.c,"typedef struct {
    ngx_hash_keys_arrays_t        keys;

    ngx_array_t                  *values_hash;
#if (NGX_PCRE)
    ngx_array_t                   regexes;
#endif

    ngx_stream_variable_value_t  *default_value;
    ngx_conf_t                   *cf;
    unsigned                      hostnames:1;
    unsigned                      no_cacheable:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7366,446855,ngx_stream_map_ctx_t,4,ngx_stream_map_ctx_t,,stream\ngx_stream_map_module.c,"typedef struct {
    ngx_stream_map_t              map;
    ngx_stream_complex_value_t    value;
    ngx_stream_variable_value_t  *default_value;
    ngx_uint_t                    hostnames;      /* unsigned  hostnames:1 */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7367,448328,ngx_stream_upstream_local_t,4,ngx_stream_upstream_local_t,,stream\ngx_stream_proxy_module.c,"typedef struct {
    ngx_addr_t                      *addr;
    ngx_stream_complex_value_t      *value;
#if (NGX_HAVE_TRANSPARENT_PROXY)
    ngx_uint_t                       transparent; /* unsigned  transparent:1; */
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7368,448333,ngx_stream_proxy_srv_conf_t,4,ngx_stream_proxy_srv_conf_t,,stream\ngx_stream_proxy_module.c,"typedef struct {
    ngx_msec_t                       connect_timeout;
    ngx_msec_t                       timeout;
    ngx_msec_t                       next_upstream_timeout;
    size_t                           buffer_size;
    ngx_stream_complex_value_t      *upload_rate;
    ngx_stream_complex_value_t      *download_rate;
    ngx_uint_t                       requests;
    ngx_uint_t                       responses;
    ngx_uint_t                       next_upstream_tries;
    ngx_flag_t                       next_upstream;
    ngx_flag_t                       proxy_protocol;
    ngx_stream_upstream_local_t     *local;
    ngx_flag_t                       socket_keepalive;

#if (NGX_STREAM_SSL)
    ngx_flag_t                       ssl_enable;
    ngx_flag_t                       ssl_session_reuse;
    ngx_uint_t                       ssl_protocols;
    ngx_str_t                        ssl_ciphers;
    ngx_stream_complex_value_t      *ssl_name;
    ngx_flag_t                     ...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7369,452930,ngx_stream_realip_srv_conf_t,4,ngx_stream_realip_srv_conf_t,,stream\ngx_stream_realip_module.c,"typedef struct {
    ngx_array_t       *from;     /* array of ngx_cidr_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7370,452933,ngx_stream_realip_ctx_t,4,ngx_stream_realip_ctx_t,,stream\ngx_stream_realip_module.c,"typedef struct {
    struct sockaddr   *sockaddr;
    socklen_t          socklen;
    ngx_str_t          addr_text;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7371,452934,sockaddr,4,ngx_stream_realip_ctx_t.sockaddr,,stream\ngx_stream_realip_module.c,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7372,453823,ngx_stream_return_srv_conf_t,4,ngx_stream_return_srv_conf_t,,stream\ngx_stream_return_module.c,"typedef struct {
    ngx_stream_complex_value_t   text;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7373,453826,ngx_stream_return_ctx_t,4,ngx_stream_return_ctx_t,,stream\ngx_stream_return_module.c,"typedef struct {
    ngx_chain_t                 *out;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7374,456885,ngx_stream_script_engine_t,4,ngx_stream_script_engine_t,,stream\ngx_stream_script.h,"typedef struct {
    u_char                       *ip;
    u_char                       *pos;
    ngx_stream_variable_value_t  *sp;

    ngx_str_t                     buf;
    ngx_str_t                     line;

    unsigned                      flushed:1;
    unsigned                      skip:1;

    ngx_stream_session_t         *session;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7375,456895,ngx_stream_script_compile_t,4,ngx_stream_script_compile_t,,stream\ngx_stream_script.h,"typedef struct {
    ngx_conf_t                   *cf;
    ngx_str_t                    *source;

    ngx_array_t                 **flushes;
    ngx_array_t                 **lengths;
    ngx_array_t                 **values;

    ngx_uint_t                    variables;
    ngx_uint_t                    ncaptures;
    ngx_uint_t                    size;

    void                         *main;

    unsigned                      complete_lengths:1;
    unsigned                      complete_values:1;
    unsigned                      zero:1;
    unsigned                      conf_prefix:1;
    unsigned                      root_prefix:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7376,456911,ngx_stream_complex_value_t,4,ngx_stream_complex_value_t,,stream\ngx_stream_script.h,"typedef struct {
    ngx_str_t                     value;
    ngx_uint_t                   *flushes;
    void                         *lengths;
    void                         *values;

    union {
        size_t                    size;
    } u;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7377,456916,ngx_stream_complex_value_t.u,4,ngx_stream_complex_value_t.u,,stream\ngx_stream_script.h,"union {
        size_t                    size;
    }",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7378,456920,ngx_stream_compile_complex_value_t,4,ngx_stream_compile_complex_value_t,,stream\ngx_stream_script.h,"typedef struct {
    ngx_conf_t                   *cf;
    ngx_str_t                    *value;
    ngx_stream_complex_value_t   *complex_value;

    unsigned                      zero:1;
    unsigned                      conf_prefix:1;
    unsigned                      root_prefix:1;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7379,456938,ngx_stream_script_copy_code_t,4,ngx_stream_script_copy_code_t,,stream\ngx_stream_script.h,"typedef struct {
    ngx_stream_script_code_pt     code;
    uintptr_t                     len;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7380,456942,ngx_stream_script_var_code_t,4,ngx_stream_script_var_code_t,,stream\ngx_stream_script.h,"typedef struct {
    ngx_stream_script_code_pt     code;
    uintptr_t                     index;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7381,456946,ngx_stream_script_copy_capture_code_t,4,ngx_stream_script_copy_capture_code_t,,stream\ngx_stream_script.h,"typedef struct {
    ngx_stream_script_code_pt     code;
    uintptr_t                     n;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7382,456950,ngx_stream_script_full_name_code_t,4,ngx_stream_script_full_name_code_t,,stream\ngx_stream_script.h,"typedef struct {
    ngx_stream_script_code_pt     code;
    uintptr_t                     conf_prefix;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7383,457073,ngx_stream_set_cmd_t,4,ngx_stream_set_cmd_t,,stream\ngx_stream_set_module.c,"typedef struct {
    ngx_int_t                   index;
    ngx_stream_set_variable_pt  set_handler;
    uintptr_t                   data;
    ngx_stream_complex_value_t  value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7384,457079,ngx_stream_set_srv_conf_t,4,ngx_stream_set_srv_conf_t,,stream\ngx_stream_set_module.c,"typedef struct {
    ngx_array_t                 commands;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7385,457600,ngx_stream_split_clients_part_t,4,ngx_stream_split_clients_part_t,,stream\ngx_stream_split_clients_module.c,"typedef struct {
    uint32_t                      percent;
    ngx_stream_variable_value_t   value;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7386,457604,ngx_stream_split_clients_ctx_t,4,ngx_stream_split_clients_ctx_t,,stream\ngx_stream_split_clients_module.c,"typedef struct {
    ngx_stream_complex_value_t    value;
    ngx_array_t                   parts;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7387,460706,ngx_stream_ssl_conf_t,4,ngx_stream_ssl_conf_t,,stream\ngx_stream_ssl_module.h,"typedef struct {
    ngx_msec_t       handshake_timeout;

    ngx_flag_t       prefer_server_ciphers;

    ngx_ssl_t        ssl;

    ngx_uint_t       listen;
    ngx_uint_t       protocols;

    ngx_uint_t       verify;
    ngx_uint_t       verify_depth;

    ssize_t          builtin_session_cache;

    time_t           session_timeout;

    ngx_array_t     *certificates;
    ngx_array_t     *certificate_keys;

    ngx_array_t     *certificate_values;
    ngx_array_t     *certificate_key_values;

    ngx_str_t        dhparam;
    ngx_str_t        ecdh_curve;
    ngx_str_t        client_certificate;
    ngx_str_t        trusted_certificate;
    ngx_str_t        crl;

    ngx_str_t        ciphers;

    ngx_array_t     *passwords;
    ngx_array_t     *conf_commands;

    ngx_shm_zone_t  *shm_zone;

    ngx_flag_t       session_tickets;
    ngx_array_t     *session_ticket_keys;

    u_char          *file;
    ngx_uint_t       line;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7388,460746,ngx_stream_ssl_preread_srv_conf_t,4,ngx_stream_ssl_preread_srv_conf_t,,stream\ngx_stream_ssl_preread_module.c,"typedef struct {
    ngx_flag_t      enabled;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7389,460749,ngx_stream_ssl_preread_ctx_t,4,ngx_stream_ssl_preread_ctx_t,,stream\ngx_stream_ssl_preread_module.c,"typedef struct {
    size_t          left;
    size_t          size;
    size_t          ext;
    u_char         *pos;
    u_char         *dst;
    u_char          buf[4];
    u_char          version[2];
    ngx_str_t       host;
    ngx_str_t       alpn;
    ngx_log_t      *log;
    ngx_pool_t     *pool;
    ngx_uint_t      state;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7390,464320,ngx_stream_upstream_main_conf_t,4,ngx_stream_upstream_main_conf_t,,stream\ngx_stream_upstream.h,"typedef struct {
    ngx_array_t                        upstreams;
                                           /* ngx_stream_upstream_srv_conf_t */
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7391,464323,ngx_stream_upstream_srv_conf_s,4,ngx_stream_upstream_srv_conf_s,,stream\ngx_stream_upstream.h,typedef struct ngx_stream_upstream_srv_conf_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7392,464324,ngx_stream_upstream_srv_conf_t,4,ngx_stream_upstream_srv_conf_t,,stream\ngx_stream_upstream.h,typedef struct ngx_stream_upstream_srv_conf_s  ngx_stream_upstream_srv_conf_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7393,464337,ngx_stream_upstream_peer_t,4,ngx_stream_upstream_peer_t,,stream\ngx_stream_upstream.h,"typedef struct {
    ngx_stream_upstream_init_pt        init_upstream;
    ngx_stream_upstream_init_peer_pt   init;
    void                              *data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7394,464342,ngx_stream_upstream_server_t,4,ngx_stream_upstream_server_t,,stream\ngx_stream_upstream.h,"typedef struct {
    ngx_str_t                          name;
    ngx_addr_t                        *addrs;
    ngx_uint_t                         naddrs;
    ngx_uint_t                         weight;
    ngx_uint_t                         max_conns;
    ngx_uint_t                         max_fails;
    time_t                             fail_timeout;
    ngx_msec_t                         slow_start;
    ngx_uint_t                         down;

    unsigned                           backup:1;

    NGX_COMPAT_BEGIN(4)
    NGX_COMPAT_END
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7395,464355,ngx_stream_upstream_srv_conf_s,4,ngx_stream_upstream_srv_conf_s,,stream\ngx_stream_upstream.h,"struct ngx_stream_upstream_srv_conf_s {
    ngx_stream_upstream_peer_t         peer;
    void                             **srv_conf;

    ngx_array_t                       *servers;
                                              /* ngx_stream_upstream_server_t */

    ngx_uint_t                         flags;
    ngx_str_t                          host;
    u_char                            *file_name;
    ngx_uint_t                         line;
    in_port_t                          port;
    ngx_uint_t                         no_port;  /* unsigned no_port:1 */

#if (NGX_STREAM_UPSTREAM_ZONE)
    ngx_shm_zone_t                    *shm_zone;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7396,464366,ngx_stream_upstream_state_t,4,ngx_stream_upstream_state_t,,stream\ngx_stream_upstream.h,"typedef struct {
    ngx_msec_t                         response_time;
    ngx_msec_t                         connect_time;
    ngx_msec_t                         first_byte_time;
    off_t                              bytes_sent;
    off_t                              bytes_received;

    ngx_str_t                         *peer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7397,464374,ngx_stream_upstream_resolved_t,4,ngx_stream_upstream_resolved_t,,stream\ngx_stream_upstream.h,"typedef struct {
    ngx_str_t                          host;
    in_port_t                          port;
    ngx_uint_t                         no_port; /* unsigned no_port:1 */

    ngx_uint_t                         naddrs;
    ngx_resolver_addr_t               *addrs;

    struct sockaddr                   *sockaddr;
    socklen_t                          socklen;
    ngx_str_t                          name;

    ngx_resolver_ctx_t                *ctx;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7398,464380,sockaddr,4,ngx_stream_upstream_resolved_t.sockaddr,,stream\ngx_stream_upstream.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7399,464386,ngx_stream_upstream_t,4,ngx_stream_upstream_t,,stream\ngx_stream_upstream.h,"typedef struct {
    ngx_peer_connection_t              peer;

    ngx_buf_t                          downstream_buf;
    ngx_buf_t                          upstream_buf;

    ngx_chain_t                       *free;
    ngx_chain_t                       *upstream_out;
    ngx_chain_t                       *upstream_busy;
    ngx_chain_t                       *downstream_out;
    ngx_chain_t                       *downstream_busy;

    off_t                              received;
    time_t                             start_sec;
    ngx_uint_t                         requests;
    ngx_uint_t                         responses;
    ngx_msec_t                         start_time;

    size_t                             upload_rate;
    size_t                             download_rate;

    ngx_str_t                          ssl_name;

    ngx_stream_upstream_srv_conf_t    *upstream;
    ngx_stream_upstream_resolved_t    *resolved;
    ngx_stream_upstream_state_t       *state;
    unsign...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7400,464428,ngx_stream_upstream_chash_point_t,4,ngx_stream_upstream_chash_point_t,,stream\ngx_stream_upstream_hash_module.c,"typedef struct {
    uint32_t                              hash;
    ngx_str_t                            *server;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7401,464432,ngx_stream_upstream_chash_points_t,4,ngx_stream_upstream_chash_points_t,,stream\ngx_stream_upstream_hash_module.c,"typedef struct {
    ngx_uint_t                            number;
    ngx_stream_upstream_chash_point_t     point[1];
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7402,464442,ngx_stream_upstream_hash_srv_conf_t,4,ngx_stream_upstream_hash_srv_conf_t,,stream\ngx_stream_upstream_hash_module.c,"typedef struct {
    ngx_stream_complex_value_t            key;
    ngx_stream_upstream_chash_points_t   *points;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7403,464446,ngx_stream_upstream_hash_peer_data_t,4,ngx_stream_upstream_hash_peer_data_t,,stream\ngx_stream_upstream_hash_module.c,"typedef struct {
    /* the round robin data must be first */
    ngx_stream_upstream_rr_peer_data_t    rrp;
    ngx_stream_upstream_hash_srv_conf_t  *conf;
    ngx_str_t                             key;
    ngx_uint_t                            tries;
    ngx_uint_t                            rehash;
    uint32_t                              hash;
    ngx_event_get_peer_pt                 get_rr_peer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7404,467080,ngx_stream_upstream_random_range_t,4,ngx_stream_upstream_random_range_t,,stream\ngx_stream_upstream_random_module.c,"typedef struct {
    ngx_stream_upstream_rr_peer_t          *peer;
    ngx_uint_t                              range;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7405,467084,ngx_stream_upstream_random_srv_conf_t,4,ngx_stream_upstream_random_srv_conf_t,,stream\ngx_stream_upstream_random_module.c,"typedef struct {
    ngx_uint_t                              two;
    ngx_stream_upstream_random_range_t     *ranges;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7406,467088,ngx_stream_upstream_random_peer_data_t,4,ngx_stream_upstream_random_peer_data_t,,stream\ngx_stream_upstream_random_module.c,"typedef struct {
    /* the round robin data must be first */
    ngx_stream_upstream_rr_peer_data_t      rrp;

    ngx_stream_upstream_random_srv_conf_t  *conf;
    u_char                                  tries;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7407,470668,ngx_stream_upstream_rr_peer_s,4,ngx_stream_upstream_rr_peer_s,,stream\ngx_stream_upstream_round_robin.h,typedef struct ngx_stream_upstream_rr_peer_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7408,470669,ngx_stream_upstream_rr_peer_t,4,ngx_stream_upstream_rr_peer_t,,stream\ngx_stream_upstream_round_robin.h,typedef struct ngx_stream_upstream_rr_peer_s   ngx_stream_upstream_rr_peer_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7409,470670,ngx_stream_upstream_rr_peer_s,4,ngx_stream_upstream_rr_peer_s,,stream\ngx_stream_upstream_round_robin.h,"struct ngx_stream_upstream_rr_peer_s {
    struct sockaddr                 *sockaddr;
    socklen_t                        socklen;
    ngx_str_t                        name;
    ngx_str_t                        server;

    ngx_int_t                        current_weight;
    ngx_int_t                        effective_weight;
    ngx_int_t                        weight;

    ngx_uint_t                       conns;
    ngx_uint_t                       max_conns;

    ngx_uint_t                       fails;
    time_t                           accessed;
    time_t                           checked;

    ngx_uint_t                       max_fails;
    time_t                           fail_timeout;
    ngx_msec_t                       slow_start;
    ngx_msec_t                       start_time;

    ngx_uint_t                       down;

    void                            *ssl_session;
    int                              ssl_session_len;

#if (NGX_STREAM_UPSTREAM_ZONE)
    ngx_atomi...",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7410,470671,sockaddr,4,ngx_stream_upstream_rr_peer_s.sockaddr,,stream\ngx_stream_upstream_round_robin.h,struct sockaddr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7411,470694,ngx_stream_upstream_rr_peers_s,4,ngx_stream_upstream_rr_peers_s,,stream\ngx_stream_upstream_round_robin.h,typedef struct ngx_stream_upstream_rr_peers_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7412,470695,ngx_stream_upstream_rr_peers_t,4,ngx_stream_upstream_rr_peers_t,,stream\ngx_stream_upstream_round_robin.h,typedef struct ngx_stream_upstream_rr_peers_s  ngx_stream_upstream_rr_peers_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7413,470696,ngx_stream_upstream_rr_peers_s,4,ngx_stream_upstream_rr_peers_s,,stream\ngx_stream_upstream_round_robin.h,"struct ngx_stream_upstream_rr_peers_s {
    ngx_uint_t                       number;

#if (NGX_STREAM_UPSTREAM_ZONE)
    ngx_slab_pool_t                 *shpool;
    ngx_atomic_t                     rwlock;
    ngx_stream_upstream_rr_peers_t  *zone_next;
#endif

    ngx_uint_t                       total_weight;
    ngx_uint_t                       tries;

    unsigned                         single:1;
    unsigned                         weighted:1;

    ngx_str_t                       *name;

    ngx_stream_upstream_rr_peers_t  *next;

    ngx_stream_upstream_rr_peer_t   *peer;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7414,470708,ngx_stream_upstream_rr_peer_data_t,4,ngx_stream_upstream_rr_peer_data_t,,stream\ngx_stream_upstream_round_robin.h,"typedef struct {
    ngx_uint_t                       config;
    ngx_stream_upstream_rr_peers_t  *peers;
    ngx_stream_upstream_rr_peer_t   *current;
    uintptr_t                       *tried;
    uintptr_t                        data;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7415,474865,ngx_stream_variable_value_t,4,ngx_stream_variable_value_t,,stream\ngx_stream_variables.h,typedef ngx_variable_value_t  ngx_stream_variable_value_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7416,474866,ngx_stream_variable_s,4,ngx_stream_variable_s,,stream\ngx_stream_variables.h,typedef struct ngx_stream_variable_s,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7417,474867,ngx_stream_variable_t,4,ngx_stream_variable_t,,stream\ngx_stream_variables.h,typedef struct ngx_stream_variable_s  ngx_stream_variable_t;,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7418,474882,ngx_stream_variable_s,4,ngx_stream_variable_s,,stream\ngx_stream_variables.h,"struct ngx_stream_variable_s {
    ngx_str_t                     name;   /* must be first to build the hash */
    ngx_stream_set_variable_pt    set_handler;
    ngx_stream_get_variable_pt    get_handler;
    uintptr_t                     data;
    ngx_uint_t                    flags;
    ngx_uint_t                    index;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7419,474921,ngx_stream_map_t,4,ngx_stream_map_t,,stream\ngx_stream_variables.h,"typedef struct {
    ngx_hash_combined_t           hash;
#if (NGX_PCRE)
    ngx_stream_map_regex_t       *regex;
    ngx_uint_t                    nregex;
#endif
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7420,474956,ngx_stream_write_filter_ctx_t,4,ngx_stream_write_filter_ctx_t,,stream\ngx_stream_write_filter_module.c,"typedef struct {
    ngx_chain_t  *from_upstream;
    ngx_chain_t  *from_downstream;
}",-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7421,99,ngx_debug_points,2,core\nginx.c.ngx_debug_points,,core\nginx.c,static ngx_conf_enum_t[] ngx_debug_points,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7422,114,ngx_core_commands,2,core\nginx.c.ngx_core_commands,,core\nginx.c,static ngx_command_t[] ngx_core_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7423,332,ngx_core_module_ctx,2,core\nginx.c.ngx_core_module_ctx,,core\nginx.c,ngx_core_module_t ngx_core_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7424,340,ngx_core_module,2,core\nginx.c.ngx_core_module,,core\nginx.c,ngx_module_t ngx_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7425,357,ngx_show_help,2,core\nginx.c.ngx_show_help,,core\nginx.c,ngx_uint_t ngx_show_help,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7426,358,ngx_show_version,2,core\nginx.c.ngx_show_version,,core\nginx.c,ngx_uint_t ngx_show_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7427,359,ngx_show_configure,2,core\nginx.c.ngx_show_configure,,core\nginx.c,ngx_uint_t ngx_show_configure,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7428,360,ngx_prefix,2,core\nginx.c.ngx_prefix,,core\nginx.c,u_char* ngx_prefix,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7429,361,ngx_error_log,2,core\nginx.c.ngx_error_log,,core\nginx.c,u_char* ngx_error_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7430,362,ngx_conf_file,2,core\nginx.c.ngx_conf_file,,core\nginx.c,u_char* ngx_conf_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7431,363,ngx_conf_params,2,core\nginx.c.ngx_conf_params,,core\nginx.c,u_char* ngx_conf_params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7432,364,ngx_signal,2,core\nginx.c.ngx_signal,,core\nginx.c,static char* ngx_signal,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7433,365,ngx_os_environ,2,core\nginx.c.ngx_os_environ,,core\nginx.c,static char** ngx_os_environ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7434,366,ngx_cdecl,2,core\nginx.c.ngx_cdecl,,core\nginx.c,int ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7435,3529,ngx_array_t,2,core\ngx_array.h.ngx_array_t,,core\ngx_array.h,struct ngx_array_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7436,3553,ngx_int_t,2,core\ngx_array.h.ngx_int_t,,core\ngx_array.h,ngx_inline ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7437,4398,ngx_bufs_t,2,core\ngx_buf.h.ngx_bufs_t,,core\ngx_buf.h,struct ngx_bufs_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7438,4450,ngx_chain_writer_ctx_t,2,core\ngx_buf.h.ngx_chain_writer_ctx_t,,core\ngx_buf.h,struct ngx_chain_writer_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7439,4545,ngx_conf_commands,2,core\ngx_conf_file.c.ngx_conf_commands,,core\ngx_conf_file.c,static ngx_command_t[] ngx_conf_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7440,4560,ngx_conf_module,2,core\ngx_conf_file.c.ngx_conf_module,,core\ngx_conf_file.c,ngx_module_t ngx_conf_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7441,4576,argument_number,2,core\ngx_conf_file.c.argument_number,,core\ngx_conf_file.c,static ngx_uint_t[] argument_number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7442,6979,ngx_cdecl,2,core\ngx_conf_file.c.ngx_cdecl,,core\ngx_conf_file.c,void ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7443,8347,ngx_conf_file_t,2,core\ngx_conf_file.h.ngx_conf_file_t,,core\ngx_conf_file.h,struct ngx_conf_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7444,8351,ngx_conf_dump_t,2,core\ngx_conf_file.h.ngx_conf_dump_t,,core\ngx_conf_file.h,struct ngx_conf_dump_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7445,8381,ngx_conf_post_t,2,core\ngx_conf_file.h.ngx_conf_post_t,,core\ngx_conf_file.h,struct ngx_conf_post_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7446,8386,ngx_conf_deprecated_t,2,core\ngx_conf_file.h.ngx_conf_deprecated_t,,core\ngx_conf_file.h,struct ngx_conf_deprecated_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7447,8391,ngx_conf_num_bounds_t,2,core\ngx_conf_file.h.ngx_conf_num_bounds_t,,core\ngx_conf_file.h,struct ngx_conf_num_bounds_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7448,8395,ngx_conf_enum_t,2,core\ngx_conf_file.h.ngx_conf_enum_t,,core\ngx_conf_file.h,struct ngx_conf_enum_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7449,8399,ngx_conf_bitmask_t,2,core\ngx_conf_file.h.ngx_conf_bitmask_t,,core\ngx_conf_file.h,struct ngx_conf_bitmask_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7450,8563,ngx_io,2,core\ngx_connection.c.ngx_io,,core\ngx_connection.c,ngx_os_io_t ngx_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7451,10926,ngx_connection_log_error_e,2,core\ngx_connection.h.ngx_connection_log_error_e,,core\ngx_connection.h,enum ngx_connection_log_error_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7452,10938,ngx_connection_tcp_nodelay_e,2,core\ngx_connection.h.ngx_connection_tcp_nodelay_e,,core\ngx_connection.h,enum ngx_connection_tcp_nodelay_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7453,10950,ngx_connection_tcp_nopush_e,2,core\ngx_connection.h.ngx_connection_tcp_nopush_e,,core\ngx_connection.h,enum ngx_connection_tcp_nopush_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7454,11242,uint32_t,2,core\ngx_crc.h.uint32_t,,core\ngx_crc.h,ngx_inline uint32_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7455,11285,ngx_crc32_table16,2,core\ngx_crc32.c.ngx_crc32_table16,,core\ngx_crc32.c,static uint32_t[] ngx_crc32_table16,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7456,11305,ngx_crc32_table256,2,core\ngx_crc32.c.ngx_crc32_table256,,core\ngx_crc32.c,uint32_t[] ngx_crc32_table256,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7457,11565,ngx_crc32_table_short,2,core\ngx_crc32.c.ngx_crc32_table_short,,core\ngx_crc32.c,uint32_t* ngx_crc32_table_short,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7458,11638,ngx_crc32_table_short,2,core\ngx_crc32.h.ngx_crc32_table_short,,core\ngx_crc32.h,uint32_t* ngx_crc32_table_short,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7459,11639,ngx_crc32_table256,2,core\ngx_crc32.h.ngx_crc32_table256,,core\ngx_crc32.h,extern uint32_t[] ngx_crc32_table256,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7460,11641,uint32_t,2,core\ngx_crc32.h.uint32_t,,core\ngx_crc32.h,ngx_inline uint32_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7461,11697,uint32_t,2,core\ngx_crc32.h.uint32_t,,core\ngx_crc32.h,ngx_inline uint32_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7462,11808,ngx_cycle,2,core\ngx_cycle.c.ngx_cycle,,core\ngx_cycle.c,volatile ngx_cycle_t* ngx_cycle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7463,11809,ngx_old_cycles,2,core\ngx_cycle.c.ngx_old_cycles,,core\ngx_cycle.c,ngx_array_t ngx_old_cycles,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7464,11810,ngx_temp_pool,2,core\ngx_cycle.c.ngx_temp_pool,,core\ngx_cycle.c,ngx_pool_t* ngx_temp_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
7465,11811,ngx_cleaner_event,2,core\ngx_cycle.c.ngx_cleaner_event,,core\ngx_cycle.c,ngx_event_t ngx_cleaner_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
7466,11812,ngx_shutdown_event,2,core\ngx_cycle.c.ngx_shutdown_event,,core\ngx_cycle.c,ngx_event_t ngx_shutdown_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
7467,11813,ngx_test_config,2,core\ngx_cycle.c.ngx_test_config,,core\ngx_cycle.c,ngx_uint_t ngx_test_config,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
7468,11814,ngx_dump_config,2,core\ngx_cycle.c.ngx_dump_config,,core\ngx_cycle.c,ngx_uint_t ngx_dump_config,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7469,11815,ngx_quiet_mode,2,core\ngx_cycle.c.ngx_quiet_mode,,core\ngx_cycle.c,ngx_uint_t ngx_quiet_mode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7470,11816,dumb,2,core\ngx_cycle.c.dumb,,core\ngx_cycle.c,ngx_connection_t dumb,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7471,15882,ngx_core_conf_t,2,core\ngx_cycle.h.ngx_core_conf_t,,core\ngx_cycle.h,struct ngx_core_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7472,15941,ngx_cycle,2,core\ngx_cycle.h.ngx_cycle,,core\ngx_cycle.h,volatile ngx_cycle_t* ngx_cycle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7473,15942,ngx_old_cycles,2,core\ngx_cycle.h.ngx_old_cycles,,core\ngx_cycle.h,ngx_array_t ngx_old_cycles,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7474,15943,ngx_core_module,2,core\ngx_cycle.h.ngx_core_module,,core\ngx_cycle.h,ngx_module_t ngx_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7475,15944,ngx_test_config,2,core\ngx_cycle.h.ngx_test_config,,core\ngx_cycle.h,ngx_uint_t ngx_test_config,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7476,15945,ngx_dump_config,2,core\ngx_cycle.h.ngx_dump_config,,core\ngx_cycle.h,ngx_uint_t ngx_dump_config,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7477,15946,ngx_quiet_mode,2,core\ngx_cycle.h.ngx_quiet_mode,,core\ngx_cycle.h,ngx_uint_t ngx_quiet_mode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7478,15961,temp_number,2,core\ngx_file.c.temp_number,,core\ngx_file.c,ngx_atomic_t temp_number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7479,15965,ngx_temp_number,2,core\ngx_file.c.ngx_temp_number,,core\ngx_file.c,ngx_atomic_t* ngx_temp_number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7480,15970,ngx_random_number,2,core\ngx_file.c.ngx_random_number,,core\ngx_file.c,ngx_atomic_int_t ngx_random_number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7481,18760,ngx_path_t,2,core\ngx_file.h.ngx_path_t,,core\ngx_file.h,struct ngx_path_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7482,18772,ngx_path_init_t,2,core\ngx_file.h.ngx_path_init_t,,core\ngx_file.h,struct ngx_path_init_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7483,18784,ngx_temp_file_t,2,core\ngx_file.h.ngx_temp_file_t,,core\ngx_file.h,struct ngx_temp_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7484,18793,ngx_ext_rename_file_t,2,core\ngx_file.h.ngx_ext_rename_file_t,,core\ngx_file.h,struct ngx_ext_rename_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7485,18800,ngx_copy_file_t,2,core\ngx_file.h.ngx_copy_file_t,,core\ngx_file.h,struct ngx_copy_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7486,18929,ngx_temp_number,2,core\ngx_file.h.ngx_temp_number,,core\ngx_file.h,ngx_atomic_t* ngx_temp_number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7487,18930,ngx_random_number,2,core\ngx_file.h.ngx_random_number,,core\ngx_file.h,ngx_atomic_int_t ngx_random_number,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7488,21744,ngx_hash_elt_t,2,core\ngx_hash.h.ngx_hash_elt_t,,core\ngx_hash.h,struct ngx_hash_elt_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7489,21748,ngx_hash_t,2,core\ngx_hash.h.ngx_hash_t,,core\ngx_hash.h,struct ngx_hash_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7490,21752,ngx_hash_wildcard_t,2,core\ngx_hash.h.ngx_hash_wildcard_t,,core\ngx_hash.h,struct ngx_hash_wildcard_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7491,21757,ngx_hash_key_t,2,core\ngx_hash.h.ngx_hash_key_t,,core\ngx_hash.h,struct ngx_hash_key_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7492,21768,ngx_hash_combined_t,2,core\ngx_hash.h.ngx_hash_combined_t,,core\ngx_hash.h,struct ngx_hash_combined_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7493,21777,ngx_hash_init_t,2,core\ngx_hash.h.ngx_hash_init_t,,core\ngx_hash.h,struct ngx_hash_init_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7494,21788,ngx_hash_keys_arrays_t,2,core\ngx_hash.h.ngx_hash_keys_arrays_t,,core\ngx_hash.h,struct ngx_hash_keys_arrays_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7495,21794,ngx_table_elt_t,2,core\ngx_hash.h.ngx_table_elt_t,,core\ngx_hash.h,struct ngx_table_elt_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7496,23861,ngx_sockaddr_t,2,core\ngx_inet.h.ngx_sockaddr_t,,core\ngx_inet.h,union ngx_sockaddr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7497,23865,ngx_in_cidr_t,2,core\ngx_inet.h.ngx_in_cidr_t,,core\ngx_inet.h,struct ngx_in_cidr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7498,23872,ngx_cidr_t,2,core\ngx_inet.h.ngx_cidr_t,,core\ngx_inet.h,struct ngx_cidr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7499,23878,ngx_addr_t,2,core\ngx_inet.h.ngx_addr_t,,core\ngx_inet.h,struct ngx_addr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7500,23898,ngx_url_t,2,core\ngx_inet.h.ngx_url_t,,core\ngx_inet.h,struct ngx_url_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7501,24154,ngx_list_t,2,core\ngx_list.h.ngx_list_t,,core\ngx_list.h,struct ngx_list_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7502,24162,ngx_int_t,2,core\ngx_list.h.ngx_int_t,,core\ngx_list.h,ngx_inline ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7503,24266,ngx_errlog_commands,2,core\ngx_log.c.ngx_errlog_commands,,core\ngx_log.c,static ngx_command_t[] ngx_errlog_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7504,24281,ngx_errlog_module_ctx,2,core\ngx_log.c.ngx_errlog_module_ctx,,core\ngx_log.c,ngx_core_module_t ngx_errlog_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7505,24289,ngx_errlog_module,2,core\ngx_log.c.ngx_errlog_module,,core\ngx_log.c,ngx_module_t ngx_errlog_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7506,24306,ngx_log,2,core\ngx_log.c.ngx_log,,core\ngx_log.c,ngx_log_t ngx_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7507,24307,ngx_log_file,2,core\ngx_log.c.ngx_log_file,,core\ngx_log.c,ngx_open_file_t ngx_log_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
7508,24308,ngx_use_stderr,2,core\ngx_log.c.ngx_use_stderr,,core\ngx_log.c,ngx_uint_t ngx_use_stderr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7509,24312,err_levels,2,core\ngx_log.c.err_levels,,core\ngx_log.c,static ngx_str_t[] err_levels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7510,24333,debug_levels,2,core\ngx_log.c.debug_levels,,core\ngx_log.c,char[] debug_levels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7511,24587,ngx_cdecl,2,core\ngx_log.c.ngx_cdecl,,core\ngx_log.c,void ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7512,24616,ngx_cdecl,2,core\ngx_log.c.ngx_cdecl,,core\ngx_log.c,void ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7513,24637,ngx_cdecl,2,core\ngx_log.c.ngx_cdecl,,core\ngx_log.c,void ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7514,24674,ngx_cdecl,2,core\ngx_log.c.ngx_cdecl,,core\ngx_log.c,void ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7515,25692,ngx_errlog_module,2,core\ngx_log.h.ngx_errlog_module,,core\ngx_log.h,ngx_module_t ngx_errlog_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7516,25693,ngx_use_stderr,2,core\ngx_log.h.ngx_use_stderr,,core\ngx_log.h,ngx_uint_t ngx_use_stderr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7517,29379,ngx_md5_t,2,core\ngx_md5.h.ngx_md5_t,,core\ngx_md5.h,struct ngx_md5_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7518,29419,ngx_max_module,2,core\ngx_module.c.ngx_max_module,,core\ngx_module.c,ngx_uint_t ngx_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7519,29420,ngx_modules_n,2,core\ngx_module.c.ngx_modules_n,,core\ngx_module.c,ngx_uint_t ngx_modules_n,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7520,30315,ngx_core_module_t,2,core\ngx_module.h.ngx_core_module_t,,core\ngx_module.h,struct ngx_core_module_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7521,30345,ngx_modules,2,core\ngx_module.h.ngx_modules,,core\ngx_module.h,extern ngx_module_t ** [] ngx_modules,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7522,30347,ngx_max_module,2,core\ngx_module.h.ngx_max_module,,core\ngx_module.h,ngx_uint_t ngx_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7523,30348,ngx_module_names,2,core\ngx_module.h.ngx_module_names,,core\ngx_module.h,char*[] ngx_module_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7524,32855,ngx_open_file_info_t,2,core\ngx_open_file_cache.h.ngx_open_file_info_t,,core\ngx_open_file_cache.h,struct ngx_open_file_info_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7525,32888,ngx_open_file_cache_t,2,core\ngx_open_file_cache.h.ngx_open_file_cache_t,,core\ngx_open_file_cache.h,struct ngx_open_file_cache_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7526,32894,ngx_open_file_cache_cleanup_t,2,core\ngx_open_file_cache.h.ngx_open_file_cache_cleanup_t,,core\ngx_open_file_cache.h,struct ngx_open_file_cache_cleanup_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7527,32902,ngx_open_file_cache_event_t,2,core\ngx_open_file_cache.h.ngx_open_file_cache_event_t,,core\ngx_open_file_cache.h,struct ngx_open_file_cache_event_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7528,32929,ngx_int_t,2,core\ngx_output_chain.c.ngx_int_t,,core\ngx_output_chain.c,ngx_inline ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7529,33504,ngx_int_t,2,core\ngx_output_chain.c.ngx_int_t,,core\ngx_output_chain.c,ngx_inline ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7530,35663,ngx_pool_data_t,2,core\ngx_palloc.h.ngx_pool_data_t,,core\ngx_palloc.h,struct ngx_pool_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7531,35676,ngx_pool_cleanup_file_t,2,core\ngx_palloc.h.ngx_pool_cleanup_file_t,,core\ngx_palloc.h,struct ngx_pool_cleanup_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7532,36447,mday,2,core\ngx_parse_time.c.mday,,core\ngx_parse_time.c,static ngx_uint_t[] mday,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7533,37393,ngx_proxy_protocol_header_t,2,core\ngx_proxy_protocol.c.ngx_proxy_protocol_header_t,,core\ngx_proxy_protocol.c,struct ngx_proxy_protocol_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7534,37411,ngx_proxy_protocol_inet_addrs_t,2,core\ngx_proxy_protocol.c.ngx_proxy_protocol_inet_addrs_t,,core\ngx_proxy_protocol.c,struct ngx_proxy_protocol_inet_addrs_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7535,37429,ngx_proxy_protocol_inet6_addrs_t,2,core\ngx_proxy_protocol.c.ngx_proxy_protocol_inet6_addrs_t,,core\ngx_proxy_protocol.c,struct ngx_proxy_protocol_inet6_addrs_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7536,39230,ngx_radix_tree_t,2,core\ngx_radix_tree.h.ngx_radix_tree_t,,core\ngx_radix_tree.h,struct ngx_radix_tree_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7537,40250,ngx_regex_conf_t,2,core\ngx_regex.c.ngx_regex_conf_t,,core\ngx_regex.c,struct ngx_regex_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7538,40276,ngx_regex_pcre_jit_post,2,core\ngx_regex.c.ngx_regex_pcre_jit_post,,core\ngx_regex.c,ngx_conf_post_t ngx_regex_pcre_jit_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7539,40281,ngx_regex_commands,2,core\ngx_regex.c.ngx_regex_commands,,core\ngx_regex.c,static ngx_command_t[] ngx_regex_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7540,40301,ngx_regex_module_ctx,2,core\ngx_regex.c.ngx_regex_module_ctx,,core\ngx_regex.c,ngx_core_module_t ngx_regex_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7541,40309,ngx_regex_module,2,core\ngx_regex.c.ngx_regex_module,,core\ngx_regex.c,ngx_module_t ngx_regex_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7542,40326,ngx_pcre_pool,2,core\ngx_regex.c.ngx_pcre_pool,,core\ngx_regex.c,ngx_pool_t* ngx_pcre_pool,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7543,40327,ngx_pcre_studies,2,core\ngx_regex.c.ngx_pcre_studies,,core\ngx_regex.c,ngx_list_t* ngx_pcre_studies,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7544,40734,ngx_libc_cdecl,2,core\ngx_regex.c.ngx_libc_cdecl,,core\ngx_regex.c,static void* ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7545,40754,ngx_libc_cdecl,2,core\ngx_regex.c.ngx_libc_cdecl,,core\ngx_regex.c,static void ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7546,40974,ngx_regex_t,2,core\ngx_regex.h.ngx_regex_t,,core\ngx_regex.h,struct ngx_regex_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7547,40985,ngx_regex_compile_t,2,core\ngx_regex.h.ngx_regex_compile_t,,core\ngx_regex.h,struct ngx_regex_compile_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7548,40989,ngx_regex_elt_t,2,core\ngx_regex.h.ngx_regex_elt_t,,core\ngx_regex.h,struct ngx_regex_elt_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7549,41031,ngx_resolver_hdr_t,2,core\ngx_resolver.c.ngx_resolver_hdr_t,,core\ngx_resolver.c,struct ngx_resolver_hdr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7550,41037,ngx_resolver_qs_t,2,core\ngx_resolver.c.ngx_resolver_qs_t,,core\ngx_resolver.c,struct ngx_resolver_qs_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7551,41052,ngx_resolver_an_t,2,core\ngx_resolver.c.ngx_resolver_an_t,,core\ngx_resolver.c,struct ngx_resolver_an_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7552,52378,ngx_resolver_connection_t,2,core\ngx_resolver.h.ngx_resolver_connection_t,,core\ngx_resolver.h,struct ngx_resolver_connection_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7553,52393,ngx_resolver_addr_t,2,core\ngx_resolver.h.ngx_resolver_addr_t,,core\ngx_resolver.h,struct ngx_resolver_addr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7554,52399,ngx_resolver_srv_t,2,core\ngx_resolver.h.ngx_resolver_srv_t,,core\ngx_resolver.h,struct ngx_resolver_srv_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7555,52409,ngx_resolver_srv_name_t,2,core\ngx_resolver.h.ngx_resolver_srv_name_t,,core\ngx_resolver.h,struct ngx_resolver_srv_name_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7556,52444,ngx_resolver_node_t,2,core\ngx_resolver.h.ngx_resolver_node_t,,core\ngx_resolver.h,struct ngx_resolver_node_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7557,58269,ngx_sha1_t,2,core\ngx_sha1.h.ngx_sha1_t,,core\ngx_sha1.h,struct ngx_sha1_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7558,58461,ngx_shmtx_sh_t,2,core\ngx_shmtx.h.ngx_shmtx_sh_t,,core\ngx_shmtx.h,struct ngx_shmtx_sh_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7559,58470,ngx_shmtx_t,2,core\ngx_shmtx.h.ngx_shmtx_t,,core\ngx_shmtx.h,struct ngx_shmtx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7560,58533,ngx_slab_max_size,2,core\ngx_slab.c.ngx_slab_max_size,,core\ngx_slab.c,ngx_uint_t ngx_slab_max_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7561,58534,ngx_slab_exact_size,2,core\ngx_slab.c.ngx_slab_exact_size,,core\ngx_slab.c,ngx_uint_t ngx_slab_exact_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7562,58535,ngx_slab_exact_shift,2,core\ngx_slab.c.ngx_slab_exact_shift,,core\ngx_slab.c,ngx_uint_t ngx_slab_exact_shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7563,61198,ngx_slab_stat_t,2,core\ngx_slab.h.ngx_slab_stat_t,,core\ngx_slab.h,struct ngx_slab_stat_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7564,61216,ngx_slab_pool_t,2,core\ngx_slab.h.ngx_slab_pool_t,,core\ngx_slab.h,struct ngx_slab_pool_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7565,61445,ngx_cdecl,2,core\ngx_string.c.ngx_cdecl,,core\ngx_string.c,u_char* ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7566,61472,ngx_cdecl,2,core\ngx_string.c.ngx_cdecl,,core\ngx_string.c,u_char* ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7567,61499,ngx_cdecl,2,core\ngx_string.c.ngx_cdecl,,core\ngx_string.c,u_char* ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7568,66406,ngx_str_t,2,core\ngx_string.h.ngx_str_t,,core\ngx_string.h,struct ngx_str_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7569,66410,ngx_keyval_t,2,core\ngx_string.h.ngx_keyval_t,,core\ngx_string.h,struct ngx_keyval_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7570,66418,ngx_variable_value_t,2,core\ngx_string.h.ngx_variable_value_t,,core\ngx_string.h,struct ngx_variable_value_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7571,66661,ngx_str_node_t,2,core\ngx_string.h.ngx_str_node_t,,core\ngx_string.h,struct ngx_str_node_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7572,66711,facilities,2,core\ngx_syslog.c.facilities,,core\ngx_syslog.c,char*[] facilities,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7573,66740,severities,2,core\ngx_syslog.c.severities,,core\ngx_syslog.c,char*[] severities,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7574,66753,ngx_syslog_dummy_log,2,core\ngx_syslog.c.ngx_syslog_dummy_log,,core\ngx_syslog.c,ngx_log_t ngx_syslog_dummy_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7575,66754,ngx_syslog_dummy_event,2,core\ngx_syslog.c.ngx_syslog_dummy_event,,core\ngx_syslog.c,ngx_event_t ngx_syslog_dummy_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7576,67725,ngx_syslog_peer_t,2,core\ngx_syslog.h.ngx_syslog_peer_t,,core\ngx_syslog.h,struct ngx_syslog_peer_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7577,67766,ngx_thread_pool_conf_t,2,core\ngx_thread_pool.c.ngx_thread_pool_conf_t,,core\ngx_thread_pool.c,struct ngx_thread_pool_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7578,67770,ngx_thread_pool_queue_t,2,core\ngx_thread_pool.c.ngx_thread_pool_queue_t,,core\ngx_thread_pool.c,struct ngx_thread_pool_queue_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7579,67838,ngx_thread_pool_commands,2,core\ngx_thread_pool.c.ngx_thread_pool_commands,,core\ngx_thread_pool.c,static ngx_command_t[] ngx_thread_pool_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7580,67855,ngx_thread_pool_module_ctx,2,core\ngx_thread_pool.c.ngx_thread_pool_module_ctx,,core\ngx_thread_pool.c,ngx_core_module_t ngx_thread_pool_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7581,67863,ngx_thread_pool_module,2,core\ngx_thread_pool.c.ngx_thread_pool_module,,core\ngx_thread_pool.c,ngx_module_t ngx_thread_pool_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7582,67880,ngx_thread_pool_default,2,core\ngx_thread_pool.c.ngx_thread_pool_default,,core\ngx_thread_pool.c,ngx_str_t ngx_thread_pool_default,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7583,67885,ngx_thread_pool_task_id,2,core\ngx_thread_pool.c.ngx_thread_pool_task_id,,core\ngx_thread_pool.c,ngx_uint_t ngx_thread_pool_task_id,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7584,67886,ngx_thread_pool_done_lock,2,core\ngx_thread_pool.c.ngx_thread_pool_done_lock,,core\ngx_thread_pool.c,ngx_atomic_t ngx_thread_pool_done_lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7585,67887,ngx_thread_pool_done,2,core\ngx_thread_pool.c.ngx_thread_pool_done,,core\ngx_thread_pool.c,ngx_thread_pool_queue_t ngx_thread_pool_done,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7586,69406,slot,2,core\ngx_times.c.slot,,core\ngx_times.c,ngx_uint_t slot,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,15,0,1,1,0,0,,0,0,0,0,0,
7587,69407,ngx_time_lock,2,core\ngx_times.c.ngx_time_lock,,core\ngx_times.c,ngx_atomic_t ngx_time_lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
7588,69408,ngx_current_msec,2,core\ngx_times.c.ngx_current_msec,,core\ngx_times.c,volatile ngx_msec_t ngx_current_msec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7589,69409,ngx_cached_time,2,core\ngx_times.c.ngx_cached_time,,core\ngx_times.c,volatile ngx_time_t* ngx_cached_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7590,69410,ngx_cached_err_log_time,2,core\ngx_times.c.ngx_cached_err_log_time,,core\ngx_times.c,volatile ngx_str_t ngx_cached_err_log_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7591,69411,ngx_cached_http_time,2,core\ngx_times.c.ngx_cached_http_time,,core\ngx_times.c,volatile ngx_str_t ngx_cached_http_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7592,69412,ngx_cached_http_log_time,2,core\ngx_times.c.ngx_cached_http_log_time,,core\ngx_times.c,volatile ngx_str_t ngx_cached_http_log_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7593,69413,ngx_cached_http_log_iso8601,2,core\ngx_times.c.ngx_cached_http_log_iso8601,,core\ngx_times.c,volatile ngx_str_t ngx_cached_http_log_iso8601,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7594,69414,ngx_cached_syslog_time,2,core\ngx_times.c.ngx_cached_syslog_time,,core\ngx_times.c,volatile ngx_str_t ngx_cached_syslog_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7595,69415,cached_gmtoff,2,core\ngx_times.c.cached_gmtoff,,core\ngx_times.c,ngx_int_t cached_gmtoff,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7596,69416,cached_time,2,core\ngx_times.c.cached_time,,core\ngx_times.c,static ngx_time_t[64] cached_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
7597,69421,cached_err_log_time,2,core\ngx_times.c.cached_err_log_time,,core\ngx_times.c,static u_char[64][] cached_err_log_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7598,69428,cached_http_time,2,core\ngx_times.c.cached_http_time,,core\ngx_times.c,static u_char[64][] cached_http_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7599,69435,cached_http_log_time,2,core\ngx_times.c.cached_http_log_time,,core\ngx_times.c,static u_char[64][] cached_http_log_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7600,69442,cached_http_log_iso8601,2,core\ngx_times.c.cached_http_log_iso8601,,core\ngx_times.c,static u_char[64][] cached_http_log_iso8601,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7601,69449,cached_syslog_time,2,core\ngx_times.c.cached_syslog_time,,core\ngx_times.c,static u_char[64][] cached_syslog_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7602,69456,week,2,core\ngx_times.c.week,,core\ngx_times.c,char*[] week,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7603,69467,months,2,core\ngx_times.c.months,,core\ngx_times.c,char*[] months,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
7604,70494,ngx_time_t,2,core\ngx_times.h.ngx_time_t,,core\ngx_times.h,struct ngx_time_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7605,70533,ngx_cached_time,2,core\ngx_times.h.ngx_cached_time,,core\ngx_times.h,volatile ngx_time_t* ngx_cached_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7606,70534,ngx_cached_err_log_time,2,core\ngx_times.h.ngx_cached_err_log_time,,core\ngx_times.h,volatile ngx_str_t ngx_cached_err_log_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7607,70535,ngx_cached_http_time,2,core\ngx_times.h.ngx_cached_http_time,,core\ngx_times.h,volatile ngx_str_t ngx_cached_http_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7608,70536,ngx_cached_http_log_time,2,core\ngx_times.h.ngx_cached_http_log_time,,core\ngx_times.h,volatile ngx_str_t ngx_cached_http_log_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7609,70537,ngx_cached_http_log_iso8601,2,core\ngx_times.h.ngx_cached_http_log_iso8601,,core\ngx_times.h,volatile ngx_str_t ngx_cached_http_log_iso8601,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7610,70538,ngx_cached_syslog_time,2,core\ngx_times.h.ngx_cached_syslog_time,,core\ngx_times.h,volatile ngx_str_t ngx_cached_syslog_time,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7611,70539,ngx_current_msec,2,core\ngx_times.h.ngx_current_msec,,core\ngx_times.h,volatile ngx_msec_t ngx_current_msec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7612,70554,ngx_devpoll_conf_t,2,event\modules\ngx_devpoll_module.c.ngx_devpoll_conf_t,,event\modules\ngx_devpoll_module.c,struct ngx_devpoll_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7613,70605,dp,2,event\modules\ngx_devpoll_module.c.dp,,event\modules\ngx_devpoll_module.c,static int dp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7614,70611,change_list,2,event\modules\ngx_devpoll_module.c.change_list,,event\modules\ngx_devpoll_module.c,struct pollfd* change_list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7615,70612,event_list,2,event\modules\ngx_devpoll_module.c.event_list,,event\modules\ngx_devpoll_module.c,struct pollfd* event_list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7616,70613,nchanges,2,event\modules\ngx_devpoll_module.c.nchanges,,event\modules\ngx_devpoll_module.c,ngx_uint_t nchanges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7617,70614,max_changes,2,event\modules\ngx_devpoll_module.c.max_changes,,event\modules\ngx_devpoll_module.c,ngx_uint_t max_changes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7618,70615,nevents,2,event\modules\ngx_devpoll_module.c.nevents,,event\modules\ngx_devpoll_module.c,ngx_uint_t nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7619,70616,change_index,2,event\modules\ngx_devpoll_module.c.change_index,,event\modules\ngx_devpoll_module.c,ngx_event_t** change_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7620,70617,devpoll_name,2,event\modules\ngx_devpoll_module.c.devpoll_name,,event\modules\ngx_devpoll_module.c,ngx_str_t devpoll_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7621,70622,ngx_devpoll_commands,2,event\modules\ngx_devpoll_module.c.ngx_devpoll_commands,,event\modules\ngx_devpoll_module.c,static ngx_command_t[] ngx_devpoll_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7622,70651,ngx_devpoll_module_ctx,2,event\modules\ngx_devpoll_module.c.ngx_devpoll_module_ctx,,event\modules\ngx_devpoll_module.c,ngx_event_module_t ngx_devpoll_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7623,70670,ngx_devpoll_module,2,event\modules\ngx_devpoll_module.c.ngx_devpoll_module,,event\modules\ngx_devpoll_module.c,ngx_module_t ngx_devpoll_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7624,71751,ngx_epoll_conf_t,2,event\modules\ngx_epoll_module.c.ngx_epoll_conf_t,,event\modules\ngx_epoll_module.c,struct ngx_epoll_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7625,71806,ep,2,event\modules\ngx_epoll_module.c.ep,,event\modules\ngx_epoll_module.c,static int ep,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7626,71812,event_list,2,event\modules\ngx_epoll_module.c.event_list,,event\modules\ngx_epoll_module.c,struct epoll_event* event_list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7627,71813,nevents,2,event\modules\ngx_epoll_module.c.nevents,,event\modules\ngx_epoll_module.c,ngx_uint_t nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7628,71814,epoll_name,2,event\modules\ngx_epoll_module.c.epoll_name,,event\modules\ngx_epoll_module.c,ngx_str_t epoll_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7629,71819,ngx_epoll_commands,2,event\modules\ngx_epoll_module.c.ngx_epoll_commands,,event\modules\ngx_epoll_module.c,static ngx_command_t[] ngx_epoll_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7630,71848,ngx_epoll_module_ctx,2,event\modules\ngx_epoll_module.c.ngx_epoll_module_ctx,,event\modules\ngx_epoll_module.c,ngx_event_module_t ngx_epoll_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7631,71867,ngx_epoll_module,2,event\modules\ngx_epoll_module.c.ngx_epoll_module,,event\modules\ngx_epoll_module.c,ngx_module_t ngx_epoll_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7632,72873,ngx_eventport_conf_t,2,event\modules\ngx_eventport_module.c.ngx_eventport_conf_t,,event\modules\ngx_eventport_module.c,struct ngx_eventport_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7633,72922,ep,2,event\modules\ngx_eventport_module.c.ep,,event\modules\ngx_eventport_module.c,static int ep,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7634,72927,event_list,2,event\modules\ngx_eventport_module.c.event_list,,event\modules\ngx_eventport_module.c,port_event_t* event_list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7635,72928,nevents,2,event\modules\ngx_eventport_module.c.nevents,,event\modules\ngx_eventport_module.c,ngx_uint_t nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7636,72929,event_timer,2,event\modules\ngx_eventport_module.c.event_timer,,event\modules\ngx_eventport_module.c,timer_t event_timer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7637,72935,notify_event,2,event\modules\ngx_eventport_module.c.notify_event,,event\modules\ngx_eventport_module.c,ngx_event_t notify_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7638,72936,eventport_name,2,event\modules\ngx_eventport_module.c.eventport_name,,event\modules\ngx_eventport_module.c,ngx_str_t eventport_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7639,72941,ngx_eventport_commands,2,event\modules\ngx_eventport_module.c.ngx_eventport_commands,,event\modules\ngx_eventport_module.c,static ngx_command_t[] ngx_eventport_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7640,72958,ngx_eventport_module_ctx,2,event\modules\ngx_eventport_module.c.ngx_eventport_module_ctx,,event\modules\ngx_eventport_module.c,ngx_event_module_t ngx_eventport_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7641,72977,ngx_eventport_module,2,event\modules\ngx_eventport_module.c.ngx_eventport_module,,event\modules\ngx_eventport_module.c,ngx_module_t ngx_eventport_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7642,74140,iocp_name,2,event\modules\ngx_iocp_module.c.iocp_name,,event\modules\ngx_iocp_module.c,ngx_str_t iocp_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7643,74145,ngx_iocp_commands,2,event\modules\ngx_iocp_module.c.ngx_iocp_commands,,event\modules\ngx_iocp_module.c,static ngx_command_t[] ngx_iocp_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7644,74186,ngx_iocp_module_ctx,2,event\modules\ngx_iocp_module.c.ngx_iocp_module_ctx,,event\modules\ngx_iocp_module.c,ngx_event_module_t ngx_iocp_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7645,74205,ngx_iocp_module,2,event\modules\ngx_iocp_module.c.ngx_iocp_module,,event\modules\ngx_iocp_module.c,ngx_module_t ngx_iocp_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7646,74222,ngx_iocp_io,2,event\modules\ngx_iocp_module.c.ngx_iocp_io,,event\modules\ngx_iocp_module.c,ngx_os_io_t ngx_iocp_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7647,74234,iocp,2,event\modules\ngx_iocp_module.c.iocp,,event\modules\ngx_iocp_module.c,HANDLE iocp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7648,74235,timer_thread,2,event\modules\ngx_iocp_module.c.timer_thread,,event\modules\ngx_iocp_module.c,ngx_tid_t timer_thread,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7649,74236,msec,2,event\modules\ngx_iocp_module.c.msec,,event\modules\ngx_iocp_module.c,ngx_msec_t msec,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7650,74771,ngx_iocp_conf_t,2,event\modules\ngx_iocp_module.h.ngx_iocp_conf_t,,event\modules\ngx_iocp_module.h,struct ngx_iocp_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7651,74772,ngx_iocp_module,2,event\modules\ngx_iocp_module.h.ngx_iocp_module,,event\modules\ngx_iocp_module.h,ngx_module_t ngx_iocp_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7652,74787,ngx_kqueue_conf_t,2,event\modules\ngx_kqueue_module.c.ngx_kqueue_conf_t,,event\modules\ngx_kqueue_module.c,struct ngx_kqueue_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7653,74839,ngx_kqueue,2,event\modules\ngx_kqueue_module.c.ngx_kqueue,,event\modules\ngx_kqueue_module.c,int ngx_kqueue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7654,74845,change_list,2,event\modules\ngx_kqueue_module.c.change_list,,event\modules\ngx_kqueue_module.c,struct kevent* change_list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7655,74847,event_list,2,event\modules\ngx_kqueue_module.c.event_list,,event\modules\ngx_kqueue_module.c,struct kevent* event_list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7656,74848,max_changes,2,event\modules\ngx_kqueue_module.c.max_changes,,event\modules\ngx_kqueue_module.c,ngx_uint_t max_changes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7657,74849,nchanges,2,event\modules\ngx_kqueue_module.c.nchanges,,event\modules\ngx_kqueue_module.c,ngx_uint_t nchanges,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7658,74850,nevents,2,event\modules\ngx_kqueue_module.c.nevents,,event\modules\ngx_kqueue_module.c,ngx_uint_t nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7659,74851,kqueue_name,2,event\modules\ngx_kqueue_module.c.kqueue_name,,event\modules\ngx_kqueue_module.c,ngx_str_t kqueue_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7660,74856,ngx_kqueue_commands,2,event\modules\ngx_kqueue_module.c.ngx_kqueue_commands,,event\modules\ngx_kqueue_module.c,static ngx_command_t[] ngx_kqueue_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7661,74885,ngx_kqueue_module_ctx,2,event\modules\ngx_kqueue_module.c.ngx_kqueue_module_ctx,,event\modules\ngx_kqueue_module.c,ngx_event_module_t ngx_kqueue_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7662,74904,ngx_kqueue_module,2,event\modules\ngx_kqueue_module.c.ngx_kqueue_module,,event\modules\ngx_kqueue_module.c,ngx_module_t ngx_kqueue_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7663,76018,event_list,2,event\modules\ngx_poll_module.c.event_list,,event\modules\ngx_poll_module.c,struct pollfd* event_list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7664,76019,nevents,2,event\modules\ngx_poll_module.c.nevents,,event\modules\ngx_poll_module.c,ngx_uint_t nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7665,76020,poll_name,2,event\modules\ngx_poll_module.c.poll_name,,event\modules\ngx_poll_module.c,ngx_str_t poll_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7666,76025,ngx_poll_module_ctx,2,event\modules\ngx_poll_module.c.ngx_poll_module_ctx,,event\modules\ngx_poll_module.c,ngx_event_module_t ngx_poll_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7667,76044,ngx_poll_module,2,event\modules\ngx_poll_module.c.ngx_poll_module,,event\modules\ngx_poll_module.c,ngx_module_t ngx_poll_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7668,76954,master_read_fd_set,2,event\modules\ngx_select_module.c.master_read_fd_set,,event\modules\ngx_select_module.c,fd_set master_read_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7669,76955,master_write_fd_set,2,event\modules\ngx_select_module.c.master_write_fd_set,,event\modules\ngx_select_module.c,fd_set master_write_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7670,76956,work_read_fd_set,2,event\modules\ngx_select_module.c.work_read_fd_set,,event\modules\ngx_select_module.c,fd_set work_read_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7671,76957,work_write_fd_set,2,event\modules\ngx_select_module.c.work_write_fd_set,,event\modules\ngx_select_module.c,fd_set work_write_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7672,76958,max_fd,2,event\modules\ngx_select_module.c.max_fd,,event\modules\ngx_select_module.c,ngx_int_t max_fd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7673,76959,nevents,2,event\modules\ngx_select_module.c.nevents,,event\modules\ngx_select_module.c,ngx_uint_t nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7674,76960,event_index,2,event\modules\ngx_select_module.c.event_index,,event\modules\ngx_select_module.c,ngx_event_t** event_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7675,76961,select_name,2,event\modules\ngx_select_module.c.select_name,,event\modules\ngx_select_module.c,ngx_str_t select_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7676,76966,ngx_select_module_ctx,2,event\modules\ngx_select_module.c.ngx_select_module_ctx,,event\modules\ngx_select_module.c,ngx_event_module_t ngx_select_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7677,76985,ngx_select_module,2,event\modules\ngx_select_module.c.ngx_select_module,,event\modules\ngx_select_module.c,ngx_module_t ngx_select_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7678,77898,event_list,2,event\modules\ngx_win32_poll_module.c.event_list,,event\modules\ngx_win32_poll_module.c,struct pollfd* event_list,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7679,77899,event_index,2,event\modules\ngx_win32_poll_module.c.event_index,,event\modules\ngx_win32_poll_module.c,ngx_connection_t** event_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7680,77900,nevents,2,event\modules\ngx_win32_poll_module.c.nevents,,event\modules\ngx_win32_poll_module.c,ngx_uint_t nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7681,77901,poll_name,2,event\modules\ngx_win32_poll_module.c.poll_name,,event\modules\ngx_win32_poll_module.c,ngx_str_t poll_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7682,77906,ngx_poll_module_ctx,2,event\modules\ngx_win32_poll_module.c.ngx_poll_module_ctx,,event\modules\ngx_win32_poll_module.c,ngx_event_module_t ngx_poll_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7683,77925,ngx_poll_module,2,event\modules\ngx_win32_poll_module.c.ngx_poll_module,,event\modules\ngx_win32_poll_module.c,ngx_module_t ngx_poll_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7684,78859,master_read_fd_set,2,event\modules\ngx_win32_select_module.c.master_read_fd_set,,event\modules\ngx_win32_select_module.c,fd_set master_read_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7685,78860,master_write_fd_set,2,event\modules\ngx_win32_select_module.c.master_write_fd_set,,event\modules\ngx_win32_select_module.c,fd_set master_write_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7686,78861,work_read_fd_set,2,event\modules\ngx_win32_select_module.c.work_read_fd_set,,event\modules\ngx_win32_select_module.c,fd_set work_read_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7687,78862,work_write_fd_set,2,event\modules\ngx_win32_select_module.c.work_write_fd_set,,event\modules\ngx_win32_select_module.c,fd_set work_write_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7688,78863,work_except_fd_set,2,event\modules\ngx_win32_select_module.c.work_except_fd_set,,event\modules\ngx_win32_select_module.c,fd_set work_except_fd_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7689,78864,max_read,2,event\modules\ngx_win32_select_module.c.max_read,,event\modules\ngx_win32_select_module.c,ngx_uint_t max_read,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7690,78865,max_write,2,event\modules\ngx_win32_select_module.c.max_write,,event\modules\ngx_win32_select_module.c,ngx_uint_t max_write,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7691,78866,nevents,2,event\modules\ngx_win32_select_module.c.nevents,,event\modules\ngx_win32_select_module.c,ngx_uint_t nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7692,78867,event_index,2,event\modules\ngx_win32_select_module.c.event_index,,event\modules\ngx_win32_select_module.c,ngx_event_t** event_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7693,78868,select_name,2,event\modules\ngx_win32_select_module.c.select_name,,event\modules\ngx_win32_select_module.c,ngx_str_t select_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7694,78873,ngx_select_module_ctx,2,event\modules\ngx_win32_select_module.c.ngx_select_module_ctx,,event\modules\ngx_win32_select_module.c,ngx_event_module_t ngx_select_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7695,78892,ngx_select_module,2,event\modules\ngx_win32_select_module.c.ngx_select_module,,event\modules\ngx_win32_select_module.c,ngx_module_t ngx_select_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7696,79724,ngx_kqueue_module,2,event\ngx_event.c.ngx_kqueue_module,,event\ngx_event.c,ngx_module_t ngx_kqueue_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7697,79725,ngx_eventport_module,2,event\ngx_event.c.ngx_eventport_module,,event\ngx_event.c,ngx_module_t ngx_eventport_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7698,79726,ngx_devpoll_module,2,event\ngx_event.c.ngx_devpoll_module,,event\ngx_event.c,ngx_module_t ngx_devpoll_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7699,79727,ngx_epoll_module,2,event\ngx_event.c.ngx_epoll_module,,event\ngx_event.c,ngx_module_t ngx_epoll_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7700,79728,ngx_select_module,2,event\ngx_event.c.ngx_select_module,,event\ngx_event.c,ngx_module_t ngx_select_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7701,79784,ngx_timer_resolution,2,event\ngx_event.c.ngx_timer_resolution,,event\ngx_event.c,ngx_uint_t ngx_timer_resolution,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7702,79785,ngx_event_timer_alarm,2,event\ngx_event.c.ngx_event_timer_alarm,,event\ngx_event.c,sig_atomic_t ngx_event_timer_alarm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7703,79786,ngx_event_max_module,2,event\ngx_event.c.ngx_event_max_module,,event\ngx_event.c,ngx_uint_t ngx_event_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7704,79787,ngx_event_flags,2,event\ngx_event.c.ngx_event_flags,,event\ngx_event.c,ngx_uint_t ngx_event_flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7705,79788,ngx_event_actions,2,event\ngx_event.c.ngx_event_actions,,event\ngx_event.c,ngx_event_actions_t ngx_event_actions,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7706,79789,connection_counter,2,event\ngx_event.c.connection_counter,,event\ngx_event.c,ngx_atomic_t connection_counter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7707,79793,ngx_connection_counter,2,event\ngx_event.c.ngx_connection_counter,,event\ngx_event.c,ngx_atomic_t* ngx_connection_counter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7708,79798,ngx_accept_mutex_ptr,2,event\ngx_event.c.ngx_accept_mutex_ptr,,event\ngx_event.c,ngx_atomic_t* ngx_accept_mutex_ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7709,79799,ngx_accept_mutex,2,event\ngx_event.c.ngx_accept_mutex,,event\ngx_event.c,ngx_shmtx_t ngx_accept_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7710,79800,ngx_use_accept_mutex,2,event\ngx_event.c.ngx_use_accept_mutex,,event\ngx_event.c,ngx_uint_t ngx_use_accept_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7711,79801,ngx_accept_events,2,event\ngx_event.c.ngx_accept_events,,event\ngx_event.c,ngx_uint_t ngx_accept_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7712,79802,ngx_accept_mutex_held,2,event\ngx_event.c.ngx_accept_mutex_held,,event\ngx_event.c,ngx_uint_t ngx_accept_mutex_held,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7713,79803,ngx_accept_mutex_delay,2,event\ngx_event.c.ngx_accept_mutex_delay,,event\ngx_event.c,ngx_msec_t ngx_accept_mutex_delay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7714,79804,ngx_accept_disabled,2,event\ngx_event.c.ngx_accept_disabled,,event\ngx_event.c,ngx_int_t ngx_accept_disabled,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7715,79805,ngx_events_commands,2,event\ngx_event.c.ngx_events_commands,,event\ngx_event.c,static ngx_command_t[] ngx_events_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7716,79822,ngx_events_module_ctx,2,event\ngx_event.c.ngx_events_module_ctx,,event\ngx_event.c,ngx_core_module_t ngx_events_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7717,79830,ngx_events_module,2,event\ngx_event.c.ngx_events_module,,event\ngx_event.c,ngx_module_t ngx_events_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7718,79847,event_core_name,2,event\ngx_event.c.event_core_name,,event\ngx_event.c,ngx_str_t event_core_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7719,79852,ngx_event_core_commands,2,event\ngx_event.c.ngx_event_core_commands,,event\ngx_event.c,static ngx_command_t[] ngx_event_core_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7720,79923,ngx_event_core_module_ctx,2,event\ngx_event.c.ngx_event_core_module_ctx,,event\ngx_event.c,ngx_event_module_t ngx_event_core_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7721,79942,ngx_event_core_module,2,event\ngx_event.c.ngx_event_core_module,,event\ngx_event.c,ngx_module_t ngx_event_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7722,82283,ngx_event_actions_t,2,event\ngx_event.h.ngx_event_actions_t,,event\ngx_event.h,struct ngx_event_actions_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7723,82284,ngx_event_actions,2,event\ngx_event.h.ngx_event_actions,,event\ngx_event.h,ngx_event_actions_t ngx_event_actions,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7724,82285,ngx_io,2,event\ngx_event.h.ngx_io,,event\ngx_event.h,ngx_os_io_t ngx_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7725,82294,ngx_event_conf_t,2,event\ngx_event.h.ngx_event_conf_t,,event\ngx_event.h,struct ngx_event_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7726,82309,ngx_event_module_t,2,event\ngx_event.h.ngx_event_module_t,,event\ngx_event.h,struct ngx_event_module_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7727,82310,ngx_connection_counter,2,event\ngx_event.h.ngx_connection_counter,,event\ngx_event.h,ngx_atomic_t* ngx_connection_counter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7728,82311,ngx_accept_mutex_ptr,2,event\ngx_event.h.ngx_accept_mutex_ptr,,event\ngx_event.h,ngx_atomic_t* ngx_accept_mutex_ptr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7729,82312,ngx_accept_mutex,2,event\ngx_event.h.ngx_accept_mutex,,event\ngx_event.h,ngx_shmtx_t ngx_accept_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7730,82313,ngx_use_accept_mutex,2,event\ngx_event.h.ngx_use_accept_mutex,,event\ngx_event.h,ngx_uint_t ngx_use_accept_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7731,82314,ngx_accept_events,2,event\ngx_event.h.ngx_accept_events,,event\ngx_event.h,ngx_uint_t ngx_accept_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7732,82315,ngx_accept_mutex_held,2,event\ngx_event.h.ngx_accept_mutex_held,,event\ngx_event.h,ngx_uint_t ngx_accept_mutex_held,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7733,82316,ngx_accept_mutex_delay,2,event\ngx_event.h.ngx_accept_mutex_delay,,event\ngx_event.h,ngx_msec_t ngx_accept_mutex_delay,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7734,82317,ngx_accept_disabled,2,event\ngx_event.h.ngx_accept_disabled,,event\ngx_event.h,ngx_int_t ngx_accept_disabled,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7735,82318,ngx_event_timer_alarm,2,event\ngx_event.h.ngx_event_timer_alarm,,event\ngx_event.h,sig_atomic_t ngx_event_timer_alarm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7736,82319,ngx_event_flags,2,event\ngx_event.h.ngx_event_flags,,event\ngx_event.h,ngx_uint_t ngx_event_flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7737,82320,ngx_events_module,2,event\ngx_event.h.ngx_events_module,,event\ngx_event.h,ngx_module_t ngx_events_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7738,82321,ngx_event_core_module,2,event\ngx_event.h.ngx_event_core_module,,event\ngx_event.h,ngx_module_t ngx_event_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7739,84556,connect_lock,2,event\ngx_event_connectex.c.connect_lock,,event\ngx_event_connectex.c,CRITICAL_SECTION connect_lock,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
7740,84557,nconnects,2,event\ngx_event_connectex.c.nconnects,,event\ngx_event_connectex.c,static int nconnects,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7741,84558,pending_connects,2,event\ngx_event_connectex.c.pending_connects,,event\ngx_event_connectex.c,static ngx_connection_t[10] pending_connects,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7742,84563,pending_connect_event,2,event\ngx_event_connectex.c.pending_connect_event,,event\ngx_event_connectex.c,HANDLE pending_connect_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
7743,84564,nevents,2,event\ngx_event_connectex.c.nevents,,event\ngx_event_connectex.c,int nevents,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,19,0,1,1,0,0,,0,0,0,0,0,
7744,84568,events,2,event\ngx_event_connectex.c.events,,event\ngx_event_connectex.c,WSAEVENT[] events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,12,0,1,1,0,0,,0,0,0,0,0,
7745,84573,conn,2,event\ngx_event_connectex.c.conn,,event\ngx_event_connectex.c,ngx_connection_t ** [] conn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
7746,85023,ngx_openssl_conf_t,2,event\ngx_event_openssl.c.ngx_openssl_conf_t,,event\ngx_event_openssl.c,struct ngx_openssl_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7747,85174,ngx_openssl_commands,2,event\ngx_event_openssl.c.ngx_openssl_commands,,event\ngx_event_openssl.c,static ngx_command_t[] ngx_openssl_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7748,85191,ngx_openssl_module_ctx,2,event\ngx_event_openssl.c.ngx_openssl_module_ctx,,event\ngx_event_openssl.c,ngx_core_module_t ngx_openssl_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7749,85199,ngx_openssl_module,2,event\ngx_event_openssl.c.ngx_openssl_module,,event\ngx_event_openssl.c,ngx_module_t ngx_openssl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7750,85216,ngx_ssl_connection_index,2,event\ngx_event_openssl.c.ngx_ssl_connection_index,,event\ngx_event_openssl.c,int ngx_ssl_connection_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7751,85217,ngx_ssl_server_conf_index,2,event\ngx_event_openssl.c.ngx_ssl_server_conf_index,,event\ngx_event_openssl.c,int ngx_ssl_server_conf_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7752,85218,ngx_ssl_session_cache_index,2,event\ngx_event_openssl.c.ngx_ssl_session_cache_index,,event\ngx_event_openssl.c,int ngx_ssl_session_cache_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7753,85219,ngx_ssl_session_ticket_keys_index,2,event\ngx_event_openssl.c.ngx_ssl_session_ticket_keys_index,,event\ngx_event_openssl.c,int ngx_ssl_session_ticket_keys_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7754,85220,ngx_ssl_ocsp_index,2,event\ngx_event_openssl.c.ngx_ssl_ocsp_index,,event\ngx_event_openssl.c,int ngx_ssl_ocsp_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7755,85221,ngx_ssl_certificate_index,2,event\ngx_event_openssl.c.ngx_ssl_certificate_index,,event\ngx_event_openssl.c,int ngx_ssl_certificate_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
7756,85222,ngx_ssl_next_certificate_index,2,event\ngx_event_openssl.c.ngx_ssl_next_certificate_index,,event\ngx_event_openssl.c,int ngx_ssl_next_certificate_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7757,85223,ngx_ssl_certificate_name_index,2,event\ngx_event_openssl.c.ngx_ssl_certificate_name_index,,event\ngx_event_openssl.c,int ngx_ssl_certificate_name_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7758,85224,ngx_ssl_stapling_index,2,event\ngx_event_openssl.c.ngx_ssl_stapling_index,,event\ngx_event_openssl.c,int ngx_ssl_stapling_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7759,90250,ngx_cdecl,2,event\ngx_event_openssl.c.ngx_cdecl,,event\ngx_event_openssl.c,void ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7760,94087,ngx_ssl_session_cache_t,2,event\ngx_event_openssl.h.ngx_ssl_session_cache_t,,event\ngx_event_openssl.h,struct ngx_ssl_session_cache_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7761,94522,ngx_ssl_connection_index,2,event\ngx_event_openssl.h.ngx_ssl_connection_index,,event\ngx_event_openssl.h,extern int ngx_ssl_connection_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7762,94523,ngx_ssl_server_conf_index,2,event\ngx_event_openssl.h.ngx_ssl_server_conf_index,,event\ngx_event_openssl.h,extern int ngx_ssl_server_conf_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7763,94524,ngx_ssl_session_cache_index,2,event\ngx_event_openssl.h.ngx_ssl_session_cache_index,,event\ngx_event_openssl.h,extern int ngx_ssl_session_cache_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7764,94525,ngx_ssl_session_ticket_keys_index,2,event\ngx_event_openssl.h.ngx_ssl_session_ticket_keys_index,,event\ngx_event_openssl.h,extern int ngx_ssl_session_ticket_keys_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7765,94526,ngx_ssl_ocsp_index,2,event\ngx_event_openssl.h.ngx_ssl_ocsp_index,,event\ngx_event_openssl.h,extern int ngx_ssl_ocsp_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7766,94527,ngx_ssl_certificate_index,2,event\ngx_event_openssl.h.ngx_ssl_certificate_index,,event\ngx_event_openssl.h,extern int ngx_ssl_certificate_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7767,94528,ngx_ssl_next_certificate_index,2,event\ngx_event_openssl.h.ngx_ssl_next_certificate_index,,event\ngx_event_openssl.h,extern int ngx_ssl_next_certificate_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7768,94529,ngx_ssl_certificate_name_index,2,event\ngx_event_openssl.h.ngx_ssl_certificate_name_index,,event\ngx_event_openssl.h,extern int ngx_ssl_certificate_name_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7769,94530,ngx_ssl_stapling_index,2,event\ngx_event_openssl.h.ngx_ssl_stapling_index,,event\ngx_event_openssl.h,extern int ngx_ssl_stapling_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7770,97578,ngx_posted_accept_events,2,event\ngx_event_posted.c.ngx_posted_accept_events,,event\ngx_event_posted.c,ngx_queue_t ngx_posted_accept_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7771,97579,ngx_posted_next_events,2,event\ngx_event_posted.c.ngx_posted_next_events,,event\ngx_event_posted.c,ngx_queue_t ngx_posted_next_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7772,97580,ngx_posted_events,2,event\ngx_event_posted.c.ngx_posted_events,,event\ngx_event_posted.c,ngx_queue_t ngx_posted_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7773,97698,ngx_posted_accept_events,2,event\ngx_event_posted.h.ngx_posted_accept_events,,event\ngx_event_posted.h,ngx_queue_t ngx_posted_accept_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7774,97699,ngx_posted_next_events,2,event\ngx_event_posted.h.ngx_posted_next_events,,event\ngx_event_posted.h,ngx_queue_t ngx_posted_next_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7775,97700,ngx_posted_events,2,event\ngx_event_posted.h.ngx_posted_events,,event\ngx_event_posted.h,ngx_queue_t ngx_posted_events,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7776,97712,ngx_event_timer_rbtree,2,event\ngx_event_timer.c.ngx_event_timer_rbtree,,event\ngx_event_timer.c,ngx_rbtree_t ngx_event_timer_rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
7777,97713,ngx_event_timer_sentinel,2,event\ngx_event_timer.c.ngx_event_timer_sentinel,,event\ngx_event_timer.c,ngx_rbtree_node_t ngx_event_timer_sentinel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7778,97953,ngx_event_timer_rbtree,2,event\ngx_event_timer.h.ngx_event_timer_rbtree,,event\ngx_event_timer.h,ngx_rbtree_t ngx_event_timer_rbtree,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7779,99237,ngx_http_access_rule_t,2,http\modules\ngx_http_access_module.c.ngx_http_access_rule_t,,http\modules\ngx_http_access_module.c,struct ngx_http_access_rule_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7780,99242,ngx_http_access_loc_conf_t,2,http\modules\ngx_http_access_module.c.ngx_http_access_loc_conf_t,,http\modules\ngx_http_access_module.c,struct ngx_http_access_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7781,99285,ngx_http_access_commands,2,http\modules\ngx_http_access_module.c.ngx_http_access_commands,,http\modules\ngx_http_access_module.c,static ngx_command_t[] ngx_http_access_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7782,99322,ngx_http_access_module_ctx,2,http\modules\ngx_http_access_module.c.ngx_http_access_module_ctx,,http\modules\ngx_http_access_module.c,ngx_http_module_t ngx_http_access_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7783,99334,ngx_http_access_module,2,http\modules\ngx_http_access_module.c.ngx_http_access_module,,http\modules\ngx_http_access_module.c,ngx_module_t ngx_http_access_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7784,99800,ngx_http_addition_conf_t,2,http\modules\ngx_http_addition_filter_module.c.ngx_http_addition_conf_t,,http\modules\ngx_http_addition_filter_module.c,struct ngx_http_addition_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7785,99803,ngx_http_addition_ctx_t,2,http\modules\ngx_http_addition_filter_module.c.ngx_http_addition_ctx_t,,http\modules\ngx_http_addition_filter_module.c,struct ngx_http_addition_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7786,99821,ngx_http_addition_commands,2,http\modules\ngx_http_addition_filter_module.c.ngx_http_addition_commands,,http\modules\ngx_http_addition_filter_module.c,static ngx_command_t[] ngx_http_addition_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7787,99877,ngx_http_addition_filter_module_ctx,2,http\modules\ngx_http_addition_filter_module.c.ngx_http_addition_filter_module_ctx,,http\modules\ngx_http_addition_filter_module.c,ngx_http_module_t ngx_http_addition_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7788,99889,ngx_http_addition_filter_module,2,http\modules\ngx_http_addition_filter_module.c.ngx_http_addition_filter_module,,http\modules\ngx_http_addition_filter_module.c,ngx_module_t ngx_http_addition_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
7789,99906,ngx_http_next_header_filter,2,http\modules\ngx_http_addition_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_addition_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7790,99907,ngx_http_next_body_filter,2,http\modules\ngx_http_addition_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_addition_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7791,100310,ngx_http_auth_basic_loc_conf_t,2,http\modules\ngx_http_auth_basic_module.c.ngx_http_auth_basic_loc_conf_t,,http\modules\ngx_http_auth_basic_module.c,struct ngx_http_auth_basic_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7792,100353,ngx_http_auth_basic_commands,2,http\modules\ngx_http_auth_basic_module.c.ngx_http_auth_basic_commands,,http\modules\ngx_http_auth_basic_module.c,static ngx_command_t[] ngx_http_auth_basic_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7793,100394,ngx_http_auth_basic_module_ctx,2,http\modules\ngx_http_auth_basic_module.c.ngx_http_auth_basic_module_ctx,,http\modules\ngx_http_auth_basic_module.c,ngx_http_module_t ngx_http_auth_basic_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7794,100406,ngx_http_auth_basic_module,2,http\modules\ngx_http_auth_basic_module.c.ngx_http_auth_basic_module,,http\modules\ngx_http_auth_basic_module.c,ngx_module_t ngx_http_auth_basic_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7795,101377,ngx_http_auth_request_conf_t,2,http\modules\ngx_http_auth_request_module.c.ngx_http_auth_request_conf_t,,http\modules\ngx_http_auth_request_module.c,struct ngx_http_auth_request_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7796,101382,ngx_http_auth_request_ctx_t,2,http\modules\ngx_http_auth_request_module.c.ngx_http_auth_request_ctx_t,,http\modules\ngx_http_auth_request_module.c,struct ngx_http_auth_request_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7797,101387,ngx_http_auth_request_variable_t,2,http\modules\ngx_http_auth_request_module.c.ngx_http_auth_request_variable_t,,http\modules\ngx_http_auth_request_module.c,struct ngx_http_auth_request_variable_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7798,101445,ngx_http_auth_request_commands,2,http\modules\ngx_http_auth_request_module.c.ngx_http_auth_request_commands,,http\modules\ngx_http_auth_request_module.c,static ngx_command_t[] ngx_http_auth_request_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7799,101478,ngx_http_auth_request_module_ctx,2,http\modules\ngx_http_auth_request_module.c.ngx_http_auth_request_module_ctx,,http\modules\ngx_http_auth_request_module.c,ngx_http_module_t ngx_http_auth_request_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7800,101490,ngx_http_auth_request_module,2,http\modules\ngx_http_auth_request_module.c.ngx_http_auth_request_module,,http\modules\ngx_http_auth_request_module.c,ngx_module_t ngx_http_auth_request_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7801,102353,ngx_http_autoindex_entry_t,2,http\modules\ngx_http_autoindex_module.c.ngx_http_autoindex_entry_t,,http\modules\ngx_http_autoindex_module.c,struct ngx_http_autoindex_entry_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7802,102359,ngx_http_autoindex_loc_conf_t,2,http\modules\ngx_http_autoindex_module.c.ngx_http_autoindex_loc_conf_t,,http\modules\ngx_http_autoindex_module.c,struct ngx_http_autoindex_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7803,102410,ngx_http_autoindex_format,2,http\modules\ngx_http_autoindex_module.c.ngx_http_autoindex_format,,http\modules\ngx_http_autoindex_module.c,static ngx_conf_enum_t[] ngx_http_autoindex_format,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7804,102441,ngx_http_autoindex_commands,2,http\modules\ngx_http_autoindex_module.c.ngx_http_autoindex_commands,,http\modules\ngx_http_autoindex_module.c,static ngx_command_t[] ngx_http_autoindex_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7805,102511,ngx_http_autoindex_module_ctx,2,http\modules\ngx_http_autoindex_module.c.ngx_http_autoindex_module_ctx,,http\modules\ngx_http_autoindex_module.c,ngx_http_module_t ngx_http_autoindex_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7806,102523,ngx_http_autoindex_module,2,http\modules\ngx_http_autoindex_module.c.ngx_http_autoindex_module,,http\modules\ngx_http_autoindex_module.c,ngx_module_t ngx_http_autoindex_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7807,105380,ngx_libc_cdecl,2,http\modules\ngx_http_autoindex_module.c.ngx_libc_cdecl,,http\modules\ngx_http_autoindex_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7808,105614,ngx_http_modern_browser_mask_t,2,http\modules\ngx_http_browser_module.c.ngx_http_modern_browser_mask_t,,http\modules\ngx_http_browser_module.c,struct ngx_http_modern_browser_mask_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7809,105626,ngx_http_modern_browser_t,2,http\modules\ngx_http_browser_module.c.ngx_http_modern_browser_t,,http\modules\ngx_http_browser_module.c,struct ngx_http_modern_browser_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7810,105634,ngx_http_browser_conf_t,2,http\modules\ngx_http_browser_module.c.ngx_http_browser_conf_t,,http\modules\ngx_http_browser_module.c,struct ngx_http_browser_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7811,105701,ngx_http_browser_commands,2,http\modules\ngx_http_browser_module.c.ngx_http_browser_commands,,http\modules\ngx_http_browser_module.c,static ngx_command_t[] ngx_http_browser_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7812,105762,ngx_http_browser_module_ctx,2,http\modules\ngx_http_browser_module.c.ngx_http_browser_module_ctx,,http\modules\ngx_http_browser_module.c,ngx_http_module_t ngx_http_browser_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7813,105774,ngx_http_browser_module,2,http\modules\ngx_http_browser_module.c.ngx_http_browser_module,,http\modules\ngx_http_browser_module.c,ngx_module_t ngx_http_browser_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7814,105791,ngx_http_modern_browser_masks,2,http\modules\ngx_http_browser_module.c.ngx_http_modern_browser_masks,,http\modules\ngx_http_browser_module.c,static ngx_http_modern_browser_mask_t[] ngx_http_modern_browser_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7815,105852,ngx_http_browser_vars,2,http\modules\ngx_http_browser_module.c.ngx_http_browser_vars,,http\modules\ngx_http_browser_module.c,static ngx_http_variable_t[] ngx_http_browser_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7816,106724,ngx_libc_cdecl,2,http\modules\ngx_http_browser_module.c.ngx_libc_cdecl,,http\modules\ngx_http_browser_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7817,107276,ngx_http_charset_t,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_t,,http\modules\ngx_http_charset_filter_module.c,struct ngx_http_charset_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7818,107280,ngx_http_charset_recode_t,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_recode_t,,http\modules\ngx_http_charset_filter_module.c,struct ngx_http_charset_recode_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7819,107286,ngx_http_charset_tables_t,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_tables_t,,http\modules\ngx_http_charset_filter_module.c,struct ngx_http_charset_tables_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7820,107291,ngx_http_charset_main_conf_t,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_main_conf_t,,http\modules\ngx_http_charset_filter_module.c,struct ngx_http_charset_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7821,107298,ngx_http_charset_loc_conf_t,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_loc_conf_t,,http\modules\ngx_http_charset_filter_module.c,struct ngx_http_charset_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7822,107319,ngx_http_charset_ctx_t,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_ctx_t,,http\modules\ngx_http_charset_filter_module.c,struct ngx_http_charset_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7823,107324,ngx_http_charset_conf_ctx_t,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_conf_ctx_t,,http\modules\ngx_http_charset_filter_module.c,struct ngx_http_charset_conf_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7824,107440,ngx_http_charset_default_types,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_default_types,,http\modules\ngx_http_charset_filter_module.c,static ngx_str_t[] ngx_http_charset_default_types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7825,107457,ngx_http_charset_filter_commands,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_filter_commands,,http\modules\ngx_http_charset_filter_module.c,static ngx_command_t[] ngx_http_charset_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7826,107547,ngx_http_charset_filter_module_ctx,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_filter_module_ctx,,http\modules\ngx_http_charset_filter_module.c,ngx_http_module_t ngx_http_charset_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7827,107559,ngx_http_charset_filter_module,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_charset_filter_module,,http\modules\ngx_http_charset_filter_module.c,ngx_module_t ngx_http_charset_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7828,107576,ngx_http_next_header_filter,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_charset_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7829,107577,ngx_http_next_body_filter,2,http\modules\ngx_http_charset_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_charset_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7830,111941,ngx_http_chunked_filter_ctx_t,2,http\modules\ngx_http_chunked_filter_module.c.ngx_http_chunked_filter_ctx_t,,http\modules\ngx_http_chunked_filter_module.c,struct ngx_http_chunked_filter_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7831,111953,ngx_http_chunked_filter_module_ctx,2,http\modules\ngx_http_chunked_filter_module.c.ngx_http_chunked_filter_module_ctx,,http\modules\ngx_http_chunked_filter_module.c,ngx_http_module_t ngx_http_chunked_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7832,111965,ngx_http_chunked_filter_module,2,http\modules\ngx_http_chunked_filter_module.c.ngx_http_chunked_filter_module,,http\modules\ngx_http_chunked_filter_module.c,ngx_module_t ngx_http_chunked_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7833,111982,ngx_http_next_header_filter,2,http\modules\ngx_http_chunked_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_chunked_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7834,111983,ngx_http_next_body_filter,2,http\modules\ngx_http_chunked_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_chunked_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7835,112902,ngx_http_dav_loc_conf_t,2,http\modules\ngx_http_dav_module.c.ngx_http_dav_loc_conf_t,,http\modules\ngx_http_dav_module.c,struct ngx_http_dav_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7836,112906,ngx_http_dav_copy_ctx_t,2,http\modules\ngx_http_dav_module.c.ngx_http_dav_copy_ctx_t,,http\modules\ngx_http_dav_module.c,struct ngx_http_dav_copy_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7837,113013,ngx_http_dav_methods_mask,2,http\modules\ngx_http_dav_module.c.ngx_http_dav_methods_mask,,http\modules\ngx_http_dav_module.c,static ngx_conf_bitmask_t[] ngx_http_dav_methods_mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7838,113046,ngx_http_dav_commands,2,http\modules\ngx_http_dav_module.c.ngx_http_dav_commands,,http\modules\ngx_http_dav_module.c,static ngx_command_t[] ngx_http_dav_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7839,113116,ngx_http_dav_module_ctx,2,http\modules\ngx_http_dav_module.c.ngx_http_dav_module_ctx,,http\modules\ngx_http_dav_module.c,ngx_http_module_t ngx_http_dav_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7840,113128,ngx_http_dav_module,2,http\modules\ngx_http_dav_module.c.ngx_http_dav_module,,http\modules\ngx_http_dav_module.c,ngx_module_t ngx_http_dav_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7841,116070,ngx_http_degradation_main_conf_t,2,http\modules\ngx_http_degradation_module.c.ngx_http_degradation_main_conf_t,,http\modules\ngx_http_degradation_module.c,struct ngx_http_degradation_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7842,116073,ngx_http_degradation_loc_conf_t,2,http\modules\ngx_http_degradation_module.c.ngx_http_degradation_loc_conf_t,,http\modules\ngx_http_degradation_module.c,struct ngx_http_degradation_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7843,116074,ngx_http_degrade,2,http\modules\ngx_http_degradation_module.c.ngx_http_degrade,,http\modules\ngx_http_degradation_module.c,static ngx_conf_enum_t[] ngx_http_degrade,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7844,116118,ngx_http_degradation_commands,2,http\modules\ngx_http_degradation_module.c.ngx_http_degradation_commands,,http\modules\ngx_http_degradation_module.c,static ngx_command_t[] ngx_http_degradation_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7845,116150,ngx_http_degradation_module_ctx,2,http\modules\ngx_http_degradation_module.c.ngx_http_degradation_module_ctx,,http\modules\ngx_http_degradation_module.c,ngx_http_module_t ngx_http_degradation_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7846,116162,ngx_http_degradation_module,2,http\modules\ngx_http_degradation_module.c.ngx_http_degradation_module,,http\modules\ngx_http_degradation_module.c,ngx_module_t ngx_http_degradation_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7847,116506,ngx_http_empty_gif_commands,2,http\modules\ngx_http_empty_gif_module.c.ngx_http_empty_gif_commands,,http\modules\ngx_http_empty_gif_module.c,static ngx_command_t[] ngx_http_empty_gif_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7848,116521,ngx_empty_gif,2,http\modules\ngx_http_empty_gif_module.c.ngx_empty_gif,,http\modules\ngx_http_empty_gif_module.c,static u_char[] ngx_empty_gif,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7849,116568,ngx_http_empty_gif_module_ctx,2,http\modules\ngx_http_empty_gif_module.c.ngx_http_empty_gif_module_ctx,,http\modules\ngx_http_empty_gif_module.c,ngx_http_module_t ngx_http_empty_gif_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7850,116580,ngx_http_empty_gif_module,2,http\modules\ngx_http_empty_gif_module.c.ngx_http_empty_gif_module,,http\modules\ngx_http_empty_gif_module.c,ngx_module_t ngx_http_empty_gif_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7851,116597,ngx_http_gif_type,2,http\modules\ngx_http_empty_gif_module.c.ngx_http_gif_type,,http\modules\ngx_http_empty_gif_module.c,ngx_str_t ngx_http_gif_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7852,116688,ngx_http_fastcgi_main_conf_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_main_conf_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7853,116695,ngx_http_fastcgi_params_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_params_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_params_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7854,116709,ngx_http_fastcgi_loc_conf_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_loc_conf_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7855,116728,ngx_http_fastcgi_state_e,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_state_e,,http\modules\ngx_http_fastcgi_module.c,enum ngx_http_fastcgi_state_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7856,116732,ngx_http_fastcgi_split_part_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_split_part_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_split_part_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7857,116750,ngx_http_fastcgi_ctx_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_ctx_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7858,116760,ngx_http_fastcgi_header_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_header_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7859,116772,ngx_http_fastcgi_begin_request_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_begin_request_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_begin_request_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7860,116778,ngx_http_fastcgi_header_small_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_header_small_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_header_small_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7861,116783,ngx_http_fastcgi_request_start_t,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_request_start_t,,http\modules\ngx_http_fastcgi_module.c,struct ngx_http_fastcgi_request_start_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7862,116923,ngx_http_fastcgi_lowat_post,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_lowat_post,,http\modules\ngx_http_fastcgi_module.c,ngx_conf_post_t ngx_http_fastcgi_lowat_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7863,116928,ngx_http_fastcgi_next_upstream_masks,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_next_upstream_masks,,http\modules\ngx_http_fastcgi_module.c,static ngx_conf_bitmask_t[] ngx_http_fastcgi_next_upstream_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7864,116979,ngx_http_fastcgi_module,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_module,,http\modules\ngx_http_fastcgi_module.c,ngx_module_t ngx_http_fastcgi_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7865,116980,ngx_http_fastcgi_commands,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_commands,,http\modules\ngx_http_fastcgi_module.c,static ngx_command_t[] ngx_http_fastcgi_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7866,117578,ngx_http_fastcgi_module_ctx,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_module_ctx,,http\modules\ngx_http_fastcgi_module.c,ngx_http_module_t ngx_http_fastcgi_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7867,117590,ngx_http_fastcgi_module,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_module,,http\modules\ngx_http_fastcgi_module.c,ngx_module_t ngx_http_fastcgi_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7868,117607,ngx_http_fastcgi_request_start,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_request_start,,http\modules\ngx_http_fastcgi_module.c,ngx_http_fastcgi_request_start_t ngx_http_fastcgi_request_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7869,117642,ngx_http_fastcgi_vars,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_vars,,http\modules\ngx_http_fastcgi_module.c,static ngx_http_variable_t[] ngx_http_fastcgi_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7870,117667,ngx_http_fastcgi_hide_headers,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_hide_headers,,http\modules\ngx_http_fastcgi_module.c,static ngx_str_t[] ngx_http_fastcgi_hide_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7871,117684,ngx_http_fastcgi_temp_path,2,http\modules\ngx_http_fastcgi_module.c.ngx_http_fastcgi_temp_path,,http\modules\ngx_http_fastcgi_module.c,ngx_path_init_t ngx_http_fastcgi_temp_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7872,126720,ngx_http_flv_commands,2,http\modules\ngx_http_flv_module.c.ngx_http_flv_commands,,http\modules\ngx_http_flv_module.c,static ngx_command_t[] ngx_http_flv_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7873,126735,ngx_flv_header,2,http\modules\ngx_http_flv_module.c.ngx_flv_header,,http\modules\ngx_http_flv_module.c,static u_char[] ngx_flv_header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
7874,126739,ngx_http_flv_module_ctx,2,http\modules\ngx_http_flv_module.c.ngx_http_flv_module_ctx,,http\modules\ngx_http_flv_module.c,ngx_http_module_t ngx_http_flv_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7875,126751,ngx_http_flv_module,2,http\modules\ngx_http_flv_module.c.ngx_http_flv_module,,http\modules\ngx_http_flv_module.c,ngx_module_t ngx_http_flv_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7876,127376,ngx_http_geo_range_t,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_range_t,,http\modules\ngx_http_geo_module.c,struct ngx_http_geo_range_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7877,127380,ngx_http_geo_trees_t,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_trees_t,,http\modules\ngx_http_geo_module.c,struct ngx_http_geo_trees_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7878,127384,ngx_http_geo_high_ranges_t,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_high_ranges_t,,http\modules\ngx_http_geo_module.c,struct ngx_http_geo_high_ranges_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7879,127389,ngx_http_geo_variable_value_node_t,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_variable_value_node_t,,http\modules\ngx_http_geo_module.c,struct ngx_http_geo_variable_value_node_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7880,127410,ngx_http_geo_conf_ctx_t,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_conf_ctx_t,,http\modules\ngx_http_geo_module.c,struct ngx_http_geo_conf_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7881,127419,ngx_http_geo_ctx_t,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_ctx_t,,http\modules\ngx_http_geo_module.c,struct ngx_http_geo_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7882,127535,ngx_http_geo_commands,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_commands,,http\modules\ngx_http_geo_module.c,static ngx_command_t[] ngx_http_geo_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7883,127552,ngx_http_geo_module_ctx,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_module_ctx,,http\modules\ngx_http_geo_module.c,ngx_http_module_t ngx_http_geo_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7884,127564,ngx_http_geo_module,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_module,,http\modules\ngx_http_geo_module.c,ngx_module_t ngx_http_geo_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7885,127593,ngx_http_geo_header_t,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_header_t,,http\modules\ngx_http_geo_module.c,struct ngx_http_geo_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7886,127594,ngx_http_geo_header,2,http\modules\ngx_http_geo_module.c.ngx_http_geo_header,,http\modules\ngx_http_geo_module.c,ngx_http_geo_header_t ngx_http_geo_header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7887,131693,ngx_http_geoip_conf_t,2,http\modules\ngx_http_geoip_module.c.ngx_http_geoip_conf_t,,http\modules\ngx_http_geoip_module.c,struct ngx_http_geoip_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7888,131697,ngx_http_geoip_var_t,2,http\modules\ngx_http_geoip_module.c.ngx_http_geoip_var_t,,http\modules\ngx_http_geoip_module.c,struct ngx_http_geoip_var_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7889,131704,ngx_http_geoip_country_functions,2,http\modules\ngx_http_geoip_module.c.ngx_http_geoip_country_functions,,http\modules\ngx_http_geoip_module.c,char  ngx_http_geoip_country_functions,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7890,131814,ngx_http_geoip_commands,2,http\modules\ngx_http_geoip_module.c.ngx_http_geoip_commands,,http\modules\ngx_http_geoip_module.c,static ngx_command_t[] ngx_http_geoip_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7891,131871,ngx_http_geoip_module_ctx,2,http\modules\ngx_http_geoip_module.c.ngx_http_geoip_module_ctx,,http\modules\ngx_http_geoip_module.c,ngx_http_module_t ngx_http_geoip_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7892,131883,ngx_http_geoip_module,2,http\modules\ngx_http_geoip_module.c.ngx_http_geoip_module,,http\modules\ngx_http_geoip_module.c,ngx_module_t ngx_http_geoip_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7893,131900,ngx_http_geoip_vars,2,http\modules\ngx_http_geoip_module.c.ngx_http_geoip_vars,,http\modules\ngx_http_geoip_module.c,static ngx_http_variable_t[] ngx_http_geoip_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7894,133436,ngx_http_grpc_headers_t,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_headers_t,,http\modules\ngx_http_grpc_module.c,struct ngx_http_grpc_headers_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7895,133452,ngx_http_grpc_loc_conf_t,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_loc_conf_t,,http\modules\ngx_http_grpc_module.c,struct ngx_http_grpc_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7896,133472,ngx_http_grpc_state_e,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_state_e,,http\modules\ngx_http_grpc_module.c,enum ngx_http_grpc_state_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7897,133478,ngx_http_grpc_conn_t,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_conn_t,,http\modules\ngx_http_grpc_module.c,struct ngx_http_grpc_conn_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7898,133530,ngx_http_grpc_ctx_t,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_ctx_t,,http\modules\ngx_http_grpc_module.c,struct ngx_http_grpc_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7899,133541,ngx_http_grpc_frame_t,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_frame_t,,http\modules\ngx_http_grpc_module.c,struct ngx_http_grpc_frame_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7900,133740,ngx_http_grpc_next_upstream_masks,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_next_upstream_masks,,http\modules\ngx_http_grpc_module.c,static ngx_conf_bitmask_t[] ngx_http_grpc_next_upstream_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7901,133795,ngx_http_grpc_commands,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_commands,,http\modules\ngx_http_grpc_module.c,static ngx_command_t[] ngx_http_grpc_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7902,134064,ngx_http_grpc_module_ctx,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_module_ctx,,http\modules\ngx_http_grpc_module.c,ngx_http_module_t ngx_http_grpc_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7903,134076,ngx_http_grpc_module,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_module,,http\modules\ngx_http_grpc_module.c,ngx_module_t ngx_http_grpc_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
7904,134093,ngx_http_grpc_connection_start,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_connection_start,,http\modules\ngx_http_grpc_module.c,static u_char[] ngx_http_grpc_connection_start,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7905,134097,ngx_http_grpc_headers,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_headers,,http\modules\ngx_http_grpc_module.c,static ngx_keyval_t[] ngx_http_grpc_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7906,134144,ngx_http_grpc_hide_headers,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_hide_headers,,http\modules\ngx_http_grpc_module.c,static ngx_str_t[] ngx_http_grpc_hide_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7907,134163,ngx_http_grpc_vars,2,http\modules\ngx_http_grpc_module.c.ngx_http_grpc_vars,,http\modules\ngx_http_grpc_module.c,static ngx_http_variable_t[] ngx_http_grpc_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7908,146088,ngx_http_gunzip_conf_t,2,http\modules\ngx_http_gunzip_filter_module.c.ngx_http_gunzip_conf_t,,http\modules\ngx_http_gunzip_filter_module.c,struct ngx_http_gunzip_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7909,146105,ngx_http_gunzip_ctx_t,2,http\modules\ngx_http_gunzip_filter_module.c.ngx_http_gunzip_ctx_t,,http\modules\ngx_http_gunzip_filter_module.c,struct ngx_http_gunzip_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7910,146166,ngx_http_gunzip_filter_commands,2,http\modules\ngx_http_gunzip_filter_module.c.ngx_http_gunzip_filter_commands,,http\modules\ngx_http_gunzip_filter_module.c,static ngx_command_t[] ngx_http_gunzip_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7911,146203,ngx_http_gunzip_filter_module_ctx,2,http\modules\ngx_http_gunzip_filter_module.c.ngx_http_gunzip_filter_module_ctx,,http\modules\ngx_http_gunzip_filter_module.c,ngx_http_module_t ngx_http_gunzip_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7912,146215,ngx_http_gunzip_filter_module,2,http\modules\ngx_http_gunzip_filter_module.c.ngx_http_gunzip_filter_module,,http\modules\ngx_http_gunzip_filter_module.c,ngx_module_t ngx_http_gunzip_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
7913,146232,ngx_http_next_header_filter,2,http\modules\ngx_http_gunzip_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_gunzip_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7914,146233,ngx_http_next_body_filter,2,http\modules\ngx_http_gunzip_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_gunzip_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7915,147796,ngx_http_gzip_conf_t,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_conf_t,,http\modules\ngx_http_gzip_filter_module.c,struct ngx_http_gzip_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7916,147823,ngx_http_gzip_ctx_t,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_ctx_t,,http\modules\ngx_http_gzip_filter_module.c,struct ngx_http_gzip_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7917,147928,ngx_http_gzip_comp_level_bounds,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_comp_level_bounds,,http\modules\ngx_http_gzip_filter_module.c,ngx_conf_num_bounds_t ngx_http_gzip_comp_level_bounds,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7918,147935,ngx_http_gzip_window_p,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_window_p,,http\modules\ngx_http_gzip_filter_module.c,ngx_conf_post_handler_pt ngx_http_gzip_window_p,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7919,147939,ngx_http_gzip_hash_p,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_hash_p,,http\modules\ngx_http_gzip_filter_module.c,ngx_conf_post_handler_pt ngx_http_gzip_hash_p,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7920,147943,ngx_http_gzip_filter_commands,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_filter_commands,,http\modules\ngx_http_gzip_filter_module.c,static ngx_command_t[] ngx_http_gzip_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7921,148100,ngx_http_gzip_filter_module_ctx,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_filter_module_ctx,,http\modules\ngx_http_gzip_filter_module.c,ngx_http_module_t ngx_http_gzip_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7922,148112,ngx_http_gzip_filter_module,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_filter_module,,http\modules\ngx_http_gzip_filter_module.c,ngx_module_t ngx_http_gzip_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
7923,148129,ngx_http_gzip_ratio,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_ratio,,http\modules\ngx_http_gzip_filter_module.c,ngx_str_t ngx_http_gzip_ratio,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7924,148134,ngx_http_next_header_filter,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_gzip_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7925,148135,ngx_http_next_body_filter,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_gzip_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7926,148136,ngx_http_gzip_assume_zlib_ng,2,http\modules\ngx_http_gzip_filter_module.c.ngx_http_gzip_assume_zlib_ng,,http\modules\ngx_http_gzip_filter_module.c,ngx_uint_t ngx_http_gzip_assume_zlib_ng,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7927,150661,ngx_http_gzip_static_conf_t,2,http\modules\ngx_http_gzip_static_module.c.ngx_http_gzip_static_conf_t,,http\modules\ngx_http_gzip_static_module.c,struct ngx_http_gzip_static_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7928,150684,ngx_http_gzip_static,2,http\modules\ngx_http_gzip_static_module.c.ngx_http_gzip_static,,http\modules\ngx_http_gzip_static_module.c,static ngx_conf_enum_t[] ngx_http_gzip_static,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7929,150709,ngx_http_gzip_static_commands,2,http\modules\ngx_http_gzip_static_module.c.ngx_http_gzip_static_commands,,http\modules\ngx_http_gzip_static_module.c,static ngx_command_t[] ngx_http_gzip_static_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7930,150731,ngx_http_gzip_static_module_ctx,2,http\modules\ngx_http_gzip_static_module.c.ngx_http_gzip_static_module_ctx,,http\modules\ngx_http_gzip_static_module.c,ngx_http_module_t ngx_http_gzip_static_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7931,150743,ngx_http_gzip_static_module,2,http\modules\ngx_http_gzip_static_module.c.ngx_http_gzip_static_module,,http\modules\ngx_http_gzip_static_module.c,ngx_module_t ngx_http_gzip_static_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7932,151453,ngx_http_set_header_t,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_set_header_t,,http\modules\ngx_http_headers_filter_module.c,struct ngx_http_set_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7933,151468,ngx_http_expires_t,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_expires_t,,http\modules\ngx_http_headers_filter_module.c,enum ngx_http_expires_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7934,151475,ngx_http_headers_conf_t,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_headers_conf_t,,http\modules\ngx_http_headers_filter_module.c,struct ngx_http_headers_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7935,151549,ngx_http_set_headers,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_set_headers,,http\modules\ngx_http_headers_filter_module.c,static ngx_http_set_header_t[] ngx_http_set_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7936,151585,ngx_http_headers_filter_commands,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_headers_filter_commands,,http\modules\ngx_http_headers_filter_module.c,static ngx_command_t[] ngx_http_headers_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7937,151642,ngx_http_headers_filter_module_ctx,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_headers_filter_module_ctx,,http\modules\ngx_http_headers_filter_module.c,ngx_http_module_t ngx_http_headers_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7938,151654,ngx_http_headers_filter_module,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_headers_filter_module,,http\modules\ngx_http_headers_filter_module.c,ngx_module_t ngx_http_headers_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
7939,151671,ngx_http_next_header_filter,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_headers_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7940,151672,ngx_http_next_body_filter,2,http\modules\ngx_http_headers_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_headers_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7941,153665,ngx_http_image_filter_conf_t,2,http\modules\ngx_http_image_filter_module.c.ngx_http_image_filter_conf_t,,http\modules\ngx_http_image_filter_module.c,struct ngx_http_image_filter_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7942,153678,ngx_http_image_filter_ctx_t,2,http\modules\ngx_http_image_filter_module.c.ngx_http_image_filter_ctx_t,,http\modules\ngx_http_image_filter_module.c,struct ngx_http_image_filter_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7943,153817,ngx_http_image_filter_commands,2,http\modules\ngx_http_image_filter_module.c.ngx_http_image_filter_commands,,http\modules\ngx_http_image_filter_module.c,static ngx_command_t[] ngx_http_image_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7944,153922,ngx_http_image_filter_module_ctx,2,http\modules\ngx_http_image_filter_module.c.ngx_http_image_filter_module_ctx,,http\modules\ngx_http_image_filter_module.c,ngx_http_module_t ngx_http_image_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7945,153934,ngx_http_image_filter_module,2,http\modules\ngx_http_image_filter_module.c.ngx_http_image_filter_module,,http\modules\ngx_http_image_filter_module.c,ngx_module_t ngx_http_image_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,9,0,1,1,0,0,,0,0,0,0,0,
7946,153951,ngx_http_next_header_filter,2,http\modules\ngx_http_image_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_image_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7947,153952,ngx_http_next_body_filter,2,http\modules\ngx_http_image_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_image_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7948,153953,ngx_http_image_types,2,http\modules\ngx_http_image_filter_module.c.ngx_http_image_types,,http\modules\ngx_http_image_filter_module.c,static ngx_str_t[] ngx_http_image_types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7949,158080,ngx_http_index_t,2,http\modules\ngx_http_index_module.c.ngx_http_index_t,,http\modules\ngx_http_index_module.c,struct ngx_http_index_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7950,158084,ngx_http_index_loc_conf_t,2,http\modules\ngx_http_index_module.c.ngx_http_index_loc_conf_t,,http\modules\ngx_http_index_module.c,struct ngx_http_index_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7951,158125,ngx_http_index_commands,2,http\modules\ngx_http_index_module.c.ngx_http_index_commands,,http\modules\ngx_http_index_module.c,static ngx_command_t[] ngx_http_index_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7952,158144,ngx_http_index_module_ctx,2,http\modules\ngx_http_index_module.c.ngx_http_index_module_ctx,,http\modules\ngx_http_index_module.c,ngx_http_module_t ngx_http_index_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7953,158156,ngx_http_index_module,2,http\modules\ngx_http_index_module.c.ngx_http_index_module,,http\modules\ngx_http_index_module.c,ngx_module_t ngx_http_index_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7954,159538,ngx_http_limit_conn_node_t,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_node_t,,http\modules\ngx_http_limit_conn_module.c,struct ngx_http_limit_conn_node_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7955,159542,ngx_http_limit_conn_cleanup_t,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_cleanup_t,,http\modules\ngx_http_limit_conn_module.c,struct ngx_http_limit_conn_cleanup_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7956,159546,ngx_http_limit_conn_shctx_t,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_shctx_t,,http\modules\ngx_http_limit_conn_module.c,struct ngx_http_limit_conn_shctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7957,159551,ngx_http_limit_conn_ctx_t,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_ctx_t,,http\modules\ngx_http_limit_conn_module.c,struct ngx_http_limit_conn_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7958,159555,ngx_http_limit_conn_limit_t,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_limit_t,,http\modules\ngx_http_limit_conn_module.c,struct ngx_http_limit_conn_limit_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7959,159561,ngx_http_limit_conn_conf_t,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_conf_t,,http\modules\ngx_http_limit_conn_module.c,struct ngx_http_limit_conn_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7960,159618,ngx_http_limit_conn_log_levels,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_log_levels,,http\modules\ngx_http_limit_conn_module.c,static ngx_conf_enum_t[] ngx_http_limit_conn_log_levels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7961,159641,ngx_http_limit_conn_status_bounds,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_status_bounds,,http\modules\ngx_http_limit_conn_module.c,ngx_conf_num_bounds_t ngx_http_limit_conn_status_bounds,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7962,159648,ngx_http_limit_conn_commands,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_commands,,http\modules\ngx_http_limit_conn_module.c,static ngx_command_t[] ngx_http_limit_conn_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7963,159727,ngx_http_limit_conn_module_ctx,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_module_ctx,,http\modules\ngx_http_limit_conn_module.c,ngx_http_module_t ngx_http_limit_conn_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7964,159739,ngx_http_limit_conn_module,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_module,,http\modules\ngx_http_limit_conn_module.c,ngx_module_t ngx_http_limit_conn_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7965,159756,ngx_http_limit_conn_vars,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_vars,,http\modules\ngx_http_limit_conn_module.c,static ngx_http_variable_t[] ngx_http_limit_conn_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7966,159769,ngx_http_limit_conn_status,2,http\modules\ngx_http_limit_conn_module.c.ngx_http_limit_conn_status,,http\modules\ngx_http_limit_conn_module.c,static ngx_str_t[] ngx_http_limit_conn_status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7967,161481,ngx_http_limit_req_node_t,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_node_t,,http\modules\ngx_http_limit_req_module.c,struct ngx_http_limit_req_node_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7968,161486,ngx_http_limit_req_shctx_t,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_shctx_t,,http\modules\ngx_http_limit_req_module.c,struct ngx_http_limit_req_shctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7969,161493,ngx_http_limit_req_ctx_t,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_ctx_t,,http\modules\ngx_http_limit_req_module.c,struct ngx_http_limit_req_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7970,161498,ngx_http_limit_req_limit_t,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_limit_t,,http\modules\ngx_http_limit_req_module.c,struct ngx_http_limit_req_limit_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7971,161505,ngx_http_limit_req_conf_t,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_conf_t,,http\modules\ngx_http_limit_req_module.c,struct ngx_http_limit_req_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7972,161583,ngx_http_limit_req_log_levels,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_log_levels,,http\modules\ngx_http_limit_req_module.c,static ngx_conf_enum_t[] ngx_http_limit_req_log_levels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7973,161606,ngx_http_limit_req_status_bounds,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_status_bounds,,http\modules\ngx_http_limit_req_module.c,ngx_conf_num_bounds_t ngx_http_limit_req_status_bounds,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7974,161613,ngx_http_limit_req_commands,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_commands,,http\modules\ngx_http_limit_req_module.c,static ngx_command_t[] ngx_http_limit_req_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7975,161692,ngx_http_limit_req_module_ctx,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_module_ctx,,http\modules\ngx_http_limit_req_module.c,ngx_http_module_t ngx_http_limit_req_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7976,161704,ngx_http_limit_req_module,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_module,,http\modules\ngx_http_limit_req_module.c,ngx_module_t ngx_http_limit_req_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7977,161721,ngx_http_limit_req_vars,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_vars,,http\modules\ngx_http_limit_req_module.c,static ngx_http_variable_t[] ngx_http_limit_req_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7978,161734,ngx_http_limit_req_status,2,http\modules\ngx_http_limit_req_module.c.ngx_http_limit_req_status,,http\modules\ngx_http_limit_req_module.c,static ngx_str_t[] ngx_http_limit_req_status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7979,164408,ngx_http_log_fmt_t,2,http\modules\ngx_http_log_module.c.ngx_http_log_fmt_t,,http\modules\ngx_http_log_module.c,struct ngx_http_log_fmt_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7980,164412,ngx_http_log_main_conf_t,2,http\modules\ngx_http_log_module.c.ngx_http_log_main_conf_t,,http\modules\ngx_http_log_module.c,struct ngx_http_log_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7981,164420,ngx_http_log_buf_t,2,http\modules\ngx_http_log_module.c.ngx_http_log_buf_t,,http\modules\ngx_http_log_module.c,struct ngx_http_log_buf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7982,164424,ngx_http_log_script_t,2,http\modules\ngx_http_log_module.c.ngx_http_log_script_t,,http\modules\ngx_http_log_module.c,struct ngx_http_log_script_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7983,164433,ngx_http_log_t,2,http\modules\ngx_http_log_module.c.ngx_http_log_t,,http\modules\ngx_http_log_module.c,struct ngx_http_log_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7984,164440,ngx_http_log_loc_conf_t,2,http\modules\ngx_http_log_module.c.ngx_http_log_loc_conf_t,,http\modules\ngx_http_log_module.c,struct ngx_http_log_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7985,164445,ngx_http_log_var_t,2,http\modules\ngx_http_log_module.c.ngx_http_log_var_t,,http\modules\ngx_http_log_module.c,struct ngx_http_log_var_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7986,164643,ngx_http_log_commands,2,http\modules\ngx_http_log_module.c.ngx_http_log_commands,,http\modules\ngx_http_log_module.c,static ngx_command_t[] ngx_http_log_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7987,164690,ngx_http_log_module_ctx,2,http\modules\ngx_http_log_module.c.ngx_http_log_module_ctx,,http\modules\ngx_http_log_module.c,ngx_http_module_t ngx_http_log_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7988,164702,ngx_http_log_module,2,http\modules\ngx_http_log_module.c.ngx_http_log_module,,http\modules\ngx_http_log_module.c,ngx_module_t ngx_http_log_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
7989,164719,ngx_http_access_log,2,http\modules\ngx_http_log_module.c.ngx_http_access_log,,http\modules\ngx_http_log_module.c,ngx_str_t ngx_http_access_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7990,164724,ngx_http_combined_fmt,2,http\modules\ngx_http_log_module.c.ngx_http_combined_fmt,,http\modules\ngx_http_log_module.c,ngx_str_t ngx_http_combined_fmt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7991,164729,ngx_http_log_vars,2,http\modules\ngx_http_log_module.c.ngx_http_log_vars,,http\modules\ngx_http_log_module.c,static ngx_http_log_var_t[] ngx_http_log_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7992,168949,ngx_http_map_conf_t,2,http\modules\ngx_http_map_module.c.ngx_http_map_conf_t,,http\modules\ngx_http_map_module.c,struct ngx_http_map_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7993,168958,ngx_http_map_conf_ctx_t,2,http\modules\ngx_http_map_module.c.ngx_http_map_conf_ctx_t,,http\modules\ngx_http_map_module.c,struct ngx_http_map_conf_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7994,168964,ngx_http_map_ctx_t,2,http\modules\ngx_http_map_module.c.ngx_http_map_ctx_t,,http\modules\ngx_http_map_module.c,struct ngx_http_map_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7995,168985,ngx_http_map_commands,2,http\modules\ngx_http_map_module.c.ngx_http_map_commands,,http\modules\ngx_http_map_module.c,static ngx_command_t[] ngx_http_map_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7996,169026,ngx_http_map_module_ctx,2,http\modules\ngx_http_map_module.c.ngx_http_map_module_ctx,,http\modules\ngx_http_map_module.c,ngx_http_module_t ngx_http_map_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7997,169038,ngx_http_map_module,2,http\modules\ngx_http_map_module.c.ngx_http_map_module,,http\modules\ngx_http_map_module.c,ngx_module_t ngx_http_map_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7998,169822,ngx_libc_cdecl,2,http\modules\ngx_http_map_module.c.ngx_libc_cdecl,,http\modules\ngx_http_map_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
7999,170438,ngx_http_memcached_loc_conf_t,2,http\modules\ngx_http_memcached_module.c.ngx_http_memcached_loc_conf_t,,http\modules\ngx_http_memcached_module.c,struct ngx_http_memcached_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8000,170443,ngx_http_memcached_ctx_t,2,http\modules\ngx_http_memcached_module.c.ngx_http_memcached_ctx_t,,http\modules\ngx_http_memcached_module.c,struct ngx_http_memcached_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8001,170500,ngx_http_memcached_next_upstream_masks,2,http\modules\ngx_http_memcached_module.c.ngx_http_memcached_next_upstream_masks,,http\modules\ngx_http_memcached_module.c,static ngx_conf_bitmask_t[] ngx_http_memcached_next_upstream_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8002,170527,ngx_http_memcached_commands,2,http\modules\ngx_http_memcached_module.c.ngx_http_memcached_commands,,http\modules\ngx_http_memcached_module.c,static ngx_command_t[] ngx_http_memcached_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8003,170723,ngx_http_memcached_module_ctx,2,http\modules\ngx_http_memcached_module.c.ngx_http_memcached_module_ctx,,http\modules\ngx_http_memcached_module.c,ngx_http_module_t ngx_http_memcached_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8004,170735,ngx_http_memcached_module,2,http\modules\ngx_http_memcached_module.c.ngx_http_memcached_module,,http\modules\ngx_http_memcached_module.c,ngx_module_t ngx_http_memcached_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8005,170752,ngx_http_memcached_key,2,http\modules\ngx_http_memcached_module.c.ngx_http_memcached_key,,http\modules\ngx_http_memcached_module.c,ngx_str_t ngx_http_memcached_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8006,172571,ngx_http_mirror_loc_conf_t,2,http\modules\ngx_http_mirror_module.c.ngx_http_mirror_loc_conf_t,,http\modules\ngx_http_mirror_module.c,struct ngx_http_mirror_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8007,172574,ngx_http_mirror_ctx_t,2,http\modules\ngx_http_mirror_module.c.ngx_http_mirror_ctx_t,,http\modules\ngx_http_mirror_module.c,struct ngx_http_mirror_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8008,172614,ngx_http_mirror_commands,2,http\modules\ngx_http_mirror_module.c.ngx_http_mirror_commands,,http\modules\ngx_http_mirror_module.c,static ngx_command_t[] ngx_http_mirror_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8009,172649,ngx_http_mirror_module_ctx,2,http\modules\ngx_http_mirror_module.c.ngx_http_mirror_module_ctx,,http\modules\ngx_http_mirror_module.c,ngx_http_module_t ngx_http_mirror_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8010,172661,ngx_http_mirror_module,2,http\modules\ngx_http_mirror_module.c.ngx_http_mirror_module,,http\modules\ngx_http_mirror_module.c,ngx_module_t ngx_http_mirror_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8011,173105,ngx_http_mp4_conf_t,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_conf_t,,http\modules\ngx_http_mp4_module.c,struct ngx_http_mp4_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8012,173120,ngx_mp4_stsc_entry_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_stsc_entry_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_stsc_entry_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8013,173186,ngx_http_mp4_trak_t,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_trak_t,,http\modules\ngx_http_mp4_module.c,struct ngx_http_mp4_trak_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8014,173228,ngx_http_mp4_file_t,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_file_t,,http\modules\ngx_http_mp4_module.c,struct ngx_http_mp4_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8015,173237,ngx_http_mp4_atom_handler_t,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_atom_handler_t,,http\modules\ngx_http_mp4_module.c,struct ngx_http_mp4_atom_handler_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8016,173540,ngx_http_mp4_commands,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_commands,,http\modules\ngx_http_mp4_module.c,static ngx_command_t[] ngx_http_mp4_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8017,173587,ngx_http_mp4_module_ctx,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_module_ctx,,http\modules\ngx_http_mp4_module.c,ngx_http_module_t ngx_http_mp4_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8018,173599,ngx_http_mp4_module,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_module,,http\modules\ngx_http_mp4_module.c,ngx_module_t ngx_http_mp4_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8019,173616,ngx_http_mp4_atoms,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_atoms,,http\modules\ngx_http_mp4_module.c,static ngx_http_mp4_atom_handler_t[] ngx_http_mp4_atoms,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8020,173632,ngx_http_mp4_moov_atoms,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_moov_atoms,,http\modules\ngx_http_mp4_module.c,static ngx_http_mp4_atom_handler_t[] ngx_http_mp4_moov_atoms,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8021,173648,ngx_http_mp4_trak_atoms,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_trak_atoms,,http\modules\ngx_http_mp4_module.c,static ngx_http_mp4_atom_handler_t[] ngx_http_mp4_trak_atoms,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8022,173661,ngx_http_mp4_mdia_atoms,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_mdia_atoms,,http\modules\ngx_http_mp4_module.c,static ngx_http_mp4_atom_handler_t[] ngx_http_mp4_mdia_atoms,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8023,173677,ngx_http_mp4_minf_atoms,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_minf_atoms,,http\modules\ngx_http_mp4_module.c,static ngx_http_mp4_atom_handler_t[] ngx_http_mp4_minf_atoms,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8024,173696,ngx_http_mp4_stbl_atoms,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_stbl_atoms,,http\modules\ngx_http_mp4_module.c,static ngx_http_mp4_atom_handler_t[] ngx_http_mp4_stbl_atoms,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8025,175300,ngx_mp4_atom_header_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_atom_header_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_atom_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8026,175315,ngx_mp4_atom_header64_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_atom_header64_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_atom_header64_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8027,176997,ngx_mp4_mvhd_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_mvhd_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_mvhd_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8028,177060,ngx_mp4_mvhd64_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_mvhd64_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_mvhd64_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8029,178163,ngx_mp4_tkhd_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_tkhd_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_tkhd_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8030,178220,ngx_mp4_tkhd64_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_tkhd64_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_tkhd64_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8031,179157,ngx_mp4_mdhd_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_mdhd_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_mdhd_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8032,179193,ngx_mp4_mdhd64_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_mdhd64_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_mdhd64_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8033,181264,ngx_mp4_stsd_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_stsd_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_stsd_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8034,181604,ngx_mp4_stts_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_stts_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_stts_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8035,181616,ngx_mp4_stts_entry_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_stts_entry_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_stts_entry_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8036,182688,ngx_http_mp4_stss_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_http_mp4_stss_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_http_mp4_stss_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8037,183569,ngx_mp4_ctts_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_ctts_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_ctts_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8038,183581,ngx_mp4_ctts_entry_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_ctts_entry_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_ctts_entry_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8039,184549,ngx_mp4_stsc_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_stsc_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_stsc_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8040,186729,ngx_mp4_stsz_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_stsz_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_stsz_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8041,187671,ngx_mp4_stco_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_stco_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_stco_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8042,188765,ngx_mp4_co64_atom_t,2,http\modules\ngx_http_mp4_module.c.ngx_mp4_co64_atom_t,,http\modules\ngx_http_mp4_module.c,struct ngx_mp4_co64_atom_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8043,190192,ngx_http_not_modified_filter_module_ctx,2,http\modules\ngx_http_not_modified_filter_module.c.ngx_http_not_modified_filter_module_ctx,,http\modules\ngx_http_not_modified_filter_module.c,ngx_http_module_t ngx_http_not_modified_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8044,190204,ngx_http_not_modified_filter_module,2,http\modules\ngx_http_not_modified_filter_module.c.ngx_http_not_modified_filter_module,,http\modules\ngx_http_not_modified_filter_module.c,ngx_module_t ngx_http_not_modified_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8045,190221,ngx_http_next_header_filter,2,http\modules\ngx_http_not_modified_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_not_modified_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8046,190835,ngx_http_proxy_main_conf_t,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_main_conf_t,,http\modules\ngx_http_proxy_module.c,struct ngx_http_proxy_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8047,190861,ngx_http_proxy_cookie_flags_t,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_cookie_flags_t,,http\modules\ngx_http_proxy_module.c,struct ngx_http_proxy_cookie_flags_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8048,190868,ngx_http_proxy_vars_t,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_vars_t,,http\modules\ngx_http_proxy_module.c,struct ngx_http_proxy_vars_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8049,190874,ngx_http_proxy_headers_t,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_headers_t,,http\modules\ngx_http_proxy_module.c,struct ngx_http_proxy_headers_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8050,190906,ngx_http_proxy_loc_conf_t,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_loc_conf_t,,http\modules\ngx_http_proxy_module.c,struct ngx_http_proxy_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8051,190917,ngx_http_proxy_ctx_t,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_ctx_t,,http\modules\ngx_http_proxy_module.c,struct ngx_http_proxy_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8052,191168,ngx_http_proxy_lowat_post,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_lowat_post,,http\modules\ngx_http_proxy_module.c,ngx_conf_post_t ngx_http_proxy_lowat_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8053,191173,ngx_http_proxy_next_upstream_masks,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_next_upstream_masks,,http\modules\ngx_http_proxy_module.c,static ngx_conf_bitmask_t[] ngx_http_proxy_next_upstream_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8054,191232,ngx_http_proxy_http_version,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_http_version,,http\modules\ngx_http_proxy_module.c,static ngx_conf_enum_t[] ngx_http_proxy_http_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8055,191247,ngx_http_proxy_module,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_module,,http\modules\ngx_http_proxy_module.c,ngx_module_t ngx_http_proxy_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8056,191248,ngx_http_proxy_commands,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_commands,,http\modules\ngx_http_proxy_module.c,static ngx_command_t[] ngx_http_proxy_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8057,191923,ngx_http_proxy_module_ctx,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_module_ctx,,http\modules\ngx_http_proxy_module.c,ngx_http_module_t ngx_http_proxy_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8058,191935,ngx_http_proxy_module,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_module,,http\modules\ngx_http_proxy_module.c,ngx_module_t ngx_http_proxy_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8059,191954,ngx_http_proxy_headers,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_headers,,http\modules\ngx_http_proxy_module.c,static ngx_keyval_t[] ngx_http_proxy_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8060,192001,ngx_http_proxy_hide_headers,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_hide_headers,,http\modules\ngx_http_proxy_module.c,static ngx_str_t[] ngx_http_proxy_hide_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8061,192022,ngx_http_proxy_vars,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_vars,,http\modules\ngx_http_proxy_module.c,static ngx_http_variable_t[] ngx_http_proxy_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8062,192079,ngx_http_proxy_temp_path,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_temp_path,,http\modules\ngx_http_proxy_module.c,ngx_path_init_t ngx_http_proxy_temp_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8063,192089,ngx_http_proxy_cookie_flags_masks,2,http\modules\ngx_http_proxy_module.c.ngx_http_proxy_cookie_flags_masks,,http\modules\ngx_http_proxy_module.c,static ngx_conf_bitmask_t[] ngx_http_proxy_cookie_flags_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8064,203374,ngx_http_random_index_loc_conf_t,2,http\modules\ngx_http_random_index_module.c.ngx_http_random_index_loc_conf_t,,http\modules\ngx_http_random_index_module.c,struct ngx_http_random_index_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8065,203399,ngx_http_random_index_commands,2,http\modules\ngx_http_random_index_module.c.ngx_http_random_index_commands,,http\modules\ngx_http_random_index_module.c,static ngx_command_t[] ngx_http_random_index_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8066,203416,ngx_http_random_index_module_ctx,2,http\modules\ngx_http_random_index_module.c.ngx_http_random_index_module_ctx,,http\modules\ngx_http_random_index_module.c,ngx_http_module_t ngx_http_random_index_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8067,203428,ngx_http_random_index_module,2,http\modules\ngx_http_random_index_module.c.ngx_http_random_index_module,,http\modules\ngx_http_random_index_module.c,ngx_module_t ngx_http_random_index_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8068,204122,ngx_http_range_t,2,http\modules\ngx_http_range_filter_module.c.ngx_http_range_t,,http\modules\ngx_http_range_filter_module.c,struct ngx_http_range_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8069,204127,ngx_http_range_filter_ctx_t,2,http\modules\ngx_http_range_filter_module.c.ngx_http_range_filter_ctx_t,,http\modules\ngx_http_range_filter_module.c,struct ngx_http_range_filter_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8070,204183,ngx_http_range_header_filter_module_ctx,2,http\modules\ngx_http_range_filter_module.c.ngx_http_range_header_filter_module_ctx,,http\modules\ngx_http_range_filter_module.c,ngx_http_module_t ngx_http_range_header_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8071,204195,ngx_http_range_header_filter_module,2,http\modules\ngx_http_range_filter_module.c.ngx_http_range_header_filter_module,,http\modules\ngx_http_range_filter_module.c,ngx_module_t ngx_http_range_header_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8072,204212,ngx_http_range_body_filter_module_ctx,2,http\modules\ngx_http_range_filter_module.c.ngx_http_range_body_filter_module_ctx,,http\modules\ngx_http_range_filter_module.c,ngx_http_module_t ngx_http_range_body_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8073,204224,ngx_http_range_body_filter_module,2,http\modules\ngx_http_range_filter_module.c.ngx_http_range_body_filter_module,,http\modules\ngx_http_range_filter_module.c,ngx_module_t ngx_http_range_body_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8074,204241,ngx_http_next_header_filter,2,http\modules\ngx_http_range_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_range_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8075,204242,ngx_http_next_body_filter,2,http\modules\ngx_http_range_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_range_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8076,206637,ngx_http_realip_loc_conf_t,2,http\modules\ngx_http_realip_module.c.ngx_http_realip_loc_conf_t,,http\modules\ngx_http_realip_module.c,struct ngx_http_realip_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8077,206644,ngx_http_realip_ctx_t,2,http\modules\ngx_http_realip_module.c.ngx_http_realip_ctx_t,,http\modules\ngx_http_realip_module.c,struct ngx_http_realip_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8078,206716,ngx_http_realip_commands,2,http\modules\ngx_http_realip_module.c.ngx_http_realip_commands,,http\modules\ngx_http_realip_module.c,static ngx_command_t[] ngx_http_realip_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8079,206765,ngx_http_realip_module_ctx,2,http\modules\ngx_http_realip_module.c.ngx_http_realip_module_ctx,,http\modules\ngx_http_realip_module.c,ngx_http_module_t ngx_http_realip_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8080,206777,ngx_http_realip_module,2,http\modules\ngx_http_realip_module.c.ngx_http_realip_module,,http\modules\ngx_http_realip_module.c,ngx_module_t ngx_http_realip_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8081,206794,ngx_http_realip_vars,2,http\modules\ngx_http_realip_module.c.ngx_http_realip_vars,,http\modules\ngx_http_realip_module.c,static ngx_http_variable_t[] ngx_http_realip_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8082,208106,ngx_http_referer_conf_t,2,http\modules\ngx_http_referer_module.c.ngx_http_referer_conf_t,,http\modules\ngx_http_referer_module.c,struct ngx_http_referer_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8083,208147,ngx_http_referer_commands,2,http\modules\ngx_http_referer_module.c.ngx_http_referer_commands,,http\modules\ngx_http_referer_module.c,static ngx_command_t[] ngx_http_referer_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8084,208192,ngx_http_referer_module_ctx,2,http\modules\ngx_http_referer_module.c.ngx_http_referer_module_ctx,,http\modules\ngx_http_referer_module.c,ngx_http_module_t ngx_http_referer_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8085,208204,ngx_http_referer_module,2,http\modules\ngx_http_referer_module.c.ngx_http_referer_module,,http\modules\ngx_http_referer_module.c,ngx_module_t ngx_http_referer_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8086,208221,ngx_http_invalid_referer_name,2,http\modules\ngx_http_referer_module.c.ngx_http_invalid_referer_name,,http\modules\ngx_http_referer_module.c,ngx_str_t ngx_http_invalid_referer_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8087,209387,ngx_libc_cdecl,2,http\modules\ngx_http_referer_module.c.ngx_libc_cdecl,,http\modules\ngx_http_referer_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8088,209435,ngx_http_rewrite_loc_conf_t,2,http\modules\ngx_http_rewrite_module.c.ngx_http_rewrite_loc_conf_t,,http\modules\ngx_http_rewrite_module.c,struct ngx_http_rewrite_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8089,209508,ngx_http_rewrite_commands,2,http\modules\ngx_http_rewrite_module.c.ngx_http_rewrite_commands,,http\modules\ngx_http_rewrite_module.c,static ngx_command_t[] ngx_http_rewrite_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8090,209631,ngx_http_rewrite_module_ctx,2,http\modules\ngx_http_rewrite_module.c.ngx_http_rewrite_module_ctx,,http\modules\ngx_http_rewrite_module.c,ngx_http_module_t ngx_http_rewrite_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8091,209643,ngx_http_rewrite_module,2,http\modules\ngx_http_rewrite_module.c.ngx_http_rewrite_module,,http\modules\ngx_http_rewrite_module.c,ngx_module_t ngx_http_rewrite_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8092,212414,ngx_http_scgi_main_conf_t,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_main_conf_t,,http\modules\ngx_http_scgi_module.c,struct ngx_http_scgi_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8093,212421,ngx_http_scgi_params_t,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_params_t,,http\modules\ngx_http_scgi_module.c,struct ngx_http_scgi_params_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8094,212430,ngx_http_scgi_loc_conf_t,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_loc_conf_t,,http\modules\ngx_http_scgi_module.c,struct ngx_http_scgi_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8095,212512,ngx_http_scgi_next_upstream_masks,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_next_upstream_masks,,http\modules\ngx_http_scgi_module.c,static ngx_conf_bitmask_t[] ngx_http_scgi_next_upstream_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8096,212563,ngx_http_scgi_module,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_module,,http\modules\ngx_http_scgi_module.c,ngx_module_t ngx_http_scgi_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8097,212564,ngx_http_scgi_commands,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_commands,,http\modules\ngx_http_scgi_module.c,static ngx_command_t[] ngx_http_scgi_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8098,213081,ngx_http_scgi_module_ctx,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_module_ctx,,http\modules\ngx_http_scgi_module.c,ngx_http_module_t ngx_http_scgi_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8099,213093,ngx_http_scgi_module,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_module,,http\modules\ngx_http_scgi_module.c,ngx_module_t ngx_http_scgi_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8100,213110,ngx_http_scgi_hide_headers,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_hide_headers,,http\modules\ngx_http_scgi_module.c,static ngx_str_t[] ngx_http_scgi_hide_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8101,213127,ngx_http_scgi_temp_path,2,http\modules\ngx_http_scgi_module.c.ngx_http_scgi_temp_path,,http\modules\ngx_http_scgi_module.c,ngx_path_init_t ngx_http_scgi_temp_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8102,217586,ngx_http_secure_link_conf_t,2,http\modules\ngx_http_secure_link_module.c.ngx_http_secure_link_conf_t,,http\modules\ngx_http_secure_link_module.c,struct ngx_http_secure_link_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8103,217589,ngx_http_secure_link_ctx_t,2,http\modules\ngx_http_secure_link_module.c.ngx_http_secure_link_ctx_t,,http\modules\ngx_http_secure_link_module.c,struct ngx_http_secure_link_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8104,217622,ngx_http_secure_link_commands,2,http\modules\ngx_http_secure_link_module.c.ngx_http_secure_link_commands,,http\modules\ngx_http_secure_link_module.c,static ngx_command_t[] ngx_http_secure_link_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8105,217675,ngx_http_secure_link_module_ctx,2,http\modules\ngx_http_secure_link_module.c.ngx_http_secure_link_module_ctx,,http\modules\ngx_http_secure_link_module.c,ngx_http_module_t ngx_http_secure_link_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8106,217687,ngx_http_secure_link_module,2,http\modules\ngx_http_secure_link_module.c.ngx_http_secure_link_module,,http\modules\ngx_http_secure_link_module.c,ngx_module_t ngx_http_secure_link_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8107,217704,ngx_http_secure_link_name,2,http\modules\ngx_http_secure_link_module.c.ngx_http_secure_link_name,,http\modules\ngx_http_secure_link_module.c,ngx_str_t ngx_http_secure_link_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8108,217709,ngx_http_secure_link_expires_name,2,http\modules\ngx_http_secure_link_module.c.ngx_http_secure_link_expires_name,,http\modules\ngx_http_secure_link_module.c,ngx_str_t ngx_http_secure_link_expires_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8109,218418,ngx_http_slice_loc_conf_t,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_slice_loc_conf_t,,http\modules\ngx_http_slice_filter_module.c,struct ngx_http_slice_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8110,218427,ngx_http_slice_ctx_t,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_slice_ctx_t,,http\modules\ngx_http_slice_filter_module.c,struct ngx_http_slice_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8111,218432,ngx_http_slice_content_range_t,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_slice_content_range_t,,http\modules\ngx_http_slice_filter_module.c,struct ngx_http_slice_content_range_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8112,218484,ngx_http_slice_filter_commands,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_slice_filter_commands,,http\modules\ngx_http_slice_filter_module.c,static ngx_command_t[] ngx_http_slice_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8113,218505,ngx_http_slice_filter_module_ctx,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_slice_filter_module_ctx,,http\modules\ngx_http_slice_filter_module.c,ngx_http_module_t ngx_http_slice_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8114,218517,ngx_http_slice_filter_module,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_slice_filter_module,,http\modules\ngx_http_slice_filter_module.c,ngx_module_t ngx_http_slice_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8115,218534,ngx_http_slice_range_name,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_slice_range_name,,http\modules\ngx_http_slice_filter_module.c,ngx_str_t ngx_http_slice_range_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8116,218539,ngx_http_next_header_filter,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_slice_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8117,218540,ngx_http_next_body_filter,2,http\modules\ngx_http_slice_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_slice_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8118,219976,ngx_http_split_clients_part_t,2,http\modules\ngx_http_split_clients_module.c.ngx_http_split_clients_part_t,,http\modules\ngx_http_split_clients_module.c,struct ngx_http_split_clients_part_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8119,219980,ngx_http_split_clients_ctx_t,2,http\modules\ngx_http_split_clients_module.c.ngx_http_split_clients_ctx_t,,http\modules\ngx_http_split_clients_module.c,struct ngx_http_split_clients_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8120,219995,ngx_http_split_clients_commands,2,http\modules\ngx_http_split_clients_module.c.ngx_http_split_clients_commands,,http\modules\ngx_http_split_clients_module.c,static ngx_command_t[] ngx_http_split_clients_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8121,220012,ngx_http_split_clients_module_ctx,2,http\modules\ngx_http_split_clients_module.c.ngx_http_split_clients_module_ctx,,http\modules\ngx_http_split_clients_module.c,ngx_http_module_t ngx_http_split_clients_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8122,220024,ngx_http_split_clients_module,2,http\modules\ngx_http_split_clients_module.c.ngx_http_split_clients_module,,http\modules\ngx_http_split_clients_module.c,ngx_module_t ngx_http_split_clients_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8123,220619,ngx_http_ssi_loc_conf_t,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_loc_conf_t,,http\modules\ngx_http_ssi_filter_module.c,struct ngx_http_ssi_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8124,220624,ngx_http_ssi_var_t,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_var_t,,http\modules\ngx_http_ssi_filter_module.c,struct ngx_http_ssi_var_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8125,220629,ngx_http_ssi_block_t,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_block_t,,http\modules\ngx_http_ssi_filter_module.c,struct ngx_http_ssi_block_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8126,220658,ngx_http_ssi_state_e,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_state_e,,http\modules\ngx_http_ssi_filter_module.c,enum ngx_http_ssi_state_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8127,220816,ngx_http_ssi_filter_commands,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_filter_commands,,http\modules\ngx_http_ssi_filter_module.c,static ngx_command_t[] ngx_http_ssi_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8128,220938,ngx_http_ssi_filter_module_ctx,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_filter_module_ctx,,http\modules\ngx_http_ssi_filter_module.c,ngx_http_module_t ngx_http_ssi_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8129,220950,ngx_http_ssi_filter_module,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_filter_module,,http\modules\ngx_http_ssi_filter_module.c,ngx_module_t ngx_http_ssi_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
8130,220967,ngx_http_next_header_filter,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_ssi_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8131,220968,ngx_http_next_body_filter,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_ssi_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8132,220969,ngx_http_ssi_string,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_string,,http\modules\ngx_http_ssi_filter_module.c,static u_char[] ngx_http_ssi_string,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8133,220973,ngx_http_ssi_none,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_none,,http\modules\ngx_http_ssi_filter_module.c,ngx_str_t ngx_http_ssi_none,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8134,220978,ngx_http_ssi_timefmt,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_timefmt,,http\modules\ngx_http_ssi_filter_module.c,ngx_str_t ngx_http_ssi_timefmt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8135,220983,ngx_http_ssi_null_string,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_null_string,,http\modules\ngx_http_ssi_filter_module.c,ngx_str_t ngx_http_ssi_null_string,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8136,220987,ngx_http_ssi_include_params,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_include_params,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_ssi_param_t[] ngx_http_ssi_include_params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8137,221036,ngx_http_ssi_echo_params,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_echo_params,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_ssi_param_t[] ngx_http_ssi_echo_params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8138,221069,ngx_http_ssi_config_params,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_config_params,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_ssi_param_t[] ngx_http_ssi_config_params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8139,221094,ngx_http_ssi_set_params,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_set_params,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_ssi_param_t[] ngx_http_ssi_set_params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8140,221119,ngx_http_ssi_if_params,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_if_params,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_ssi_param_t[] ngx_http_ssi_if_params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8141,221136,ngx_http_ssi_block_params,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_block_params,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_ssi_param_t[] ngx_http_ssi_block_params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8142,221153,ngx_http_ssi_no_params,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_no_params,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_ssi_param_t[] ngx_http_ssi_no_params,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8143,221162,ngx_http_ssi_commands,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_commands,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_ssi_command_t[] ngx_http_ssi_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8144,221253,ngx_http_ssi_vars,2,http\modules\ngx_http_ssi_filter_module.c.ngx_http_ssi_vars,,http\modules\ngx_http_ssi_filter_module.c,static ngx_http_variable_t[] ngx_http_ssi_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8145,228663,ngx_http_ssi_main_conf_t,2,http\modules\ngx_http_ssi_filter_module.h.ngx_http_ssi_main_conf_t,,http\modules\ngx_http_ssi_filter_module.h,struct ngx_http_ssi_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8146,228706,ngx_http_ssi_ctx_t,2,http\modules\ngx_http_ssi_filter_module.h.ngx_http_ssi_ctx_t,,http\modules\ngx_http_ssi_filter_module.h,struct ngx_http_ssi_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8147,228719,ngx_http_ssi_param_t,2,http\modules\ngx_http_ssi_filter_module.h.ngx_http_ssi_param_t,,http\modules\ngx_http_ssi_filter_module.h,struct ngx_http_ssi_param_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8148,228727,ngx_http_ssi_command_t,2,http\modules\ngx_http_ssi_filter_module.h.ngx_http_ssi_command_t,,http\modules\ngx_http_ssi_filter_module.h,struct ngx_http_ssi_command_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8149,228728,ngx_http_ssi_filter_module,2,http\modules\ngx_http_ssi_filter_module.h.ngx_http_ssi_filter_module,,http\modules\ngx_http_ssi_filter_module.h,ngx_module_t ngx_http_ssi_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8150,228824,ngx_http_ssl_protocols,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_protocols,,http\modules\ngx_http_ssl_module.c,static ngx_conf_bitmask_t[] ngx_http_ssl_protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8151,228855,ngx_http_ssl_verify,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_verify,,http\modules\ngx_http_ssl_module.c,static ngx_conf_enum_t[] ngx_http_ssl_verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8152,228878,ngx_http_ssl_ocsp,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_ocsp,,http\modules\ngx_http_ssl_module.c,static ngx_conf_enum_t[] ngx_http_ssl_ocsp,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8153,228897,ngx_http_ssl_deprecated,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_deprecated,,http\modules\ngx_http_ssl_module.c,ngx_conf_deprecated_t ngx_http_ssl_deprecated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8154,228904,ngx_http_ssl_conf_command_post,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_conf_command_post,,http\modules\ngx_http_ssl_module.c,ngx_conf_post_t ngx_http_ssl_conf_command_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8155,228909,ngx_http_ssl_commands,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_commands,,http\modules\ngx_http_ssl_module.c,static ngx_command_t[] ngx_http_ssl_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8156,229319,ngx_http_ssl_module_ctx,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_module_ctx,,http\modules\ngx_http_ssl_module.c,ngx_http_module_t ngx_http_ssl_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8157,229331,ngx_http_ssl_module,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_module,,http\modules\ngx_http_ssl_module.c,ngx_module_t ngx_http_ssl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8158,229348,ngx_http_ssl_vars,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_vars,,http\modules\ngx_http_ssl_module.c,static ngx_http_variable_t[] ngx_http_ssl_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8159,229565,ngx_http_ssl_sess_id_ctx,2,http\modules\ngx_http_ssl_module.c.ngx_http_ssl_sess_id_ctx,,http\modules\ngx_http_ssl_module.c,ngx_str_t ngx_http_ssl_sess_id_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8160,232045,ngx_http_ssl_srv_conf_t,2,http\modules\ngx_http_ssl_module.h.ngx_http_ssl_srv_conf_t,,http\modules\ngx_http_ssl_module.h,struct ngx_http_ssl_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8161,232046,ngx_http_ssl_module,2,http\modules\ngx_http_ssl_module.h.ngx_http_ssl_module,,http\modules\ngx_http_ssl_module.h,ngx_module_t ngx_http_ssl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8162,232068,ngx_http_static_module_ctx,2,http\modules\ngx_http_static_module.c.ngx_http_static_module_ctx,,http\modules\ngx_http_static_module.c,ngx_http_module_t ngx_http_static_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8163,232080,ngx_http_static_module,2,http\modules\ngx_http_static_module.c.ngx_http_static_module,,http\modules\ngx_http_static_module.c,ngx_module_t ngx_http_static_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8164,232902,ngx_http_status_commands,2,http\modules\ngx_http_stub_status_module.c.ngx_http_status_commands,,http\modules\ngx_http_stub_status_module.c,static ngx_command_t[] ngx_http_status_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8165,232921,ngx_http_stub_status_module_ctx,2,http\modules\ngx_http_stub_status_module.c.ngx_http_stub_status_module_ctx,,http\modules\ngx_http_stub_status_module.c,ngx_http_module_t ngx_http_stub_status_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8166,232933,ngx_http_stub_status_module,2,http\modules\ngx_http_stub_status_module.c.ngx_http_stub_status_module,,http\modules\ngx_http_stub_status_module.c,ngx_module_t ngx_http_stub_status_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8167,232950,ngx_http_stub_status_vars,2,http\modules\ngx_http_stub_status_module.c.ngx_http_stub_status_vars,,http\modules\ngx_http_stub_status_module.c,static ngx_http_variable_t[] ngx_http_stub_status_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8168,233414,ngx_http_sub_pair_t,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_pair_t,,http\modules\ngx_http_sub_filter_module.c,struct ngx_http_sub_pair_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8169,233418,ngx_http_sub_match_t,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_match_t,,http\modules\ngx_http_sub_filter_module.c,struct ngx_http_sub_match_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8170,233432,ngx_http_sub_tables_t,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_tables_t,,http\modules\ngx_http_sub_filter_module.c,struct ngx_http_sub_tables_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8171,233442,ngx_http_sub_loc_conf_t,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_loc_conf_t,,http\modules\ngx_http_sub_filter_module.c,struct ngx_http_sub_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8172,233462,ngx_http_sub_ctx_t,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_ctx_t,,http\modules\ngx_http_sub_filter_module.c,struct ngx_http_sub_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8173,233463,ngx_http_sub_cmp_index,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_cmp_index,,http\modules\ngx_http_sub_filter_module.c,ngx_uint_t ngx_http_sub_cmp_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8174,233521,ngx_http_sub_filter_commands,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_filter_commands,,http\modules\ngx_http_sub_filter_module.c,static ngx_command_t[] ngx_http_sub_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8175,233591,ngx_http_sub_filter_module_ctx,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_filter_module_ctx,,http\modules\ngx_http_sub_filter_module.c,ngx_http_module_t ngx_http_sub_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8176,233603,ngx_http_sub_filter_module,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_sub_filter_module,,http\modules\ngx_http_sub_filter_module.c,ngx_module_t ngx_http_sub_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
8177,233620,ngx_http_next_header_filter,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_sub_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8178,233621,ngx_http_next_body_filter,2,http\modules\ngx_http_sub_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_sub_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8179,236479,ngx_http_try_file_t,2,http\modules\ngx_http_try_files_module.c.ngx_http_try_file_t,,http\modules\ngx_http_try_files_module.c,struct ngx_http_try_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8180,236482,ngx_http_try_files_loc_conf_t,2,http\modules\ngx_http_try_files_module.c.ngx_http_try_files_loc_conf_t,,http\modules\ngx_http_try_files_module.c,struct ngx_http_try_files_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8181,236505,ngx_http_try_files_commands,2,http\modules\ngx_http_try_files_module.c.ngx_http_try_files_commands,,http\modules\ngx_http_try_files_module.c,static ngx_command_t[] ngx_http_try_files_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8182,236522,ngx_http_try_files_module_ctx,2,http\modules\ngx_http_try_files_module.c.ngx_http_try_files_module_ctx,,http\modules\ngx_http_try_files_module.c,ngx_http_module_t ngx_http_try_files_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8183,236534,ngx_http_try_files_module,2,http\modules\ngx_http_try_files_module.c.ngx_http_try_files_module,,http\modules\ngx_http_try_files_module.c,ngx_module_t ngx_http_try_files_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8184,237658,ngx_http_upstream_chash_point_t,2,http\modules\ngx_http_upstream_hash_module.c.ngx_http_upstream_chash_point_t,,http\modules\ngx_http_upstream_hash_module.c,struct ngx_http_upstream_chash_point_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8185,237668,ngx_http_upstream_chash_points_t,2,http\modules\ngx_http_upstream_hash_module.c.ngx_http_upstream_chash_points_t,,http\modules\ngx_http_upstream_hash_module.c,struct ngx_http_upstream_chash_points_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8186,237672,ngx_http_upstream_hash_srv_conf_t,2,http\modules\ngx_http_upstream_hash_module.c.ngx_http_upstream_hash_srv_conf_t,,http\modules\ngx_http_upstream_hash_module.c,struct ngx_http_upstream_hash_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8187,237681,ngx_http_upstream_hash_peer_data_t,2,http\modules\ngx_http_upstream_hash_module.c.ngx_http_upstream_hash_peer_data_t,,http\modules\ngx_http_upstream_hash_module.c,struct ngx_http_upstream_hash_peer_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8188,237706,ngx_libc_cdecl,2,http\modules\ngx_http_upstream_hash_module.c.ngx_libc_cdecl,,http\modules\ngx_http_upstream_hash_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8189,237744,ngx_http_upstream_hash_commands,2,http\modules\ngx_http_upstream_hash_module.c.ngx_http_upstream_hash_commands,,http\modules\ngx_http_upstream_hash_module.c,static ngx_command_t[] ngx_http_upstream_hash_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8190,237759,ngx_http_upstream_hash_module_ctx,2,http\modules\ngx_http_upstream_hash_module.c.ngx_http_upstream_hash_module_ctx,,http\modules\ngx_http_upstream_hash_module.c,ngx_http_module_t ngx_http_upstream_hash_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8191,237771,ngx_http_upstream_hash_module,2,http\modules\ngx_http_upstream_hash_module.c.ngx_http_upstream_hash_module,,http\modules\ngx_http_upstream_hash_module.c,ngx_module_t ngx_http_upstream_hash_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8192,238759,ngx_libc_cdecl,2,http\modules\ngx_http_upstream_hash_module.c.ngx_libc_cdecl,,http\modules\ngx_http_upstream_hash_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8193,239585,ngx_http_upstream_ip_hash_peer_data_t,2,http\modules\ngx_http_upstream_ip_hash_module.c.ngx_http_upstream_ip_hash_peer_data_t,,http\modules\ngx_http_upstream_ip_hash_module.c,struct ngx_http_upstream_ip_hash_peer_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8194,239605,ngx_http_upstream_ip_hash_commands,2,http\modules\ngx_http_upstream_ip_hash_module.c.ngx_http_upstream_ip_hash_commands,,http\modules\ngx_http_upstream_ip_hash_module.c,static ngx_command_t[] ngx_http_upstream_ip_hash_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8195,239620,ngx_http_upstream_ip_hash_module_ctx,2,http\modules\ngx_http_upstream_ip_hash_module.c.ngx_http_upstream_ip_hash_module_ctx,,http\modules\ngx_http_upstream_ip_hash_module.c,ngx_http_module_t ngx_http_upstream_ip_hash_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8196,239632,ngx_http_upstream_ip_hash_module,2,http\modules\ngx_http_upstream_ip_hash_module.c.ngx_http_upstream_ip_hash_module,,http\modules\ngx_http_upstream_ip_hash_module.c,ngx_module_t ngx_http_upstream_ip_hash_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8197,239649,ngx_http_upstream_ip_hash_pseudo_addr,2,http\modules\ngx_http_upstream_ip_hash_module.c.ngx_http_upstream_ip_hash_pseudo_addr,,http\modules\ngx_http_upstream_ip_hash_module.c,static u_char[3] ngx_http_upstream_ip_hash_pseudo_addr,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8198,240239,ngx_http_upstream_keepalive_srv_conf_t,2,http\modules\ngx_http_upstream_keepalive_module.c.ngx_http_upstream_keepalive_srv_conf_t,,http\modules\ngx_http_upstream_keepalive_module.c,struct ngx_http_upstream_keepalive_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8199,240246,ngx_http_upstream_keepalive_cache_t,2,http\modules\ngx_http_upstream_keepalive_module.c.ngx_http_upstream_keepalive_cache_t,,http\modules\ngx_http_upstream_keepalive_module.c,struct ngx_http_upstream_keepalive_cache_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8200,240255,ngx_http_upstream_keepalive_peer_data_t,2,http\modules\ngx_http_upstream_keepalive_module.c.ngx_http_upstream_keepalive_peer_data_t,,http\modules\ngx_http_upstream_keepalive_module.c,struct ngx_http_upstream_keepalive_peer_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8201,240302,ngx_http_upstream_keepalive_commands,2,http\modules\ngx_http_upstream_keepalive_module.c.ngx_http_upstream_keepalive_commands,,http\modules\ngx_http_upstream_keepalive_module.c,static ngx_command_t[] ngx_http_upstream_keepalive_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8202,240353,ngx_http_upstream_keepalive_module_ctx,2,http\modules\ngx_http_upstream_keepalive_module.c.ngx_http_upstream_keepalive_module_ctx,,http\modules\ngx_http_upstream_keepalive_module.c,ngx_http_module_t ngx_http_upstream_keepalive_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8203,240365,ngx_http_upstream_keepalive_module,2,http\modules\ngx_http_upstream_keepalive_module.c.ngx_http_upstream_keepalive_module,,http\modules\ngx_http_upstream_keepalive_module.c,ngx_module_t ngx_http_upstream_keepalive_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8204,241434,ngx_http_upstream_least_conn_commands,2,http\modules\ngx_http_upstream_least_conn_module.c.ngx_http_upstream_least_conn_commands,,http\modules\ngx_http_upstream_least_conn_module.c,static ngx_command_t[] ngx_http_upstream_least_conn_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8205,241449,ngx_http_upstream_least_conn_module_ctx,2,http\modules\ngx_http_upstream_least_conn_module.c.ngx_http_upstream_least_conn_module_ctx,,http\modules\ngx_http_upstream_least_conn_module.c,ngx_http_module_t ngx_http_upstream_least_conn_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8206,241461,ngx_http_upstream_least_conn_module,2,http\modules\ngx_http_upstream_least_conn_module.c.ngx_http_upstream_least_conn_module,,http\modules\ngx_http_upstream_least_conn_module.c,ngx_module_t ngx_http_upstream_least_conn_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8207,242165,ngx_http_upstream_random_range_t,2,http\modules\ngx_http_upstream_random_module.c.ngx_http_upstream_random_range_t,,http\modules\ngx_http_upstream_random_module.c,struct ngx_http_upstream_random_range_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8208,242169,ngx_http_upstream_random_srv_conf_t,2,http\modules\ngx_http_upstream_random_module.c.ngx_http_upstream_random_srv_conf_t,,http\modules\ngx_http_upstream_random_module.c,struct ngx_http_upstream_random_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8209,242174,ngx_http_upstream_random_peer_data_t,2,http\modules\ngx_http_upstream_random_module.c.ngx_http_upstream_random_peer_data_t,,http\modules\ngx_http_upstream_random_module.c,struct ngx_http_upstream_random_peer_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8210,242223,ngx_http_upstream_random_commands,2,http\modules\ngx_http_upstream_random_module.c.ngx_http_upstream_random_commands,,http\modules\ngx_http_upstream_random_module.c,static ngx_command_t[] ngx_http_upstream_random_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8211,242240,ngx_http_upstream_random_module_ctx,2,http\modules\ngx_http_upstream_random_module.c.ngx_http_upstream_random_module_ctx,,http\modules\ngx_http_upstream_random_module.c,ngx_http_module_t ngx_http_upstream_random_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8212,242252,ngx_http_upstream_random_module,2,http\modules\ngx_http_upstream_random_module.c.ngx_http_upstream_random_module,,http\modules\ngx_http_upstream_random_module.c,ngx_module_t ngx_http_upstream_random_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8213,243317,ngx_http_upstream_zone_commands,2,http\modules\ngx_http_upstream_zone_module.c.ngx_http_upstream_zone_commands,,http\modules\ngx_http_upstream_zone_module.c,static ngx_command_t[] ngx_http_upstream_zone_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8214,243332,ngx_http_upstream_zone_module_ctx,2,http\modules\ngx_http_upstream_zone_module.c.ngx_http_upstream_zone_module_ctx,,http\modules\ngx_http_upstream_zone_module.c,ngx_http_module_t ngx_http_upstream_zone_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8215,243344,ngx_http_upstream_zone_module,2,http\modules\ngx_http_upstream_zone_module.c.ngx_http_upstream_zone_module,,http\modules\ngx_http_upstream_zone_module.c,ngx_module_t ngx_http_upstream_zone_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8216,244142,ngx_http_userid_conf_t,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_conf_t,,http\modules\ngx_http_userid_filter_module.c,struct ngx_http_userid_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8217,244156,ngx_http_userid_ctx_t,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_ctx_t,,http\modules\ngx_http_userid_filter_module.c,struct ngx_http_userid_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8218,244247,start_value,2,http\modules\ngx_http_userid_filter_module.c.start_value,,http\modules\ngx_http_userid_filter_module.c,uint32_t start_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8219,244248,sequencer_v1,2,http\modules\ngx_http_userid_filter_module.c.sequencer_v1,,http\modules\ngx_http_userid_filter_module.c,uint32_t sequencer_v1,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8220,244252,sequencer_v2,2,http\modules\ngx_http_userid_filter_module.c.sequencer_v2,,http\modules\ngx_http_userid_filter_module.c,uint32_t sequencer_v2,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8221,244260,ngx_http_next_header_filter,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_userid_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8222,244261,ngx_http_userid_state,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_state,,http\modules\ngx_http_userid_filter_module.c,static ngx_conf_enum_t[] ngx_http_userid_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8223,244292,ngx_http_userid_flags,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_flags,,http\modules\ngx_http_userid_filter_module.c,static ngx_conf_bitmask_t[] ngx_http_userid_flags,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8224,244347,ngx_http_userid_domain_p,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_domain_p,,http\modules\ngx_http_userid_filter_module.c,ngx_conf_post_handler_pt ngx_http_userid_domain_p,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8225,244351,ngx_http_userid_path_p,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_path_p,,http\modules\ngx_http_userid_filter_module.c,ngx_conf_post_handler_pt ngx_http_userid_path_p,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8226,244355,ngx_http_userid_p3p_p,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_p3p_p,,http\modules\ngx_http_userid_filter_module.c,ngx_conf_post_handler_pt ngx_http_userid_p3p_p,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8227,244359,ngx_http_userid_commands,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_commands,,http\modules\ngx_http_userid_filter_module.c,static ngx_command_t[] ngx_http_userid_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8228,244508,ngx_http_userid_filter_module_ctx,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_filter_module_ctx,,http\modules\ngx_http_userid_filter_module.c,ngx_http_module_t ngx_http_userid_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8229,244520,ngx_http_userid_filter_module,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_filter_module,,http\modules\ngx_http_userid_filter_module.c,ngx_module_t ngx_http_userid_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8230,244537,ngx_http_userid_got,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_got,,http\modules\ngx_http_userid_filter_module.c,ngx_str_t ngx_http_userid_got,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8231,244542,ngx_http_userid_set,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_set,,http\modules\ngx_http_userid_filter_module.c,ngx_str_t ngx_http_userid_set,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8232,244547,ngx_http_userid_reset,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_reset,,http\modules\ngx_http_userid_filter_module.c,ngx_str_t ngx_http_userid_reset,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8233,244552,ngx_http_userid_reset_index,2,http\modules\ngx_http_userid_filter_module.c.ngx_http_userid_reset_index,,http\modules\ngx_http_userid_filter_module.c,ngx_uint_t ngx_http_userid_reset_index,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8234,246664,ngx_http_uwsgi_main_conf_t,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_main_conf_t,,http\modules\ngx_http_uwsgi_module.c,struct ngx_http_uwsgi_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8235,246671,ngx_http_uwsgi_params_t,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_params_t,,http\modules\ngx_http_uwsgi_module.c,struct ngx_http_uwsgi_params_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8236,246690,ngx_http_uwsgi_loc_conf_t,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_loc_conf_t,,http\modules\ngx_http_uwsgi_module.c,struct ngx_http_uwsgi_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8237,246772,ngx_http_uwsgi_modifier_bounds,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_modifier_bounds,,http\modules\ngx_http_uwsgi_module.c,ngx_conf_num_bounds_t ngx_http_uwsgi_modifier_bounds,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8238,246779,ngx_http_uwsgi_next_upstream_masks,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_next_upstream_masks,,http\modules\ngx_http_uwsgi_module.c,static ngx_conf_bitmask_t[] ngx_http_uwsgi_next_upstream_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8239,246830,ngx_http_uwsgi_module,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_module,,http\modules\ngx_http_uwsgi_module.c,ngx_module_t ngx_http_uwsgi_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8240,246831,ngx_http_uwsgi_commands,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_commands,,http\modules\ngx_http_uwsgi_module.c,static ngx_command_t[] ngx_http_uwsgi_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8241,247398,ngx_http_uwsgi_module_ctx,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_module_ctx,,http\modules\ngx_http_uwsgi_module.c,ngx_http_module_t ngx_http_uwsgi_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8242,247410,ngx_http_uwsgi_module,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_module,,http\modules\ngx_http_uwsgi_module.c,ngx_module_t ngx_http_uwsgi_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8243,247427,ngx_http_uwsgi_hide_headers,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_hide_headers,,http\modules\ngx_http_uwsgi_module.c,static ngx_str_t[] ngx_http_uwsgi_hide_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8244,247442,ngx_http_uwsgi_temp_path,2,http\modules\ngx_http_uwsgi_module.c.ngx_http_uwsgi_temp_path,,http\modules\ngx_http_uwsgi_module.c,ngx_path_init_t ngx_http_uwsgi_temp_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8245,252231,ngx_http_xslt_file_t,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_file_t,,http\modules\ngx_http_xslt_filter_module.c,struct ngx_http_xslt_file_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8246,252235,ngx_http_xslt_filter_main_conf_t,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_filter_main_conf_t,,http\modules\ngx_http_xslt_filter_module.c,struct ngx_http_xslt_filter_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8247,252240,ngx_http_xslt_param_t,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_param_t,,http\modules\ngx_http_xslt_filter_module.c,struct ngx_http_xslt_param_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8248,252244,ngx_http_xslt_sheet_t,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_sheet_t,,http\modules\ngx_http_xslt_filter_module.c,struct ngx_http_xslt_sheet_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8249,252252,ngx_http_xslt_filter_loc_conf_t,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_filter_loc_conf_t,,http\modules\ngx_http_xslt_filter_module.c,struct ngx_http_xslt_filter_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8250,252260,ngx_http_xslt_filter_ctx_t,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_filter_ctx_t,,http\modules\ngx_http_xslt_filter_module.c,struct ngx_http_xslt_filter_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8251,252376,ngx_http_xslt_default_types,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_default_types,,http\modules\ngx_http_xslt_filter_module.c,static ngx_str_t[] ngx_http_xslt_default_types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8252,252383,ngx_http_xslt_filter_commands,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_filter_commands,,http\modules\ngx_http_xslt_filter_module.c,static ngx_command_t[] ngx_http_xslt_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8253,252477,ngx_http_xslt_filter_module_ctx,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_filter_module_ctx,,http\modules\ngx_http_xslt_filter_module.c,ngx_http_module_t ngx_http_xslt_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8254,252489,ngx_http_xslt_filter_module,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_xslt_filter_module,,http\modules\ngx_http_xslt_filter_module.c,ngx_module_t ngx_http_xslt_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
8255,252506,ngx_http_next_header_filter,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_next_header_filter,,http\modules\ngx_http_xslt_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8256,252507,ngx_http_next_body_filter,2,http\modules\ngx_http_xslt_filter_module.c.ngx_http_next_body_filter,,http\modules\ngx_http_xslt_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8257,253154,ngx_cdecl,2,http\modules\ngx_http_xslt_filter_module.c.ngx_cdecl,,http\modules\ngx_http_xslt_filter_module.c,static void ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8258,255001,ngx_http_perl_main_conf_t,2,http\modules\perl\ngx_http_perl_module.c.ngx_http_perl_main_conf_t,,http\modules\perl\ngx_http_perl_module.c,struct ngx_http_perl_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8259,255005,ngx_http_perl_loc_conf_t,2,http\modules\perl\ngx_http_perl_module.c.ngx_http_perl_loc_conf_t,,http\modules\perl\ngx_http_perl_module.c,struct ngx_http_perl_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8260,255009,ngx_http_perl_variable_t,2,http\modules\perl\ngx_http_perl_module.c.ngx_http_perl_variable_t,,http\modules\perl\ngx_http_perl_module.c,struct ngx_http_perl_variable_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8261,255077,ngx_http_perl_commands,2,http\modules\perl\ngx_http_perl_module.c.ngx_http_perl_commands,,http\modules\perl\ngx_http_perl_module.c,static ngx_command_t[] ngx_http_perl_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8262,255128,ngx_http_perl_module_ctx,2,http\modules\perl\ngx_http_perl_module.c.ngx_http_perl_module_ctx,,http\modules\perl\ngx_http_perl_module.c,ngx_http_module_t ngx_http_perl_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8263,255140,ngx_http_perl_module,2,http\modules\perl\ngx_http_perl_module.c.ngx_http_perl_module,,http\modules\perl\ngx_http_perl_module.c,ngx_module_t ngx_http_perl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,7,0,1,1,0,0,,0,0,0,0,0,
8264,255157,ngx_null_name,2,http\modules\perl\ngx_http_perl_module.c.ngx_null_name,,http\modules\perl\ngx_http_perl_module.c,ngx_str_t ngx_null_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8265,255161,nginx_stash,2,http\modules\perl\ngx_http_perl_module.c.nginx_stash,,http\modules\perl\ngx_http_perl_module.c,HV* nginx_stash,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8266,256011,ngx_int_t,2,http\modules\perl\ngx_http_perl_module.c.ngx_int_t,,http\modules\perl\ngx_http_perl_module.c,static ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8267,256014,ngx_int_t,2,http\modules\perl\ngx_http_perl_module.c.ngx_int_t,,http\modules\perl\ngx_http_perl_module.c,static ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8268,256588,ngx_http_perl_ctx_t,2,http\modules\perl\ngx_http_perl_module.h.ngx_http_perl_ctx_t,,http\modules\perl\ngx_http_perl_module.h,struct ngx_http_perl_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8269,256593,ngx_http_perl_var_t,2,http\modules\perl\ngx_http_perl_module.h.ngx_http_perl_var_t,,http\modules\perl\ngx_http_perl_module.h,struct ngx_http_perl_var_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8270,256594,ngx_http_perl_module,2,http\modules\perl\ngx_http_perl_module.h.ngx_http_perl_module,,http\modules\perl\ngx_http_perl_module.h,ngx_module_t ngx_http_perl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8271,256766,ngx_http_max_module,2,http\ngx_http.c.ngx_http_max_module,,http\ngx_http.c,ngx_uint_t ngx_http_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8272,256767,ngx_http_top_header_filter,2,http\ngx_http.c.ngx_http_top_header_filter,,http\ngx_http.c,ngx_http_output_header_filter_pt ngx_http_top_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8273,256768,ngx_http_top_body_filter,2,http\ngx_http.c.ngx_http_top_body_filter,,http\ngx_http.c,ngx_http_output_body_filter_pt ngx_http_top_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8274,256769,ngx_http_top_request_body_filter,2,http\ngx_http.c.ngx_http_top_request_body_filter,,http\ngx_http.c,ngx_http_request_body_filter_pt ngx_http_top_request_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8275,256770,ngx_http_html_default_types,2,http\ngx_http.c.ngx_http_html_default_types,,http\ngx_http.c,ngx_str_t[] ngx_http_html_default_types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8276,256777,ngx_http_commands,2,http\ngx_http.c.ngx_http_commands,,http\ngx_http.c,static ngx_command_t[] ngx_http_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8277,256794,ngx_http_module_ctx,2,http\ngx_http.c.ngx_http_module_ctx,,http\ngx_http.c,ngx_core_module_t ngx_http_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8278,256802,ngx_http_module,2,http\ngx_http.c.ngx_http_module,,http\ngx_http.c,ngx_module_t ngx_http_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8279,260607,ngx_libc_cdecl,2,http\ngx_http.c.ngx_libc_cdecl,,http\ngx_http.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8280,261721,ngx_http_status_t,2,http\ngx_http.h.ngx_http_status_t,,http\ngx_http.h,struct ngx_http_status_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8281,261968,ngx_http_module,2,http\ngx_http.h.ngx_http_module,,http\ngx_http.h,ngx_module_t ngx_http_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8282,261969,ngx_http_html_default_types,2,http\ngx_http.h.ngx_http_html_default_types,,http\ngx_http.h,extern ngx_str_t[] ngx_http_html_default_types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8283,261971,ngx_http_top_header_filter,2,http\ngx_http.h.ngx_http_top_header_filter,,http\ngx_http.h,ngx_http_output_header_filter_pt ngx_http_top_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8284,261972,ngx_http_top_body_filter,2,http\ngx_http.h.ngx_http_top_body_filter,,http\ngx_http.h,ngx_http_output_body_filter_pt ngx_http_top_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8285,261973,ngx_http_top_request_body_filter,2,http\ngx_http.h.ngx_http_top_request_body_filter,,http\ngx_http.h,ngx_http_request_body_filter_pt ngx_http_top_request_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8286,261988,ngx_http_cache_valid_t,2,http\ngx_http_cache.h.ngx_http_cache_valid_t,,http\ngx_http_cache.h,struct ngx_http_cache_valid_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8287,262018,ngx_http_file_cache_node_t,2,http\ngx_http_cache.h.ngx_http_file_cache_node_t,,http\ngx_http_cache.h,struct ngx_http_file_cache_node_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8288,262113,ngx_http_file_cache_header_t,2,http\ngx_http_cache.h.ngx_http_file_cache_header_t,,http\ngx_http_cache.h,struct ngx_http_file_cache_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8289,262123,ngx_http_file_cache_sh_t,2,http\ngx_http_cache.h.ngx_http_file_cache_sh_t,,http\ngx_http_cache.h,struct ngx_http_file_cache_sh_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8290,262211,ngx_http_cache_status,2,http\ngx_http_cache.h.ngx_http_cache_status,,http\ngx_http_cache.h,extern ngx_str_t[] ngx_http_cache_status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8291,262228,ngx_http_conf_ctx_t,2,http\ngx_http_config.h.ngx_http_conf_ctx_t,,http\ngx_http_config.h,struct ngx_http_conf_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8292,262275,ngx_http_module_t,2,http\ngx_http_config.h.ngx_http_module_t,,http\ngx_http_config.h,struct ngx_http_module_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8293,262289,ngx_http_copy_filter_conf_t,2,http\ngx_http_copy_filter_module.c.ngx_http_copy_filter_conf_t,,http\ngx_http_copy_filter_module.c,struct ngx_http_copy_filter_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8294,262307,ngx_http_copy_filter_commands,2,http\ngx_http_copy_filter_module.c.ngx_http_copy_filter_commands,,http\ngx_http_copy_filter_module.c,static ngx_command_t[] ngx_http_copy_filter_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8295,262328,ngx_http_copy_filter_module_ctx,2,http\ngx_http_copy_filter_module.c.ngx_http_copy_filter_module_ctx,,http\ngx_http_copy_filter_module.c,ngx_http_module_t ngx_http_copy_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8296,262340,ngx_http_copy_filter_module,2,http\ngx_http_copy_filter_module.c.ngx_http_copy_filter_module,,http\ngx_http_copy_filter_module.c,ngx_module_t ngx_http_copy_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
8297,262357,ngx_http_next_body_filter,2,http\ngx_http_copy_filter_module.c.ngx_http_next_body_filter,,http\ngx_http_copy_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8298,262636,ngx_http_method_name_t,2,http\ngx_http_core_module.c.ngx_http_method_name_t,,http\ngx_http_core_module.c,struct ngx_http_method_name_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8299,262847,ngx_http_core_lowat_post,2,http\ngx_http_core_module.c.ngx_http_core_lowat_post,,http\ngx_http_core_module.c,ngx_conf_post_t ngx_http_core_lowat_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8300,262852,ngx_http_core_pool_size_p,2,http\ngx_http_core_module.c.ngx_http_core_pool_size_p,,http\ngx_http_core_module.c,ngx_conf_post_handler_pt ngx_http_core_pool_size_p,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8301,262856,ngx_http_core_request_body_in_file,2,http\ngx_http_core_module.c.ngx_http_core_request_body_in_file,,http\ngx_http_core_module.c,static ngx_conf_enum_t[] ngx_http_core_request_body_in_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8302,262881,ngx_http_core_satisfy,2,http\ngx_http_core_module.c.ngx_http_core_satisfy,,http\ngx_http_core_module.c,static ngx_conf_enum_t[] ngx_http_core_satisfy,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8303,262896,ngx_http_core_lingering_close,2,http\ngx_http_core_module.c.ngx_http_core_lingering_close,,http\ngx_http_core_module.c,static ngx_conf_enum_t[] ngx_http_core_lingering_close,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8304,262915,ngx_http_core_server_tokens,2,http\ngx_http_core_module.c.ngx_http_core_server_tokens,,http\ngx_http_core_module.c,static ngx_conf_enum_t[] ngx_http_core_server_tokens,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8305,262934,ngx_http_core_if_modified_since,2,http\ngx_http_core_module.c.ngx_http_core_if_modified_since,,http\ngx_http_core_module.c,static ngx_conf_enum_t[] ngx_http_core_if_modified_since,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8306,262953,ngx_http_core_keepalive_disable,2,http\ngx_http_core_module.c.ngx_http_core_keepalive_disable,,http\ngx_http_core_module.c,static ngx_conf_bitmask_t[] ngx_http_core_keepalive_disable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8307,262972,ngx_http_client_temp_path,2,http\ngx_http_core_module.c.ngx_http_client_temp_path,,http\ngx_http_core_module.c,ngx_path_init_t ngx_http_client_temp_path,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8308,262982,ngx_http_core_commands,2,http\ngx_http_core_module.c.ngx_http_core_commands,,http\ngx_http_core_module.c,static ngx_command_t[] ngx_http_core_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8309,264176,ngx_http_core_module_ctx,2,http\ngx_http_core_module.c.ngx_http_core_module_ctx,,http\ngx_http_core_module.c,ngx_http_module_t ngx_http_core_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8310,264188,ngx_http_core_module,2,http\ngx_http_core_module.c.ngx_http_core_module,,http\ngx_http_core_module.c,ngx_module_t ngx_http_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
8311,264205,ngx_http_core_get_method,2,http\ngx_http_core_module.c.ngx_http_core_get_method,,http\ngx_http_core_module.c,ngx_str_t ngx_http_core_get_method,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8312,270841,ngx_http_core_text_html_type,2,http\ngx_http_core_module.c.ngx_http_core_text_html_type,,http\ngx_http_core_module.c,ngx_str_t ngx_http_core_text_html_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8313,270846,ngx_http_core_image_gif_type,2,http\ngx_http_core_module.c.ngx_http_core_image_gif_type,,http\ngx_http_core_module.c,ngx_str_t ngx_http_core_image_gif_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8314,270851,ngx_http_core_image_jpeg_type,2,http\ngx_http_core_module.c.ngx_http_core_image_jpeg_type,,http\ngx_http_core_module.c,ngx_str_t ngx_http_core_image_jpeg_type,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8315,270856,ngx_http_core_default_types,2,http\ngx_http_core_module.c.ngx_http_core_default_types,,http\ngx_http_core_module.c,static ngx_hash_key_t[] ngx_http_core_default_types,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8316,272946,ngx_methods_names,2,http\ngx_http_core_module.c.ngx_methods_names,,http\ngx_http_core_module.c,static ngx_http_method_name_t[] ngx_methods_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8317,274454,ngx_http_listen_opt_t,2,http\ngx_http_core_module.h.ngx_http_listen_opt_t,,http\ngx_http_core_module.h,struct ngx_http_listen_opt_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8318,274474,ngx_http_phases,2,http\ngx_http_core_module.h.ngx_http_phases,,http\ngx_http_core_module.h,enum ngx_http_phases,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8319,274491,ngx_http_phase_engine_t,2,http\ngx_http_core_module.h.ngx_http_phase_engine_t,,http\ngx_http_core_module.h,struct ngx_http_phase_engine_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8320,274494,ngx_http_phase_t,2,http\ngx_http_core_module.h.ngx_http_phase_t,,http\ngx_http_core_module.h,struct ngx_http_phase_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8321,274518,ngx_http_core_main_conf_t,2,http\ngx_http_core_module.h.ngx_http_core_main_conf_t,,http\ngx_http_core_module.h,struct ngx_http_core_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8322,274536,ngx_http_core_srv_conf_t,2,http\ngx_http_core_module.h.ngx_http_core_srv_conf_t,,http\ngx_http_core_module.h,struct ngx_http_core_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8323,274541,ngx_http_server_name_t,2,http\ngx_http_core_module.h.ngx_http_server_name_t,,http\ngx_http_core_module.h,struct ngx_http_server_name_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8324,274546,ngx_http_virtual_names_t,2,http\ngx_http_core_module.h.ngx_http_virtual_names_t,,http\ngx_http_core_module.h,struct ngx_http_virtual_names_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8325,274556,ngx_http_in_addr_t,2,http\ngx_http_core_module.h.ngx_http_in_addr_t,,http\ngx_http_core_module.h,struct ngx_http_in_addr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8326,274560,ngx_http_port_t,2,http\ngx_http_core_module.h.ngx_http_port_t,,http\ngx_http_core_module.h,struct ngx_http_port_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8327,274565,ngx_http_conf_port_t,2,http\ngx_http_core_module.h.ngx_http_conf_port_t,,http\ngx_http_core_module.h,struct ngx_http_conf_port_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8328,274575,ngx_http_conf_addr_t,2,http\ngx_http_core_module.h.ngx_http_conf_addr_t,,http\ngx_http_core_module.h,struct ngx_http_conf_addr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8329,274581,ngx_http_err_page_t,2,http\ngx_http_core_module.h.ngx_http_err_page_t,,http\ngx_http_core_module.h,struct ngx_http_err_page_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8330,274683,ngx_http_location_queue_t,2,http\ngx_http_core_module.h.ngx_http_location_queue_t,,http\ngx_http_core_module.h,struct ngx_http_location_queue_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8331,274875,ngx_http_core_module,2,http\ngx_http_core_module.h.ngx_http_core_module,,http\ngx_http_core_module.h,ngx_module_t ngx_http_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8332,274876,ngx_http_max_module,2,http\ngx_http_core_module.h.ngx_http_max_module,,http\ngx_http_core_module.h,ngx_uint_t ngx_http_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8333,274877,ngx_http_core_get_method,2,http\ngx_http_core_module.h.ngx_http_core_get_method,,http\ngx_http_core_module.h,ngx_str_t ngx_http_core_get_method,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8334,275040,ngx_http_cache_status,2,http\ngx_http_file_cache.c.ngx_http_cache_status,,http\ngx_http_file_cache.c,ngx_str_t[] ngx_http_cache_status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8335,275058,ngx_http_file_cache_key,2,http\ngx_http_file_cache.c.ngx_http_file_cache_key,,http\ngx_http_file_cache.c,static u_char[] ngx_http_file_cache_key,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8336,283060,ngx_http_header_filter_module_ctx,2,http\ngx_http_header_filter_module.c.ngx_http_header_filter_module_ctx,,http\ngx_http_header_filter_module.c,ngx_http_module_t ngx_http_header_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8337,283072,ngx_http_header_filter_module,2,http\ngx_http_header_filter_module.c.ngx_http_header_filter_module,,http\ngx_http_header_filter_module.c,ngx_module_t ngx_http_header_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8338,283092,ngx_http_status_lines,2,http\ngx_http_header_filter_module.c.ngx_http_status_lines,,http\ngx_http_header_filter_module.c,static ngx_str_t[] ngx_http_status_lines,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8339,283185,ngx_http_headers_out,2,http\ngx_http_header_filter_module.c.ngx_http_headers_out,,http\ngx_http_header_filter_module.c,ngx_http_header_out_t[] ngx_http_headers_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8340,284932,usual,2,http\ngx_http_parse.c.usual,,http\ngx_http_parse.c,static uint32_t[] usual,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8341,290659,ngx_http_postpone_filter_module_ctx,2,http\ngx_http_postpone_filter_module.c.ngx_http_postpone_filter_module_ctx,,http\ngx_http_postpone_filter_module.c,ngx_http_module_t ngx_http_postpone_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8342,290671,ngx_http_postpone_filter_module,2,http\ngx_http_postpone_filter_module.c.ngx_http_postpone_filter_module,,http\ngx_http_postpone_filter_module.c,ngx_module_t ngx_http_postpone_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8343,290688,ngx_http_next_body_filter,2,http\ngx_http_postpone_filter_module.c.ngx_http_next_body_filter,,http\ngx_http_postpone_filter_module.c,ngx_http_output_body_filter_pt ngx_http_next_body_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8344,291417,ngx_http_client_errors,2,http\ngx_http_request.c.ngx_http_client_errors,,http\ngx_http_request.c,char*[] ngx_http_client_errors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8345,291425,ngx_http_headers_in,2,http\ngx_http_request.c.ngx_http_headers_in,,http\ngx_http_request.c,ngx_http_header_t[] ngx_http_headers_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8346,299285,ngx_http_state_e,2,http\ngx_http_request.h.ngx_http_state_e,,http\ngx_http_request.h,enum ngx_http_state_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8347,299290,ngx_http_header_t,2,http\ngx_http_request.h.ngx_http_header_t,,http\ngx_http_request.h,struct ngx_http_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8348,299294,ngx_http_header_out_t,2,http\ngx_http_request.h.ngx_http_header_out_t,,http\ngx_http_request.h,struct ngx_http_header_out_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8349,299341,ngx_http_headers_in_t,2,http\ngx_http_request.h.ngx_http_headers_in_t,,http\ngx_http_request.h,struct ngx_http_headers_in_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8350,299371,ngx_http_headers_out_t,2,http\ngx_http_request.h.ngx_http_headers_out_t,,http\ngx_http_request.h,struct ngx_http_headers_out_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8351,299387,ngx_http_request_body_t,2,http\ngx_http_request.h.ngx_http_request_body_t,,http\ngx_http_request.h,struct ngx_http_request_body_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8352,299400,ngx_http_connection_t,2,http\ngx_http_request.h.ngx_http_connection_t,,http\ngx_http_request.h,struct ngx_http_connection_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8353,299422,ngx_http_post_subrequest_t,2,http\ngx_http_request.h.ngx_http_post_subrequest_t,,http\ngx_http_request.h,struct ngx_http_post_subrequest_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8354,299599,ngx_http_ephemeral_t,2,http\ngx_http_request.h.ngx_http_ephemeral_t,,http\ngx_http_request.h,struct ngx_http_ephemeral_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8355,299600,ngx_http_headers_in,2,http\ngx_http_request.h.ngx_http_headers_in,,http\ngx_http_request.h,extern ngx_http_header_t[] ngx_http_headers_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8356,299602,ngx_http_headers_out,2,http\ngx_http_request.h.ngx_http_headers_out,,http\ngx_http_request.h,extern ngx_http_header_out_t[] ngx_http_headers_out,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8357,303017,ngx_http_script_exit_code,2,http\ngx_http_script.c.ngx_http_script_exit_code,,http\ngx_http_script.c,uintptr_t ngx_http_script_exit_code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
8358,307266,ngx_http_script_engine_t,2,http\ngx_http_script.h.ngx_http_script_engine_t,,http\ngx_http_script.h,struct ngx_http_script_engine_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8359,307286,ngx_http_script_compile_t,2,http\ngx_http_script.h.ngx_http_script_compile_t,,http\ngx_http_script.h,struct ngx_http_script_compile_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8360,307295,ngx_http_complex_value_t,2,http\ngx_http_script.h.ngx_http_complex_value_t,,http\ngx_http_script.h,struct ngx_http_complex_value_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8361,307303,ngx_http_compile_complex_value_t,2,http\ngx_http_script.h.ngx_http_compile_complex_value_t,,http\ngx_http_script.h,struct ngx_http_compile_complex_value_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8362,307317,ngx_http_script_copy_code_t,2,http\ngx_http_script.h.ngx_http_script_copy_code_t,,http\ngx_http_script.h,struct ngx_http_script_copy_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8363,307321,ngx_http_script_var_code_t,2,http\ngx_http_script.h.ngx_http_script_var_code_t,,http\ngx_http_script.h,struct ngx_http_script_var_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8364,307326,ngx_http_script_var_handler_code_t,2,http\ngx_http_script.h.ngx_http_script_var_handler_code_t,,http\ngx_http_script.h,struct ngx_http_script_var_handler_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8365,307330,ngx_http_script_copy_capture_code_t,2,http\ngx_http_script.h.ngx_http_script_copy_capture_code_t,,http\ngx_http_script.h,struct ngx_http_script_copy_capture_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8366,307334,ngx_http_script_full_name_code_t,2,http\ngx_http_script.h.ngx_http_script_full_name_code_t,,http\ngx_http_script.h,struct ngx_http_script_full_name_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8367,307339,ngx_http_script_return_code_t,2,http\ngx_http_script.h.ngx_http_script_return_code_t,,http\ngx_http_script.h,struct ngx_http_script_return_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8368,307356,ngx_http_script_file_op_e,2,http\ngx_http_script.h.ngx_http_script_file_op_e,,http\ngx_http_script.h,enum ngx_http_script_file_op_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8369,307360,ngx_http_script_file_code_t,2,http\ngx_http_script.h.ngx_http_script_file_code_t,,http\ngx_http_script.h,struct ngx_http_script_file_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8370,307365,ngx_http_script_if_code_t,2,http\ngx_http_script.h.ngx_http_script_if_code_t,,http\ngx_http_script.h,struct ngx_http_script_if_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8371,307369,ngx_http_script_complex_value_code_t,2,http\ngx_http_script.h.ngx_http_script_complex_value_code_t,,http\ngx_http_script.h,struct ngx_http_script_complex_value_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8372,307375,ngx_http_script_value_code_t,2,http\ngx_http_script.h.ngx_http_script_value_code_t,,http\ngx_http_script.h,struct ngx_http_script_value_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8373,307615,ngx_http_msie_refresh_head,2,http\ngx_http_special_response.c.ngx_http_msie_refresh_head,,http\ngx_http_special_response.c,static u_char[] ngx_http_msie_refresh_head,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8374,307654,ngx_http_error_pages,2,http\ngx_http_special_response.c.ngx_http_error_pages,,http\ngx_http_special_response.c,static ngx_str_t[] ngx_http_error_pages,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8375,309611,ngx_http_upstream_headers_in,2,http\ngx_http_upstream.c.ngx_http_upstream_headers_in,,http\ngx_http_upstream.c,static ngx_http_upstream_header_t[] ngx_http_upstream_headers_in,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8376,309866,ngx_http_upstream_commands,2,http\ngx_http_upstream.c.ngx_http_upstream_commands,,http\ngx_http_upstream.c,static ngx_command_t[] ngx_http_upstream_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8377,309893,ngx_http_upstream_module_ctx,2,http\ngx_http_upstream.c.ngx_http_upstream_module_ctx,,http\ngx_http_upstream.c,ngx_http_module_t ngx_http_upstream_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8378,309905,ngx_http_upstream_module,2,http\ngx_http_upstream.c.ngx_http_upstream_module,,http\ngx_http_upstream.c,ngx_module_t ngx_http_upstream_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8379,309922,ngx_http_upstream_vars,2,http\ngx_http_upstream.c.ngx_http_upstream_vars,,http\ngx_http_upstream.c,static ngx_http_variable_t[] ngx_http_upstream_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8380,310021,ngx_http_upstream_next_errors,2,http\ngx_http_upstream.c.ngx_http_upstream_next_errors,,http\ngx_http_upstream.c,static ngx_http_upstream_next_t[] ngx_http_upstream_next_errors,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8381,310049,ngx_http_upstream_cache_method_mask,2,http\ngx_http_upstream.c.ngx_http_upstream_cache_method_mask,,http\ngx_http_upstream.c,ngx_conf_bitmask_t[] ngx_http_upstream_cache_method_mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8382,310068,ngx_http_upstream_ignore_headers_masks,2,http\ngx_http_upstream.c.ngx_http_upstream_ignore_headers_masks,,http\ngx_http_upstream.c,ngx_conf_bitmask_t[] ngx_http_upstream_ignore_headers_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8383,322781,ngx_http_upstream_state_t,2,http\ngx_http_upstream.h.ngx_http_upstream_state_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_state_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8384,322785,ngx_http_upstream_main_conf_t,2,http\ngx_http_upstream.h.ngx_http_upstream_main_conf_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8385,322804,ngx_http_upstream_peer_t,2,http\ngx_http_upstream.h.ngx_http_upstream_peer_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_peer_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8386,322817,ngx_http_upstream_server_t,2,http\ngx_http_upstream.h.ngx_http_upstream_server_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_server_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8387,322833,ngx_http_upstream_local_t,2,http\ngx_http_upstream.h.ngx_http_upstream_local_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_local_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8388,322902,ngx_http_upstream_conf_t,2,http\ngx_http_upstream.h.ngx_http_upstream_conf_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8389,322910,ngx_http_upstream_header_t,2,http\ngx_http_upstream.h.ngx_http_upstream_header_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8390,322940,ngx_http_upstream_headers_in_t,2,http\ngx_http_upstream.h.ngx_http_upstream_headers_in_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_headers_in_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8391,322952,ngx_http_upstream_resolved_t,2,http\ngx_http_upstream.h.ngx_http_upstream_resolved_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_resolved_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8392,323057,ngx_http_upstream_next_t,2,http\ngx_http_upstream.h.ngx_http_upstream_next_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_next_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8393,323062,ngx_http_upstream_param_t,2,http\ngx_http_upstream.h.ngx_http_upstream_param_t,,http\ngx_http_upstream.h,struct ngx_http_upstream_param_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8394,323114,ngx_http_upstream_module,2,http\ngx_http_upstream.h.ngx_http_upstream_module,,http\ngx_http_upstream.h,ngx_module_t ngx_http_upstream_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8395,323115,ngx_http_upstream_cache_method_mask,2,http\ngx_http_upstream.h.ngx_http_upstream_cache_method_mask,,http\ngx_http_upstream.h,extern ngx_conf_bitmask_t[] ngx_http_upstream_cache_method_mask,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8396,323117,ngx_http_upstream_ignore_headers_masks,2,http\ngx_http_upstream.h.ngx_http_upstream_ignore_headers_masks,,http\ngx_http_upstream.h,extern ngx_conf_bitmask_t[] ngx_http_upstream_ignore_headers_masks,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8397,325554,ngx_http_upstream_rr_peer_data_t,2,http\ngx_http_upstream_round_robin.h.ngx_http_upstream_rr_peer_data_t,,http\ngx_http_upstream_round_robin.h,struct ngx_http_upstream_rr_peer_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8398,326013,ngx_http_core_variables,2,http\ngx_http_variables.c.ngx_http_core_variables,,http\ngx_http_variables.c,static ngx_http_variable_t[] ngx_http_core_variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8399,326602,ngx_http_variable_null_value,2,http\ngx_http_variables.c.ngx_http_variable_null_value,,http\ngx_http_variables.c,ngx_http_variable_value_t ngx_http_variable_null_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8400,326607,ngx_http_variable_true_value,2,http\ngx_http_variables.c.ngx_http_variable_true_value,,http\ngx_http_variables.c,ngx_http_variable_value_t ngx_http_variable_true_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8401,326612,ngx_http_variable_depth,2,http\ngx_http_variables.c.ngx_http_variable_depth,,http\ngx_http_variables.c,ngx_uint_t ngx_http_variable_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
8402,332794,ngx_http_map_t,2,http\ngx_http_variables.h.ngx_http_map_t,,http\ngx_http_variables.h,struct ngx_http_map_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8403,332812,ngx_http_variable_null_value,2,http\ngx_http_variables.h.ngx_http_variable_null_value,,http\ngx_http_variables.h,ngx_http_variable_value_t ngx_http_variable_null_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8404,332813,ngx_http_variable_true_value,2,http\ngx_http_variables.h.ngx_http_variable_true_value,,http\ngx_http_variables.h,ngx_http_variable_value_t ngx_http_variable_true_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8405,332830,ngx_http_write_filter_module_ctx,2,http\ngx_http_write_filter_module.c.ngx_http_write_filter_module_ctx,,http\ngx_http_write_filter_module.c,ngx_http_module_t ngx_http_write_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8406,332842,ngx_http_write_filter_module,2,http\ngx_http_write_filter_module.c.ngx_http_write_filter_module,,http\ngx_http_write_filter_module.c,ngx_module_t ngx_http_write_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8407,333925,ngx_http_v2_parse_header_t,2,http\v2\ngx_http_v2.c.ngx_http_v2_parse_header_t,,http\v2\ngx_http_v2.c,struct ngx_http_v2_parse_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8408,334379,ngx_http_v2_frame_states,2,http\v2\ngx_http_v2.c.ngx_http_v2_frame_states,,http\v2\ngx_http_v2.c,static ngx_http_v2_handler_pt[] ngx_http_v2_frame_states,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8409,334393,ngx_http_v2_parse_headers,2,http\v2\ngx_http_v2.c.ngx_http_v2_parse_headers,,http\v2\ngx_http_v2.c,static ngx_http_v2_parse_header_t[] ngx_http_v2_parse_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8410,347692,ngx_http_v2_header_t,2,http\v2\ngx_http_v2.h.ngx_http_v2_header_t,,http\v2\ngx_http_v2.h,struct ngx_http_v2_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8411,347722,ngx_http_v2_state_t,2,http\v2\ngx_http_v2.h.ngx_http_v2_state_t,,http\v2\ngx_http_v2.h,struct ngx_http_v2_state_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8412,347733,ngx_http_v2_hpack_t,2,http\v2\ngx_http_v2.h.ngx_http_v2_hpack_t,,http\v2\ngx_http_v2.h,struct ngx_http_v2_hpack_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8413,348062,ngx_http_v2_push_header_t,2,http\v2\ngx_http_v2_filter_module.c.ngx_http_v2_push_header_t,,http\v2\ngx_http_v2_filter_module.c,struct ngx_http_v2_push_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8414,348063,ngx_http_v2_push_headers,2,http\v2\ngx_http_v2_filter_module.c.ngx_http_v2_push_headers,,http\v2\ngx_http_v2_filter_module.c,static ngx_http_v2_push_header_t[] ngx_http_v2_push_headers,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8415,348188,ngx_http_v2_filter_module_ctx,2,http\v2\ngx_http_v2_filter_module.c.ngx_http_v2_filter_module_ctx,,http\v2\ngx_http_v2_filter_module.c,ngx_http_module_t ngx_http_v2_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8416,348200,ngx_http_v2_filter_module,2,http\v2\ngx_http_v2_filter_module.c.ngx_http_v2_filter_module,,http\v2\ngx_http_v2_filter_module.c,ngx_module_t ngx_http_v2_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8417,348217,ngx_http_next_header_filter,2,http\v2\ngx_http_v2_filter_module.c.ngx_http_next_header_filter,,http\v2\ngx_http_v2_filter_module.c,ngx_http_output_header_filter_pt ngx_http_next_header_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8418,353368,ngx_int_t,2,http\v2\ngx_http_v2_filter_module.c.ngx_int_t,,http\v2\ngx_http_v2_filter_module.c,ngx_inline ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8419,353514,ngx_int_t,2,http\v2\ngx_http_v2_filter_module.c.ngx_int_t,,http\v2\ngx_http_v2_filter_module.c,ngx_inline ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8420,354352,ngx_http_v2_huff_decode_code_t,2,http\v2\ngx_http_v2_huff_decode.c.ngx_http_v2_huff_decode_code_t,,http\v2\ngx_http_v2_huff_decode.c,struct ngx_http_v2_huff_decode_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8421,354354,ngx_http_v2_huff_decode_codes,2,http\v2\ngx_http_v2_huff_decode.c.ngx_http_v2_huff_decode_codes,,http\v2\ngx_http_v2_huff_decode.c,static ngx_http_v2_huff_decode_code_t[256] ngx_http_v2_huff_decode_codes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8422,375197,ngx_int_t,2,http\v2\ngx_http_v2_huff_decode.c.ngx_int_t,,http\v2\ngx_http_v2_huff_decode.c,ngx_inline ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8423,375267,ngx_http_v2_huff_encode_code_t,2,http\v2\ngx_http_v2_huff_encode.c.ngx_http_v2_huff_encode_code_t,,http\v2\ngx_http_v2_huff_encode.c,struct ngx_http_v2_huff_encode_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8424,375268,ngx_http_v2_huff_encode_table,2,http\v2\ngx_http_v2_huff_encode.c.ngx_http_v2_huff_encode_table,,http\v2\ngx_http_v2_huff_encode.c,static ngx_http_v2_huff_encode_code_t[256] ngx_http_v2_huff_encode_table,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8425,376040,ngx_http_v2_huff_encode_table_lc,2,http\v2\ngx_http_v2_huff_encode.c.ngx_http_v2_huff_encode_table_lc,,http\v2\ngx_http_v2_huff_encode.c,static ngx_http_v2_huff_encode_code_t[256] ngx_http_v2_huff_encode_table_lc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8426,377113,ngx_http_v2_recv_timeout_deprecated,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_recv_timeout_deprecated,,http\v2\ngx_http_v2_module.c,ngx_conf_deprecated_t ngx_http_v2_recv_timeout_deprecated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8427,377120,ngx_http_v2_idle_timeout_deprecated,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_idle_timeout_deprecated,,http\v2\ngx_http_v2_module.c,ngx_conf_deprecated_t ngx_http_v2_idle_timeout_deprecated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8428,377127,ngx_http_v2_max_requests_deprecated,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_max_requests_deprecated,,http\v2\ngx_http_v2_module.c,ngx_conf_deprecated_t ngx_http_v2_max_requests_deprecated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8429,377134,ngx_http_v2_max_field_size_deprecated,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_max_field_size_deprecated,,http\v2\ngx_http_v2_module.c,ngx_conf_deprecated_t ngx_http_v2_max_field_size_deprecated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8430,377141,ngx_http_v2_max_header_size_deprecated,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_max_header_size_deprecated,,http\v2\ngx_http_v2_module.c,ngx_conf_deprecated_t ngx_http_v2_max_header_size_deprecated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8431,377148,ngx_http_v2_recv_buffer_size_post,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_recv_buffer_size_post,,http\v2\ngx_http_v2_module.c,ngx_conf_post_t ngx_http_v2_recv_buffer_size_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8432,377153,ngx_http_v2_pool_size_post,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_pool_size_post,,http\v2\ngx_http_v2_module.c,ngx_conf_post_t ngx_http_v2_pool_size_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8433,377158,ngx_http_v2_preread_size_post,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_preread_size_post,,http\v2\ngx_http_v2_module.c,ngx_conf_post_t ngx_http_v2_preread_size_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8434,377163,ngx_http_v2_streams_index_mask_post,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_streams_index_mask_post,,http\v2\ngx_http_v2_module.c,ngx_conf_post_t ngx_http_v2_streams_index_mask_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8435,377168,ngx_http_v2_chunk_size_post,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_chunk_size_post,,http\v2\ngx_http_v2_module.c,ngx_conf_post_t ngx_http_v2_chunk_size_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8436,377173,ngx_http_v2_commands,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_commands,,http\v2\ngx_http_v2_module.c,static ngx_command_t[] ngx_http_v2_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8437,377376,ngx_http_v2_module_ctx,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_module_ctx,,http\v2\ngx_http_v2_module.c,ngx_http_module_t ngx_http_v2_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8438,377388,ngx_http_v2_module,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_module,,http\v2\ngx_http_v2_module.c,ngx_module_t ngx_http_v2_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8439,377405,ngx_http_v2_vars,2,http\v2\ngx_http_v2_module.c.ngx_http_v2_vars,,http\v2\ngx_http_v2_module.c,static ngx_http_variable_t[] ngx_http_v2_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8440,378129,ngx_http_v2_main_conf_t,2,http\v2\ngx_http_v2_module.h.ngx_http_v2_main_conf_t,,http\v2\ngx_http_v2_module.h,struct ngx_http_v2_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8441,378136,ngx_http_v2_srv_conf_t,2,http\v2\ngx_http_v2_module.h.ngx_http_v2_srv_conf_t,,http\v2\ngx_http_v2_module.h,struct ngx_http_v2_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8442,378142,ngx_http_v2_loc_conf_t,2,http\v2\ngx_http_v2_module.h.ngx_http_v2_loc_conf_t,,http\v2\ngx_http_v2_module.h,struct ngx_http_v2_loc_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8443,378143,ngx_http_v2_module,2,http\v2\ngx_http_v2_module.h.ngx_http_v2_module,,http\v2\ngx_http_v2_module.h,ngx_module_t ngx_http_v2_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8444,378161,ngx_http_v2_static_table,2,http\v2\ngx_http_v2_table.c.ngx_http_v2_static_table,,http\v2\ngx_http_v2_table.c,static ngx_http_v2_header_t[] ngx_http_v2_static_table,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8445,379755,ngx_mail_max_module,2,mail\ngx_mail.c.ngx_mail_max_module,,mail\ngx_mail.c,ngx_uint_t ngx_mail_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8446,379756,ngx_mail_commands,2,mail\ngx_mail.c.ngx_mail_commands,,mail\ngx_mail.c,static ngx_command_t[] ngx_mail_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8447,379773,ngx_mail_module_ctx,2,mail\ngx_mail.c.ngx_mail_module_ctx,,mail\ngx_mail.c,ngx_core_module_t ngx_mail_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8448,379781,ngx_mail_module,2,mail\ngx_mail.c.ngx_mail_module,,mail\ngx_mail.c,ngx_module_t ngx_mail_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8449,380891,ngx_mail_conf_ctx_t,2,mail\ngx_mail.h.ngx_mail_conf_ctx_t,,mail\ngx_mail.h,struct ngx_mail_conf_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8450,380910,ngx_mail_listen_t,2,mail\ngx_mail.h.ngx_mail_listen_t,,mail\ngx_mail.h,struct ngx_mail_listen_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8451,380916,ngx_mail_addr_conf_t,2,mail\ngx_mail.h.ngx_mail_addr_conf_t,,mail\ngx_mail.h,struct ngx_mail_addr_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8452,380920,ngx_mail_in_addr_t,2,mail\ngx_mail.h.ngx_mail_in_addr_t,,mail\ngx_mail.h,struct ngx_mail_in_addr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8453,380924,ngx_mail_port_t,2,mail\ngx_mail.h.ngx_mail_port_t,,mail\ngx_mail.h,struct ngx_mail_port_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8454,380929,ngx_mail_conf_port_t,2,mail\ngx_mail.h.ngx_mail_conf_port_t,,mail\ngx_mail.h,struct ngx_mail_conf_port_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8455,380932,ngx_mail_conf_addr_t,2,mail\ngx_mail.h.ngx_mail_conf_addr_t,,mail\ngx_mail.h,struct ngx_mail_conf_addr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8456,380936,ngx_mail_core_main_conf_t,2,mail\ngx_mail.h.ngx_mail_core_main_conf_t,,mail\ngx_mail.h,struct ngx_mail_core_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8457,380951,ngx_mail_core_srv_conf_t,2,mail\ngx_mail.h.ngx_mail_core_srv_conf_t,,mail\ngx_mail.h,struct ngx_mail_core_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8458,380968,ngx_pop3_state_e,2,mail\ngx_mail.h.ngx_pop3_state_e,,mail\ngx_mail.h,enum ngx_pop3_state_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8459,380986,ngx_imap_state_e,2,mail\ngx_mail.h.ngx_imap_state_e,,mail\ngx_mail.h,enum ngx_imap_state_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8460,381011,ngx_smtp_state_e,2,mail\ngx_mail.h.ngx_smtp_state_e,,mail\ngx_mail.h,enum ngx_smtp_state_e,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8461,381016,ngx_mail_proxy_ctx_t,2,mail\ngx_mail.h.ngx_mail_proxy_ctx_t,,mail\ngx_mail.h,struct ngx_mail_proxy_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8462,381060,ngx_mail_session_t,2,mail\ngx_mail.h.ngx_mail_session_t,,mail\ngx_mail.h,struct ngx_mail_session_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8463,381064,ngx_mail_log_ctx_t,2,mail\ngx_mail.h.ngx_mail_log_ctx_t,,mail\ngx_mail.h,struct ngx_mail_log_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8464,381128,ngx_mail_module_t,2,mail\ngx_mail.h.ngx_mail_module_t,,mail\ngx_mail.h,struct ngx_mail_module_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8465,381245,ngx_mail_max_module,2,mail\ngx_mail.h.ngx_mail_max_module,,mail\ngx_mail.h,ngx_uint_t ngx_mail_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8466,381246,ngx_mail_core_module,2,mail\ngx_mail.h.ngx_mail_core_module,,mail\ngx_mail.h,ngx_module_t ngx_mail_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8467,381272,ngx_mail_auth_http_conf_t,2,mail\ngx_mail_auth_http_module.c.ngx_mail_auth_http_conf_t,,mail\ngx_mail_auth_http_module.c,struct ngx_mail_auth_http_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8468,381381,ngx_mail_auth_http_commands,2,mail\ngx_mail_auth_http_module.c.ngx_mail_auth_http_commands,,mail\ngx_mail_auth_http_module.c,static ngx_command_t[] ngx_mail_auth_http_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8469,381438,ngx_mail_auth_http_module_ctx,2,mail\ngx_mail_auth_http_module.c.ngx_mail_auth_http_module_ctx,,mail\ngx_mail_auth_http_module.c,ngx_mail_module_t ngx_mail_auth_http_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8470,381447,ngx_mail_auth_http_module,2,mail\ngx_mail_auth_http_module.c.ngx_mail_auth_http_module,,mail\ngx_mail_auth_http_module.c,ngx_module_t ngx_mail_auth_http_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8471,381464,ngx_mail_auth_http_method,2,mail\ngx_mail_auth_http_module.c.ngx_mail_auth_http_method,,mail\ngx_mail_auth_http_module.c,static ngx_str_t[] ngx_mail_auth_http_method,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8472,381482,ngx_mail_smtp_errcode,2,mail\ngx_mail_auth_http_module.c.ngx_mail_smtp_errcode,,mail\ngx_mail_auth_http_module.c,ngx_str_t ngx_mail_smtp_errcode,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8473,385743,ngx_mail_core_commands,2,mail\ngx_mail_core_module.c.ngx_mail_core_commands,,mail\ngx_mail_core_module.c,static ngx_command_t[] ngx_mail_core_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8474,385860,ngx_mail_core_module_ctx,2,mail\ngx_mail_core_module.c.ngx_mail_core_module_ctx,,mail\ngx_mail_core_module.c,ngx_mail_module_t ngx_mail_core_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8475,385869,ngx_mail_core_module,2,mail\ngx_mail_core_module.c.ngx_mail_core_module,,mail\ngx_mail_core_module.c,ngx_module_t ngx_mail_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8476,389377,imap_star,2,mail\ngx_mail_imap_handler.c.imap_star,,mail\ngx_mail_imap_handler.c,static u_char[] imap_star,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8477,390511,ngx_mail_imap_default_capabilities,2,mail\ngx_mail_imap_module.c.ngx_mail_imap_default_capabilities,,mail\ngx_mail_imap_module.c,static ngx_str_t[] ngx_mail_imap_default_capabilities,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8478,390522,ngx_mail_imap_auth_methods,2,mail\ngx_mail_imap_module.c.ngx_mail_imap_auth_methods,,mail\ngx_mail_imap_module.c,static ngx_conf_bitmask_t[] ngx_mail_imap_auth_methods,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8479,390545,ngx_mail_imap_auth_methods_names,2,mail\ngx_mail_imap_module.c.ngx_mail_imap_auth_methods_names,,mail\ngx_mail_imap_module.c,static ngx_str_t[] ngx_mail_imap_auth_methods_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8480,390561,ngx_mail_imap_commands,2,mail\ngx_mail_imap_module.c.ngx_mail_imap_commands,,mail\ngx_mail_imap_module.c,static ngx_command_t[] ngx_mail_imap_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8481,390609,ngx_mail_imap_module_ctx,2,mail\ngx_mail_imap_module.c.ngx_mail_imap_module_ctx,,mail\ngx_mail_imap_module.c,ngx_mail_module_t ngx_mail_imap_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8482,390619,ngx_mail_imap_module,2,mail\ngx_mail_imap_module.c.ngx_mail_imap_module,,mail\ngx_mail_imap_module.c,ngx_module_t ngx_mail_imap_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8483,391145,ngx_mail_imap_srv_conf_t,2,mail\ngx_mail_imap_module.h.ngx_mail_imap_srv_conf_t,,mail\ngx_mail_imap_module.h,struct ngx_mail_imap_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8484,391167,ngx_mail_imap_module,2,mail\ngx_mail_imap_module.h.ngx_mail_imap_module,,mail\ngx_mail_imap_module.h,ngx_module_t ngx_mail_imap_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8485,395232,ngx_mail_pop3_default_capabilities,2,mail\ngx_mail_pop3_module.c.ngx_mail_pop3_default_capabilities,,mail\ngx_mail_pop3_module.c,static ngx_str_t[] ngx_mail_pop3_default_capabilities,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8486,395243,ngx_mail_pop3_auth_methods,2,mail\ngx_mail_pop3_module.c.ngx_mail_pop3_auth_methods,,mail\ngx_mail_pop3_module.c,static ngx_conf_bitmask_t[] ngx_mail_pop3_auth_methods,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8487,395266,ngx_mail_pop3_auth_methods_names,2,mail\ngx_mail_pop3_module.c.ngx_mail_pop3_auth_methods_names,,mail\ngx_mail_pop3_module.c,static ngx_str_t[] ngx_mail_pop3_auth_methods_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8488,395282,ngx_mail_pop3_commands,2,mail\ngx_mail_pop3_module.c.ngx_mail_pop3_commands,,mail\ngx_mail_pop3_module.c,static ngx_command_t[] ngx_mail_pop3_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8489,395316,ngx_mail_pop3_module_ctx,2,mail\ngx_mail_pop3_module.c.ngx_mail_pop3_module_ctx,,mail\ngx_mail_pop3_module.c,ngx_mail_module_t ngx_mail_pop3_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8490,395326,ngx_mail_pop3_module,2,mail\ngx_mail_pop3_module.c.ngx_mail_pop3_module,,mail\ngx_mail_pop3_module.c,ngx_module_t ngx_mail_pop3_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8491,396070,ngx_mail_pop3_srv_conf_t,2,mail\ngx_mail_pop3_module.h.ngx_mail_pop3_srv_conf_t,,mail\ngx_mail_pop3_module.h,struct ngx_mail_pop3_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8492,396092,ngx_mail_pop3_module,2,mail\ngx_mail_pop3_module.h.ngx_mail_pop3_module,,mail\ngx_mail_pop3_module.h,ngx_module_t ngx_mail_pop3_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8493,396116,ngx_mail_proxy_conf_t,2,mail\ngx_mail_proxy_module.c.ngx_mail_proxy_conf_t,,mail\ngx_mail_proxy_module.c,struct ngx_mail_proxy_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8494,396185,ngx_mail_proxy_commands,2,mail\ngx_mail_proxy_module.c.ngx_mail_proxy_commands,,mail\ngx_mail_proxy_module.c,static ngx_command_t[] ngx_mail_proxy_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8495,396288,ngx_mail_proxy_module_ctx,2,mail\ngx_mail_proxy_module.c.ngx_mail_proxy_module_ctx,,mail\ngx_mail_proxy_module.c,ngx_mail_module_t ngx_mail_proxy_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8496,396297,ngx_mail_proxy_module,2,mail\ngx_mail_proxy_module.c.ngx_mail_proxy_module,,mail\ngx_mail_proxy_module.c,ngx_module_t ngx_mail_proxy_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8497,400234,ngx_mail_realip_srv_conf_t,2,mail\ngx_mail_realip_module.c.ngx_mail_realip_srv_conf_t,,mail\ngx_mail_realip_module.c,struct ngx_mail_realip_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8498,400260,ngx_mail_realip_commands,2,mail\ngx_mail_realip_module.c.ngx_mail_realip_commands,,mail\ngx_mail_realip_module.c,static ngx_command_t[] ngx_mail_realip_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8499,400277,ngx_mail_realip_module_ctx,2,mail\ngx_mail_realip_module.c.ngx_mail_realip_module_ctx,,mail\ngx_mail_realip_module.c,ngx_mail_module_t ngx_mail_realip_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8500,400286,ngx_mail_realip_module,2,mail\ngx_mail_realip_module.c.ngx_mail_realip_module,,mail\ngx_mail_realip_module.c,ngx_module_t ngx_mail_realip_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8501,400881,smtp_unavailable,2,mail\ngx_mail_smtp_handler.c.smtp_unavailable,,mail\ngx_mail_smtp_handler.c,ngx_str_t smtp_unavailable,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8502,400886,smtp_tempunavail,2,mail\ngx_mail_smtp_handler.c.smtp_tempunavail,,mail\ngx_mail_smtp_handler.c,ngx_str_t smtp_tempunavail,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8503,403041,ngx_mail_smtp_auth_methods,2,mail\ngx_mail_smtp_module.c.ngx_mail_smtp_auth_methods,,mail\ngx_mail_smtp_module.c,static ngx_conf_bitmask_t[] ngx_mail_smtp_auth_methods,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8504,403068,ngx_mail_smtp_auth_methods_names,2,mail\ngx_mail_smtp_module.c.ngx_mail_smtp_auth_methods_names,,mail\ngx_mail_smtp_module.c,static ngx_str_t[] ngx_mail_smtp_auth_methods_names,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8505,403084,ngx_mail_smtp_commands,2,mail\ngx_mail_smtp_module.c.ngx_mail_smtp_commands,,mail\ngx_mail_smtp_module.c,static ngx_command_t[] ngx_mail_smtp_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8506,403146,ngx_mail_smtp_module_ctx,2,mail\ngx_mail_smtp_module.c.ngx_mail_smtp_module_ctx,,mail\ngx_mail_smtp_module.c,ngx_mail_module_t ngx_mail_smtp_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8507,403156,ngx_mail_smtp_module,2,mail\ngx_mail_smtp_module.c.ngx_mail_smtp_module,,mail\ngx_mail_smtp_module.c,ngx_module_t ngx_mail_smtp_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8508,403954,ngx_mail_smtp_srv_conf_t,2,mail\ngx_mail_smtp_module.h.ngx_mail_smtp_srv_conf_t,,mail\ngx_mail_smtp_module.h,struct ngx_mail_smtp_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8509,403976,ngx_mail_smtp_module,2,mail\ngx_mail_smtp_module.h.ngx_mail_smtp_module,,mail\ngx_mail_smtp_module.h,ngx_module_t ngx_mail_smtp_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8510,404035,ngx_mail_starttls_state,2,mail\ngx_mail_ssl_module.c.ngx_mail_starttls_state,,mail\ngx_mail_ssl_module.c,static ngx_conf_enum_t[] ngx_mail_starttls_state,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8511,404054,ngx_mail_ssl_protocols,2,mail\ngx_mail_ssl_module.c.ngx_mail_ssl_protocols,,mail\ngx_mail_ssl_module.c,static ngx_conf_bitmask_t[] ngx_mail_ssl_protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8512,404085,ngx_mail_ssl_verify,2,mail\ngx_mail_ssl_module.c.ngx_mail_ssl_verify,,mail\ngx_mail_ssl_module.c,static ngx_conf_enum_t[] ngx_mail_ssl_verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8513,404108,ngx_mail_ssl_deprecated,2,mail\ngx_mail_ssl_module.c.ngx_mail_ssl_deprecated,,mail\ngx_mail_ssl_module.c,ngx_conf_deprecated_t ngx_mail_ssl_deprecated,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8514,404115,ngx_mail_ssl_conf_command_post,2,mail\ngx_mail_ssl_module.c.ngx_mail_ssl_conf_command_post,,mail\ngx_mail_ssl_module.c,ngx_conf_post_t ngx_mail_ssl_conf_command_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8515,404120,ngx_mail_ssl_commands,2,mail\ngx_mail_ssl_module.c.ngx_mail_ssl_commands,,mail\ngx_mail_ssl_module.c,static ngx_command_t[] ngx_mail_ssl_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8516,404405,ngx_mail_ssl_module_ctx,2,mail\ngx_mail_ssl_module.c.ngx_mail_ssl_module_ctx,,mail\ngx_mail_ssl_module.c,ngx_mail_module_t ngx_mail_ssl_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8517,404414,ngx_mail_ssl_module,2,mail\ngx_mail_ssl_module.c.ngx_mail_ssl_module,,mail\ngx_mail_ssl_module.c,ngx_module_t ngx_mail_ssl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8518,404431,ngx_mail_ssl_sess_id_ctx,2,mail\ngx_mail_ssl_module.c.ngx_mail_ssl_sess_id_ctx,,mail\ngx_mail_ssl_module.c,ngx_str_t ngx_mail_ssl_sess_id_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8519,405736,ngx_mail_ssl_conf_t,2,mail\ngx_mail_ssl_module.h.ngx_mail_ssl_conf_t,,mail\ngx_mail_ssl_module.h,struct ngx_mail_ssl_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8520,405737,ngx_mail_ssl_module,2,mail\ngx_mail_ssl_module.h.ngx_mail_ssl_module,,mail\ngx_mail_ssl_module.h,ngx_module_t ngx_mail_ssl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8521,405812,ngx_google_perftools_conf_t,2,misc\ngx_google_perftools_module.c.ngx_google_perftools_conf_t,,misc\ngx_google_perftools_module.c,struct ngx_google_perftools_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8522,405813,ngx_google_perftools_commands,2,misc\ngx_google_perftools_module.c.ngx_google_perftools_commands,,misc\ngx_google_perftools_module.c,static ngx_command_t[] ngx_google_perftools_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8523,405832,ngx_google_perftools_module_ctx,2,misc\ngx_google_perftools_module.c.ngx_google_perftools_module_ctx,,misc\ngx_google_perftools_module.c,ngx_core_module_t ngx_google_perftools_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8524,405840,ngx_google_perftools_module,2,misc\ngx_google_perftools_module.c.ngx_google_perftools_module,,misc\ngx_google_perftools_module.c,ngx_module_t ngx_google_perftools_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8525,405970,ngx_pagesize,2,os\unix\ngx_alloc.c.ngx_pagesize,,os\unix\ngx_alloc.c,ngx_uint_t ngx_pagesize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8526,405971,ngx_pagesize_shift,2,os\unix\ngx_alloc.c.ngx_pagesize_shift,,os\unix\ngx_alloc.c,ngx_uint_t ngx_pagesize_shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8527,405972,ngx_cacheline_size,2,os\unix\ngx_alloc.c.ngx_cacheline_size,,os\unix\ngx_alloc.c,ngx_uint_t ngx_cacheline_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8528,406045,ngx_pagesize,2,os\unix\ngx_alloc.h.ngx_pagesize,,os\unix\ngx_alloc.h,ngx_uint_t ngx_pagesize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8529,406046,ngx_pagesize_shift,2,os\unix\ngx_alloc.h.ngx_pagesize_shift,,os\unix\ngx_alloc.h,ngx_uint_t ngx_pagesize_shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8530,406047,ngx_cacheline_size,2,os\unix\ngx_alloc.h.ngx_cacheline_size,,os\unix\ngx_alloc.h,ngx_uint_t ngx_cacheline_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8531,406074,ngx_atomic_uint_t,2,os\unix\ngx_atomic.h.ngx_atomic_uint_t,,os\unix\ngx_atomic.h,ngx_inline ngx_atomic_uint_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8532,406097,ngx_atomic_int_t,2,os\unix\ngx_atomic.h.ngx_atomic_int_t,,os\unix\ngx_atomic.h,ngx_inline ngx_atomic_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8533,406563,ngx_channel_t,2,os\unix\ngx_channel.h.ngx_channel_t,,os\unix\ngx_channel.h,struct ngx_channel_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8534,406735,ngx_darwin_kern_osreldate,2,os\unix\ngx_darwin.h.ngx_darwin_kern_osreldate,,os\unix\ngx_darwin.h,extern int ngx_darwin_kern_osreldate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8535,406736,ngx_darwin_hw_ncpu,2,os\unix\ngx_darwin.h.ngx_darwin_hw_ncpu,,os\unix\ngx_darwin.h,extern int ngx_darwin_hw_ncpu,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8536,406737,ngx_darwin_net_inet_tcp_sendspace,2,os\unix\ngx_darwin.h.ngx_darwin_net_inet_tcp_sendspace,,os\unix\ngx_darwin.h,u_long ngx_darwin_net_inet_tcp_sendspace,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8537,406738,ngx_debug_malloc,2,os\unix\ngx_darwin.h.ngx_debug_malloc,,os\unix\ngx_darwin.h,ngx_uint_t ngx_debug_malloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8538,406822,environ,2,os\unix\ngx_darwin_config.h.environ,,os\unix\ngx_darwin_config.h,extern char** environ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8539,406832,ngx_darwin_kern_ostype,2,os\unix\ngx_darwin_init.c.ngx_darwin_kern_ostype,,os\unix\ngx_darwin_init.c,char[16] ngx_darwin_kern_ostype,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,5,0,1,1,0,0,,0,0,0,0,0,
8540,406835,ngx_darwin_kern_osrelease,2,os\unix\ngx_darwin_init.c.ngx_darwin_kern_osrelease,,os\unix\ngx_darwin_init.c,char[128] ngx_darwin_kern_osrelease,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
8541,406838,ngx_darwin_hw_ncpu,2,os\unix\ngx_darwin_init.c.ngx_darwin_hw_ncpu,,os\unix\ngx_darwin_init.c,int ngx_darwin_hw_ncpu,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8542,406839,ngx_darwin_kern_ipc_somaxconn,2,os\unix\ngx_darwin_init.c.ngx_darwin_kern_ipc_somaxconn,,os\unix\ngx_darwin_init.c,int ngx_darwin_kern_ipc_somaxconn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8543,406840,ngx_darwin_net_inet_tcp_sendspace,2,os\unix\ngx_darwin_init.c.ngx_darwin_net_inet_tcp_sendspace,,os\unix\ngx_darwin_init.c,u_long ngx_darwin_net_inet_tcp_sendspace,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8544,406841,ngx_debug_malloc,2,os\unix\ngx_darwin_init.c.ngx_debug_malloc,,os\unix\ngx_darwin_init.c,ngx_uint_t ngx_debug_malloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8545,406842,ngx_darwin_io,2,os\unix\ngx_darwin_init.c.ngx_darwin_io,,os\unix\ngx_darwin_init.c,ngx_os_io_t ngx_darwin_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8546,406859,sysctl_t,2,os\unix\ngx_darwin_init.c.sysctl_t,,os\unix\ngx_darwin_init.c,struct sysctl_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8547,406860,sysctls,2,os\unix\ngx_darwin_init.c.sysctls,,os\unix\ngx_darwin_init.c,sysctl_t[] sysctls,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,11,0,1,1,0,0,,0,0,0,0,0,
8548,407617,ngx_unknown_error,2,os\unix\ngx_errno.c.ngx_unknown_error,,os\unix\ngx_errno.c,ngx_str_t ngx_unknown_error,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8549,407622,ngx_sys_errlist,2,os\unix\ngx_errno.c.ngx_sys_errlist,,os\unix\ngx_errno.c,ngx_str_t* ngx_sys_errlist,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,6,0,1,1,0,0,,0,0,0,0,0,
8550,407623,ngx_first_error,2,os\unix\ngx_errno.c.ngx_first_error,,os\unix\ngx_errno.c,ngx_err_t ngx_first_error,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
8551,407624,ngx_last_error,2,os\unix\ngx_errno.c.ngx_last_error,,os\unix\ngx_errno.c,ngx_err_t ngx_last_error,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
8552,407851,ngx_kqueue,2,os\unix\ngx_file_aio_read.c.ngx_kqueue,,os\unix\ngx_file_aio_read.c,extern int ngx_kqueue,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8553,409553,ngx_file_mapping_t,2,os\unix\ngx_files.h.ngx_file_mapping_t,,os\unix\ngx_files.h,struct ngx_file_mapping_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8554,409562,ngx_dir_t,2,os\unix\ngx_files.h.ngx_dir_t,,os\unix\ngx_files.h,struct ngx_dir_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8555,409569,ngx_glob_t,2,os\unix\ngx_files.h.ngx_glob_t,,os\unix\ngx_files.h,struct ngx_glob_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8556,409601,ssize_t,2,os\unix\ngx_files.h.ssize_t,,os\unix\ngx_files.h,ngx_inline ssize_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8557,409643,ngx_int_t,2,os\unix\ngx_files.h.ngx_int_t,,os\unix\ngx_files.h,ngx_inline ngx_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8558,409723,ngx_freebsd_kern_osreldate,2,os\unix\ngx_freebsd.h.ngx_freebsd_kern_osreldate,,os\unix\ngx_freebsd.h,extern int ngx_freebsd_kern_osreldate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8559,409724,ngx_freebsd_hw_ncpu,2,os\unix\ngx_freebsd.h.ngx_freebsd_hw_ncpu,,os\unix\ngx_freebsd.h,extern int ngx_freebsd_hw_ncpu,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8560,409725,ngx_freebsd_net_inet_tcp_sendspace,2,os\unix\ngx_freebsd.h.ngx_freebsd_net_inet_tcp_sendspace,,os\unix\ngx_freebsd.h,u_long ngx_freebsd_net_inet_tcp_sendspace,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8561,409726,ngx_freebsd_sendfile_nbytes_bug,2,os\unix\ngx_freebsd.h.ngx_freebsd_sendfile_nbytes_bug,,os\unix\ngx_freebsd.h,ngx_uint_t ngx_freebsd_sendfile_nbytes_bug,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8562,409727,ngx_freebsd_use_tcp_nopush,2,os\unix\ngx_freebsd.h.ngx_freebsd_use_tcp_nopush,,os\unix\ngx_freebsd.h,ngx_uint_t ngx_freebsd_use_tcp_nopush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8563,409728,ngx_debug_malloc,2,os\unix\ngx_freebsd.h.ngx_debug_malloc,,os\unix\ngx_freebsd.h,ngx_uint_t ngx_debug_malloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8564,409816,environ,2,os\unix\ngx_freebsd_config.h.environ,,os\unix\ngx_freebsd_config.h,extern char** environ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8565,409817,malloc_options,2,os\unix\ngx_freebsd_config.h.malloc_options,,os\unix\ngx_freebsd_config.h,extern char* malloc_options,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8566,409827,ngx_freebsd_kern_ostype,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_kern_ostype,,os\unix\ngx_freebsd_init.c,char[16] ngx_freebsd_kern_ostype,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8567,409830,ngx_freebsd_kern_osrelease,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_kern_osrelease,,os\unix\ngx_freebsd_init.c,char[128] ngx_freebsd_kern_osrelease,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8568,409833,ngx_freebsd_kern_osreldate,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_kern_osreldate,,os\unix\ngx_freebsd_init.c,int ngx_freebsd_kern_osreldate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8569,409834,ngx_freebsd_hw_ncpu,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_hw_ncpu,,os\unix\ngx_freebsd_init.c,int ngx_freebsd_hw_ncpu,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8570,409835,ngx_freebsd_kern_ipc_somaxconn,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_kern_ipc_somaxconn,,os\unix\ngx_freebsd_init.c,int ngx_freebsd_kern_ipc_somaxconn,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8571,409836,ngx_freebsd_net_inet_tcp_sendspace,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_net_inet_tcp_sendspace,,os\unix\ngx_freebsd_init.c,u_long ngx_freebsd_net_inet_tcp_sendspace,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8572,409837,ngx_freebsd_machdep_hlt_logical_cpus,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_machdep_hlt_logical_cpus,,os\unix\ngx_freebsd_init.c,int ngx_freebsd_machdep_hlt_logical_cpus,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8573,409838,ngx_freebsd_sendfile_nbytes_bug,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_sendfile_nbytes_bug,,os\unix\ngx_freebsd_init.c,ngx_uint_t ngx_freebsd_sendfile_nbytes_bug,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8574,409839,ngx_freebsd_use_tcp_nopush,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_use_tcp_nopush,,os\unix\ngx_freebsd_init.c,ngx_uint_t ngx_freebsd_use_tcp_nopush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8575,409840,ngx_debug_malloc,2,os\unix\ngx_freebsd_init.c.ngx_debug_malloc,,os\unix\ngx_freebsd_init.c,ngx_uint_t ngx_debug_malloc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8576,409841,ngx_freebsd_io,2,os\unix\ngx_freebsd_init.c.ngx_freebsd_io,,os\unix\ngx_freebsd_init.c,ngx_os_io_t ngx_freebsd_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8577,409858,sysctl_t,2,os\unix\ngx_freebsd_init.c.sysctl_t,,os\unix\ngx_freebsd_init.c,struct sysctl_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8578,409859,sysctls,2,os\unix\ngx_freebsd_init.c.sysctls,,os\unix\ngx_freebsd_init.c,sysctl_t[] sysctls,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8579,410719,ngx_atomic_uint_t,2,os\unix\ngx_gcc_atomic_amd64.h.ngx_atomic_uint_t,,os\unix\ngx_gcc_atomic_amd64.h,ngx_inline ngx_atomic_uint_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8580,410732,ngx_atomic_int_t,2,os\unix\ngx_gcc_atomic_amd64.h.ngx_atomic_int_t,,os\unix\ngx_gcc_atomic_amd64.h,ngx_inline ngx_atomic_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8581,410748,ngx_atomic_uint_t,2,os\unix\ngx_gcc_atomic_ppc.h.ngx_atomic_uint_t,,os\unix\ngx_gcc_atomic_ppc.h,ngx_inline ngx_atomic_uint_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8582,410762,ngx_atomic_int_t,2,os\unix\ngx_gcc_atomic_ppc.h.ngx_atomic_int_t,,os\unix\ngx_gcc_atomic_ppc.h,ngx_inline ngx_atomic_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8583,410780,ngx_atomic_uint_t,2,os\unix\ngx_gcc_atomic_sparc64.h.ngx_atomic_uint_t,,os\unix\ngx_gcc_atomic_sparc64.h,ngx_inline ngx_atomic_uint_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8584,410794,ngx_atomic_int_t,2,os\unix\ngx_gcc_atomic_sparc64.h.ngx_atomic_int_t,,os\unix\ngx_gcc_atomic_sparc64.h,ngx_inline ngx_atomic_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8585,410832,ngx_atomic_uint_t,2,os\unix\ngx_gcc_atomic_x86.h.ngx_atomic_uint_t,,os\unix\ngx_gcc_atomic_x86.h,ngx_inline ngx_atomic_uint_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8586,410845,ngx_atomic_int_t,2,os\unix\ngx_gcc_atomic_x86.h.ngx_atomic_int_t,,os\unix\ngx_gcc_atomic_x86.h,ngx_inline ngx_atomic_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8587,410879,ngx_eventfd,2,os\unix\ngx_linux_aio_read.c.ngx_eventfd,,os\unix\ngx_linux_aio_read.c,extern int ngx_eventfd,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8588,410880,ngx_aio_ctx,2,os\unix\ngx_linux_aio_read.c.ngx_aio_ctx,,os\unix\ngx_linux_aio_read.c,aio_context_t ngx_aio_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8589,411381,environ,2,os\unix\ngx_linux_config.h.environ,,os\unix\ngx_linux_config.h,extern char** environ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8590,411391,ngx_linux_kern_ostype,2,os\unix\ngx_linux_init.c.ngx_linux_kern_ostype,,os\unix\ngx_linux_init.c,u_char[50] ngx_linux_kern_ostype,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8591,411394,ngx_linux_kern_osrelease,2,os\unix\ngx_linux_init.c.ngx_linux_kern_osrelease,,os\unix\ngx_linux_init.c,u_char[50] ngx_linux_kern_osrelease,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8592,411397,ngx_linux_io,2,os\unix\ngx_linux_init.c.ngx_linux_io,,os\unix\ngx_linux_init.c,ngx_os_io_t ngx_linux_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8593,412037,ngx_os_io_t,2,os\unix\ngx_os.h.ngx_os_io_t,,os\unix\ngx_os.h,struct ngx_os_io_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8594,412125,ngx_iovec_t,2,os\unix\ngx_os.h.ngx_iovec_t,,os\unix\ngx_os.h,struct ngx_iovec_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8595,412140,ngx_os_io,2,os\unix\ngx_os.h.ngx_os_io,,os\unix\ngx_os.h,ngx_os_io_t ngx_os_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8596,412141,ngx_ncpu,2,os\unix\ngx_os.h.ngx_ncpu,,os\unix\ngx_os.h,ngx_int_t ngx_ncpu,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8597,412142,ngx_max_sockets,2,os\unix\ngx_os.h.ngx_max_sockets,,os\unix\ngx_os.h,ngx_int_t ngx_max_sockets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8598,412143,ngx_inherited_nonblocking,2,os\unix\ngx_os.h.ngx_inherited_nonblocking,,os\unix\ngx_os.h,ngx_uint_t ngx_inherited_nonblocking,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8599,412144,ngx_tcp_nodelay_and_tcp_nopush,2,os\unix\ngx_os.h.ngx_tcp_nodelay_and_tcp_nopush,,os\unix\ngx_os.h,ngx_uint_t ngx_tcp_nodelay_and_tcp_nopush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8600,412242,environ,2,os\unix\ngx_posix_config.h.environ,,os\unix\ngx_posix_config.h,extern char** environ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8601,412254,ngx_ncpu,2,os\unix\ngx_posix_init.c.ngx_ncpu,,os\unix\ngx_posix_init.c,ngx_int_t ngx_ncpu,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8602,412255,ngx_max_sockets,2,os\unix\ngx_posix_init.c.ngx_max_sockets,,os\unix\ngx_posix_init.c,ngx_int_t ngx_max_sockets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8603,412256,ngx_inherited_nonblocking,2,os\unix\ngx_posix_init.c.ngx_inherited_nonblocking,,os\unix\ngx_posix_init.c,ngx_uint_t ngx_inherited_nonblocking,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8604,412257,ngx_tcp_nodelay_and_tcp_nopush,2,os\unix\ngx_posix_init.c.ngx_tcp_nodelay_and_tcp_nopush,,os\unix\ngx_posix_init.c,ngx_uint_t ngx_tcp_nodelay_and_tcp_nopush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8605,412259,rlmt,2,os\unix\ngx_posix_init.c.rlmt,,os\unix\ngx_posix_init.c,struct rlimit rlmt,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8606,412260,ngx_os_io,2,os\unix\ngx_posix_init.c.ngx_os_io,,os\unix\ngx_posix_init.c,ngx_os_io_t ngx_os_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8607,412403,ngx_signal_t,2,os\unix\ngx_process.c.ngx_signal_t,,os\unix\ngx_process.c,struct ngx_signal_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8608,412427,ngx_argc,2,os\unix\ngx_process.c.ngx_argc,,os\unix\ngx_process.c,int ngx_argc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8609,412428,ngx_argv,2,os\unix\ngx_process.c.ngx_argv,,os\unix\ngx_process.c,char** ngx_argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8610,412429,ngx_os_argv,2,os\unix\ngx_process.c.ngx_os_argv,,os\unix\ngx_process.c,char** ngx_os_argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8611,412430,ngx_process_slot,2,os\unix\ngx_process.c.ngx_process_slot,,os\unix\ngx_process.c,ngx_int_t ngx_process_slot,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8612,412431,ngx_channel,2,os\unix\ngx_process.c.ngx_channel,,os\unix\ngx_process.c,ngx_socket_t ngx_channel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8613,412432,ngx_last_process,2,os\unix\ngx_process.c.ngx_last_process,,os\unix\ngx_process.c,ngx_int_t ngx_last_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8614,412433,ngx_processes,2,os\unix\ngx_process.c.ngx_processes,,os\unix\ngx_process.c,ngx_process_t[] ngx_processes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,38,0,1,1,0,0,,0,0,0,0,0,
8615,413822,ngx_process_t,2,os\unix\ngx_process.h.ngx_process_t,,os\unix\ngx_process.h,struct ngx_process_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8616,413828,ngx_exec_ctx_t,2,os\unix\ngx_process.h.ngx_exec_ctx_t,,os\unix\ngx_process.h,struct ngx_exec_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8617,413854,ngx_argc,2,os\unix\ngx_process.h.ngx_argc,,os\unix\ngx_process.h,extern int ngx_argc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8618,413855,ngx_argv,2,os\unix\ngx_process.h.ngx_argv,,os\unix\ngx_process.h,extern char** ngx_argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8619,413856,ngx_os_argv,2,os\unix\ngx_process.h.ngx_os_argv,,os\unix\ngx_process.h,extern char** ngx_os_argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8620,413857,ngx_pid,2,os\unix\ngx_process.h.ngx_pid,,os\unix\ngx_process.h,ngx_pid_t ngx_pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8621,413858,ngx_parent,2,os\unix\ngx_process.h.ngx_parent,,os\unix\ngx_process.h,ngx_pid_t ngx_parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8622,413859,ngx_channel,2,os\unix\ngx_process.h.ngx_channel,,os\unix\ngx_process.h,ngx_socket_t ngx_channel,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8623,413860,ngx_process_slot,2,os\unix\ngx_process.h.ngx_process_slot,,os\unix\ngx_process.h,ngx_int_t ngx_process_slot,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8624,413861,ngx_last_process,2,os\unix\ngx_process.h.ngx_last_process,,os\unix\ngx_process.h,ngx_int_t ngx_last_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8625,413862,ngx_processes,2,os\unix\ngx_process.h.ngx_processes,,os\unix\ngx_process.h,extern ngx_process_t[1024] ngx_processes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8626,413952,ngx_process,2,os\unix\ngx_process_cycle.c.ngx_process,,os\unix\ngx_process_cycle.c,ngx_uint_t ngx_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8627,413953,ngx_worker,2,os\unix\ngx_process_cycle.c.ngx_worker,,os\unix\ngx_process_cycle.c,ngx_uint_t ngx_worker,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8628,413954,ngx_pid,2,os\unix\ngx_process_cycle.c.ngx_pid,,os\unix\ngx_process_cycle.c,ngx_pid_t ngx_pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8629,413955,ngx_parent,2,os\unix\ngx_process_cycle.c.ngx_parent,,os\unix\ngx_process_cycle.c,ngx_pid_t ngx_parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8630,413956,ngx_reap,2,os\unix\ngx_process_cycle.c.ngx_reap,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_reap,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8631,413957,ngx_sigio,2,os\unix\ngx_process_cycle.c.ngx_sigio,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_sigio,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8632,413958,ngx_sigalrm,2,os\unix\ngx_process_cycle.c.ngx_sigalrm,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_sigalrm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8633,413959,ngx_terminate,2,os\unix\ngx_process_cycle.c.ngx_terminate,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_terminate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8634,413960,ngx_quit,2,os\unix\ngx_process_cycle.c.ngx_quit,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_quit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8635,413961,ngx_debug_quit,2,os\unix\ngx_process_cycle.c.ngx_debug_quit,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_debug_quit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8636,413962,ngx_exiting,2,os\unix\ngx_process_cycle.c.ngx_exiting,,os\unix\ngx_process_cycle.c,ngx_uint_t ngx_exiting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8637,413963,ngx_reconfigure,2,os\unix\ngx_process_cycle.c.ngx_reconfigure,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_reconfigure,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
8638,413964,ngx_reopen,2,os\unix\ngx_process_cycle.c.ngx_reopen,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_reopen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,4,0,1,1,0,0,,0,0,0,0,0,
8639,413965,ngx_change_binary,2,os\unix\ngx_process_cycle.c.ngx_change_binary,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_change_binary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8640,413966,ngx_new_binary,2,os\unix\ngx_process_cycle.c.ngx_new_binary,,os\unix\ngx_process_cycle.c,ngx_pid_t ngx_new_binary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8641,413967,ngx_inherited,2,os\unix\ngx_process_cycle.c.ngx_inherited,,os\unix\ngx_process_cycle.c,ngx_uint_t ngx_inherited,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8642,413968,ngx_daemonized,2,os\unix\ngx_process_cycle.c.ngx_daemonized,,os\unix\ngx_process_cycle.c,ngx_uint_t ngx_daemonized,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8643,413969,ngx_noaccept,2,os\unix\ngx_process_cycle.c.ngx_noaccept,,os\unix\ngx_process_cycle.c,sig_atomic_t ngx_noaccept,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8644,413970,ngx_noaccepting,2,os\unix\ngx_process_cycle.c.ngx_noaccepting,,os\unix\ngx_process_cycle.c,ngx_uint_t ngx_noaccepting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8645,413971,ngx_restart,2,os\unix\ngx_process_cycle.c.ngx_restart,,os\unix\ngx_process_cycle.c,ngx_uint_t ngx_restart,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,2,0,1,1,0,0,,0,0,0,0,0,
8646,413972,master_process,2,os\unix\ngx_process_cycle.c.master_process,,os\unix\ngx_process_cycle.c,static u_char[] master_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,3,0,1,1,0,0,,0,0,0,0,0,
8647,413976,ngx_cache_manager_ctx,2,os\unix\ngx_process_cycle.c.ngx_cache_manager_ctx,,os\unix\ngx_process_cycle.c,ngx_cache_manager_ctx_t ngx_cache_manager_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8648,413983,ngx_cache_loader_ctx,2,os\unix\ngx_process_cycle.c.ngx_cache_loader_ctx,,os\unix\ngx_process_cycle.c,ngx_cache_manager_ctx_t ngx_cache_loader_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8649,413990,ngx_exit_cycle,2,os\unix\ngx_process_cycle.c.ngx_exit_cycle,,os\unix\ngx_process_cycle.c,ngx_cycle_t ngx_exit_cycle,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8650,413991,ngx_exit_log,2,os\unix\ngx_process_cycle.c.ngx_exit_log,,os\unix\ngx_process_cycle.c,ngx_log_t ngx_exit_log,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8651,413992,ngx_exit_log_file,2,os\unix\ngx_process_cycle.c.ngx_exit_log_file,,os\unix\ngx_process_cycle.c,ngx_open_file_t ngx_exit_log_file,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8652,416924,ngx_cache_manager_ctx_t,2,os\unix\ngx_process_cycle.h.ngx_cache_manager_ctx_t,,os\unix\ngx_process_cycle.h,struct ngx_cache_manager_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8653,416935,ngx_process,2,os\unix\ngx_process_cycle.h.ngx_process,,os\unix\ngx_process_cycle.h,ngx_uint_t ngx_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8654,416936,ngx_worker,2,os\unix\ngx_process_cycle.h.ngx_worker,,os\unix\ngx_process_cycle.h,ngx_uint_t ngx_worker,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8655,416937,ngx_pid,2,os\unix\ngx_process_cycle.h.ngx_pid,,os\unix\ngx_process_cycle.h,ngx_pid_t ngx_pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8656,416938,ngx_new_binary,2,os\unix\ngx_process_cycle.h.ngx_new_binary,,os\unix\ngx_process_cycle.h,ngx_pid_t ngx_new_binary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8657,416939,ngx_inherited,2,os\unix\ngx_process_cycle.h.ngx_inherited,,os\unix\ngx_process_cycle.h,ngx_uint_t ngx_inherited,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8658,416940,ngx_daemonized,2,os\unix\ngx_process_cycle.h.ngx_daemonized,,os\unix\ngx_process_cycle.h,ngx_uint_t ngx_daemonized,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8659,416941,ngx_exiting,2,os\unix\ngx_process_cycle.h.ngx_exiting,,os\unix\ngx_process_cycle.h,ngx_uint_t ngx_exiting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8660,416942,ngx_reap,2,os\unix\ngx_process_cycle.h.ngx_reap,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_reap,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8661,416943,ngx_sigio,2,os\unix\ngx_process_cycle.h.ngx_sigio,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_sigio,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8662,416944,ngx_sigalrm,2,os\unix\ngx_process_cycle.h.ngx_sigalrm,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_sigalrm,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8663,416945,ngx_quit,2,os\unix\ngx_process_cycle.h.ngx_quit,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_quit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8664,416946,ngx_debug_quit,2,os\unix\ngx_process_cycle.h.ngx_debug_quit,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_debug_quit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8665,416947,ngx_terminate,2,os\unix\ngx_process_cycle.h.ngx_terminate,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_terminate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8666,416948,ngx_noaccept,2,os\unix\ngx_process_cycle.h.ngx_noaccept,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_noaccept,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8667,416949,ngx_reconfigure,2,os\unix\ngx_process_cycle.h.ngx_reconfigure,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_reconfigure,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8668,416950,ngx_reopen,2,os\unix\ngx_process_cycle.h.ngx_reopen,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_reopen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8669,416951,ngx_change_binary,2,os\unix\ngx_process_cycle.h.ngx_change_binary,,os\unix\ngx_process_cycle.h,sig_atomic_t ngx_change_binary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8670,417587,ngx_shm_t,2,os\unix\ngx_shmem.h.ngx_shm_t,,os\unix\ngx_shmem.h,struct ngx_shm_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8671,417742,environ,2,os\unix\ngx_solaris_config.h.environ,,os\unix\ngx_solaris_config.h,extern char** environ,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8672,417752,ngx_solaris_sysname,2,os\unix\ngx_solaris_init.c.ngx_solaris_sysname,,os\unix\ngx_solaris_init.c,char[20] ngx_solaris_sysname,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8673,417755,ngx_solaris_release,2,os\unix\ngx_solaris_init.c.ngx_solaris_release,,os\unix\ngx_solaris_init.c,char[10] ngx_solaris_release,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8674,417758,ngx_solaris_version,2,os\unix\ngx_solaris_init.c.ngx_solaris_version,,os\unix\ngx_solaris_init.c,char[50] ngx_solaris_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8675,417761,ngx_solaris_io,2,os\unix\ngx_solaris_init.c.ngx_solaris_io,,os\unix\ngx_solaris_init.c,ngx_os_io_t ngx_solaris_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8676,418425,ngx_atomic_uint_t,2,os\unix\ngx_sunpro_atomic_sparc64.h.ngx_atomic_uint_t,,os\unix\ngx_sunpro_atomic_sparc64.h,ngx_inline ngx_atomic_uint_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8677,418446,ngx_atomic_int_t,2,os\unix\ngx_sunpro_atomic_sparc64.h.ngx_atomic_int_t,,os\unix\ngx_sunpro_atomic_sparc64.h,ngx_inline ngx_atomic_int_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8678,420287,ngx_pagesize,2,os\win32\ngx_alloc.c.ngx_pagesize,,os\win32\ngx_alloc.c,ngx_uint_t ngx_pagesize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8679,420288,ngx_pagesize_shift,2,os\win32\ngx_alloc.c.ngx_pagesize_shift,,os\win32\ngx_alloc.c,ngx_uint_t ngx_pagesize_shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8680,420289,ngx_cacheline_size,2,os\win32\ngx_alloc.c.ngx_cacheline_size,,os\win32\ngx_alloc.c,ngx_uint_t ngx_cacheline_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8681,420362,ngx_pagesize,2,os\win32\ngx_alloc.h.ngx_pagesize,,os\win32\ngx_alloc.h,ngx_uint_t ngx_pagesize,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8682,420363,ngx_pagesize_shift,2,os\win32\ngx_alloc.h.ngx_pagesize_shift,,os\win32\ngx_alloc.h,ngx_uint_t ngx_pagesize_shift,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8683,420364,ngx_cacheline_size,2,os\win32\ngx_alloc.h.ngx_cacheline_size,,os\win32\ngx_alloc.h,ngx_uint_t ngx_cacheline_size,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8684,420574,ngx_cdecl,2,os\win32\ngx_event_log.c.ngx_cdecl,,os\win32\ngx_event_log.c,void ngx_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8685,422921,ngx_file_mapping_t,2,os\win32\ngx_files.h.ngx_file_mapping_t,,os\win32\ngx_files.h,struct ngx_file_mapping_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8686,422928,ngx_dir_t,2,os\win32\ngx_files.h.ngx_dir_t,,os\win32\ngx_files.h,struct ngx_dir_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8687,422939,ngx_glob_t,2,os\win32\ngx_files.h.ngx_glob_t,,os\win32\ngx_files.h,struct ngx_glob_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8688,423145,ngx_os_io_t,2,os\win32\ngx_os.h.ngx_os_io_t,,os\win32\ngx_os.h,struct ngx_os_io_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8689,423227,ngx_os_io,2,os\win32\ngx_os.h.ngx_os_io,,os\win32\ngx_os.h,ngx_os_io_t ngx_os_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8690,423228,ngx_ncpu,2,os\win32\ngx_os.h.ngx_ncpu,,os\win32\ngx_os.h,ngx_uint_t ngx_ncpu,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8691,423229,ngx_max_wsabufs,2,os\win32\ngx_os.h.ngx_max_wsabufs,,os\win32\ngx_os.h,ngx_uint_t ngx_max_wsabufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8692,423230,ngx_max_sockets,2,os\win32\ngx_os.h.ngx_max_sockets,,os\win32\ngx_os.h,ngx_int_t ngx_max_sockets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8693,423231,ngx_inherited_nonblocking,2,os\win32\ngx_os.h.ngx_inherited_nonblocking,,os\win32\ngx_os.h,ngx_uint_t ngx_inherited_nonblocking,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8694,423232,ngx_tcp_nodelay_and_tcp_nopush,2,os\win32\ngx_os.h.ngx_tcp_nodelay_and_tcp_nopush,,os\win32\ngx_os.h,ngx_uint_t ngx_tcp_nodelay_and_tcp_nopush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8695,423233,ngx_win32_version,2,os\win32\ngx_os.h.ngx_win32_version,,os\win32\ngx_os.h,ngx_uint_t ngx_win32_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8696,423234,ngx_unique,2,os\win32\ngx_os.h.ngx_unique,,os\win32\ngx_os.h,char[] ngx_unique,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8697,423245,ngx_argc,2,os\win32\ngx_process.c.ngx_argc,,os\win32\ngx_process.c,int ngx_argc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8698,423246,ngx_argv,2,os\win32\ngx_process.c.ngx_argv,,os\win32\ngx_process.c,char** ngx_argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8699,423247,ngx_os_argv,2,os\win32\ngx_process.c.ngx_os_argv,,os\win32\ngx_process.c,char** ngx_os_argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8700,423248,ngx_last_process,2,os\win32\ngx_process.c.ngx_last_process,,os\win32\ngx_process.c,ngx_int_t ngx_last_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8701,423249,ngx_processes,2,os\win32\ngx_process.c.ngx_processes,,os\win32\ngx_process.c,ngx_process_t[] ngx_processes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8702,423907,ngx_process_t,2,os\win32\ngx_process.h.ngx_process_t,,os\win32\ngx_process.h,struct ngx_process_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8703,423915,ngx_exec_ctx_t,2,os\win32\ngx_process.h.ngx_exec_ctx_t,,os\win32\ngx_process.h,struct ngx_exec_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8704,423929,ngx_argc,2,os\win32\ngx_process.h.ngx_argc,,os\win32\ngx_process.h,extern int ngx_argc,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8705,423930,ngx_argv,2,os\win32\ngx_process.h.ngx_argv,,os\win32\ngx_process.h,extern char** ngx_argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8706,423931,ngx_os_argv,2,os\win32\ngx_process.h.ngx_os_argv,,os\win32\ngx_process.h,extern char** ngx_os_argv,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8707,423932,ngx_last_process,2,os\win32\ngx_process.h.ngx_last_process,,os\win32\ngx_process.h,ngx_int_t ngx_last_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8708,423933,ngx_processes,2,os\win32\ngx_process.h.ngx_processes,,os\win32\ngx_process.h,extern ngx_process_t[] ngx_processes,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8709,423940,ngx_pid,2,os\win32\ngx_process.h.ngx_pid,,os\win32\ngx_process.h,ngx_pid_t ngx_pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8710,423941,ngx_parent,2,os\win32\ngx_process.h.ngx_parent,,os\win32\ngx_process.h,ngx_pid_t ngx_parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8711,424034,ngx_process,2,os\win32\ngx_process_cycle.c.ngx_process,,os\win32\ngx_process_cycle.c,ngx_uint_t ngx_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8712,424035,ngx_worker,2,os\win32\ngx_process_cycle.c.ngx_worker,,os\win32\ngx_process_cycle.c,ngx_uint_t ngx_worker,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8713,424036,ngx_pid,2,os\win32\ngx_process_cycle.c.ngx_pid,,os\win32\ngx_process_cycle.c,ngx_pid_t ngx_pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8714,424037,ngx_parent,2,os\win32\ngx_process_cycle.c.ngx_parent,,os\win32\ngx_process_cycle.c,ngx_pid_t ngx_parent,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8715,424038,ngx_inherited,2,os\win32\ngx_process_cycle.c.ngx_inherited,,os\win32\ngx_process_cycle.c,ngx_uint_t ngx_inherited,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8716,424039,ngx_new_binary,2,os\win32\ngx_process_cycle.c.ngx_new_binary,,os\win32\ngx_process_cycle.c,ngx_pid_t ngx_new_binary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8717,424040,ngx_terminate,2,os\win32\ngx_process_cycle.c.ngx_terminate,,os\win32\ngx_process_cycle.c,sig_atomic_t ngx_terminate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8718,424041,ngx_quit,2,os\win32\ngx_process_cycle.c.ngx_quit,,os\win32\ngx_process_cycle.c,sig_atomic_t ngx_quit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8719,424042,ngx_reopen,2,os\win32\ngx_process_cycle.c.ngx_reopen,,os\win32\ngx_process_cycle.c,sig_atomic_t ngx_reopen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8720,424043,ngx_reconfigure,2,os\win32\ngx_process_cycle.c.ngx_reconfigure,,os\win32\ngx_process_cycle.c,sig_atomic_t ngx_reconfigure,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8721,424044,ngx_exiting,2,os\win32\ngx_process_cycle.c.ngx_exiting,,os\win32\ngx_process_cycle.c,ngx_uint_t ngx_exiting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8722,424045,ngx_master_process_event,2,os\win32\ngx_process_cycle.c.ngx_master_process_event,,os\win32\ngx_process_cycle.c,HANDLE ngx_master_process_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8723,424046,ngx_master_process_event_name,2,os\win32\ngx_process_cycle.c.ngx_master_process_event_name,,os\win32\ngx_process_cycle.c,char[] ngx_master_process_event_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8724,424049,ngx_stop_event,2,os\win32\ngx_process_cycle.c.ngx_stop_event,,os\win32\ngx_process_cycle.c,HANDLE ngx_stop_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8725,424050,ngx_stop_event_name,2,os\win32\ngx_process_cycle.c.ngx_stop_event_name,,os\win32\ngx_process_cycle.c,char[] ngx_stop_event_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8726,424053,ngx_quit_event,2,os\win32\ngx_process_cycle.c.ngx_quit_event,,os\win32\ngx_process_cycle.c,HANDLE ngx_quit_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8727,424054,ngx_quit_event_name,2,os\win32\ngx_process_cycle.c.ngx_quit_event_name,,os\win32\ngx_process_cycle.c,char[] ngx_quit_event_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8728,424057,ngx_reopen_event,2,os\win32\ngx_process_cycle.c.ngx_reopen_event,,os\win32\ngx_process_cycle.c,HANDLE ngx_reopen_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8729,424058,ngx_reopen_event_name,2,os\win32\ngx_process_cycle.c.ngx_reopen_event_name,,os\win32\ngx_process_cycle.c,char[] ngx_reopen_event_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8730,424061,ngx_reload_event,2,os\win32\ngx_process_cycle.c.ngx_reload_event,,os\win32\ngx_process_cycle.c,HANDLE ngx_reload_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8731,424062,ngx_reload_event_name,2,os\win32\ngx_process_cycle.c.ngx_reload_event_name,,os\win32\ngx_process_cycle.c,char[] ngx_reload_event_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8732,424065,ngx_cache_manager_mutex,2,os\win32\ngx_process_cycle.c.ngx_cache_manager_mutex,,os\win32\ngx_process_cycle.c,HANDLE ngx_cache_manager_mutex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8733,424066,ngx_cache_manager_mutex_name,2,os\win32\ngx_process_cycle.c.ngx_cache_manager_mutex_name,,os\win32\ngx_process_cycle.c,char[] ngx_cache_manager_mutex_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8734,424069,ngx_cache_manager_event,2,os\win32\ngx_process_cycle.c.ngx_cache_manager_event,,os\win32\ngx_process_cycle.c,HANDLE ngx_cache_manager_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8735,426429,ngx_process,2,os\win32\ngx_process_cycle.h.ngx_process,,os\win32\ngx_process_cycle.h,ngx_uint_t ngx_process,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8736,426430,ngx_worker,2,os\win32\ngx_process_cycle.h.ngx_worker,,os\win32\ngx_process_cycle.h,ngx_uint_t ngx_worker,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8737,426431,ngx_pid,2,os\win32\ngx_process_cycle.h.ngx_pid,,os\win32\ngx_process_cycle.h,ngx_pid_t ngx_pid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8738,426432,ngx_exiting,2,os\win32\ngx_process_cycle.h.ngx_exiting,,os\win32\ngx_process_cycle.h,ngx_uint_t ngx_exiting,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8739,426433,ngx_quit,2,os\win32\ngx_process_cycle.h.ngx_quit,,os\win32\ngx_process_cycle.h,sig_atomic_t ngx_quit,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8740,426434,ngx_terminate,2,os\win32\ngx_process_cycle.h.ngx_terminate,,os\win32\ngx_process_cycle.h,sig_atomic_t ngx_terminate,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8741,426435,ngx_reopen,2,os\win32\ngx_process_cycle.h.ngx_reopen,,os\win32\ngx_process_cycle.h,sig_atomic_t ngx_reopen,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8742,426436,ngx_inherited,2,os\win32\ngx_process_cycle.h.ngx_inherited,,os\win32\ngx_process_cycle.h,ngx_uint_t ngx_inherited,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8743,426437,ngx_new_binary,2,os\win32\ngx_process_cycle.h.ngx_new_binary,,os\win32\ngx_process_cycle.h,ngx_pid_t ngx_new_binary,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8744,426438,ngx_master_process_event,2,os\win32\ngx_process_cycle.h.ngx_master_process_event,,os\win32\ngx_process_cycle.h,HANDLE ngx_master_process_event,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8745,426439,ngx_master_process_event_name,2,os\win32\ngx_process_cycle.h.ngx_master_process_event_name,,os\win32\ngx_process_cycle.h,char[] ngx_master_process_event_name,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8746,426446,st,2,os\win32\ngx_service.c.st,,os\win32\ngx_service.c,SERVICE_TABLE_ENTRY[] st,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8747,426660,ngx_allocation_granularity,2,os\win32\ngx_shmem.c.ngx_allocation_granularity,,os\win32\ngx_shmem.c,ngx_uint_t ngx_allocation_granularity,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8748,426997,ngx_shm_t,2,os\win32\ngx_shmem.h.ngx_shm_t,,os\win32\ngx_shmem.h,struct ngx_shm_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8749,427014,ngx_allocation_granularity,2,os\win32\ngx_shmem.h.ngx_allocation_granularity,,os\win32\ngx_shmem.h,ngx_uint_t ngx_allocation_granularity,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8750,427122,ngx_acceptex,2,os\win32\ngx_socket.h.ngx_acceptex,,os\win32\ngx_socket.h,LPFN_ACCEPTEX ngx_acceptex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8751,427123,ngx_getacceptexsockaddrs,2,os\win32\ngx_socket.h.ngx_getacceptexsockaddrs,,os\win32\ngx_socket.h,LPFN_GETACCEPTEXSOCKADDRS ngx_getacceptexsockaddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8752,427124,ngx_transmitfile,2,os\win32\ngx_socket.h.ngx_transmitfile,,os\win32\ngx_socket.h,LPFN_TRANSMITFILE ngx_transmitfile,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8753,427125,ngx_transmitpackets,2,os\win32\ngx_socket.h.ngx_transmitpackets,,os\win32\ngx_socket.h,LPFN_TRANSMITPACKETS ngx_transmitpackets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8754,427126,ngx_connectex,2,os\win32\ngx_socket.h.ngx_connectex,,os\win32\ngx_socket.h,LPFN_CONNECTEX ngx_connectex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8755,427127,ngx_disconnectex,2,os\win32\ngx_socket.h.ngx_disconnectex,,os\win32\ngx_socket.h,LPFN_DISCONNECTEX ngx_disconnectex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8756,427858,ngx_win32_version,2,os\win32\ngx_win32_init.c.ngx_win32_version,,os\win32\ngx_win32_init.c,ngx_uint_t ngx_win32_version,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8757,427859,ngx_ncpu,2,os\win32\ngx_win32_init.c.ngx_ncpu,,os\win32\ngx_win32_init.c,ngx_uint_t ngx_ncpu,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8758,427860,ngx_max_wsabufs,2,os\win32\ngx_win32_init.c.ngx_max_wsabufs,,os\win32\ngx_win32_init.c,ngx_uint_t ngx_max_wsabufs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8759,427861,ngx_max_sockets,2,os\win32\ngx_win32_init.c.ngx_max_sockets,,os\win32\ngx_win32_init.c,ngx_int_t ngx_max_sockets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8760,427862,ngx_inherited_nonblocking,2,os\win32\ngx_win32_init.c.ngx_inherited_nonblocking,,os\win32\ngx_win32_init.c,ngx_uint_t ngx_inherited_nonblocking,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8761,427866,ngx_tcp_nodelay_and_tcp_nopush,2,os\win32\ngx_win32_init.c.ngx_tcp_nodelay_and_tcp_nopush,,os\win32\ngx_win32_init.c,ngx_uint_t ngx_tcp_nodelay_and_tcp_nopush,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8762,427867,ngx_unique,2,os\win32\ngx_win32_init.c.ngx_unique,,os\win32\ngx_win32_init.c,char[] ngx_unique,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8763,427872,ngx_os_io,2,os\win32\ngx_win32_init.c.ngx_os_io,,os\win32\ngx_win32_init.c,ngx_os_io_t ngx_os_io,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8764,427888,ngx_osviex_stub_t,2,os\win32\ngx_win32_init.c.ngx_osviex_stub_t,,os\win32\ngx_win32_init.c,struct ngx_osviex_stub_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8765,427889,osviex,2,os\win32\ngx_win32_init.c.osviex,,os\win32\ngx_win32_init.c,u_int osviex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8766,427890,osvi,2,os\win32\ngx_win32_init.c.osvi,,os\win32\ngx_win32_init.c,OSVERSIONINFOEX osvi,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8767,427891,ngx_acceptex,2,os\win32\ngx_win32_init.c.ngx_acceptex,,os\win32\ngx_win32_init.c,LPFN_ACCEPTEX ngx_acceptex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8768,427892,ngx_getacceptexsockaddrs,2,os\win32\ngx_win32_init.c.ngx_getacceptexsockaddrs,,os\win32\ngx_win32_init.c,LPFN_GETACCEPTEXSOCKADDRS ngx_getacceptexsockaddrs,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8769,427893,ngx_transmitfile,2,os\win32\ngx_win32_init.c.ngx_transmitfile,,os\win32\ngx_win32_init.c,LPFN_TRANSMITFILE ngx_transmitfile,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8770,427894,ngx_transmitpackets,2,os\win32\ngx_win32_init.c.ngx_transmitpackets,,os\win32\ngx_win32_init.c,LPFN_TRANSMITPACKETS ngx_transmitpackets,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8771,427895,ngx_connectex,2,os\win32\ngx_win32_init.c.ngx_connectex,,os\win32\ngx_win32_init.c,LPFN_CONNECTEX ngx_connectex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8772,427896,ngx_disconnectex,2,os\win32\ngx_win32_init.c.ngx_disconnectex,,os\win32\ngx_win32_init.c,LPFN_DISCONNECTEX ngx_disconnectex,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8773,427897,ax_guid,2,os\win32\ngx_win32_init.c.ax_guid,,os\win32\ngx_win32_init.c,GUID ax_guid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8774,427901,as_guid,2,os\win32\ngx_win32_init.c.as_guid,,os\win32\ngx_win32_init.c,GUID as_guid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8775,427905,tf_guid,2,os\win32\ngx_win32_init.c.tf_guid,,os\win32\ngx_win32_init.c,GUID tf_guid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8776,427909,tp_guid,2,os\win32\ngx_win32_init.c.tp_guid,,os\win32\ngx_win32_init.c,GUID tp_guid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8777,427913,cx_guid,2,os\win32\ngx_win32_init.c.cx_guid,,os\win32\ngx_win32_init.c,GUID cx_guid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8778,427917,dx_guid,2,os\win32\ngx_win32_init.c.dx_guid,,os\win32\ngx_win32_init.c,GUID dx_guid,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8779,430343,ngx_stream_max_module,2,stream\ngx_stream.c.ngx_stream_max_module,,stream\ngx_stream.c,ngx_uint_t ngx_stream_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8780,430344,ngx_stream_top_filter,2,stream\ngx_stream.c.ngx_stream_top_filter,,stream\ngx_stream.c,ngx_stream_filter_pt ngx_stream_top_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8781,430345,ngx_stream_commands,2,stream\ngx_stream.c.ngx_stream_commands,,stream\ngx_stream.c,static ngx_command_t[] ngx_stream_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8782,430362,ngx_stream_module_ctx,2,stream\ngx_stream.c.ngx_stream_module_ctx,,stream\ngx_stream.c,ngx_core_module_t ngx_stream_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8783,430370,ngx_stream_module,2,stream\ngx_stream.c.ngx_stream_module,,stream\ngx_stream.c,ngx_module_t ngx_stream_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8784,431964,ngx_stream_conf_ctx_t,2,stream\ngx_stream.h.ngx_stream_conf_ctx_t,,stream\ngx_stream.h,struct ngx_stream_conf_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8785,431986,ngx_stream_listen_t,2,stream\ngx_stream.h.ngx_stream_listen_t,,stream\ngx_stream.h,struct ngx_stream_listen_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8786,431992,ngx_stream_addr_conf_t,2,stream\ngx_stream.h.ngx_stream_addr_conf_t,,stream\ngx_stream.h,struct ngx_stream_addr_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8787,431996,ngx_stream_in_addr_t,2,stream\ngx_stream.h.ngx_stream_in_addr_t,,stream\ngx_stream.h,struct ngx_stream_in_addr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8788,432000,ngx_stream_port_t,2,stream\ngx_stream.h.ngx_stream_port_t,,stream\ngx_stream.h,struct ngx_stream_port_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8789,432006,ngx_stream_conf_port_t,2,stream\ngx_stream.h.ngx_stream_conf_port_t,,stream\ngx_stream.h,struct ngx_stream_conf_port_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8790,432009,ngx_stream_conf_addr_t,2,stream\ngx_stream.h.ngx_stream_conf_addr_t,,stream\ngx_stream.h,struct ngx_stream_conf_addr_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8791,432025,ngx_stream_phases,2,stream\ngx_stream.h.ngx_stream_phases,,stream\ngx_stream.h,enum ngx_stream_phases,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8792,432050,ngx_stream_phase_engine_t,2,stream\ngx_stream.h.ngx_stream_phase_engine_t,,stream\ngx_stream.h,struct ngx_stream_phase_engine_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8793,432053,ngx_stream_phase_t,2,stream\ngx_stream.h.ngx_stream_phase_t,,stream\ngx_stream.h,struct ngx_stream_phase_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8794,432074,ngx_stream_core_main_conf_t,2,stream\ngx_stream.h.ngx_stream_core_main_conf_t,,stream\ngx_stream.h,struct ngx_stream_core_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8795,432088,ngx_stream_core_srv_conf_t,2,stream\ngx_stream.h.ngx_stream_core_srv_conf_t,,stream\ngx_stream.h,struct ngx_stream_core_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8796,432145,ngx_stream_module_t,2,stream\ngx_stream.h.ngx_stream_module_t,,stream\ngx_stream.h,struct ngx_stream_module_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8797,432185,ngx_stream_module,2,stream\ngx_stream.h.ngx_stream_module,,stream\ngx_stream.h,ngx_module_t ngx_stream_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8798,432186,ngx_stream_max_module,2,stream\ngx_stream.h.ngx_stream_max_module,,stream\ngx_stream.h,ngx_uint_t ngx_stream_max_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8799,432187,ngx_stream_core_module,2,stream\ngx_stream.h.ngx_stream_core_module,,stream\ngx_stream.h,ngx_module_t ngx_stream_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8800,432195,ngx_stream_top_filter,2,stream\ngx_stream.h.ngx_stream_top_filter,,stream\ngx_stream.h,ngx_stream_filter_pt ngx_stream_top_filter,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8801,432211,ngx_stream_access_rule_t,2,stream\ngx_stream_access_module.c.ngx_stream_access_rule_t,,stream\ngx_stream_access_module.c,struct ngx_stream_access_rule_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8802,432216,ngx_stream_access_srv_conf_t,2,stream\ngx_stream_access_module.c.ngx_stream_access_srv_conf_t,,stream\ngx_stream_access_module.c,struct ngx_stream_access_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8803,432259,ngx_stream_access_commands,2,stream\ngx_stream_access_module.c.ngx_stream_access_commands,,stream\ngx_stream_access_module.c,static ngx_command_t[] ngx_stream_access_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8804,432288,ngx_stream_access_module_ctx,2,stream\ngx_stream_access_module.c.ngx_stream_access_module_ctx,,stream\ngx_stream_access_module.c,ngx_stream_module_t ngx_stream_access_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8805,432298,ngx_stream_access_module,2,stream\ngx_stream_access_module.c.ngx_stream_access_module,,stream\ngx_stream_access_module.c,ngx_module_t ngx_stream_access_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8806,432802,ngx_stream_core_commands,2,stream\ngx_stream_core_module.c.ngx_stream_core_commands,,stream\ngx_stream_core_module.c,static ngx_command_t[] ngx_stream_core_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8807,432947,ngx_stream_core_module_ctx,2,stream\ngx_stream_core_module.c.ngx_stream_core_module_ctx,,stream\ngx_stream_core_module.c,ngx_stream_module_t ngx_stream_core_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8808,432957,ngx_stream_core_module,2,stream\ngx_stream_core_module.c.ngx_stream_core_module,,stream\ngx_stream_core_module.c,ngx_module_t ngx_stream_core_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8809,434807,ngx_stream_geo_range_t,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_range_t,,stream\ngx_stream_geo_module.c,struct ngx_stream_geo_range_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8810,434811,ngx_stream_geo_trees_t,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_trees_t,,stream\ngx_stream_geo_module.c,struct ngx_stream_geo_trees_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8811,434815,ngx_stream_geo_high_ranges_t,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_high_ranges_t,,stream\ngx_stream_geo_module.c,struct ngx_stream_geo_high_ranges_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8812,434820,ngx_stream_geo_variable_value_node_t,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_variable_value_node_t,,stream\ngx_stream_geo_module.c,struct ngx_stream_geo_variable_value_node_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8813,434839,ngx_stream_geo_conf_ctx_t,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_conf_ctx_t,,stream\ngx_stream_geo_module.c,struct ngx_stream_geo_conf_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8814,434846,ngx_stream_geo_ctx_t,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_ctx_t,,stream\ngx_stream_geo_module.c,struct ngx_stream_geo_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8815,434948,ngx_stream_geo_commands,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_commands,,stream\ngx_stream_geo_module.c,static ngx_command_t[] ngx_stream_geo_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8816,434965,ngx_stream_geo_module_ctx,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_module_ctx,,stream\ngx_stream_geo_module.c,ngx_stream_module_t ngx_stream_geo_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8817,434975,ngx_stream_geo_module,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_module,,stream\ngx_stream_geo_module.c,ngx_module_t ngx_stream_geo_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8818,435004,ngx_stream_geo_header_t,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_header_t,,stream\ngx_stream_geo_module.c,struct ngx_stream_geo_header_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8819,435005,ngx_stream_geo_header,2,stream\ngx_stream_geo_module.c.ngx_stream_geo_header,,stream\ngx_stream_geo_module.c,ngx_stream_geo_header_t ngx_stream_geo_header,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8820,438924,ngx_stream_geoip_conf_t,2,stream\ngx_stream_geoip_module.c.ngx_stream_geoip_conf_t,,stream\ngx_stream_geoip_module.c,struct ngx_stream_geoip_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8821,438928,ngx_stream_geoip_var_t,2,stream\ngx_stream_geoip_module.c.ngx_stream_geoip_var_t,,stream\ngx_stream_geoip_module.c,struct ngx_stream_geoip_var_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8822,438935,ngx_stream_geoip_country_functions,2,stream\ngx_stream_geoip_module.c.ngx_stream_geoip_country_functions,,stream\ngx_stream_geoip_module.c,char  ngx_stream_geoip_country_functions,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8823,439025,ngx_stream_geoip_commands,2,stream\ngx_stream_geoip_module.c.ngx_stream_geoip_commands,,stream\ngx_stream_geoip_module.c,static ngx_command_t[] ngx_stream_geoip_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8824,439060,ngx_stream_geoip_module_ctx,2,stream\ngx_stream_geoip_module.c.ngx_stream_geoip_module_ctx,,stream\ngx_stream_geoip_module.c,ngx_stream_module_t ngx_stream_geoip_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8825,439070,ngx_stream_geoip_module,2,stream\ngx_stream_geoip_module.c.ngx_stream_geoip_module,,stream\ngx_stream_geoip_module.c,ngx_module_t ngx_stream_geoip_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8826,439087,ngx_stream_geoip_vars,2,stream\ngx_stream_geoip_module.c.ngx_stream_geoip_vars,,stream\ngx_stream_geoip_module.c,static ngx_stream_variable_t[] ngx_stream_geoip_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8827,441260,ngx_stream_limit_conn_node_t,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_node_t,,stream\ngx_stream_limit_conn_module.c,struct ngx_stream_limit_conn_node_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8828,441264,ngx_stream_limit_conn_cleanup_t,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_cleanup_t,,stream\ngx_stream_limit_conn_module.c,struct ngx_stream_limit_conn_cleanup_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8829,441268,ngx_stream_limit_conn_shctx_t,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_shctx_t,,stream\ngx_stream_limit_conn_module.c,struct ngx_stream_limit_conn_shctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8830,441273,ngx_stream_limit_conn_ctx_t,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_ctx_t,,stream\ngx_stream_limit_conn_module.c,struct ngx_stream_limit_conn_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8831,441277,ngx_stream_limit_conn_limit_t,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_limit_t,,stream\ngx_stream_limit_conn_module.c,struct ngx_stream_limit_conn_limit_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8832,441282,ngx_stream_limit_conn_conf_t,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_conf_t,,stream\ngx_stream_limit_conn_module.c,struct ngx_stream_limit_conn_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8833,441339,ngx_stream_limit_conn_log_levels,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_log_levels,,stream\ngx_stream_limit_conn_module.c,static ngx_conf_enum_t[] ngx_stream_limit_conn_log_levels,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8834,441362,ngx_stream_limit_conn_commands,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_commands,,stream\ngx_stream_limit_conn_module.c,static ngx_command_t[] ngx_stream_limit_conn_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8835,441418,ngx_stream_limit_conn_module_ctx,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_module_ctx,,stream\ngx_stream_limit_conn_module.c,ngx_stream_module_t ngx_stream_limit_conn_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8836,441428,ngx_stream_limit_conn_module,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_module,,stream\ngx_stream_limit_conn_module.c,ngx_module_t ngx_stream_limit_conn_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8837,441445,ngx_stream_limit_conn_vars,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_vars,,stream\ngx_stream_limit_conn_module.c,static ngx_stream_variable_t[] ngx_stream_limit_conn_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8838,441458,ngx_stream_limit_conn_status,2,stream\ngx_stream_limit_conn_module.c.ngx_stream_limit_conn_status,,stream\ngx_stream_limit_conn_module.c,static ngx_str_t[] ngx_stream_limit_conn_status,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8839,443145,ngx_stream_log_fmt_t,2,stream\ngx_stream_log_module.c.ngx_stream_log_fmt_t,,stream\ngx_stream_log_module.c,struct ngx_stream_log_fmt_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8840,443148,ngx_stream_log_main_conf_t,2,stream\ngx_stream_log_module.c.ngx_stream_log_main_conf_t,,stream\ngx_stream_log_module.c,struct ngx_stream_log_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8841,443156,ngx_stream_log_buf_t,2,stream\ngx_stream_log_module.c.ngx_stream_log_buf_t,,stream\ngx_stream_log_module.c,struct ngx_stream_log_buf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8842,443160,ngx_stream_log_script_t,2,stream\ngx_stream_log_module.c.ngx_stream_log_script_t,,stream\ngx_stream_log_module.c,struct ngx_stream_log_script_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8843,443169,ngx_stream_log_t,2,stream\ngx_stream_log_module.c.ngx_stream_log_t,,stream\ngx_stream_log_module.c,struct ngx_stream_log_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8844,443176,ngx_stream_log_srv_conf_t,2,stream\ngx_stream_log_module.c.ngx_stream_log_srv_conf_t,,stream\ngx_stream_log_module.c,struct ngx_stream_log_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8845,443181,ngx_stream_log_var_t,2,stream\ngx_stream_log_module.c.ngx_stream_log_var_t,,stream\ngx_stream_log_module.c,struct ngx_stream_log_var_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8846,443316,ngx_stream_log_commands,2,stream\ngx_stream_log_module.c.ngx_stream_log_commands,,stream\ngx_stream_log_module.c,static ngx_command_t[] ngx_stream_log_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8847,443355,ngx_stream_log_module_ctx,2,stream\ngx_stream_log_module.c.ngx_stream_log_module_ctx,,stream\ngx_stream_log_module.c,ngx_stream_module_t ngx_stream_log_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8848,443365,ngx_stream_log_module,2,stream\ngx_stream_log_module.c.ngx_stream_log_module,,stream\ngx_stream_log_module.c,ngx_module_t ngx_stream_log_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8849,446845,ngx_stream_map_conf_t,2,stream\ngx_stream_map_module.c.ngx_stream_map_conf_t,,stream\ngx_stream_map_module.c,struct ngx_stream_map_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8850,446854,ngx_stream_map_conf_ctx_t,2,stream\ngx_stream_map_module.c.ngx_stream_map_conf_ctx_t,,stream\ngx_stream_map_module.c,struct ngx_stream_map_conf_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8851,446860,ngx_stream_map_ctx_t,2,stream\ngx_stream_map_module.c.ngx_stream_map_ctx_t,,stream\ngx_stream_map_module.c,struct ngx_stream_map_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8852,446881,ngx_stream_map_commands,2,stream\ngx_stream_map_module.c.ngx_stream_map_commands,,stream\ngx_stream_map_module.c,static ngx_command_t[] ngx_stream_map_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8853,446922,ngx_stream_map_module_ctx,2,stream\ngx_stream_map_module.c.ngx_stream_map_module_ctx,,stream\ngx_stream_map_module.c,ngx_stream_module_t ngx_stream_map_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8854,446932,ngx_stream_map_module,2,stream\ngx_stream_map_module.c.ngx_stream_map_module,,stream\ngx_stream_map_module.c,ngx_module_t ngx_stream_map_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8855,447716,ngx_libc_cdecl,2,stream\ngx_stream_map_module.c.ngx_libc_cdecl,,stream\ngx_stream_map_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8856,448332,ngx_stream_upstream_local_t,2,stream\ngx_stream_proxy_module.c.ngx_stream_upstream_local_t,,stream\ngx_stream_proxy_module.c,struct ngx_stream_upstream_local_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8857,448364,ngx_stream_proxy_srv_conf_t,2,stream\ngx_stream_proxy_module.c.ngx_stream_proxy_srv_conf_t,,stream\ngx_stream_proxy_module.c,struct ngx_stream_proxy_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8858,448481,ngx_conf_deprecated_proxy_downstream_buffer,2,stream\ngx_stream_proxy_module.c.ngx_conf_deprecated_proxy_downstream_buffer,,stream\ngx_stream_proxy_module.c,ngx_conf_deprecated_t ngx_conf_deprecated_proxy_downstream_buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8859,448488,ngx_conf_deprecated_proxy_upstream_buffer,2,stream\ngx_stream_proxy_module.c.ngx_conf_deprecated_proxy_upstream_buffer,,stream\ngx_stream_proxy_module.c,ngx_conf_deprecated_t ngx_conf_deprecated_proxy_upstream_buffer,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8860,448495,ngx_stream_proxy_commands,2,stream\ngx_stream_proxy_module.c.ngx_stream_proxy_commands,,stream\ngx_stream_proxy_module.c,static ngx_command_t[] ngx_stream_proxy_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8861,448720,ngx_stream_proxy_module_ctx,2,stream\ngx_stream_proxy_module.c.ngx_stream_proxy_module_ctx,,stream\ngx_stream_proxy_module.c,ngx_stream_module_t ngx_stream_proxy_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8862,448730,ngx_stream_proxy_module,2,stream\ngx_stream_proxy_module.c.ngx_stream_proxy_module,,stream\ngx_stream_proxy_module.c,ngx_module_t ngx_stream_proxy_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8863,452932,ngx_stream_realip_srv_conf_t,2,stream\ngx_stream_realip_module.c.ngx_stream_realip_srv_conf_t,,stream\ngx_stream_realip_module.c,struct ngx_stream_realip_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8864,452938,ngx_stream_realip_ctx_t,2,stream\ngx_stream_realip_module.c.ngx_stream_realip_ctx_t,,stream\ngx_stream_realip_module.c,struct ngx_stream_realip_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8865,452993,ngx_stream_realip_commands,2,stream\ngx_stream_realip_module.c.ngx_stream_realip_commands,,stream\ngx_stream_realip_module.c,static ngx_command_t[] ngx_stream_realip_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8866,453010,ngx_stream_realip_module_ctx,2,stream\ngx_stream_realip_module.c.ngx_stream_realip_module_ctx,,stream\ngx_stream_realip_module.c,ngx_stream_module_t ngx_stream_realip_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8867,453020,ngx_stream_realip_module,2,stream\ngx_stream_realip_module.c.ngx_stream_realip_module,,stream\ngx_stream_realip_module.c,ngx_module_t ngx_stream_realip_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8868,453037,ngx_stream_realip_vars,2,stream\ngx_stream_realip_module.c.ngx_stream_realip_vars,,stream\ngx_stream_realip_module.c,static ngx_stream_variable_t[] ngx_stream_realip_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8869,453825,ngx_stream_return_srv_conf_t,2,stream\ngx_stream_return_module.c.ngx_stream_return_srv_conf_t,,stream\ngx_stream_return_module.c,struct ngx_stream_return_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8870,453828,ngx_stream_return_ctx_t,2,stream\ngx_stream_return_module.c.ngx_stream_return_ctx_t,,stream\ngx_stream_return_module.c,struct ngx_stream_return_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8871,453851,ngx_stream_return_commands,2,stream\ngx_stream_return_module.c.ngx_stream_return_commands,,stream\ngx_stream_return_module.c,static ngx_command_t[] ngx_stream_return_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8872,453866,ngx_stream_return_module_ctx,2,stream\ngx_stream_return_module.c.ngx_stream_return_module_ctx,,stream\ngx_stream_return_module.c,ngx_stream_module_t ngx_stream_return_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8873,453876,ngx_stream_return_module,2,stream\ngx_stream_return_module.c.ngx_stream_return_module,,stream\ngx_stream_return_module.c,ngx_module_t ngx_stream_return_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8874,454301,ngx_stream_script_exit_code,2,stream\ngx_stream_script.c.ngx_stream_script_exit_code,,stream\ngx_stream_script.c,uintptr_t ngx_stream_script_exit_code,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8875,456894,ngx_stream_script_engine_t,2,stream\ngx_stream_script.h.ngx_stream_script_engine_t,,stream\ngx_stream_script.h,struct ngx_stream_script_engine_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8876,456910,ngx_stream_script_compile_t,2,stream\ngx_stream_script.h.ngx_stream_script_compile_t,,stream\ngx_stream_script.h,struct ngx_stream_script_compile_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8877,456919,ngx_stream_complex_value_t,2,stream\ngx_stream_script.h.ngx_stream_complex_value_t,,stream\ngx_stream_script.h,struct ngx_stream_complex_value_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8878,456927,ngx_stream_compile_complex_value_t,2,stream\ngx_stream_script.h.ngx_stream_compile_complex_value_t,,stream\ngx_stream_script.h,struct ngx_stream_compile_complex_value_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8879,456941,ngx_stream_script_copy_code_t,2,stream\ngx_stream_script.h.ngx_stream_script_copy_code_t,,stream\ngx_stream_script.h,struct ngx_stream_script_copy_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8880,456945,ngx_stream_script_var_code_t,2,stream\ngx_stream_script.h.ngx_stream_script_var_code_t,,stream\ngx_stream_script.h,struct ngx_stream_script_var_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8881,456949,ngx_stream_script_copy_capture_code_t,2,stream\ngx_stream_script.h.ngx_stream_script_copy_capture_code_t,,stream\ngx_stream_script.h,struct ngx_stream_script_copy_capture_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8882,456953,ngx_stream_script_full_name_code_t,2,stream\ngx_stream_script.h.ngx_stream_script_full_name_code_t,,stream\ngx_stream_script.h,struct ngx_stream_script_full_name_code_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8883,457078,ngx_stream_set_cmd_t,2,stream\ngx_stream_set_module.c.ngx_stream_set_cmd_t,,stream\ngx_stream_set_module.c,struct ngx_stream_set_cmd_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8884,457081,ngx_stream_set_srv_conf_t,2,stream\ngx_stream_set_module.c.ngx_stream_set_srv_conf_t,,stream\ngx_stream_set_module.c,struct ngx_stream_set_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8885,457111,ngx_stream_set_commands,2,stream\ngx_stream_set_module.c.ngx_stream_set_commands,,stream\ngx_stream_set_module.c,static ngx_command_t[] ngx_stream_set_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8886,457126,ngx_stream_set_module_ctx,2,stream\ngx_stream_set_module.c.ngx_stream_set_module_ctx,,stream\ngx_stream_set_module.c,ngx_stream_module_t ngx_stream_set_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8887,457136,ngx_stream_set_module,2,stream\ngx_stream_set_module.c.ngx_stream_set_module,,stream\ngx_stream_set_module.c,ngx_module_t ngx_stream_set_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8888,457603,ngx_stream_split_clients_part_t,2,stream\ngx_stream_split_clients_module.c.ngx_stream_split_clients_part_t,,stream\ngx_stream_split_clients_module.c,struct ngx_stream_split_clients_part_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8889,457607,ngx_stream_split_clients_ctx_t,2,stream\ngx_stream_split_clients_module.c.ngx_stream_split_clients_ctx_t,,stream\ngx_stream_split_clients_module.c,struct ngx_stream_split_clients_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8890,457622,ngx_stream_split_clients_commands,2,stream\ngx_stream_split_clients_module.c.ngx_stream_split_clients_commands,,stream\ngx_stream_split_clients_module.c,static ngx_command_t[] ngx_stream_split_clients_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8891,457639,ngx_stream_split_clients_module_ctx,2,stream\ngx_stream_split_clients_module.c.ngx_stream_split_clients_module_ctx,,stream\ngx_stream_split_clients_module.c,ngx_stream_module_t ngx_stream_split_clients_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8892,457649,ngx_stream_split_clients_module,2,stream\ngx_stream_split_clients_module.c.ngx_stream_split_clients_module,,stream\ngx_stream_split_clients_module.c,ngx_module_t ngx_stream_split_clients_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8893,458321,ngx_stream_ssl_protocols,2,stream\ngx_stream_ssl_module.c.ngx_stream_ssl_protocols,,stream\ngx_stream_ssl_module.c,static ngx_conf_bitmask_t[] ngx_stream_ssl_protocols,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8894,458352,ngx_stream_ssl_verify,2,stream\ngx_stream_ssl_module.c.ngx_stream_ssl_verify,,stream\ngx_stream_ssl_module.c,static ngx_conf_enum_t[] ngx_stream_ssl_verify,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8895,458375,ngx_stream_ssl_conf_command_post,2,stream\ngx_stream_ssl_module.c.ngx_stream_ssl_conf_command_post,,stream\ngx_stream_ssl_module.c,ngx_conf_post_t ngx_stream_ssl_conf_command_post,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8896,458380,ngx_stream_ssl_commands,2,stream\ngx_stream_ssl_module.c.ngx_stream_ssl_commands,,stream\ngx_stream_ssl_module.c,static ngx_command_t[] ngx_stream_ssl_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8897,458650,ngx_stream_ssl_module_ctx,2,stream\ngx_stream_ssl_module.c.ngx_stream_ssl_module_ctx,,stream\ngx_stream_ssl_module.c,ngx_stream_module_t ngx_stream_ssl_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8898,458660,ngx_stream_ssl_module,2,stream\ngx_stream_ssl_module.c.ngx_stream_ssl_module,,stream\ngx_stream_ssl_module.c,ngx_module_t ngx_stream_ssl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8899,458677,ngx_stream_ssl_vars,2,stream\ngx_stream_ssl_module.c.ngx_stream_ssl_vars,,stream\ngx_stream_ssl_module.c,static ngx_stream_variable_t[] ngx_stream_ssl_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8900,458862,ngx_stream_ssl_sess_id_ctx,2,stream\ngx_stream_ssl_module.c.ngx_stream_ssl_sess_id_ctx,,stream\ngx_stream_ssl_module.c,ngx_str_t ngx_stream_ssl_sess_id_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8901,460733,ngx_stream_ssl_conf_t,2,stream\ngx_stream_ssl_module.h.ngx_stream_ssl_conf_t,,stream\ngx_stream_ssl_module.h,struct ngx_stream_ssl_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8902,460734,ngx_stream_ssl_module,2,stream\ngx_stream_ssl_module.h.ngx_stream_ssl_module,,stream\ngx_stream_ssl_module.h,ngx_module_t ngx_stream_ssl_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8903,460748,ngx_stream_ssl_preread_srv_conf_t,2,stream\ngx_stream_ssl_preread_module.c.ngx_stream_ssl_preread_srv_conf_t,,stream\ngx_stream_ssl_preread_module.c,struct ngx_stream_ssl_preread_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8904,460770,ngx_stream_ssl_preread_ctx_t,2,stream\ngx_stream_ssl_preread_module.c.ngx_stream_ssl_preread_ctx_t,,stream\ngx_stream_ssl_preread_module.c,struct ngx_stream_ssl_preread_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8905,460826,ngx_stream_ssl_preread_commands,2,stream\ngx_stream_ssl_preread_module.c.ngx_stream_ssl_preread_commands,,stream\ngx_stream_ssl_preread_module.c,static ngx_command_t[] ngx_stream_ssl_preread_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8906,460845,ngx_stream_ssl_preread_module_ctx,2,stream\ngx_stream_ssl_preread_module.c.ngx_stream_ssl_preread_module_ctx,,stream\ngx_stream_ssl_preread_module.c,ngx_stream_module_t ngx_stream_ssl_preread_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8907,460855,ngx_stream_ssl_preread_module,2,stream\ngx_stream_ssl_preread_module.c.ngx_stream_ssl_preread_module,,stream\ngx_stream_ssl_preread_module.c,ngx_module_t ngx_stream_ssl_preread_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8908,460872,ngx_stream_ssl_preread_vars,2,stream\ngx_stream_ssl_preread_module.c.ngx_stream_ssl_preread_vars,,stream\ngx_stream_ssl_preread_module.c,static ngx_stream_variable_t[] ngx_stream_ssl_preread_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8909,462412,ngx_stream_upstream_commands,2,stream\ngx_stream_upstream.c.ngx_stream_upstream_commands,,stream\ngx_stream_upstream.c,static ngx_command_t[] ngx_stream_upstream_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8910,462439,ngx_stream_upstream_module_ctx,2,stream\ngx_stream_upstream.c.ngx_stream_upstream_module_ctx,,stream\ngx_stream_upstream.c,ngx_stream_module_t ngx_stream_upstream_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8911,462449,ngx_stream_upstream_module,2,stream\ngx_stream_upstream.c.ngx_stream_upstream_module,,stream\ngx_stream_upstream.c,ngx_module_t ngx_stream_upstream_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8912,462466,ngx_stream_upstream_vars,2,stream\ngx_stream_upstream.c.ngx_stream_upstream_vars,,stream\ngx_stream_upstream.c,static ngx_stream_variable_t[] ngx_stream_upstream_vars,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8913,464322,ngx_stream_upstream_main_conf_t,2,stream\ngx_stream_upstream.h.ngx_stream_upstream_main_conf_t,,stream\ngx_stream_upstream.h,struct ngx_stream_upstream_main_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8914,464341,ngx_stream_upstream_peer_t,2,stream\ngx_stream_upstream.h.ngx_stream_upstream_peer_t,,stream\ngx_stream_upstream.h,struct ngx_stream_upstream_peer_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8915,464354,ngx_stream_upstream_server_t,2,stream\ngx_stream_upstream.h.ngx_stream_upstream_server_t,,stream\ngx_stream_upstream.h,struct ngx_stream_upstream_server_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8916,464373,ngx_stream_upstream_state_t,2,stream\ngx_stream_upstream.h.ngx_stream_upstream_state_t,,stream\ngx_stream_upstream.h,struct ngx_stream_upstream_state_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8917,464385,ngx_stream_upstream_resolved_t,2,stream\ngx_stream_upstream.h.ngx_stream_upstream_resolved_t,,stream\ngx_stream_upstream.h,struct ngx_stream_upstream_resolved_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8918,464408,ngx_stream_upstream_t,2,stream\ngx_stream_upstream.h.ngx_stream_upstream_t,,stream\ngx_stream_upstream.h,struct ngx_stream_upstream_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8919,464416,ngx_stream_upstream_module,2,stream\ngx_stream_upstream.h.ngx_stream_upstream_module,,stream\ngx_stream_upstream.h,ngx_module_t ngx_stream_upstream_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8920,464431,ngx_stream_upstream_chash_point_t,2,stream\ngx_stream_upstream_hash_module.c.ngx_stream_upstream_chash_point_t,,stream\ngx_stream_upstream_hash_module.c,struct ngx_stream_upstream_chash_point_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8921,464441,ngx_stream_upstream_chash_points_t,2,stream\ngx_stream_upstream_hash_module.c.ngx_stream_upstream_chash_points_t,,stream\ngx_stream_upstream_hash_module.c,struct ngx_stream_upstream_chash_points_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8922,464445,ngx_stream_upstream_hash_srv_conf_t,2,stream\ngx_stream_upstream_hash_module.c.ngx_stream_upstream_hash_srv_conf_t,,stream\ngx_stream_upstream_hash_module.c,struct ngx_stream_upstream_hash_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8923,464454,ngx_stream_upstream_hash_peer_data_t,2,stream\ngx_stream_upstream_hash_module.c.ngx_stream_upstream_hash_peer_data_t,,stream\ngx_stream_upstream_hash_module.c,struct ngx_stream_upstream_hash_peer_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8924,464479,ngx_libc_cdecl,2,stream\ngx_stream_upstream_hash_module.c.ngx_libc_cdecl,,stream\ngx_stream_upstream_hash_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8925,464517,ngx_stream_upstream_hash_commands,2,stream\ngx_stream_upstream_hash_module.c.ngx_stream_upstream_hash_commands,,stream\ngx_stream_upstream_hash_module.c,static ngx_command_t[] ngx_stream_upstream_hash_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8926,464532,ngx_stream_upstream_hash_module_ctx,2,stream\ngx_stream_upstream_hash_module.c.ngx_stream_upstream_hash_module_ctx,,stream\ngx_stream_upstream_hash_module.c,ngx_stream_module_t ngx_stream_upstream_hash_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8927,464542,ngx_stream_upstream_hash_module,2,stream\ngx_stream_upstream_hash_module.c.ngx_stream_upstream_hash_module,,stream\ngx_stream_upstream_hash_module.c,ngx_module_t ngx_stream_upstream_hash_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8928,465527,ngx_libc_cdecl,2,stream\ngx_stream_upstream_hash_module.c.ngx_libc_cdecl,,stream\ngx_stream_upstream_hash_module.c,static int ngx_libc_cdecl,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8929,466359,ngx_stream_upstream_least_conn_commands,2,stream\ngx_stream_upstream_least_conn_module.c.ngx_stream_upstream_least_conn_commands,,stream\ngx_stream_upstream_least_conn_module.c,static ngx_command_t[] ngx_stream_upstream_least_conn_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8930,466374,ngx_stream_upstream_least_conn_module_ctx,2,stream\ngx_stream_upstream_least_conn_module.c.ngx_stream_upstream_least_conn_module_ctx,,stream\ngx_stream_upstream_least_conn_module.c,ngx_stream_module_t ngx_stream_upstream_least_conn_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8931,466384,ngx_stream_upstream_least_conn_module,2,stream\ngx_stream_upstream_least_conn_module.c.ngx_stream_upstream_least_conn_module,,stream\ngx_stream_upstream_least_conn_module.c,ngx_module_t ngx_stream_upstream_least_conn_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8932,467083,ngx_stream_upstream_random_range_t,2,stream\ngx_stream_upstream_random_module.c.ngx_stream_upstream_random_range_t,,stream\ngx_stream_upstream_random_module.c,struct ngx_stream_upstream_random_range_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8933,467087,ngx_stream_upstream_random_srv_conf_t,2,stream\ngx_stream_upstream_random_module.c.ngx_stream_upstream_random_srv_conf_t,,stream\ngx_stream_upstream_random_module.c,struct ngx_stream_upstream_random_srv_conf_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8934,467092,ngx_stream_upstream_random_peer_data_t,2,stream\ngx_stream_upstream_random_module.c.ngx_stream_upstream_random_peer_data_t,,stream\ngx_stream_upstream_random_module.c,struct ngx_stream_upstream_random_peer_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8935,467141,ngx_stream_upstream_random_commands,2,stream\ngx_stream_upstream_random_module.c.ngx_stream_upstream_random_commands,,stream\ngx_stream_upstream_random_module.c,static ngx_command_t[] ngx_stream_upstream_random_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8936,467158,ngx_stream_upstream_random_module_ctx,2,stream\ngx_stream_upstream_random_module.c.ngx_stream_upstream_random_module_ctx,,stream\ngx_stream_upstream_random_module.c,ngx_stream_module_t ngx_stream_upstream_random_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8937,467168,ngx_stream_upstream_random_module,2,stream\ngx_stream_upstream_random_module.c.ngx_stream_upstream_random_module,,stream\ngx_stream_upstream_random_module.c,ngx_module_t ngx_stream_upstream_random_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8938,470714,ngx_stream_upstream_rr_peer_data_t,2,stream\ngx_stream_upstream_round_robin.h.ngx_stream_upstream_rr_peer_data_t,,stream\ngx_stream_upstream_round_robin.h,struct ngx_stream_upstream_rr_peer_data_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8939,470782,ngx_stream_upstream_zone_commands,2,stream\ngx_stream_upstream_zone_module.c.ngx_stream_upstream_zone_commands,,stream\ngx_stream_upstream_zone_module.c,static ngx_command_t[] ngx_stream_upstream_zone_commands,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8940,470797,ngx_stream_upstream_zone_module_ctx,2,stream\ngx_stream_upstream_zone_module.c.ngx_stream_upstream_zone_module_ctx,,stream\ngx_stream_upstream_zone_module.c,ngx_stream_module_t ngx_stream_upstream_zone_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8941,470807,ngx_stream_upstream_zone_module,2,stream\ngx_stream_upstream_zone_module.c.ngx_stream_upstream_zone_module,,stream\ngx_stream_upstream_zone_module.c,ngx_module_t ngx_stream_upstream_zone_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8942,471730,ngx_stream_core_variables,2,stream\ngx_stream_variables.c.ngx_stream_core_variables,,stream\ngx_stream_variables.c,static ngx_stream_variable_t[] ngx_stream_core_variables,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,1,0,1,1,0,0,,0,0,0,0,0,
8943,471911,ngx_stream_variable_null_value,2,stream\ngx_stream_variables.c.ngx_stream_variable_null_value,,stream\ngx_stream_variables.c,ngx_stream_variable_value_t ngx_stream_variable_null_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8944,471916,ngx_stream_variable_true_value,2,stream\ngx_stream_variables.c.ngx_stream_variable_true_value,,stream\ngx_stream_variables.c,ngx_stream_variable_value_t ngx_stream_variable_true_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8945,471921,ngx_stream_variable_depth,2,stream\ngx_stream_variables.c.ngx_stream_variable_depth,,stream\ngx_stream_variables.c,ngx_uint_t ngx_stream_variable_depth,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,8,0,1,1,0,0,,0,0,0,0,0,
8946,474925,ngx_stream_map_t,2,stream\ngx_stream_variables.h.ngx_stream_map_t,,stream\ngx_stream_variables.h,struct ngx_stream_map_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8947,474943,ngx_stream_variable_null_value,2,stream\ngx_stream_variables.h.ngx_stream_variable_null_value,,stream\ngx_stream_variables.h,ngx_stream_variable_value_t ngx_stream_variable_null_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8948,474944,ngx_stream_variable_true_value,2,stream\ngx_stream_variables.h.ngx_stream_variable_true_value,,stream\ngx_stream_variables.h,ngx_stream_variable_value_t ngx_stream_variable_true_value,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8949,474959,ngx_stream_write_filter_ctx_t,2,stream\ngx_stream_write_filter_module.c.ngx_stream_write_filter_ctx_t,,stream\ngx_stream_write_filter_module.c,struct ngx_stream_write_filter_ctx_t,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8950,474972,ngx_stream_write_filter_module_ctx,2,stream\ngx_stream_write_filter_module.c.ngx_stream_write_filter_module_ctx,,stream\ngx_stream_write_filter_module.c,ngx_stream_module_t ngx_stream_write_filter_module_ctx,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
8951,474982,ngx_stream_write_filter_module,2,stream\ngx_stream_write_filter_module.c.ngx_stream_write_filter_module,,stream\ngx_stream_write_filter_module.c,ngx_module_t ngx_stream_write_filter_module,-1.0,-1.0,-1.0,-1.0,0.0,0,0,0,0,0,0,1,1,0,0,,0,0,0,0,0,
